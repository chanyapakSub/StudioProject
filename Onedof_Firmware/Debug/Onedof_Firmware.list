
Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008128  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008300  08008300  00009300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008340  08008340  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  08008340  08008340  00009340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008348  08008348  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008348  08008348  00009348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800834c  0800834c  0000934c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008350  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000010  08008360  0000a010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08008360  0000a3b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b57  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003122  00000000  00000000  00023b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  00026cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a5  00000000  00000000  00028228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bbd  00000000  00000000  000292cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa60  00000000  00000000  00052e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113f7c  00000000  00000000  0006d8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181866  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d2c  00000000  00000000  001818ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001875d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080082e8 	.word	0x080082e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080082e8 	.word	0x080082e8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	2232      	movs	r2, #50	@ 0x32
 8000d92:	4619      	mov	r1, r3
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f001 fee9 	bl	8002b6c <HAL_ADC_Start_DMA>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <Update_adc>:

uint32_t Update_adc(ADC* adc){
 8000da2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	uint64_t sum_adc = 0;
 8000dac:	f04f 0200 	mov.w	r2, #0
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	e011      	b.n	8000de2 <Update_adc+0x40>
		sum_adc += adc -> adc_buffer[i];
 8000dbe:	7bfa      	ldrb	r2, [r7, #15]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	461c      	mov	r4, r3
 8000dca:	4615      	mov	r5, r2
 8000dcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000dd0:	eb12 0804 	adds.w	r8, r2, r4
 8000dd4:	eb43 0905 	adc.w	r9, r3, r5
 8000dd8:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	3301      	adds	r3, #1
 8000de0:	73fb      	strb	r3, [r7, #15]
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	2b31      	cmp	r3, #49	@ 0x31
 8000de6:	d9ea      	bls.n	8000dbe <Update_adc+0x1c>
	}
	return adc -> adc_avg = sum_adc / 50;
 8000de8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000dec:	f04f 0232 	mov.w	r2, #50	@ 0x32
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	f7ff fe4e 	bl	8000a94 <__aeabi_uldivmod>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e18:	f001 fa3b 	bl	8002292 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1c:	f000 f856 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e20:	f000 fade 	bl	80013e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e24:	f000 fab2 	bl	800138c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000e28:	f000 f912 	bl	8001050 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000e2c:	f000 f95a 	bl	80010e4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e30:	f000 fa08 	bl	8001244 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e34:	f000 fa54 	bl	80012e0 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000e38:	f000 f892 	bl	8000f60 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //Update command timer
  HAL_TIM_Base_Start_IT(&htim3);
 8000e3c:	4818      	ldr	r0, [pc, #96]	@ (8000ea0 <main+0x8c>)
 8000e3e:	f004 fee7 	bl	8005c10 <HAL_TIM_Base_Start_IT>

  //PWM generator
  HAL_TIM_Base_Start(&htim1);
 8000e42:	4818      	ldr	r0, [pc, #96]	@ (8000ea4 <main+0x90>)
 8000e44:	f004 fe74 	bl	8005b30 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4816      	ldr	r0, [pc, #88]	@ (8000ea4 <main+0x90>)
 8000e4c:	f004 ffba 	bl	8005dc4 <HAL_TIM_PWM_Start>

  //Encoder reader
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000e50:	213c      	movs	r1, #60	@ 0x3c
 8000e52:	4815      	ldr	r0, [pc, #84]	@ (8000ea8 <main+0x94>)
 8000e54:	f005 f96e 	bl	8006134 <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, 8192, 2000, 65536);
 8000e58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e5c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e64:	4811      	ldr	r0, [pc, #68]	@ (8000eac <main+0x98>)
 8000e66:	f000 fdb6 	bl	80019d6 <QEI_init>

  //Current reader
  ADC_init(&hadc1, &current_sensor);
 8000e6a:	4911      	ldr	r1, [pc, #68]	@ (8000eb0 <main+0x9c>)
 8000e6c:	4811      	ldr	r0, [pc, #68]	@ (8000eb4 <main+0xa0>)
 8000e6e:	f7ff ff89 	bl	8000d84 <ADC_init>

  //Position PID
  PID_init(&p_pid, p_kp, p_ki, p_kd, 0.0008);
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <main+0xa4>)
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <main+0xa8>)
 8000e7a:	ed93 7a00 	vldr	s14, [r3]
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <main+0xac>)
 8000e80:	edd3 6a00 	vldr	s13, [r3]
 8000e84:	eddf 1a0f 	vldr	s3, [pc, #60]	@ 8000ec4 <main+0xb0>
 8000e88:	eeb0 1a66 	vmov.f32	s2, s13
 8000e8c:	eef0 0a47 	vmov.f32	s1, s14
 8000e90:	eeb0 0a67 	vmov.f32	s0, s15
 8000e94:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <main+0xb4>)
 8000e96:	f000 fc01 	bl	800169c <PID_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e9a:	bf00      	nop
 8000e9c:	e7fd      	b.n	8000e9a <main+0x86>
 8000e9e:	bf00      	nop
 8000ea0:	200001d8 	.word	0x200001d8
 8000ea4:	2000018c 	.word	0x2000018c
 8000ea8:	20000224 	.word	0x20000224
 8000eac:	20000340 	.word	0x20000340
 8000eb0:	20000274 	.word	0x20000274
 8000eb4:	2000002c 	.word	0x2000002c
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000390 	.word	0x20000390
 8000ec0:	20000394 	.word	0x20000394
 8000ec4:	3a51b717 	.word	0x3a51b717
 8000ec8:	20000380 	.word	0x20000380

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b094      	sub	sp, #80	@ 0x50
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0318 	add.w	r3, r7, #24
 8000ed6:	2238      	movs	r2, #56	@ 0x38
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f007 f9d8 	bl	8008290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f003 fd96 	bl	8004a20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000efc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efe:	2302      	movs	r3, #2
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f02:	2303      	movs	r3, #3
 8000f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000f06:	2306      	movs	r3, #6
 8000f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f0a:	2355      	movs	r3, #85	@ 0x55
 8000f0c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f16:	2302      	movs	r3, #2
 8000f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1a:	f107 0318 	add.w	r3, r7, #24
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f003 fe32 	bl	8004b88 <HAL_RCC_OscConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000f2a:	f000 fbb1 	bl	8001690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2e:	230f      	movs	r3, #15
 8000f30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f32:	2303      	movs	r3, #3
 8000f34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2104      	movs	r1, #4
 8000f46:	4618      	mov	r0, r3
 8000f48:	f004 f930 	bl	80051ac <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f52:	f000 fb9d 	bl	8001690 <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	3750      	adds	r7, #80	@ 0x50
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	@ 0x30
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2220      	movs	r2, #32
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f007 f989 	bl	8008290 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f7e:	4b32      	ldr	r3, [pc, #200]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000f80:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f86:	4b30      	ldr	r3, [pc, #192]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000f88:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f94:	4b2c      	ldr	r3, [pc, #176]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fa0:	4b29      	ldr	r3, [pc, #164]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa6:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000fa8:	2204      	movs	r2, #4
 8000faa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fac:	4b26      	ldr	r3, [pc, #152]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fb2:	4b25      	ldr	r3, [pc, #148]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fb8:	4b23      	ldr	r3, [pc, #140]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fbe:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc6:	4b20      	ldr	r3, [pc, #128]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fda:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fe0:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe8:	4817      	ldr	r0, [pc, #92]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8000fea:	f001 fc03 	bl	80027f4 <HAL_ADC_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ff4:	f000 fb4c 	bl	8001690 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001000:	4619      	mov	r1, r3
 8001002:	4811      	ldr	r0, [pc, #68]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8001004:	f002 fed0 	bl	8003da8 <HAL_ADCEx_MultiModeConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800100e:	f000 fb3f 	bl	8001690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001012:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <MX_ADC1_Init+0xec>)
 8001014:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001016:	2306      	movs	r3, #6
 8001018:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800101e:	237f      	movs	r3, #127	@ 0x7f
 8001020:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001022:	2304      	movs	r3, #4
 8001024:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	@ (8001048 <MX_ADC1_Init+0xe8>)
 8001030:	f002 f8f8 	bl	8003224 <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800103a:	f000 fb29 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	3730      	adds	r7, #48	@ 0x30
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000002c 	.word	0x2000002c
 800104c:	04300002 	.word	0x04300002

08001050 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001054:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <MX_LPUART1_UART_Init+0x8c>)
 8001056:	4a22      	ldr	r2, [pc, #136]	@ (80010e0 <MX_LPUART1_UART_Init+0x90>)
 8001058:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800105a:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <MX_LPUART1_UART_Init+0x8c>)
 800105c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001060:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <MX_LPUART1_UART_Init+0x8c>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001068:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <MX_LPUART1_UART_Init+0x8c>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800106e:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <MX_LPUART1_UART_Init+0x8c>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <MX_LPUART1_UART_Init+0x8c>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <MX_LPUART1_UART_Init+0x8c>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001080:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <MX_LPUART1_UART_Init+0x8c>)
 8001082:	2200      	movs	r2, #0
 8001084:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <MX_LPUART1_UART_Init+0x8c>)
 8001088:	2200      	movs	r2, #0
 800108a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <MX_LPUART1_UART_Init+0x8c>)
 800108e:	2200      	movs	r2, #0
 8001090:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001092:	4812      	ldr	r0, [pc, #72]	@ (80010dc <MX_LPUART1_UART_Init+0x8c>)
 8001094:	f006 fa8e 	bl	80075b4 <HAL_UART_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800109e:	f000 faf7 	bl	8001690 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a2:	2100      	movs	r1, #0
 80010a4:	480d      	ldr	r0, [pc, #52]	@ (80010dc <MX_LPUART1_UART_Init+0x8c>)
 80010a6:	f007 f829 	bl	80080fc <HAL_UARTEx_SetTxFifoThreshold>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80010b0:	f000 faee 	bl	8001690 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b4:	2100      	movs	r1, #0
 80010b6:	4809      	ldr	r0, [pc, #36]	@ (80010dc <MX_LPUART1_UART_Init+0x8c>)
 80010b8:	f007 f85e 	bl	8008178 <HAL_UARTEx_SetRxFifoThreshold>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80010c2:	f000 fae5 	bl	8001690 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <MX_LPUART1_UART_Init+0x8c>)
 80010c8:	f006 ffdf 	bl	800808a <HAL_UARTEx_DisableFifoMode>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80010d2:	f000 fadd 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200000f8 	.word	0x200000f8
 80010e0:	40008000 	.word	0x40008000

080010e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b09c      	sub	sp, #112	@ 0x70
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001104:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
 8001114:	615a      	str	r2, [r3, #20]
 8001116:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2234      	movs	r2, #52	@ 0x34
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f007 f8b6 	bl	8008290 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001124:	4b45      	ldr	r3, [pc, #276]	@ (800123c <MX_TIM1_Init+0x158>)
 8001126:	4a46      	ldr	r2, [pc, #280]	@ (8001240 <MX_TIM1_Init+0x15c>)
 8001128:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800112a:	4b44      	ldr	r3, [pc, #272]	@ (800123c <MX_TIM1_Init+0x158>)
 800112c:	22a9      	movs	r2, #169	@ 0xa9
 800112e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b42      	ldr	r3, [pc, #264]	@ (800123c <MX_TIM1_Init+0x158>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001136:	4b41      	ldr	r3, [pc, #260]	@ (800123c <MX_TIM1_Init+0x158>)
 8001138:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800113c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113e:	4b3f      	ldr	r3, [pc, #252]	@ (800123c <MX_TIM1_Init+0x158>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001144:	4b3d      	ldr	r3, [pc, #244]	@ (800123c <MX_TIM1_Init+0x158>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114a:	4b3c      	ldr	r3, [pc, #240]	@ (800123c <MX_TIM1_Init+0x158>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001150:	483a      	ldr	r0, [pc, #232]	@ (800123c <MX_TIM1_Init+0x158>)
 8001152:	f004 fc95 	bl	8005a80 <HAL_TIM_Base_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800115c:	f000 fa98 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001164:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001166:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800116a:	4619      	mov	r1, r3
 800116c:	4833      	ldr	r0, [pc, #204]	@ (800123c <MX_TIM1_Init+0x158>)
 800116e:	f005 fad3 	bl	8006718 <HAL_TIM_ConfigClockSource>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001178:	f000 fa8a 	bl	8001690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800117c:	482f      	ldr	r0, [pc, #188]	@ (800123c <MX_TIM1_Init+0x158>)
 800117e:	f004 fdbf 	bl	8005d00 <HAL_TIM_PWM_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001188:	f000 fa82 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001198:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800119c:	4619      	mov	r1, r3
 800119e:	4827      	ldr	r0, [pc, #156]	@ (800123c <MX_TIM1_Init+0x158>)
 80011a0:	f006 f898 	bl	80072d4 <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011aa:	f000 fa71 	bl	8001690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ae:	2360      	movs	r3, #96	@ 0x60
 80011b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b6:	2300      	movs	r3, #0
 80011b8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011ba:	2300      	movs	r3, #0
 80011bc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80011be:	2304      	movs	r3, #4
 80011c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	481a      	ldr	r0, [pc, #104]	@ (800123c <MX_TIM1_Init+0x158>)
 80011d4:	f005 f98c 	bl	80064f0 <HAL_TIM_PWM_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011de:	f000 fa57 	bl	8001690 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001208:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001212:	2300      	movs	r3, #0
 8001214:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4619      	mov	r1, r3
 800121e:	4807      	ldr	r0, [pc, #28]	@ (800123c <MX_TIM1_Init+0x158>)
 8001220:	f006 f8ee 	bl	8007400 <HAL_TIMEx_ConfigBreakDeadTime>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800122a:	f000 fa31 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800122e:	4803      	ldr	r0, [pc, #12]	@ (800123c <MX_TIM1_Init+0x158>)
 8001230:	f000 ff54 	bl	80020dc <HAL_TIM_MspPostInit>

}
 8001234:	bf00      	nop
 8001236:	3770      	adds	r7, #112	@ 0x70
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000018c 	.word	0x2000018c
 8001240:	40012c00 	.word	0x40012c00

08001244 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001262:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <MX_TIM3_Init+0x94>)
 8001264:	4a1d      	ldr	r2, [pc, #116]	@ (80012dc <MX_TIM3_Init+0x98>)
 8001266:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001268:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <MX_TIM3_Init+0x94>)
 800126a:	22a9      	movs	r2, #169	@ 0xa9
 800126c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <MX_TIM3_Init+0x94>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001274:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <MX_TIM3_Init+0x94>)
 8001276:	2263      	movs	r2, #99	@ 0x63
 8001278:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <MX_TIM3_Init+0x94>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <MX_TIM3_Init+0x94>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001286:	4814      	ldr	r0, [pc, #80]	@ (80012d8 <MX_TIM3_Init+0x94>)
 8001288:	f004 fbfa 	bl	8005a80 <HAL_TIM_Base_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001292:	f000 f9fd 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001296:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800129a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	4619      	mov	r1, r3
 80012a2:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <MX_TIM3_Init+0x94>)
 80012a4:	f005 fa38 	bl	8006718 <HAL_TIM_ConfigClockSource>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80012ae:	f000 f9ef 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	@ (80012d8 <MX_TIM3_Init+0x94>)
 80012c0:	f006 f808 	bl	80072d4 <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80012ca:	f000 f9e1 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200001d8 	.word	0x200001d8
 80012dc:	40000400 	.word	0x40000400

080012e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	@ 0x30
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2224      	movs	r2, #36	@ 0x24
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f006 ffce 	bl	8008290 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012fe:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <MX_TIM4_Init+0xa4>)
 8001300:	4a21      	ldr	r2, [pc, #132]	@ (8001388 <MX_TIM4_Init+0xa8>)
 8001302:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001304:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <MX_TIM4_Init+0xa4>)
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130a:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <MX_TIM4_Init+0xa4>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001310:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <MX_TIM4_Init+0xa4>)
 8001312:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001316:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001318:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <MX_TIM4_Init+0xa4>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131e:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <MX_TIM4_Init+0xa4>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001324:	2303      	movs	r3, #3
 8001326:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800132c:	2301      	movs	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800133c:	2301      	movs	r3, #1
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	4619      	mov	r1, r3
 800134e:	480d      	ldr	r0, [pc, #52]	@ (8001384 <MX_TIM4_Init+0xa4>)
 8001350:	f004 fe4a 	bl	8005fe8 <HAL_TIM_Encoder_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800135a:	f000 f999 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001366:	463b      	mov	r3, r7
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	@ (8001384 <MX_TIM4_Init+0xa4>)
 800136c:	f005 ffb2 	bl	80072d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001376:	f000 f98b 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	3730      	adds	r7, #48	@ 0x30
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000224 	.word	0x20000224
 8001388:	40000800 	.word	0x40000800

0800138c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001392:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <MX_DMA_Init+0x50>)
 8001394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001396:	4a11      	ldr	r2, [pc, #68]	@ (80013dc <MX_DMA_Init+0x50>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6493      	str	r3, [r2, #72]	@ 0x48
 800139e:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <MX_DMA_Init+0x50>)
 80013a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013aa:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <MX_DMA_Init+0x50>)
 80013ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ae:	4a0b      	ldr	r2, [pc, #44]	@ (80013dc <MX_DMA_Init+0x50>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6493      	str	r3, [r2, #72]	@ 0x48
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <MX_DMA_Init+0x50>)
 80013b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	200b      	movs	r0, #11
 80013c8:	f002 fed1 	bl	800416e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013cc:	200b      	movs	r0, #11
 80013ce:	f002 fee8 	bl	80041a2 <HAL_NVIC_EnableIRQ>

}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000

080013e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	@ 0x28
 80013e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	4b5e      	ldr	r3, [pc, #376]	@ (8001570 <MX_GPIO_Init+0x190>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	4a5d      	ldr	r2, [pc, #372]	@ (8001570 <MX_GPIO_Init+0x190>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001402:	4b5b      	ldr	r3, [pc, #364]	@ (8001570 <MX_GPIO_Init+0x190>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800140e:	4b58      	ldr	r3, [pc, #352]	@ (8001570 <MX_GPIO_Init+0x190>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	4a57      	ldr	r2, [pc, #348]	@ (8001570 <MX_GPIO_Init+0x190>)
 8001414:	f043 0320 	orr.w	r3, r3, #32
 8001418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800141a:	4b55      	ldr	r3, [pc, #340]	@ (8001570 <MX_GPIO_Init+0x190>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	4b52      	ldr	r3, [pc, #328]	@ (8001570 <MX_GPIO_Init+0x190>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	4a51      	ldr	r2, [pc, #324]	@ (8001570 <MX_GPIO_Init+0x190>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001432:	4b4f      	ldr	r3, [pc, #316]	@ (8001570 <MX_GPIO_Init+0x190>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b4c      	ldr	r3, [pc, #304]	@ (8001570 <MX_GPIO_Init+0x190>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	4a4b      	ldr	r2, [pc, #300]	@ (8001570 <MX_GPIO_Init+0x190>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144a:	4b49      	ldr	r3, [pc, #292]	@ (8001570 <MX_GPIO_Init+0x190>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direaction_motor_GPIO_Port, Direaction_motor_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2102      	movs	r1, #2
 800145a:	4846      	ldr	r0, [pc, #280]	@ (8001574 <MX_GPIO_Init+0x194>)
 800145c:	f003 fab0 	bl	80049c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800146a:	f003 faa9 	bl	80049c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f240 4116 	movw	r1, #1046	@ 0x416
 8001474:	4840      	ldr	r0, [pc, #256]	@ (8001578 <MX_GPIO_Init+0x198>)
 8001476:	f003 faa3 	bl	80049c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800147a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001480:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4838      	ldr	r0, [pc, #224]	@ (8001574 <MX_GPIO_Init+0x194>)
 8001492:	f003 f913 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 8001496:	2302      	movs	r3, #2
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4831      	ldr	r0, [pc, #196]	@ (8001574 <MX_GPIO_Init+0x194>)
 80014ae:	f003 f905 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 80014b2:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ce:	f003 f8f5 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Reed_switch_pull_Pin;
 80014d2:	23b0      	movs	r3, #176	@ 0xb0
 80014d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4823      	ldr	r0, [pc, #140]	@ (8001574 <MX_GPIO_Init+0x194>)
 80014e6:	f003 f8e9 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 80014ea:	f240 4316 	movw	r3, #1046	@ 0x416
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	481d      	ldr	r0, [pc, #116]	@ (8001578 <MX_GPIO_Init+0x198>)
 8001504:	f003 f8da 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|Emergency_switch_Pin;
 8001508:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800150c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800150e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	4816      	ldr	r0, [pc, #88]	@ (8001578 <MX_GPIO_Init+0x198>)
 8001520:	f003 f8cc 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 8001524:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153c:	f003 f8be 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : joy_switch_1_Pin */
  GPIO_InitStruct.Pin = joy_switch_1_Pin;
 8001540:	2320      	movs	r3, #32
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(joy_switch_1_GPIO_Port, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	4809      	ldr	r0, [pc, #36]	@ (8001578 <MX_GPIO_Init+0x198>)
 8001554:	f003 f8b2 	bl	80046bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	2028      	movs	r0, #40	@ 0x28
 800155e:	f002 fe06 	bl	800416e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001562:	2028      	movs	r0, #40	@ 0x28
 8001564:	f002 fe1d 	bl	80041a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001568:	bf00      	nop
 800156a:	3728      	adds	r7, #40	@ 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40021000 	.word	0x40021000
 8001574:	48000800 	.word	0x48000800
 8001578:	48000400 	.word	0x48000400

0800157c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800157c:	b5b0      	push	{r4, r5, r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a16      	ldr	r2, [pc, #88]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d124      	bne.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0x5a>
		Update_qei(&encoder, &htim4);
 800158c:	4915      	ldr	r1, [pc, #84]	@ (80015e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800158e:	4816      	ldr	r0, [pc, #88]	@ (80015e8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001590:	f000 fa66 	bl	8001a60 <Update_qei>
		Update_adc(&current_sensor);
 8001594:	4815      	ldr	r0, [pc, #84]	@ (80015ec <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001596:	f7ff fc04 	bl	8000da2 <Update_adc>

		static uint64_t timestamp = 0;
		if (timestamp == 8){
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f1a2 0108 	sub.w	r1, r2, #8
 80015a4:	430b      	orrs	r3, r1
 80015a6:	d10d      	bne.n	80015c4 <HAL_TIM_PeriodElapsedCallback+0x48>
			Update_position_control(setpoint);
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	eeb0 0a67 	vmov.f32	s0, s15
 80015b2:	f000 f833 	bl	800161c <Update_position_control>
			timestamp = 0;
 80015b6:	490e      	ldr	r1, [pc, #56]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9c1 2300 	strd	r2, r3, [r1]
		}
		timestamp++;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	1c54      	adds	r4, r2, #1
 80015cc:	f143 0500 	adc.w	r5, r3, #0
 80015d0:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80015d2:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bdb0      	pop	{r4, r5, r7, pc}
 80015de:	bf00      	nop
 80015e0:	200001d8 	.word	0x200001d8
 80015e4:	20000224 	.word	0x20000224
 80015e8:	20000340 	.word	0x20000340
 80015ec:	20000274 	.word	0x20000274
 80015f0:	200003a0 	.word	0x200003a0
 80015f4:	20000270 	.word	0x20000270

080015f8 <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001608:	d102      	bne.n	8001610 <HAL_GPIO_EXTI_Callback+0x18>
		Reset_qei(&encoder);
 800160a:	4803      	ldr	r0, [pc, #12]	@ (8001618 <HAL_GPIO_EXTI_Callback+0x20>)
 800160c:	f000 fb9c 	bl	8001d48 <Reset_qei>
	}
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000340 	.word	0x20000340

0800161c <Update_position_control>:
// Velocity control update
void Update_velocity_control(){

}
// Position control update
void Update_position_control(float32_t s){
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af02      	add	r7, sp, #8
 8001622:	ed87 0a01 	vstr	s0, [r7, #4]
	p_e = s - Get_mm(&encoder);
 8001626:	4814      	ldr	r0, [pc, #80]	@ (8001678 <Update_position_control+0x5c>)
 8001628:	f000 fbbc 	bl	8001da4 <Get_mm>
 800162c:	eeb0 7a40 	vmov.f32	s14, s0
 8001630:	edd7 7a01 	vldr	s15, [r7, #4]
 8001634:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001638:	4b10      	ldr	r3, [pc, #64]	@ (800167c <Update_position_control+0x60>)
 800163a:	edc3 7a00 	vstr	s15, [r3]
	p_output = Update_pid(&p_pid, p_e, 900, 1000);
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <Update_position_control+0x60>)
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001648:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800164c:	eeb0 0a67 	vmov.f32	s0, s15
 8001650:	480b      	ldr	r0, [pc, #44]	@ (8001680 <Update_position_control+0x64>)
 8001652:	f000 f841 	bl	80016d8 <Update_pid>
 8001656:	4603      	mov	r3, r0
 8001658:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <Update_position_control+0x68>)
 800165a:	6013      	str	r3, [r2, #0]
	Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, p_output);
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <Update_position_control+0x68>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2302      	movs	r3, #2
 8001664:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <Update_position_control+0x6c>)
 8001666:	2100      	movs	r1, #0
 8001668:	4808      	ldr	r0, [pc, #32]	@ (800168c <Update_position_control+0x70>)
 800166a:	f000 f91d 	bl	80018a8 <Update_pwm>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000340 	.word	0x20000340
 800167c:	20000398 	.word	0x20000398
 8001680:	20000380 	.word	0x20000380
 8001684:	2000039c 	.word	0x2000039c
 8001688:	48000800 	.word	0x48000800
 800168c:	2000018c 	.word	0x2000018c

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <Error_Handler+0x8>

0800169c <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6178      	str	r0, [r7, #20]
 80016a4:	ed87 0a04 	vstr	s0, [r7, #16]
 80016a8:	edc7 0a03 	vstr	s1, [r7, #12]
 80016ac:	ed87 1a02 	vstr	s2, [r7, #8]
 80016b0:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	60da      	str	r2, [r3, #12]
}
 80016cc:	bf00      	nop
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, int32_t pid_sat, int32_t plant_sat) {
 80016d8:	b480      	push	{r7}
 80016da:	b08b      	sub	sp, #44	@ 0x2c
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80016e4:	6079      	str	r1, [r7, #4]
 80016e6:	603a      	str	r2, [r7, #0]
	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	617b      	str	r3, [r7, #20]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80016f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 80016fe:	4b67      	ldr	r3, [pc, #412]	@ (800189c <Update_pid+0x1c4>)
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ed97 7a05 	vldr	s14, [r7, #20]
 8001708:	ee37 7a67 	vsub.f32	s14, s14, s15
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001712:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	ed93 7a03 	vldr	s14, [r3, #12]
 800171c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001720:	edc7 7a08 	vstr	s15, [r7, #32]
	float32_t i_term = y_n_1 + (e_n * pid -> sampt * pid -> ki);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	ed93 7a03 	vldr	s14, [r3, #12]
 800172a:	edd7 7a05 	vldr	s15, [r7, #20]
 800172e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	edd3 7a01 	vldr	s15, [r3, #4]
 8001738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800173c:	4b58      	ldr	r3, [pc, #352]	@ (80018a0 <Update_pid+0x1c8>)
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001746:	edc7 7a07 	vstr	s15, [r7, #28]
	// Check kp ki kd
	if (pid -> kp == 0){
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001758:	d103      	bne.n	8001762 <Update_pid+0x8a>
		p_term = 0;
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001760:	e016      	b.n	8001790 <Update_pid+0xb8>
	}
	else if(pid -> ki == 0){
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	edd3 7a01 	vldr	s15, [r3, #4]
 8001768:	eef5 7a40 	vcmp.f32	s15, #0.0
 800176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001770:	d103      	bne.n	800177a <Update_pid+0xa2>
		i_term = 0;
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	e00a      	b.n	8001790 <Update_pid+0xb8>
	}
	else if(pid -> kd == 0){
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001780:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d102      	bne.n	8001790 <Update_pid+0xb8>
		d_term = 0;
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
	}
	y_n = p_term + d_term + i_term; // pid output
 8001790:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001794:	edd7 7a08 	vldr	s15, [r7, #32]
 8001798:	ee37 7a27 	vadd.f32	s14, s14, s15
 800179c:	edd7 7a07 	vldr	s15, [r7, #28]
 80017a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a4:	4b3f      	ldr	r3, [pc, #252]	@ (80018a4 <Update_pid+0x1cc>)
 80017a6:	edc3 7a00 	vstr	s15, [r3]
	uint8_t is_sat = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	76fb      	strb	r3, [r7, #27]
	// check is pid output is saturating
	if((int32_t)y_n > pid_sat){
 80017ae:	4b3d      	ldr	r3, [pc, #244]	@ (80018a4 <Update_pid+0x1cc>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b8:	ee17 2a90 	vmov	r2, s15
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4293      	cmp	r3, r2
 80017c0:	da02      	bge.n	80017c8 <Update_pid+0xf0>
		is_sat = 1;
 80017c2:	2301      	movs	r3, #1
 80017c4:	76fb      	strb	r3, [r7, #27]
 80017c6:	e00c      	b.n	80017e2 <Update_pid+0x10a>
	}
	else if((int32_t)y_n < -(pid_sat)){
 80017c8:	4b36      	ldr	r3, [pc, #216]	@ (80018a4 <Update_pid+0x1cc>)
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d2:	ee17 2a90 	vmov	r2, s15
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	425b      	negs	r3, r3
 80017da:	429a      	cmp	r2, r3
 80017dc:	da01      	bge.n	80017e2 <Update_pid+0x10a>
		is_sat = 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	76fb      	strb	r3, [r7, #27]
	}
	// check is error sign and output sign is equal
	if(e_n * y_n == fabs(e_n * y_n)){
 80017e2:	4b30      	ldr	r3, [pc, #192]	@ (80018a4 <Update_pid+0x1cc>)
 80017e4:	ed93 7a00 	vldr	s14, [r3]
 80017e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80017ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f0:	4b2c      	ldr	r3, [pc, #176]	@ (80018a4 <Update_pid+0x1cc>)
 80017f2:	edd3 6a00 	vldr	s13, [r3]
 80017f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80017fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fe:	eef0 7ae7 	vabs.f32	s15, s15
 8001802:	eeb4 7a67 	vcmp.f32	s14, s15
 8001806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180a:	d10b      	bne.n	8001824 <Update_pid+0x14c>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 800180c:	7efb      	ldrb	r3, [r7, #27]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d108      	bne.n	8001824 <Update_pid+0x14c>
			y_n = p_term + d_term;
 8001812:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001816:	edd7 7a08 	vldr	s15, [r7, #32]
 800181a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181e:	4b21      	ldr	r3, [pc, #132]	@ (80018a4 <Update_pid+0x1cc>)
 8001820:	edc3 7a00 	vstr	s15, [r3]
		}
	}
	// Plant saturation
	if((int32_t)y_n > plant_sat){
 8001824:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <Update_pid+0x1cc>)
 8001826:	edd3 7a00 	vldr	s15, [r3]
 800182a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800182e:	ee17 2a90 	vmov	r2, s15
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	4293      	cmp	r3, r2
 8001836:	da08      	bge.n	800184a <Update_pid+0x172>
		y_n = plant_sat;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	ee07 3a90 	vmov	s15, r3
 800183e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001842:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <Update_pid+0x1cc>)
 8001844:	edc3 7a00 	vstr	s15, [r3]
 8001848:	e013      	b.n	8001872 <Update_pid+0x19a>
	}
	else if((int32_t)y_n < -(plant_sat)){
 800184a:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <Update_pid+0x1cc>)
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001854:	ee17 2a90 	vmov	r2, s15
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	425b      	negs	r3, r3
 800185c:	429a      	cmp	r2, r3
 800185e:	da08      	bge.n	8001872 <Update_pid+0x19a>
		y_n = (-(plant_sat));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	425b      	negs	r3, r3
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186c:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <Update_pid+0x1cc>)
 800186e:	edc3 7a00 	vstr	s15, [r3]
	}
	// Update value
	y_n_1 = y_n;
 8001872:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <Update_pid+0x1cc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <Update_pid+0x1c8>)
 8001878:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 800187a:	4a08      	ldr	r2, [pc, #32]	@ (800189c <Update_pid+0x1c4>)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	6013      	str	r3, [r2, #0]
	return y_n;
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <Update_pid+0x1cc>)
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800188a:	ee17 3a90 	vmov	r3, s15
}
 800188e:	4618      	mov	r0, r3
 8001890:	372c      	adds	r7, #44	@ 0x2c
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	200003a8 	.word	0x200003a8
 80018a0:	200003ac 	.word	0x200003ac
 80018a4:	200003b0 	.word	0x200003b0

080018a8 <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 80018a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018ac:	b08b      	sub	sp, #44	@ 0x2c
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80018b2:	61fa      	str	r2, [r7, #28]
 80018b4:	461a      	mov	r2, r3
 80018b6:	460b      	mov	r3, r1
 80018b8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80018ba:	4613      	mov	r3, r2
 80018bc:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 80018be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d111      	bne.n	80018e8 <Update_pwm+0x40>
 80018c4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80018c6:	f7fe fdf9 	bl	80004bc <__aeabi_i2d>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	613a      	str	r2, [r7, #16]
 80018d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	681c      	ldr	r4, [r3, #0]
 80018da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018de:	f7ff f869 	bl	80009b4 <__aeabi_d2uiz>
 80018e2:	4603      	mov	r3, r0
 80018e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80018e6:	e061      	b.n	80019ac <Update_pwm+0x104>
 80018e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d111      	bne.n	8001912 <Update_pwm+0x6a>
 80018ee:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80018f0:	f7fe fde4 	bl	80004bc <__aeabi_i2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	60ba      	str	r2, [r7, #8]
 80018fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001902:	681c      	ldr	r4, [r3, #0]
 8001904:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001908:	f7ff f854 	bl	80009b4 <__aeabi_d2uiz>
 800190c:	4603      	mov	r3, r0
 800190e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001910:	e04c      	b.n	80019ac <Update_pwm+0x104>
 8001912:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001914:	2b08      	cmp	r3, #8
 8001916:	d111      	bne.n	800193c <Update_pwm+0x94>
 8001918:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800191a:	f7fe fdcf 	bl	80004bc <__aeabi_i2d>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	603a      	str	r2, [r7, #0]
 8001924:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	681c      	ldr	r4, [r3, #0]
 800192e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001932:	f7ff f83f 	bl	80009b4 <__aeabi_d2uiz>
 8001936:	4603      	mov	r3, r0
 8001938:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800193a:	e037      	b.n	80019ac <Update_pwm+0x104>
 800193c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d110      	bne.n	8001964 <Update_pwm+0xbc>
 8001942:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001944:	f7fe fdba 	bl	80004bc <__aeabi_i2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4615      	mov	r5, r2
 800194e:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	681c      	ldr	r4, [r3, #0]
 8001956:	4628      	mov	r0, r5
 8001958:	4631      	mov	r1, r6
 800195a:	f7ff f82b 	bl	80009b4 <__aeabi_d2uiz>
 800195e:	4603      	mov	r3, r0
 8001960:	6423      	str	r3, [r4, #64]	@ 0x40
 8001962:	e023      	b.n	80019ac <Update_pwm+0x104>
 8001964:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001966:	2b10      	cmp	r3, #16
 8001968:	d110      	bne.n	800198c <Update_pwm+0xe4>
 800196a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800196c:	f7fe fda6 	bl	80004bc <__aeabi_i2d>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4692      	mov	sl, r2
 8001976:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	681c      	ldr	r4, [r3, #0]
 800197e:	4650      	mov	r0, sl
 8001980:	4659      	mov	r1, fp
 8001982:	f7ff f817 	bl	80009b4 <__aeabi_d2uiz>
 8001986:	4603      	mov	r3, r0
 8001988:	64a3      	str	r3, [r4, #72]	@ 0x48
 800198a:	e00f      	b.n	80019ac <Update_pwm+0x104>
 800198c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800198e:	f7fe fd95 	bl	80004bc <__aeabi_i2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4690      	mov	r8, r2
 8001998:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	681c      	ldr	r4, [r3, #0]
 80019a0:	4640      	mov	r0, r8
 80019a2:	4649      	mov	r1, r9
 80019a4:	f7ff f806 	bl	80009b4 <__aeabi_d2uiz>
 80019a8:	4603      	mov	r3, r0
 80019aa:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 80019ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	da06      	bge.n	80019c0 <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 80019b2:	8c3b      	ldrh	r3, [r7, #32]
 80019b4:	2200      	movs	r2, #0
 80019b6:	4619      	mov	r1, r3
 80019b8:	69f8      	ldr	r0, [r7, #28]
 80019ba:	f003 f801 	bl	80049c0 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 80019be:	e005      	b.n	80019cc <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 80019c0:	8c3b      	ldrh	r3, [r7, #32]
 80019c2:	2201      	movs	r2, #1
 80019c4:	4619      	mov	r1, r3
 80019c6:	69f8      	ldr	r0, [r7, #28]
 80019c8:	f002 fffa 	bl	80049c0 <HAL_GPIO_WritePin>
}
 80019cc:	bf00      	nop
 80019ce:	372c      	adds	r7, #44	@ 0x2c
 80019d0:	46bd      	mov	sp, r7
 80019d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080019d6 <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 80019d6:	b480      	push	{r7}
 80019d8:	b085      	sub	sp, #20
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8001a08:	68f9      	ldr	r1, [r7, #12]
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei -> rpm = 0.0;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	631a      	str	r2, [r3, #48]	@ 0x30
	qei -> radps = 0.0;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	635a      	str	r2, [r3, #52]	@ 0x34
	qei -> mmps = 0.0;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	0000      	movs	r0, r0
 8001a5c:	0000      	movs	r0, r0
	...

08001a60 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 8001a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	0fd9      	lsrs	r1, r3, #31
 8001a90:	440b      	add	r3, r1
 8001a92:	105b      	asrs	r3, r3, #1
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dd06      	ble.n	8001aa6 <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695a      	ldr	r2, [r3, #20]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	1ad2      	subs	r2, r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	425b      	negs	r3, r3
 8001ab0:	0fd9      	lsrs	r1, r3, #31
 8001ab2:	440b      	add	r3, r1
 8001ab4:	105b      	asrs	r3, r3, #1
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	da06      	bge.n	8001ac8 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	441a      	add	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	615a      	str	r2, [r3, #20]
	}
	// Update velocity at difference unit
	qei -> pps = (float)qei -> diff_counter_value * (float)qei -> freq;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	qei -> radps = qei -> pps * 2.0 * M_PI / (float)(qei -> ppr);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fcf6 	bl	80004e0 <__aeabi_f2d>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	f7fe fb94 	bl	8000224 <__adddf3>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	a38c      	add	r3, pc, #560	@ (adr r3, 8001d38 <Update_qei+0x2d8>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	f7fe fd41 	bl	8000590 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4692      	mov	sl, r2
 8001b14:	469b      	mov	fp, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b22:	ee17 0a90 	vmov	r0, s15
 8001b26:	f7fe fcdb 	bl	80004e0 <__aeabi_f2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4650      	mov	r0, sl
 8001b30:	4659      	mov	r1, fp
 8001b32:	f7fe fe57 	bl	80007e4 <__aeabi_ddiv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7fe ff59 	bl	80009f4 <__aeabi_d2f>
 8001b42:	4602      	mov	r2, r0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	635a      	str	r2, [r3, #52]	@ 0x34
	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fcc7 	bl	80004e0 <__aeabi_f2d>
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b7a      	ldr	r3, [pc, #488]	@ (8001d40 <Update_qei+0x2e0>)
 8001b58:	f7fe fd1a 	bl	8000590 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4692      	mov	sl, r2
 8001b62:	469b      	mov	fp, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	ee07 3a90 	vmov	s15, r3
 8001b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b70:	ee17 0a90 	vmov	r0, s15
 8001b74:	f7fe fcb4 	bl	80004e0 <__aeabi_f2d>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4650      	mov	r0, sl
 8001b7e:	4659      	mov	r1, fp
 8001b80:	f7fe fe30 	bl	80007e4 <__aeabi_ddiv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7fe ff32 	bl	80009f4 <__aeabi_d2f>
 8001b90:	4602      	mov	r2, r0
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	631a      	str	r2, [r3, #48]	@ 0x30
	qei -> mmps = qei -> pps * 16.0 / (float)(qei -> ppr);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fca0 	bl	80004e0 <__aeabi_f2d>
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	4b67      	ldr	r3, [pc, #412]	@ (8001d44 <Update_qei+0x2e4>)
 8001ba6:	f7fe fcf3 	bl	8000590 <__aeabi_dmul>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4692      	mov	sl, r2
 8001bb0:	469b      	mov	fp, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	ee07 3a90 	vmov	s15, r3
 8001bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bbe:	ee17 0a90 	vmov	r0, s15
 8001bc2:	f7fe fc8d 	bl	80004e0 <__aeabi_f2d>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4650      	mov	r0, sl
 8001bcc:	4659      	mov	r1, fp
 8001bce:	f7fe fe09 	bl	80007e4 <__aeabi_ddiv>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f7fe ff0b 	bl	80009f4 <__aeabi_d2f>
 8001bde:	4602      	mov	r2, r0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	639a      	str	r2, [r3, #56]	@ 0x38
	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	6949      	ldr	r1, [r1, #20]
 8001bee:	17c8      	asrs	r0, r1, #31
 8001bf0:	460c      	mov	r4, r1
 8001bf2:	4605      	mov	r5, r0
 8001bf4:	eb12 0804 	adds.w	r8, r2, r4
 8001bf8:	eb43 0905 	adc.w	r9, r3, r5
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	e9c3 8906 	strd	r8, r9, [r3, #24]
	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc6a 	bl	80004e0 <__aeabi_f2d>
 8001c0c:	4604      	mov	r4, r0
 8001c0e:	460d      	mov	r5, r1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1c:	ee17 0a90 	vmov	r0, s15
 8001c20:	f7fe fc5e 	bl	80004e0 <__aeabi_f2d>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	f7fe fafc 	bl	8000224 <__adddf3>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	a340      	add	r3, pc, #256	@ (adr r3, 8001d38 <Update_qei+0x2d8>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fca9 	bl	8000590 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4690      	mov	r8, r2
 8001c44:	4699      	mov	r9, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	ee07 3a90 	vmov	s15, r3
 8001c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c52:	ee17 0a90 	vmov	r0, s15
 8001c56:	f7fe fc43 	bl	80004e0 <__aeabi_f2d>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4640      	mov	r0, r8
 8001c60:	4649      	mov	r1, r9
 8001c62:	f7fe fdbf 	bl	80007e4 <__aeabi_ddiv>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	f7fe fad9 	bl	8000224 <__adddf3>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe febb 	bl	80009f4 <__aeabi_d2f>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	ed93 7a08 	vldr	s14, [r3, #32]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ca2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	edc3 7a08 	vstr	s15, [r3, #32]
	qei -> mm += (float)qei -> diff_counter_value * 16.0 / (float)(qei -> ppr); // for lead 16 mm.
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc13 	bl	80004e0 <__aeabi_f2d>
 8001cba:	4604      	mov	r4, r0
 8001cbc:	460d      	mov	r5, r1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	ee07 3a90 	vmov	s15, r3
 8001cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cca:	ee17 0a90 	vmov	r0, s15
 8001cce:	f7fe fc07 	bl	80004e0 <__aeabi_f2d>
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <Update_qei+0x2e4>)
 8001cd8:	f7fe fc5a 	bl	8000590 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4690      	mov	r8, r2
 8001ce2:	4699      	mov	r9, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	ee07 3a90 	vmov	s15, r3
 8001cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf0:	ee17 0a90 	vmov	r0, s15
 8001cf4:	f7fe fbf4 	bl	80004e0 <__aeabi_f2d>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4640      	mov	r0, r8
 8001cfe:	4649      	mov	r1, r9
 8001d00:	f7fe fd70 	bl	80007e4 <__aeabi_ddiv>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4620      	mov	r0, r4
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	f7fe fa8a 	bl	8000224 <__adddf3>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7fe fe6c 	bl	80009f4 <__aeabi_d2f>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	629a      	str	r2, [r3, #40]	@ 0x28
	// Update acceleration at difference

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	611a      	str	r2, [r3, #16]

}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d34:	f3af 8000 	nop.w
 8001d38:	54442d18 	.word	0x54442d18
 8001d3c:	400921fb 	.word	0x400921fb
 8001d40:	404e0000 	.word	0x404e0000
 8001d44:	40300000 	.word	0x40300000

08001d48 <Reset_qei>:

void Reset_qei(QEI* qei){
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	qei -> counter_value[NEW] = 0;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
	qei -> pps = 0;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei -> rpm = 0;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	@ 0x30
	qei -> radps =0;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <Get_mm>:

float32_t Get_mmps(QEI* qei){
	return qei -> mmps;
}
float32_t Get_mm(QEI* qei){
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	return qei -> mm;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db0:	ee07 3a90 	vmov	s15, r3
}
 8001db4:	eeb0 0a67 	vmov.f32	s0, s15
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <HAL_MspInit+0x44>)
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dce:	4a0e      	ldr	r2, [pc, #56]	@ (8001e08 <HAL_MspInit+0x44>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <HAL_MspInit+0x44>)
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <HAL_MspInit+0x44>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de6:	4a08      	ldr	r2, [pc, #32]	@ (8001e08 <HAL_MspInit+0x44>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_MspInit+0x44>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001dfa:	f002 feb5 	bl	8004b68 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000

08001e0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b09e      	sub	sp, #120	@ 0x78
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e24:	f107 0310 	add.w	r3, r7, #16
 8001e28:	2254      	movs	r2, #84	@ 0x54
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f006 fa2f 	bl	8008290 <memset>
  if(hadc->Instance==ADC1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e3a:	d167      	bne.n	8001f0c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e40:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001e42:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e46:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 fbc9 	bl	80055e4 <HAL_RCCEx_PeriphCLKConfig>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e58:	f7ff fc1a 	bl	8001690 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f14 <HAL_ADC_MspInit+0x108>)
 8001e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e60:	4a2c      	ldr	r2, [pc, #176]	@ (8001f14 <HAL_ADC_MspInit+0x108>)
 8001e62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e68:	4b2a      	ldr	r3, [pc, #168]	@ (8001f14 <HAL_ADC_MspInit+0x108>)
 8001e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e74:	4b27      	ldr	r3, [pc, #156]	@ (8001f14 <HAL_ADC_MspInit+0x108>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e78:	4a26      	ldr	r2, [pc, #152]	@ (8001f14 <HAL_ADC_MspInit+0x108>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e80:	4b24      	ldr	r3, [pc, #144]	@ (8001f14 <HAL_ADC_MspInit+0x108>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e90:	2303      	movs	r3, #3
 8001e92:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea2:	f002 fc0b 	bl	80046bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f18 <HAL_ADC_MspInit+0x10c>)
 8001ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f1c <HAL_ADC_MspInit+0x110>)
 8001eaa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <HAL_ADC_MspInit+0x10c>)
 8001eae:	2205      	movs	r2, #5
 8001eb0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <HAL_ADC_MspInit+0x10c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb8:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <HAL_ADC_MspInit+0x10c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ebe:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <HAL_ADC_MspInit+0x10c>)
 8001ec0:	2280      	movs	r2, #128	@ 0x80
 8001ec2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ec4:	4b14      	ldr	r3, [pc, #80]	@ (8001f18 <HAL_ADC_MspInit+0x10c>)
 8001ec6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ecc:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <HAL_ADC_MspInit+0x10c>)
 8001ece:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ed2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ed4:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <HAL_ADC_MspInit+0x10c>)
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001eda:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <HAL_ADC_MspInit+0x10c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ee0:	480d      	ldr	r0, [pc, #52]	@ (8001f18 <HAL_ADC_MspInit+0x10c>)
 8001ee2:	f002 f979 	bl	80041d8 <HAL_DMA_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001eec:	f7ff fbd0 	bl	8001690 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a09      	ldr	r2, [pc, #36]	@ (8001f18 <HAL_ADC_MspInit+0x10c>)
 8001ef4:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ef6:	4a08      	ldr	r2, [pc, #32]	@ (8001f18 <HAL_ADC_MspInit+0x10c>)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	2012      	movs	r0, #18
 8001f02:	f002 f934 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f06:	2012      	movs	r0, #18
 8001f08:	f002 f94b 	bl	80041a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f0c:	bf00      	nop
 8001f0e:	3778      	adds	r7, #120	@ 0x78
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	20000098 	.word	0x20000098
 8001f1c:	40020008 	.word	0x40020008

08001f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b09e      	sub	sp, #120	@ 0x78
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	2254      	movs	r2, #84	@ 0x54
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f006 f9a5 	bl	8008290 <memset>
  if(huart->Instance==LPUART1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc8 <HAL_UART_MspInit+0xa8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d136      	bne.n	8001fbe <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f50:	2320      	movs	r3, #32
 8001f52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f54:	2300      	movs	r3, #0
 8001f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 fb41 	bl	80055e4 <HAL_RCCEx_PeriphCLKConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f68:	f7ff fb92 	bl	8001690 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f6c:	4b17      	ldr	r3, [pc, #92]	@ (8001fcc <HAL_UART_MspInit+0xac>)
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f70:	4a16      	ldr	r2, [pc, #88]	@ (8001fcc <HAL_UART_MspInit+0xac>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001f78:	4b14      	ldr	r3, [pc, #80]	@ (8001fcc <HAL_UART_MspInit+0xac>)
 8001f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <HAL_UART_MspInit+0xac>)
 8001f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f88:	4a10      	ldr	r2, [pc, #64]	@ (8001fcc <HAL_UART_MspInit+0xac>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f90:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <HAL_UART_MspInit+0xac>)
 8001f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001f9c:	230c      	movs	r3, #12
 8001f9e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001fac:	230c      	movs	r3, #12
 8001fae:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fba:	f002 fb7f 	bl	80046bc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001fbe:	bf00      	nop
 8001fc0:	3778      	adds	r7, #120	@ 0x78
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40008000 	.word	0x40008000
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a16      	ldr	r2, [pc, #88]	@ (8002038 <HAL_TIM_Base_MspInit+0x68>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10c      	bne.n	8001ffc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fe2:	4b16      	ldr	r3, [pc, #88]	@ (800203c <HAL_TIM_Base_MspInit+0x6c>)
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe6:	4a15      	ldr	r2, [pc, #84]	@ (800203c <HAL_TIM_Base_MspInit+0x6c>)
 8001fe8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fec:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fee:	4b13      	ldr	r3, [pc, #76]	@ (800203c <HAL_TIM_Base_MspInit+0x6c>)
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ffa:	e018      	b.n	800202e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0f      	ldr	r2, [pc, #60]	@ (8002040 <HAL_TIM_Base_MspInit+0x70>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d113      	bne.n	800202e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002006:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <HAL_TIM_Base_MspInit+0x6c>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200a:	4a0c      	ldr	r2, [pc, #48]	@ (800203c <HAL_TIM_Base_MspInit+0x6c>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	6593      	str	r3, [r2, #88]	@ 0x58
 8002012:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <HAL_TIM_Base_MspInit+0x6c>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	201d      	movs	r0, #29
 8002024:	f002 f8a3 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002028:	201d      	movs	r0, #29
 800202a:	f002 f8ba 	bl	80041a2 <HAL_NVIC_EnableIRQ>
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40012c00 	.word	0x40012c00
 800203c:	40021000 	.word	0x40021000
 8002040:	40000400 	.word	0x40000400

08002044 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	@ 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1c      	ldr	r2, [pc, #112]	@ (80020d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d131      	bne.n	80020ca <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002066:	4b1c      	ldr	r3, [pc, #112]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	4a1b      	ldr	r2, [pc, #108]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x94>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6593      	str	r3, [r2, #88]	@ 0x58
 8002072:	4b19      	ldr	r3, [pc, #100]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002082:	4a15      	ldr	r2, [pc, #84]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800208a:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x94>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8002096:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800209a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80020a8:	230a      	movs	r3, #10
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020b6:	f002 fb01 	bl	80046bc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	201e      	movs	r0, #30
 80020c0:	f002 f855 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020c4:	201e      	movs	r0, #30
 80020c6:	f002 f86c 	bl	80041a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020ca:	bf00      	nop
 80020cc:	3728      	adds	r7, #40	@ 0x28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40021000 	.word	0x40021000

080020dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a11      	ldr	r2, [pc, #68]	@ (8002140 <HAL_TIM_MspPostInit+0x64>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d11b      	bne.n	8002136 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fe:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <HAL_TIM_MspPostInit+0x68>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	4a10      	ldr	r2, [pc, #64]	@ (8002144 <HAL_TIM_MspPostInit+0x68>)
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800210a:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <HAL_TIM_MspPostInit+0x68>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 8002116:	2301      	movs	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002126:	2302      	movs	r3, #2
 8002128:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	4619      	mov	r1, r3
 8002130:	4805      	ldr	r0, [pc, #20]	@ (8002148 <HAL_TIM_MspPostInit+0x6c>)
 8002132:	f002 fac3 	bl	80046bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002136:	bf00      	nop
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40012c00 	.word	0x40012c00
 8002144:	40021000 	.word	0x40021000
 8002148:	48000800 	.word	0x48000800

0800214c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <NMI_Handler+0x4>

08002154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <HardFault_Handler+0x4>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <MemManage_Handler+0x4>

08002164 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <BusFault_Handler+0x4>

0800216c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <UsageFault_Handler+0x4>

08002174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a2:	f000 f8c9 	bl	8002338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021b0:	4802      	ldr	r0, [pc, #8]	@ (80021bc <DMA1_Channel1_IRQHandler+0x10>)
 80021b2:	f002 f934 	bl	800441e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000098 	.word	0x20000098

080021c0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021c4:	4802      	ldr	r0, [pc, #8]	@ (80021d0 <ADC1_2_IRQHandler+0x10>)
 80021c6:	f000 fda5 	bl	8002d14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2000002c 	.word	0x2000002c

080021d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021d8:	4802      	ldr	r0, [pc, #8]	@ (80021e4 <TIM3_IRQHandler+0x10>)
 80021da:	f004 f839 	bl	8006250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200001d8 	.word	0x200001d8

080021e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021ec:	4802      	ldr	r0, [pc, #8]	@ (80021f8 <TIM4_IRQHandler+0x10>)
 80021ee:	f004 f82f 	bl	8006250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000224 	.word	0x20000224

080021fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_Pin);
 8002200:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002204:	f002 fbf4 	bl	80049f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002208:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800220c:	f002 fbf0 	bl	80049f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 8002210:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002214:	f002 fbec 	bl	80049f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}

0800221c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <SystemInit+0x20>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <SystemInit+0x20>)
 8002228:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002240:	480d      	ldr	r0, [pc, #52]	@ (8002278 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002242:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002244:	f7ff ffea 	bl	800221c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002248:	480c      	ldr	r0, [pc, #48]	@ (800227c <LoopForever+0x6>)
  ldr r1, =_edata
 800224a:	490d      	ldr	r1, [pc, #52]	@ (8002280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800224c:	4a0d      	ldr	r2, [pc, #52]	@ (8002284 <LoopForever+0xe>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002250:	e002      	b.n	8002258 <LoopCopyDataInit>

08002252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002256:	3304      	adds	r3, #4

08002258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800225c:	d3f9      	bcc.n	8002252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225e:	4a0a      	ldr	r2, [pc, #40]	@ (8002288 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002260:	4c0a      	ldr	r4, [pc, #40]	@ (800228c <LoopForever+0x16>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002264:	e001      	b.n	800226a <LoopFillZerobss>

08002266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002268:	3204      	adds	r2, #4

0800226a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800226c:	d3fb      	bcc.n	8002266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800226e:	f006 f817 	bl	80082a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002272:	f7fe fdcf 	bl	8000e14 <main>

08002276 <LoopForever>:

LoopForever:
    b LoopForever
 8002276:	e7fe      	b.n	8002276 <LoopForever>
  ldr   r0, =_estack
 8002278:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800227c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002280:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002284:	08008350 	.word	0x08008350
  ldr r2, =_sbss
 8002288:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800228c:	200003b8 	.word	0x200003b8

08002290 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC3_IRQHandler>

08002292 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800229c:	2003      	movs	r0, #3
 800229e:	f001 ff5b 	bl	8004158 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022a2:	2000      	movs	r0, #0
 80022a4:	f000 f80e 	bl	80022c4 <HAL_InitTick>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	71fb      	strb	r3, [r7, #7]
 80022b2:	e001      	b.n	80022b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022b4:	f7ff fd86 	bl	8001dc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022b8:	79fb      	ldrb	r3, [r7, #7]

}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80022d0:	4b16      	ldr	r3, [pc, #88]	@ (800232c <HAL_InitTick+0x68>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d022      	beq.n	800231e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80022d8:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <HAL_InitTick+0x6c>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b13      	ldr	r3, [pc, #76]	@ (800232c <HAL_InitTick+0x68>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	4618      	mov	r0, r3
 80022ee:	f001 ff66 	bl	80041be <HAL_SYSTICK_Config>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10f      	bne.n	8002318 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b0f      	cmp	r3, #15
 80022fc:	d809      	bhi.n	8002312 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022fe:	2200      	movs	r2, #0
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	f04f 30ff 	mov.w	r0, #4294967295
 8002306:	f001 ff32 	bl	800416e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800230a:	4a0a      	ldr	r2, [pc, #40]	@ (8002334 <HAL_InitTick+0x70>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e007      	b.n	8002322 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	e004      	b.n	8002322 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e001      	b.n	8002322 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	2000000c 	.word	0x2000000c
 8002330:	20000004 	.word	0x20000004
 8002334:	20000008 	.word	0x20000008

08002338 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <HAL_IncTick+0x1c>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <HAL_IncTick+0x20>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4413      	add	r3, r2
 8002346:	4a03      	ldr	r2, [pc, #12]	@ (8002354 <HAL_IncTick+0x1c>)
 8002348:	6013      	str	r3, [r2, #0]
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	200003b4 	.word	0x200003b4
 8002358:	2000000c 	.word	0x2000000c

0800235c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return uwTick;
 8002360:	4b03      	ldr	r3, [pc, #12]	@ (8002370 <HAL_GetTick+0x14>)
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	200003b4 	.word	0x200003b4

08002374 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	609a      	str	r2, [r3, #8]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	609a      	str	r2, [r3, #8]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3360      	adds	r3, #96	@ 0x60
 80023ee:	461a      	mov	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <LL_ADC_SetOffset+0x44>)
 80023fe:	4013      	ands	r3, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	4313      	orrs	r3, r2
 800240c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002414:	bf00      	nop
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	03fff000 	.word	0x03fff000

08002424 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3360      	adds	r3, #96	@ 0x60
 8002432:	461a      	mov	r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3360      	adds	r3, #96	@ 0x60
 8002460:	461a      	mov	r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	431a      	orrs	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800247a:	bf00      	nop
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002486:	b480      	push	{r7}
 8002488:	b087      	sub	sp, #28
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	3360      	adds	r3, #96	@ 0x60
 8002496:	461a      	mov	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80024b0:	bf00      	nop
 80024b2:	371c      	adds	r7, #28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3360      	adds	r3, #96	@ 0x60
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80024e6:	bf00      	nop
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	615a      	str	r2, [r3, #20]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800253e:	b480      	push	{r7}
 8002540:	b087      	sub	sp, #28
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3330      	adds	r3, #48	@ 0x30
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	4413      	add	r3, r2
 800255c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	211f      	movs	r1, #31
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	401a      	ands	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	f003 011f 	and.w	r1, r3, #31
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	431a      	orrs	r2, r3
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3314      	adds	r3, #20
 80025cc:	461a      	mov	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	0e5b      	lsrs	r3, r3, #25
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	4413      	add	r3, r2
 80025da:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	0d1b      	lsrs	r3, r3, #20
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	2107      	movs	r1, #7
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	401a      	ands	r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	0d1b      	lsrs	r3, r3, #20
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	431a      	orrs	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262c:	43db      	mvns	r3, r3
 800262e:	401a      	ands	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f003 0318 	and.w	r3, r3, #24
 8002636:	4908      	ldr	r1, [pc, #32]	@ (8002658 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002638:	40d9      	lsrs	r1, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	400b      	ands	r3, r1
 800263e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002642:	431a      	orrs	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	0007ffff 	.word	0x0007ffff

0800265c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 031f 	and.w	r3, r3, #31
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80026a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6093      	str	r3, [r2, #8]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026cc:	d101      	bne.n	80026d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80026f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002718:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800271c:	d101      	bne.n	8002722 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002740:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002744:	f043 0201 	orr.w	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <LL_ADC_IsEnabled+0x18>
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <LL_ADC_IsEnabled+0x1a>
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800278e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002792:	f043 0204 	orr.w	r2, r3, #4
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d101      	bne.n	80027be <LL_ADC_REG_IsConversionOngoing+0x18>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d101      	bne.n	80027e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b089      	sub	sp, #36	@ 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e1a9      	b.n	8002b62 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff faf5 	bl	8001e0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff3f 	bl	80026b8 <LL_ADC_IsDeepPowerDownEnabled>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d004      	beq.n	800284a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff25 	bl	8002694 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ff5a 	bl	8002708 <LL_ADC_IsInternalRegulatorEnabled>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d115      	bne.n	8002886 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ff3e 	bl	80026e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002864:	4b9c      	ldr	r3, [pc, #624]	@ (8002ad8 <HAL_ADC_Init+0x2e4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	4a9c      	ldr	r2, [pc, #624]	@ (8002adc <HAL_ADC_Init+0x2e8>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	3301      	adds	r3, #1
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002878:	e002      	b.n	8002880 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3b01      	subs	r3, #1
 800287e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f9      	bne.n	800287a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff ff3c 	bl	8002708 <LL_ADC_IsInternalRegulatorEnabled>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10d      	bne.n	80028b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289a:	f043 0210 	orr.w	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a6:	f043 0201 	orr.w	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ff75 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 80028bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f040 8142 	bne.w	8002b50 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 813e 	bne.w	8002b50 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80028dc:	f043 0202 	orr.w	r2, r3, #2
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff35 	bl	8002758 <LL_ADC_IsEnabled>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d141      	bne.n	8002978 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028fc:	d004      	beq.n	8002908 <HAL_ADC_Init+0x114>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a77      	ldr	r2, [pc, #476]	@ (8002ae0 <HAL_ADC_Init+0x2ec>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d10f      	bne.n	8002928 <HAL_ADC_Init+0x134>
 8002908:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800290c:	f7ff ff24 	bl	8002758 <LL_ADC_IsEnabled>
 8002910:	4604      	mov	r4, r0
 8002912:	4873      	ldr	r0, [pc, #460]	@ (8002ae0 <HAL_ADC_Init+0x2ec>)
 8002914:	f7ff ff20 	bl	8002758 <LL_ADC_IsEnabled>
 8002918:	4603      	mov	r3, r0
 800291a:	4323      	orrs	r3, r4
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e012      	b.n	800294e <HAL_ADC_Init+0x15a>
 8002928:	486e      	ldr	r0, [pc, #440]	@ (8002ae4 <HAL_ADC_Init+0x2f0>)
 800292a:	f7ff ff15 	bl	8002758 <LL_ADC_IsEnabled>
 800292e:	4604      	mov	r4, r0
 8002930:	486d      	ldr	r0, [pc, #436]	@ (8002ae8 <HAL_ADC_Init+0x2f4>)
 8002932:	f7ff ff11 	bl	8002758 <LL_ADC_IsEnabled>
 8002936:	4603      	mov	r3, r0
 8002938:	431c      	orrs	r4, r3
 800293a:	486c      	ldr	r0, [pc, #432]	@ (8002aec <HAL_ADC_Init+0x2f8>)
 800293c:	f7ff ff0c 	bl	8002758 <LL_ADC_IsEnabled>
 8002940:	4603      	mov	r3, r0
 8002942:	4323      	orrs	r3, r4
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d012      	beq.n	8002978 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800295a:	d004      	beq.n	8002966 <HAL_ADC_Init+0x172>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a5f      	ldr	r2, [pc, #380]	@ (8002ae0 <HAL_ADC_Init+0x2ec>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_ADC_Init+0x176>
 8002966:	4a62      	ldr	r2, [pc, #392]	@ (8002af0 <HAL_ADC_Init+0x2fc>)
 8002968:	e000      	b.n	800296c <HAL_ADC_Init+0x178>
 800296a:	4a62      	ldr	r2, [pc, #392]	@ (8002af4 <HAL_ADC_Init+0x300>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f7ff fcfe 	bl	8002374 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7f5b      	ldrb	r3, [r3, #29]
 800297c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002982:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002988:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800298e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002996:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d106      	bne.n	80029b4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029aa:	3b01      	subs	r3, #1
 80029ac:	045b      	lsls	r3, r3, #17
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	4b48      	ldr	r3, [pc, #288]	@ (8002af8 <HAL_ADC_Init+0x304>)
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	69b9      	ldr	r1, [r7, #24]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fee4 	bl	80027cc <LL_ADC_INJ_IsConversionOngoing>
 8002a04:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d17f      	bne.n	8002b0c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d17c      	bne.n	8002b0c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a16:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a1e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a2e:	f023 0302 	bic.w	r3, r3, #2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	69b9      	ldr	r1, [r7, #24]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d017      	beq.n	8002a74 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002a52:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a5c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6911      	ldr	r1, [r2, #16]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002a72:	e013      	b.n	8002a9c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a98:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d12a      	bne.n	8002afc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002abc:	4311      	orrs	r1, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ac2:	4311      	orrs	r1, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	611a      	str	r2, [r3, #16]
 8002ad6:	e019      	b.n	8002b0c <HAL_ADC_Init+0x318>
 8002ad8:	20000004 	.word	0x20000004
 8002adc:	053e2d63 	.word	0x053e2d63
 8002ae0:	50000100 	.word	0x50000100
 8002ae4:	50000400 	.word	0x50000400
 8002ae8:	50000500 	.word	0x50000500
 8002aec:	50000600 	.word	0x50000600
 8002af0:	50000300 	.word	0x50000300
 8002af4:	50000700 	.word	0x50000700
 8002af8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d10c      	bne.n	8002b2e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	f023 010f 	bic.w	r1, r3, #15
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	1e5a      	subs	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b2c:	e007      	b.n	8002b3e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 020f 	bic.w	r2, r2, #15
 8002b3c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b42:	f023 0303 	bic.w	r3, r3, #3
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b4e:	e007      	b.n	8002b60 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b54:	f043 0210 	orr.w	r2, r3, #16
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b60:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3724      	adds	r7, #36	@ 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd90      	pop	{r4, r7, pc}
 8002b6a:	bf00      	nop

08002b6c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b80:	d004      	beq.n	8002b8c <HAL_ADC_Start_DMA+0x20>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a5a      	ldr	r2, [pc, #360]	@ (8002cf0 <HAL_ADC_Start_DMA+0x184>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADC_Start_DMA+0x24>
 8002b8c:	4b59      	ldr	r3, [pc, #356]	@ (8002cf4 <HAL_ADC_Start_DMA+0x188>)
 8002b8e:	e000      	b.n	8002b92 <HAL_ADC_Start_DMA+0x26>
 8002b90:	4b59      	ldr	r3, [pc, #356]	@ (8002cf8 <HAL_ADC_Start_DMA+0x18c>)
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fd62 	bl	800265c <LL_ADC_GetMultimode>
 8002b98:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fe01 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 809b 	bne.w	8002ce2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_Start_DMA+0x4e>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e096      	b.n	8002ce8 <HAL_ADC_Start_DMA+0x17c>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a4d      	ldr	r2, [pc, #308]	@ (8002cfc <HAL_ADC_Start_DMA+0x190>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d008      	beq.n	8002bde <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	d002      	beq.n	8002bde <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b09      	cmp	r3, #9
 8002bdc:	d17a      	bne.n	8002cd4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 ff60 	bl	8003aa4 <ADC_Enable>
 8002be4:	4603      	mov	r3, r0
 8002be6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d16d      	bne.n	8002cca <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a3a      	ldr	r2, [pc, #232]	@ (8002cf0 <HAL_ADC_Start_DMA+0x184>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_ADC_Start_DMA+0xb4>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a3b      	ldr	r2, [pc, #236]	@ (8002d00 <HAL_ADC_Start_DMA+0x194>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d002      	beq.n	8002c1c <HAL_ADC_Start_DMA+0xb0>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	e003      	b.n	8002c24 <HAL_ADC_Start_DMA+0xb8>
 8002c1c:	4b39      	ldr	r3, [pc, #228]	@ (8002d04 <HAL_ADC_Start_DMA+0x198>)
 8002c1e:	e001      	b.n	8002c24 <HAL_ADC_Start_DMA+0xb8>
 8002c20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d002      	beq.n	8002c32 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d105      	bne.n	8002c3e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c36:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d006      	beq.n	8002c58 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4e:	f023 0206 	bic.w	r2, r3, #6
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	661a      	str	r2, [r3, #96]	@ 0x60
 8002c56:	e002      	b.n	8002c5e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c62:	4a29      	ldr	r2, [pc, #164]	@ (8002d08 <HAL_ADC_Start_DMA+0x19c>)
 8002c64:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6a:	4a28      	ldr	r2, [pc, #160]	@ (8002d0c <HAL_ADC_Start_DMA+0x1a0>)
 8002c6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c72:	4a27      	ldr	r2, [pc, #156]	@ (8002d10 <HAL_ADC_Start_DMA+0x1a4>)
 8002c74:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	221c      	movs	r2, #28
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0210 	orr.w	r2, r2, #16
 8002c94:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3340      	adds	r3, #64	@ 0x40
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f001 fb37 	bl	8004328 <HAL_DMA_Start_IT>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fd5b 	bl	800277e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002cc8:	e00d      	b.n	8002ce6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002cd2:	e008      	b.n	8002ce6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002ce0:	e001      	b.n	8002ce6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	50000100 	.word	0x50000100
 8002cf4:	50000300 	.word	0x50000300
 8002cf8:	50000700 	.word	0x50000700
 8002cfc:	50000600 	.word	0x50000600
 8002d00:	50000500 	.word	0x50000500
 8002d04:	50000400 	.word	0x50000400
 8002d08:	08003bd1 	.word	0x08003bd1
 8002d0c:	08003ca9 	.word	0x08003ca9
 8002d10:	08003cc5 	.word	0x08003cc5

08002d14 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	@ 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d38:	d004      	beq.n	8002d44 <HAL_ADC_IRQHandler+0x30>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a8e      	ldr	r2, [pc, #568]	@ (8002f78 <HAL_ADC_IRQHandler+0x264>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_ADC_IRQHandler+0x34>
 8002d44:	4b8d      	ldr	r3, [pc, #564]	@ (8002f7c <HAL_ADC_IRQHandler+0x268>)
 8002d46:	e000      	b.n	8002d4a <HAL_ADC_IRQHandler+0x36>
 8002d48:	4b8d      	ldr	r3, [pc, #564]	@ (8002f80 <HAL_ADC_IRQHandler+0x26c>)
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fc86 	bl	800265c <LL_ADC_GetMultimode>
 8002d50:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d017      	beq.n	8002d8c <HAL_ADC_IRQHandler+0x78>
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d012      	beq.n	8002d8c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d105      	bne.n	8002d7e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d76:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f001 f808 	bl	8003d94 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d004      	beq.n	8002da0 <HAL_ADC_IRQHandler+0x8c>
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8094 	beq.w	8002ed4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 808e 	beq.w	8002ed4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fb9f 	bl	8002518 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d072      	beq.n	8002ec6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a64      	ldr	r2, [pc, #400]	@ (8002f78 <HAL_ADC_IRQHandler+0x264>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d009      	beq.n	8002dfe <HAL_ADC_IRQHandler+0xea>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a65      	ldr	r2, [pc, #404]	@ (8002f84 <HAL_ADC_IRQHandler+0x270>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d002      	beq.n	8002dfa <HAL_ADC_IRQHandler+0xe6>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	e003      	b.n	8002e02 <HAL_ADC_IRQHandler+0xee>
 8002dfa:	4b63      	ldr	r3, [pc, #396]	@ (8002f88 <HAL_ADC_IRQHandler+0x274>)
 8002dfc:	e001      	b.n	8002e02 <HAL_ADC_IRQHandler+0xee>
 8002dfe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d008      	beq.n	8002e1c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b05      	cmp	r3, #5
 8002e14:	d002      	beq.n	8002e1c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b09      	cmp	r3, #9
 8002e1a:	d104      	bne.n	8002e26 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	e014      	b.n	8002e50 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a53      	ldr	r2, [pc, #332]	@ (8002f78 <HAL_ADC_IRQHandler+0x264>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d009      	beq.n	8002e44 <HAL_ADC_IRQHandler+0x130>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a53      	ldr	r2, [pc, #332]	@ (8002f84 <HAL_ADC_IRQHandler+0x270>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d002      	beq.n	8002e40 <HAL_ADC_IRQHandler+0x12c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	e003      	b.n	8002e48 <HAL_ADC_IRQHandler+0x134>
 8002e40:	4b51      	ldr	r3, [pc, #324]	@ (8002f88 <HAL_ADC_IRQHandler+0x274>)
 8002e42:	e001      	b.n	8002e48 <HAL_ADC_IRQHandler+0x134>
 8002e44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e48:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d135      	bne.n	8002ec6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d12e      	bne.n	8002ec6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fc9a 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d11a      	bne.n	8002eae <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 020c 	bic.w	r2, r2, #12
 8002e86:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d112      	bne.n	8002ec6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea4:	f043 0201 	orr.w	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002eac:	e00b      	b.n	8002ec6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb2:	f043 0210 	orr.w	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f984 	bl	80031d4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	220c      	movs	r2, #12
 8002ed2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <HAL_ADC_IRQHandler+0x1d4>
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10b      	bne.n	8002f00 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80b3 	beq.w	800305a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80ad 	beq.w	800305a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f10:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fb3a 	bl	8002596 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f22:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff faf5 	bl	8002518 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f2e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a10      	ldr	r2, [pc, #64]	@ (8002f78 <HAL_ADC_IRQHandler+0x264>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d009      	beq.n	8002f4e <HAL_ADC_IRQHandler+0x23a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a11      	ldr	r2, [pc, #68]	@ (8002f84 <HAL_ADC_IRQHandler+0x270>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d002      	beq.n	8002f4a <HAL_ADC_IRQHandler+0x236>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	e003      	b.n	8002f52 <HAL_ADC_IRQHandler+0x23e>
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f88 <HAL_ADC_IRQHandler+0x274>)
 8002f4c:	e001      	b.n	8002f52 <HAL_ADC_IRQHandler+0x23e>
 8002f4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d008      	beq.n	8002f6c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2b06      	cmp	r3, #6
 8002f64:	d002      	beq.n	8002f6c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b07      	cmp	r3, #7
 8002f6a:	d10f      	bne.n	8002f8c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	623b      	str	r3, [r7, #32]
 8002f74:	e01f      	b.n	8002fb6 <HAL_ADC_IRQHandler+0x2a2>
 8002f76:	bf00      	nop
 8002f78:	50000100 	.word	0x50000100
 8002f7c:	50000300 	.word	0x50000300
 8002f80:	50000700 	.word	0x50000700
 8002f84:	50000500 	.word	0x50000500
 8002f88:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a8b      	ldr	r2, [pc, #556]	@ (80031c0 <HAL_ADC_IRQHandler+0x4ac>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d009      	beq.n	8002faa <HAL_ADC_IRQHandler+0x296>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a8a      	ldr	r2, [pc, #552]	@ (80031c4 <HAL_ADC_IRQHandler+0x4b0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d002      	beq.n	8002fa6 <HAL_ADC_IRQHandler+0x292>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	e003      	b.n	8002fae <HAL_ADC_IRQHandler+0x29a>
 8002fa6:	4b88      	ldr	r3, [pc, #544]	@ (80031c8 <HAL_ADC_IRQHandler+0x4b4>)
 8002fa8:	e001      	b.n	8002fae <HAL_ADC_IRQHandler+0x29a>
 8002faa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fae:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d047      	beq.n	800304c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <HAL_ADC_IRQHandler+0x2c2>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d03f      	beq.n	800304c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d13a      	bne.n	800304c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe0:	2b40      	cmp	r3, #64	@ 0x40
 8002fe2:	d133      	bne.n	800304c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d12e      	bne.n	800304c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fbea 	bl	80027cc <LL_ADC_INJ_IsConversionOngoing>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d11a      	bne.n	8003034 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800300c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003012:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d112      	bne.n	800304c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302a:	f043 0201 	orr.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003032:	e00b      	b.n	800304c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003038:	f043 0210 	orr.w	r2, r3, #16
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fe79 	bl	8003d44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2260      	movs	r2, #96	@ 0x60
 8003058:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003060:	2b00      	cmp	r3, #0
 8003062:	d011      	beq.n	8003088 <HAL_ADC_IRQHandler+0x374>
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003072:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f8be 	bl	80031fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2280      	movs	r2, #128	@ 0x80
 8003086:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d012      	beq.n	80030b8 <HAL_ADC_IRQHandler+0x3a4>
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00d      	beq.n	80030b8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fe5f 	bl	8003d6c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d012      	beq.n	80030e8 <HAL_ADC_IRQHandler+0x3d4>
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00d      	beq.n	80030e8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fe51 	bl	8003d80 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d043      	beq.n	800317a <HAL_ADC_IRQHandler+0x466>
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d03e      	beq.n	800317a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003104:	2301      	movs	r3, #1
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24
 8003108:	e021      	b.n	800314e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d015      	beq.n	800313c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003118:	d004      	beq.n	8003124 <HAL_ADC_IRQHandler+0x410>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a28      	ldr	r2, [pc, #160]	@ (80031c0 <HAL_ADC_IRQHandler+0x4ac>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d101      	bne.n	8003128 <HAL_ADC_IRQHandler+0x414>
 8003124:	4b29      	ldr	r3, [pc, #164]	@ (80031cc <HAL_ADC_IRQHandler+0x4b8>)
 8003126:	e000      	b.n	800312a <HAL_ADC_IRQHandler+0x416>
 8003128:	4b29      	ldr	r3, [pc, #164]	@ (80031d0 <HAL_ADC_IRQHandler+0x4bc>)
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff faa4 	bl	8002678 <LL_ADC_GetMultiDMATransfer>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003136:	2301      	movs	r3, #1
 8003138:	627b      	str	r3, [r7, #36]	@ 0x24
 800313a:	e008      	b.n	800314e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800314a:	2301      	movs	r3, #1
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	2b01      	cmp	r3, #1
 8003152:	d10e      	bne.n	8003172 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003158:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003164:	f043 0202 	orr.w	r2, r3, #2
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f84f 	bl	8003210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2210      	movs	r2, #16
 8003178:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003180:	2b00      	cmp	r3, #0
 8003182:	d018      	beq.n	80031b6 <HAL_ADC_IRQHandler+0x4a2>
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318a:	2b00      	cmp	r3, #0
 800318c:	d013      	beq.n	80031b6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003192:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319e:	f043 0208 	orr.w	r2, r3, #8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031ae:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fdd1 	bl	8003d58 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80031b6:	bf00      	nop
 80031b8:	3728      	adds	r7, #40	@ 0x28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	50000100 	.word	0x50000100
 80031c4:	50000500 	.word	0x50000500
 80031c8:	50000400 	.word	0x50000400
 80031cc:	50000300 	.word	0x50000300
 80031d0:	50000700 	.word	0x50000700

080031d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b0b6      	sub	sp, #216	@ 0xd8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800323e:	2b01      	cmp	r3, #1
 8003240:	d102      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x24>
 8003242:	2302      	movs	r3, #2
 8003244:	f000 bc13 	b.w	8003a6e <HAL_ADC_ConfigChannel+0x84a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff faa6 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	f040 83f3 	bne.w	8003a48 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	f7ff f965 	bl	800253e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fa94 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 800327e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff faa0 	bl	80027cc <LL_ADC_INJ_IsConversionOngoing>
 800328c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003290:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003294:	2b00      	cmp	r3, #0
 8003296:	f040 81d9 	bne.w	800364c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800329a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 81d4 	bne.w	800364c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032ac:	d10f      	bne.n	80032ce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2200      	movs	r2, #0
 80032b8:	4619      	mov	r1, r3
 80032ba:	f7ff f97f 	bl	80025bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff f913 	bl	80024f2 <LL_ADC_SetSamplingTimeCommonConfig>
 80032cc:	e00e      	b.n	80032ec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6819      	ldr	r1, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	461a      	mov	r2, r3
 80032dc:	f7ff f96e 	bl	80025bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff f903 	bl	80024f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	08db      	lsrs	r3, r3, #3
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b04      	cmp	r3, #4
 800330c:	d022      	beq.n	8003354 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6919      	ldr	r1, [r3, #16]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800331e:	f7ff f85d 	bl	80023dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6919      	ldr	r1, [r3, #16]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	461a      	mov	r2, r3
 8003330:	f7ff f8a9 	bl	8002486 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003340:	2b01      	cmp	r3, #1
 8003342:	d102      	bne.n	800334a <HAL_ADC_ConfigChannel+0x126>
 8003344:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003348:	e000      	b.n	800334c <HAL_ADC_ConfigChannel+0x128>
 800334a:	2300      	movs	r3, #0
 800334c:	461a      	mov	r2, r3
 800334e:	f7ff f8b5 	bl	80024bc <LL_ADC_SetOffsetSaturation>
 8003352:	e17b      	b.n	800364c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff f862 	bl	8002424 <LL_ADC_GetOffsetChannel>
 8003360:	4603      	mov	r3, r0
 8003362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x15c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2100      	movs	r1, #0
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff f857 	bl	8002424 <LL_ADC_GetOffsetChannel>
 8003376:	4603      	mov	r3, r0
 8003378:	0e9b      	lsrs	r3, r3, #26
 800337a:	f003 021f 	and.w	r2, r3, #31
 800337e:	e01e      	b.n	80033be <HAL_ADC_ConfigChannel+0x19a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2100      	movs	r1, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff f84c 	bl	8002424 <LL_ADC_GetOffsetChannel>
 800338c:	4603      	mov	r3, r0
 800338e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800339e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80033ae:	2320      	movs	r3, #32
 80033b0:	e004      	b.n	80033bc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80033b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d105      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x1b2>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	0e9b      	lsrs	r3, r3, #26
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	e018      	b.n	8003408 <HAL_ADC_ConfigChannel+0x1e4>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80033ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80033f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80033fa:	2320      	movs	r3, #32
 80033fc:	e004      	b.n	8003408 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80033fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003402:	fab3 f383 	clz	r3, r3
 8003406:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003408:	429a      	cmp	r2, r3
 800340a:	d106      	bne.n	800341a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2200      	movs	r2, #0
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff f81b 	bl	8002450 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2101      	movs	r1, #1
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe ffff 	bl	8002424 <LL_ADC_GetOffsetChannel>
 8003426:	4603      	mov	r3, r0
 8003428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x222>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2101      	movs	r1, #1
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe fff4 	bl	8002424 <LL_ADC_GetOffsetChannel>
 800343c:	4603      	mov	r3, r0
 800343e:	0e9b      	lsrs	r3, r3, #26
 8003440:	f003 021f 	and.w	r2, r3, #31
 8003444:	e01e      	b.n	8003484 <HAL_ADC_ConfigChannel+0x260>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2101      	movs	r1, #1
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe ffe9 	bl	8002424 <LL_ADC_GetOffsetChannel>
 8003452:	4603      	mov	r3, r0
 8003454:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003464:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003468:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800346c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003474:	2320      	movs	r3, #32
 8003476:	e004      	b.n	8003482 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003478:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <HAL_ADC_ConfigChannel+0x278>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	0e9b      	lsrs	r3, r3, #26
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	e018      	b.n	80034ce <HAL_ADC_ConfigChannel+0x2aa>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80034b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80034b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80034c0:	2320      	movs	r3, #32
 80034c2:	e004      	b.n	80034ce <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80034c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034c8:	fab3 f383 	clz	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d106      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2200      	movs	r2, #0
 80034d8:	2101      	movs	r1, #1
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fe ffb8 	bl	8002450 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2102      	movs	r1, #2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe ff9c 	bl	8002424 <LL_ADC_GetOffsetChannel>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10a      	bne.n	800350c <HAL_ADC_ConfigChannel+0x2e8>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2102      	movs	r1, #2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe ff91 	bl	8002424 <LL_ADC_GetOffsetChannel>
 8003502:	4603      	mov	r3, r0
 8003504:	0e9b      	lsrs	r3, r3, #26
 8003506:	f003 021f 	and.w	r2, r3, #31
 800350a:	e01e      	b.n	800354a <HAL_ADC_ConfigChannel+0x326>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2102      	movs	r1, #2
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe ff86 	bl	8002424 <LL_ADC_GetOffsetChannel>
 8003518:	4603      	mov	r3, r0
 800351a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800352a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800352e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003532:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800353a:	2320      	movs	r3, #32
 800353c:	e004      	b.n	8003548 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800353e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003552:	2b00      	cmp	r3, #0
 8003554:	d105      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x33e>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	0e9b      	lsrs	r3, r3, #26
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	e016      	b.n	8003590 <HAL_ADC_ConfigChannel+0x36c>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003574:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003576:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800357a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003582:	2320      	movs	r3, #32
 8003584:	e004      	b.n	8003590 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003586:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003590:	429a      	cmp	r2, r3
 8003592:	d106      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2200      	movs	r2, #0
 800359a:	2102      	movs	r1, #2
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe ff57 	bl	8002450 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2103      	movs	r1, #3
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe ff3b 	bl	8002424 <LL_ADC_GetOffsetChannel>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x3aa>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2103      	movs	r1, #3
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe ff30 	bl	8002424 <LL_ADC_GetOffsetChannel>
 80035c4:	4603      	mov	r3, r0
 80035c6:	0e9b      	lsrs	r3, r3, #26
 80035c8:	f003 021f 	and.w	r2, r3, #31
 80035cc:	e017      	b.n	80035fe <HAL_ADC_ConfigChannel+0x3da>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2103      	movs	r1, #3
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fe ff25 	bl	8002424 <LL_ADC_GetOffsetChannel>
 80035da:	4603      	mov	r3, r0
 80035dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035e0:	fa93 f3a3 	rbit	r3, r3
 80035e4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80035e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80035ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80035f0:	2320      	movs	r3, #32
 80035f2:	e003      	b.n	80035fc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80035f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003606:	2b00      	cmp	r3, #0
 8003608:	d105      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x3f2>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0e9b      	lsrs	r3, r3, #26
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	e011      	b.n	800363a <HAL_ADC_ConfigChannel+0x416>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800361e:	fa93 f3a3 	rbit	r3, r3
 8003622:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003624:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003626:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800362e:	2320      	movs	r3, #32
 8003630:	e003      	b.n	800363a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003634:	fab3 f383 	clz	r3, r3
 8003638:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800363a:	429a      	cmp	r2, r3
 800363c:	d106      	bne.n	800364c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2200      	movs	r2, #0
 8003644:	2103      	movs	r1, #3
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe ff02 	bl	8002450 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff f881 	bl	8002758 <LL_ADC_IsEnabled>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	f040 813d 	bne.w	80038d8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6819      	ldr	r1, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	461a      	mov	r2, r3
 800366c:	f7fe ffd2 	bl	8002614 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4aa2      	ldr	r2, [pc, #648]	@ (8003900 <HAL_ADC_ConfigChannel+0x6dc>)
 8003676:	4293      	cmp	r3, r2
 8003678:	f040 812e 	bne.w	80038d8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x480>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	0e9b      	lsrs	r3, r3, #26
 8003692:	3301      	adds	r3, #1
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2b09      	cmp	r3, #9
 800369a:	bf94      	ite	ls
 800369c:	2301      	movls	r3, #1
 800369e:	2300      	movhi	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e019      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x4b4>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036ac:	fa93 f3a3 	rbit	r3, r3
 80036b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80036b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036b4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80036b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80036bc:	2320      	movs	r3, #32
 80036be:	e003      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80036c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036c2:	fab3 f383 	clz	r3, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	3301      	adds	r3, #1
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	2b09      	cmp	r3, #9
 80036d0:	bf94      	ite	ls
 80036d2:	2301      	movls	r3, #1
 80036d4:	2300      	movhi	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d079      	beq.n	80037d0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d107      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x4d4>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	0e9b      	lsrs	r3, r3, #26
 80036ee:	3301      	adds	r3, #1
 80036f0:	069b      	lsls	r3, r3, #26
 80036f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036f6:	e015      	b.n	8003724 <HAL_ADC_ConfigChannel+0x500>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003708:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800370a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003710:	2320      	movs	r3, #32
 8003712:	e003      	b.n	800371c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003716:	fab3 f383 	clz	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	3301      	adds	r3, #1
 800371e:	069b      	lsls	r3, r3, #26
 8003720:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372c:	2b00      	cmp	r3, #0
 800372e:	d109      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x520>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	0e9b      	lsrs	r3, r3, #26
 8003736:	3301      	adds	r3, #1
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	2101      	movs	r1, #1
 800373e:	fa01 f303 	lsl.w	r3, r1, r3
 8003742:	e017      	b.n	8003774 <HAL_ADC_ConfigChannel+0x550>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003754:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800375c:	2320      	movs	r3, #32
 800375e:	e003      	b.n	8003768 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	3301      	adds	r3, #1
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	2101      	movs	r1, #1
 8003770:	fa01 f303 	lsl.w	r3, r1, r3
 8003774:	ea42 0103 	orr.w	r1, r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <HAL_ADC_ConfigChannel+0x576>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	0e9b      	lsrs	r3, r3, #26
 800378a:	3301      	adds	r3, #1
 800378c:	f003 021f 	and.w	r2, r3, #31
 8003790:	4613      	mov	r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	4413      	add	r3, r2
 8003796:	051b      	lsls	r3, r3, #20
 8003798:	e018      	b.n	80037cc <HAL_ADC_ConfigChannel+0x5a8>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80037a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80037ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80037b2:	2320      	movs	r3, #32
 80037b4:	e003      	b.n	80037be <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80037b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b8:	fab3 f383 	clz	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	3301      	adds	r3, #1
 80037c0:	f003 021f 	and.w	r2, r3, #31
 80037c4:	4613      	mov	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4413      	add	r3, r2
 80037ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037cc:	430b      	orrs	r3, r1
 80037ce:	e07e      	b.n	80038ce <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d107      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x5c8>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0e9b      	lsrs	r3, r3, #26
 80037e2:	3301      	adds	r3, #1
 80037e4:	069b      	lsls	r3, r3, #26
 80037e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037ea:	e015      	b.n	8003818 <HAL_ADC_ConfigChannel+0x5f4>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80037fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80037fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003804:	2320      	movs	r3, #32
 8003806:	e003      	b.n	8003810 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	3301      	adds	r3, #1
 8003812:	069b      	lsls	r3, r3, #26
 8003814:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003820:	2b00      	cmp	r3, #0
 8003822:	d109      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x614>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	0e9b      	lsrs	r3, r3, #26
 800382a:	3301      	adds	r3, #1
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	2101      	movs	r1, #1
 8003832:	fa01 f303 	lsl.w	r3, r1, r3
 8003836:	e017      	b.n	8003868 <HAL_ADC_ConfigChannel+0x644>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	fa93 f3a3 	rbit	r3, r3
 8003844:	61fb      	str	r3, [r7, #28]
  return result;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800384a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003850:	2320      	movs	r3, #32
 8003852:	e003      	b.n	800385c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	b2db      	uxtb	r3, r3
 800385c:	3301      	adds	r3, #1
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	2101      	movs	r1, #1
 8003864:	fa01 f303 	lsl.w	r3, r1, r3
 8003868:	ea42 0103 	orr.w	r1, r2, r3
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10d      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x670>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	0e9b      	lsrs	r3, r3, #26
 800387e:	3301      	adds	r3, #1
 8003880:	f003 021f 	and.w	r2, r3, #31
 8003884:	4613      	mov	r3, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4413      	add	r3, r2
 800388a:	3b1e      	subs	r3, #30
 800388c:	051b      	lsls	r3, r3, #20
 800388e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003892:	e01b      	b.n	80038cc <HAL_ADC_ConfigChannel+0x6a8>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	fa93 f3a3 	rbit	r3, r3
 80038a0:	613b      	str	r3, [r7, #16]
  return result;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80038ac:	2320      	movs	r3, #32
 80038ae:	e003      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	3301      	adds	r3, #1
 80038ba:	f003 021f 	and.w	r2, r3, #31
 80038be:	4613      	mov	r3, r2
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	4413      	add	r3, r2
 80038c4:	3b1e      	subs	r3, #30
 80038c6:	051b      	lsls	r3, r3, #20
 80038c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038d2:	4619      	mov	r1, r3
 80038d4:	f7fe fe72 	bl	80025bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <HAL_ADC_ConfigChannel+0x6e0>)
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80be 	beq.w	8003a62 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ee:	d004      	beq.n	80038fa <HAL_ADC_ConfigChannel+0x6d6>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a04      	ldr	r2, [pc, #16]	@ (8003908 <HAL_ADC_ConfigChannel+0x6e4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d10a      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x6ec>
 80038fa:	4b04      	ldr	r3, [pc, #16]	@ (800390c <HAL_ADC_ConfigChannel+0x6e8>)
 80038fc:	e009      	b.n	8003912 <HAL_ADC_ConfigChannel+0x6ee>
 80038fe:	bf00      	nop
 8003900:	407f0000 	.word	0x407f0000
 8003904:	80080000 	.word	0x80080000
 8003908:	50000100 	.word	0x50000100
 800390c:	50000300 	.word	0x50000300
 8003910:	4b59      	ldr	r3, [pc, #356]	@ (8003a78 <HAL_ADC_ConfigChannel+0x854>)
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fd54 	bl	80023c0 <LL_ADC_GetCommonPathInternalCh>
 8003918:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a56      	ldr	r2, [pc, #344]	@ (8003a7c <HAL_ADC_ConfigChannel+0x858>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <HAL_ADC_ConfigChannel+0x70c>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a55      	ldr	r2, [pc, #340]	@ (8003a80 <HAL_ADC_ConfigChannel+0x85c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d13a      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003930:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003934:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d134      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003944:	d005      	beq.n	8003952 <HAL_ADC_ConfigChannel+0x72e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a4e      	ldr	r2, [pc, #312]	@ (8003a84 <HAL_ADC_ConfigChannel+0x860>)
 800394c:	4293      	cmp	r3, r2
 800394e:	f040 8085 	bne.w	8003a5c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800395a:	d004      	beq.n	8003966 <HAL_ADC_ConfigChannel+0x742>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a49      	ldr	r2, [pc, #292]	@ (8003a88 <HAL_ADC_ConfigChannel+0x864>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d101      	bne.n	800396a <HAL_ADC_ConfigChannel+0x746>
 8003966:	4a49      	ldr	r2, [pc, #292]	@ (8003a8c <HAL_ADC_ConfigChannel+0x868>)
 8003968:	e000      	b.n	800396c <HAL_ADC_ConfigChannel+0x748>
 800396a:	4a43      	ldr	r2, [pc, #268]	@ (8003a78 <HAL_ADC_ConfigChannel+0x854>)
 800396c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003970:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f7fe fd0f 	bl	800239a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800397c:	4b44      	ldr	r3, [pc, #272]	@ (8003a90 <HAL_ADC_ConfigChannel+0x86c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	099b      	lsrs	r3, r3, #6
 8003982:	4a44      	ldr	r2, [pc, #272]	@ (8003a94 <HAL_ADC_ConfigChannel+0x870>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	099b      	lsrs	r3, r3, #6
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	4613      	mov	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003996:	e002      	b.n	800399e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3b01      	subs	r3, #1
 800399c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1f9      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039a4:	e05a      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003a98 <HAL_ADC_ConfigChannel+0x874>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d125      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d11f      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a31      	ldr	r2, [pc, #196]	@ (8003a88 <HAL_ADC_ConfigChannel+0x864>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d104      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x7ac>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a34      	ldr	r2, [pc, #208]	@ (8003a9c <HAL_ADC_ConfigChannel+0x878>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d047      	beq.n	8003a60 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039d8:	d004      	beq.n	80039e4 <HAL_ADC_ConfigChannel+0x7c0>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a2a      	ldr	r2, [pc, #168]	@ (8003a88 <HAL_ADC_ConfigChannel+0x864>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d101      	bne.n	80039e8 <HAL_ADC_ConfigChannel+0x7c4>
 80039e4:	4a29      	ldr	r2, [pc, #164]	@ (8003a8c <HAL_ADC_ConfigChannel+0x868>)
 80039e6:	e000      	b.n	80039ea <HAL_ADC_ConfigChannel+0x7c6>
 80039e8:	4a23      	ldr	r2, [pc, #140]	@ (8003a78 <HAL_ADC_ConfigChannel+0x854>)
 80039ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f7fe fcd0 	bl	800239a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039fa:	e031      	b.n	8003a60 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a27      	ldr	r2, [pc, #156]	@ (8003aa0 <HAL_ADC_ConfigChannel+0x87c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d12d      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d127      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1c      	ldr	r2, [pc, #112]	@ (8003a88 <HAL_ADC_ConfigChannel+0x864>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d022      	beq.n	8003a62 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a24:	d004      	beq.n	8003a30 <HAL_ADC_ConfigChannel+0x80c>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a17      	ldr	r2, [pc, #92]	@ (8003a88 <HAL_ADC_ConfigChannel+0x864>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d101      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x810>
 8003a30:	4a16      	ldr	r2, [pc, #88]	@ (8003a8c <HAL_ADC_ConfigChannel+0x868>)
 8003a32:	e000      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x812>
 8003a34:	4a10      	ldr	r2, [pc, #64]	@ (8003a78 <HAL_ADC_ConfigChannel+0x854>)
 8003a36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4610      	mov	r0, r2
 8003a42:	f7fe fcaa 	bl	800239a <LL_ADC_SetCommonPathInternalCh>
 8003a46:	e00c      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4c:	f043 0220 	orr.w	r2, r3, #32
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003a5a:	e002      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a5c:	bf00      	nop
 8003a5e:	e000      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	37d8      	adds	r7, #216	@ 0xd8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	50000700 	.word	0x50000700
 8003a7c:	c3210000 	.word	0xc3210000
 8003a80:	90c00010 	.word	0x90c00010
 8003a84:	50000600 	.word	0x50000600
 8003a88:	50000100 	.word	0x50000100
 8003a8c:	50000300 	.word	0x50000300
 8003a90:	20000004 	.word	0x20000004
 8003a94:	053e2d63 	.word	0x053e2d63
 8003a98:	c7520000 	.word	0xc7520000
 8003a9c:	50000500 	.word	0x50000500
 8003aa0:	cb840000 	.word	0xcb840000

08003aa4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fe4f 	bl	8002758 <LL_ADC_IsEnabled>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d176      	bne.n	8003bae <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8003bb8 <ADC_Enable+0x114>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00d      	beq.n	8003aea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad2:	f043 0210 	orr.w	r2, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ade:	f043 0201 	orr.w	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e062      	b.n	8003bb0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe fe1e 	bl	8002730 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003afc:	d004      	beq.n	8003b08 <ADC_Enable+0x64>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2e      	ldr	r2, [pc, #184]	@ (8003bbc <ADC_Enable+0x118>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <ADC_Enable+0x68>
 8003b08:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc0 <ADC_Enable+0x11c>)
 8003b0a:	e000      	b.n	8003b0e <ADC_Enable+0x6a>
 8003b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc4 <ADC_Enable+0x120>)
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe fc56 	bl	80023c0 <LL_ADC_GetCommonPathInternalCh>
 8003b14:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003b16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d013      	beq.n	8003b46 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc8 <ADC_Enable+0x124>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	099b      	lsrs	r3, r3, #6
 8003b24:	4a29      	ldr	r2, [pc, #164]	@ (8003bcc <ADC_Enable+0x128>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	099b      	lsrs	r3, r3, #6
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	4613      	mov	r3, r2
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b38:	e002      	b.n	8003b40 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f9      	bne.n	8003b3a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b46:	f7fe fc09 	bl	800235c <HAL_GetTick>
 8003b4a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b4c:	e028      	b.n	8003ba0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fe00 	bl	8002758 <LL_ADC_IsEnabled>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d104      	bne.n	8003b68 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fde4 	bl	8002730 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b68:	f7fe fbf8 	bl	800235c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d914      	bls.n	8003ba0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d00d      	beq.n	8003ba0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b88:	f043 0210 	orr.w	r2, r3, #16
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e007      	b.n	8003bb0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d1cf      	bne.n	8003b4e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	8000003f 	.word	0x8000003f
 8003bbc:	50000100 	.word	0x50000100
 8003bc0:	50000300 	.word	0x50000300
 8003bc4:	50000700 	.word	0x50000700
 8003bc8:	20000004 	.word	0x20000004
 8003bcc:	053e2d63 	.word	0x053e2d63

08003bd0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d14b      	bne.n	8003c82 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d021      	beq.n	8003c48 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe fc85 	bl	8002518 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d032      	beq.n	8003c7a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d12b      	bne.n	8003c7a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c26:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d11f      	bne.n	8003c7a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3e:	f043 0201 	orr.w	r2, r3, #1
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c46:	e018      	b.n	8003c7a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d111      	bne.n	8003c7a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d105      	bne.n	8003c7a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c72:	f043 0201 	orr.w	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7ff faaa 	bl	80031d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c80:	e00e      	b.n	8003ca0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff fabe 	bl	8003210 <HAL_ADC_ErrorCallback>
}
 8003c94:	e004      	b.n	8003ca0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4798      	blx	r3
}
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f7ff fa96 	bl	80031e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cbc:	bf00      	nop
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce2:	f043 0204 	orr.w	r2, r3, #4
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f7ff fa90 	bl	8003210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cf0:	bf00      	nop
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <LL_ADC_IsEnabled>:
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <LL_ADC_IsEnabled+0x18>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <LL_ADC_IsEnabled+0x1a>
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <LL_ADC_REG_IsConversionOngoing>:
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d101      	bne.n	8003d36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b0a1      	sub	sp, #132	@ 0x84
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e0e7      	b.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003dce:	2300      	movs	r3, #0
 8003dd0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dde:	d102      	bne.n	8003de6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003de0:	4b6f      	ldr	r3, [pc, #444]	@ (8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	e009      	b.n	8003dfa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d102      	bne.n	8003df6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003df0:	4b6d      	ldr	r3, [pc, #436]	@ (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	e001      	b.n	8003dfa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e04:	f043 0220 	orr.w	r2, r3, #32
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0be      	b.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff ff7f 	bl	8003d1e <LL_ADC_REG_IsConversionOngoing>
 8003e20:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ff79 	bl	8003d1e <LL_ADC_REG_IsConversionOngoing>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f040 80a0 	bne.w	8003f74 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003e34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f040 809c 	bne.w	8003f74 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e44:	d004      	beq.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a55      	ldr	r2, [pc, #340]	@ (8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d101      	bne.n	8003e54 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003e50:	4b56      	ldr	r3, [pc, #344]	@ (8003fac <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003e52:	e000      	b.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003e54:	4b56      	ldr	r3, [pc, #344]	@ (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003e56:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d04b      	beq.n	8003ef8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e72:	035b      	lsls	r3, r3, #13
 8003e74:	430b      	orrs	r3, r1
 8003e76:	431a      	orrs	r2, r3
 8003e78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e84:	d004      	beq.n	8003e90 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a45      	ldr	r2, [pc, #276]	@ (8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d10f      	bne.n	8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003e90:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e94:	f7ff ff30 	bl	8003cf8 <LL_ADC_IsEnabled>
 8003e98:	4604      	mov	r4, r0
 8003e9a:	4841      	ldr	r0, [pc, #260]	@ (8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e9c:	f7ff ff2c 	bl	8003cf8 <LL_ADC_IsEnabled>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4323      	orrs	r3, r4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	e012      	b.n	8003ed6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003eb0:	483c      	ldr	r0, [pc, #240]	@ (8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003eb2:	f7ff ff21 	bl	8003cf8 <LL_ADC_IsEnabled>
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	483b      	ldr	r0, [pc, #236]	@ (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003eba:	f7ff ff1d 	bl	8003cf8 <LL_ADC_IsEnabled>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	431c      	orrs	r4, r3
 8003ec2:	483c      	ldr	r0, [pc, #240]	@ (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ec4:	f7ff ff18 	bl	8003cf8 <LL_ADC_IsEnabled>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	4323      	orrs	r3, r4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d056      	beq.n	8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003eda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003ee2:	f023 030f 	bic.w	r3, r3, #15
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	6811      	ldr	r1, [r2, #0]
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	6892      	ldr	r2, [r2, #8]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ef4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ef6:	e047      	b.n	8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ef8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f02:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f0c:	d004      	beq.n	8003f18 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a23      	ldr	r2, [pc, #140]	@ (8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d10f      	bne.n	8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003f18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003f1c:	f7ff feec 	bl	8003cf8 <LL_ADC_IsEnabled>
 8003f20:	4604      	mov	r4, r0
 8003f22:	481f      	ldr	r0, [pc, #124]	@ (8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f24:	f7ff fee8 	bl	8003cf8 <LL_ADC_IsEnabled>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	4323      	orrs	r3, r4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e012      	b.n	8003f5e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003f38:	481a      	ldr	r0, [pc, #104]	@ (8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f3a:	f7ff fedd 	bl	8003cf8 <LL_ADC_IsEnabled>
 8003f3e:	4604      	mov	r4, r0
 8003f40:	4819      	ldr	r0, [pc, #100]	@ (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f42:	f7ff fed9 	bl	8003cf8 <LL_ADC_IsEnabled>
 8003f46:	4603      	mov	r3, r0
 8003f48:	431c      	orrs	r4, r3
 8003f4a:	481a      	ldr	r0, [pc, #104]	@ (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f4c:	f7ff fed4 	bl	8003cf8 <LL_ADC_IsEnabled>
 8003f50:	4603      	mov	r3, r0
 8003f52:	4323      	orrs	r3, r4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	bf0c      	ite	eq
 8003f58:	2301      	moveq	r3, #1
 8003f5a:	2300      	movne	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d012      	beq.n	8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003f6a:	f023 030f 	bic.w	r3, r3, #15
 8003f6e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003f70:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f72:	e009      	b.n	8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f78:	f043 0220 	orr.w	r2, r3, #32
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003f86:	e000      	b.n	8003f8a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f92:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3784      	adds	r7, #132	@ 0x84
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd90      	pop	{r4, r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	50000100 	.word	0x50000100
 8003fa4:	50000400 	.word	0x50000400
 8003fa8:	50000500 	.word	0x50000500
 8003fac:	50000300 	.word	0x50000300
 8003fb0:	50000700 	.word	0x50000700
 8003fb4:	50000600 	.word	0x50000600

08003fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003ffc <__NVIC_SetPriorityGrouping+0x44>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fea:	4a04      	ldr	r2, [pc, #16]	@ (8003ffc <__NVIC_SetPriorityGrouping+0x44>)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	60d3      	str	r3, [r2, #12]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004004:	4b04      	ldr	r3, [pc, #16]	@ (8004018 <__NVIC_GetPriorityGrouping+0x18>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	0a1b      	lsrs	r3, r3, #8
 800400a:	f003 0307 	and.w	r3, r3, #7
}
 800400e:	4618      	mov	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402a:	2b00      	cmp	r3, #0
 800402c:	db0b      	blt.n	8004046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	f003 021f 	and.w	r2, r3, #31
 8004034:	4907      	ldr	r1, [pc, #28]	@ (8004054 <__NVIC_EnableIRQ+0x38>)
 8004036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	2001      	movs	r0, #1
 800403e:	fa00 f202 	lsl.w	r2, r0, r2
 8004042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	e000e100 	.word	0xe000e100

08004058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	6039      	str	r1, [r7, #0]
 8004062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004068:	2b00      	cmp	r3, #0
 800406a:	db0a      	blt.n	8004082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	b2da      	uxtb	r2, r3
 8004070:	490c      	ldr	r1, [pc, #48]	@ (80040a4 <__NVIC_SetPriority+0x4c>)
 8004072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004076:	0112      	lsls	r2, r2, #4
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	440b      	add	r3, r1
 800407c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004080:	e00a      	b.n	8004098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	4908      	ldr	r1, [pc, #32]	@ (80040a8 <__NVIC_SetPriority+0x50>)
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	3b04      	subs	r3, #4
 8004090:	0112      	lsls	r2, r2, #4
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	440b      	add	r3, r1
 8004096:	761a      	strb	r2, [r3, #24]
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	e000e100 	.word	0xe000e100
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b089      	sub	sp, #36	@ 0x24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f1c3 0307 	rsb	r3, r3, #7
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	bf28      	it	cs
 80040ca:	2304      	movcs	r3, #4
 80040cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3304      	adds	r3, #4
 80040d2:	2b06      	cmp	r3, #6
 80040d4:	d902      	bls.n	80040dc <NVIC_EncodePriority+0x30>
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3b03      	subs	r3, #3
 80040da:	e000      	b.n	80040de <NVIC_EncodePriority+0x32>
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e0:	f04f 32ff 	mov.w	r2, #4294967295
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43da      	mvns	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	401a      	ands	r2, r3
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f4:	f04f 31ff 	mov.w	r1, #4294967295
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	fa01 f303 	lsl.w	r3, r1, r3
 80040fe:	43d9      	mvns	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004104:	4313      	orrs	r3, r2
         );
}
 8004106:	4618      	mov	r0, r3
 8004108:	3724      	adds	r7, #36	@ 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3b01      	subs	r3, #1
 8004120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004124:	d301      	bcc.n	800412a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004126:	2301      	movs	r3, #1
 8004128:	e00f      	b.n	800414a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800412a:	4a0a      	ldr	r2, [pc, #40]	@ (8004154 <SysTick_Config+0x40>)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3b01      	subs	r3, #1
 8004130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004132:	210f      	movs	r1, #15
 8004134:	f04f 30ff 	mov.w	r0, #4294967295
 8004138:	f7ff ff8e 	bl	8004058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800413c:	4b05      	ldr	r3, [pc, #20]	@ (8004154 <SysTick_Config+0x40>)
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004142:	4b04      	ldr	r3, [pc, #16]	@ (8004154 <SysTick_Config+0x40>)
 8004144:	2207      	movs	r2, #7
 8004146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	e000e010 	.word	0xe000e010

08004158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff ff29 	bl	8003fb8 <__NVIC_SetPriorityGrouping>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	4603      	mov	r3, r0
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800417c:	f7ff ff40 	bl	8004000 <__NVIC_GetPriorityGrouping>
 8004180:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	6978      	ldr	r0, [r7, #20]
 8004188:	f7ff ff90 	bl	80040ac <NVIC_EncodePriority>
 800418c:	4602      	mov	r2, r0
 800418e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004192:	4611      	mov	r1, r2
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff ff5f 	bl	8004058 <__NVIC_SetPriority>
}
 800419a:	bf00      	nop
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	4603      	mov	r3, r0
 80041aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff ff33 	bl	800401c <__NVIC_EnableIRQ>
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b082      	sub	sp, #8
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff ffa4 	bl	8004114 <SysTick_Config>
 80041cc:	4603      	mov	r3, r0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e08d      	b.n	8004306 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b47      	ldr	r3, [pc, #284]	@ (8004310 <HAL_DMA_Init+0x138>)
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d80f      	bhi.n	8004216 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	4b45      	ldr	r3, [pc, #276]	@ (8004314 <HAL_DMA_Init+0x13c>)
 80041fe:	4413      	add	r3, r2
 8004200:	4a45      	ldr	r2, [pc, #276]	@ (8004318 <HAL_DMA_Init+0x140>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	009a      	lsls	r2, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a42      	ldr	r2, [pc, #264]	@ (800431c <HAL_DMA_Init+0x144>)
 8004212:	641a      	str	r2, [r3, #64]	@ 0x40
 8004214:	e00e      	b.n	8004234 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	4b40      	ldr	r3, [pc, #256]	@ (8004320 <HAL_DMA_Init+0x148>)
 800421e:	4413      	add	r3, r2
 8004220:	4a3d      	ldr	r2, [pc, #244]	@ (8004318 <HAL_DMA_Init+0x140>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	091b      	lsrs	r3, r3, #4
 8004228:	009a      	lsls	r2, r3, #2
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a3c      	ldr	r2, [pc, #240]	@ (8004324 <HAL_DMA_Init+0x14c>)
 8004232:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800424a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800424e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004258:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004264:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004270:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f9b6 	bl	80045f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004294:	d102      	bne.n	800429c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042b0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d010      	beq.n	80042dc <HAL_DMA_Init+0x104>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d80c      	bhi.n	80042dc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f9d6 	bl	8004674 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	e008      	b.n	80042ee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40020407 	.word	0x40020407
 8004314:	bffdfff8 	.word	0xbffdfff8
 8004318:	cccccccd 	.word	0xcccccccd
 800431c:	40020000 	.word	0x40020000
 8004320:	bffdfbf8 	.word	0xbffdfbf8
 8004324:	40020400 	.word	0x40020400

08004328 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_DMA_Start_IT+0x20>
 8004344:	2302      	movs	r3, #2
 8004346:	e066      	b.n	8004416 <HAL_DMA_Start_IT+0xee>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	d155      	bne.n	8004408 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f8fb 	bl	800457c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 020e 	orr.w	r2, r2, #14
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	e00f      	b.n	80043c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0204 	bic.w	r2, r2, #4
 80043ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 020a 	orr.w	r2, r2, #10
 80043be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e005      	b.n	8004414 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004410:	2302      	movs	r3, #2
 8004412:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004414:	7dfb      	ldrb	r3, [r7, #23]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2204      	movs	r2, #4
 8004440:	409a      	lsls	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4013      	ands	r3, r2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d026      	beq.n	8004498 <HAL_DMA_IRQHandler+0x7a>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d021      	beq.n	8004498 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d107      	bne.n	8004472 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0204 	bic.w	r2, r2, #4
 8004470:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004476:	f003 021f 	and.w	r2, r3, #31
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	2104      	movs	r1, #4
 8004480:	fa01 f202 	lsl.w	r2, r1, r2
 8004484:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448a:	2b00      	cmp	r3, #0
 800448c:	d071      	beq.n	8004572 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004496:	e06c      	b.n	8004572 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2202      	movs	r2, #2
 80044a2:	409a      	lsls	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d02e      	beq.n	800450a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d029      	beq.n	800450a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 020a 	bic.w	r2, r2, #10
 80044d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e0:	f003 021f 	and.w	r2, r3, #31
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e8:	2102      	movs	r1, #2
 80044ea:	fa01 f202 	lsl.w	r2, r1, r2
 80044ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d038      	beq.n	8004572 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004508:	e033      	b.n	8004572 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	2208      	movs	r2, #8
 8004514:	409a      	lsls	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4013      	ands	r3, r2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d02a      	beq.n	8004574 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d025      	beq.n	8004574 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 020e 	bic.w	r2, r2, #14
 8004536:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453c:	f003 021f 	and.w	r2, r3, #31
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004544:	2101      	movs	r1, #1
 8004546:	fa01 f202 	lsl.w	r2, r1, r2
 800454a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004566:	2b00      	cmp	r3, #0
 8004568:	d004      	beq.n	8004574 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004572:	bf00      	nop
 8004574:	bf00      	nop
}
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004592:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004598:	2b00      	cmp	r3, #0
 800459a:	d004      	beq.n	80045a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80045a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	f003 021f 	and.w	r2, r3, #31
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	2101      	movs	r1, #1
 80045b4:	fa01 f202 	lsl.w	r2, r1, r2
 80045b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d108      	bne.n	80045dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045da:	e007      	b.n	80045ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]
}
 80045ec:	bf00      	nop
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	4b16      	ldr	r3, [pc, #88]	@ (8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004608:	429a      	cmp	r2, r3
 800460a:	d802      	bhi.n	8004612 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800460c:	4b15      	ldr	r3, [pc, #84]	@ (8004664 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	e001      	b.n	8004616 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004612:	4b15      	ldr	r3, [pc, #84]	@ (8004668 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004614:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	3b08      	subs	r3, #8
 8004622:	4a12      	ldr	r2, [pc, #72]	@ (800466c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004630:	089b      	lsrs	r3, r3, #2
 8004632:	009a      	lsls	r2, r3, #2
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4413      	add	r3, r2
 8004638:	461a      	mov	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a0b      	ldr	r2, [pc, #44]	@ (8004670 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004642:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	2201      	movs	r2, #1
 800464c:	409a      	lsls	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40020407 	.word	0x40020407
 8004664:	40020800 	.word	0x40020800
 8004668:	40020820 	.word	0x40020820
 800466c:	cccccccd 	.word	0xcccccccd
 8004670:	40020880 	.word	0x40020880

08004674 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4b0b      	ldr	r3, [pc, #44]	@ (80046b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	461a      	mov	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a08      	ldr	r2, [pc, #32]	@ (80046b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004696:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	3b01      	subs	r3, #1
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	2201      	movs	r2, #1
 80046a2:	409a      	lsls	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80046a8:	bf00      	nop
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	1000823f 	.word	0x1000823f
 80046b8:	40020940 	.word	0x40020940

080046bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046ca:	e15a      	b.n	8004982 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	2101      	movs	r1, #1
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	4013      	ands	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 814c 	beq.w	800497c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d005      	beq.n	80046fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d130      	bne.n	800475e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	2203      	movs	r2, #3
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4013      	ands	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004732:	2201      	movs	r2, #1
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	f003 0201 	and.w	r2, r3, #1
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b03      	cmp	r3, #3
 8004768:	d017      	beq.n	800479a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	2203      	movs	r2, #3
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4013      	ands	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d123      	bne.n	80047ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	08da      	lsrs	r2, r3, #3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3208      	adds	r2, #8
 80047ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	220f      	movs	r2, #15
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4013      	ands	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	08da      	lsrs	r2, r3, #3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3208      	adds	r2, #8
 80047e8:	6939      	ldr	r1, [r7, #16]
 80047ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	2203      	movs	r2, #3
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	43db      	mvns	r3, r3
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4013      	ands	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 0203 	and.w	r2, r3, #3
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 80a6 	beq.w	800497c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004830:	4b5b      	ldr	r3, [pc, #364]	@ (80049a0 <HAL_GPIO_Init+0x2e4>)
 8004832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004834:	4a5a      	ldr	r2, [pc, #360]	@ (80049a0 <HAL_GPIO_Init+0x2e4>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	6613      	str	r3, [r2, #96]	@ 0x60
 800483c:	4b58      	ldr	r3, [pc, #352]	@ (80049a0 <HAL_GPIO_Init+0x2e4>)
 800483e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	60bb      	str	r3, [r7, #8]
 8004846:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004848:	4a56      	ldr	r2, [pc, #344]	@ (80049a4 <HAL_GPIO_Init+0x2e8>)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	089b      	lsrs	r3, r3, #2
 800484e:	3302      	adds	r3, #2
 8004850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004854:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	220f      	movs	r2, #15
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	43db      	mvns	r3, r3
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4013      	ands	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004872:	d01f      	beq.n	80048b4 <HAL_GPIO_Init+0x1f8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a4c      	ldr	r2, [pc, #304]	@ (80049a8 <HAL_GPIO_Init+0x2ec>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d019      	beq.n	80048b0 <HAL_GPIO_Init+0x1f4>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a4b      	ldr	r2, [pc, #300]	@ (80049ac <HAL_GPIO_Init+0x2f0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d013      	beq.n	80048ac <HAL_GPIO_Init+0x1f0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a4a      	ldr	r2, [pc, #296]	@ (80049b0 <HAL_GPIO_Init+0x2f4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00d      	beq.n	80048a8 <HAL_GPIO_Init+0x1ec>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a49      	ldr	r2, [pc, #292]	@ (80049b4 <HAL_GPIO_Init+0x2f8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d007      	beq.n	80048a4 <HAL_GPIO_Init+0x1e8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a48      	ldr	r2, [pc, #288]	@ (80049b8 <HAL_GPIO_Init+0x2fc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_GPIO_Init+0x1e4>
 800489c:	2305      	movs	r3, #5
 800489e:	e00a      	b.n	80048b6 <HAL_GPIO_Init+0x1fa>
 80048a0:	2306      	movs	r3, #6
 80048a2:	e008      	b.n	80048b6 <HAL_GPIO_Init+0x1fa>
 80048a4:	2304      	movs	r3, #4
 80048a6:	e006      	b.n	80048b6 <HAL_GPIO_Init+0x1fa>
 80048a8:	2303      	movs	r3, #3
 80048aa:	e004      	b.n	80048b6 <HAL_GPIO_Init+0x1fa>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e002      	b.n	80048b6 <HAL_GPIO_Init+0x1fa>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <HAL_GPIO_Init+0x1fa>
 80048b4:	2300      	movs	r3, #0
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	f002 0203 	and.w	r2, r2, #3
 80048bc:	0092      	lsls	r2, r2, #2
 80048be:	4093      	lsls	r3, r2
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048c6:	4937      	ldr	r1, [pc, #220]	@ (80049a4 <HAL_GPIO_Init+0x2e8>)
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	089b      	lsrs	r3, r3, #2
 80048cc:	3302      	adds	r3, #2
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048d4:	4b39      	ldr	r3, [pc, #228]	@ (80049bc <HAL_GPIO_Init+0x300>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	43db      	mvns	r3, r3
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4013      	ands	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048f8:	4a30      	ldr	r2, [pc, #192]	@ (80049bc <HAL_GPIO_Init+0x300>)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048fe:	4b2f      	ldr	r3, [pc, #188]	@ (80049bc <HAL_GPIO_Init+0x300>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	43db      	mvns	r3, r3
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4013      	ands	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004922:	4a26      	ldr	r2, [pc, #152]	@ (80049bc <HAL_GPIO_Init+0x300>)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004928:	4b24      	ldr	r3, [pc, #144]	@ (80049bc <HAL_GPIO_Init+0x300>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	43db      	mvns	r3, r3
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4013      	ands	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800494c:	4a1b      	ldr	r2, [pc, #108]	@ (80049bc <HAL_GPIO_Init+0x300>)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004952:	4b1a      	ldr	r3, [pc, #104]	@ (80049bc <HAL_GPIO_Init+0x300>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	43db      	mvns	r3, r3
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4013      	ands	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004976:	4a11      	ldr	r2, [pc, #68]	@ (80049bc <HAL_GPIO_Init+0x300>)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	3301      	adds	r3, #1
 8004980:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	f47f ae9d 	bne.w	80046cc <HAL_GPIO_Init+0x10>
  }
}
 8004992:	bf00      	nop
 8004994:	bf00      	nop
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40010000 	.word	0x40010000
 80049a8:	48000400 	.word	0x48000400
 80049ac:	48000800 	.word	0x48000800
 80049b0:	48000c00 	.word	0x48000c00
 80049b4:	48001000 	.word	0x48001000
 80049b8:	48001400 	.word	0x48001400
 80049bc:	40010400 	.word	0x40010400

080049c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	807b      	strh	r3, [r7, #2]
 80049cc:	4613      	mov	r3, r2
 80049ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049d0:	787b      	ldrb	r3, [r7, #1]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049dc:	e002      	b.n	80049e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049de:	887a      	ldrh	r2, [r7, #2]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049fa:	4b08      	ldr	r3, [pc, #32]	@ (8004a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	4013      	ands	r3, r2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d006      	beq.n	8004a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a06:	4a05      	ldr	r2, [pc, #20]	@ (8004a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fc fdf2 	bl	80015f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40010400 	.word	0x40010400

08004a20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d141      	bne.n	8004ab2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a2e:	4b4b      	ldr	r3, [pc, #300]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3a:	d131      	bne.n	8004aa0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a3c:	4b47      	ldr	r3, [pc, #284]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a42:	4a46      	ldr	r2, [pc, #280]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a4c:	4b43      	ldr	r3, [pc, #268]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a54:	4a41      	ldr	r2, [pc, #260]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a5c:	4b40      	ldr	r3, [pc, #256]	@ (8004b60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2232      	movs	r2, #50	@ 0x32
 8004a62:	fb02 f303 	mul.w	r3, r2, r3
 8004a66:	4a3f      	ldr	r2, [pc, #252]	@ (8004b64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a68:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6c:	0c9b      	lsrs	r3, r3, #18
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a72:	e002      	b.n	8004a7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a7a:	4b38      	ldr	r3, [pc, #224]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a86:	d102      	bne.n	8004a8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f2      	bne.n	8004a74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a8e:	4b33      	ldr	r3, [pc, #204]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9a:	d158      	bne.n	8004b4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e057      	b.n	8004b50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aa6:	4a2d      	ldr	r2, [pc, #180]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ab0:	e04d      	b.n	8004b4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab8:	d141      	bne.n	8004b3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004aba:	4b28      	ldr	r3, [pc, #160]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac6:	d131      	bne.n	8004b2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ac8:	4b24      	ldr	r3, [pc, #144]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ace:	4a23      	ldr	r2, [pc, #140]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ad4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ad8:	4b20      	ldr	r3, [pc, #128]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ae6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2232      	movs	r2, #50	@ 0x32
 8004aee:	fb02 f303 	mul.w	r3, r2, r3
 8004af2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004af4:	fba2 2303 	umull	r2, r3, r2, r3
 8004af8:	0c9b      	lsrs	r3, r3, #18
 8004afa:	3301      	adds	r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004afe:	e002      	b.n	8004b06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b06:	4b15      	ldr	r3, [pc, #84]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b12:	d102      	bne.n	8004b1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f2      	bne.n	8004b00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b1a:	4b10      	ldr	r3, [pc, #64]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b26:	d112      	bne.n	8004b4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e011      	b.n	8004b50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b32:	4a0a      	ldr	r2, [pc, #40]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004b3c:	e007      	b.n	8004b4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b3e:	4b07      	ldr	r3, [pc, #28]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b46:	4a05      	ldr	r2, [pc, #20]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	40007000 	.word	0x40007000
 8004b60:	20000004 	.word	0x20000004
 8004b64:	431bde83 	.word	0x431bde83

08004b68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b6c:	4b05      	ldr	r3, [pc, #20]	@ (8004b84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a04      	ldr	r2, [pc, #16]	@ (8004b84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b76:	6093      	str	r3, [r2, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40007000 	.word	0x40007000

08004b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e2fe      	b.n	8005198 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d075      	beq.n	8004c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba6:	4b97      	ldr	r3, [pc, #604]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bb0:	4b94      	ldr	r3, [pc, #592]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b0c      	cmp	r3, #12
 8004bbe:	d102      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x3e>
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d002      	beq.n	8004bcc <HAL_RCC_OscConfig+0x44>
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d10b      	bne.n	8004be4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bcc:	4b8d      	ldr	r3, [pc, #564]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d05b      	beq.n	8004c90 <HAL_RCC_OscConfig+0x108>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d157      	bne.n	8004c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e2d9      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bec:	d106      	bne.n	8004bfc <HAL_RCC_OscConfig+0x74>
 8004bee:	4b85      	ldr	r3, [pc, #532]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a84      	ldr	r2, [pc, #528]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	e01d      	b.n	8004c38 <HAL_RCC_OscConfig+0xb0>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c04:	d10c      	bne.n	8004c20 <HAL_RCC_OscConfig+0x98>
 8004c06:	4b7f      	ldr	r3, [pc, #508]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	4b7c      	ldr	r3, [pc, #496]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a7b      	ldr	r2, [pc, #492]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e00b      	b.n	8004c38 <HAL_RCC_OscConfig+0xb0>
 8004c20:	4b78      	ldr	r3, [pc, #480]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a77      	ldr	r2, [pc, #476]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	4b75      	ldr	r3, [pc, #468]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a74      	ldr	r2, [pc, #464]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d013      	beq.n	8004c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fd fb8c 	bl	800235c <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fd fb88 	bl	800235c <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	@ 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e29e      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0xc0>
 8004c66:	e014      	b.n	8004c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7fd fb78 	bl	800235c <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c70:	f7fd fb74 	bl	800235c <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b64      	cmp	r3, #100	@ 0x64
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e28a      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c82:	4b60      	ldr	r3, [pc, #384]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0xe8>
 8004c8e:	e000      	b.n	8004c92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d075      	beq.n	8004d8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c9e:	4b59      	ldr	r3, [pc, #356]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 030c 	and.w	r3, r3, #12
 8004ca6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ca8:	4b56      	ldr	r3, [pc, #344]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b0c      	cmp	r3, #12
 8004cb6:	d102      	bne.n	8004cbe <HAL_RCC_OscConfig+0x136>
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d002      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x13c>
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d11f      	bne.n	8004d04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cc4:	4b4f      	ldr	r3, [pc, #316]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <HAL_RCC_OscConfig+0x154>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e25d      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cdc:	4b49      	ldr	r3, [pc, #292]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	061b      	lsls	r3, r3, #24
 8004cea:	4946      	ldr	r1, [pc, #280]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cf0:	4b45      	ldr	r3, [pc, #276]	@ (8004e08 <HAL_RCC_OscConfig+0x280>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fd fae5 	bl	80022c4 <HAL_InitTick>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d043      	beq.n	8004d88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e249      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d023      	beq.n	8004d54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d0c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a3c      	ldr	r2, [pc, #240]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fd fb20 	bl	800235c <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d20:	f7fd fb1c 	bl	800235c <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e232      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d32:	4b34      	ldr	r3, [pc, #208]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3e:	4b31      	ldr	r3, [pc, #196]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	061b      	lsls	r3, r3, #24
 8004d4c:	492d      	ldr	r1, [pc, #180]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	604b      	str	r3, [r1, #4]
 8004d52:	e01a      	b.n	8004d8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d54:	4b2b      	ldr	r3, [pc, #172]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a2a      	ldr	r2, [pc, #168]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004d5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d60:	f7fd fafc 	bl	800235c <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d68:	f7fd faf8 	bl	800235c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e20e      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d7a:	4b22      	ldr	r3, [pc, #136]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f0      	bne.n	8004d68 <HAL_RCC_OscConfig+0x1e0>
 8004d86:	e000      	b.n	8004d8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d041      	beq.n	8004e1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01c      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d9e:	4b19      	ldr	r3, [pc, #100]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004da4:	4a17      	ldr	r2, [pc, #92]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dae:	f7fd fad5 	bl	800235c <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db6:	f7fd fad1 	bl	800235c <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e1e7      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0ef      	beq.n	8004db6 <HAL_RCC_OscConfig+0x22e>
 8004dd6:	e020      	b.n	8004e1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dde:	4a09      	ldr	r2, [pc, #36]	@ (8004e04 <HAL_RCC_OscConfig+0x27c>)
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fd fab8 	bl	800235c <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dee:	e00d      	b.n	8004e0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df0:	f7fd fab4 	bl	800235c <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d906      	bls.n	8004e0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e1ca      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
 8004e02:	bf00      	nop
 8004e04:	40021000 	.word	0x40021000
 8004e08:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e0c:	4b8c      	ldr	r3, [pc, #560]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1ea      	bne.n	8004df0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 80a6 	beq.w	8004f74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e2c:	4b84      	ldr	r3, [pc, #528]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_RCC_OscConfig+0x2b4>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <HAL_RCC_OscConfig+0x2b6>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00d      	beq.n	8004e5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e42:	4b7f      	ldr	r3, [pc, #508]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e46:	4a7e      	ldr	r2, [pc, #504]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e4e:	4b7c      	ldr	r3, [pc, #496]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e5e:	4b79      	ldr	r3, [pc, #484]	@ (8005044 <HAL_RCC_OscConfig+0x4bc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d118      	bne.n	8004e9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e6a:	4b76      	ldr	r3, [pc, #472]	@ (8005044 <HAL_RCC_OscConfig+0x4bc>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a75      	ldr	r2, [pc, #468]	@ (8005044 <HAL_RCC_OscConfig+0x4bc>)
 8004e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e76:	f7fd fa71 	bl	800235c <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7e:	f7fd fa6d 	bl	800235c <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e183      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e90:	4b6c      	ldr	r3, [pc, #432]	@ (8005044 <HAL_RCC_OscConfig+0x4bc>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d108      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x32e>
 8004ea4:	4b66      	ldr	r3, [pc, #408]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eaa:	4a65      	ldr	r2, [pc, #404]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004eb4:	e024      	b.n	8004f00 <HAL_RCC_OscConfig+0x378>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b05      	cmp	r3, #5
 8004ebc:	d110      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x358>
 8004ebe:	4b60      	ldr	r3, [pc, #384]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec4:	4a5e      	ldr	r2, [pc, #376]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004ec6:	f043 0304 	orr.w	r3, r3, #4
 8004eca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ece:	4b5c      	ldr	r3, [pc, #368]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed4:	4a5a      	ldr	r2, [pc, #360]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ede:	e00f      	b.n	8004f00 <HAL_RCC_OscConfig+0x378>
 8004ee0:	4b57      	ldr	r3, [pc, #348]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee6:	4a56      	ldr	r2, [pc, #344]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ef0:	4b53      	ldr	r3, [pc, #332]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef6:	4a52      	ldr	r2, [pc, #328]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004ef8:	f023 0304 	bic.w	r3, r3, #4
 8004efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d016      	beq.n	8004f36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f08:	f7fd fa28 	bl	800235c <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f0e:	e00a      	b.n	8004f26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f10:	f7fd fa24 	bl	800235c <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e138      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f26:	4b46      	ldr	r3, [pc, #280]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0ed      	beq.n	8004f10 <HAL_RCC_OscConfig+0x388>
 8004f34:	e015      	b.n	8004f62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f36:	f7fd fa11 	bl	800235c <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f3c:	e00a      	b.n	8004f54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3e:	f7fd fa0d 	bl	800235c <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e121      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f54:	4b3a      	ldr	r3, [pc, #232]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1ed      	bne.n	8004f3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f62:	7ffb      	ldrb	r3, [r7, #31]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d105      	bne.n	8004f74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f68:	4b35      	ldr	r3, [pc, #212]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f6c:	4a34      	ldr	r2, [pc, #208]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d03c      	beq.n	8004ffa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01c      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f88:	4b2d      	ldr	r3, [pc, #180]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f98:	f7fd f9e0 	bl	800235c <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fa0:	f7fd f9dc 	bl	800235c <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e0f2      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fb2:	4b23      	ldr	r3, [pc, #140]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0ef      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x418>
 8004fc0:	e01b      	b.n	8004ffa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd2:	f7fd f9c3 	bl	800235c <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fda:	f7fd f9bf 	bl	800235c <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e0d5      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fec:	4b14      	ldr	r3, [pc, #80]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8004fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1ef      	bne.n	8004fda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 80c9 	beq.w	8005196 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005004:	4b0e      	ldr	r3, [pc, #56]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 030c 	and.w	r3, r3, #12
 800500c:	2b0c      	cmp	r3, #12
 800500e:	f000 8083 	beq.w	8005118 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d15e      	bne.n	80050d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501a:	4b09      	ldr	r3, [pc, #36]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a08      	ldr	r2, [pc, #32]	@ (8005040 <HAL_RCC_OscConfig+0x4b8>)
 8005020:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005026:	f7fd f999 	bl	800235c <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800502c:	e00c      	b.n	8005048 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502e:	f7fd f995 	bl	800235c <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d905      	bls.n	8005048 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e0ab      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
 8005040:	40021000 	.word	0x40021000
 8005044:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005048:	4b55      	ldr	r3, [pc, #340]	@ (80051a0 <HAL_RCC_OscConfig+0x618>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1ec      	bne.n	800502e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005054:	4b52      	ldr	r3, [pc, #328]	@ (80051a0 <HAL_RCC_OscConfig+0x618>)
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	4b52      	ldr	r3, [pc, #328]	@ (80051a4 <HAL_RCC_OscConfig+0x61c>)
 800505a:	4013      	ands	r3, r2
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6a11      	ldr	r1, [r2, #32]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005064:	3a01      	subs	r2, #1
 8005066:	0112      	lsls	r2, r2, #4
 8005068:	4311      	orrs	r1, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800506e:	0212      	lsls	r2, r2, #8
 8005070:	4311      	orrs	r1, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005076:	0852      	lsrs	r2, r2, #1
 8005078:	3a01      	subs	r2, #1
 800507a:	0552      	lsls	r2, r2, #21
 800507c:	4311      	orrs	r1, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005082:	0852      	lsrs	r2, r2, #1
 8005084:	3a01      	subs	r2, #1
 8005086:	0652      	lsls	r2, r2, #25
 8005088:	4311      	orrs	r1, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800508e:	06d2      	lsls	r2, r2, #27
 8005090:	430a      	orrs	r2, r1
 8005092:	4943      	ldr	r1, [pc, #268]	@ (80051a0 <HAL_RCC_OscConfig+0x618>)
 8005094:	4313      	orrs	r3, r2
 8005096:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005098:	4b41      	ldr	r3, [pc, #260]	@ (80051a0 <HAL_RCC_OscConfig+0x618>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a40      	ldr	r2, [pc, #256]	@ (80051a0 <HAL_RCC_OscConfig+0x618>)
 800509e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050a4:	4b3e      	ldr	r3, [pc, #248]	@ (80051a0 <HAL_RCC_OscConfig+0x618>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	4a3d      	ldr	r2, [pc, #244]	@ (80051a0 <HAL_RCC_OscConfig+0x618>)
 80050aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7fd f954 	bl	800235c <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b8:	f7fd f950 	bl	800235c <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e066      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ca:	4b35      	ldr	r3, [pc, #212]	@ (80051a0 <HAL_RCC_OscConfig+0x618>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0x530>
 80050d6:	e05e      	b.n	8005196 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d8:	4b31      	ldr	r3, [pc, #196]	@ (80051a0 <HAL_RCC_OscConfig+0x618>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a30      	ldr	r2, [pc, #192]	@ (80051a0 <HAL_RCC_OscConfig+0x618>)
 80050de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fd f93a 	bl	800235c <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fd f936 	bl	800235c <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e04c      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050fe:	4b28      	ldr	r3, [pc, #160]	@ (80051a0 <HAL_RCC_OscConfig+0x618>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800510a:	4b25      	ldr	r3, [pc, #148]	@ (80051a0 <HAL_RCC_OscConfig+0x618>)
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	4924      	ldr	r1, [pc, #144]	@ (80051a0 <HAL_RCC_OscConfig+0x618>)
 8005110:	4b25      	ldr	r3, [pc, #148]	@ (80051a8 <HAL_RCC_OscConfig+0x620>)
 8005112:	4013      	ands	r3, r2
 8005114:	60cb      	str	r3, [r1, #12]
 8005116:	e03e      	b.n	8005196 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e039      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005124:	4b1e      	ldr	r3, [pc, #120]	@ (80051a0 <HAL_RCC_OscConfig+0x618>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f003 0203 	and.w	r2, r3, #3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	429a      	cmp	r2, r3
 8005136:	d12c      	bne.n	8005192 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005142:	3b01      	subs	r3, #1
 8005144:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d123      	bne.n	8005192 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005154:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005156:	429a      	cmp	r2, r3
 8005158:	d11b      	bne.n	8005192 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005166:	429a      	cmp	r2, r3
 8005168:	d113      	bne.n	8005192 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005174:	085b      	lsrs	r3, r3, #1
 8005176:	3b01      	subs	r3, #1
 8005178:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800517a:	429a      	cmp	r2, r3
 800517c:	d109      	bne.n	8005192 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005188:	085b      	lsrs	r3, r3, #1
 800518a:	3b01      	subs	r3, #1
 800518c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800518e:	429a      	cmp	r2, r3
 8005190:	d001      	beq.n	8005196 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3720      	adds	r7, #32
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40021000 	.word	0x40021000
 80051a4:	019f800c 	.word	0x019f800c
 80051a8:	feeefffc 	.word	0xfeeefffc

080051ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e11e      	b.n	8005402 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051c4:	4b91      	ldr	r3, [pc, #580]	@ (800540c <HAL_RCC_ClockConfig+0x260>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d910      	bls.n	80051f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d2:	4b8e      	ldr	r3, [pc, #568]	@ (800540c <HAL_RCC_ClockConfig+0x260>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f023 020f 	bic.w	r2, r3, #15
 80051da:	498c      	ldr	r1, [pc, #560]	@ (800540c <HAL_RCC_ClockConfig+0x260>)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	4313      	orrs	r3, r2
 80051e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e2:	4b8a      	ldr	r3, [pc, #552]	@ (800540c <HAL_RCC_ClockConfig+0x260>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d001      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e106      	b.n	8005402 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d073      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b03      	cmp	r3, #3
 8005206:	d129      	bne.n	800525c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005208:	4b81      	ldr	r3, [pc, #516]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e0f4      	b.n	8005402 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005218:	f000 f99e 	bl	8005558 <RCC_GetSysClockFreqFromPLLSource>
 800521c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4a7c      	ldr	r2, [pc, #496]	@ (8005414 <HAL_RCC_ClockConfig+0x268>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d93f      	bls.n	80052a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005226:	4b7a      	ldr	r3, [pc, #488]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d009      	beq.n	8005246 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800523a:	2b00      	cmp	r3, #0
 800523c:	d033      	beq.n	80052a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005242:	2b00      	cmp	r3, #0
 8005244:	d12f      	bne.n	80052a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005246:	4b72      	ldr	r3, [pc, #456]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800524e:	4a70      	ldr	r2, [pc, #448]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 8005250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005254:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005256:	2380      	movs	r3, #128	@ 0x80
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	e024      	b.n	80052a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d107      	bne.n	8005274 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005264:	4b6a      	ldr	r3, [pc, #424]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d109      	bne.n	8005284 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e0c6      	b.n	8005402 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005274:	4b66      	ldr	r3, [pc, #408]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e0be      	b.n	8005402 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005284:	f000 f8ce 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 8005288:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4a61      	ldr	r2, [pc, #388]	@ (8005414 <HAL_RCC_ClockConfig+0x268>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d909      	bls.n	80052a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005292:	4b5f      	ldr	r3, [pc, #380]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800529a:	4a5d      	ldr	r2, [pc, #372]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 800529c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80052a2:	2380      	movs	r3, #128	@ 0x80
 80052a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052a6:	4b5a      	ldr	r3, [pc, #360]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f023 0203 	bic.w	r2, r3, #3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	4957      	ldr	r1, [pc, #348]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b8:	f7fd f850 	bl	800235c <HAL_GetTick>
 80052bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052be:	e00a      	b.n	80052d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c0:	f7fd f84c 	bl	800235c <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e095      	b.n	8005402 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052d6:	4b4e      	ldr	r3, [pc, #312]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 020c 	and.w	r2, r3, #12
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d1eb      	bne.n	80052c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d023      	beq.n	800533c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005300:	4b43      	ldr	r3, [pc, #268]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	4a42      	ldr	r2, [pc, #264]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 8005306:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800530a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b00      	cmp	r3, #0
 8005316:	d007      	beq.n	8005328 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005318:	4b3d      	ldr	r3, [pc, #244]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005320:	4a3b      	ldr	r2, [pc, #236]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 8005322:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005326:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005328:	4b39      	ldr	r3, [pc, #228]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	4936      	ldr	r1, [pc, #216]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 8005336:	4313      	orrs	r3, r2
 8005338:	608b      	str	r3, [r1, #8]
 800533a:	e008      	b.n	800534e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2b80      	cmp	r3, #128	@ 0x80
 8005340:	d105      	bne.n	800534e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005342:	4b33      	ldr	r3, [pc, #204]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	4a32      	ldr	r2, [pc, #200]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 8005348:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800534c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800534e:	4b2f      	ldr	r3, [pc, #188]	@ (800540c <HAL_RCC_ClockConfig+0x260>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d21d      	bcs.n	8005398 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535c:	4b2b      	ldr	r3, [pc, #172]	@ (800540c <HAL_RCC_ClockConfig+0x260>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f023 020f 	bic.w	r2, r3, #15
 8005364:	4929      	ldr	r1, [pc, #164]	@ (800540c <HAL_RCC_ClockConfig+0x260>)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	4313      	orrs	r3, r2
 800536a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800536c:	f7fc fff6 	bl	800235c <HAL_GetTick>
 8005370:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005372:	e00a      	b.n	800538a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005374:	f7fc fff2 	bl	800235c <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e03b      	b.n	8005402 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538a:	4b20      	ldr	r3, [pc, #128]	@ (800540c <HAL_RCC_ClockConfig+0x260>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d1ed      	bne.n	8005374 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d008      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4917      	ldr	r1, [pc, #92]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d009      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053c2:	4b13      	ldr	r3, [pc, #76]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	490f      	ldr	r1, [pc, #60]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053d6:	f000 f825 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80053da:	4602      	mov	r2, r0
 80053dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005410 <HAL_RCC_ClockConfig+0x264>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	091b      	lsrs	r3, r3, #4
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	490c      	ldr	r1, [pc, #48]	@ (8005418 <HAL_RCC_ClockConfig+0x26c>)
 80053e8:	5ccb      	ldrb	r3, [r1, r3]
 80053ea:	f003 031f 	and.w	r3, r3, #31
 80053ee:	fa22 f303 	lsr.w	r3, r2, r3
 80053f2:	4a0a      	ldr	r2, [pc, #40]	@ (800541c <HAL_RCC_ClockConfig+0x270>)
 80053f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80053f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005420 <HAL_RCC_ClockConfig+0x274>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fc ff62 	bl	80022c4 <HAL_InitTick>
 8005400:	4603      	mov	r3, r0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40022000 	.word	0x40022000
 8005410:	40021000 	.word	0x40021000
 8005414:	04c4b400 	.word	0x04c4b400
 8005418:	08008300 	.word	0x08008300
 800541c:	20000004 	.word	0x20000004
 8005420:	20000008 	.word	0x20000008

08005424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800542a:	4b2c      	ldr	r3, [pc, #176]	@ (80054dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 030c 	and.w	r3, r3, #12
 8005432:	2b04      	cmp	r3, #4
 8005434:	d102      	bne.n	800543c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005436:	4b2a      	ldr	r3, [pc, #168]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	e047      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800543c:	4b27      	ldr	r3, [pc, #156]	@ (80054dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 030c 	and.w	r3, r3, #12
 8005444:	2b08      	cmp	r3, #8
 8005446:	d102      	bne.n	800544e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005448:	4b26      	ldr	r3, [pc, #152]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800544a:	613b      	str	r3, [r7, #16]
 800544c:	e03e      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800544e:	4b23      	ldr	r3, [pc, #140]	@ (80054dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b0c      	cmp	r3, #12
 8005458:	d136      	bne.n	80054c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800545a:	4b20      	ldr	r3, [pc, #128]	@ (80054dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005464:	4b1d      	ldr	r3, [pc, #116]	@ (80054dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	091b      	lsrs	r3, r3, #4
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	3301      	adds	r3, #1
 8005470:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b03      	cmp	r3, #3
 8005476:	d10c      	bne.n	8005492 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005478:	4a1a      	ldr	r2, [pc, #104]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005480:	4a16      	ldr	r2, [pc, #88]	@ (80054dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005482:	68d2      	ldr	r2, [r2, #12]
 8005484:	0a12      	lsrs	r2, r2, #8
 8005486:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800548a:	fb02 f303 	mul.w	r3, r2, r3
 800548e:	617b      	str	r3, [r7, #20]
      break;
 8005490:	e00c      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005492:	4a13      	ldr	r2, [pc, #76]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	fbb2 f3f3 	udiv	r3, r2, r3
 800549a:	4a10      	ldr	r2, [pc, #64]	@ (80054dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800549c:	68d2      	ldr	r2, [r2, #12]
 800549e:	0a12      	lsrs	r2, r2, #8
 80054a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054a4:	fb02 f303 	mul.w	r3, r2, r3
 80054a8:	617b      	str	r3, [r7, #20]
      break;
 80054aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054ac:	4b0b      	ldr	r3, [pc, #44]	@ (80054dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	0e5b      	lsrs	r3, r3, #25
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	3301      	adds	r3, #1
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	e001      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80054cc:	693b      	ldr	r3, [r7, #16]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40021000 	.word	0x40021000
 80054e0:	00f42400 	.word	0x00f42400
 80054e4:	016e3600 	.word	0x016e3600

080054e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054ec:	4b03      	ldr	r3, [pc, #12]	@ (80054fc <HAL_RCC_GetHCLKFreq+0x14>)
 80054ee:	681b      	ldr	r3, [r3, #0]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	20000004 	.word	0x20000004

08005500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005504:	f7ff fff0 	bl	80054e8 <HAL_RCC_GetHCLKFreq>
 8005508:	4602      	mov	r2, r0
 800550a:	4b06      	ldr	r3, [pc, #24]	@ (8005524 <HAL_RCC_GetPCLK1Freq+0x24>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	0a1b      	lsrs	r3, r3, #8
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	4904      	ldr	r1, [pc, #16]	@ (8005528 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005516:	5ccb      	ldrb	r3, [r1, r3]
 8005518:	f003 031f 	and.w	r3, r3, #31
 800551c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005520:	4618      	mov	r0, r3
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40021000 	.word	0x40021000
 8005528:	08008310 	.word	0x08008310

0800552c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005530:	f7ff ffda 	bl	80054e8 <HAL_RCC_GetHCLKFreq>
 8005534:	4602      	mov	r2, r0
 8005536:	4b06      	ldr	r3, [pc, #24]	@ (8005550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	0adb      	lsrs	r3, r3, #11
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	4904      	ldr	r1, [pc, #16]	@ (8005554 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005542:	5ccb      	ldrb	r3, [r1, r3]
 8005544:	f003 031f 	and.w	r3, r3, #31
 8005548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800554c:	4618      	mov	r0, r3
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40021000 	.word	0x40021000
 8005554:	08008310 	.word	0x08008310

08005558 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800555e:	4b1e      	ldr	r3, [pc, #120]	@ (80055d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005568:	4b1b      	ldr	r3, [pc, #108]	@ (80055d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	3301      	adds	r3, #1
 8005574:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b03      	cmp	r3, #3
 800557a:	d10c      	bne.n	8005596 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800557c:	4a17      	ldr	r2, [pc, #92]	@ (80055dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	fbb2 f3f3 	udiv	r3, r2, r3
 8005584:	4a14      	ldr	r2, [pc, #80]	@ (80055d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005586:	68d2      	ldr	r2, [r2, #12]
 8005588:	0a12      	lsrs	r2, r2, #8
 800558a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800558e:	fb02 f303 	mul.w	r3, r2, r3
 8005592:	617b      	str	r3, [r7, #20]
    break;
 8005594:	e00c      	b.n	80055b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005596:	4a12      	ldr	r2, [pc, #72]	@ (80055e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	4a0e      	ldr	r2, [pc, #56]	@ (80055d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055a0:	68d2      	ldr	r2, [r2, #12]
 80055a2:	0a12      	lsrs	r2, r2, #8
 80055a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	617b      	str	r3, [r7, #20]
    break;
 80055ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055b0:	4b09      	ldr	r3, [pc, #36]	@ (80055d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	0e5b      	lsrs	r3, r3, #25
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	3301      	adds	r3, #1
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80055ca:	687b      	ldr	r3, [r7, #4]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	371c      	adds	r7, #28
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	40021000 	.word	0x40021000
 80055dc:	016e3600 	.word	0x016e3600
 80055e0:	00f42400 	.word	0x00f42400

080055e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055ec:	2300      	movs	r3, #0
 80055ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055f0:	2300      	movs	r3, #0
 80055f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8098 	beq.w	8005732 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005602:	2300      	movs	r3, #0
 8005604:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005606:	4b43      	ldr	r3, [pc, #268]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800560a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10d      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005612:	4b40      	ldr	r3, [pc, #256]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005616:	4a3f      	ldr	r2, [pc, #252]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800561c:	6593      	str	r3, [r2, #88]	@ 0x58
 800561e:	4b3d      	ldr	r3, [pc, #244]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005626:	60bb      	str	r3, [r7, #8]
 8005628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800562a:	2301      	movs	r3, #1
 800562c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800562e:	4b3a      	ldr	r3, [pc, #232]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a39      	ldr	r2, [pc, #228]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005638:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800563a:	f7fc fe8f 	bl	800235c <HAL_GetTick>
 800563e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005640:	e009      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005642:	f7fc fe8b 	bl	800235c <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d902      	bls.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	74fb      	strb	r3, [r7, #19]
        break;
 8005654:	e005      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005656:	4b30      	ldr	r3, [pc, #192]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0ef      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005662:	7cfb      	ldrb	r3, [r7, #19]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d159      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005668:	4b2a      	ldr	r3, [pc, #168]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800566e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005672:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d01e      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	429a      	cmp	r2, r3
 8005682:	d019      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005684:	4b23      	ldr	r3, [pc, #140]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800568a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800568e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005690:	4b20      	ldr	r3, [pc, #128]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005696:	4a1f      	ldr	r2, [pc, #124]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800569c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056b0:	4a18      	ldr	r2, [pc, #96]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d016      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c2:	f7fc fe4b 	bl	800235c <HAL_GetTick>
 80056c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056c8:	e00b      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ca:	f7fc fe47 	bl	800235c <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d8:	4293      	cmp	r3, r2
 80056da:	d902      	bls.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	74fb      	strb	r3, [r7, #19]
            break;
 80056e0:	e006      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0ec      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80056f0:	7cfb      	ldrb	r3, [r7, #19]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10b      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056f6:	4b07      	ldr	r3, [pc, #28]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005704:	4903      	ldr	r1, [pc, #12]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800570c:	e008      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800570e:	7cfb      	ldrb	r3, [r7, #19]
 8005710:	74bb      	strb	r3, [r7, #18]
 8005712:	e005      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005714:	40021000 	.word	0x40021000
 8005718:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571c:	7cfb      	ldrb	r3, [r7, #19]
 800571e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005720:	7c7b      	ldrb	r3, [r7, #17]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d105      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005726:	4ba7      	ldr	r3, [pc, #668]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572a:	4aa6      	ldr	r2, [pc, #664]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800572c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005730:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800573e:	4ba1      	ldr	r3, [pc, #644]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005744:	f023 0203 	bic.w	r2, r3, #3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	499d      	ldr	r1, [pc, #628]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005760:	4b98      	ldr	r3, [pc, #608]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005766:	f023 020c 	bic.w	r2, r3, #12
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	4995      	ldr	r1, [pc, #596]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005782:	4b90      	ldr	r3, [pc, #576]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005788:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	498c      	ldr	r1, [pc, #560]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0308 	and.w	r3, r3, #8
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057a4:	4b87      	ldr	r3, [pc, #540]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	4984      	ldr	r1, [pc, #528]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057c6:	4b7f      	ldr	r3, [pc, #508]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	497b      	ldr	r1, [pc, #492]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057e8:	4b76      	ldr	r3, [pc, #472]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	4973      	ldr	r1, [pc, #460]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800580a:	4b6e      	ldr	r3, [pc, #440]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005810:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	496a      	ldr	r1, [pc, #424]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800582c:	4b65      	ldr	r3, [pc, #404]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800582e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005832:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	4962      	ldr	r1, [pc, #392]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800584e:	4b5d      	ldr	r3, [pc, #372]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005854:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	4959      	ldr	r1, [pc, #356]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00a      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005870:	4b54      	ldr	r3, [pc, #336]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005872:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005876:	f023 0203 	bic.w	r2, r3, #3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587e:	4951      	ldr	r1, [pc, #324]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005892:	4b4c      	ldr	r3, [pc, #304]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005898:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a0:	4948      	ldr	r1, [pc, #288]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d015      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058b4:	4b43      	ldr	r3, [pc, #268]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c2:	4940      	ldr	r1, [pc, #256]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058d2:	d105      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058d4:	4b3b      	ldr	r3, [pc, #236]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	4a3a      	ldr	r2, [pc, #232]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d015      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058ec:	4b35      	ldr	r3, [pc, #212]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058fa:	4932      	ldr	r1, [pc, #200]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005906:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800590a:	d105      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800590c:	4b2d      	ldr	r3, [pc, #180]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4a2c      	ldr	r2, [pc, #176]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005916:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d015      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005924:	4b27      	ldr	r3, [pc, #156]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800592a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005932:	4924      	ldr	r1, [pc, #144]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005942:	d105      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005944:	4b1f      	ldr	r3, [pc, #124]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	4a1e      	ldr	r2, [pc, #120]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800594a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800594e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d015      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800595c:	4b19      	ldr	r3, [pc, #100]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005962:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800596a:	4916      	ldr	r1, [pc, #88]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005976:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800597a:	d105      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800597c:	4b11      	ldr	r3, [pc, #68]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	4a10      	ldr	r2, [pc, #64]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005986:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d019      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005994:	4b0b      	ldr	r3, [pc, #44]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800599a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	4908      	ldr	r1, [pc, #32]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059b2:	d109      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059b4:	4b03      	ldr	r3, [pc, #12]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	4a02      	ldr	r2, [pc, #8]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059be:	60d3      	str	r3, [r2, #12]
 80059c0:	e002      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80059c2:	bf00      	nop
 80059c4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d015      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059d4:	4b29      	ldr	r3, [pc, #164]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e2:	4926      	ldr	r1, [pc, #152]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059f2:	d105      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059f4:	4b21      	ldr	r3, [pc, #132]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4a20      	ldr	r2, [pc, #128]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059fe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d015      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a12:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a1a:	4918      	ldr	r1, [pc, #96]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a2a:	d105      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a2c:	4b13      	ldr	r3, [pc, #76]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	4a12      	ldr	r2, [pc, #72]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a36:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d015      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a44:	4b0d      	ldr	r3, [pc, #52]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a52:	490a      	ldr	r1, [pc, #40]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a62:	d105      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a64:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	4a04      	ldr	r2, [pc, #16]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a6e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005a70:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	40021000 	.word	0x40021000

08005a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e049      	b.n	8005b26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7fc fa92 	bl	8001fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4619      	mov	r1, r3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	f000 ff68 	bl	8006994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d001      	beq.n	8005b48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e04c      	b.n	8005be2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a26      	ldr	r2, [pc, #152]	@ (8005bf0 <HAL_TIM_Base_Start+0xc0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d022      	beq.n	8005ba0 <HAL_TIM_Base_Start+0x70>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b62:	d01d      	beq.n	8005ba0 <HAL_TIM_Base_Start+0x70>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a22      	ldr	r2, [pc, #136]	@ (8005bf4 <HAL_TIM_Base_Start+0xc4>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d018      	beq.n	8005ba0 <HAL_TIM_Base_Start+0x70>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a21      	ldr	r2, [pc, #132]	@ (8005bf8 <HAL_TIM_Base_Start+0xc8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d013      	beq.n	8005ba0 <HAL_TIM_Base_Start+0x70>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a1f      	ldr	r2, [pc, #124]	@ (8005bfc <HAL_TIM_Base_Start+0xcc>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00e      	beq.n	8005ba0 <HAL_TIM_Base_Start+0x70>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a1e      	ldr	r2, [pc, #120]	@ (8005c00 <HAL_TIM_Base_Start+0xd0>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d009      	beq.n	8005ba0 <HAL_TIM_Base_Start+0x70>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a1c      	ldr	r2, [pc, #112]	@ (8005c04 <HAL_TIM_Base_Start+0xd4>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d004      	beq.n	8005ba0 <HAL_TIM_Base_Start+0x70>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005c08 <HAL_TIM_Base_Start+0xd8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d115      	bne.n	8005bcc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	4b19      	ldr	r3, [pc, #100]	@ (8005c0c <HAL_TIM_Base_Start+0xdc>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b06      	cmp	r3, #6
 8005bb0:	d015      	beq.n	8005bde <HAL_TIM_Base_Start+0xae>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bb8:	d011      	beq.n	8005bde <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0201 	orr.w	r2, r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bca:	e008      	b.n	8005bde <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	e000      	b.n	8005be0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800
 8005bfc:	40000c00 	.word	0x40000c00
 8005c00:	40013400 	.word	0x40013400
 8005c04:	40014000 	.word	0x40014000
 8005c08:	40015000 	.word	0x40015000
 8005c0c:	00010007 	.word	0x00010007

08005c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d001      	beq.n	8005c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e054      	b.n	8005cd2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0201 	orr.w	r2, r2, #1
 8005c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a26      	ldr	r2, [pc, #152]	@ (8005ce0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d022      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x80>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c52:	d01d      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x80>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a22      	ldr	r2, [pc, #136]	@ (8005ce4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d018      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x80>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a21      	ldr	r2, [pc, #132]	@ (8005ce8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d013      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x80>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005cec <HAL_TIM_Base_Start_IT+0xdc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00e      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x80>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d009      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x80>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d004      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x80>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf8 <HAL_TIM_Base_Start_IT+0xe8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d115      	bne.n	8005cbc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	4b19      	ldr	r3, [pc, #100]	@ (8005cfc <HAL_TIM_Base_Start_IT+0xec>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b06      	cmp	r3, #6
 8005ca0:	d015      	beq.n	8005cce <HAL_TIM_Base_Start_IT+0xbe>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ca8:	d011      	beq.n	8005cce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0201 	orr.w	r2, r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cba:	e008      	b.n	8005cce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	e000      	b.n	8005cd0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40012c00 	.word	0x40012c00
 8005ce4:	40000400 	.word	0x40000400
 8005ce8:	40000800 	.word	0x40000800
 8005cec:	40000c00 	.word	0x40000c00
 8005cf0:	40013400 	.word	0x40013400
 8005cf4:	40014000 	.word	0x40014000
 8005cf8:	40015000 	.word	0x40015000
 8005cfc:	00010007 	.word	0x00010007

08005d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e049      	b.n	8005da6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f841 	bl	8005dae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	f000 fe28 	bl	8006994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d109      	bne.n	8005de8 <HAL_TIM_PWM_Start+0x24>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	bf14      	ite	ne
 8005de0:	2301      	movne	r3, #1
 8005de2:	2300      	moveq	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	e03c      	b.n	8005e62 <HAL_TIM_PWM_Start+0x9e>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d109      	bne.n	8005e02 <HAL_TIM_PWM_Start+0x3e>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	bf14      	ite	ne
 8005dfa:	2301      	movne	r3, #1
 8005dfc:	2300      	moveq	r3, #0
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	e02f      	b.n	8005e62 <HAL_TIM_PWM_Start+0x9e>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d109      	bne.n	8005e1c <HAL_TIM_PWM_Start+0x58>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	bf14      	ite	ne
 8005e14:	2301      	movne	r3, #1
 8005e16:	2300      	moveq	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	e022      	b.n	8005e62 <HAL_TIM_PWM_Start+0x9e>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2b0c      	cmp	r3, #12
 8005e20:	d109      	bne.n	8005e36 <HAL_TIM_PWM_Start+0x72>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	bf14      	ite	ne
 8005e2e:	2301      	movne	r3, #1
 8005e30:	2300      	moveq	r3, #0
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	e015      	b.n	8005e62 <HAL_TIM_PWM_Start+0x9e>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b10      	cmp	r3, #16
 8005e3a:	d109      	bne.n	8005e50 <HAL_TIM_PWM_Start+0x8c>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	bf14      	ite	ne
 8005e48:	2301      	movne	r3, #1
 8005e4a:	2300      	moveq	r3, #0
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	e008      	b.n	8005e62 <HAL_TIM_PWM_Start+0x9e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	bf14      	ite	ne
 8005e5c:	2301      	movne	r3, #1
 8005e5e:	2300      	moveq	r3, #0
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e0a6      	b.n	8005fb8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d104      	bne.n	8005e7a <HAL_TIM_PWM_Start+0xb6>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e78:	e023      	b.n	8005ec2 <HAL_TIM_PWM_Start+0xfe>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d104      	bne.n	8005e8a <HAL_TIM_PWM_Start+0xc6>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e88:	e01b      	b.n	8005ec2 <HAL_TIM_PWM_Start+0xfe>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d104      	bne.n	8005e9a <HAL_TIM_PWM_Start+0xd6>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e98:	e013      	b.n	8005ec2 <HAL_TIM_PWM_Start+0xfe>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b0c      	cmp	r3, #12
 8005e9e:	d104      	bne.n	8005eaa <HAL_TIM_PWM_Start+0xe6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ea8:	e00b      	b.n	8005ec2 <HAL_TIM_PWM_Start+0xfe>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b10      	cmp	r3, #16
 8005eae:	d104      	bne.n	8005eba <HAL_TIM_PWM_Start+0xf6>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eb8:	e003      	b.n	8005ec2 <HAL_TIM_PWM_Start+0xfe>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 f9dc 	bl	8007288 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a3a      	ldr	r2, [pc, #232]	@ (8005fc0 <HAL_TIM_PWM_Start+0x1fc>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d018      	beq.n	8005f0c <HAL_TIM_PWM_Start+0x148>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a39      	ldr	r2, [pc, #228]	@ (8005fc4 <HAL_TIM_PWM_Start+0x200>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d013      	beq.n	8005f0c <HAL_TIM_PWM_Start+0x148>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a37      	ldr	r2, [pc, #220]	@ (8005fc8 <HAL_TIM_PWM_Start+0x204>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d00e      	beq.n	8005f0c <HAL_TIM_PWM_Start+0x148>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a36      	ldr	r2, [pc, #216]	@ (8005fcc <HAL_TIM_PWM_Start+0x208>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d009      	beq.n	8005f0c <HAL_TIM_PWM_Start+0x148>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a34      	ldr	r2, [pc, #208]	@ (8005fd0 <HAL_TIM_PWM_Start+0x20c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d004      	beq.n	8005f0c <HAL_TIM_PWM_Start+0x148>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a33      	ldr	r2, [pc, #204]	@ (8005fd4 <HAL_TIM_PWM_Start+0x210>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIM_PWM_Start+0x14c>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <HAL_TIM_PWM_Start+0x14e>
 8005f10:	2300      	movs	r3, #0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a25      	ldr	r2, [pc, #148]	@ (8005fc0 <HAL_TIM_PWM_Start+0x1fc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d022      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x1b2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f38:	d01d      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x1b2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a26      	ldr	r2, [pc, #152]	@ (8005fd8 <HAL_TIM_PWM_Start+0x214>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d018      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x1b2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a24      	ldr	r2, [pc, #144]	@ (8005fdc <HAL_TIM_PWM_Start+0x218>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x1b2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a23      	ldr	r2, [pc, #140]	@ (8005fe0 <HAL_TIM_PWM_Start+0x21c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00e      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x1b2>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a19      	ldr	r2, [pc, #100]	@ (8005fc4 <HAL_TIM_PWM_Start+0x200>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d009      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x1b2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a18      	ldr	r2, [pc, #96]	@ (8005fc8 <HAL_TIM_PWM_Start+0x204>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d004      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x1b2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a18      	ldr	r2, [pc, #96]	@ (8005fd4 <HAL_TIM_PWM_Start+0x210>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d115      	bne.n	8005fa2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	4b19      	ldr	r3, [pc, #100]	@ (8005fe4 <HAL_TIM_PWM_Start+0x220>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b06      	cmp	r3, #6
 8005f86:	d015      	beq.n	8005fb4 <HAL_TIM_PWM_Start+0x1f0>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f8e:	d011      	beq.n	8005fb4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0201 	orr.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa0:	e008      	b.n	8005fb4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f042 0201 	orr.w	r2, r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	e000      	b.n	8005fb6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40012c00 	.word	0x40012c00
 8005fc4:	40013400 	.word	0x40013400
 8005fc8:	40014000 	.word	0x40014000
 8005fcc:	40014400 	.word	0x40014400
 8005fd0:	40014800 	.word	0x40014800
 8005fd4:	40015000 	.word	0x40015000
 8005fd8:	40000400 	.word	0x40000400
 8005fdc:	40000800 	.word	0x40000800
 8005fe0:	40000c00 	.word	0x40000c00
 8005fe4:	00010007 	.word	0x00010007

08005fe8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e097      	b.n	800612c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d106      	bne.n	8006016 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7fc f817 	bl	8002044 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6812      	ldr	r2, [r2, #0]
 8006028:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800602c:	f023 0307 	bic.w	r3, r3, #7
 8006030:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3304      	adds	r3, #4
 800603a:	4619      	mov	r1, r3
 800603c:	4610      	mov	r0, r2
 800603e:	f000 fca9 	bl	8006994 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	4313      	orrs	r3, r2
 8006062:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800606a:	f023 0303 	bic.w	r3, r3, #3
 800606e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	021b      	lsls	r3, r3, #8
 800607a:	4313      	orrs	r3, r2
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006088:	f023 030c 	bic.w	r3, r3, #12
 800608c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006094:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006098:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	021b      	lsls	r3, r3, #8
 80060a4:	4313      	orrs	r3, r2
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	011a      	lsls	r2, r3, #4
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	031b      	lsls	r3, r3, #12
 80060b8:	4313      	orrs	r3, r2
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80060c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80060ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	4313      	orrs	r3, r2
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006144:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800614c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006154:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800615c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d110      	bne.n	8006186 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d102      	bne.n	8006170 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800616a:	7b7b      	ldrb	r3, [r7, #13]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d001      	beq.n	8006174 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e069      	b.n	8006248 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006184:	e031      	b.n	80061ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b04      	cmp	r3, #4
 800618a:	d110      	bne.n	80061ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800618c:	7bbb      	ldrb	r3, [r7, #14]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d102      	bne.n	8006198 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006192:	7b3b      	ldrb	r3, [r7, #12]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d001      	beq.n	800619c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e055      	b.n	8006248 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061ac:	e01d      	b.n	80061ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d108      	bne.n	80061c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061b4:	7bbb      	ldrb	r3, [r7, #14]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d105      	bne.n	80061c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061ba:	7b7b      	ldrb	r3, [r7, #13]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d102      	bne.n	80061c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061c0:	7b3b      	ldrb	r3, [r7, #12]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d001      	beq.n	80061ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e03e      	b.n	8006248 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2202      	movs	r2, #2
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2202      	movs	r2, #2
 80061d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2202      	movs	r2, #2
 80061de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2202      	movs	r2, #2
 80061e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <HAL_TIM_Encoder_Start+0xc4>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d008      	beq.n	8006208 <HAL_TIM_Encoder_Start+0xd4>
 80061f6:	e00f      	b.n	8006218 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2201      	movs	r2, #1
 80061fe:	2100      	movs	r1, #0
 8006200:	4618      	mov	r0, r3
 8006202:	f001 f841 	bl	8007288 <TIM_CCxChannelCmd>
      break;
 8006206:	e016      	b.n	8006236 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2201      	movs	r2, #1
 800620e:	2104      	movs	r1, #4
 8006210:	4618      	mov	r0, r3
 8006212:	f001 f839 	bl	8007288 <TIM_CCxChannelCmd>
      break;
 8006216:	e00e      	b.n	8006236 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2201      	movs	r2, #1
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f001 f831 	bl	8007288 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2201      	movs	r2, #1
 800622c:	2104      	movs	r1, #4
 800622e:	4618      	mov	r0, r3
 8006230:	f001 f82a 	bl	8007288 <TIM_CCxChannelCmd>
      break;
 8006234:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0201 	orr.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d020      	beq.n	80062b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01b      	beq.n	80062b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0202 	mvn.w	r2, #2
 8006284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fb5c 	bl	8006958 <HAL_TIM_IC_CaptureCallback>
 80062a0:	e005      	b.n	80062ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fb4e 	bl	8006944 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fb5f 	bl	800696c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d020      	beq.n	8006300 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01b      	beq.n	8006300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0204 	mvn.w	r2, #4
 80062d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2202      	movs	r2, #2
 80062d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fb36 	bl	8006958 <HAL_TIM_IC_CaptureCallback>
 80062ec:	e005      	b.n	80062fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fb28 	bl	8006944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fb39 	bl	800696c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d020      	beq.n	800634c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01b      	beq.n	800634c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0208 	mvn.w	r2, #8
 800631c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2204      	movs	r2, #4
 8006322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f003 0303 	and.w	r3, r3, #3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fb10 	bl	8006958 <HAL_TIM_IC_CaptureCallback>
 8006338:	e005      	b.n	8006346 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fb02 	bl	8006944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fb13 	bl	800696c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	2b00      	cmp	r3, #0
 8006354:	d020      	beq.n	8006398 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01b      	beq.n	8006398 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0210 	mvn.w	r2, #16
 8006368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2208      	movs	r2, #8
 800636e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 faea 	bl	8006958 <HAL_TIM_IC_CaptureCallback>
 8006384:	e005      	b.n	8006392 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fadc 	bl	8006944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 faed 	bl	800696c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00c      	beq.n	80063bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d007      	beq.n	80063bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0201 	mvn.w	r2, #1
 80063b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fb f8e0 	bl	800157c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d104      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00c      	beq.n	80063ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d007      	beq.n	80063ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80063e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f001 f8a9 	bl	800753c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00c      	beq.n	800640e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f001 f8a1 	bl	8007550 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00c      	beq.n	8006432 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800642a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 faa7 	bl	8006980 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f003 0320 	and.w	r3, r3, #32
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00c      	beq.n	8006456 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b00      	cmp	r3, #0
 8006444:	d007      	beq.n	8006456 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f06f 0220 	mvn.w	r2, #32
 800644e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 f869 	bl	8007528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00c      	beq.n	800647a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d007      	beq.n	800647a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f001 f875 	bl	8007564 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00c      	beq.n	800649e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 f86d 	bl	8007578 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00c      	beq.n	80064c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d007      	beq.n	80064c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80064ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 f865 	bl	800758c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00c      	beq.n	80064e6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80064de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 f85d 	bl	80075a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064e6:	bf00      	nop
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006506:	2b01      	cmp	r3, #1
 8006508:	d101      	bne.n	800650e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800650a:	2302      	movs	r3, #2
 800650c:	e0ff      	b.n	800670e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b14      	cmp	r3, #20
 800651a:	f200 80f0 	bhi.w	80066fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800651e:	a201      	add	r2, pc, #4	@ (adr r2, 8006524 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	08006579 	.word	0x08006579
 8006528:	080066ff 	.word	0x080066ff
 800652c:	080066ff 	.word	0x080066ff
 8006530:	080066ff 	.word	0x080066ff
 8006534:	080065b9 	.word	0x080065b9
 8006538:	080066ff 	.word	0x080066ff
 800653c:	080066ff 	.word	0x080066ff
 8006540:	080066ff 	.word	0x080066ff
 8006544:	080065fb 	.word	0x080065fb
 8006548:	080066ff 	.word	0x080066ff
 800654c:	080066ff 	.word	0x080066ff
 8006550:	080066ff 	.word	0x080066ff
 8006554:	0800663b 	.word	0x0800663b
 8006558:	080066ff 	.word	0x080066ff
 800655c:	080066ff 	.word	0x080066ff
 8006560:	080066ff 	.word	0x080066ff
 8006564:	0800667d 	.word	0x0800667d
 8006568:	080066ff 	.word	0x080066ff
 800656c:	080066ff 	.word	0x080066ff
 8006570:	080066ff 	.word	0x080066ff
 8006574:	080066bd 	.word	0x080066bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fabc 	bl	8006afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0208 	orr.w	r2, r2, #8
 8006592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699a      	ldr	r2, [r3, #24]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0204 	bic.w	r2, r2, #4
 80065a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6999      	ldr	r1, [r3, #24]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	619a      	str	r2, [r3, #24]
      break;
 80065b6:	e0a5      	b.n	8006704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fb36 	bl	8006c30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699a      	ldr	r2, [r3, #24]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699a      	ldr	r2, [r3, #24]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6999      	ldr	r1, [r3, #24]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	021a      	lsls	r2, r3, #8
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	619a      	str	r2, [r3, #24]
      break;
 80065f8:	e084      	b.n	8006704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68b9      	ldr	r1, [r7, #8]
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fba9 	bl	8006d58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 0208 	orr.w	r2, r2, #8
 8006614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69da      	ldr	r2, [r3, #28]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0204 	bic.w	r2, r2, #4
 8006624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69d9      	ldr	r1, [r3, #28]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	61da      	str	r2, [r3, #28]
      break;
 8006638:	e064      	b.n	8006704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68b9      	ldr	r1, [r7, #8]
 8006640:	4618      	mov	r0, r3
 8006642:	f000 fc1b 	bl	8006e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69da      	ldr	r2, [r3, #28]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69d9      	ldr	r1, [r3, #28]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	021a      	lsls	r2, r3, #8
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	61da      	str	r2, [r3, #28]
      break;
 800667a:	e043      	b.n	8006704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fc8e 	bl	8006fa4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0208 	orr.w	r2, r2, #8
 8006696:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0204 	bic.w	r2, r2, #4
 80066a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80066ba:	e023      	b.n	8006704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68b9      	ldr	r1, [r7, #8]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fcd8 	bl	8007078 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	021a      	lsls	r2, r3, #8
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80066fc:	e002      	b.n	8006704 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	75fb      	strb	r3, [r7, #23]
      break;
 8006702:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800670c:	7dfb      	ldrb	r3, [r7, #23]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop

08006718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_TIM_ConfigClockSource+0x1c>
 8006730:	2302      	movs	r3, #2
 8006732:	e0f6      	b.n	8006922 <HAL_TIM_ConfigClockSource+0x20a>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006752:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800675e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a6f      	ldr	r2, [pc, #444]	@ (800692c <HAL_TIM_ConfigClockSource+0x214>)
 800676e:	4293      	cmp	r3, r2
 8006770:	f000 80c1 	beq.w	80068f6 <HAL_TIM_ConfigClockSource+0x1de>
 8006774:	4a6d      	ldr	r2, [pc, #436]	@ (800692c <HAL_TIM_ConfigClockSource+0x214>)
 8006776:	4293      	cmp	r3, r2
 8006778:	f200 80c6 	bhi.w	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 800677c:	4a6c      	ldr	r2, [pc, #432]	@ (8006930 <HAL_TIM_ConfigClockSource+0x218>)
 800677e:	4293      	cmp	r3, r2
 8006780:	f000 80b9 	beq.w	80068f6 <HAL_TIM_ConfigClockSource+0x1de>
 8006784:	4a6a      	ldr	r2, [pc, #424]	@ (8006930 <HAL_TIM_ConfigClockSource+0x218>)
 8006786:	4293      	cmp	r3, r2
 8006788:	f200 80be 	bhi.w	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 800678c:	4a69      	ldr	r2, [pc, #420]	@ (8006934 <HAL_TIM_ConfigClockSource+0x21c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	f000 80b1 	beq.w	80068f6 <HAL_TIM_ConfigClockSource+0x1de>
 8006794:	4a67      	ldr	r2, [pc, #412]	@ (8006934 <HAL_TIM_ConfigClockSource+0x21c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	f200 80b6 	bhi.w	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 800679c:	4a66      	ldr	r2, [pc, #408]	@ (8006938 <HAL_TIM_ConfigClockSource+0x220>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	f000 80a9 	beq.w	80068f6 <HAL_TIM_ConfigClockSource+0x1de>
 80067a4:	4a64      	ldr	r2, [pc, #400]	@ (8006938 <HAL_TIM_ConfigClockSource+0x220>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	f200 80ae 	bhi.w	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 80067ac:	4a63      	ldr	r2, [pc, #396]	@ (800693c <HAL_TIM_ConfigClockSource+0x224>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	f000 80a1 	beq.w	80068f6 <HAL_TIM_ConfigClockSource+0x1de>
 80067b4:	4a61      	ldr	r2, [pc, #388]	@ (800693c <HAL_TIM_ConfigClockSource+0x224>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	f200 80a6 	bhi.w	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 80067bc:	4a60      	ldr	r2, [pc, #384]	@ (8006940 <HAL_TIM_ConfigClockSource+0x228>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	f000 8099 	beq.w	80068f6 <HAL_TIM_ConfigClockSource+0x1de>
 80067c4:	4a5e      	ldr	r2, [pc, #376]	@ (8006940 <HAL_TIM_ConfigClockSource+0x228>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	f200 809e 	bhi.w	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 80067cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80067d0:	f000 8091 	beq.w	80068f6 <HAL_TIM_ConfigClockSource+0x1de>
 80067d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80067d8:	f200 8096 	bhi.w	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 80067dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067e0:	f000 8089 	beq.w	80068f6 <HAL_TIM_ConfigClockSource+0x1de>
 80067e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067e8:	f200 808e 	bhi.w	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 80067ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067f0:	d03e      	beq.n	8006870 <HAL_TIM_ConfigClockSource+0x158>
 80067f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067f6:	f200 8087 	bhi.w	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 80067fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067fe:	f000 8086 	beq.w	800690e <HAL_TIM_ConfigClockSource+0x1f6>
 8006802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006806:	d87f      	bhi.n	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 8006808:	2b70      	cmp	r3, #112	@ 0x70
 800680a:	d01a      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x12a>
 800680c:	2b70      	cmp	r3, #112	@ 0x70
 800680e:	d87b      	bhi.n	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 8006810:	2b60      	cmp	r3, #96	@ 0x60
 8006812:	d050      	beq.n	80068b6 <HAL_TIM_ConfigClockSource+0x19e>
 8006814:	2b60      	cmp	r3, #96	@ 0x60
 8006816:	d877      	bhi.n	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 8006818:	2b50      	cmp	r3, #80	@ 0x50
 800681a:	d03c      	beq.n	8006896 <HAL_TIM_ConfigClockSource+0x17e>
 800681c:	2b50      	cmp	r3, #80	@ 0x50
 800681e:	d873      	bhi.n	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 8006820:	2b40      	cmp	r3, #64	@ 0x40
 8006822:	d058      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0x1be>
 8006824:	2b40      	cmp	r3, #64	@ 0x40
 8006826:	d86f      	bhi.n	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 8006828:	2b30      	cmp	r3, #48	@ 0x30
 800682a:	d064      	beq.n	80068f6 <HAL_TIM_ConfigClockSource+0x1de>
 800682c:	2b30      	cmp	r3, #48	@ 0x30
 800682e:	d86b      	bhi.n	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 8006830:	2b20      	cmp	r3, #32
 8006832:	d060      	beq.n	80068f6 <HAL_TIM_ConfigClockSource+0x1de>
 8006834:	2b20      	cmp	r3, #32
 8006836:	d867      	bhi.n	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
 8006838:	2b00      	cmp	r3, #0
 800683a:	d05c      	beq.n	80068f6 <HAL_TIM_ConfigClockSource+0x1de>
 800683c:	2b10      	cmp	r3, #16
 800683e:	d05a      	beq.n	80068f6 <HAL_TIM_ConfigClockSource+0x1de>
 8006840:	e062      	b.n	8006908 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006852:	f000 fcf9 	bl	8007248 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006864:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	609a      	str	r2, [r3, #8]
      break;
 800686e:	e04f      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006880:	f000 fce2 	bl	8007248 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006892:	609a      	str	r2, [r3, #8]
      break;
 8006894:	e03c      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a2:	461a      	mov	r2, r3
 80068a4:	f000 fc54 	bl	8007150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2150      	movs	r1, #80	@ 0x50
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fcad 	bl	800720e <TIM_ITRx_SetConfig>
      break;
 80068b4:	e02c      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068c2:	461a      	mov	r2, r3
 80068c4:	f000 fc73 	bl	80071ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2160      	movs	r1, #96	@ 0x60
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fc9d 	bl	800720e <TIM_ITRx_SetConfig>
      break;
 80068d4:	e01c      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e2:	461a      	mov	r2, r3
 80068e4:	f000 fc34 	bl	8007150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2140      	movs	r1, #64	@ 0x40
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fc8d 	bl	800720e <TIM_ITRx_SetConfig>
      break;
 80068f4:	e00c      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4619      	mov	r1, r3
 8006900:	4610      	mov	r0, r2
 8006902:	f000 fc84 	bl	800720e <TIM_ITRx_SetConfig>
      break;
 8006906:	e003      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	73fb      	strb	r3, [r7, #15]
      break;
 800690c:	e000      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800690e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006920:	7bfb      	ldrb	r3, [r7, #15]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	00100070 	.word	0x00100070
 8006930:	00100060 	.word	0x00100060
 8006934:	00100050 	.word	0x00100050
 8006938:	00100040 	.word	0x00100040
 800693c:	00100030 	.word	0x00100030
 8006940:	00100020 	.word	0x00100020

08006944 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a4c      	ldr	r2, [pc, #304]	@ (8006ad8 <TIM_Base_SetConfig+0x144>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d017      	beq.n	80069dc <TIM_Base_SetConfig+0x48>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069b2:	d013      	beq.n	80069dc <TIM_Base_SetConfig+0x48>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a49      	ldr	r2, [pc, #292]	@ (8006adc <TIM_Base_SetConfig+0x148>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00f      	beq.n	80069dc <TIM_Base_SetConfig+0x48>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a48      	ldr	r2, [pc, #288]	@ (8006ae0 <TIM_Base_SetConfig+0x14c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00b      	beq.n	80069dc <TIM_Base_SetConfig+0x48>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a47      	ldr	r2, [pc, #284]	@ (8006ae4 <TIM_Base_SetConfig+0x150>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d007      	beq.n	80069dc <TIM_Base_SetConfig+0x48>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a46      	ldr	r2, [pc, #280]	@ (8006ae8 <TIM_Base_SetConfig+0x154>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d003      	beq.n	80069dc <TIM_Base_SetConfig+0x48>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a45      	ldr	r2, [pc, #276]	@ (8006aec <TIM_Base_SetConfig+0x158>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d108      	bne.n	80069ee <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a39      	ldr	r2, [pc, #228]	@ (8006ad8 <TIM_Base_SetConfig+0x144>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d023      	beq.n	8006a3e <TIM_Base_SetConfig+0xaa>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069fc:	d01f      	beq.n	8006a3e <TIM_Base_SetConfig+0xaa>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a36      	ldr	r2, [pc, #216]	@ (8006adc <TIM_Base_SetConfig+0x148>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d01b      	beq.n	8006a3e <TIM_Base_SetConfig+0xaa>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a35      	ldr	r2, [pc, #212]	@ (8006ae0 <TIM_Base_SetConfig+0x14c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d017      	beq.n	8006a3e <TIM_Base_SetConfig+0xaa>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a34      	ldr	r2, [pc, #208]	@ (8006ae4 <TIM_Base_SetConfig+0x150>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d013      	beq.n	8006a3e <TIM_Base_SetConfig+0xaa>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a33      	ldr	r2, [pc, #204]	@ (8006ae8 <TIM_Base_SetConfig+0x154>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00f      	beq.n	8006a3e <TIM_Base_SetConfig+0xaa>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a33      	ldr	r2, [pc, #204]	@ (8006af0 <TIM_Base_SetConfig+0x15c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00b      	beq.n	8006a3e <TIM_Base_SetConfig+0xaa>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a32      	ldr	r2, [pc, #200]	@ (8006af4 <TIM_Base_SetConfig+0x160>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d007      	beq.n	8006a3e <TIM_Base_SetConfig+0xaa>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a31      	ldr	r2, [pc, #196]	@ (8006af8 <TIM_Base_SetConfig+0x164>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d003      	beq.n	8006a3e <TIM_Base_SetConfig+0xaa>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2c      	ldr	r2, [pc, #176]	@ (8006aec <TIM_Base_SetConfig+0x158>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d108      	bne.n	8006a50 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a18      	ldr	r2, [pc, #96]	@ (8006ad8 <TIM_Base_SetConfig+0x144>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d013      	beq.n	8006aa4 <TIM_Base_SetConfig+0x110>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ae8 <TIM_Base_SetConfig+0x154>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00f      	beq.n	8006aa4 <TIM_Base_SetConfig+0x110>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a1a      	ldr	r2, [pc, #104]	@ (8006af0 <TIM_Base_SetConfig+0x15c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00b      	beq.n	8006aa4 <TIM_Base_SetConfig+0x110>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a19      	ldr	r2, [pc, #100]	@ (8006af4 <TIM_Base_SetConfig+0x160>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d007      	beq.n	8006aa4 <TIM_Base_SetConfig+0x110>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a18      	ldr	r2, [pc, #96]	@ (8006af8 <TIM_Base_SetConfig+0x164>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d003      	beq.n	8006aa4 <TIM_Base_SetConfig+0x110>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a13      	ldr	r2, [pc, #76]	@ (8006aec <TIM_Base_SetConfig+0x158>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d103      	bne.n	8006aac <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	691a      	ldr	r2, [r3, #16]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d105      	bne.n	8006aca <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	f023 0201 	bic.w	r2, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	611a      	str	r2, [r3, #16]
  }
}
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40012c00 	.word	0x40012c00
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	40000800 	.word	0x40000800
 8006ae4:	40000c00 	.word	0x40000c00
 8006ae8:	40013400 	.word	0x40013400
 8006aec:	40015000 	.word	0x40015000
 8006af0:	40014000 	.word	0x40014000
 8006af4:	40014400 	.word	0x40014400
 8006af8:	40014800 	.word	0x40014800

08006afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	f023 0201 	bic.w	r2, r3, #1
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0303 	bic.w	r3, r3, #3
 8006b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f023 0302 	bic.w	r3, r3, #2
 8006b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a30      	ldr	r2, [pc, #192]	@ (8006c18 <TIM_OC1_SetConfig+0x11c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d013      	beq.n	8006b84 <TIM_OC1_SetConfig+0x88>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a2f      	ldr	r2, [pc, #188]	@ (8006c1c <TIM_OC1_SetConfig+0x120>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00f      	beq.n	8006b84 <TIM_OC1_SetConfig+0x88>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a2e      	ldr	r2, [pc, #184]	@ (8006c20 <TIM_OC1_SetConfig+0x124>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d00b      	beq.n	8006b84 <TIM_OC1_SetConfig+0x88>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8006c24 <TIM_OC1_SetConfig+0x128>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d007      	beq.n	8006b84 <TIM_OC1_SetConfig+0x88>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a2c      	ldr	r2, [pc, #176]	@ (8006c28 <TIM_OC1_SetConfig+0x12c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d003      	beq.n	8006b84 <TIM_OC1_SetConfig+0x88>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8006c2c <TIM_OC1_SetConfig+0x130>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d10c      	bne.n	8006b9e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f023 0308 	bic.w	r3, r3, #8
 8006b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f023 0304 	bic.w	r3, r3, #4
 8006b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8006c18 <TIM_OC1_SetConfig+0x11c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d013      	beq.n	8006bce <TIM_OC1_SetConfig+0xd2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8006c1c <TIM_OC1_SetConfig+0x120>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00f      	beq.n	8006bce <TIM_OC1_SetConfig+0xd2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8006c20 <TIM_OC1_SetConfig+0x124>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00b      	beq.n	8006bce <TIM_OC1_SetConfig+0xd2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8006c24 <TIM_OC1_SetConfig+0x128>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d007      	beq.n	8006bce <TIM_OC1_SetConfig+0xd2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a19      	ldr	r2, [pc, #100]	@ (8006c28 <TIM_OC1_SetConfig+0x12c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d003      	beq.n	8006bce <TIM_OC1_SetConfig+0xd2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a18      	ldr	r2, [pc, #96]	@ (8006c2c <TIM_OC1_SetConfig+0x130>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d111      	bne.n	8006bf2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	621a      	str	r2, [r3, #32]
}
 8006c0c:	bf00      	nop
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	40012c00 	.word	0x40012c00
 8006c1c:	40013400 	.word	0x40013400
 8006c20:	40014000 	.word	0x40014000
 8006c24:	40014400 	.word	0x40014400
 8006c28:	40014800 	.word	0x40014800
 8006c2c:	40015000 	.word	0x40015000

08006c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	f023 0210 	bic.w	r2, r3, #16
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f023 0320 	bic.w	r3, r3, #32
 8006c7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8006d40 <TIM_OC2_SetConfig+0x110>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d007      	beq.n	8006ca4 <TIM_OC2_SetConfig+0x74>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a2b      	ldr	r2, [pc, #172]	@ (8006d44 <TIM_OC2_SetConfig+0x114>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_OC2_SetConfig+0x74>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8006d48 <TIM_OC2_SetConfig+0x118>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d10d      	bne.n	8006cc0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8006d40 <TIM_OC2_SetConfig+0x110>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d013      	beq.n	8006cf0 <TIM_OC2_SetConfig+0xc0>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a1e      	ldr	r2, [pc, #120]	@ (8006d44 <TIM_OC2_SetConfig+0x114>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00f      	beq.n	8006cf0 <TIM_OC2_SetConfig+0xc0>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d4c <TIM_OC2_SetConfig+0x11c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00b      	beq.n	8006cf0 <TIM_OC2_SetConfig+0xc0>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a1d      	ldr	r2, [pc, #116]	@ (8006d50 <TIM_OC2_SetConfig+0x120>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d007      	beq.n	8006cf0 <TIM_OC2_SetConfig+0xc0>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d54 <TIM_OC2_SetConfig+0x124>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d003      	beq.n	8006cf0 <TIM_OC2_SetConfig+0xc0>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a17      	ldr	r2, [pc, #92]	@ (8006d48 <TIM_OC2_SetConfig+0x118>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d113      	bne.n	8006d18 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	621a      	str	r2, [r3, #32]
}
 8006d32:	bf00      	nop
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	40012c00 	.word	0x40012c00
 8006d44:	40013400 	.word	0x40013400
 8006d48:	40015000 	.word	0x40015000
 8006d4c:	40014000 	.word	0x40014000
 8006d50:	40014400 	.word	0x40014400
 8006d54:	40014800 	.word	0x40014800

08006d58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 0303 	bic.w	r3, r3, #3
 8006d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	021b      	lsls	r3, r3, #8
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a2b      	ldr	r2, [pc, #172]	@ (8006e64 <TIM_OC3_SetConfig+0x10c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d007      	beq.n	8006dca <TIM_OC3_SetConfig+0x72>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8006e68 <TIM_OC3_SetConfig+0x110>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d003      	beq.n	8006dca <TIM_OC3_SetConfig+0x72>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a29      	ldr	r2, [pc, #164]	@ (8006e6c <TIM_OC3_SetConfig+0x114>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d10d      	bne.n	8006de6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	021b      	lsls	r3, r3, #8
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a1e      	ldr	r2, [pc, #120]	@ (8006e64 <TIM_OC3_SetConfig+0x10c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d013      	beq.n	8006e16 <TIM_OC3_SetConfig+0xbe>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a1d      	ldr	r2, [pc, #116]	@ (8006e68 <TIM_OC3_SetConfig+0x110>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00f      	beq.n	8006e16 <TIM_OC3_SetConfig+0xbe>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e70 <TIM_OC3_SetConfig+0x118>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00b      	beq.n	8006e16 <TIM_OC3_SetConfig+0xbe>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a1c      	ldr	r2, [pc, #112]	@ (8006e74 <TIM_OC3_SetConfig+0x11c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d007      	beq.n	8006e16 <TIM_OC3_SetConfig+0xbe>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a1b      	ldr	r2, [pc, #108]	@ (8006e78 <TIM_OC3_SetConfig+0x120>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d003      	beq.n	8006e16 <TIM_OC3_SetConfig+0xbe>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a16      	ldr	r2, [pc, #88]	@ (8006e6c <TIM_OC3_SetConfig+0x114>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d113      	bne.n	8006e3e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	011b      	lsls	r3, r3, #4
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	011b      	lsls	r3, r3, #4
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	621a      	str	r2, [r3, #32]
}
 8006e58:	bf00      	nop
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	40012c00 	.word	0x40012c00
 8006e68:	40013400 	.word	0x40013400
 8006e6c:	40015000 	.word	0x40015000
 8006e70:	40014000 	.word	0x40014000
 8006e74:	40014400 	.word	0x40014400
 8006e78:	40014800 	.word	0x40014800

08006e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	021b      	lsls	r3, r3, #8
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	031b      	lsls	r3, r3, #12
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a2c      	ldr	r2, [pc, #176]	@ (8006f8c <TIM_OC4_SetConfig+0x110>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d007      	beq.n	8006ef0 <TIM_OC4_SetConfig+0x74>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a2b      	ldr	r2, [pc, #172]	@ (8006f90 <TIM_OC4_SetConfig+0x114>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d003      	beq.n	8006ef0 <TIM_OC4_SetConfig+0x74>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a2a      	ldr	r2, [pc, #168]	@ (8006f94 <TIM_OC4_SetConfig+0x118>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d10d      	bne.n	8006f0c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	031b      	lsls	r3, r3, #12
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8006f8c <TIM_OC4_SetConfig+0x110>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d013      	beq.n	8006f3c <TIM_OC4_SetConfig+0xc0>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a1e      	ldr	r2, [pc, #120]	@ (8006f90 <TIM_OC4_SetConfig+0x114>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00f      	beq.n	8006f3c <TIM_OC4_SetConfig+0xc0>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f98 <TIM_OC4_SetConfig+0x11c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00b      	beq.n	8006f3c <TIM_OC4_SetConfig+0xc0>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a1d      	ldr	r2, [pc, #116]	@ (8006f9c <TIM_OC4_SetConfig+0x120>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d007      	beq.n	8006f3c <TIM_OC4_SetConfig+0xc0>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8006fa0 <TIM_OC4_SetConfig+0x124>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_OC4_SetConfig+0xc0>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a17      	ldr	r2, [pc, #92]	@ (8006f94 <TIM_OC4_SetConfig+0x118>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d113      	bne.n	8006f64 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f42:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f4a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	019b      	lsls	r3, r3, #6
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	019b      	lsls	r3, r3, #6
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	621a      	str	r2, [r3, #32]
}
 8006f7e:	bf00      	nop
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40012c00 	.word	0x40012c00
 8006f90:	40013400 	.word	0x40013400
 8006f94:	40015000 	.word	0x40015000
 8006f98:	40014000 	.word	0x40014000
 8006f9c:	40014400 	.word	0x40014400
 8006fa0:	40014800 	.word	0x40014800

08006fa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006fe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	041b      	lsls	r3, r3, #16
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a19      	ldr	r2, [pc, #100]	@ (8007060 <TIM_OC5_SetConfig+0xbc>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d013      	beq.n	8007026 <TIM_OC5_SetConfig+0x82>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a18      	ldr	r2, [pc, #96]	@ (8007064 <TIM_OC5_SetConfig+0xc0>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d00f      	beq.n	8007026 <TIM_OC5_SetConfig+0x82>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a17      	ldr	r2, [pc, #92]	@ (8007068 <TIM_OC5_SetConfig+0xc4>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00b      	beq.n	8007026 <TIM_OC5_SetConfig+0x82>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a16      	ldr	r2, [pc, #88]	@ (800706c <TIM_OC5_SetConfig+0xc8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d007      	beq.n	8007026 <TIM_OC5_SetConfig+0x82>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a15      	ldr	r2, [pc, #84]	@ (8007070 <TIM_OC5_SetConfig+0xcc>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d003      	beq.n	8007026 <TIM_OC5_SetConfig+0x82>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a14      	ldr	r2, [pc, #80]	@ (8007074 <TIM_OC5_SetConfig+0xd0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d109      	bne.n	800703a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800702c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	621a      	str	r2, [r3, #32]
}
 8007054:	bf00      	nop
 8007056:	371c      	adds	r7, #28
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	40012c00 	.word	0x40012c00
 8007064:	40013400 	.word	0x40013400
 8007068:	40014000 	.word	0x40014000
 800706c:	40014400 	.word	0x40014400
 8007070:	40014800 	.word	0x40014800
 8007074:	40015000 	.word	0x40015000

08007078 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800709e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80070be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	051b      	lsls	r3, r3, #20
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007138 <TIM_OC6_SetConfig+0xc0>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d013      	beq.n	80070fc <TIM_OC6_SetConfig+0x84>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a19      	ldr	r2, [pc, #100]	@ (800713c <TIM_OC6_SetConfig+0xc4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00f      	beq.n	80070fc <TIM_OC6_SetConfig+0x84>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a18      	ldr	r2, [pc, #96]	@ (8007140 <TIM_OC6_SetConfig+0xc8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00b      	beq.n	80070fc <TIM_OC6_SetConfig+0x84>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a17      	ldr	r2, [pc, #92]	@ (8007144 <TIM_OC6_SetConfig+0xcc>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d007      	beq.n	80070fc <TIM_OC6_SetConfig+0x84>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a16      	ldr	r2, [pc, #88]	@ (8007148 <TIM_OC6_SetConfig+0xd0>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d003      	beq.n	80070fc <TIM_OC6_SetConfig+0x84>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a15      	ldr	r2, [pc, #84]	@ (800714c <TIM_OC6_SetConfig+0xd4>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d109      	bne.n	8007110 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007102:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	029b      	lsls	r3, r3, #10
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	621a      	str	r2, [r3, #32]
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40012c00 	.word	0x40012c00
 800713c:	40013400 	.word	0x40013400
 8007140:	40014000 	.word	0x40014000
 8007144:	40014400 	.word	0x40014400
 8007148:	40014800 	.word	0x40014800
 800714c:	40015000 	.word	0x40015000

08007150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	f023 0201 	bic.w	r2, r3, #1
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800717a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f023 030a 	bic.w	r3, r3, #10
 800718c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4313      	orrs	r3, r2
 8007194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	621a      	str	r2, [r3, #32]
}
 80071a2:	bf00      	nop
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b087      	sub	sp, #28
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	60f8      	str	r0, [r7, #12]
 80071b6:	60b9      	str	r1, [r7, #8]
 80071b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	f023 0210 	bic.w	r2, r3, #16
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	031b      	lsls	r3, r3, #12
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800720e:	b480      	push	{r7}
 8007210:	b085      	sub	sp, #20
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4313      	orrs	r3, r2
 8007230:	f043 0307 	orr.w	r3, r3, #7
 8007234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	609a      	str	r2, [r3, #8]
}
 800723c:	bf00      	nop
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	021a      	lsls	r2, r3, #8
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	431a      	orrs	r2, r3
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	4313      	orrs	r3, r2
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	609a      	str	r2, [r3, #8]
}
 800727c:	bf00      	nop
 800727e:	371c      	adds	r7, #28
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f003 031f 	and.w	r3, r3, #31
 800729a:	2201      	movs	r2, #1
 800729c:	fa02 f303 	lsl.w	r3, r2, r3
 80072a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a1a      	ldr	r2, [r3, #32]
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	43db      	mvns	r3, r3
 80072aa:	401a      	ands	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6a1a      	ldr	r2, [r3, #32]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f003 031f 	and.w	r3, r3, #31
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	fa01 f303 	lsl.w	r3, r1, r3
 80072c0:	431a      	orrs	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	621a      	str	r2, [r3, #32]
}
 80072c6:	bf00      	nop
 80072c8:	371c      	adds	r7, #28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
	...

080072d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d101      	bne.n	80072ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072e8:	2302      	movs	r3, #2
 80072ea:	e074      	b.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a34      	ldr	r2, [pc, #208]	@ (80073e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d009      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a33      	ldr	r2, [pc, #204]	@ (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d004      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a31      	ldr	r2, [pc, #196]	@ (80073ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d108      	bne.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007330:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	4313      	orrs	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a21      	ldr	r2, [pc, #132]	@ (80073e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d022      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800736c:	d01d      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1f      	ldr	r2, [pc, #124]	@ (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d018      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1d      	ldr	r2, [pc, #116]	@ (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d013      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1c      	ldr	r2, [pc, #112]	@ (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00e      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a15      	ldr	r2, [pc, #84]	@ (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d009      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a18      	ldr	r2, [pc, #96]	@ (80073fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d004      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a11      	ldr	r2, [pc, #68]	@ (80073ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d10c      	bne.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40012c00 	.word	0x40012c00
 80073e8:	40013400 	.word	0x40013400
 80073ec:	40015000 	.word	0x40015000
 80073f0:	40000400 	.word	0x40000400
 80073f4:	40000800 	.word	0x40000800
 80073f8:	40000c00 	.word	0x40000c00
 80073fc:	40014000 	.word	0x40014000

08007400 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007414:	2b01      	cmp	r3, #1
 8007416:	d101      	bne.n	800741c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007418:	2302      	movs	r3, #2
 800741a:	e078      	b.n	800750e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	4313      	orrs	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4313      	orrs	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	4313      	orrs	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	041b      	lsls	r3, r3, #16
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a1c      	ldr	r2, [pc, #112]	@ (800751c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d009      	beq.n	80074c2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a1b      	ldr	r2, [pc, #108]	@ (8007520 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d004      	beq.n	80074c2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a19      	ldr	r2, [pc, #100]	@ (8007524 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d11c      	bne.n	80074fc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074cc:	051b      	lsls	r3, r3, #20
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40012c00 	.word	0x40012c00
 8007520:	40013400 	.word	0x40013400
 8007524:	40015000 	.word	0x40015000

08007528 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e042      	b.n	800764c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d106      	bne.n	80075de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7fa fca1 	bl	8001f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2224      	movs	r2, #36	@ 0x24
 80075e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0201 	bic.w	r2, r2, #1
 80075f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d002      	beq.n	8007604 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fb24 	bl	8007c4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f825 	bl	8007654 <UART_SetConfig>
 800760a:	4603      	mov	r3, r0
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e01b      	b.n	800764c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007622:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689a      	ldr	r2, [r3, #8]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007632:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f042 0201 	orr.w	r2, r2, #1
 8007642:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fba3 	bl	8007d90 <UART_CheckIdleState>
 800764a:	4603      	mov	r3, r0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007658:	b08c      	sub	sp, #48	@ 0x30
 800765a:	af00      	add	r7, sp, #0
 800765c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	431a      	orrs	r2, r3
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	431a      	orrs	r2, r3
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	4313      	orrs	r3, r2
 800767a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	4baa      	ldr	r3, [pc, #680]	@ (800792c <UART_SetConfig+0x2d8>)
 8007684:	4013      	ands	r3, r2
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	6812      	ldr	r2, [r2, #0]
 800768a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800768c:	430b      	orrs	r3, r1
 800768e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a9f      	ldr	r2, [pc, #636]	@ (8007930 <UART_SetConfig+0x2dc>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d004      	beq.n	80076c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076bc:	4313      	orrs	r3, r2
 80076be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80076ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	6812      	ldr	r2, [r2, #0]
 80076d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076d4:	430b      	orrs	r3, r1
 80076d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076de:	f023 010f 	bic.w	r1, r3, #15
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a90      	ldr	r2, [pc, #576]	@ (8007934 <UART_SetConfig+0x2e0>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d125      	bne.n	8007744 <UART_SetConfig+0xf0>
 80076f8:	4b8f      	ldr	r3, [pc, #572]	@ (8007938 <UART_SetConfig+0x2e4>)
 80076fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076fe:	f003 0303 	and.w	r3, r3, #3
 8007702:	2b03      	cmp	r3, #3
 8007704:	d81a      	bhi.n	800773c <UART_SetConfig+0xe8>
 8007706:	a201      	add	r2, pc, #4	@ (adr r2, 800770c <UART_SetConfig+0xb8>)
 8007708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770c:	0800771d 	.word	0x0800771d
 8007710:	0800772d 	.word	0x0800772d
 8007714:	08007725 	.word	0x08007725
 8007718:	08007735 	.word	0x08007735
 800771c:	2301      	movs	r3, #1
 800771e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007722:	e116      	b.n	8007952 <UART_SetConfig+0x2fe>
 8007724:	2302      	movs	r3, #2
 8007726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800772a:	e112      	b.n	8007952 <UART_SetConfig+0x2fe>
 800772c:	2304      	movs	r3, #4
 800772e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007732:	e10e      	b.n	8007952 <UART_SetConfig+0x2fe>
 8007734:	2308      	movs	r3, #8
 8007736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800773a:	e10a      	b.n	8007952 <UART_SetConfig+0x2fe>
 800773c:	2310      	movs	r3, #16
 800773e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007742:	e106      	b.n	8007952 <UART_SetConfig+0x2fe>
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a7c      	ldr	r2, [pc, #496]	@ (800793c <UART_SetConfig+0x2e8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d138      	bne.n	80077c0 <UART_SetConfig+0x16c>
 800774e:	4b7a      	ldr	r3, [pc, #488]	@ (8007938 <UART_SetConfig+0x2e4>)
 8007750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007754:	f003 030c 	and.w	r3, r3, #12
 8007758:	2b0c      	cmp	r3, #12
 800775a:	d82d      	bhi.n	80077b8 <UART_SetConfig+0x164>
 800775c:	a201      	add	r2, pc, #4	@ (adr r2, 8007764 <UART_SetConfig+0x110>)
 800775e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007762:	bf00      	nop
 8007764:	08007799 	.word	0x08007799
 8007768:	080077b9 	.word	0x080077b9
 800776c:	080077b9 	.word	0x080077b9
 8007770:	080077b9 	.word	0x080077b9
 8007774:	080077a9 	.word	0x080077a9
 8007778:	080077b9 	.word	0x080077b9
 800777c:	080077b9 	.word	0x080077b9
 8007780:	080077b9 	.word	0x080077b9
 8007784:	080077a1 	.word	0x080077a1
 8007788:	080077b9 	.word	0x080077b9
 800778c:	080077b9 	.word	0x080077b9
 8007790:	080077b9 	.word	0x080077b9
 8007794:	080077b1 	.word	0x080077b1
 8007798:	2300      	movs	r3, #0
 800779a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800779e:	e0d8      	b.n	8007952 <UART_SetConfig+0x2fe>
 80077a0:	2302      	movs	r3, #2
 80077a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077a6:	e0d4      	b.n	8007952 <UART_SetConfig+0x2fe>
 80077a8:	2304      	movs	r3, #4
 80077aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ae:	e0d0      	b.n	8007952 <UART_SetConfig+0x2fe>
 80077b0:	2308      	movs	r3, #8
 80077b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077b6:	e0cc      	b.n	8007952 <UART_SetConfig+0x2fe>
 80077b8:	2310      	movs	r3, #16
 80077ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077be:	e0c8      	b.n	8007952 <UART_SetConfig+0x2fe>
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a5e      	ldr	r2, [pc, #376]	@ (8007940 <UART_SetConfig+0x2ec>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d125      	bne.n	8007816 <UART_SetConfig+0x1c2>
 80077ca:	4b5b      	ldr	r3, [pc, #364]	@ (8007938 <UART_SetConfig+0x2e4>)
 80077cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80077d4:	2b30      	cmp	r3, #48	@ 0x30
 80077d6:	d016      	beq.n	8007806 <UART_SetConfig+0x1b2>
 80077d8:	2b30      	cmp	r3, #48	@ 0x30
 80077da:	d818      	bhi.n	800780e <UART_SetConfig+0x1ba>
 80077dc:	2b20      	cmp	r3, #32
 80077de:	d00a      	beq.n	80077f6 <UART_SetConfig+0x1a2>
 80077e0:	2b20      	cmp	r3, #32
 80077e2:	d814      	bhi.n	800780e <UART_SetConfig+0x1ba>
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <UART_SetConfig+0x19a>
 80077e8:	2b10      	cmp	r3, #16
 80077ea:	d008      	beq.n	80077fe <UART_SetConfig+0x1aa>
 80077ec:	e00f      	b.n	800780e <UART_SetConfig+0x1ba>
 80077ee:	2300      	movs	r3, #0
 80077f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077f4:	e0ad      	b.n	8007952 <UART_SetConfig+0x2fe>
 80077f6:	2302      	movs	r3, #2
 80077f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077fc:	e0a9      	b.n	8007952 <UART_SetConfig+0x2fe>
 80077fe:	2304      	movs	r3, #4
 8007800:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007804:	e0a5      	b.n	8007952 <UART_SetConfig+0x2fe>
 8007806:	2308      	movs	r3, #8
 8007808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800780c:	e0a1      	b.n	8007952 <UART_SetConfig+0x2fe>
 800780e:	2310      	movs	r3, #16
 8007810:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007814:	e09d      	b.n	8007952 <UART_SetConfig+0x2fe>
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a4a      	ldr	r2, [pc, #296]	@ (8007944 <UART_SetConfig+0x2f0>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d125      	bne.n	800786c <UART_SetConfig+0x218>
 8007820:	4b45      	ldr	r3, [pc, #276]	@ (8007938 <UART_SetConfig+0x2e4>)
 8007822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007826:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800782a:	2bc0      	cmp	r3, #192	@ 0xc0
 800782c:	d016      	beq.n	800785c <UART_SetConfig+0x208>
 800782e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007830:	d818      	bhi.n	8007864 <UART_SetConfig+0x210>
 8007832:	2b80      	cmp	r3, #128	@ 0x80
 8007834:	d00a      	beq.n	800784c <UART_SetConfig+0x1f8>
 8007836:	2b80      	cmp	r3, #128	@ 0x80
 8007838:	d814      	bhi.n	8007864 <UART_SetConfig+0x210>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <UART_SetConfig+0x1f0>
 800783e:	2b40      	cmp	r3, #64	@ 0x40
 8007840:	d008      	beq.n	8007854 <UART_SetConfig+0x200>
 8007842:	e00f      	b.n	8007864 <UART_SetConfig+0x210>
 8007844:	2300      	movs	r3, #0
 8007846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800784a:	e082      	b.n	8007952 <UART_SetConfig+0x2fe>
 800784c:	2302      	movs	r3, #2
 800784e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007852:	e07e      	b.n	8007952 <UART_SetConfig+0x2fe>
 8007854:	2304      	movs	r3, #4
 8007856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800785a:	e07a      	b.n	8007952 <UART_SetConfig+0x2fe>
 800785c:	2308      	movs	r3, #8
 800785e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007862:	e076      	b.n	8007952 <UART_SetConfig+0x2fe>
 8007864:	2310      	movs	r3, #16
 8007866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800786a:	e072      	b.n	8007952 <UART_SetConfig+0x2fe>
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a35      	ldr	r2, [pc, #212]	@ (8007948 <UART_SetConfig+0x2f4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d12a      	bne.n	80078cc <UART_SetConfig+0x278>
 8007876:	4b30      	ldr	r3, [pc, #192]	@ (8007938 <UART_SetConfig+0x2e4>)
 8007878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800787c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007880:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007884:	d01a      	beq.n	80078bc <UART_SetConfig+0x268>
 8007886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800788a:	d81b      	bhi.n	80078c4 <UART_SetConfig+0x270>
 800788c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007890:	d00c      	beq.n	80078ac <UART_SetConfig+0x258>
 8007892:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007896:	d815      	bhi.n	80078c4 <UART_SetConfig+0x270>
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <UART_SetConfig+0x250>
 800789c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078a0:	d008      	beq.n	80078b4 <UART_SetConfig+0x260>
 80078a2:	e00f      	b.n	80078c4 <UART_SetConfig+0x270>
 80078a4:	2300      	movs	r3, #0
 80078a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078aa:	e052      	b.n	8007952 <UART_SetConfig+0x2fe>
 80078ac:	2302      	movs	r3, #2
 80078ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078b2:	e04e      	b.n	8007952 <UART_SetConfig+0x2fe>
 80078b4:	2304      	movs	r3, #4
 80078b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ba:	e04a      	b.n	8007952 <UART_SetConfig+0x2fe>
 80078bc:	2308      	movs	r3, #8
 80078be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078c2:	e046      	b.n	8007952 <UART_SetConfig+0x2fe>
 80078c4:	2310      	movs	r3, #16
 80078c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ca:	e042      	b.n	8007952 <UART_SetConfig+0x2fe>
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a17      	ldr	r2, [pc, #92]	@ (8007930 <UART_SetConfig+0x2dc>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d13a      	bne.n	800794c <UART_SetConfig+0x2f8>
 80078d6:	4b18      	ldr	r3, [pc, #96]	@ (8007938 <UART_SetConfig+0x2e4>)
 80078d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80078e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078e4:	d01a      	beq.n	800791c <UART_SetConfig+0x2c8>
 80078e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078ea:	d81b      	bhi.n	8007924 <UART_SetConfig+0x2d0>
 80078ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078f0:	d00c      	beq.n	800790c <UART_SetConfig+0x2b8>
 80078f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078f6:	d815      	bhi.n	8007924 <UART_SetConfig+0x2d0>
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <UART_SetConfig+0x2b0>
 80078fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007900:	d008      	beq.n	8007914 <UART_SetConfig+0x2c0>
 8007902:	e00f      	b.n	8007924 <UART_SetConfig+0x2d0>
 8007904:	2300      	movs	r3, #0
 8007906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800790a:	e022      	b.n	8007952 <UART_SetConfig+0x2fe>
 800790c:	2302      	movs	r3, #2
 800790e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007912:	e01e      	b.n	8007952 <UART_SetConfig+0x2fe>
 8007914:	2304      	movs	r3, #4
 8007916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800791a:	e01a      	b.n	8007952 <UART_SetConfig+0x2fe>
 800791c:	2308      	movs	r3, #8
 800791e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007922:	e016      	b.n	8007952 <UART_SetConfig+0x2fe>
 8007924:	2310      	movs	r3, #16
 8007926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800792a:	e012      	b.n	8007952 <UART_SetConfig+0x2fe>
 800792c:	cfff69f3 	.word	0xcfff69f3
 8007930:	40008000 	.word	0x40008000
 8007934:	40013800 	.word	0x40013800
 8007938:	40021000 	.word	0x40021000
 800793c:	40004400 	.word	0x40004400
 8007940:	40004800 	.word	0x40004800
 8007944:	40004c00 	.word	0x40004c00
 8007948:	40005000 	.word	0x40005000
 800794c:	2310      	movs	r3, #16
 800794e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4aae      	ldr	r2, [pc, #696]	@ (8007c10 <UART_SetConfig+0x5bc>)
 8007958:	4293      	cmp	r3, r2
 800795a:	f040 8097 	bne.w	8007a8c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800795e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007962:	2b08      	cmp	r3, #8
 8007964:	d823      	bhi.n	80079ae <UART_SetConfig+0x35a>
 8007966:	a201      	add	r2, pc, #4	@ (adr r2, 800796c <UART_SetConfig+0x318>)
 8007968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796c:	08007991 	.word	0x08007991
 8007970:	080079af 	.word	0x080079af
 8007974:	08007999 	.word	0x08007999
 8007978:	080079af 	.word	0x080079af
 800797c:	0800799f 	.word	0x0800799f
 8007980:	080079af 	.word	0x080079af
 8007984:	080079af 	.word	0x080079af
 8007988:	080079af 	.word	0x080079af
 800798c:	080079a7 	.word	0x080079a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007990:	f7fd fdb6 	bl	8005500 <HAL_RCC_GetPCLK1Freq>
 8007994:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007996:	e010      	b.n	80079ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007998:	4b9e      	ldr	r3, [pc, #632]	@ (8007c14 <UART_SetConfig+0x5c0>)
 800799a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800799c:	e00d      	b.n	80079ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800799e:	f7fd fd41 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80079a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079a4:	e009      	b.n	80079ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079ac:	e005      	b.n	80079ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80079b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 8130 	beq.w	8007c22 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c6:	4a94      	ldr	r2, [pc, #592]	@ (8007c18 <UART_SetConfig+0x5c4>)
 80079c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079cc:	461a      	mov	r2, r3
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	4613      	mov	r3, r2
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	4413      	add	r3, r2
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d305      	bcc.n	80079f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d903      	bls.n	80079fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80079f8:	e113      	b.n	8007c22 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fc:	2200      	movs	r2, #0
 80079fe:	60bb      	str	r3, [r7, #8]
 8007a00:	60fa      	str	r2, [r7, #12]
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a06:	4a84      	ldr	r2, [pc, #528]	@ (8007c18 <UART_SetConfig+0x5c4>)
 8007a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	2200      	movs	r2, #0
 8007a10:	603b      	str	r3, [r7, #0]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a1c:	f7f9 f83a 	bl	8000a94 <__aeabi_uldivmod>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4610      	mov	r0, r2
 8007a26:	4619      	mov	r1, r3
 8007a28:	f04f 0200 	mov.w	r2, #0
 8007a2c:	f04f 0300 	mov.w	r3, #0
 8007a30:	020b      	lsls	r3, r1, #8
 8007a32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a36:	0202      	lsls	r2, r0, #8
 8007a38:	6979      	ldr	r1, [r7, #20]
 8007a3a:	6849      	ldr	r1, [r1, #4]
 8007a3c:	0849      	lsrs	r1, r1, #1
 8007a3e:	2000      	movs	r0, #0
 8007a40:	460c      	mov	r4, r1
 8007a42:	4605      	mov	r5, r0
 8007a44:	eb12 0804 	adds.w	r8, r2, r4
 8007a48:	eb43 0905 	adc.w	r9, r3, r5
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	469a      	mov	sl, r3
 8007a54:	4693      	mov	fp, r2
 8007a56:	4652      	mov	r2, sl
 8007a58:	465b      	mov	r3, fp
 8007a5a:	4640      	mov	r0, r8
 8007a5c:	4649      	mov	r1, r9
 8007a5e:	f7f9 f819 	bl	8000a94 <__aeabi_uldivmod>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4613      	mov	r3, r2
 8007a68:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a70:	d308      	bcc.n	8007a84 <UART_SetConfig+0x430>
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a78:	d204      	bcs.n	8007a84 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6a3a      	ldr	r2, [r7, #32]
 8007a80:	60da      	str	r2, [r3, #12]
 8007a82:	e0ce      	b.n	8007c22 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a8a:	e0ca      	b.n	8007c22 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a94:	d166      	bne.n	8007b64 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007a96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a9a:	2b08      	cmp	r3, #8
 8007a9c:	d827      	bhi.n	8007aee <UART_SetConfig+0x49a>
 8007a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa4 <UART_SetConfig+0x450>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007ac9 	.word	0x08007ac9
 8007aa8:	08007ad1 	.word	0x08007ad1
 8007aac:	08007ad9 	.word	0x08007ad9
 8007ab0:	08007aef 	.word	0x08007aef
 8007ab4:	08007adf 	.word	0x08007adf
 8007ab8:	08007aef 	.word	0x08007aef
 8007abc:	08007aef 	.word	0x08007aef
 8007ac0:	08007aef 	.word	0x08007aef
 8007ac4:	08007ae7 	.word	0x08007ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac8:	f7fd fd1a 	bl	8005500 <HAL_RCC_GetPCLK1Freq>
 8007acc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ace:	e014      	b.n	8007afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ad0:	f7fd fd2c 	bl	800552c <HAL_RCC_GetPCLK2Freq>
 8007ad4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ad6:	e010      	b.n	8007afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ad8:	4b4e      	ldr	r3, [pc, #312]	@ (8007c14 <UART_SetConfig+0x5c0>)
 8007ada:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007adc:	e00d      	b.n	8007afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ade:	f7fd fca1 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 8007ae2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ae4:	e009      	b.n	8007afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007aec:	e005      	b.n	8007afa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007af8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 8090 	beq.w	8007c22 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b06:	4a44      	ldr	r2, [pc, #272]	@ (8007c18 <UART_SetConfig+0x5c4>)
 8007b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b14:	005a      	lsls	r2, r3, #1
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	085b      	lsrs	r3, r3, #1
 8007b1c:	441a      	add	r2, r3
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	2b0f      	cmp	r3, #15
 8007b2c:	d916      	bls.n	8007b5c <UART_SetConfig+0x508>
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b34:	d212      	bcs.n	8007b5c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	f023 030f 	bic.w	r3, r3, #15
 8007b3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	085b      	lsrs	r3, r3, #1
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	8bfb      	ldrh	r3, [r7, #30]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	8bfa      	ldrh	r2, [r7, #30]
 8007b58:	60da      	str	r2, [r3, #12]
 8007b5a:	e062      	b.n	8007c22 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b62:	e05e      	b.n	8007c22 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	d828      	bhi.n	8007bbe <UART_SetConfig+0x56a>
 8007b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b74 <UART_SetConfig+0x520>)
 8007b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b72:	bf00      	nop
 8007b74:	08007b99 	.word	0x08007b99
 8007b78:	08007ba1 	.word	0x08007ba1
 8007b7c:	08007ba9 	.word	0x08007ba9
 8007b80:	08007bbf 	.word	0x08007bbf
 8007b84:	08007baf 	.word	0x08007baf
 8007b88:	08007bbf 	.word	0x08007bbf
 8007b8c:	08007bbf 	.word	0x08007bbf
 8007b90:	08007bbf 	.word	0x08007bbf
 8007b94:	08007bb7 	.word	0x08007bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b98:	f7fd fcb2 	bl	8005500 <HAL_RCC_GetPCLK1Freq>
 8007b9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b9e:	e014      	b.n	8007bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ba0:	f7fd fcc4 	bl	800552c <HAL_RCC_GetPCLK2Freq>
 8007ba4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ba6:	e010      	b.n	8007bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8007c14 <UART_SetConfig+0x5c0>)
 8007baa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bac:	e00d      	b.n	8007bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bae:	f7fd fc39 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 8007bb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bb4:	e009      	b.n	8007bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bbc:	e005      	b.n	8007bca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007bc8:	bf00      	nop
    }

    if (pclk != 0U)
 8007bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d028      	beq.n	8007c22 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd4:	4a10      	ldr	r2, [pc, #64]	@ (8007c18 <UART_SetConfig+0x5c4>)
 8007bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bde:	fbb3 f2f2 	udiv	r2, r3, r2
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	085b      	lsrs	r3, r3, #1
 8007be8:	441a      	add	r2, r3
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	2b0f      	cmp	r3, #15
 8007bf8:	d910      	bls.n	8007c1c <UART_SetConfig+0x5c8>
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c00:	d20c      	bcs.n	8007c1c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	60da      	str	r2, [r3, #12]
 8007c0c:	e009      	b.n	8007c22 <UART_SetConfig+0x5ce>
 8007c0e:	bf00      	nop
 8007c10:	40008000 	.word	0x40008000
 8007c14:	00f42400 	.word	0x00f42400
 8007c18:	08008318 	.word	0x08008318
      }
      else
      {
        ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	2200      	movs	r2, #0
 8007c36:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007c3e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3730      	adds	r7, #48	@ 0x30
 8007c46:	46bd      	mov	sp, r7
 8007c48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c58:	f003 0308 	and.w	r3, r3, #8
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9c:	f003 0302 	and.w	r3, r3, #2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00a      	beq.n	8007cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cbe:	f003 0304 	and.w	r3, r3, #4
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce0:	f003 0310 	and.w	r3, r3, #16
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d02:	f003 0320 	and.w	r3, r3, #32
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d01a      	beq.n	8007d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d4a:	d10a      	bne.n	8007d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	430a      	orrs	r2, r1
 8007d82:	605a      	str	r2, [r3, #4]
  }
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b098      	sub	sp, #96	@ 0x60
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007da0:	f7fa fadc 	bl	800235c <HAL_GetTick>
 8007da4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0308 	and.w	r3, r3, #8
 8007db0:	2b08      	cmp	r3, #8
 8007db2:	d12f      	bne.n	8007e14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007db4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f88e 	bl	8007ee4 <UART_WaitOnFlagUntilTimeout>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d022      	beq.n	8007e14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007de2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007df2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e6      	bne.n	8007dce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2220      	movs	r2, #32
 8007e04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e063      	b.n	8007edc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0304 	and.w	r3, r3, #4
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	d149      	bne.n	8007eb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f857 	bl	8007ee4 <UART_WaitOnFlagUntilTimeout>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d03c      	beq.n	8007eb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	623b      	str	r3, [r7, #32]
   return(result);
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e6      	bne.n	8007e3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3308      	adds	r3, #8
 8007e74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f023 0301 	bic.w	r3, r3, #1
 8007e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e8e:	61fa      	str	r2, [r7, #28]
 8007e90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e92:	69b9      	ldr	r1, [r7, #24]
 8007e94:	69fa      	ldr	r2, [r7, #28]
 8007e96:	e841 2300 	strex	r3, r2, [r1]
 8007e9a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e5      	bne.n	8007e6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e012      	b.n	8007edc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3758      	adds	r7, #88	@ 0x58
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef4:	e04f      	b.n	8007f96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efc:	d04b      	beq.n	8007f96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007efe:	f7fa fa2d 	bl	800235c <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d302      	bcc.n	8007f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e04e      	b.n	8007fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d037      	beq.n	8007f96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b80      	cmp	r3, #128	@ 0x80
 8007f2a:	d034      	beq.n	8007f96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2b40      	cmp	r3, #64	@ 0x40
 8007f30:	d031      	beq.n	8007f96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	f003 0308 	and.w	r3, r3, #8
 8007f3c:	2b08      	cmp	r3, #8
 8007f3e:	d110      	bne.n	8007f62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2208      	movs	r2, #8
 8007f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f838 	bl	8007fbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2208      	movs	r2, #8
 8007f52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e029      	b.n	8007fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f70:	d111      	bne.n	8007f96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 f81e 	bl	8007fbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e00f      	b.n	8007fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	69da      	ldr	r2, [r3, #28]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	bf0c      	ite	eq
 8007fa6:	2301      	moveq	r3, #1
 8007fa8:	2300      	movne	r3, #0
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	461a      	mov	r2, r3
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d0a0      	beq.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b095      	sub	sp, #84	@ 0x54
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fce:	e853 3f00 	ldrex	r3, [r3]
 8007fd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fe4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fe6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fec:	e841 2300 	strex	r3, r2, [r1]
 8007ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1e6      	bne.n	8007fc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	61fb      	str	r3, [r7, #28]
   return(result);
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800800e:	f023 0301 	bic.w	r3, r3, #1
 8008012:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3308      	adds	r3, #8
 800801a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800801c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800801e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e3      	bne.n	8007ff8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008034:	2b01      	cmp	r3, #1
 8008036:	d118      	bne.n	800806a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	e853 3f00 	ldrex	r3, [r3]
 8008044:	60bb      	str	r3, [r7, #8]
   return(result);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f023 0310 	bic.w	r3, r3, #16
 800804c:	647b      	str	r3, [r7, #68]	@ 0x44
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	461a      	mov	r2, r3
 8008054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008056:	61bb      	str	r3, [r7, #24]
 8008058:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	6979      	ldr	r1, [r7, #20]
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	e841 2300 	strex	r3, r2, [r1]
 8008062:	613b      	str	r3, [r7, #16]
   return(result);
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e6      	bne.n	8008038 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2220      	movs	r2, #32
 800806e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800807e:	bf00      	nop
 8008080:	3754      	adds	r7, #84	@ 0x54
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800808a:	b480      	push	{r7}
 800808c:	b085      	sub	sp, #20
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008098:	2b01      	cmp	r3, #1
 800809a:	d101      	bne.n	80080a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800809c:	2302      	movs	r3, #2
 800809e:	e027      	b.n	80080f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2224      	movs	r2, #36	@ 0x24
 80080ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f022 0201 	bic.w	r2, r2, #1
 80080c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80080ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2220      	movs	r2, #32
 80080e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800810c:	2b01      	cmp	r3, #1
 800810e:	d101      	bne.n	8008114 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008110:	2302      	movs	r3, #2
 8008112:	e02d      	b.n	8008170 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2224      	movs	r2, #36	@ 0x24
 8008120:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 0201 	bic.w	r2, r2, #1
 800813a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f84f 	bl	80081f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2220      	movs	r2, #32
 8008162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008188:	2b01      	cmp	r3, #1
 800818a:	d101      	bne.n	8008190 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800818c:	2302      	movs	r3, #2
 800818e:	e02d      	b.n	80081ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2224      	movs	r2, #36	@ 0x24
 800819c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 0201 	bic.w	r2, r2, #1
 80081b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f811 	bl	80081f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2220      	movs	r2, #32
 80081de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008200:	2b00      	cmp	r3, #0
 8008202:	d108      	bne.n	8008216 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008214:	e031      	b.n	800827a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008216:	2308      	movs	r3, #8
 8008218:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800821a:	2308      	movs	r3, #8
 800821c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	0e5b      	lsrs	r3, r3, #25
 8008226:	b2db      	uxtb	r3, r3
 8008228:	f003 0307 	and.w	r3, r3, #7
 800822c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	0f5b      	lsrs	r3, r3, #29
 8008236:	b2db      	uxtb	r3, r3
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800823e:	7bbb      	ldrb	r3, [r7, #14]
 8008240:	7b3a      	ldrb	r2, [r7, #12]
 8008242:	4911      	ldr	r1, [pc, #68]	@ (8008288 <UARTEx_SetNbDataToProcess+0x94>)
 8008244:	5c8a      	ldrb	r2, [r1, r2]
 8008246:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800824a:	7b3a      	ldrb	r2, [r7, #12]
 800824c:	490f      	ldr	r1, [pc, #60]	@ (800828c <UARTEx_SetNbDataToProcess+0x98>)
 800824e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008250:	fb93 f3f2 	sdiv	r3, r3, r2
 8008254:	b29a      	uxth	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	7b7a      	ldrb	r2, [r7, #13]
 8008260:	4909      	ldr	r1, [pc, #36]	@ (8008288 <UARTEx_SetNbDataToProcess+0x94>)
 8008262:	5c8a      	ldrb	r2, [r1, r2]
 8008264:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008268:	7b7a      	ldrb	r2, [r7, #13]
 800826a:	4908      	ldr	r1, [pc, #32]	@ (800828c <UARTEx_SetNbDataToProcess+0x98>)
 800826c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800826e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008272:	b29a      	uxth	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800827a:	bf00      	nop
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	08008330 	.word	0x08008330
 800828c:	08008338 	.word	0x08008338

08008290 <memset>:
 8008290:	4402      	add	r2, r0
 8008292:	4603      	mov	r3, r0
 8008294:	4293      	cmp	r3, r2
 8008296:	d100      	bne.n	800829a <memset+0xa>
 8008298:	4770      	bx	lr
 800829a:	f803 1b01 	strb.w	r1, [r3], #1
 800829e:	e7f9      	b.n	8008294 <memset+0x4>

080082a0 <__libc_init_array>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	4d0d      	ldr	r5, [pc, #52]	@ (80082d8 <__libc_init_array+0x38>)
 80082a4:	4c0d      	ldr	r4, [pc, #52]	@ (80082dc <__libc_init_array+0x3c>)
 80082a6:	1b64      	subs	r4, r4, r5
 80082a8:	10a4      	asrs	r4, r4, #2
 80082aa:	2600      	movs	r6, #0
 80082ac:	42a6      	cmp	r6, r4
 80082ae:	d109      	bne.n	80082c4 <__libc_init_array+0x24>
 80082b0:	4d0b      	ldr	r5, [pc, #44]	@ (80082e0 <__libc_init_array+0x40>)
 80082b2:	4c0c      	ldr	r4, [pc, #48]	@ (80082e4 <__libc_init_array+0x44>)
 80082b4:	f000 f818 	bl	80082e8 <_init>
 80082b8:	1b64      	subs	r4, r4, r5
 80082ba:	10a4      	asrs	r4, r4, #2
 80082bc:	2600      	movs	r6, #0
 80082be:	42a6      	cmp	r6, r4
 80082c0:	d105      	bne.n	80082ce <__libc_init_array+0x2e>
 80082c2:	bd70      	pop	{r4, r5, r6, pc}
 80082c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c8:	4798      	blx	r3
 80082ca:	3601      	adds	r6, #1
 80082cc:	e7ee      	b.n	80082ac <__libc_init_array+0xc>
 80082ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80082d2:	4798      	blx	r3
 80082d4:	3601      	adds	r6, #1
 80082d6:	e7f2      	b.n	80082be <__libc_init_array+0x1e>
 80082d8:	08008348 	.word	0x08008348
 80082dc:	08008348 	.word	0x08008348
 80082e0:	08008348 	.word	0x08008348
 80082e4:	0800834c 	.word	0x0800834c

080082e8 <_init>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	bf00      	nop
 80082ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ee:	bc08      	pop	{r3}
 80082f0:	469e      	mov	lr, r3
 80082f2:	4770      	bx	lr

080082f4 <_fini>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	bf00      	nop
 80082f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fa:	bc08      	pop	{r3}
 80082fc:	469e      	mov	lr, r3
 80082fe:	4770      	bx	lr

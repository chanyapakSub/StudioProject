
Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076b0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007888  08007888  00008888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078c8  080078c8  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  080078c8  080078c8  000088c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078d0  080078d0  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d0  080078d0  000088d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078d4  080078d4  000088d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080078d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000010  080078e4  00009010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080078e4  000092b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d34  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002def  00000000  00000000  00021d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00024b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000105e  00000000  00000000  00026060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ae8  00000000  00000000  000270be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001906b  00000000  00000000  0002aba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113e60  00000000  00000000  00043c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157a71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf8  00000000  00000000  00157ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0015d6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007870 	.word	0x08007870

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08007870 	.word	0x08007870

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d88:	f001 f82f 	bl	8001dea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8c:	f000 f830 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d90:	f000 fab8 	bl	8001304 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d94:	f000 fa8c 	bl	80012b0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d98:	f000 f8ec 	bl	8000f74 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000d9c:	f000 f934 	bl	8001008 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000da0:	f000 f9e2 	bl	8001168 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000da4:	f000 fa2e 	bl	8001204 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000da8:	f000 f86c 	bl	8000e84 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //Update command timer
  HAL_TIM_Base_Start_IT(&htim3);
 8000dac:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <main+0x5c>)
 8000dae:	f004 f9f3 	bl	8005198 <HAL_TIM_Base_Start_IT>

  //PWM generator
  HAL_TIM_Base_Start(&htim1);
 8000db2:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <main+0x60>)
 8000db4:	f004 f980 	bl	80050b8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000db8:	2100      	movs	r1, #0
 8000dba:	480a      	ldr	r0, [pc, #40]	@ (8000de4 <main+0x60>)
 8000dbc:	f004 fac6 	bl	800534c <HAL_TIM_PWM_Start>

  //Encoder reader
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000dc0:	213c      	movs	r1, #60	@ 0x3c
 8000dc2:	4809      	ldr	r0, [pc, #36]	@ (8000de8 <main+0x64>)
 8000dc4:	f004 fc7a 	bl	80056bc <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, 8192, 2000, 65536);
 8000dc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dcc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000dd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd4:	4805      	ldr	r0, [pc, #20]	@ (8000dec <main+0x68>)
 8000dd6:	f000 fc38 	bl	800164a <QEI_init>
//  ADC_init(&hadc1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dda:	bf00      	nop
 8000ddc:	e7fd      	b.n	8000dda <main+0x56>
 8000dde:	bf00      	nop
 8000de0:	200001d8 	.word	0x200001d8
 8000de4:	2000018c 	.word	0x2000018c
 8000de8:	20000224 	.word	0x20000224
 8000dec:	20000278 	.word	0x20000278

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b094      	sub	sp, #80	@ 0x50
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0318 	add.w	r3, r7, #24
 8000dfa:	2238      	movs	r2, #56	@ 0x38
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f006 fd0a 	bl	8007818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f003 f8c8 	bl	8003fa8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e20:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e22:	2302      	movs	r3, #2
 8000e24:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e26:	2303      	movs	r3, #3
 8000e28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e2e:	2355      	movs	r3, #85	@ 0x55
 8000e30:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3e:	f107 0318 	add.w	r3, r7, #24
 8000e42:	4618      	mov	r0, r3
 8000e44:	f003 f964 	bl	8004110 <HAL_RCC_OscConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000e4e:	f000 fb5f 	bl	8001510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e52:	230f      	movs	r3, #15
 8000e54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e56:	2303      	movs	r3, #3
 8000e58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2104      	movs	r1, #4
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fc62 	bl	8004734 <HAL_RCC_ClockConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e76:	f000 fb4b 	bl	8001510 <Error_Handler>
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	3750      	adds	r7, #80	@ 0x50
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08c      	sub	sp, #48	@ 0x30
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2220      	movs	r2, #32
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f006 fcbb 	bl	8007818 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ea2:	4b32      	ldr	r3, [pc, #200]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000ea4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ea8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eaa:	4b30      	ldr	r3, [pc, #192]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000eac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000eb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec4:	4b29      	ldr	r3, [pc, #164]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eca:	4b28      	ldr	r3, [pc, #160]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ed0:	4b26      	ldr	r3, [pc, #152]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ed6:	4b25      	ldr	r3, [pc, #148]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000edc:	4b23      	ldr	r3, [pc, #140]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ee2:	4b22      	ldr	r3, [pc, #136]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eea:	4b20      	ldr	r3, [pc, #128]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0c:	4817      	ldr	r0, [pc, #92]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000f0e:	f001 f9f5 	bl	80022fc <HAL_ADC_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f18:	f000 fafa 	bl	8001510 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f24:	4619      	mov	r1, r3
 8000f26:	4811      	ldr	r0, [pc, #68]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000f28:	f002 faba 	bl	80034a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f32:	f000 faed 	bl	8001510 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000f38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f42:	237f      	movs	r3, #127	@ 0x7f
 8000f44:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f46:	2304      	movs	r3, #4
 8000f48:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	@ (8000f6c <MX_ADC1_Init+0xe8>)
 8000f54:	f001 fe0c 	bl	8002b70 <HAL_ADC_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f5e:	f000 fad7 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3730      	adds	r7, #48	@ 0x30
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000002c 	.word	0x2000002c
 8000f70:	04300002 	.word	0x04300002

08000f74 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f78:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <MX_LPUART1_UART_Init+0x8c>)
 8000f7a:	4a22      	ldr	r2, [pc, #136]	@ (8001004 <MX_LPUART1_UART_Init+0x90>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f7e:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <MX_LPUART1_UART_Init+0x8c>)
 8000f80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f84:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <MX_LPUART1_UART_Init+0x8c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <MX_LPUART1_UART_Init+0x8c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <MX_LPUART1_UART_Init+0x8c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <MX_LPUART1_UART_Init+0x8c>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <MX_LPUART1_UART_Init+0x8c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <MX_LPUART1_UART_Init+0x8c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <MX_LPUART1_UART_Init+0x8c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fb0:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <MX_LPUART1_UART_Init+0x8c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000fb6:	4812      	ldr	r0, [pc, #72]	@ (8001000 <MX_LPUART1_UART_Init+0x8c>)
 8000fb8:	f005 fdc0 	bl	8006b3c <HAL_UART_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fc2:	f000 faa5 	bl	8001510 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	480d      	ldr	r0, [pc, #52]	@ (8001000 <MX_LPUART1_UART_Init+0x8c>)
 8000fca:	f006 fb5b 	bl	8007684 <HAL_UARTEx_SetTxFifoThreshold>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000fd4:	f000 fa9c 	bl	8001510 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4809      	ldr	r0, [pc, #36]	@ (8001000 <MX_LPUART1_UART_Init+0x8c>)
 8000fdc:	f006 fb90 	bl	8007700 <HAL_UARTEx_SetRxFifoThreshold>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000fe6:	f000 fa93 	bl	8001510 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_LPUART1_UART_Init+0x8c>)
 8000fec:	f006 fb11 	bl	8007612 <HAL_UARTEx_DisableFifoMode>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000ff6:	f000 fa8b 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000f8 	.word	0x200000f8
 8001004:	40008000 	.word	0x40008000

08001008 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b09c      	sub	sp, #112	@ 0x70
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001028:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
 8001038:	615a      	str	r2, [r3, #20]
 800103a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2234      	movs	r2, #52	@ 0x34
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f006 fbe8 	bl	8007818 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001048:	4b45      	ldr	r3, [pc, #276]	@ (8001160 <MX_TIM1_Init+0x158>)
 800104a:	4a46      	ldr	r2, [pc, #280]	@ (8001164 <MX_TIM1_Init+0x15c>)
 800104c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800104e:	4b44      	ldr	r3, [pc, #272]	@ (8001160 <MX_TIM1_Init+0x158>)
 8001050:	22a9      	movs	r2, #169	@ 0xa9
 8001052:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b42      	ldr	r3, [pc, #264]	@ (8001160 <MX_TIM1_Init+0x158>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800105a:	4b41      	ldr	r3, [pc, #260]	@ (8001160 <MX_TIM1_Init+0x158>)
 800105c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001060:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001062:	4b3f      	ldr	r3, [pc, #252]	@ (8001160 <MX_TIM1_Init+0x158>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001068:	4b3d      	ldr	r3, [pc, #244]	@ (8001160 <MX_TIM1_Init+0x158>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106e:	4b3c      	ldr	r3, [pc, #240]	@ (8001160 <MX_TIM1_Init+0x158>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001074:	483a      	ldr	r0, [pc, #232]	@ (8001160 <MX_TIM1_Init+0x158>)
 8001076:	f003 ffc7 	bl	8005008 <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001080:	f000 fa46 	bl	8001510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001088:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800108a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800108e:	4619      	mov	r1, r3
 8001090:	4833      	ldr	r0, [pc, #204]	@ (8001160 <MX_TIM1_Init+0x158>)
 8001092:	f004 fe05 	bl	8005ca0 <HAL_TIM_ConfigClockSource>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800109c:	f000 fa38 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010a0:	482f      	ldr	r0, [pc, #188]	@ (8001160 <MX_TIM1_Init+0x158>)
 80010a2:	f004 f8f1 	bl	8005288 <HAL_TIM_PWM_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010ac:	f000 fa30 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010b4:	2300      	movs	r3, #0
 80010b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010c0:	4619      	mov	r1, r3
 80010c2:	4827      	ldr	r0, [pc, #156]	@ (8001160 <MX_TIM1_Init+0x158>)
 80010c4:	f005 fbca 	bl	800685c <HAL_TIMEx_MasterConfigSynchronization>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010ce:	f000 fa1f 	bl	8001510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d2:	2360      	movs	r3, #96	@ 0x60
 80010d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010da:	2300      	movs	r3, #0
 80010dc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010de:	2300      	movs	r3, #0
 80010e0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010e2:	2304      	movs	r3, #4
 80010e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010f2:	2200      	movs	r2, #0
 80010f4:	4619      	mov	r1, r3
 80010f6:	481a      	ldr	r0, [pc, #104]	@ (8001160 <MX_TIM1_Init+0x158>)
 80010f8:	f004 fcbe 	bl	8005a78 <HAL_TIM_PWM_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001102:	f000 fa05 	bl	8001510 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800111a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800111e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800112c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001136:	2300      	movs	r3, #0
 8001138:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4807      	ldr	r0, [pc, #28]	@ (8001160 <MX_TIM1_Init+0x158>)
 8001144:	f005 fc20 	bl	8006988 <HAL_TIMEx_ConfigBreakDeadTime>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800114e:	f000 f9df 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001152:	4803      	ldr	r0, [pc, #12]	@ (8001160 <MX_TIM1_Init+0x158>)
 8001154:	f000 fd78 	bl	8001c48 <HAL_TIM_MspPostInit>

}
 8001158:	bf00      	nop
 800115a:	3770      	adds	r7, #112	@ 0x70
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000018c 	.word	0x2000018c
 8001164:	40012c00 	.word	0x40012c00

08001168 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001186:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <MX_TIM3_Init+0x94>)
 8001188:	4a1d      	ldr	r2, [pc, #116]	@ (8001200 <MX_TIM3_Init+0x98>)
 800118a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 800118c:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <MX_TIM3_Init+0x94>)
 800118e:	22a9      	movs	r2, #169	@ 0xa9
 8001190:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <MX_TIM3_Init+0x94>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8001198:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <MX_TIM3_Init+0x94>)
 800119a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800119e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <MX_TIM3_Init+0x94>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <MX_TIM3_Init+0x94>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ac:	4813      	ldr	r0, [pc, #76]	@ (80011fc <MX_TIM3_Init+0x94>)
 80011ae:	f003 ff2b 	bl	8005008 <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011b8:	f000 f9aa 	bl	8001510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <MX_TIM3_Init+0x94>)
 80011ca:	f004 fd69 	bl	8005ca0 <HAL_TIM_ConfigClockSource>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011d4:	f000 f99c 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_TIM3_Init+0x94>)
 80011e6:	f005 fb39 	bl	800685c <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011f0:	f000 f98e 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200001d8 	.word	0x200001d8
 8001200:	40000400 	.word	0x40000400

08001204 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	@ 0x30
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	2224      	movs	r2, #36	@ 0x24
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f006 fb00 	bl	8007818 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001222:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <MX_TIM4_Init+0xa4>)
 8001224:	4a21      	ldr	r2, [pc, #132]	@ (80012ac <MX_TIM4_Init+0xa8>)
 8001226:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <MX_TIM4_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122e:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <MX_TIM4_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001234:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_TIM4_Init+0xa4>)
 8001236:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800123a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <MX_TIM4_Init+0xa4>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <MX_TIM4_Init+0xa4>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001248:	2303      	movs	r3, #3
 800124a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001250:	2301      	movs	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001260:	2301      	movs	r3, #1
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	4619      	mov	r1, r3
 8001272:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <MX_TIM4_Init+0xa4>)
 8001274:	f004 f97c 	bl	8005570 <HAL_TIM_Encoder_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800127e:	f000 f947 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <MX_TIM4_Init+0xa4>)
 8001290:	f005 fae4 	bl	800685c <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800129a:	f000 f939 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3730      	adds	r7, #48	@ 0x30
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000224 	.word	0x20000224
 80012ac:	40000800 	.word	0x40000800

080012b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012b6:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <MX_DMA_Init+0x50>)
 80012b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ba:	4a11      	ldr	r2, [pc, #68]	@ (8001300 <MX_DMA_Init+0x50>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80012c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <MX_DMA_Init+0x50>)
 80012c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <MX_DMA_Init+0x50>)
 80012d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001300 <MX_DMA_Init+0x50>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <MX_DMA_Init+0x50>)
 80012dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	200b      	movs	r0, #11
 80012ec:	f002 fabb 	bl	8003866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012f0:	200b      	movs	r0, #11
 80012f2:	f002 fad2 	bl	800389a <HAL_NVIC_EnableIRQ>

}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000

08001304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	@ 0x28
 8001308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	4b5e      	ldr	r3, [pc, #376]	@ (8001494 <MX_GPIO_Init+0x190>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	4a5d      	ldr	r2, [pc, #372]	@ (8001494 <MX_GPIO_Init+0x190>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001326:	4b5b      	ldr	r3, [pc, #364]	@ (8001494 <MX_GPIO_Init+0x190>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001332:	4b58      	ldr	r3, [pc, #352]	@ (8001494 <MX_GPIO_Init+0x190>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	4a57      	ldr	r2, [pc, #348]	@ (8001494 <MX_GPIO_Init+0x190>)
 8001338:	f043 0320 	orr.w	r3, r3, #32
 800133c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133e:	4b55      	ldr	r3, [pc, #340]	@ (8001494 <MX_GPIO_Init+0x190>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	f003 0320 	and.w	r3, r3, #32
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b52      	ldr	r3, [pc, #328]	@ (8001494 <MX_GPIO_Init+0x190>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	4a51      	ldr	r2, [pc, #324]	@ (8001494 <MX_GPIO_Init+0x190>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001356:	4b4f      	ldr	r3, [pc, #316]	@ (8001494 <MX_GPIO_Init+0x190>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	4b4c      	ldr	r3, [pc, #304]	@ (8001494 <MX_GPIO_Init+0x190>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4a4b      	ldr	r2, [pc, #300]	@ (8001494 <MX_GPIO_Init+0x190>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4b49      	ldr	r3, [pc, #292]	@ (8001494 <MX_GPIO_Init+0x190>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direaction_motor_GPIO_Port, Direaction_motor_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2102      	movs	r1, #2
 800137e:	4846      	ldr	r0, [pc, #280]	@ (8001498 <MX_GPIO_Init+0x194>)
 8001380:	f002 fde2 	bl	8003f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800138a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138e:	f002 fddb 	bl	8003f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	f240 4116 	movw	r1, #1046	@ 0x416
 8001398:	4840      	ldr	r0, [pc, #256]	@ (800149c <MX_GPIO_Init+0x198>)
 800139a:	f002 fdd5 	bl	8003f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800139e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4838      	ldr	r0, [pc, #224]	@ (8001498 <MX_GPIO_Init+0x194>)
 80013b6:	f002 fc45 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 80013ba:	2302      	movs	r3, #2
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4831      	ldr	r0, [pc, #196]	@ (8001498 <MX_GPIO_Init+0x194>)
 80013d2:	f002 fc37 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 80013d6:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f2:	f002 fc27 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Reed_switch_pull_Pin;
 80013f6:	23b0      	movs	r3, #176	@ 0xb0
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4823      	ldr	r0, [pc, #140]	@ (8001498 <MX_GPIO_Init+0x194>)
 800140a:	f002 fc1b 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 800140e:	f240 4316 	movw	r3, #1046	@ 0x416
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	481d      	ldr	r0, [pc, #116]	@ (800149c <MX_GPIO_Init+0x198>)
 8001428:	f002 fc0c 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|Emergency_switch_Pin;
 800142c:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001432:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	4816      	ldr	r0, [pc, #88]	@ (800149c <MX_GPIO_Init+0x198>)
 8001444:	f002 fbfe 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 8001448:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001460:	f002 fbf0 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : joy_switch_1_Pin */
  GPIO_InitStruct.Pin = joy_switch_1_Pin;
 8001464:	2320      	movs	r3, #32
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(joy_switch_1_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4809      	ldr	r0, [pc, #36]	@ (800149c <MX_GPIO_Init+0x198>)
 8001478:	f002 fbe4 	bl	8003c44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2100      	movs	r1, #0
 8001480:	2028      	movs	r0, #40	@ 0x28
 8001482:	f002 f9f0 	bl	8003866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001486:	2028      	movs	r0, #40	@ 0x28
 8001488:	f002 fa07 	bl	800389a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	@ 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000
 8001498:	48000800 	.word	0x48000800
 800149c:	48000400 	.word	0x48000400

080014a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d10d      	bne.n	80014cc <HAL_TIM_PeriodElapsedCallback+0x2c>
		Update_qei(&encoder, &htim4);
 80014b0:	4909      	ldr	r1, [pc, #36]	@ (80014d8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80014b2:	480a      	ldr	r0, [pc, #40]	@ (80014dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80014b4:	f000 f904 	bl	80016c0 <Update_qei>
		Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, pwm_signal);
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80014ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2302      	movs	r3, #2
 80014c2:	4a08      	ldr	r2, [pc, #32]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80014c4:	2100      	movs	r1, #0
 80014c6:	4808      	ldr	r0, [pc, #32]	@ (80014e8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80014c8:	f000 f828 	bl	800151c <Update_pwm>
	}
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200001d8 	.word	0x200001d8
 80014d8:	20000224 	.word	0x20000224
 80014dc:	20000278 	.word	0x20000278
 80014e0:	20000270 	.word	0x20000270
 80014e4:	48000800 	.word	0x48000800
 80014e8:	2000018c 	.word	0x2000018c

080014ec <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014fc:	d102      	bne.n	8001504 <HAL_GPIO_EXTI_Callback+0x18>
		Reset_qei(&encoder);
 80014fe:	4803      	ldr	r0, [pc, #12]	@ (800150c <HAL_GPIO_EXTI_Callback+0x20>)
 8001500:	f000 f9f0 	bl	80018e4 <Reset_qei>
	}
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000278 	.word	0x20000278

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
}
 8001516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <Error_Handler+0x8>

0800151c <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 800151c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001520:	b08b      	sub	sp, #44	@ 0x2c
 8001522:	af00      	add	r7, sp, #0
 8001524:	6278      	str	r0, [r7, #36]	@ 0x24
 8001526:	61fa      	str	r2, [r7, #28]
 8001528:	461a      	mov	r2, r3
 800152a:	460b      	mov	r3, r1
 800152c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800152e:	4613      	mov	r3, r2
 8001530:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 8001532:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001534:	2b00      	cmp	r3, #0
 8001536:	d111      	bne.n	800155c <Update_pwm+0x40>
 8001538:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800153a:	f7fe ffbf 	bl	80004bc <__aeabi_i2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	613a      	str	r2, [r7, #16]
 8001544:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154c:	681c      	ldr	r4, [r3, #0]
 800154e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001552:	f7ff fa2f 	bl	80009b4 <__aeabi_d2uiz>
 8001556:	4603      	mov	r3, r0
 8001558:	6363      	str	r3, [r4, #52]	@ 0x34
 800155a:	e061      	b.n	8001620 <Update_pwm+0x104>
 800155c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800155e:	2b04      	cmp	r3, #4
 8001560:	d111      	bne.n	8001586 <Update_pwm+0x6a>
 8001562:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001564:	f7fe ffaa 	bl	80004bc <__aeabi_i2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	60ba      	str	r2, [r7, #8]
 800156e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001576:	681c      	ldr	r4, [r3, #0]
 8001578:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800157c:	f7ff fa1a 	bl	80009b4 <__aeabi_d2uiz>
 8001580:	4603      	mov	r3, r0
 8001582:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001584:	e04c      	b.n	8001620 <Update_pwm+0x104>
 8001586:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001588:	2b08      	cmp	r3, #8
 800158a:	d111      	bne.n	80015b0 <Update_pwm+0x94>
 800158c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800158e:	f7fe ff95 	bl	80004bc <__aeabi_i2d>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	603a      	str	r2, [r7, #0]
 8001598:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	681c      	ldr	r4, [r3, #0]
 80015a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015a6:	f7ff fa05 	bl	80009b4 <__aeabi_d2uiz>
 80015aa:	4603      	mov	r3, r0
 80015ac:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80015ae:	e037      	b.n	8001620 <Update_pwm+0x104>
 80015b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80015b2:	2b0c      	cmp	r3, #12
 80015b4:	d110      	bne.n	80015d8 <Update_pwm+0xbc>
 80015b6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80015b8:	f7fe ff80 	bl	80004bc <__aeabi_i2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4615      	mov	r5, r2
 80015c2:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c8:	681c      	ldr	r4, [r3, #0]
 80015ca:	4628      	mov	r0, r5
 80015cc:	4631      	mov	r1, r6
 80015ce:	f7ff f9f1 	bl	80009b4 <__aeabi_d2uiz>
 80015d2:	4603      	mov	r3, r0
 80015d4:	6423      	str	r3, [r4, #64]	@ 0x40
 80015d6:	e023      	b.n	8001620 <Update_pwm+0x104>
 80015d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80015da:	2b10      	cmp	r3, #16
 80015dc:	d110      	bne.n	8001600 <Update_pwm+0xe4>
 80015de:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80015e0:	f7fe ff6c 	bl	80004bc <__aeabi_i2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4692      	mov	sl, r2
 80015ea:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	681c      	ldr	r4, [r3, #0]
 80015f2:	4650      	mov	r0, sl
 80015f4:	4659      	mov	r1, fp
 80015f6:	f7ff f9dd 	bl	80009b4 <__aeabi_d2uiz>
 80015fa:	4603      	mov	r3, r0
 80015fc:	64a3      	str	r3, [r4, #72]	@ 0x48
 80015fe:	e00f      	b.n	8001620 <Update_pwm+0x104>
 8001600:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001602:	f7fe ff5b 	bl	80004bc <__aeabi_i2d>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4690      	mov	r8, r2
 800160c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	681c      	ldr	r4, [r3, #0]
 8001614:	4640      	mov	r0, r8
 8001616:	4649      	mov	r1, r9
 8001618:	f7ff f9cc 	bl	80009b4 <__aeabi_d2uiz>
 800161c:	4603      	mov	r3, r0
 800161e:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 8001620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001622:	2b00      	cmp	r3, #0
 8001624:	da06      	bge.n	8001634 <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 8001626:	8c3b      	ldrh	r3, [r7, #32]
 8001628:	2201      	movs	r2, #1
 800162a:	4619      	mov	r1, r3
 800162c:	69f8      	ldr	r0, [r7, #28]
 800162e:	f002 fc8b 	bl	8003f48 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
	}
}
 8001632:	e005      	b.n	8001640 <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 8001634:	8c3b      	ldrh	r3, [r7, #32]
 8001636:	2200      	movs	r2, #0
 8001638:	4619      	mov	r1, r3
 800163a:	69f8      	ldr	r0, [r7, #28]
 800163c:	f002 fc84 	bl	8003f48 <HAL_GPIO_WritePin>
}
 8001640:	bf00      	nop
 8001642:	372c      	adds	r7, #44	@ 0x2c
 8001644:	46bd      	mov	sp, r7
 8001646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800164a <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 800167c:	68f9      	ldr	r1, [r7, #12]
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
	qei -> pps = 0;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> rpm = 0;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei -> radps =0;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 80016c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	0fd9      	lsrs	r1, r3, #31
 80016f0:	440b      	add	r3, r1
 80016f2:	105b      	asrs	r3, r3, #1
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dd06      	ble.n	8001706 <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695a      	ldr	r2, [r3, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	1ad2      	subs	r2, r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	425b      	negs	r3, r3
 8001710:	0fd9      	lsrs	r1, r3, #31
 8001712:	440b      	add	r3, r1
 8001714:	105b      	asrs	r3, r3, #1
 8001716:	429a      	cmp	r2, r3
 8001718:	da06      	bge.n	8001728 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	441a      	add	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	615a      	str	r2, [r3, #20]
	}
	// Update velocity at difference unit
	qei -> pps = (float)qei -> diff_counter_value * (float)qei -> freq;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	qei -> radps = qei -> pps * 2.0 * M_PI / (float)(qei -> ppr);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fec6 	bl	80004e0 <__aeabi_f2d>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	f7fe fd64 	bl	8000224 <__adddf3>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	a35c      	add	r3, pc, #368	@ (adr r3, 80018d8 <Update_qei+0x218>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7fe ff11 	bl	8000590 <__aeabi_dmul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4692      	mov	sl, r2
 8001774:	469b      	mov	fp, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001782:	ee17 0a90 	vmov	r0, s15
 8001786:	f7fe feab 	bl	80004e0 <__aeabi_f2d>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4650      	mov	r0, sl
 8001790:	4659      	mov	r1, fp
 8001792:	f7ff f827 	bl	80007e4 <__aeabi_ddiv>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f7ff f929 	bl	80009f4 <__aeabi_d2f>
 80017a2:	4602      	mov	r2, r0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	631a      	str	r2, [r3, #48]	@ 0x30
	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fe97 	bl	80004e0 <__aeabi_f2d>
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b4a      	ldr	r3, [pc, #296]	@ (80018e0 <Update_qei+0x220>)
 80017b8:	f7fe feea 	bl	8000590 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4692      	mov	sl, r2
 80017c2:	469b      	mov	fp, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d0:	ee17 0a90 	vmov	r0, s15
 80017d4:	f7fe fe84 	bl	80004e0 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4650      	mov	r0, sl
 80017de:	4659      	mov	r1, fp
 80017e0:	f7ff f800 	bl	80007e4 <__aeabi_ddiv>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff f902 	bl	80009f4 <__aeabi_d2f>
 80017f0:	4602      	mov	r2, r0
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	62da      	str	r2, [r3, #44]	@ 0x2c
	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	6949      	ldr	r1, [r1, #20]
 8001800:	17c8      	asrs	r0, r1, #31
 8001802:	460c      	mov	r4, r1
 8001804:	4605      	mov	r5, r0
 8001806:	eb12 0804 	adds.w	r8, r2, r4
 800180a:	eb43 0905 	adc.w	r9, r3, r5
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	e9c3 8906 	strd	r8, r9, [r3, #24]
	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe61 	bl	80004e0 <__aeabi_f2d>
 800181e:	4604      	mov	r4, r0
 8001820:	460d      	mov	r5, r1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800182e:	ee17 0a90 	vmov	r0, s15
 8001832:	f7fe fe55 	bl	80004e0 <__aeabi_f2d>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	f7fe fcf3 	bl	8000224 <__adddf3>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	a324      	add	r3, pc, #144	@ (adr r3, 80018d8 <Update_qei+0x218>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe fea0 	bl	8000590 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4690      	mov	r8, r2
 8001856:	4699      	mov	r9, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001864:	ee17 0a90 	vmov	r0, s15
 8001868:	f7fe fe3a 	bl	80004e0 <__aeabi_f2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4640      	mov	r0, r8
 8001872:	4649      	mov	r1, r9
 8001874:	f7fe ffb6 	bl	80007e4 <__aeabi_ddiv>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4620      	mov	r0, r4
 800187e:	4629      	mov	r1, r5
 8001880:	f7fe fcd0 	bl	8000224 <__adddf3>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff f8b2 	bl	80009f4 <__aeabi_d2f>
 8001890:	4602      	mov	r2, r0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	ed93 7a08 	vldr	s14, [r3, #32]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018b4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80018b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	edc3 7a08 	vstr	s15, [r3, #32]
	// Update acceleration at difference

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	611a      	str	r2, [r3, #16]

}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018d4:	f3af 8000 	nop.w
 80018d8:	54442d18 	.word	0x54442d18
 80018dc:	400921fb 	.word	0x400921fb
 80018e0:	404e0000 	.word	0x404e0000

080018e4 <Reset_qei>:

void Reset_qei(QEI* qei){
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	qei -> counter_value[NEW] = 0;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
	qei -> pps = 0;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> rpm = 0;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei -> radps =0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <HAL_MspInit+0x44>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800194a:	4a0e      	ldr	r2, [pc, #56]	@ (8001984 <HAL_MspInit+0x44>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6613      	str	r3, [r2, #96]	@ 0x60
 8001952:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <HAL_MspInit+0x44>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_MspInit+0x44>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001962:	4a08      	ldr	r2, [pc, #32]	@ (8001984 <HAL_MspInit+0x44>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001968:	6593      	str	r3, [r2, #88]	@ 0x58
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <HAL_MspInit+0x44>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001976:	f002 fbbb 	bl	80040f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000

08001988 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b09e      	sub	sp, #120	@ 0x78
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	2254      	movs	r2, #84	@ 0x54
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f005 ff35 	bl	8007818 <memset>
  if(hadc->Instance==ADC1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019b6:	d167      	bne.n	8001a88 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80019b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80019be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80019c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 f8cf 	bl	8004b6c <HAL_RCCEx_PeriphCLKConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80019d4:	f7ff fd9c 	bl	8001510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80019d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a90 <HAL_ADC_MspInit+0x108>)
 80019da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019dc:	4a2c      	ldr	r2, [pc, #176]	@ (8001a90 <HAL_ADC_MspInit+0x108>)
 80019de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <HAL_ADC_MspInit+0x108>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	4b27      	ldr	r3, [pc, #156]	@ (8001a90 <HAL_ADC_MspInit+0x108>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f4:	4a26      	ldr	r2, [pc, #152]	@ (8001a90 <HAL_ADC_MspInit+0x108>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019fc:	4b24      	ldr	r3, [pc, #144]	@ (8001a90 <HAL_ADC_MspInit+0x108>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1e:	f002 f911 	bl	8003c44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a22:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <HAL_ADC_MspInit+0x10c>)
 8001a24:	4a1c      	ldr	r2, [pc, #112]	@ (8001a98 <HAL_ADC_MspInit+0x110>)
 8001a26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a28:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <HAL_ADC_MspInit+0x10c>)
 8001a2a:	2205      	movs	r2, #5
 8001a2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a2e:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <HAL_ADC_MspInit+0x10c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a34:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <HAL_ADC_MspInit+0x10c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a3a:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <HAL_ADC_MspInit+0x10c>)
 8001a3c:	2280      	movs	r2, #128	@ 0x80
 8001a3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a40:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <HAL_ADC_MspInit+0x10c>)
 8001a42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_ADC_MspInit+0x10c>)
 8001a4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a4e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a50:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <HAL_ADC_MspInit+0x10c>)
 8001a52:	2220      	movs	r2, #32
 8001a54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a56:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <HAL_ADC_MspInit+0x10c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a5c:	480d      	ldr	r0, [pc, #52]	@ (8001a94 <HAL_ADC_MspInit+0x10c>)
 8001a5e:	f001 ff37 	bl	80038d0 <HAL_DMA_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001a68:	f7ff fd52 	bl	8001510 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a09      	ldr	r2, [pc, #36]	@ (8001a94 <HAL_ADC_MspInit+0x10c>)
 8001a70:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a72:	4a08      	ldr	r2, [pc, #32]	@ (8001a94 <HAL_ADC_MspInit+0x10c>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2012      	movs	r0, #18
 8001a7e:	f001 fef2 	bl	8003866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a82:	2012      	movs	r0, #18
 8001a84:	f001 ff09 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a88:	bf00      	nop
 8001a8a:	3778      	adds	r7, #120	@ 0x78
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	20000098 	.word	0x20000098
 8001a98:	40020008 	.word	0x40020008

08001a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b09e      	sub	sp, #120	@ 0x78
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	2254      	movs	r2, #84	@ 0x54
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f005 feab 	bl	8007818 <memset>
  if(huart->Instance==LPUART1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b44 <HAL_UART_MspInit+0xa8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d136      	bne.n	8001b3a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001acc:	2320      	movs	r3, #32
 8001ace:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 f847 	bl	8004b6c <HAL_RCCEx_PeriphCLKConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ae4:	f7ff fd14 	bl	8001510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ae8:	4b17      	ldr	r3, [pc, #92]	@ (8001b48 <HAL_UART_MspInit+0xac>)
 8001aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aec:	4a16      	ldr	r2, [pc, #88]	@ (8001b48 <HAL_UART_MspInit+0xac>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001af4:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <HAL_UART_MspInit+0xac>)
 8001af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b00:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <HAL_UART_MspInit+0xac>)
 8001b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b04:	4a10      	ldr	r2, [pc, #64]	@ (8001b48 <HAL_UART_MspInit+0xac>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <HAL_UART_MspInit+0xac>)
 8001b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001b18:	230c      	movs	r3, #12
 8001b1a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001b28:	230c      	movs	r3, #12
 8001b2a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b30:	4619      	mov	r1, r3
 8001b32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b36:	f002 f885 	bl	8003c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001b3a:	bf00      	nop
 8001b3c:	3778      	adds	r7, #120	@ 0x78
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40008000 	.word	0x40008000
 8001b48:	40021000 	.word	0x40021000

08001b4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a16      	ldr	r2, [pc, #88]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x68>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d10c      	bne.n	8001b78 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b5e:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x6c>)
 8001b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b62:	4a15      	ldr	r2, [pc, #84]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x6c>)
 8001b64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b68:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b6a:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x6c>)
 8001b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b76:	e018      	b.n	8001baa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bbc <HAL_TIM_Base_MspInit+0x70>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d113      	bne.n	8001baa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b82:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x6c>)
 8001b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b86:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x6c>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x6c>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	201d      	movs	r0, #29
 8001ba0:	f001 fe61 	bl	8003866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ba4:	201d      	movs	r0, #29
 8001ba6:	f001 fe78 	bl	800389a <HAL_NVIC_EnableIRQ>
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40000400 	.word	0x40000400

08001bc0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	@ 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a18      	ldr	r2, [pc, #96]	@ (8001c40 <HAL_TIM_Encoder_MspInit+0x80>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d129      	bne.n	8001c36 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001be2:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <HAL_TIM_Encoder_MspInit+0x84>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be6:	4a17      	ldr	r2, [pc, #92]	@ (8001c44 <HAL_TIM_Encoder_MspInit+0x84>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <HAL_TIM_Encoder_MspInit+0x84>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_TIM_Encoder_MspInit+0x84>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfe:	4a11      	ldr	r2, [pc, #68]	@ (8001c44 <HAL_TIM_Encoder_MspInit+0x84>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c06:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <HAL_TIM_Encoder_MspInit+0x84>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8001c12:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001c24:	230a      	movs	r3, #10
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c32:	f002 f807 	bl	8003c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	@ 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40000800 	.word	0x40000800
 8001c44:	40021000 	.word	0x40021000

08001c48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a11      	ldr	r2, [pc, #68]	@ (8001cac <HAL_TIM_MspPostInit+0x64>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d11b      	bne.n	8001ca2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6a:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <HAL_TIM_MspPostInit+0x68>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6e:	4a10      	ldr	r2, [pc, #64]	@ (8001cb0 <HAL_TIM_MspPostInit+0x68>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c76:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <HAL_TIM_MspPostInit+0x68>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 8001c82:	2301      	movs	r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 8001c96:	f107 030c 	add.w	r3, r7, #12
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	@ (8001cb4 <HAL_TIM_MspPostInit+0x6c>)
 8001c9e:	f001 ffd1 	bl	8003c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ca2:	bf00      	nop
 8001ca4:	3720      	adds	r7, #32
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	48000800 	.word	0x48000800

08001cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <NMI_Handler+0x4>

08001cc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <HardFault_Handler+0x4>

08001cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <MemManage_Handler+0x4>

08001cd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <BusFault_Handler+0x4>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <UsageFault_Handler+0x4>

08001ce0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d0e:	f000 f8bf 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d1c:	4802      	ldr	r0, [pc, #8]	@ (8001d28 <DMA1_Channel1_IRQHandler+0x10>)
 8001d1e:	f001 fe7f 	bl	8003a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000098 	.word	0x20000098

08001d2c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d30:	4802      	ldr	r0, [pc, #8]	@ (8001d3c <ADC1_2_IRQHandler+0x10>)
 8001d32:	f000 fc9f 	bl	8002674 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000002c 	.word	0x2000002c

08001d40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d44:	4802      	ldr	r0, [pc, #8]	@ (8001d50 <TIM3_IRQHandler+0x10>)
 8001d46:	f003 fd47 	bl	80057d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200001d8 	.word	0x200001d8

08001d54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_Pin);
 8001d58:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001d5c:	f002 f90c 	bl	8003f78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001d60:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d64:	f002 f908 	bl	8003f78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 8001d68:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001d6c:	f002 f904 	bl	8003f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <SystemInit+0x20>)
 8001d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7e:	4a05      	ldr	r2, [pc, #20]	@ (8001d94 <SystemInit+0x20>)
 8001d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d98:	480d      	ldr	r0, [pc, #52]	@ (8001dd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d9c:	f7ff ffea 	bl	8001d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da0:	480c      	ldr	r0, [pc, #48]	@ (8001dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001da2:	490d      	ldr	r1, [pc, #52]	@ (8001dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001da4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ddc <LoopForever+0xe>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001da8:	e002      	b.n	8001db0 <LoopCopyDataInit>

08001daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dae:	3304      	adds	r3, #4

08001db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db4:	d3f9      	bcc.n	8001daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001db8:	4c0a      	ldr	r4, [pc, #40]	@ (8001de4 <LoopForever+0x16>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dbc:	e001      	b.n	8001dc2 <LoopFillZerobss>

08001dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc0:	3204      	adds	r2, #4

08001dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc4:	d3fb      	bcc.n	8001dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f005 fd2f 	bl	8007828 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dca:	f7fe ffdb 	bl	8000d84 <main>

08001dce <LoopForever>:

LoopForever:
    b LoopForever
 8001dce:	e7fe      	b.n	8001dce <LoopForever>
  ldr   r0, =_estack
 8001dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ddc:	080078d8 	.word	0x080078d8
  ldr r2, =_sbss
 8001de0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001de4:	200002b4 	.word	0x200002b4

08001de8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC3_IRQHandler>

08001dea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f001 fd2b 	bl	8003850 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f000 f80e 	bl	8001e1c <HAL_InitTick>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	71fb      	strb	r3, [r7, #7]
 8001e0a:	e001      	b.n	8001e10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e0c:	f7ff fd98 	bl	8001940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e10:	79fb      	ldrb	r3, [r7, #7]

}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e28:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <HAL_InitTick+0x68>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d022      	beq.n	8001e76 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e30:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <HAL_InitTick+0x6c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <HAL_InitTick+0x68>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f001 fd36 	bl	80038b6 <HAL_SYSTICK_Config>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10f      	bne.n	8001e70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b0f      	cmp	r3, #15
 8001e54:	d809      	bhi.n	8001e6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e56:	2200      	movs	r2, #0
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5e:	f001 fd02 	bl	8003866 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e62:	4a0a      	ldr	r2, [pc, #40]	@ (8001e8c <HAL_InitTick+0x70>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e007      	b.n	8001e7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	e004      	b.n	8001e7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
 8001e74:	e001      	b.n	8001e7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000008 	.word	0x20000008
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000004 	.word	0x20000004

08001e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <HAL_IncTick+0x1c>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a03      	ldr	r2, [pc, #12]	@ (8001eac <HAL_IncTick+0x1c>)
 8001ea0:	6013      	str	r3, [r2, #0]
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	200002b0 	.word	0x200002b0
 8001eb0:	20000008 	.word	0x20000008

08001eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <HAL_GetTick+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200002b0 	.word	0x200002b0

08001ecc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3360      	adds	r3, #96	@ 0x60
 8001f46:	461a      	mov	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <LL_ADC_SetOffset+0x44>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f6c:	bf00      	nop
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	03fff000 	.word	0x03fff000

08001f7c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3360      	adds	r3, #96	@ 0x60
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3360      	adds	r3, #96	@ 0x60
 8001fb8:	461a      	mov	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fd2:	bf00      	nop
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b087      	sub	sp, #28
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3360      	adds	r3, #96	@ 0x60
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	431a      	orrs	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002008:	bf00      	nop
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3360      	adds	r3, #96	@ 0x60
 8002024:	461a      	mov	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	431a      	orrs	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800203e:	bf00      	nop
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	615a      	str	r2, [r3, #20]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002096:	b480      	push	{r7}
 8002098:	b087      	sub	sp, #28
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3330      	adds	r3, #48	@ 0x30
 80020a6:	461a      	mov	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	4413      	add	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	211f      	movs	r1, #31
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	401a      	ands	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	0e9b      	lsrs	r3, r3, #26
 80020ce:	f003 011f 	and.w	r1, r3, #31
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	431a      	orrs	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020e2:	bf00      	nop
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3314      	adds	r3, #20
 8002124:	461a      	mov	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	0e5b      	lsrs	r3, r3, #25
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	4413      	add	r3, r2
 8002132:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	0d1b      	lsrs	r3, r3, #20
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	2107      	movs	r1, #7
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	401a      	ands	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	0d1b      	lsrs	r3, r3, #20
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	431a      	orrs	r2, r3
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002184:	43db      	mvns	r3, r3
 8002186:	401a      	ands	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0318 	and.w	r3, r3, #24
 800218e:	4908      	ldr	r1, [pc, #32]	@ (80021b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002190:	40d9      	lsrs	r1, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	400b      	ands	r3, r1
 8002196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219a:	431a      	orrs	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	0007ffff 	.word	0x0007ffff

080021b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 031f 	and.w	r3, r3, #31
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80021fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6093      	str	r3, [r2, #8]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002224:	d101      	bne.n	800222a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002248:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800224c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002270:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002274:	d101      	bne.n	800227a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <LL_ADC_IsEnabled+0x18>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <LL_ADC_IsEnabled+0x1a>
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d101      	bne.n	80022c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d101      	bne.n	80022ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b089      	sub	sp, #36	@ 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e1a9      	b.n	800266a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff fb2f 	bl	8001988 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff67 	bl	8002210 <LL_ADC_IsDeepPowerDownEnabled>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff4d 	bl	80021ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff82 	bl	8002260 <LL_ADC_IsInternalRegulatorEnabled>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d115      	bne.n	800238e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff66 	bl	8002238 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800236c:	4b9c      	ldr	r3, [pc, #624]	@ (80025e0 <HAL_ADC_Init+0x2e4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	4a9c      	ldr	r2, [pc, #624]	@ (80025e4 <HAL_ADC_Init+0x2e8>)
 8002374:	fba2 2303 	umull	r2, r3, r2, r3
 8002378:	099b      	lsrs	r3, r3, #6
 800237a:	3301      	adds	r3, #1
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002380:	e002      	b.n	8002388 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3b01      	subs	r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f9      	bne.n	8002382 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff64 	bl	8002260 <LL_ADC_IsInternalRegulatorEnabled>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10d      	bne.n	80023ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a2:	f043 0210 	orr.w	r2, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ae:	f043 0201 	orr.w	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff75 	bl	80022ae <LL_ADC_REG_IsConversionOngoing>
 80023c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f040 8142 	bne.w	8002658 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 813e 	bne.w	8002658 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023e4:	f043 0202 	orr.w	r2, r3, #2
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff49 	bl	8002288 <LL_ADC_IsEnabled>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d141      	bne.n	8002480 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002404:	d004      	beq.n	8002410 <HAL_ADC_Init+0x114>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a77      	ldr	r2, [pc, #476]	@ (80025e8 <HAL_ADC_Init+0x2ec>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d10f      	bne.n	8002430 <HAL_ADC_Init+0x134>
 8002410:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002414:	f7ff ff38 	bl	8002288 <LL_ADC_IsEnabled>
 8002418:	4604      	mov	r4, r0
 800241a:	4873      	ldr	r0, [pc, #460]	@ (80025e8 <HAL_ADC_Init+0x2ec>)
 800241c:	f7ff ff34 	bl	8002288 <LL_ADC_IsEnabled>
 8002420:	4603      	mov	r3, r0
 8002422:	4323      	orrs	r3, r4
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	e012      	b.n	8002456 <HAL_ADC_Init+0x15a>
 8002430:	486e      	ldr	r0, [pc, #440]	@ (80025ec <HAL_ADC_Init+0x2f0>)
 8002432:	f7ff ff29 	bl	8002288 <LL_ADC_IsEnabled>
 8002436:	4604      	mov	r4, r0
 8002438:	486d      	ldr	r0, [pc, #436]	@ (80025f0 <HAL_ADC_Init+0x2f4>)
 800243a:	f7ff ff25 	bl	8002288 <LL_ADC_IsEnabled>
 800243e:	4603      	mov	r3, r0
 8002440:	431c      	orrs	r4, r3
 8002442:	486c      	ldr	r0, [pc, #432]	@ (80025f4 <HAL_ADC_Init+0x2f8>)
 8002444:	f7ff ff20 	bl	8002288 <LL_ADC_IsEnabled>
 8002448:	4603      	mov	r3, r0
 800244a:	4323      	orrs	r3, r4
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d012      	beq.n	8002480 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002462:	d004      	beq.n	800246e <HAL_ADC_Init+0x172>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a5f      	ldr	r2, [pc, #380]	@ (80025e8 <HAL_ADC_Init+0x2ec>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d101      	bne.n	8002472 <HAL_ADC_Init+0x176>
 800246e:	4a62      	ldr	r2, [pc, #392]	@ (80025f8 <HAL_ADC_Init+0x2fc>)
 8002470:	e000      	b.n	8002474 <HAL_ADC_Init+0x178>
 8002472:	4a62      	ldr	r2, [pc, #392]	@ (80025fc <HAL_ADC_Init+0x300>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f7ff fd26 	bl	8001ecc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7f5b      	ldrb	r3, [r3, #29]
 8002484:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800248a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002490:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002496:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800249e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d106      	bne.n	80024bc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b2:	3b01      	subs	r3, #1
 80024b4:	045b      	lsls	r3, r3, #17
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	4b48      	ldr	r3, [pc, #288]	@ (8002600 <HAL_ADC_Init+0x304>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	69b9      	ldr	r1, [r7, #24]
 80024e8:	430b      	orrs	r3, r1
 80024ea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fee4 	bl	80022d4 <LL_ADC_INJ_IsConversionOngoing>
 800250c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d17f      	bne.n	8002614 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d17c      	bne.n	8002614 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800251e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002526:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002536:	f023 0302 	bic.w	r3, r3, #2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	69b9      	ldr	r1, [r7, #24]
 8002540:	430b      	orrs	r3, r1
 8002542:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d017      	beq.n	800257c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800255a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002564:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002568:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6911      	ldr	r1, [r2, #16]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	430b      	orrs	r3, r1
 8002576:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800257a:	e013      	b.n	80025a4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800258a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800259c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025a0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d12a      	bne.n	8002604 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025c4:	4311      	orrs	r1, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80025ca:	4311      	orrs	r1, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025d0:	430a      	orrs	r2, r1
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	611a      	str	r2, [r3, #16]
 80025de:	e019      	b.n	8002614 <HAL_ADC_Init+0x318>
 80025e0:	20000000 	.word	0x20000000
 80025e4:	053e2d63 	.word	0x053e2d63
 80025e8:	50000100 	.word	0x50000100
 80025ec:	50000400 	.word	0x50000400
 80025f0:	50000500 	.word	0x50000500
 80025f4:	50000600 	.word	0x50000600
 80025f8:	50000300 	.word	0x50000300
 80025fc:	50000700 	.word	0x50000700
 8002600:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0201 	bic.w	r2, r2, #1
 8002612:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d10c      	bne.n	8002636 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f023 010f 	bic.w	r1, r3, #15
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	1e5a      	subs	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	631a      	str	r2, [r3, #48]	@ 0x30
 8002634:	e007      	b.n	8002646 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 020f 	bic.w	r2, r2, #15
 8002644:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	f023 0303 	bic.w	r3, r3, #3
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002656:	e007      	b.n	8002668 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265c:	f043 0210 	orr.w	r2, r3, #16
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002668:	7ffb      	ldrb	r3, [r7, #31]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3724      	adds	r7, #36	@ 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd90      	pop	{r4, r7, pc}
 8002672:	bf00      	nop

08002674 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	@ 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002698:	d004      	beq.n	80026a4 <HAL_ADC_IRQHandler+0x30>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a8e      	ldr	r2, [pc, #568]	@ (80028d8 <HAL_ADC_IRQHandler+0x264>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d101      	bne.n	80026a8 <HAL_ADC_IRQHandler+0x34>
 80026a4:	4b8d      	ldr	r3, [pc, #564]	@ (80028dc <HAL_ADC_IRQHandler+0x268>)
 80026a6:	e000      	b.n	80026aa <HAL_ADC_IRQHandler+0x36>
 80026a8:	4b8d      	ldr	r3, [pc, #564]	@ (80028e0 <HAL_ADC_IRQHandler+0x26c>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fd82 	bl	80021b4 <LL_ADC_GetMultimode>
 80026b0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d017      	beq.n	80026ec <HAL_ADC_IRQHandler+0x78>
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d012      	beq.n	80026ec <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fed4 	bl	800348c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2202      	movs	r2, #2
 80026ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d004      	beq.n	8002700 <HAL_ADC_IRQHandler+0x8c>
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10b      	bne.n	8002718 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8094 	beq.w	8002834 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 808e 	beq.w	8002834 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002728:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fc9b 	bl	8002070 <LL_ADC_REG_IsTriggerSourceSWStart>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d072      	beq.n	8002826 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a64      	ldr	r2, [pc, #400]	@ (80028d8 <HAL_ADC_IRQHandler+0x264>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d009      	beq.n	800275e <HAL_ADC_IRQHandler+0xea>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a65      	ldr	r2, [pc, #404]	@ (80028e4 <HAL_ADC_IRQHandler+0x270>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d002      	beq.n	800275a <HAL_ADC_IRQHandler+0xe6>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	e003      	b.n	8002762 <HAL_ADC_IRQHandler+0xee>
 800275a:	4b63      	ldr	r3, [pc, #396]	@ (80028e8 <HAL_ADC_IRQHandler+0x274>)
 800275c:	e001      	b.n	8002762 <HAL_ADC_IRQHandler+0xee>
 800275e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	4293      	cmp	r3, r2
 8002768:	d008      	beq.n	800277c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2b05      	cmp	r3, #5
 8002774:	d002      	beq.n	800277c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b09      	cmp	r3, #9
 800277a:	d104      	bne.n	8002786 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	623b      	str	r3, [r7, #32]
 8002784:	e014      	b.n	80027b0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a53      	ldr	r2, [pc, #332]	@ (80028d8 <HAL_ADC_IRQHandler+0x264>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d009      	beq.n	80027a4 <HAL_ADC_IRQHandler+0x130>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a53      	ldr	r2, [pc, #332]	@ (80028e4 <HAL_ADC_IRQHandler+0x270>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d002      	beq.n	80027a0 <HAL_ADC_IRQHandler+0x12c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	e003      	b.n	80027a8 <HAL_ADC_IRQHandler+0x134>
 80027a0:	4b51      	ldr	r3, [pc, #324]	@ (80028e8 <HAL_ADC_IRQHandler+0x274>)
 80027a2:	e001      	b.n	80027a8 <HAL_ADC_IRQHandler+0x134>
 80027a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027a8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d135      	bne.n	8002826 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d12e      	bne.n	8002826 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fd6e 	bl	80022ae <LL_ADC_REG_IsConversionOngoing>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d11a      	bne.n	800280e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 020c 	bic.w	r2, r2, #12
 80027e6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d112      	bne.n	8002826 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800280c:	e00b      	b.n	8002826 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f984 	bl	8002b34 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	220c      	movs	r2, #12
 8002832:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b00      	cmp	r3, #0
 800283c:	d004      	beq.n	8002848 <HAL_ADC_IRQHandler+0x1d4>
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10b      	bne.n	8002860 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80b3 	beq.w	80029ba <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 80ad 	beq.w	80029ba <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002870:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fc36 	bl	80020ee <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002882:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fbf1 	bl	8002070 <LL_ADC_REG_IsTriggerSourceSWStart>
 800288e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a10      	ldr	r2, [pc, #64]	@ (80028d8 <HAL_ADC_IRQHandler+0x264>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d009      	beq.n	80028ae <HAL_ADC_IRQHandler+0x23a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a11      	ldr	r2, [pc, #68]	@ (80028e4 <HAL_ADC_IRQHandler+0x270>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d002      	beq.n	80028aa <HAL_ADC_IRQHandler+0x236>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	e003      	b.n	80028b2 <HAL_ADC_IRQHandler+0x23e>
 80028aa:	4b0f      	ldr	r3, [pc, #60]	@ (80028e8 <HAL_ADC_IRQHandler+0x274>)
 80028ac:	e001      	b.n	80028b2 <HAL_ADC_IRQHandler+0x23e>
 80028ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d008      	beq.n	80028cc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d002      	beq.n	80028cc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b07      	cmp	r3, #7
 80028ca:	d10f      	bne.n	80028ec <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	623b      	str	r3, [r7, #32]
 80028d4:	e01f      	b.n	8002916 <HAL_ADC_IRQHandler+0x2a2>
 80028d6:	bf00      	nop
 80028d8:	50000100 	.word	0x50000100
 80028dc:	50000300 	.word	0x50000300
 80028e0:	50000700 	.word	0x50000700
 80028e4:	50000500 	.word	0x50000500
 80028e8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a8b      	ldr	r2, [pc, #556]	@ (8002b20 <HAL_ADC_IRQHandler+0x4ac>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_ADC_IRQHandler+0x296>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a8a      	ldr	r2, [pc, #552]	@ (8002b24 <HAL_ADC_IRQHandler+0x4b0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d002      	beq.n	8002906 <HAL_ADC_IRQHandler+0x292>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	e003      	b.n	800290e <HAL_ADC_IRQHandler+0x29a>
 8002906:	4b88      	ldr	r3, [pc, #544]	@ (8002b28 <HAL_ADC_IRQHandler+0x4b4>)
 8002908:	e001      	b.n	800290e <HAL_ADC_IRQHandler+0x29a>
 800290a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800290e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d047      	beq.n	80029ac <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <HAL_ADC_IRQHandler+0x2c2>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d03f      	beq.n	80029ac <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002932:	2b00      	cmp	r3, #0
 8002934:	d13a      	bne.n	80029ac <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002940:	2b40      	cmp	r3, #64	@ 0x40
 8002942:	d133      	bne.n	80029ac <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d12e      	bne.n	80029ac <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fcbe 	bl	80022d4 <LL_ADC_INJ_IsConversionOngoing>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d11a      	bne.n	8002994 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800296c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002972:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d112      	bne.n	80029ac <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002992:	e00b      	b.n	80029ac <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002998:	f043 0210 	orr.w	r2, r3, #16
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a4:	f043 0201 	orr.w	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 fd45 	bl	800343c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2260      	movs	r2, #96	@ 0x60
 80029b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d011      	beq.n	80029e8 <HAL_ADC_IRQHandler+0x374>
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00c      	beq.n	80029e8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f8b4 	bl	8002b48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2280      	movs	r2, #128	@ 0x80
 80029e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d012      	beq.n	8002a18 <HAL_ADC_IRQHandler+0x3a4>
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00d      	beq.n	8002a18 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a00:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fd2b 	bl	8003464 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d012      	beq.n	8002a48 <HAL_ADC_IRQHandler+0x3d4>
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00d      	beq.n	8002a48 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a30:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fd1d 	bl	8003478 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d043      	beq.n	8002ada <HAL_ADC_IRQHandler+0x466>
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d03e      	beq.n	8002ada <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d102      	bne.n	8002a6a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002a64:	2301      	movs	r3, #1
 8002a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a68:	e021      	b.n	8002aae <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d015      	beq.n	8002a9c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a78:	d004      	beq.n	8002a84 <HAL_ADC_IRQHandler+0x410>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a28      	ldr	r2, [pc, #160]	@ (8002b20 <HAL_ADC_IRQHandler+0x4ac>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_IRQHandler+0x414>
 8002a84:	4b29      	ldr	r3, [pc, #164]	@ (8002b2c <HAL_ADC_IRQHandler+0x4b8>)
 8002a86:	e000      	b.n	8002a8a <HAL_ADC_IRQHandler+0x416>
 8002a88:	4b29      	ldr	r3, [pc, #164]	@ (8002b30 <HAL_ADC_IRQHandler+0x4bc>)
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fba0 	bl	80021d0 <LL_ADC_GetMultiDMATransfer>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002a96:	2301      	movs	r3, #1
 8002a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a9a:	e008      	b.n	8002aae <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d10e      	bne.n	8002ad2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac4:	f043 0202 	orr.w	r2, r3, #2
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f845 	bl	8002b5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d018      	beq.n	8002b16 <HAL_ADC_IRQHandler+0x4a2>
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d013      	beq.n	8002b16 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002afe:	f043 0208 	orr.w	r2, r3, #8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b0e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fc9d 	bl	8003450 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002b16:	bf00      	nop
 8002b18:	3728      	adds	r7, #40	@ 0x28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	50000100 	.word	0x50000100
 8002b24:	50000500 	.word	0x50000500
 8002b28:	50000400 	.word	0x50000400
 8002b2c:	50000300 	.word	0x50000300
 8002b30:	50000700 	.word	0x50000700

08002b34 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b0b6      	sub	sp, #216	@ 0xd8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d102      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x24>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f000 bc13 	b.w	80033ba <HAL_ADC_ConfigChannel+0x84a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fb84 	bl	80022ae <LL_ADC_REG_IsConversionOngoing>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f040 83f3 	bne.w	8003394 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f7ff fa6b 	bl	8002096 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fb72 	bl	80022ae <LL_ADC_REG_IsConversionOngoing>
 8002bca:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fb7e 	bl	80022d4 <LL_ADC_INJ_IsConversionOngoing>
 8002bd8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f040 81d9 	bne.w	8002f98 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002be6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 81d4 	bne.w	8002f98 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bf8:	d10f      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2200      	movs	r2, #0
 8002c04:	4619      	mov	r1, r3
 8002c06:	f7ff fa85 	bl	8002114 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fa19 	bl	800204a <LL_ADC_SetSamplingTimeCommonConfig>
 8002c18:	e00e      	b.n	8002c38 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6819      	ldr	r1, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f7ff fa74 	bl	8002114 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2100      	movs	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fa09 	bl	800204a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	08db      	lsrs	r3, r3, #3
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d022      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6919      	ldr	r1, [r3, #16]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c6a:	f7ff f963 	bl	8001f34 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6919      	ldr	r1, [r3, #16]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f7ff f9af 	bl	8001fde <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d102      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x126>
 8002c90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c94:	e000      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x128>
 8002c96:	2300      	movs	r3, #0
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f7ff f9bb 	bl	8002014 <LL_ADC_SetOffsetSaturation>
 8002c9e:	e17b      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f968 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x15c>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f95d 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	0e9b      	lsrs	r3, r3, #26
 8002cc6:	f003 021f 	and.w	r2, r3, #31
 8002cca:	e01e      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x19a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff f952 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002cee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	e004      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002cfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x1b2>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	0e9b      	lsrs	r3, r3, #26
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	e018      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x1e4>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002d46:	2320      	movs	r3, #32
 8002d48:	e004      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002d4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d106      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff f921 	bl	8001fa8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff f905 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x222>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2101      	movs	r1, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff f8fa 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	0e9b      	lsrs	r3, r3, #26
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	e01e      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x260>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2101      	movs	r1, #1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff f8ef 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002db0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002db4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002db8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	e004      	b.n	8002dce <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002dc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d105      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x278>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	e018      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x2aa>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002dfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	e004      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d106      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2200      	movs	r2, #0
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff f8be 	bl	8001fa8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2102      	movs	r1, #2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff f8a2 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10a      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x2e8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2102      	movs	r1, #2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff f897 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	0e9b      	lsrs	r3, r3, #26
 8002e52:	f003 021f 	and.w	r2, r3, #31
 8002e56:	e01e      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x326>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff f88c 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002e76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002e86:	2320      	movs	r3, #32
 8002e88:	e004      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d105      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x33e>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	0e9b      	lsrs	r3, r3, #26
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	e016      	b.n	8002edc <HAL_ADC_ConfigChannel+0x36c>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002ec0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ec2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ece:	2320      	movs	r3, #32
 8002ed0:	e004      	b.n	8002edc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d106      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff f85d 	bl	8001fa8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2103      	movs	r1, #3
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff f841 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x3aa>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2103      	movs	r1, #3
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff f836 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002f10:	4603      	mov	r3, r0
 8002f12:	0e9b      	lsrs	r3, r3, #26
 8002f14:	f003 021f 	and.w	r2, r3, #31
 8002f18:	e017      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x3da>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2103      	movs	r1, #3
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff f82b 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002f26:	4603      	mov	r3, r0
 8002f28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f34:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002f36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	e003      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002f40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d105      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x3f2>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	0e9b      	lsrs	r3, r3, #26
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	e011      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x416>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002f70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f72:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002f7a:	2320      	movs	r3, #32
 8002f7c:	e003      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d106      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2103      	movs	r1, #3
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff f808 	bl	8001fa8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff f973 	bl	8002288 <LL_ADC_IsEnabled>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f040 813d 	bne.w	8003224 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6819      	ldr	r1, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f7ff f8d8 	bl	800216c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4aa2      	ldr	r2, [pc, #648]	@ (800324c <HAL_ADC_ConfigChannel+0x6dc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	f040 812e 	bne.w	8003224 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10b      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x480>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	0e9b      	lsrs	r3, r3, #26
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	2b09      	cmp	r3, #9
 8002fe6:	bf94      	ite	ls
 8002fe8:	2301      	movls	r3, #1
 8002fea:	2300      	movhi	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e019      	b.n	8003024 <HAL_ADC_ConfigChannel+0x4b4>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002ffe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003000:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003002:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003008:	2320      	movs	r3, #32
 800300a:	e003      	b.n	8003014 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800300c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	3301      	adds	r3, #1
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	2b09      	cmp	r3, #9
 800301c:	bf94      	ite	ls
 800301e:	2301      	movls	r3, #1
 8003020:	2300      	movhi	r3, #0
 8003022:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003024:	2b00      	cmp	r3, #0
 8003026:	d079      	beq.n	800311c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x4d4>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0e9b      	lsrs	r3, r3, #26
 800303a:	3301      	adds	r3, #1
 800303c:	069b      	lsls	r3, r3, #26
 800303e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003042:	e015      	b.n	8003070 <HAL_ADC_ConfigChannel+0x500>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003054:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800305c:	2320      	movs	r3, #32
 800305e:	e003      	b.n	8003068 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	3301      	adds	r3, #1
 800306a:	069b      	lsls	r3, r3, #26
 800306c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x520>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	0e9b      	lsrs	r3, r3, #26
 8003082:	3301      	adds	r3, #1
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	2101      	movs	r1, #1
 800308a:	fa01 f303 	lsl.w	r3, r1, r3
 800308e:	e017      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x550>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800309e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80030a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80030a8:	2320      	movs	r3, #32
 80030aa:	e003      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80030ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	3301      	adds	r3, #1
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	2101      	movs	r1, #1
 80030bc:	fa01 f303 	lsl.w	r3, r1, r3
 80030c0:	ea42 0103 	orr.w	r1, r2, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x576>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	0e9b      	lsrs	r3, r3, #26
 80030d6:	3301      	adds	r3, #1
 80030d8:	f003 021f 	and.w	r2, r3, #31
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	051b      	lsls	r3, r3, #20
 80030e4:	e018      	b.n	8003118 <HAL_ADC_ConfigChannel+0x5a8>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80030f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80030fe:	2320      	movs	r3, #32
 8003100:	e003      	b.n	800310a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	b2db      	uxtb	r3, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003118:	430b      	orrs	r3, r1
 800311a:	e07e      	b.n	800321a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x5c8>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	0e9b      	lsrs	r3, r3, #26
 800312e:	3301      	adds	r3, #1
 8003130:	069b      	lsls	r3, r3, #26
 8003132:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003136:	e015      	b.n	8003164 <HAL_ADC_ConfigChannel+0x5f4>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003148:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800314a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e003      	b.n	800315c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	3301      	adds	r3, #1
 800315e:	069b      	lsls	r3, r3, #26
 8003160:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x614>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0e9b      	lsrs	r3, r3, #26
 8003176:	3301      	adds	r3, #1
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	2101      	movs	r1, #1
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	e017      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x644>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	61fb      	str	r3, [r7, #28]
  return result;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800319c:	2320      	movs	r3, #32
 800319e:	e003      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	2101      	movs	r1, #1
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	ea42 0103 	orr.w	r1, r2, r3
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10d      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x670>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0e9b      	lsrs	r3, r3, #26
 80031ca:	3301      	adds	r3, #1
 80031cc:	f003 021f 	and.w	r2, r3, #31
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	3b1e      	subs	r3, #30
 80031d8:	051b      	lsls	r3, r3, #20
 80031da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031de:	e01b      	b.n	8003218 <HAL_ADC_ConfigChannel+0x6a8>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	613b      	str	r3, [r7, #16]
  return result;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80031f8:	2320      	movs	r3, #32
 80031fa:	e003      	b.n	8003204 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	3301      	adds	r3, #1
 8003206:	f003 021f 	and.w	r2, r3, #31
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	3b1e      	subs	r3, #30
 8003212:	051b      	lsls	r3, r3, #20
 8003214:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003218:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800321e:	4619      	mov	r1, r3
 8003220:	f7fe ff78 	bl	8002114 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <HAL_ADC_ConfigChannel+0x6e0>)
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80be 	beq.w	80033ae <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800323a:	d004      	beq.n	8003246 <HAL_ADC_ConfigChannel+0x6d6>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a04      	ldr	r2, [pc, #16]	@ (8003254 <HAL_ADC_ConfigChannel+0x6e4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d10a      	bne.n	800325c <HAL_ADC_ConfigChannel+0x6ec>
 8003246:	4b04      	ldr	r3, [pc, #16]	@ (8003258 <HAL_ADC_ConfigChannel+0x6e8>)
 8003248:	e009      	b.n	800325e <HAL_ADC_ConfigChannel+0x6ee>
 800324a:	bf00      	nop
 800324c:	407f0000 	.word	0x407f0000
 8003250:	80080000 	.word	0x80080000
 8003254:	50000100 	.word	0x50000100
 8003258:	50000300 	.word	0x50000300
 800325c:	4b59      	ldr	r3, [pc, #356]	@ (80033c4 <HAL_ADC_ConfigChannel+0x854>)
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe fe5a 	bl	8001f18 <LL_ADC_GetCommonPathInternalCh>
 8003264:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a56      	ldr	r2, [pc, #344]	@ (80033c8 <HAL_ADC_ConfigChannel+0x858>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d004      	beq.n	800327c <HAL_ADC_ConfigChannel+0x70c>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a55      	ldr	r2, [pc, #340]	@ (80033cc <HAL_ADC_ConfigChannel+0x85c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d13a      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800327c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003280:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d134      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003290:	d005      	beq.n	800329e <HAL_ADC_ConfigChannel+0x72e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a4e      	ldr	r2, [pc, #312]	@ (80033d0 <HAL_ADC_ConfigChannel+0x860>)
 8003298:	4293      	cmp	r3, r2
 800329a:	f040 8085 	bne.w	80033a8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032a6:	d004      	beq.n	80032b2 <HAL_ADC_ConfigChannel+0x742>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a49      	ldr	r2, [pc, #292]	@ (80033d4 <HAL_ADC_ConfigChannel+0x864>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d101      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x746>
 80032b2:	4a49      	ldr	r2, [pc, #292]	@ (80033d8 <HAL_ADC_ConfigChannel+0x868>)
 80032b4:	e000      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x748>
 80032b6:	4a43      	ldr	r2, [pc, #268]	@ (80033c4 <HAL_ADC_ConfigChannel+0x854>)
 80032b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f7fe fe15 	bl	8001ef2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032c8:	4b44      	ldr	r3, [pc, #272]	@ (80033dc <HAL_ADC_ConfigChannel+0x86c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	4a44      	ldr	r2, [pc, #272]	@ (80033e0 <HAL_ADC_ConfigChannel+0x870>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	099b      	lsrs	r3, r3, #6
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	4613      	mov	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032e2:	e002      	b.n	80032ea <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f9      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032f0:	e05a      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a3b      	ldr	r2, [pc, #236]	@ (80033e4 <HAL_ADC_ConfigChannel+0x874>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d125      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003300:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d11f      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a31      	ldr	r2, [pc, #196]	@ (80033d4 <HAL_ADC_ConfigChannel+0x864>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d104      	bne.n	800331c <HAL_ADC_ConfigChannel+0x7ac>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a34      	ldr	r2, [pc, #208]	@ (80033e8 <HAL_ADC_ConfigChannel+0x878>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d047      	beq.n	80033ac <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003324:	d004      	beq.n	8003330 <HAL_ADC_ConfigChannel+0x7c0>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2a      	ldr	r2, [pc, #168]	@ (80033d4 <HAL_ADC_ConfigChannel+0x864>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x7c4>
 8003330:	4a29      	ldr	r2, [pc, #164]	@ (80033d8 <HAL_ADC_ConfigChannel+0x868>)
 8003332:	e000      	b.n	8003336 <HAL_ADC_ConfigChannel+0x7c6>
 8003334:	4a23      	ldr	r2, [pc, #140]	@ (80033c4 <HAL_ADC_ConfigChannel+0x854>)
 8003336:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800333a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f7fe fdd6 	bl	8001ef2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003346:	e031      	b.n	80033ac <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a27      	ldr	r2, [pc, #156]	@ (80033ec <HAL_ADC_ConfigChannel+0x87c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d12d      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003352:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d127      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1c      	ldr	r2, [pc, #112]	@ (80033d4 <HAL_ADC_ConfigChannel+0x864>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d022      	beq.n	80033ae <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003370:	d004      	beq.n	800337c <HAL_ADC_ConfigChannel+0x80c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a17      	ldr	r2, [pc, #92]	@ (80033d4 <HAL_ADC_ConfigChannel+0x864>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d101      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x810>
 800337c:	4a16      	ldr	r2, [pc, #88]	@ (80033d8 <HAL_ADC_ConfigChannel+0x868>)
 800337e:	e000      	b.n	8003382 <HAL_ADC_ConfigChannel+0x812>
 8003380:	4a10      	ldr	r2, [pc, #64]	@ (80033c4 <HAL_ADC_ConfigChannel+0x854>)
 8003382:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003386:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800338a:	4619      	mov	r1, r3
 800338c:	4610      	mov	r0, r2
 800338e:	f7fe fdb0 	bl	8001ef2 <LL_ADC_SetCommonPathInternalCh>
 8003392:	e00c      	b.n	80033ae <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003398:	f043 0220 	orr.w	r2, r3, #32
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80033a6:	e002      	b.n	80033ae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033a8:	bf00      	nop
 80033aa:	e000      	b.n	80033ae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80033b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	37d8      	adds	r7, #216	@ 0xd8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	50000700 	.word	0x50000700
 80033c8:	c3210000 	.word	0xc3210000
 80033cc:	90c00010 	.word	0x90c00010
 80033d0:	50000600 	.word	0x50000600
 80033d4:	50000100 	.word	0x50000100
 80033d8:	50000300 	.word	0x50000300
 80033dc:	20000000 	.word	0x20000000
 80033e0:	053e2d63 	.word	0x053e2d63
 80033e4:	c7520000 	.word	0xc7520000
 80033e8:	50000500 	.word	0x50000500
 80033ec:	cb840000 	.word	0xcb840000

080033f0 <LL_ADC_IsEnabled>:
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <LL_ADC_IsEnabled+0x18>
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <LL_ADC_IsEnabled+0x1a>
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <LL_ADC_REG_IsConversionOngoing>:
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b04      	cmp	r3, #4
 8003428:	d101      	bne.n	800342e <LL_ADC_REG_IsConversionOngoing+0x18>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b0a1      	sub	sp, #132	@ 0x84
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e0e7      	b.n	800368e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80034c6:	2300      	movs	r3, #0
 80034c8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80034ca:	2300      	movs	r3, #0
 80034cc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034d6:	d102      	bne.n	80034de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80034d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	e009      	b.n	80034f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a6e      	ldr	r2, [pc, #440]	@ (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d102      	bne.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80034e8:	4b6d      	ldr	r3, [pc, #436]	@ (80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	e001      	b.n	80034f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10b      	bne.n	8003510 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fc:	f043 0220 	orr.w	r2, r3, #32
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0be      	b.n	800368e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ff7f 	bl	8003416 <LL_ADC_REG_IsConversionOngoing>
 8003518:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff ff79 	bl	8003416 <LL_ADC_REG_IsConversionOngoing>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	f040 80a0 	bne.w	800366c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800352c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800352e:	2b00      	cmp	r3, #0
 8003530:	f040 809c 	bne.w	800366c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800353c:	d004      	beq.n	8003548 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a55      	ldr	r2, [pc, #340]	@ (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d101      	bne.n	800354c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003548:	4b56      	ldr	r3, [pc, #344]	@ (80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800354a:	e000      	b.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800354c:	4b56      	ldr	r3, [pc, #344]	@ (80036a8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800354e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d04b      	beq.n	80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003558:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	6859      	ldr	r1, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800356a:	035b      	lsls	r3, r3, #13
 800356c:	430b      	orrs	r3, r1
 800356e:	431a      	orrs	r2, r3
 8003570:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003572:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800357c:	d004      	beq.n	8003588 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a45      	ldr	r2, [pc, #276]	@ (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d10f      	bne.n	80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003588:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800358c:	f7ff ff30 	bl	80033f0 <LL_ADC_IsEnabled>
 8003590:	4604      	mov	r4, r0
 8003592:	4841      	ldr	r0, [pc, #260]	@ (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003594:	f7ff ff2c 	bl	80033f0 <LL_ADC_IsEnabled>
 8003598:	4603      	mov	r3, r0
 800359a:	4323      	orrs	r3, r4
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e012      	b.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80035a8:	483c      	ldr	r0, [pc, #240]	@ (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80035aa:	f7ff ff21 	bl	80033f0 <LL_ADC_IsEnabled>
 80035ae:	4604      	mov	r4, r0
 80035b0:	483b      	ldr	r0, [pc, #236]	@ (80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80035b2:	f7ff ff1d 	bl	80033f0 <LL_ADC_IsEnabled>
 80035b6:	4603      	mov	r3, r0
 80035b8:	431c      	orrs	r4, r3
 80035ba:	483c      	ldr	r0, [pc, #240]	@ (80036ac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80035bc:	f7ff ff18 	bl	80033f0 <LL_ADC_IsEnabled>
 80035c0:	4603      	mov	r3, r0
 80035c2:	4323      	orrs	r3, r4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d056      	beq.n	8003680 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035da:	f023 030f 	bic.w	r3, r3, #15
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	6811      	ldr	r1, [r2, #0]
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	6892      	ldr	r2, [r2, #8]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	431a      	orrs	r2, r3
 80035ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ec:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035ee:	e047      	b.n	8003680 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035fa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003604:	d004      	beq.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a23      	ldr	r2, [pc, #140]	@ (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d10f      	bne.n	8003630 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003610:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003614:	f7ff feec 	bl	80033f0 <LL_ADC_IsEnabled>
 8003618:	4604      	mov	r4, r0
 800361a:	481f      	ldr	r0, [pc, #124]	@ (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800361c:	f7ff fee8 	bl	80033f0 <LL_ADC_IsEnabled>
 8003620:	4603      	mov	r3, r0
 8003622:	4323      	orrs	r3, r4
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	e012      	b.n	8003656 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003630:	481a      	ldr	r0, [pc, #104]	@ (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003632:	f7ff fedd 	bl	80033f0 <LL_ADC_IsEnabled>
 8003636:	4604      	mov	r4, r0
 8003638:	4819      	ldr	r0, [pc, #100]	@ (80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800363a:	f7ff fed9 	bl	80033f0 <LL_ADC_IsEnabled>
 800363e:	4603      	mov	r3, r0
 8003640:	431c      	orrs	r4, r3
 8003642:	481a      	ldr	r0, [pc, #104]	@ (80036ac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003644:	f7ff fed4 	bl	80033f0 <LL_ADC_IsEnabled>
 8003648:	4603      	mov	r3, r0
 800364a:	4323      	orrs	r3, r4
 800364c:	2b00      	cmp	r3, #0
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d012      	beq.n	8003680 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800365a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003662:	f023 030f 	bic.w	r3, r3, #15
 8003666:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003668:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800366a:	e009      	b.n	8003680 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003670:	f043 0220 	orr.w	r2, r3, #32
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800367e:	e000      	b.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003680:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800368a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800368e:	4618      	mov	r0, r3
 8003690:	3784      	adds	r7, #132	@ 0x84
 8003692:	46bd      	mov	sp, r7
 8003694:	bd90      	pop	{r4, r7, pc}
 8003696:	bf00      	nop
 8003698:	50000100 	.word	0x50000100
 800369c:	50000400 	.word	0x50000400
 80036a0:	50000500 	.word	0x50000500
 80036a4:	50000300 	.word	0x50000300
 80036a8:	50000700 	.word	0x50000700
 80036ac:	50000600 	.word	0x50000600

080036b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c0:	4b0c      	ldr	r3, [pc, #48]	@ (80036f4 <__NVIC_SetPriorityGrouping+0x44>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036cc:	4013      	ands	r3, r2
 80036ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036e2:	4a04      	ldr	r2, [pc, #16]	@ (80036f4 <__NVIC_SetPriorityGrouping+0x44>)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	60d3      	str	r3, [r2, #12]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036fc:	4b04      	ldr	r3, [pc, #16]	@ (8003710 <__NVIC_GetPriorityGrouping+0x18>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	f003 0307 	and.w	r3, r3, #7
}
 8003706:	4618      	mov	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	2b00      	cmp	r3, #0
 8003724:	db0b      	blt.n	800373e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	f003 021f 	and.w	r2, r3, #31
 800372c:	4907      	ldr	r1, [pc, #28]	@ (800374c <__NVIC_EnableIRQ+0x38>)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	2001      	movs	r0, #1
 8003736:	fa00 f202 	lsl.w	r2, r0, r2
 800373a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000e100 	.word	0xe000e100

08003750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003760:	2b00      	cmp	r3, #0
 8003762:	db0a      	blt.n	800377a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	b2da      	uxtb	r2, r3
 8003768:	490c      	ldr	r1, [pc, #48]	@ (800379c <__NVIC_SetPriority+0x4c>)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	0112      	lsls	r2, r2, #4
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	440b      	add	r3, r1
 8003774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003778:	e00a      	b.n	8003790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4908      	ldr	r1, [pc, #32]	@ (80037a0 <__NVIC_SetPriority+0x50>)
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	3b04      	subs	r3, #4
 8003788:	0112      	lsls	r2, r2, #4
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	440b      	add	r3, r1
 800378e:	761a      	strb	r2, [r3, #24]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000e100 	.word	0xe000e100
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	@ 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f1c3 0307 	rsb	r3, r3, #7
 80037be:	2b04      	cmp	r3, #4
 80037c0:	bf28      	it	cs
 80037c2:	2304      	movcs	r3, #4
 80037c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3304      	adds	r3, #4
 80037ca:	2b06      	cmp	r3, #6
 80037cc:	d902      	bls.n	80037d4 <NVIC_EncodePriority+0x30>
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3b03      	subs	r3, #3
 80037d2:	e000      	b.n	80037d6 <NVIC_EncodePriority+0x32>
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	f04f 32ff 	mov.w	r2, #4294967295
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	401a      	ands	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037ec:	f04f 31ff 	mov.w	r1, #4294967295
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	fa01 f303 	lsl.w	r3, r1, r3
 80037f6:	43d9      	mvns	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037fc:	4313      	orrs	r3, r2
         );
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3724      	adds	r7, #36	@ 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3b01      	subs	r3, #1
 8003818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800381c:	d301      	bcc.n	8003822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800381e:	2301      	movs	r3, #1
 8003820:	e00f      	b.n	8003842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003822:	4a0a      	ldr	r2, [pc, #40]	@ (800384c <SysTick_Config+0x40>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3b01      	subs	r3, #1
 8003828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800382a:	210f      	movs	r1, #15
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	f7ff ff8e 	bl	8003750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003834:	4b05      	ldr	r3, [pc, #20]	@ (800384c <SysTick_Config+0x40>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800383a:	4b04      	ldr	r3, [pc, #16]	@ (800384c <SysTick_Config+0x40>)
 800383c:	2207      	movs	r2, #7
 800383e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	e000e010 	.word	0xe000e010

08003850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff ff29 	bl	80036b0 <__NVIC_SetPriorityGrouping>
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	4603      	mov	r3, r0
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003874:	f7ff ff40 	bl	80036f8 <__NVIC_GetPriorityGrouping>
 8003878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	6978      	ldr	r0, [r7, #20]
 8003880:	f7ff ff90 	bl	80037a4 <NVIC_EncodePriority>
 8003884:	4602      	mov	r2, r0
 8003886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff5f 	bl	8003750 <__NVIC_SetPriority>
}
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	4603      	mov	r3, r0
 80038a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ff33 	bl	8003714 <__NVIC_EnableIRQ>
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff ffa4 	bl	800380c <SysTick_Config>
 80038c4:	4603      	mov	r3, r0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e08d      	b.n	80039fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b47      	ldr	r3, [pc, #284]	@ (8003a08 <HAL_DMA_Init+0x138>)
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d80f      	bhi.n	800390e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b45      	ldr	r3, [pc, #276]	@ (8003a0c <HAL_DMA_Init+0x13c>)
 80038f6:	4413      	add	r3, r2
 80038f8:	4a45      	ldr	r2, [pc, #276]	@ (8003a10 <HAL_DMA_Init+0x140>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	009a      	lsls	r2, r3, #2
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a42      	ldr	r2, [pc, #264]	@ (8003a14 <HAL_DMA_Init+0x144>)
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40
 800390c:	e00e      	b.n	800392c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	4b40      	ldr	r3, [pc, #256]	@ (8003a18 <HAL_DMA_Init+0x148>)
 8003916:	4413      	add	r3, r2
 8003918:	4a3d      	ldr	r2, [pc, #244]	@ (8003a10 <HAL_DMA_Init+0x140>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	009a      	lsls	r2, r3, #2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a3c      	ldr	r2, [pc, #240]	@ (8003a1c <HAL_DMA_Init+0x14c>)
 800392a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003946:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003950:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800395c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003968:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8fe 	bl	8003b80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800398c:	d102      	bne.n	8003994 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d010      	beq.n	80039d4 <HAL_DMA_Init+0x104>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d80c      	bhi.n	80039d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f91e 	bl	8003bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	e008      	b.n	80039e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40020407 	.word	0x40020407
 8003a0c:	bffdfff8 	.word	0xbffdfff8
 8003a10:	cccccccd 	.word	0xcccccccd
 8003a14:	40020000 	.word	0x40020000
 8003a18:	bffdfbf8 	.word	0xbffdfbf8
 8003a1c:	40020400 	.word	0x40020400

08003a20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	2204      	movs	r2, #4
 8003a42:	409a      	lsls	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d026      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x7a>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d021      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0204 	bic.w	r2, r2, #4
 8003a72:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a78:	f003 021f 	and.w	r2, r3, #31
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	2104      	movs	r1, #4
 8003a82:	fa01 f202 	lsl.w	r2, r1, r2
 8003a86:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d071      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a98:	e06c      	b.n	8003b74 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02e      	beq.n	8003b0c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d029      	beq.n	8003b0c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10b      	bne.n	8003ade <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 020a 	bic.w	r2, r2, #10
 8003ad4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	f003 021f 	and.w	r2, r3, #31
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	2102      	movs	r1, #2
 8003aec:	fa01 f202 	lsl.w	r2, r1, r2
 8003af0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d038      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b0a:	e033      	b.n	8003b74 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2208      	movs	r2, #8
 8003b16:	409a      	lsls	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02a      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d025      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 020e 	bic.w	r2, r2, #14
 8003b38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	f003 021f 	and.w	r2, r3, #31
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	2101      	movs	r1, #1
 8003b48:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
}
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4b16      	ldr	r3, [pc, #88]	@ (8003be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d802      	bhi.n	8003b9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b94:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e001      	b.n	8003b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003b9a:	4b15      	ldr	r3, [pc, #84]	@ (8003bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b9c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	3b08      	subs	r3, #8
 8003baa:	4a12      	ldr	r2, [pc, #72]	@ (8003bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb8:	089b      	lsrs	r3, r3, #2
 8003bba:	009a      	lsls	r2, r3, #2
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40020407 	.word	0x40020407
 8003bec:	40020800 	.word	0x40020800
 8003bf0:	40020820 	.word	0x40020820
 8003bf4:	cccccccd 	.word	0xcccccccd
 8003bf8:	40020880 	.word	0x40020880

08003bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	461a      	mov	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a08      	ldr	r2, [pc, #32]	@ (8003c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c1e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	2201      	movs	r2, #1
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	1000823f 	.word	0x1000823f
 8003c40:	40020940 	.word	0x40020940

08003c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c52:	e15a      	b.n	8003f0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	2101      	movs	r1, #1
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c60:	4013      	ands	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 814c 	beq.w	8003f04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d005      	beq.n	8003c84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d130      	bne.n	8003ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	2203      	movs	r2, #3
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cba:	2201      	movs	r2, #1
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	091b      	lsrs	r3, r3, #4
 8003cd0:	f003 0201 	and.w	r2, r3, #1
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d017      	beq.n	8003d22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d123      	bne.n	8003d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	08da      	lsrs	r2, r3, #3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3208      	adds	r2, #8
 8003d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	220f      	movs	r2, #15
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	08da      	lsrs	r2, r3, #3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3208      	adds	r2, #8
 8003d70:	6939      	ldr	r1, [r7, #16]
 8003d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	2203      	movs	r2, #3
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f003 0203 	and.w	r2, r3, #3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 80a6 	beq.w	8003f04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db8:	4b5b      	ldr	r3, [pc, #364]	@ (8003f28 <HAL_GPIO_Init+0x2e4>)
 8003dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dbc:	4a5a      	ldr	r2, [pc, #360]	@ (8003f28 <HAL_GPIO_Init+0x2e4>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003dc4:	4b58      	ldr	r3, [pc, #352]	@ (8003f28 <HAL_GPIO_Init+0x2e4>)
 8003dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dd0:	4a56      	ldr	r2, [pc, #344]	@ (8003f2c <HAL_GPIO_Init+0x2e8>)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	089b      	lsrs	r3, r3, #2
 8003dd6:	3302      	adds	r3, #2
 8003dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	220f      	movs	r2, #15
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4013      	ands	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003dfa:	d01f      	beq.n	8003e3c <HAL_GPIO_Init+0x1f8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a4c      	ldr	r2, [pc, #304]	@ (8003f30 <HAL_GPIO_Init+0x2ec>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d019      	beq.n	8003e38 <HAL_GPIO_Init+0x1f4>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a4b      	ldr	r2, [pc, #300]	@ (8003f34 <HAL_GPIO_Init+0x2f0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <HAL_GPIO_Init+0x1f0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a4a      	ldr	r2, [pc, #296]	@ (8003f38 <HAL_GPIO_Init+0x2f4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00d      	beq.n	8003e30 <HAL_GPIO_Init+0x1ec>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a49      	ldr	r2, [pc, #292]	@ (8003f3c <HAL_GPIO_Init+0x2f8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d007      	beq.n	8003e2c <HAL_GPIO_Init+0x1e8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a48      	ldr	r2, [pc, #288]	@ (8003f40 <HAL_GPIO_Init+0x2fc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d101      	bne.n	8003e28 <HAL_GPIO_Init+0x1e4>
 8003e24:	2305      	movs	r3, #5
 8003e26:	e00a      	b.n	8003e3e <HAL_GPIO_Init+0x1fa>
 8003e28:	2306      	movs	r3, #6
 8003e2a:	e008      	b.n	8003e3e <HAL_GPIO_Init+0x1fa>
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	e006      	b.n	8003e3e <HAL_GPIO_Init+0x1fa>
 8003e30:	2303      	movs	r3, #3
 8003e32:	e004      	b.n	8003e3e <HAL_GPIO_Init+0x1fa>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e002      	b.n	8003e3e <HAL_GPIO_Init+0x1fa>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <HAL_GPIO_Init+0x1fa>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	f002 0203 	and.w	r2, r2, #3
 8003e44:	0092      	lsls	r2, r2, #2
 8003e46:	4093      	lsls	r3, r2
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e4e:	4937      	ldr	r1, [pc, #220]	@ (8003f2c <HAL_GPIO_Init+0x2e8>)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	3302      	adds	r3, #2
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e5c:	4b39      	ldr	r3, [pc, #228]	@ (8003f44 <HAL_GPIO_Init+0x300>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	43db      	mvns	r3, r3
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e80:	4a30      	ldr	r2, [pc, #192]	@ (8003f44 <HAL_GPIO_Init+0x300>)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e86:	4b2f      	ldr	r3, [pc, #188]	@ (8003f44 <HAL_GPIO_Init+0x300>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003eaa:	4a26      	ldr	r2, [pc, #152]	@ (8003f44 <HAL_GPIO_Init+0x300>)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003eb0:	4b24      	ldr	r3, [pc, #144]	@ (8003f44 <HAL_GPIO_Init+0x300>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f44 <HAL_GPIO_Init+0x300>)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003eda:	4b1a      	ldr	r3, [pc, #104]	@ (8003f44 <HAL_GPIO_Init+0x300>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003efe:	4a11      	ldr	r2, [pc, #68]	@ (8003f44 <HAL_GPIO_Init+0x300>)
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	3301      	adds	r3, #1
 8003f08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f47f ae9d 	bne.w	8003c54 <HAL_GPIO_Init+0x10>
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	bf00      	nop
 8003f1e:	371c      	adds	r7, #28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	48000400 	.word	0x48000400
 8003f34:	48000800 	.word	0x48000800
 8003f38:	48000c00 	.word	0x48000c00
 8003f3c:	48001000 	.word	0x48001000
 8003f40:	48001400 	.word	0x48001400
 8003f44:	40010400 	.word	0x40010400

08003f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	807b      	strh	r3, [r7, #2]
 8003f54:	4613      	mov	r3, r2
 8003f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f58:	787b      	ldrb	r3, [r7, #1]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f5e:	887a      	ldrh	r2, [r7, #2]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f64:	e002      	b.n	8003f6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f66:	887a      	ldrh	r2, [r7, #2]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f82:	4b08      	ldr	r3, [pc, #32]	@ (8003fa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d006      	beq.n	8003f9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f8e:	4a05      	ldr	r2, [pc, #20]	@ (8003fa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd faa8 	bl	80014ec <HAL_GPIO_EXTI_Callback>
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d141      	bne.n	800403a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fc2:	d131      	bne.n	8004028 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fc4:	4b47      	ldr	r3, [pc, #284]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fca:	4a46      	ldr	r2, [pc, #280]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fd4:	4b43      	ldr	r3, [pc, #268]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fdc:	4a41      	ldr	r2, [pc, #260]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fe2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fe4:	4b40      	ldr	r3, [pc, #256]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2232      	movs	r2, #50	@ 0x32
 8003fea:	fb02 f303 	mul.w	r3, r2, r3
 8003fee:	4a3f      	ldr	r2, [pc, #252]	@ (80040ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff4:	0c9b      	lsrs	r3, r3, #18
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ffa:	e002      	b.n	8004002 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004002:	4b38      	ldr	r3, [pc, #224]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800400e:	d102      	bne.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f2      	bne.n	8003ffc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004016:	4b33      	ldr	r3, [pc, #204]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800401e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004022:	d158      	bne.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e057      	b.n	80040d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004028:	4b2e      	ldr	r3, [pc, #184]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800402e:	4a2d      	ldr	r2, [pc, #180]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004034:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004038:	e04d      	b.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004040:	d141      	bne.n	80040c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004042:	4b28      	ldr	r3, [pc, #160]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800404a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800404e:	d131      	bne.n	80040b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004050:	4b24      	ldr	r3, [pc, #144]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004056:	4a23      	ldr	r2, [pc, #140]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800405c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004060:	4b20      	ldr	r3, [pc, #128]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004068:	4a1e      	ldr	r2, [pc, #120]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800406e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004070:	4b1d      	ldr	r3, [pc, #116]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2232      	movs	r2, #50	@ 0x32
 8004076:	fb02 f303 	mul.w	r3, r2, r3
 800407a:	4a1c      	ldr	r2, [pc, #112]	@ (80040ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	0c9b      	lsrs	r3, r3, #18
 8004082:	3301      	adds	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004086:	e002      	b.n	800408e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3b01      	subs	r3, #1
 800408c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800408e:	4b15      	ldr	r3, [pc, #84]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800409a:	d102      	bne.n	80040a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f2      	bne.n	8004088 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040a2:	4b10      	ldr	r3, [pc, #64]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ae:	d112      	bne.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e011      	b.n	80040d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040b4:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ba:	4a0a      	ldr	r2, [pc, #40]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040c4:	e007      	b.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040c6:	4b07      	ldr	r3, [pc, #28]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040ce:	4a05      	ldr	r2, [pc, #20]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	40007000 	.word	0x40007000
 80040e8:	20000000 	.word	0x20000000
 80040ec:	431bde83 	.word	0x431bde83

080040f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040f4:	4b05      	ldr	r3, [pc, #20]	@ (800410c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4a04      	ldr	r2, [pc, #16]	@ (800410c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040fe:	6093      	str	r3, [r2, #8]
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40007000 	.word	0x40007000

08004110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e2fe      	b.n	8004720 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d075      	beq.n	800421a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800412e:	4b97      	ldr	r3, [pc, #604]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004138:	4b94      	ldr	r3, [pc, #592]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0303 	and.w	r3, r3, #3
 8004140:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b0c      	cmp	r3, #12
 8004146:	d102      	bne.n	800414e <HAL_RCC_OscConfig+0x3e>
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2b03      	cmp	r3, #3
 800414c:	d002      	beq.n	8004154 <HAL_RCC_OscConfig+0x44>
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d10b      	bne.n	800416c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004154:	4b8d      	ldr	r3, [pc, #564]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d05b      	beq.n	8004218 <HAL_RCC_OscConfig+0x108>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d157      	bne.n	8004218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e2d9      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004174:	d106      	bne.n	8004184 <HAL_RCC_OscConfig+0x74>
 8004176:	4b85      	ldr	r3, [pc, #532]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a84      	ldr	r2, [pc, #528]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 800417c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	e01d      	b.n	80041c0 <HAL_RCC_OscConfig+0xb0>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800418c:	d10c      	bne.n	80041a8 <HAL_RCC_OscConfig+0x98>
 800418e:	4b7f      	ldr	r3, [pc, #508]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a7e      	ldr	r2, [pc, #504]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 8004194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	4b7c      	ldr	r3, [pc, #496]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a7b      	ldr	r2, [pc, #492]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 80041a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	e00b      	b.n	80041c0 <HAL_RCC_OscConfig+0xb0>
 80041a8:	4b78      	ldr	r3, [pc, #480]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a77      	ldr	r2, [pc, #476]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 80041ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	4b75      	ldr	r3, [pc, #468]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a74      	ldr	r2, [pc, #464]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 80041ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d013      	beq.n	80041f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fd fe74 	bl	8001eb4 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d0:	f7fd fe70 	bl	8001eb4 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b64      	cmp	r3, #100	@ 0x64
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e29e      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e2:	4b6a      	ldr	r3, [pc, #424]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0xc0>
 80041ee:	e014      	b.n	800421a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fd fe60 	bl	8001eb4 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f8:	f7fd fe5c 	bl	8001eb4 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b64      	cmp	r3, #100	@ 0x64
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e28a      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800420a:	4b60      	ldr	r3, [pc, #384]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0xe8>
 8004216:	e000      	b.n	800421a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d075      	beq.n	8004312 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004226:	4b59      	ldr	r3, [pc, #356]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004230:	4b56      	ldr	r3, [pc, #344]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b0c      	cmp	r3, #12
 800423e:	d102      	bne.n	8004246 <HAL_RCC_OscConfig+0x136>
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d002      	beq.n	800424c <HAL_RCC_OscConfig+0x13c>
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d11f      	bne.n	800428c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800424c:	4b4f      	ldr	r3, [pc, #316]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_RCC_OscConfig+0x154>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e25d      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b49      	ldr	r3, [pc, #292]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	061b      	lsls	r3, r3, #24
 8004272:	4946      	ldr	r1, [pc, #280]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004278:	4b45      	ldr	r3, [pc, #276]	@ (8004390 <HAL_RCC_OscConfig+0x280>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f7fd fdcd 	bl	8001e1c <HAL_InitTick>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d043      	beq.n	8004310 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e249      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d023      	beq.n	80042dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004294:	4b3d      	ldr	r3, [pc, #244]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a3c      	ldr	r2, [pc, #240]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 800429a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800429e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fd fe08 	bl	8001eb4 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a8:	f7fd fe04 	bl	8001eb4 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e232      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042ba:	4b34      	ldr	r3, [pc, #208]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c6:	4b31      	ldr	r3, [pc, #196]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	061b      	lsls	r3, r3, #24
 80042d4:	492d      	ldr	r1, [pc, #180]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	604b      	str	r3, [r1, #4]
 80042da:	e01a      	b.n	8004312 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042dc:	4b2b      	ldr	r3, [pc, #172]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a2a      	ldr	r2, [pc, #168]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 80042e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7fd fde4 	bl	8001eb4 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f0:	f7fd fde0 	bl	8001eb4 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e20e      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004302:	4b22      	ldr	r3, [pc, #136]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x1e0>
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004310:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d041      	beq.n	80043a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d01c      	beq.n	8004360 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004326:	4b19      	ldr	r3, [pc, #100]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 8004328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800432c:	4a17      	ldr	r2, [pc, #92]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004336:	f7fd fdbd 	bl	8001eb4 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800433e:	f7fd fdb9 	bl	8001eb4 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e1e7      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004350:	4b0e      	ldr	r3, [pc, #56]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 8004352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0ef      	beq.n	800433e <HAL_RCC_OscConfig+0x22e>
 800435e:	e020      	b.n	80043a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004360:	4b0a      	ldr	r3, [pc, #40]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 8004362:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004366:	4a09      	ldr	r2, [pc, #36]	@ (800438c <HAL_RCC_OscConfig+0x27c>)
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004370:	f7fd fda0 	bl	8001eb4 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004376:	e00d      	b.n	8004394 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004378:	f7fd fd9c 	bl	8001eb4 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d906      	bls.n	8004394 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e1ca      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
 800438a:	bf00      	nop
 800438c:	40021000 	.word	0x40021000
 8004390:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004394:	4b8c      	ldr	r3, [pc, #560]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 8004396:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1ea      	bne.n	8004378 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 80a6 	beq.w	80044fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b0:	2300      	movs	r3, #0
 80043b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043b4:	4b84      	ldr	r3, [pc, #528]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 80043b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_OscConfig+0x2b4>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x2b6>
 80043c4:	2300      	movs	r3, #0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00d      	beq.n	80043e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ca:	4b7f      	ldr	r3, [pc, #508]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 80043cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ce:	4a7e      	ldr	r2, [pc, #504]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 80043d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80043d6:	4b7c      	ldr	r3, [pc, #496]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043e2:	2301      	movs	r3, #1
 80043e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e6:	4b79      	ldr	r3, [pc, #484]	@ (80045cc <HAL_RCC_OscConfig+0x4bc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d118      	bne.n	8004424 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f2:	4b76      	ldr	r3, [pc, #472]	@ (80045cc <HAL_RCC_OscConfig+0x4bc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a75      	ldr	r2, [pc, #468]	@ (80045cc <HAL_RCC_OscConfig+0x4bc>)
 80043f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043fe:	f7fd fd59 	bl	8001eb4 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004406:	f7fd fd55 	bl	8001eb4 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e183      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004418:	4b6c      	ldr	r3, [pc, #432]	@ (80045cc <HAL_RCC_OscConfig+0x4bc>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d108      	bne.n	800443e <HAL_RCC_OscConfig+0x32e>
 800442c:	4b66      	ldr	r3, [pc, #408]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004432:	4a65      	ldr	r2, [pc, #404]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800443c:	e024      	b.n	8004488 <HAL_RCC_OscConfig+0x378>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b05      	cmp	r3, #5
 8004444:	d110      	bne.n	8004468 <HAL_RCC_OscConfig+0x358>
 8004446:	4b60      	ldr	r3, [pc, #384]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 8004448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444c:	4a5e      	ldr	r2, [pc, #376]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 800444e:	f043 0304 	orr.w	r3, r3, #4
 8004452:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004456:	4b5c      	ldr	r3, [pc, #368]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 8004458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800445c:	4a5a      	ldr	r2, [pc, #360]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004466:	e00f      	b.n	8004488 <HAL_RCC_OscConfig+0x378>
 8004468:	4b57      	ldr	r3, [pc, #348]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446e:	4a56      	ldr	r2, [pc, #344]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004478:	4b53      	ldr	r3, [pc, #332]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447e:	4a52      	ldr	r2, [pc, #328]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 8004480:	f023 0304 	bic.w	r3, r3, #4
 8004484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d016      	beq.n	80044be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fd fd10 	bl	8001eb4 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004496:	e00a      	b.n	80044ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004498:	f7fd fd0c 	bl	8001eb4 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e138      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ae:	4b46      	ldr	r3, [pc, #280]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0ed      	beq.n	8004498 <HAL_RCC_OscConfig+0x388>
 80044bc:	e015      	b.n	80044ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044be:	f7fd fcf9 	bl	8001eb4 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044c4:	e00a      	b.n	80044dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c6:	f7fd fcf5 	bl	8001eb4 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e121      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044dc:	4b3a      	ldr	r3, [pc, #232]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1ed      	bne.n	80044c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044ea:	7ffb      	ldrb	r3, [r7, #31]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d105      	bne.n	80044fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f0:	4b35      	ldr	r3, [pc, #212]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 80044f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f4:	4a34      	ldr	r2, [pc, #208]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 80044f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d03c      	beq.n	8004582 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01c      	beq.n	800454a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004510:	4b2d      	ldr	r3, [pc, #180]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 8004512:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004516:	4a2c      	ldr	r2, [pc, #176]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004520:	f7fd fcc8 	bl	8001eb4 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004528:	f7fd fcc4 	bl	8001eb4 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e0f2      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800453a:	4b23      	ldr	r3, [pc, #140]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 800453c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0ef      	beq.n	8004528 <HAL_RCC_OscConfig+0x418>
 8004548:	e01b      	b.n	8004582 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800454a:	4b1f      	ldr	r3, [pc, #124]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 800454c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004550:	4a1d      	ldr	r2, [pc, #116]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 8004552:	f023 0301 	bic.w	r3, r3, #1
 8004556:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455a:	f7fd fcab 	bl	8001eb4 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004562:	f7fd fca7 	bl	8001eb4 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e0d5      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004574:	4b14      	ldr	r3, [pc, #80]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 8004576:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1ef      	bne.n	8004562 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 80c9 	beq.w	800471e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800458c:	4b0e      	ldr	r3, [pc, #56]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 030c 	and.w	r3, r3, #12
 8004594:	2b0c      	cmp	r3, #12
 8004596:	f000 8083 	beq.w	80046a0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d15e      	bne.n	8004660 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a2:	4b09      	ldr	r3, [pc, #36]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a08      	ldr	r2, [pc, #32]	@ (80045c8 <HAL_RCC_OscConfig+0x4b8>)
 80045a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ae:	f7fd fc81 	bl	8001eb4 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b4:	e00c      	b.n	80045d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b6:	f7fd fc7d 	bl	8001eb4 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d905      	bls.n	80045d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e0ab      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
 80045c8:	40021000 	.word	0x40021000
 80045cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d0:	4b55      	ldr	r3, [pc, #340]	@ (8004728 <HAL_RCC_OscConfig+0x618>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1ec      	bne.n	80045b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045dc:	4b52      	ldr	r3, [pc, #328]	@ (8004728 <HAL_RCC_OscConfig+0x618>)
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	4b52      	ldr	r3, [pc, #328]	@ (800472c <HAL_RCC_OscConfig+0x61c>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6a11      	ldr	r1, [r2, #32]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045ec:	3a01      	subs	r2, #1
 80045ee:	0112      	lsls	r2, r2, #4
 80045f0:	4311      	orrs	r1, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80045f6:	0212      	lsls	r2, r2, #8
 80045f8:	4311      	orrs	r1, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80045fe:	0852      	lsrs	r2, r2, #1
 8004600:	3a01      	subs	r2, #1
 8004602:	0552      	lsls	r2, r2, #21
 8004604:	4311      	orrs	r1, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800460a:	0852      	lsrs	r2, r2, #1
 800460c:	3a01      	subs	r2, #1
 800460e:	0652      	lsls	r2, r2, #25
 8004610:	4311      	orrs	r1, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004616:	06d2      	lsls	r2, r2, #27
 8004618:	430a      	orrs	r2, r1
 800461a:	4943      	ldr	r1, [pc, #268]	@ (8004728 <HAL_RCC_OscConfig+0x618>)
 800461c:	4313      	orrs	r3, r2
 800461e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004620:	4b41      	ldr	r3, [pc, #260]	@ (8004728 <HAL_RCC_OscConfig+0x618>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a40      	ldr	r2, [pc, #256]	@ (8004728 <HAL_RCC_OscConfig+0x618>)
 8004626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800462a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800462c:	4b3e      	ldr	r3, [pc, #248]	@ (8004728 <HAL_RCC_OscConfig+0x618>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4a3d      	ldr	r2, [pc, #244]	@ (8004728 <HAL_RCC_OscConfig+0x618>)
 8004632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004636:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fd fc3c 	bl	8001eb4 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004640:	f7fd fc38 	bl	8001eb4 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e066      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004652:	4b35      	ldr	r3, [pc, #212]	@ (8004728 <HAL_RCC_OscConfig+0x618>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x530>
 800465e:	e05e      	b.n	800471e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004660:	4b31      	ldr	r3, [pc, #196]	@ (8004728 <HAL_RCC_OscConfig+0x618>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a30      	ldr	r2, [pc, #192]	@ (8004728 <HAL_RCC_OscConfig+0x618>)
 8004666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800466a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466c:	f7fd fc22 	bl	8001eb4 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004674:	f7fd fc1e 	bl	8001eb4 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e04c      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004686:	4b28      	ldr	r3, [pc, #160]	@ (8004728 <HAL_RCC_OscConfig+0x618>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004692:	4b25      	ldr	r3, [pc, #148]	@ (8004728 <HAL_RCC_OscConfig+0x618>)
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	4924      	ldr	r1, [pc, #144]	@ (8004728 <HAL_RCC_OscConfig+0x618>)
 8004698:	4b25      	ldr	r3, [pc, #148]	@ (8004730 <HAL_RCC_OscConfig+0x620>)
 800469a:	4013      	ands	r3, r2
 800469c:	60cb      	str	r3, [r1, #12]
 800469e:	e03e      	b.n	800471e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e039      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80046ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004728 <HAL_RCC_OscConfig+0x618>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 0203 	and.w	r2, r3, #3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d12c      	bne.n	800471a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ca:	3b01      	subs	r3, #1
 80046cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d123      	bne.n	800471a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	d11b      	bne.n	800471a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d113      	bne.n	800471a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	3b01      	subs	r3, #1
 8004700:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d109      	bne.n	800471a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004710:	085b      	lsrs	r3, r3, #1
 8004712:	3b01      	subs	r3, #1
 8004714:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d001      	beq.n	800471e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3720      	adds	r7, #32
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40021000 	.word	0x40021000
 800472c:	019f800c 	.word	0x019f800c
 8004730:	feeefffc 	.word	0xfeeefffc

08004734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e11e      	b.n	800498a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800474c:	4b91      	ldr	r3, [pc, #580]	@ (8004994 <HAL_RCC_ClockConfig+0x260>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d910      	bls.n	800477c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475a:	4b8e      	ldr	r3, [pc, #568]	@ (8004994 <HAL_RCC_ClockConfig+0x260>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f023 020f 	bic.w	r2, r3, #15
 8004762:	498c      	ldr	r1, [pc, #560]	@ (8004994 <HAL_RCC_ClockConfig+0x260>)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	4313      	orrs	r3, r2
 8004768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476a:	4b8a      	ldr	r3, [pc, #552]	@ (8004994 <HAL_RCC_ClockConfig+0x260>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d001      	beq.n	800477c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e106      	b.n	800498a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d073      	beq.n	8004870 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b03      	cmp	r3, #3
 800478e:	d129      	bne.n	80047e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004790:	4b81      	ldr	r3, [pc, #516]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0f4      	b.n	800498a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047a0:	f000 f99e 	bl	8004ae0 <RCC_GetSysClockFreqFromPLLSource>
 80047a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4a7c      	ldr	r2, [pc, #496]	@ (800499c <HAL_RCC_ClockConfig+0x268>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d93f      	bls.n	800482e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d033      	beq.n	800482e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d12f      	bne.n	800482e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047ce:	4b72      	ldr	r3, [pc, #456]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047d6:	4a70      	ldr	r2, [pc, #448]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 80047d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047de:	2380      	movs	r3, #128	@ 0x80
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	e024      	b.n	800482e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d107      	bne.n	80047fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0c6      	b.n	800498a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047fc:	4b66      	ldr	r3, [pc, #408]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0be      	b.n	800498a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800480c:	f000 f8ce 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8004810:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	4a61      	ldr	r2, [pc, #388]	@ (800499c <HAL_RCC_ClockConfig+0x268>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d909      	bls.n	800482e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800481a:	4b5f      	ldr	r3, [pc, #380]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004822:	4a5d      	ldr	r2, [pc, #372]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 8004824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004828:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800482a:	2380      	movs	r3, #128	@ 0x80
 800482c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800482e:	4b5a      	ldr	r3, [pc, #360]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f023 0203 	bic.w	r2, r3, #3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4957      	ldr	r1, [pc, #348]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 800483c:	4313      	orrs	r3, r2
 800483e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004840:	f7fd fb38 	bl	8001eb4 <HAL_GetTick>
 8004844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004846:	e00a      	b.n	800485e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004848:	f7fd fb34 	bl	8001eb4 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e095      	b.n	800498a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	4b4e      	ldr	r3, [pc, #312]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 020c 	and.w	r2, r3, #12
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	429a      	cmp	r2, r3
 800486e:	d1eb      	bne.n	8004848 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d023      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004888:	4b43      	ldr	r3, [pc, #268]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4a42      	ldr	r2, [pc, #264]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 800488e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004892:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80048a0:	4b3d      	ldr	r3, [pc, #244]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80048a8:	4a3b      	ldr	r2, [pc, #236]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 80048aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b0:	4b39      	ldr	r3, [pc, #228]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4936      	ldr	r1, [pc, #216]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	608b      	str	r3, [r1, #8]
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b80      	cmp	r3, #128	@ 0x80
 80048c8:	d105      	bne.n	80048d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048ca:	4b33      	ldr	r3, [pc, #204]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	4a32      	ldr	r2, [pc, #200]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 80048d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004994 <HAL_RCC_ClockConfig+0x260>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d21d      	bcs.n	8004920 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004994 <HAL_RCC_ClockConfig+0x260>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f023 020f 	bic.w	r2, r3, #15
 80048ec:	4929      	ldr	r1, [pc, #164]	@ (8004994 <HAL_RCC_ClockConfig+0x260>)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048f4:	f7fd fade 	bl	8001eb4 <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7fd fada 	bl	8001eb4 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e03b      	b.n	800498a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004912:	4b20      	ldr	r3, [pc, #128]	@ (8004994 <HAL_RCC_ClockConfig+0x260>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d1ed      	bne.n	80048fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800492c:	4b1a      	ldr	r3, [pc, #104]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	4917      	ldr	r1, [pc, #92]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 800493a:	4313      	orrs	r3, r2
 800493c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800494a:	4b13      	ldr	r3, [pc, #76]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	490f      	ldr	r1, [pc, #60]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800495e:	f000 f825 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8004962:	4602      	mov	r2, r0
 8004964:	4b0c      	ldr	r3, [pc, #48]	@ (8004998 <HAL_RCC_ClockConfig+0x264>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	091b      	lsrs	r3, r3, #4
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	490c      	ldr	r1, [pc, #48]	@ (80049a0 <HAL_RCC_ClockConfig+0x26c>)
 8004970:	5ccb      	ldrb	r3, [r1, r3]
 8004972:	f003 031f 	and.w	r3, r3, #31
 8004976:	fa22 f303 	lsr.w	r3, r2, r3
 800497a:	4a0a      	ldr	r2, [pc, #40]	@ (80049a4 <HAL_RCC_ClockConfig+0x270>)
 800497c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800497e:	4b0a      	ldr	r3, [pc, #40]	@ (80049a8 <HAL_RCC_ClockConfig+0x274>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7fd fa4a 	bl	8001e1c <HAL_InitTick>
 8004988:	4603      	mov	r3, r0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40022000 	.word	0x40022000
 8004998:	40021000 	.word	0x40021000
 800499c:	04c4b400 	.word	0x04c4b400
 80049a0:	08007888 	.word	0x08007888
 80049a4:	20000000 	.word	0x20000000
 80049a8:	20000004 	.word	0x20000004

080049ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d102      	bne.n	80049c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049be:	4b2a      	ldr	r3, [pc, #168]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	e047      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049c4:	4b27      	ldr	r3, [pc, #156]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 030c 	and.w	r3, r3, #12
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d102      	bne.n	80049d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049d0:	4b26      	ldr	r3, [pc, #152]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0xc0>)
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	e03e      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80049d6:	4b23      	ldr	r3, [pc, #140]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b0c      	cmp	r3, #12
 80049e0:	d136      	bne.n	8004a50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049e2:	4b20      	ldr	r3, [pc, #128]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	3301      	adds	r3, #1
 80049f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d10c      	bne.n	8004a1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a00:	4a1a      	ldr	r2, [pc, #104]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	4a16      	ldr	r2, [pc, #88]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a0a:	68d2      	ldr	r2, [r2, #12]
 8004a0c:	0a12      	lsrs	r2, r2, #8
 8004a0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a12:	fb02 f303 	mul.w	r3, r2, r3
 8004a16:	617b      	str	r3, [r7, #20]
      break;
 8004a18:	e00c      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a1a:	4a13      	ldr	r2, [pc, #76]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a22:	4a10      	ldr	r2, [pc, #64]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a24:	68d2      	ldr	r2, [r2, #12]
 8004a26:	0a12      	lsrs	r2, r2, #8
 8004a28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a2c:	fb02 f303 	mul.w	r3, r2, r3
 8004a30:	617b      	str	r3, [r7, #20]
      break;
 8004a32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a34:	4b0b      	ldr	r3, [pc, #44]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	0e5b      	lsrs	r3, r3, #25
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	e001      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a54:	693b      	ldr	r3, [r7, #16]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40021000 	.word	0x40021000
 8004a68:	00f42400 	.word	0x00f42400
 8004a6c:	016e3600 	.word	0x016e3600

08004a70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a74:	4b03      	ldr	r3, [pc, #12]	@ (8004a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a76:	681b      	ldr	r3, [r3, #0]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	20000000 	.word	0x20000000

08004a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a8c:	f7ff fff0 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8004a90:	4602      	mov	r2, r0
 8004a92:	4b06      	ldr	r3, [pc, #24]	@ (8004aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	4904      	ldr	r1, [pc, #16]	@ (8004ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a9e:	5ccb      	ldrb	r3, [r1, r3]
 8004aa0:	f003 031f 	and.w	r3, r3, #31
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	08007898 	.word	0x08007898

08004ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ab8:	f7ff ffda 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	0adb      	lsrs	r3, r3, #11
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	4904      	ldr	r1, [pc, #16]	@ (8004adc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004aca:	5ccb      	ldrb	r3, [r1, r3]
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	08007898 	.word	0x08007898

08004ae0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004af0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	3301      	adds	r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d10c      	bne.n	8004b1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b04:	4a17      	ldr	r2, [pc, #92]	@ (8004b64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	4a14      	ldr	r2, [pc, #80]	@ (8004b60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b0e:	68d2      	ldr	r2, [r2, #12]
 8004b10:	0a12      	lsrs	r2, r2, #8
 8004b12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b16:	fb02 f303 	mul.w	r3, r2, r3
 8004b1a:	617b      	str	r3, [r7, #20]
    break;
 8004b1c:	e00c      	b.n	8004b38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b1e:	4a12      	ldr	r2, [pc, #72]	@ (8004b68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	4a0e      	ldr	r2, [pc, #56]	@ (8004b60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b28:	68d2      	ldr	r2, [r2, #12]
 8004b2a:	0a12      	lsrs	r2, r2, #8
 8004b2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b30:	fb02 f303 	mul.w	r3, r2, r3
 8004b34:	617b      	str	r3, [r7, #20]
    break;
 8004b36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b38:	4b09      	ldr	r3, [pc, #36]	@ (8004b60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	0e5b      	lsrs	r3, r3, #25
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	3301      	adds	r3, #1
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b52:	687b      	ldr	r3, [r7, #4]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	371c      	adds	r7, #28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	40021000 	.word	0x40021000
 8004b64:	016e3600 	.word	0x016e3600
 8004b68:	00f42400 	.word	0x00f42400

08004b6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b74:	2300      	movs	r3, #0
 8004b76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b78:	2300      	movs	r3, #0
 8004b7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8098 	beq.w	8004cba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b8e:	4b43      	ldr	r3, [pc, #268]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10d      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9a:	4b40      	ldr	r3, [pc, #256]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9e:	4a3f      	ldr	r2, [pc, #252]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bb6:	4b3a      	ldr	r3, [pc, #232]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a39      	ldr	r2, [pc, #228]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bc2:	f7fd f977 	bl	8001eb4 <HAL_GetTick>
 8004bc6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bc8:	e009      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bca:	f7fd f973 	bl	8001eb4 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d902      	bls.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	74fb      	strb	r3, [r7, #19]
        break;
 8004bdc:	e005      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bde:	4b30      	ldr	r3, [pc, #192]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0ef      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004bea:	7cfb      	ldrb	r3, [r7, #19]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d159      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01e      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d019      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c0c:	4b23      	ldr	r3, [pc, #140]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c18:	4b20      	ldr	r3, [pc, #128]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c28:	4b1c      	ldr	r3, [pc, #112]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c38:	4a18      	ldr	r2, [pc, #96]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d016      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4a:	f7fd f933 	bl	8001eb4 <HAL_GetTick>
 8004c4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c50:	e00b      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c52:	f7fd f92f 	bl	8001eb4 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d902      	bls.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	74fb      	strb	r3, [r7, #19]
            break;
 8004c68:	e006      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0ec      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c78:	7cfb      	ldrb	r3, [r7, #19]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10b      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c7e:	4b07      	ldr	r3, [pc, #28]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c8c:	4903      	ldr	r1, [pc, #12]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c94:	e008      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c96:	7cfb      	ldrb	r3, [r7, #19]
 8004c98:	74bb      	strb	r3, [r7, #18]
 8004c9a:	e005      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca4:	7cfb      	ldrb	r3, [r7, #19]
 8004ca6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ca8:	7c7b      	ldrb	r3, [r7, #17]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d105      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cae:	4ba7      	ldr	r3, [pc, #668]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb2:	4aa6      	ldr	r2, [pc, #664]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cb8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cc6:	4ba1      	ldr	r3, [pc, #644]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ccc:	f023 0203 	bic.w	r2, r3, #3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	499d      	ldr	r1, [pc, #628]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ce8:	4b98      	ldr	r3, [pc, #608]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cee:	f023 020c 	bic.w	r2, r3, #12
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	4995      	ldr	r1, [pc, #596]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d0a:	4b90      	ldr	r3, [pc, #576]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d10:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	498c      	ldr	r1, [pc, #560]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d2c:	4b87      	ldr	r3, [pc, #540]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	4984      	ldr	r1, [pc, #528]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d4e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	497b      	ldr	r1, [pc, #492]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d70:	4b76      	ldr	r3, [pc, #472]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	4973      	ldr	r1, [pc, #460]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d92:	4b6e      	ldr	r3, [pc, #440]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d98:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	496a      	ldr	r1, [pc, #424]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004db4:	4b65      	ldr	r3, [pc, #404]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	4962      	ldr	r1, [pc, #392]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ddc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de4:	4959      	ldr	r1, [pc, #356]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004df8:	4b54      	ldr	r3, [pc, #336]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dfe:	f023 0203 	bic.w	r2, r3, #3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e06:	4951      	ldr	r1, [pc, #324]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e1a:	4b4c      	ldr	r3, [pc, #304]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e28:	4948      	ldr	r1, [pc, #288]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d015      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e3c:	4b43      	ldr	r3, [pc, #268]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4a:	4940      	ldr	r1, [pc, #256]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e5a:	d105      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4a3a      	ldr	r2, [pc, #232]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d015      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e74:	4b35      	ldr	r3, [pc, #212]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e82:	4932      	ldr	r1, [pc, #200]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e92:	d105      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e94:	4b2d      	ldr	r3, [pc, #180]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4a2c      	ldr	r2, [pc, #176]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e9e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d015      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004eac:	4b27      	ldr	r3, [pc, #156]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eba:	4924      	ldr	r1, [pc, #144]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eca:	d105      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ed6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d015      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ee4:	4b19      	ldr	r3, [pc, #100]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef2:	4916      	ldr	r1, [pc, #88]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f02:	d105      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f04:	4b11      	ldr	r3, [pc, #68]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	4a10      	ldr	r2, [pc, #64]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f0e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d019      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	4908      	ldr	r1, [pc, #32]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f3a:	d109      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f3c:	4b03      	ldr	r3, [pc, #12]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a02      	ldr	r2, [pc, #8]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f46:	60d3      	str	r3, [r2, #12]
 8004f48:	e002      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f4a:	bf00      	nop
 8004f4c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d015      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f5c:	4b29      	ldr	r3, [pc, #164]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f62:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f6a:	4926      	ldr	r1, [pc, #152]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f7a:	d105      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f7c:	4b21      	ldr	r3, [pc, #132]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	4a20      	ldr	r2, [pc, #128]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f86:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d015      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004f94:	4b1b      	ldr	r3, [pc, #108]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa2:	4918      	ldr	r1, [pc, #96]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fb4:	4b13      	ldr	r3, [pc, #76]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4a12      	ldr	r2, [pc, #72]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fbe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d015      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fda:	490a      	ldr	r1, [pc, #40]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fe6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fec:	4b05      	ldr	r3, [pc, #20]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4a04      	ldr	r2, [pc, #16]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ff6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ff8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40021000 	.word	0x40021000

08005008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e049      	b.n	80050ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d106      	bne.n	8005034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fc fd8c 	bl	8001b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f000 ff68 	bl	8005f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d001      	beq.n	80050d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e04c      	b.n	800516a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a26      	ldr	r2, [pc, #152]	@ (8005178 <HAL_TIM_Base_Start+0xc0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d022      	beq.n	8005128 <HAL_TIM_Base_Start+0x70>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ea:	d01d      	beq.n	8005128 <HAL_TIM_Base_Start+0x70>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a22      	ldr	r2, [pc, #136]	@ (800517c <HAL_TIM_Base_Start+0xc4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d018      	beq.n	8005128 <HAL_TIM_Base_Start+0x70>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a21      	ldr	r2, [pc, #132]	@ (8005180 <HAL_TIM_Base_Start+0xc8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d013      	beq.n	8005128 <HAL_TIM_Base_Start+0x70>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1f      	ldr	r2, [pc, #124]	@ (8005184 <HAL_TIM_Base_Start+0xcc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00e      	beq.n	8005128 <HAL_TIM_Base_Start+0x70>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1e      	ldr	r2, [pc, #120]	@ (8005188 <HAL_TIM_Base_Start+0xd0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d009      	beq.n	8005128 <HAL_TIM_Base_Start+0x70>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1c      	ldr	r2, [pc, #112]	@ (800518c <HAL_TIM_Base_Start+0xd4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d004      	beq.n	8005128 <HAL_TIM_Base_Start+0x70>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1b      	ldr	r2, [pc, #108]	@ (8005190 <HAL_TIM_Base_Start+0xd8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d115      	bne.n	8005154 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	4b19      	ldr	r3, [pc, #100]	@ (8005194 <HAL_TIM_Base_Start+0xdc>)
 8005130:	4013      	ands	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b06      	cmp	r3, #6
 8005138:	d015      	beq.n	8005166 <HAL_TIM_Base_Start+0xae>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005140:	d011      	beq.n	8005166 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005152:	e008      	b.n	8005166 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e000      	b.n	8005168 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005166:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40000400 	.word	0x40000400
 8005180:	40000800 	.word	0x40000800
 8005184:	40000c00 	.word	0x40000c00
 8005188:	40013400 	.word	0x40013400
 800518c:	40014000 	.word	0x40014000
 8005190:	40015000 	.word	0x40015000
 8005194:	00010007 	.word	0x00010007

08005198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d001      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e054      	b.n	800525a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a26      	ldr	r2, [pc, #152]	@ (8005268 <HAL_TIM_Base_Start_IT+0xd0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d022      	beq.n	8005218 <HAL_TIM_Base_Start_IT+0x80>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051da:	d01d      	beq.n	8005218 <HAL_TIM_Base_Start_IT+0x80>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a22      	ldr	r2, [pc, #136]	@ (800526c <HAL_TIM_Base_Start_IT+0xd4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d018      	beq.n	8005218 <HAL_TIM_Base_Start_IT+0x80>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a21      	ldr	r2, [pc, #132]	@ (8005270 <HAL_TIM_Base_Start_IT+0xd8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <HAL_TIM_Base_Start_IT+0x80>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005274 <HAL_TIM_Base_Start_IT+0xdc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00e      	beq.n	8005218 <HAL_TIM_Base_Start_IT+0x80>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005278 <HAL_TIM_Base_Start_IT+0xe0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d009      	beq.n	8005218 <HAL_TIM_Base_Start_IT+0x80>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1c      	ldr	r2, [pc, #112]	@ (800527c <HAL_TIM_Base_Start_IT+0xe4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <HAL_TIM_Base_Start_IT+0x80>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1b      	ldr	r2, [pc, #108]	@ (8005280 <HAL_TIM_Base_Start_IT+0xe8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d115      	bne.n	8005244 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	4b19      	ldr	r3, [pc, #100]	@ (8005284 <HAL_TIM_Base_Start_IT+0xec>)
 8005220:	4013      	ands	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b06      	cmp	r3, #6
 8005228:	d015      	beq.n	8005256 <HAL_TIM_Base_Start_IT+0xbe>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005230:	d011      	beq.n	8005256 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0201 	orr.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005242:	e008      	b.n	8005256 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	e000      	b.n	8005258 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005256:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40012c00 	.word	0x40012c00
 800526c:	40000400 	.word	0x40000400
 8005270:	40000800 	.word	0x40000800
 8005274:	40000c00 	.word	0x40000c00
 8005278:	40013400 	.word	0x40013400
 800527c:	40014000 	.word	0x40014000
 8005280:	40015000 	.word	0x40015000
 8005284:	00010007 	.word	0x00010007

08005288 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e049      	b.n	800532e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f841 	bl	8005336 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f000 fe28 	bl	8005f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
	...

0800534c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d109      	bne.n	8005370 <HAL_TIM_PWM_Start+0x24>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	e03c      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b04      	cmp	r3, #4
 8005374:	d109      	bne.n	800538a <HAL_TIM_PWM_Start+0x3e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	bf14      	ite	ne
 8005382:	2301      	movne	r3, #1
 8005384:	2300      	moveq	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	e02f      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d109      	bne.n	80053a4 <HAL_TIM_PWM_Start+0x58>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	bf14      	ite	ne
 800539c:	2301      	movne	r3, #1
 800539e:	2300      	moveq	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e022      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b0c      	cmp	r3, #12
 80053a8:	d109      	bne.n	80053be <HAL_TIM_PWM_Start+0x72>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	bf14      	ite	ne
 80053b6:	2301      	movne	r3, #1
 80053b8:	2300      	moveq	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	e015      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d109      	bne.n	80053d8 <HAL_TIM_PWM_Start+0x8c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	bf14      	ite	ne
 80053d0:	2301      	movne	r3, #1
 80053d2:	2300      	moveq	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	e008      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	bf14      	ite	ne
 80053e4:	2301      	movne	r3, #1
 80053e6:	2300      	moveq	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e0a6      	b.n	8005540 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d104      	bne.n	8005402 <HAL_TIM_PWM_Start+0xb6>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005400:	e023      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b04      	cmp	r3, #4
 8005406:	d104      	bne.n	8005412 <HAL_TIM_PWM_Start+0xc6>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005410:	e01b      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b08      	cmp	r3, #8
 8005416:	d104      	bne.n	8005422 <HAL_TIM_PWM_Start+0xd6>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005420:	e013      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b0c      	cmp	r3, #12
 8005426:	d104      	bne.n	8005432 <HAL_TIM_PWM_Start+0xe6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005430:	e00b      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b10      	cmp	r3, #16
 8005436:	d104      	bne.n	8005442 <HAL_TIM_PWM_Start+0xf6>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005440:	e003      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f001 f9dc 	bl	8006810 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a3a      	ldr	r2, [pc, #232]	@ (8005548 <HAL_TIM_PWM_Start+0x1fc>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d018      	beq.n	8005494 <HAL_TIM_PWM_Start+0x148>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a39      	ldr	r2, [pc, #228]	@ (800554c <HAL_TIM_PWM_Start+0x200>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d013      	beq.n	8005494 <HAL_TIM_PWM_Start+0x148>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a37      	ldr	r2, [pc, #220]	@ (8005550 <HAL_TIM_PWM_Start+0x204>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00e      	beq.n	8005494 <HAL_TIM_PWM_Start+0x148>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a36      	ldr	r2, [pc, #216]	@ (8005554 <HAL_TIM_PWM_Start+0x208>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d009      	beq.n	8005494 <HAL_TIM_PWM_Start+0x148>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a34      	ldr	r2, [pc, #208]	@ (8005558 <HAL_TIM_PWM_Start+0x20c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d004      	beq.n	8005494 <HAL_TIM_PWM_Start+0x148>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a33      	ldr	r2, [pc, #204]	@ (800555c <HAL_TIM_PWM_Start+0x210>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d101      	bne.n	8005498 <HAL_TIM_PWM_Start+0x14c>
 8005494:	2301      	movs	r3, #1
 8005496:	e000      	b.n	800549a <HAL_TIM_PWM_Start+0x14e>
 8005498:	2300      	movs	r3, #0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d007      	beq.n	80054ae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a25      	ldr	r2, [pc, #148]	@ (8005548 <HAL_TIM_PWM_Start+0x1fc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d022      	beq.n	80054fe <HAL_TIM_PWM_Start+0x1b2>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c0:	d01d      	beq.n	80054fe <HAL_TIM_PWM_Start+0x1b2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a26      	ldr	r2, [pc, #152]	@ (8005560 <HAL_TIM_PWM_Start+0x214>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d018      	beq.n	80054fe <HAL_TIM_PWM_Start+0x1b2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a24      	ldr	r2, [pc, #144]	@ (8005564 <HAL_TIM_PWM_Start+0x218>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d013      	beq.n	80054fe <HAL_TIM_PWM_Start+0x1b2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a23      	ldr	r2, [pc, #140]	@ (8005568 <HAL_TIM_PWM_Start+0x21c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00e      	beq.n	80054fe <HAL_TIM_PWM_Start+0x1b2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a19      	ldr	r2, [pc, #100]	@ (800554c <HAL_TIM_PWM_Start+0x200>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d009      	beq.n	80054fe <HAL_TIM_PWM_Start+0x1b2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a18      	ldr	r2, [pc, #96]	@ (8005550 <HAL_TIM_PWM_Start+0x204>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d004      	beq.n	80054fe <HAL_TIM_PWM_Start+0x1b2>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a18      	ldr	r2, [pc, #96]	@ (800555c <HAL_TIM_PWM_Start+0x210>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d115      	bne.n	800552a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	4b19      	ldr	r3, [pc, #100]	@ (800556c <HAL_TIM_PWM_Start+0x220>)
 8005506:	4013      	ands	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b06      	cmp	r3, #6
 800550e:	d015      	beq.n	800553c <HAL_TIM_PWM_Start+0x1f0>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005516:	d011      	beq.n	800553c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005528:	e008      	b.n	800553c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0201 	orr.w	r2, r2, #1
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e000      	b.n	800553e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40013400 	.word	0x40013400
 8005550:	40014000 	.word	0x40014000
 8005554:	40014400 	.word	0x40014400
 8005558:	40014800 	.word	0x40014800
 800555c:	40015000 	.word	0x40015000
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40000c00 	.word	0x40000c00
 800556c:	00010007 	.word	0x00010007

08005570 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e097      	b.n	80056b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d106      	bne.n	800559e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7fc fb11 	bl	8001bc0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2202      	movs	r2, #2
 80055a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80055b4:	f023 0307 	bic.w	r3, r3, #7
 80055b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3304      	adds	r3, #4
 80055c2:	4619      	mov	r1, r3
 80055c4:	4610      	mov	r0, r2
 80055c6:	f000 fca9 	bl	8005f1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055f2:	f023 0303 	bic.w	r3, r3, #3
 80055f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	4313      	orrs	r3, r2
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005610:	f023 030c 	bic.w	r3, r3, #12
 8005614:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800561c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	4313      	orrs	r3, r2
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	011a      	lsls	r2, r3, #4
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	031b      	lsls	r3, r3, #12
 8005640:	4313      	orrs	r3, r2
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800564e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005656:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	4313      	orrs	r3, r2
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d110      	bne.n	800570e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d102      	bne.n	80056f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80056f2:	7b7b      	ldrb	r3, [r7, #13]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d001      	beq.n	80056fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e069      	b.n	80057d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800570c:	e031      	b.n	8005772 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b04      	cmp	r3, #4
 8005712:	d110      	bne.n	8005736 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005714:	7bbb      	ldrb	r3, [r7, #14]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d102      	bne.n	8005720 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800571a:	7b3b      	ldrb	r3, [r7, #12]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d001      	beq.n	8005724 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e055      	b.n	80057d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005734:	e01d      	b.n	8005772 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d108      	bne.n	800574e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800573c:	7bbb      	ldrb	r3, [r7, #14]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d105      	bne.n	800574e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005742:	7b7b      	ldrb	r3, [r7, #13]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d102      	bne.n	800574e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005748:	7b3b      	ldrb	r3, [r7, #12]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d001      	beq.n	8005752 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e03e      	b.n	80057d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2202      	movs	r2, #2
 8005756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2202      	movs	r2, #2
 800575e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2202      	movs	r2, #2
 8005766:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2202      	movs	r2, #2
 800576e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_TIM_Encoder_Start+0xc4>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b04      	cmp	r3, #4
 800577c:	d008      	beq.n	8005790 <HAL_TIM_Encoder_Start+0xd4>
 800577e:	e00f      	b.n	80057a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2201      	movs	r2, #1
 8005786:	2100      	movs	r1, #0
 8005788:	4618      	mov	r0, r3
 800578a:	f001 f841 	bl	8006810 <TIM_CCxChannelCmd>
      break;
 800578e:	e016      	b.n	80057be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2201      	movs	r2, #1
 8005796:	2104      	movs	r1, #4
 8005798:	4618      	mov	r0, r3
 800579a:	f001 f839 	bl	8006810 <TIM_CCxChannelCmd>
      break;
 800579e:	e00e      	b.n	80057be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2201      	movs	r2, #1
 80057a6:	2100      	movs	r1, #0
 80057a8:	4618      	mov	r0, r3
 80057aa:	f001 f831 	bl	8006810 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2201      	movs	r2, #1
 80057b4:	2104      	movs	r1, #4
 80057b6:	4618      	mov	r0, r3
 80057b8:	f001 f82a 	bl	8006810 <TIM_CCxChannelCmd>
      break;
 80057bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0201 	orr.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d020      	beq.n	800583c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01b      	beq.n	800583c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0202 	mvn.w	r2, #2
 800580c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fb5c 	bl	8005ee0 <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fb4e 	bl	8005ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fb5f 	bl	8005ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b00      	cmp	r3, #0
 8005844:	d020      	beq.n	8005888 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01b      	beq.n	8005888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0204 	mvn.w	r2, #4
 8005858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2202      	movs	r2, #2
 800585e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fb36 	bl	8005ee0 <HAL_TIM_IC_CaptureCallback>
 8005874:	e005      	b.n	8005882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fb28 	bl	8005ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fb39 	bl	8005ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d020      	beq.n	80058d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01b      	beq.n	80058d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0208 	mvn.w	r2, #8
 80058a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2204      	movs	r2, #4
 80058aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fb10 	bl	8005ee0 <HAL_TIM_IC_CaptureCallback>
 80058c0:	e005      	b.n	80058ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fb02 	bl	8005ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fb13 	bl	8005ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d020      	beq.n	8005920 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f003 0310 	and.w	r3, r3, #16
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01b      	beq.n	8005920 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0210 	mvn.w	r2, #16
 80058f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2208      	movs	r2, #8
 80058f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 faea 	bl	8005ee0 <HAL_TIM_IC_CaptureCallback>
 800590c:	e005      	b.n	800591a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fadc 	bl	8005ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 faed 	bl	8005ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00c      	beq.n	8005944 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d007      	beq.n	8005944 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0201 	mvn.w	r2, #1
 800593c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fb fdae 	bl	80014a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594a:	2b00      	cmp	r3, #0
 800594c:	d104      	bne.n	8005958 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00c      	beq.n	8005972 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800596a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 f8a9 	bl	8006ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00c      	beq.n	8005996 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800598e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 f8a1 	bl	8006ad8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00c      	beq.n	80059ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d007      	beq.n	80059ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 faa7 	bl	8005f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00c      	beq.n	80059de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d007      	beq.n	80059de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f06f 0220 	mvn.w	r2, #32
 80059d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f001 f869 	bl	8006ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00c      	beq.n	8005a02 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80059fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 f875 	bl	8006aec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00c      	beq.n	8005a26 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d007      	beq.n	8005a26 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 f86d 	bl	8006b00 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00c      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f001 f865 	bl	8006b14 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00c      	beq.n	8005a6e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d007      	beq.n	8005a6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f001 f85d 	bl	8006b28 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e0ff      	b.n	8005c96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b14      	cmp	r3, #20
 8005aa2:	f200 80f0 	bhi.w	8005c86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8005aac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aac:	08005b01 	.word	0x08005b01
 8005ab0:	08005c87 	.word	0x08005c87
 8005ab4:	08005c87 	.word	0x08005c87
 8005ab8:	08005c87 	.word	0x08005c87
 8005abc:	08005b41 	.word	0x08005b41
 8005ac0:	08005c87 	.word	0x08005c87
 8005ac4:	08005c87 	.word	0x08005c87
 8005ac8:	08005c87 	.word	0x08005c87
 8005acc:	08005b83 	.word	0x08005b83
 8005ad0:	08005c87 	.word	0x08005c87
 8005ad4:	08005c87 	.word	0x08005c87
 8005ad8:	08005c87 	.word	0x08005c87
 8005adc:	08005bc3 	.word	0x08005bc3
 8005ae0:	08005c87 	.word	0x08005c87
 8005ae4:	08005c87 	.word	0x08005c87
 8005ae8:	08005c87 	.word	0x08005c87
 8005aec:	08005c05 	.word	0x08005c05
 8005af0:	08005c87 	.word	0x08005c87
 8005af4:	08005c87 	.word	0x08005c87
 8005af8:	08005c87 	.word	0x08005c87
 8005afc:	08005c45 	.word	0x08005c45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fabc 	bl	8006084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0208 	orr.w	r2, r2, #8
 8005b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0204 	bic.w	r2, r2, #4
 8005b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6999      	ldr	r1, [r3, #24]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	619a      	str	r2, [r3, #24]
      break;
 8005b3e:	e0a5      	b.n	8005c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fb36 	bl	80061b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699a      	ldr	r2, [r3, #24]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6999      	ldr	r1, [r3, #24]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	021a      	lsls	r2, r3, #8
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	619a      	str	r2, [r3, #24]
      break;
 8005b80:	e084      	b.n	8005c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 fba9 	bl	80062e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0208 	orr.w	r2, r2, #8
 8005b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69da      	ldr	r2, [r3, #28]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0204 	bic.w	r2, r2, #4
 8005bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69d9      	ldr	r1, [r3, #28]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	61da      	str	r2, [r3, #28]
      break;
 8005bc0:	e064      	b.n	8005c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 fc1b 	bl	8006404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69d9      	ldr	r1, [r3, #28]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	021a      	lsls	r2, r3, #8
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	61da      	str	r2, [r3, #28]
      break;
 8005c02:	e043      	b.n	8005c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68b9      	ldr	r1, [r7, #8]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fc8e 	bl	800652c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0208 	orr.w	r2, r2, #8
 8005c1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0204 	bic.w	r2, r2, #4
 8005c2e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	691a      	ldr	r2, [r3, #16]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c42:	e023      	b.n	8005c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68b9      	ldr	r1, [r7, #8]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 fcd8 	bl	8006600 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c6e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	021a      	lsls	r2, r3, #8
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c84:	e002      	b.n	8005c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	75fb      	strb	r3, [r7, #23]
      break;
 8005c8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop

08005ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_TIM_ConfigClockSource+0x1c>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e0f6      	b.n	8005eaa <HAL_TIM_ConfigClockSource+0x20a>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005cda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a6f      	ldr	r2, [pc, #444]	@ (8005eb4 <HAL_TIM_ConfigClockSource+0x214>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	f000 80c1 	beq.w	8005e7e <HAL_TIM_ConfigClockSource+0x1de>
 8005cfc:	4a6d      	ldr	r2, [pc, #436]	@ (8005eb4 <HAL_TIM_ConfigClockSource+0x214>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	f200 80c6 	bhi.w	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d04:	4a6c      	ldr	r2, [pc, #432]	@ (8005eb8 <HAL_TIM_ConfigClockSource+0x218>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	f000 80b9 	beq.w	8005e7e <HAL_TIM_ConfigClockSource+0x1de>
 8005d0c:	4a6a      	ldr	r2, [pc, #424]	@ (8005eb8 <HAL_TIM_ConfigClockSource+0x218>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	f200 80be 	bhi.w	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d14:	4a69      	ldr	r2, [pc, #420]	@ (8005ebc <HAL_TIM_ConfigClockSource+0x21c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	f000 80b1 	beq.w	8005e7e <HAL_TIM_ConfigClockSource+0x1de>
 8005d1c:	4a67      	ldr	r2, [pc, #412]	@ (8005ebc <HAL_TIM_ConfigClockSource+0x21c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	f200 80b6 	bhi.w	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d24:	4a66      	ldr	r2, [pc, #408]	@ (8005ec0 <HAL_TIM_ConfigClockSource+0x220>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	f000 80a9 	beq.w	8005e7e <HAL_TIM_ConfigClockSource+0x1de>
 8005d2c:	4a64      	ldr	r2, [pc, #400]	@ (8005ec0 <HAL_TIM_ConfigClockSource+0x220>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	f200 80ae 	bhi.w	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d34:	4a63      	ldr	r2, [pc, #396]	@ (8005ec4 <HAL_TIM_ConfigClockSource+0x224>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	f000 80a1 	beq.w	8005e7e <HAL_TIM_ConfigClockSource+0x1de>
 8005d3c:	4a61      	ldr	r2, [pc, #388]	@ (8005ec4 <HAL_TIM_ConfigClockSource+0x224>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	f200 80a6 	bhi.w	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d44:	4a60      	ldr	r2, [pc, #384]	@ (8005ec8 <HAL_TIM_ConfigClockSource+0x228>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	f000 8099 	beq.w	8005e7e <HAL_TIM_ConfigClockSource+0x1de>
 8005d4c:	4a5e      	ldr	r2, [pc, #376]	@ (8005ec8 <HAL_TIM_ConfigClockSource+0x228>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	f200 809e 	bhi.w	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d58:	f000 8091 	beq.w	8005e7e <HAL_TIM_ConfigClockSource+0x1de>
 8005d5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d60:	f200 8096 	bhi.w	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d68:	f000 8089 	beq.w	8005e7e <HAL_TIM_ConfigClockSource+0x1de>
 8005d6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d70:	f200 808e 	bhi.w	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d78:	d03e      	beq.n	8005df8 <HAL_TIM_ConfigClockSource+0x158>
 8005d7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d7e:	f200 8087 	bhi.w	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d86:	f000 8086 	beq.w	8005e96 <HAL_TIM_ConfigClockSource+0x1f6>
 8005d8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d8e:	d87f      	bhi.n	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d90:	2b70      	cmp	r3, #112	@ 0x70
 8005d92:	d01a      	beq.n	8005dca <HAL_TIM_ConfigClockSource+0x12a>
 8005d94:	2b70      	cmp	r3, #112	@ 0x70
 8005d96:	d87b      	bhi.n	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d98:	2b60      	cmp	r3, #96	@ 0x60
 8005d9a:	d050      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0x19e>
 8005d9c:	2b60      	cmp	r3, #96	@ 0x60
 8005d9e:	d877      	bhi.n	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005da0:	2b50      	cmp	r3, #80	@ 0x50
 8005da2:	d03c      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x17e>
 8005da4:	2b50      	cmp	r3, #80	@ 0x50
 8005da6:	d873      	bhi.n	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005da8:	2b40      	cmp	r3, #64	@ 0x40
 8005daa:	d058      	beq.n	8005e5e <HAL_TIM_ConfigClockSource+0x1be>
 8005dac:	2b40      	cmp	r3, #64	@ 0x40
 8005dae:	d86f      	bhi.n	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005db0:	2b30      	cmp	r3, #48	@ 0x30
 8005db2:	d064      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x1de>
 8005db4:	2b30      	cmp	r3, #48	@ 0x30
 8005db6:	d86b      	bhi.n	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005db8:	2b20      	cmp	r3, #32
 8005dba:	d060      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x1de>
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d867      	bhi.n	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d05c      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x1de>
 8005dc4:	2b10      	cmp	r3, #16
 8005dc6:	d05a      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x1de>
 8005dc8:	e062      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dda:	f000 fcf9 	bl	80067d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005dec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	609a      	str	r2, [r3, #8]
      break;
 8005df6:	e04f      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e08:	f000 fce2 	bl	80067d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e1a:	609a      	str	r2, [r3, #8]
      break;
 8005e1c:	e03c      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f000 fc54 	bl	80066d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2150      	movs	r1, #80	@ 0x50
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fcad 	bl	8006796 <TIM_ITRx_SetConfig>
      break;
 8005e3c:	e02c      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f000 fc73 	bl	8006736 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2160      	movs	r1, #96	@ 0x60
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fc9d 	bl	8006796 <TIM_ITRx_SetConfig>
      break;
 8005e5c:	e01c      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f000 fc34 	bl	80066d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2140      	movs	r1, #64	@ 0x40
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fc8d 	bl	8006796 <TIM_ITRx_SetConfig>
      break;
 8005e7c:	e00c      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f000 fc84 	bl	8006796 <TIM_ITRx_SetConfig>
      break;
 8005e8e:	e003      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]
      break;
 8005e94:	e000      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005e96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	00100070 	.word	0x00100070
 8005eb8:	00100060 	.word	0x00100060
 8005ebc:	00100050 	.word	0x00100050
 8005ec0:	00100040 	.word	0x00100040
 8005ec4:	00100030 	.word	0x00100030
 8005ec8:	00100020 	.word	0x00100020

08005ecc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a4c      	ldr	r2, [pc, #304]	@ (8006060 <TIM_Base_SetConfig+0x144>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d017      	beq.n	8005f64 <TIM_Base_SetConfig+0x48>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f3a:	d013      	beq.n	8005f64 <TIM_Base_SetConfig+0x48>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a49      	ldr	r2, [pc, #292]	@ (8006064 <TIM_Base_SetConfig+0x148>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00f      	beq.n	8005f64 <TIM_Base_SetConfig+0x48>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a48      	ldr	r2, [pc, #288]	@ (8006068 <TIM_Base_SetConfig+0x14c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00b      	beq.n	8005f64 <TIM_Base_SetConfig+0x48>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a47      	ldr	r2, [pc, #284]	@ (800606c <TIM_Base_SetConfig+0x150>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d007      	beq.n	8005f64 <TIM_Base_SetConfig+0x48>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a46      	ldr	r2, [pc, #280]	@ (8006070 <TIM_Base_SetConfig+0x154>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d003      	beq.n	8005f64 <TIM_Base_SetConfig+0x48>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a45      	ldr	r2, [pc, #276]	@ (8006074 <TIM_Base_SetConfig+0x158>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d108      	bne.n	8005f76 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a39      	ldr	r2, [pc, #228]	@ (8006060 <TIM_Base_SetConfig+0x144>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d023      	beq.n	8005fc6 <TIM_Base_SetConfig+0xaa>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f84:	d01f      	beq.n	8005fc6 <TIM_Base_SetConfig+0xaa>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a36      	ldr	r2, [pc, #216]	@ (8006064 <TIM_Base_SetConfig+0x148>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d01b      	beq.n	8005fc6 <TIM_Base_SetConfig+0xaa>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a35      	ldr	r2, [pc, #212]	@ (8006068 <TIM_Base_SetConfig+0x14c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d017      	beq.n	8005fc6 <TIM_Base_SetConfig+0xaa>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a34      	ldr	r2, [pc, #208]	@ (800606c <TIM_Base_SetConfig+0x150>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d013      	beq.n	8005fc6 <TIM_Base_SetConfig+0xaa>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a33      	ldr	r2, [pc, #204]	@ (8006070 <TIM_Base_SetConfig+0x154>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00f      	beq.n	8005fc6 <TIM_Base_SetConfig+0xaa>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a33      	ldr	r2, [pc, #204]	@ (8006078 <TIM_Base_SetConfig+0x15c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00b      	beq.n	8005fc6 <TIM_Base_SetConfig+0xaa>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a32      	ldr	r2, [pc, #200]	@ (800607c <TIM_Base_SetConfig+0x160>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <TIM_Base_SetConfig+0xaa>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a31      	ldr	r2, [pc, #196]	@ (8006080 <TIM_Base_SetConfig+0x164>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_Base_SetConfig+0xaa>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a2c      	ldr	r2, [pc, #176]	@ (8006074 <TIM_Base_SetConfig+0x158>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d108      	bne.n	8005fd8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a18      	ldr	r2, [pc, #96]	@ (8006060 <TIM_Base_SetConfig+0x144>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d013      	beq.n	800602c <TIM_Base_SetConfig+0x110>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a1a      	ldr	r2, [pc, #104]	@ (8006070 <TIM_Base_SetConfig+0x154>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00f      	beq.n	800602c <TIM_Base_SetConfig+0x110>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a1a      	ldr	r2, [pc, #104]	@ (8006078 <TIM_Base_SetConfig+0x15c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00b      	beq.n	800602c <TIM_Base_SetConfig+0x110>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a19      	ldr	r2, [pc, #100]	@ (800607c <TIM_Base_SetConfig+0x160>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d007      	beq.n	800602c <TIM_Base_SetConfig+0x110>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a18      	ldr	r2, [pc, #96]	@ (8006080 <TIM_Base_SetConfig+0x164>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d003      	beq.n	800602c <TIM_Base_SetConfig+0x110>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a13      	ldr	r2, [pc, #76]	@ (8006074 <TIM_Base_SetConfig+0x158>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d103      	bne.n	8006034 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b01      	cmp	r3, #1
 8006044:	d105      	bne.n	8006052 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f023 0201 	bic.w	r2, r3, #1
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	611a      	str	r2, [r3, #16]
  }
}
 8006052:	bf00      	nop
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40012c00 	.word	0x40012c00
 8006064:	40000400 	.word	0x40000400
 8006068:	40000800 	.word	0x40000800
 800606c:	40000c00 	.word	0x40000c00
 8006070:	40013400 	.word	0x40013400
 8006074:	40015000 	.word	0x40015000
 8006078:	40014000 	.word	0x40014000
 800607c:	40014400 	.word	0x40014400
 8006080:	40014800 	.word	0x40014800

08006084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	f023 0201 	bic.w	r2, r3, #1
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0303 	bic.w	r3, r3, #3
 80060be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f023 0302 	bic.w	r3, r3, #2
 80060d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a30      	ldr	r2, [pc, #192]	@ (80061a0 <TIM_OC1_SetConfig+0x11c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d013      	beq.n	800610c <TIM_OC1_SetConfig+0x88>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a2f      	ldr	r2, [pc, #188]	@ (80061a4 <TIM_OC1_SetConfig+0x120>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00f      	beq.n	800610c <TIM_OC1_SetConfig+0x88>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a2e      	ldr	r2, [pc, #184]	@ (80061a8 <TIM_OC1_SetConfig+0x124>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00b      	beq.n	800610c <TIM_OC1_SetConfig+0x88>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a2d      	ldr	r2, [pc, #180]	@ (80061ac <TIM_OC1_SetConfig+0x128>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d007      	beq.n	800610c <TIM_OC1_SetConfig+0x88>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a2c      	ldr	r2, [pc, #176]	@ (80061b0 <TIM_OC1_SetConfig+0x12c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_OC1_SetConfig+0x88>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a2b      	ldr	r2, [pc, #172]	@ (80061b4 <TIM_OC1_SetConfig+0x130>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d10c      	bne.n	8006126 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f023 0308 	bic.w	r3, r3, #8
 8006112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f023 0304 	bic.w	r3, r3, #4
 8006124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a1d      	ldr	r2, [pc, #116]	@ (80061a0 <TIM_OC1_SetConfig+0x11c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d013      	beq.n	8006156 <TIM_OC1_SetConfig+0xd2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a1c      	ldr	r2, [pc, #112]	@ (80061a4 <TIM_OC1_SetConfig+0x120>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00f      	beq.n	8006156 <TIM_OC1_SetConfig+0xd2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a1b      	ldr	r2, [pc, #108]	@ (80061a8 <TIM_OC1_SetConfig+0x124>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00b      	beq.n	8006156 <TIM_OC1_SetConfig+0xd2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a1a      	ldr	r2, [pc, #104]	@ (80061ac <TIM_OC1_SetConfig+0x128>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d007      	beq.n	8006156 <TIM_OC1_SetConfig+0xd2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a19      	ldr	r2, [pc, #100]	@ (80061b0 <TIM_OC1_SetConfig+0x12c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d003      	beq.n	8006156 <TIM_OC1_SetConfig+0xd2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a18      	ldr	r2, [pc, #96]	@ (80061b4 <TIM_OC1_SetConfig+0x130>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d111      	bne.n	800617a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800615c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	621a      	str	r2, [r3, #32]
}
 8006194:	bf00      	nop
 8006196:	371c      	adds	r7, #28
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	40012c00 	.word	0x40012c00
 80061a4:	40013400 	.word	0x40013400
 80061a8:	40014000 	.word	0x40014000
 80061ac:	40014400 	.word	0x40014400
 80061b0:	40014800 	.word	0x40014800
 80061b4:	40015000 	.word	0x40015000

080061b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f023 0210 	bic.w	r2, r3, #16
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f023 0320 	bic.w	r3, r3, #32
 8006206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	011b      	lsls	r3, r3, #4
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a2c      	ldr	r2, [pc, #176]	@ (80062c8 <TIM_OC2_SetConfig+0x110>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d007      	beq.n	800622c <TIM_OC2_SetConfig+0x74>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a2b      	ldr	r2, [pc, #172]	@ (80062cc <TIM_OC2_SetConfig+0x114>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d003      	beq.n	800622c <TIM_OC2_SetConfig+0x74>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a2a      	ldr	r2, [pc, #168]	@ (80062d0 <TIM_OC2_SetConfig+0x118>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d10d      	bne.n	8006248 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006246:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a1f      	ldr	r2, [pc, #124]	@ (80062c8 <TIM_OC2_SetConfig+0x110>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d013      	beq.n	8006278 <TIM_OC2_SetConfig+0xc0>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a1e      	ldr	r2, [pc, #120]	@ (80062cc <TIM_OC2_SetConfig+0x114>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00f      	beq.n	8006278 <TIM_OC2_SetConfig+0xc0>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a1e      	ldr	r2, [pc, #120]	@ (80062d4 <TIM_OC2_SetConfig+0x11c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00b      	beq.n	8006278 <TIM_OC2_SetConfig+0xc0>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a1d      	ldr	r2, [pc, #116]	@ (80062d8 <TIM_OC2_SetConfig+0x120>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d007      	beq.n	8006278 <TIM_OC2_SetConfig+0xc0>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a1c      	ldr	r2, [pc, #112]	@ (80062dc <TIM_OC2_SetConfig+0x124>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d003      	beq.n	8006278 <TIM_OC2_SetConfig+0xc0>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a17      	ldr	r2, [pc, #92]	@ (80062d0 <TIM_OC2_SetConfig+0x118>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d113      	bne.n	80062a0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800627e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006286:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	4313      	orrs	r3, r2
 800629e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	621a      	str	r2, [r3, #32]
}
 80062ba:	bf00      	nop
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	40012c00 	.word	0x40012c00
 80062cc:	40013400 	.word	0x40013400
 80062d0:	40015000 	.word	0x40015000
 80062d4:	40014000 	.word	0x40014000
 80062d8:	40014400 	.word	0x40014400
 80062dc:	40014800 	.word	0x40014800

080062e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800630e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0303 	bic.w	r3, r3, #3
 800631a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800632c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a2b      	ldr	r2, [pc, #172]	@ (80063ec <TIM_OC3_SetConfig+0x10c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d007      	beq.n	8006352 <TIM_OC3_SetConfig+0x72>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a2a      	ldr	r2, [pc, #168]	@ (80063f0 <TIM_OC3_SetConfig+0x110>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d003      	beq.n	8006352 <TIM_OC3_SetConfig+0x72>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a29      	ldr	r2, [pc, #164]	@ (80063f4 <TIM_OC3_SetConfig+0x114>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d10d      	bne.n	800636e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	021b      	lsls	r3, r3, #8
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	4313      	orrs	r3, r2
 8006364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800636c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a1e      	ldr	r2, [pc, #120]	@ (80063ec <TIM_OC3_SetConfig+0x10c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d013      	beq.n	800639e <TIM_OC3_SetConfig+0xbe>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a1d      	ldr	r2, [pc, #116]	@ (80063f0 <TIM_OC3_SetConfig+0x110>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00f      	beq.n	800639e <TIM_OC3_SetConfig+0xbe>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a1d      	ldr	r2, [pc, #116]	@ (80063f8 <TIM_OC3_SetConfig+0x118>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d00b      	beq.n	800639e <TIM_OC3_SetConfig+0xbe>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a1c      	ldr	r2, [pc, #112]	@ (80063fc <TIM_OC3_SetConfig+0x11c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d007      	beq.n	800639e <TIM_OC3_SetConfig+0xbe>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a1b      	ldr	r2, [pc, #108]	@ (8006400 <TIM_OC3_SetConfig+0x120>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d003      	beq.n	800639e <TIM_OC3_SetConfig+0xbe>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a16      	ldr	r2, [pc, #88]	@ (80063f4 <TIM_OC3_SetConfig+0x114>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d113      	bne.n	80063c6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	621a      	str	r2, [r3, #32]
}
 80063e0:	bf00      	nop
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	40012c00 	.word	0x40012c00
 80063f0:	40013400 	.word	0x40013400
 80063f4:	40015000 	.word	0x40015000
 80063f8:	40014000 	.word	0x40014000
 80063fc:	40014400 	.word	0x40014400
 8006400:	40014800 	.word	0x40014800

08006404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800643e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	031b      	lsls	r3, r3, #12
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a2c      	ldr	r2, [pc, #176]	@ (8006514 <TIM_OC4_SetConfig+0x110>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d007      	beq.n	8006478 <TIM_OC4_SetConfig+0x74>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a2b      	ldr	r2, [pc, #172]	@ (8006518 <TIM_OC4_SetConfig+0x114>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d003      	beq.n	8006478 <TIM_OC4_SetConfig+0x74>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a2a      	ldr	r2, [pc, #168]	@ (800651c <TIM_OC4_SetConfig+0x118>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d10d      	bne.n	8006494 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800647e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	031b      	lsls	r3, r3, #12
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006492:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a1f      	ldr	r2, [pc, #124]	@ (8006514 <TIM_OC4_SetConfig+0x110>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d013      	beq.n	80064c4 <TIM_OC4_SetConfig+0xc0>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a1e      	ldr	r2, [pc, #120]	@ (8006518 <TIM_OC4_SetConfig+0x114>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00f      	beq.n	80064c4 <TIM_OC4_SetConfig+0xc0>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006520 <TIM_OC4_SetConfig+0x11c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d00b      	beq.n	80064c4 <TIM_OC4_SetConfig+0xc0>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006524 <TIM_OC4_SetConfig+0x120>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d007      	beq.n	80064c4 <TIM_OC4_SetConfig+0xc0>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006528 <TIM_OC4_SetConfig+0x124>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_OC4_SetConfig+0xc0>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a17      	ldr	r2, [pc, #92]	@ (800651c <TIM_OC4_SetConfig+0x118>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d113      	bne.n	80064ec <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064ca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064d2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	019b      	lsls	r3, r3, #6
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	019b      	lsls	r3, r3, #6
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	621a      	str	r2, [r3, #32]
}
 8006506:	bf00      	nop
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40012c00 	.word	0x40012c00
 8006518:	40013400 	.word	0x40013400
 800651c:	40015000 	.word	0x40015000
 8006520:	40014000 	.word	0x40014000
 8006524:	40014400 	.word	0x40014400
 8006528:	40014800 	.word	0x40014800

0800652c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800655a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800655e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006570:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	041b      	lsls	r3, r3, #16
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	4313      	orrs	r3, r2
 800657c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a19      	ldr	r2, [pc, #100]	@ (80065e8 <TIM_OC5_SetConfig+0xbc>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <TIM_OC5_SetConfig+0x82>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a18      	ldr	r2, [pc, #96]	@ (80065ec <TIM_OC5_SetConfig+0xc0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00f      	beq.n	80065ae <TIM_OC5_SetConfig+0x82>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a17      	ldr	r2, [pc, #92]	@ (80065f0 <TIM_OC5_SetConfig+0xc4>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00b      	beq.n	80065ae <TIM_OC5_SetConfig+0x82>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a16      	ldr	r2, [pc, #88]	@ (80065f4 <TIM_OC5_SetConfig+0xc8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d007      	beq.n	80065ae <TIM_OC5_SetConfig+0x82>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a15      	ldr	r2, [pc, #84]	@ (80065f8 <TIM_OC5_SetConfig+0xcc>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d003      	beq.n	80065ae <TIM_OC5_SetConfig+0x82>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a14      	ldr	r2, [pc, #80]	@ (80065fc <TIM_OC5_SetConfig+0xd0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d109      	bne.n	80065c2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	021b      	lsls	r3, r3, #8
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	4313      	orrs	r3, r2
 80065c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	621a      	str	r2, [r3, #32]
}
 80065dc:	bf00      	nop
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	40012c00 	.word	0x40012c00
 80065ec:	40013400 	.word	0x40013400
 80065f0:	40014000 	.word	0x40014000
 80065f4:	40014400 	.word	0x40014400
 80065f8:	40014800 	.word	0x40014800
 80065fc:	40015000 	.word	0x40015000

08006600 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800662e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	021b      	lsls	r3, r3, #8
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	4313      	orrs	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	051b      	lsls	r3, r3, #20
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	4313      	orrs	r3, r2
 8006652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a1a      	ldr	r2, [pc, #104]	@ (80066c0 <TIM_OC6_SetConfig+0xc0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d013      	beq.n	8006684 <TIM_OC6_SetConfig+0x84>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a19      	ldr	r2, [pc, #100]	@ (80066c4 <TIM_OC6_SetConfig+0xc4>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00f      	beq.n	8006684 <TIM_OC6_SetConfig+0x84>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a18      	ldr	r2, [pc, #96]	@ (80066c8 <TIM_OC6_SetConfig+0xc8>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d00b      	beq.n	8006684 <TIM_OC6_SetConfig+0x84>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a17      	ldr	r2, [pc, #92]	@ (80066cc <TIM_OC6_SetConfig+0xcc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d007      	beq.n	8006684 <TIM_OC6_SetConfig+0x84>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a16      	ldr	r2, [pc, #88]	@ (80066d0 <TIM_OC6_SetConfig+0xd0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <TIM_OC6_SetConfig+0x84>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a15      	ldr	r2, [pc, #84]	@ (80066d4 <TIM_OC6_SetConfig+0xd4>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d109      	bne.n	8006698 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800668a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	029b      	lsls	r3, r3, #10
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	621a      	str	r2, [r3, #32]
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40012c00 	.word	0x40012c00
 80066c4:	40013400 	.word	0x40013400
 80066c8:	40014000 	.word	0x40014000
 80066cc:	40014400 	.word	0x40014400
 80066d0:	40014800 	.word	0x40014800
 80066d4:	40015000 	.word	0x40015000

080066d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f023 0201 	bic.w	r2, r3, #1
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f023 030a 	bic.w	r3, r3, #10
 8006714:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	4313      	orrs	r3, r2
 800671c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006736:	b480      	push	{r7}
 8006738:	b087      	sub	sp, #28
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	f023 0210 	bic.w	r2, r3, #16
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006760:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	031b      	lsls	r3, r3, #12
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006772:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	621a      	str	r2, [r3, #32]
}
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80067ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f043 0307 	orr.w	r3, r3, #7
 80067bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	609a      	str	r2, [r3, #8]
}
 80067c4:	bf00      	nop
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	021a      	lsls	r2, r3, #8
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	431a      	orrs	r2, r3
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	609a      	str	r2, [r3, #8]
}
 8006804:	bf00      	nop
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	2201      	movs	r2, #1
 8006824:	fa02 f303 	lsl.w	r3, r2, r3
 8006828:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6a1a      	ldr	r2, [r3, #32]
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	43db      	mvns	r3, r3
 8006832:	401a      	ands	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a1a      	ldr	r2, [r3, #32]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f003 031f 	and.w	r3, r3, #31
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	fa01 f303 	lsl.w	r3, r1, r3
 8006848:	431a      	orrs	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	621a      	str	r2, [r3, #32]
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
	...

0800685c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800686c:	2b01      	cmp	r3, #1
 800686e:	d101      	bne.n	8006874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006870:	2302      	movs	r3, #2
 8006872:	e074      	b.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a34      	ldr	r2, [pc, #208]	@ (800696c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d009      	beq.n	80068b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a33      	ldr	r2, [pc, #204]	@ (8006970 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d004      	beq.n	80068b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a31      	ldr	r2, [pc, #196]	@ (8006974 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d108      	bne.n	80068c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80068b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80068ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a21      	ldr	r2, [pc, #132]	@ (800696c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d022      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068f4:	d01d      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006978 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d018      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1d      	ldr	r2, [pc, #116]	@ (800697c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d013      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1c      	ldr	r2, [pc, #112]	@ (8006980 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00e      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a15      	ldr	r2, [pc, #84]	@ (8006970 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d009      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a18      	ldr	r2, [pc, #96]	@ (8006984 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a11      	ldr	r2, [pc, #68]	@ (8006974 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d10c      	bne.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	4313      	orrs	r3, r2
 8006942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40012c00 	.word	0x40012c00
 8006970:	40013400 	.word	0x40013400
 8006974:	40015000 	.word	0x40015000
 8006978:	40000400 	.word	0x40000400
 800697c:	40000800 	.word	0x40000800
 8006980:	40000c00 	.word	0x40000c00
 8006984:	40014000 	.word	0x40014000

08006988 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e078      	b.n	8006a96 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	041b      	lsls	r3, r3, #16
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d009      	beq.n	8006a4a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d004      	beq.n	8006a4a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a19      	ldr	r2, [pc, #100]	@ (8006aac <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d11c      	bne.n	8006a84 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a54:	051b      	lsls	r3, r3, #20
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40012c00 	.word	0x40012c00
 8006aa8:	40013400 	.word	0x40013400
 8006aac:	40015000 	.word	0x40015000

08006ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e042      	b.n	8006bd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d106      	bne.n	8006b66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7fa ff9b 	bl	8001a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2224      	movs	r2, #36	@ 0x24
 8006b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0201 	bic.w	r2, r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fb24 	bl	80071d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f825 	bl	8006bdc <UART_SetConfig>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e01b      	b.n	8006bd4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006baa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0201 	orr.w	r2, r2, #1
 8006bca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fba3 	bl	8007318 <UART_CheckIdleState>
 8006bd2:	4603      	mov	r3, r0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be0:	b08c      	sub	sp, #48	@ 0x30
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4baa      	ldr	r3, [pc, #680]	@ (8006eb4 <UART_SetConfig+0x2d8>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	6812      	ldr	r2, [r2, #0]
 8006c12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c14:	430b      	orrs	r3, r1
 8006c16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a9f      	ldr	r2, [pc, #636]	@ (8006eb8 <UART_SetConfig+0x2dc>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d004      	beq.n	8006c48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c44:	4313      	orrs	r3, r2
 8006c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006c52:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c66:	f023 010f 	bic.w	r1, r3, #15
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a90      	ldr	r2, [pc, #576]	@ (8006ebc <UART_SetConfig+0x2e0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d125      	bne.n	8006ccc <UART_SetConfig+0xf0>
 8006c80:	4b8f      	ldr	r3, [pc, #572]	@ (8006ec0 <UART_SetConfig+0x2e4>)
 8006c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c86:	f003 0303 	and.w	r3, r3, #3
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d81a      	bhi.n	8006cc4 <UART_SetConfig+0xe8>
 8006c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c94 <UART_SetConfig+0xb8>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006ca5 	.word	0x08006ca5
 8006c98:	08006cb5 	.word	0x08006cb5
 8006c9c:	08006cad 	.word	0x08006cad
 8006ca0:	08006cbd 	.word	0x08006cbd
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006caa:	e116      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006cac:	2302      	movs	r3, #2
 8006cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cb2:	e112      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006cb4:	2304      	movs	r3, #4
 8006cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cba:	e10e      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006cbc:	2308      	movs	r3, #8
 8006cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cc2:	e10a      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006cc4:	2310      	movs	r3, #16
 8006cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cca:	e106      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a7c      	ldr	r2, [pc, #496]	@ (8006ec4 <UART_SetConfig+0x2e8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d138      	bne.n	8006d48 <UART_SetConfig+0x16c>
 8006cd6:	4b7a      	ldr	r3, [pc, #488]	@ (8006ec0 <UART_SetConfig+0x2e4>)
 8006cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cdc:	f003 030c 	and.w	r3, r3, #12
 8006ce0:	2b0c      	cmp	r3, #12
 8006ce2:	d82d      	bhi.n	8006d40 <UART_SetConfig+0x164>
 8006ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <UART_SetConfig+0x110>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006d21 	.word	0x08006d21
 8006cf0:	08006d41 	.word	0x08006d41
 8006cf4:	08006d41 	.word	0x08006d41
 8006cf8:	08006d41 	.word	0x08006d41
 8006cfc:	08006d31 	.word	0x08006d31
 8006d00:	08006d41 	.word	0x08006d41
 8006d04:	08006d41 	.word	0x08006d41
 8006d08:	08006d41 	.word	0x08006d41
 8006d0c:	08006d29 	.word	0x08006d29
 8006d10:	08006d41 	.word	0x08006d41
 8006d14:	08006d41 	.word	0x08006d41
 8006d18:	08006d41 	.word	0x08006d41
 8006d1c:	08006d39 	.word	0x08006d39
 8006d20:	2300      	movs	r3, #0
 8006d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d26:	e0d8      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d2e:	e0d4      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d30:	2304      	movs	r3, #4
 8006d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d36:	e0d0      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d38:	2308      	movs	r3, #8
 8006d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d3e:	e0cc      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d40:	2310      	movs	r3, #16
 8006d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d46:	e0c8      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a5e      	ldr	r2, [pc, #376]	@ (8006ec8 <UART_SetConfig+0x2ec>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d125      	bne.n	8006d9e <UART_SetConfig+0x1c2>
 8006d52:	4b5b      	ldr	r3, [pc, #364]	@ (8006ec0 <UART_SetConfig+0x2e4>)
 8006d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d5c:	2b30      	cmp	r3, #48	@ 0x30
 8006d5e:	d016      	beq.n	8006d8e <UART_SetConfig+0x1b2>
 8006d60:	2b30      	cmp	r3, #48	@ 0x30
 8006d62:	d818      	bhi.n	8006d96 <UART_SetConfig+0x1ba>
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d00a      	beq.n	8006d7e <UART_SetConfig+0x1a2>
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d814      	bhi.n	8006d96 <UART_SetConfig+0x1ba>
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <UART_SetConfig+0x19a>
 8006d70:	2b10      	cmp	r3, #16
 8006d72:	d008      	beq.n	8006d86 <UART_SetConfig+0x1aa>
 8006d74:	e00f      	b.n	8006d96 <UART_SetConfig+0x1ba>
 8006d76:	2300      	movs	r3, #0
 8006d78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d7c:	e0ad      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d84:	e0a9      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d86:	2304      	movs	r3, #4
 8006d88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d8c:	e0a5      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d8e:	2308      	movs	r3, #8
 8006d90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d94:	e0a1      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d96:	2310      	movs	r3, #16
 8006d98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d9c:	e09d      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a4a      	ldr	r2, [pc, #296]	@ (8006ecc <UART_SetConfig+0x2f0>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d125      	bne.n	8006df4 <UART_SetConfig+0x218>
 8006da8:	4b45      	ldr	r3, [pc, #276]	@ (8006ec0 <UART_SetConfig+0x2e4>)
 8006daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006db2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006db4:	d016      	beq.n	8006de4 <UART_SetConfig+0x208>
 8006db6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006db8:	d818      	bhi.n	8006dec <UART_SetConfig+0x210>
 8006dba:	2b80      	cmp	r3, #128	@ 0x80
 8006dbc:	d00a      	beq.n	8006dd4 <UART_SetConfig+0x1f8>
 8006dbe:	2b80      	cmp	r3, #128	@ 0x80
 8006dc0:	d814      	bhi.n	8006dec <UART_SetConfig+0x210>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <UART_SetConfig+0x1f0>
 8006dc6:	2b40      	cmp	r3, #64	@ 0x40
 8006dc8:	d008      	beq.n	8006ddc <UART_SetConfig+0x200>
 8006dca:	e00f      	b.n	8006dec <UART_SetConfig+0x210>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dd2:	e082      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dda:	e07e      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006ddc:	2304      	movs	r3, #4
 8006dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006de2:	e07a      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006de4:	2308      	movs	r3, #8
 8006de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dea:	e076      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006dec:	2310      	movs	r3, #16
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006df2:	e072      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a35      	ldr	r2, [pc, #212]	@ (8006ed0 <UART_SetConfig+0x2f4>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d12a      	bne.n	8006e54 <UART_SetConfig+0x278>
 8006dfe:	4b30      	ldr	r3, [pc, #192]	@ (8006ec0 <UART_SetConfig+0x2e4>)
 8006e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e0c:	d01a      	beq.n	8006e44 <UART_SetConfig+0x268>
 8006e0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e12:	d81b      	bhi.n	8006e4c <UART_SetConfig+0x270>
 8006e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e18:	d00c      	beq.n	8006e34 <UART_SetConfig+0x258>
 8006e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e1e:	d815      	bhi.n	8006e4c <UART_SetConfig+0x270>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <UART_SetConfig+0x250>
 8006e24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e28:	d008      	beq.n	8006e3c <UART_SetConfig+0x260>
 8006e2a:	e00f      	b.n	8006e4c <UART_SetConfig+0x270>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e32:	e052      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006e34:	2302      	movs	r3, #2
 8006e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e3a:	e04e      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006e3c:	2304      	movs	r3, #4
 8006e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e42:	e04a      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006e44:	2308      	movs	r3, #8
 8006e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e4a:	e046      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e52:	e042      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a17      	ldr	r2, [pc, #92]	@ (8006eb8 <UART_SetConfig+0x2dc>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d13a      	bne.n	8006ed4 <UART_SetConfig+0x2f8>
 8006e5e:	4b18      	ldr	r3, [pc, #96]	@ (8006ec0 <UART_SetConfig+0x2e4>)
 8006e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e6c:	d01a      	beq.n	8006ea4 <UART_SetConfig+0x2c8>
 8006e6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e72:	d81b      	bhi.n	8006eac <UART_SetConfig+0x2d0>
 8006e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e78:	d00c      	beq.n	8006e94 <UART_SetConfig+0x2b8>
 8006e7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e7e:	d815      	bhi.n	8006eac <UART_SetConfig+0x2d0>
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <UART_SetConfig+0x2b0>
 8006e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e88:	d008      	beq.n	8006e9c <UART_SetConfig+0x2c0>
 8006e8a:	e00f      	b.n	8006eac <UART_SetConfig+0x2d0>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e92:	e022      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006e94:	2302      	movs	r3, #2
 8006e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e9a:	e01e      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006e9c:	2304      	movs	r3, #4
 8006e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ea2:	e01a      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006ea4:	2308      	movs	r3, #8
 8006ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eaa:	e016      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006eac:	2310      	movs	r3, #16
 8006eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eb2:	e012      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006eb4:	cfff69f3 	.word	0xcfff69f3
 8006eb8:	40008000 	.word	0x40008000
 8006ebc:	40013800 	.word	0x40013800
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	40004400 	.word	0x40004400
 8006ec8:	40004800 	.word	0x40004800
 8006ecc:	40004c00 	.word	0x40004c00
 8006ed0:	40005000 	.word	0x40005000
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4aae      	ldr	r2, [pc, #696]	@ (8007198 <UART_SetConfig+0x5bc>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	f040 8097 	bne.w	8007014 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ee6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006eea:	2b08      	cmp	r3, #8
 8006eec:	d823      	bhi.n	8006f36 <UART_SetConfig+0x35a>
 8006eee:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef4 <UART_SetConfig+0x318>)
 8006ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef4:	08006f19 	.word	0x08006f19
 8006ef8:	08006f37 	.word	0x08006f37
 8006efc:	08006f21 	.word	0x08006f21
 8006f00:	08006f37 	.word	0x08006f37
 8006f04:	08006f27 	.word	0x08006f27
 8006f08:	08006f37 	.word	0x08006f37
 8006f0c:	08006f37 	.word	0x08006f37
 8006f10:	08006f37 	.word	0x08006f37
 8006f14:	08006f2f 	.word	0x08006f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f18:	f7fd fdb6 	bl	8004a88 <HAL_RCC_GetPCLK1Freq>
 8006f1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f1e:	e010      	b.n	8006f42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f20:	4b9e      	ldr	r3, [pc, #632]	@ (800719c <UART_SetConfig+0x5c0>)
 8006f22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f24:	e00d      	b.n	8006f42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f26:	f7fd fd41 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8006f2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f2c:	e009      	b.n	8006f42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f34:	e005      	b.n	8006f42 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 8130 	beq.w	80071aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4e:	4a94      	ldr	r2, [pc, #592]	@ (80071a0 <UART_SetConfig+0x5c4>)
 8006f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f54:	461a      	mov	r2, r3
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f5c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	4613      	mov	r3, r2
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	4413      	add	r3, r2
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d305      	bcc.n	8006f7a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d903      	bls.n	8006f82 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f80:	e113      	b.n	80071aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	2200      	movs	r2, #0
 8006f86:	60bb      	str	r3, [r7, #8]
 8006f88:	60fa      	str	r2, [r7, #12]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8e:	4a84      	ldr	r2, [pc, #528]	@ (80071a0 <UART_SetConfig+0x5c4>)
 8006f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	2200      	movs	r2, #0
 8006f98:	603b      	str	r3, [r7, #0]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fa4:	f7f9 fd76 	bl	8000a94 <__aeabi_uldivmod>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4610      	mov	r0, r2
 8006fae:	4619      	mov	r1, r3
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	020b      	lsls	r3, r1, #8
 8006fba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fbe:	0202      	lsls	r2, r0, #8
 8006fc0:	6979      	ldr	r1, [r7, #20]
 8006fc2:	6849      	ldr	r1, [r1, #4]
 8006fc4:	0849      	lsrs	r1, r1, #1
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	460c      	mov	r4, r1
 8006fca:	4605      	mov	r5, r0
 8006fcc:	eb12 0804 	adds.w	r8, r2, r4
 8006fd0:	eb43 0905 	adc.w	r9, r3, r5
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	469a      	mov	sl, r3
 8006fdc:	4693      	mov	fp, r2
 8006fde:	4652      	mov	r2, sl
 8006fe0:	465b      	mov	r3, fp
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	f7f9 fd55 	bl	8000a94 <__aeabi_uldivmod>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4613      	mov	r3, r2
 8006ff0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ff8:	d308      	bcc.n	800700c <UART_SetConfig+0x430>
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007000:	d204      	bcs.n	800700c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6a3a      	ldr	r2, [r7, #32]
 8007008:	60da      	str	r2, [r3, #12]
 800700a:	e0ce      	b.n	80071aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007012:	e0ca      	b.n	80071aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800701c:	d166      	bne.n	80070ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800701e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007022:	2b08      	cmp	r3, #8
 8007024:	d827      	bhi.n	8007076 <UART_SetConfig+0x49a>
 8007026:	a201      	add	r2, pc, #4	@ (adr r2, 800702c <UART_SetConfig+0x450>)
 8007028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702c:	08007051 	.word	0x08007051
 8007030:	08007059 	.word	0x08007059
 8007034:	08007061 	.word	0x08007061
 8007038:	08007077 	.word	0x08007077
 800703c:	08007067 	.word	0x08007067
 8007040:	08007077 	.word	0x08007077
 8007044:	08007077 	.word	0x08007077
 8007048:	08007077 	.word	0x08007077
 800704c:	0800706f 	.word	0x0800706f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007050:	f7fd fd1a 	bl	8004a88 <HAL_RCC_GetPCLK1Freq>
 8007054:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007056:	e014      	b.n	8007082 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007058:	f7fd fd2c 	bl	8004ab4 <HAL_RCC_GetPCLK2Freq>
 800705c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800705e:	e010      	b.n	8007082 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007060:	4b4e      	ldr	r3, [pc, #312]	@ (800719c <UART_SetConfig+0x5c0>)
 8007062:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007064:	e00d      	b.n	8007082 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007066:	f7fd fca1 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 800706a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800706c:	e009      	b.n	8007082 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800706e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007074:	e005      	b.n	8007082 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 8090 	beq.w	80071aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708e:	4a44      	ldr	r2, [pc, #272]	@ (80071a0 <UART_SetConfig+0x5c4>)
 8007090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007094:	461a      	mov	r2, r3
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007098:	fbb3 f3f2 	udiv	r3, r3, r2
 800709c:	005a      	lsls	r2, r3, #1
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	085b      	lsrs	r3, r3, #1
 80070a4:	441a      	add	r2, r3
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	2b0f      	cmp	r3, #15
 80070b4:	d916      	bls.n	80070e4 <UART_SetConfig+0x508>
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070bc:	d212      	bcs.n	80070e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	f023 030f 	bic.w	r3, r3, #15
 80070c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	085b      	lsrs	r3, r3, #1
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	f003 0307 	and.w	r3, r3, #7
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	8bfb      	ldrh	r3, [r7, #30]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	8bfa      	ldrh	r2, [r7, #30]
 80070e0:	60da      	str	r2, [r3, #12]
 80070e2:	e062      	b.n	80071aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070ea:	e05e      	b.n	80071aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d828      	bhi.n	8007146 <UART_SetConfig+0x56a>
 80070f4:	a201      	add	r2, pc, #4	@ (adr r2, 80070fc <UART_SetConfig+0x520>)
 80070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007121 	.word	0x08007121
 8007100:	08007129 	.word	0x08007129
 8007104:	08007131 	.word	0x08007131
 8007108:	08007147 	.word	0x08007147
 800710c:	08007137 	.word	0x08007137
 8007110:	08007147 	.word	0x08007147
 8007114:	08007147 	.word	0x08007147
 8007118:	08007147 	.word	0x08007147
 800711c:	0800713f 	.word	0x0800713f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007120:	f7fd fcb2 	bl	8004a88 <HAL_RCC_GetPCLK1Freq>
 8007124:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007126:	e014      	b.n	8007152 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007128:	f7fd fcc4 	bl	8004ab4 <HAL_RCC_GetPCLK2Freq>
 800712c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800712e:	e010      	b.n	8007152 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007130:	4b1a      	ldr	r3, [pc, #104]	@ (800719c <UART_SetConfig+0x5c0>)
 8007132:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007134:	e00d      	b.n	8007152 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007136:	f7fd fc39 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 800713a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800713c:	e009      	b.n	8007152 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800713e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007144:	e005      	b.n	8007152 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007150:	bf00      	nop
    }

    if (pclk != 0U)
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	2b00      	cmp	r3, #0
 8007156:	d028      	beq.n	80071aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715c:	4a10      	ldr	r2, [pc, #64]	@ (80071a0 <UART_SetConfig+0x5c4>)
 800715e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007162:	461a      	mov	r2, r3
 8007164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007166:	fbb3 f2f2 	udiv	r2, r3, r2
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	085b      	lsrs	r3, r3, #1
 8007170:	441a      	add	r2, r3
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	fbb2 f3f3 	udiv	r3, r2, r3
 800717a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	2b0f      	cmp	r3, #15
 8007180:	d910      	bls.n	80071a4 <UART_SetConfig+0x5c8>
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007188:	d20c      	bcs.n	80071a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	b29a      	uxth	r2, r3
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60da      	str	r2, [r3, #12]
 8007194:	e009      	b.n	80071aa <UART_SetConfig+0x5ce>
 8007196:	bf00      	nop
 8007198:	40008000 	.word	0x40008000
 800719c:	00f42400 	.word	0x00f42400
 80071a0:	080078a0 	.word	0x080078a0
      }
      else
      {
        ret = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2200      	movs	r2, #0
 80071be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2200      	movs	r2, #0
 80071c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80071c6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3730      	adds	r7, #48	@ 0x30
 80071ce:	46bd      	mov	sp, r7
 80071d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080071d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e0:	f003 0308 	and.w	r3, r3, #8
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00a      	beq.n	80071fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007246:	f003 0304 	and.w	r3, r3, #4
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007268:	f003 0310 	and.w	r3, r3, #16
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01a      	beq.n	80072ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072d2:	d10a      	bne.n	80072ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	605a      	str	r2, [r3, #4]
  }
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b098      	sub	sp, #96	@ 0x60
 800731c:	af02      	add	r7, sp, #8
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007328:	f7fa fdc4 	bl	8001eb4 <HAL_GetTick>
 800732c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0308 	and.w	r3, r3, #8
 8007338:	2b08      	cmp	r3, #8
 800733a:	d12f      	bne.n	800739c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800733c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007344:	2200      	movs	r2, #0
 8007346:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f88e 	bl	800746c <UART_WaitOnFlagUntilTimeout>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d022      	beq.n	800739c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800736a:	653b      	str	r3, [r7, #80]	@ 0x50
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007374:	647b      	str	r3, [r7, #68]	@ 0x44
 8007376:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800737a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e6      	bne.n	8007356 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e063      	b.n	8007464 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0304 	and.w	r3, r3, #4
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d149      	bne.n	800743e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073b2:	2200      	movs	r2, #0
 80073b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f857 	bl	800746c <UART_WaitOnFlagUntilTimeout>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d03c      	beq.n	800743e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	623b      	str	r3, [r7, #32]
   return(result);
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80073e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e6      	bne.n	80073c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3308      	adds	r3, #8
 80073fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	60fb      	str	r3, [r7, #12]
   return(result);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f023 0301 	bic.w	r3, r3, #1
 800740c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3308      	adds	r3, #8
 8007414:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007416:	61fa      	str	r2, [r7, #28]
 8007418:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	69b9      	ldr	r1, [r7, #24]
 800741c:	69fa      	ldr	r2, [r7, #28]
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	617b      	str	r3, [r7, #20]
   return(result);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e5      	bne.n	80073f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2220      	movs	r2, #32
 800742e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e012      	b.n	8007464 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2220      	movs	r2, #32
 8007442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2220      	movs	r2, #32
 800744a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3758      	adds	r7, #88	@ 0x58
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	4613      	mov	r3, r2
 800747a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800747c:	e04f      	b.n	800751e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007484:	d04b      	beq.n	800751e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007486:	f7fa fd15 	bl	8001eb4 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	429a      	cmp	r2, r3
 8007494:	d302      	bcc.n	800749c <UART_WaitOnFlagUntilTimeout+0x30>
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e04e      	b.n	800753e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0304 	and.w	r3, r3, #4
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d037      	beq.n	800751e <UART_WaitOnFlagUntilTimeout+0xb2>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b80      	cmp	r3, #128	@ 0x80
 80074b2:	d034      	beq.n	800751e <UART_WaitOnFlagUntilTimeout+0xb2>
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b40      	cmp	r3, #64	@ 0x40
 80074b8:	d031      	beq.n	800751e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	f003 0308 	and.w	r3, r3, #8
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d110      	bne.n	80074ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2208      	movs	r2, #8
 80074ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 f838 	bl	8007546 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2208      	movs	r2, #8
 80074da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e029      	b.n	800753e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074f8:	d111      	bne.n	800751e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007502:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 f81e 	bl	8007546 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2220      	movs	r2, #32
 800750e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e00f      	b.n	800753e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69da      	ldr	r2, [r3, #28]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	4013      	ands	r3, r2
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	429a      	cmp	r2, r3
 800752c:	bf0c      	ite	eq
 800752e:	2301      	moveq	r3, #1
 8007530:	2300      	movne	r3, #0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	461a      	mov	r2, r3
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	429a      	cmp	r2, r3
 800753a:	d0a0      	beq.n	800747e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007546:	b480      	push	{r7}
 8007548:	b095      	sub	sp, #84	@ 0x54
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800755c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800756c:	643b      	str	r3, [r7, #64]	@ 0x40
 800756e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007572:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800757a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e6      	bne.n	800754e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3308      	adds	r3, #8
 8007586:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007596:	f023 0301 	bic.w	r3, r3, #1
 800759a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3308      	adds	r3, #8
 80075a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075ac:	e841 2300 	strex	r3, r2, [r1]
 80075b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e3      	bne.n	8007580 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d118      	bne.n	80075f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	f023 0310 	bic.w	r3, r3, #16
 80075d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075de:	61bb      	str	r3, [r7, #24]
 80075e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	6979      	ldr	r1, [r7, #20]
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	613b      	str	r3, [r7, #16]
   return(result);
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e6      	bne.n	80075c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007606:	bf00      	nop
 8007608:	3754      	adds	r7, #84	@ 0x54
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007612:	b480      	push	{r7}
 8007614:	b085      	sub	sp, #20
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007620:	2b01      	cmp	r3, #1
 8007622:	d101      	bne.n	8007628 <HAL_UARTEx_DisableFifoMode+0x16>
 8007624:	2302      	movs	r3, #2
 8007626:	e027      	b.n	8007678 <HAL_UARTEx_DisableFifoMode+0x66>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2224      	movs	r2, #36	@ 0x24
 8007634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0201 	bic.w	r2, r2, #1
 800764e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007656:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2220      	movs	r2, #32
 800766a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007698:	2302      	movs	r3, #2
 800769a:	e02d      	b.n	80076f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2224      	movs	r2, #36	@ 0x24
 80076a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0201 	bic.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	430a      	orrs	r2, r1
 80076d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f84f 	bl	800777c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007714:	2302      	movs	r3, #2
 8007716:	e02d      	b.n	8007774 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2224      	movs	r2, #36	@ 0x24
 8007724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f022 0201 	bic.w	r2, r2, #1
 800773e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	430a      	orrs	r2, r1
 8007752:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f811 	bl	800777c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2220      	movs	r2, #32
 8007766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007788:	2b00      	cmp	r3, #0
 800778a:	d108      	bne.n	800779e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800779c:	e031      	b.n	8007802 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800779e:	2308      	movs	r3, #8
 80077a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077a2:	2308      	movs	r3, #8
 80077a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	0e5b      	lsrs	r3, r3, #25
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f003 0307 	and.w	r3, r3, #7
 80077b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	0f5b      	lsrs	r3, r3, #29
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f003 0307 	and.w	r3, r3, #7
 80077c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	7b3a      	ldrb	r2, [r7, #12]
 80077ca:	4911      	ldr	r1, [pc, #68]	@ (8007810 <UARTEx_SetNbDataToProcess+0x94>)
 80077cc:	5c8a      	ldrb	r2, [r1, r2]
 80077ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077d2:	7b3a      	ldrb	r2, [r7, #12]
 80077d4:	490f      	ldr	r1, [pc, #60]	@ (8007814 <UARTEx_SetNbDataToProcess+0x98>)
 80077d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80077dc:	b29a      	uxth	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	7b7a      	ldrb	r2, [r7, #13]
 80077e8:	4909      	ldr	r1, [pc, #36]	@ (8007810 <UARTEx_SetNbDataToProcess+0x94>)
 80077ea:	5c8a      	ldrb	r2, [r1, r2]
 80077ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077f0:	7b7a      	ldrb	r2, [r7, #13]
 80077f2:	4908      	ldr	r1, [pc, #32]	@ (8007814 <UARTEx_SetNbDataToProcess+0x98>)
 80077f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	080078b8 	.word	0x080078b8
 8007814:	080078c0 	.word	0x080078c0

08007818 <memset>:
 8007818:	4402      	add	r2, r0
 800781a:	4603      	mov	r3, r0
 800781c:	4293      	cmp	r3, r2
 800781e:	d100      	bne.n	8007822 <memset+0xa>
 8007820:	4770      	bx	lr
 8007822:	f803 1b01 	strb.w	r1, [r3], #1
 8007826:	e7f9      	b.n	800781c <memset+0x4>

08007828 <__libc_init_array>:
 8007828:	b570      	push	{r4, r5, r6, lr}
 800782a:	4d0d      	ldr	r5, [pc, #52]	@ (8007860 <__libc_init_array+0x38>)
 800782c:	4c0d      	ldr	r4, [pc, #52]	@ (8007864 <__libc_init_array+0x3c>)
 800782e:	1b64      	subs	r4, r4, r5
 8007830:	10a4      	asrs	r4, r4, #2
 8007832:	2600      	movs	r6, #0
 8007834:	42a6      	cmp	r6, r4
 8007836:	d109      	bne.n	800784c <__libc_init_array+0x24>
 8007838:	4d0b      	ldr	r5, [pc, #44]	@ (8007868 <__libc_init_array+0x40>)
 800783a:	4c0c      	ldr	r4, [pc, #48]	@ (800786c <__libc_init_array+0x44>)
 800783c:	f000 f818 	bl	8007870 <_init>
 8007840:	1b64      	subs	r4, r4, r5
 8007842:	10a4      	asrs	r4, r4, #2
 8007844:	2600      	movs	r6, #0
 8007846:	42a6      	cmp	r6, r4
 8007848:	d105      	bne.n	8007856 <__libc_init_array+0x2e>
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007850:	4798      	blx	r3
 8007852:	3601      	adds	r6, #1
 8007854:	e7ee      	b.n	8007834 <__libc_init_array+0xc>
 8007856:	f855 3b04 	ldr.w	r3, [r5], #4
 800785a:	4798      	blx	r3
 800785c:	3601      	adds	r6, #1
 800785e:	e7f2      	b.n	8007846 <__libc_init_array+0x1e>
 8007860:	080078d0 	.word	0x080078d0
 8007864:	080078d0 	.word	0x080078d0
 8007868:	080078d0 	.word	0x080078d0
 800786c:	080078d4 	.word	0x080078d4

08007870 <_init>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	bf00      	nop
 8007874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007876:	bc08      	pop	{r3}
 8007878:	469e      	mov	lr, r3
 800787a:	4770      	bx	lr

0800787c <_fini>:
 800787c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787e:	bf00      	nop
 8007880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007882:	bc08      	pop	{r3}
 8007884:	469e      	mov	lr, r3
 8007886:	4770      	bx	lr

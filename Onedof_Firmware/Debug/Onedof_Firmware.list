
Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088d4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008aac  08008aac  00009aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aec  08008aec  0000a018  2**0
                  CONTENTS
  4 .ARM          00000008  08008aec  08008aec  00009aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008af4  08008af4  0000a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008af4  08008af4  00009af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008af8  08008af8  00009af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08008afc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000018  08008b14  0000a018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08008b14  0000a42c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a029  00000000  00000000  0000a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003294  00000000  00000000  00024071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00027308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c1  00000000  00000000  00028898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f06  00000000  00000000  00029959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b4fc  00000000  00000000  0005285f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001140a5  00000000  00000000  0006dd5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181e00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ea0  00000000  00000000  00181e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00187ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008a94 	.word	0x08008a94

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08008a94 	.word	0x08008a94

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b96a 	b.w	8000ee0 <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d14e      	bne.n	8000cce <__udivmoddi4+0xaa>
 8000c30:	4694      	mov	ip, r2
 8000c32:	458c      	cmp	ip, r1
 8000c34:	4686      	mov	lr, r0
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	d962      	bls.n	8000d02 <__udivmoddi4+0xde>
 8000c3c:	b14a      	cbz	r2, 8000c52 <__udivmoddi4+0x2e>
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	4091      	lsls	r1, r2
 8000c44:	fa20 f303 	lsr.w	r3, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c56:	fa1f f68c 	uxth.w	r6, ip
 8000c5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c62:	fb07 1114 	mls	r1, r7, r4, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb04 f106 	mul.w	r1, r4, r6
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x64>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7a:	f080 8112 	bcs.w	8000ea2 <__udivmoddi4+0x27e>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 810f 	bls.w	8000ea2 <__udivmoddi4+0x27e>
 8000c84:	3c02      	subs	r4, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a59      	subs	r1, r3, r1
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c92:	fb07 1110 	mls	r1, r7, r0, r1
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f606 	mul.w	r6, r0, r6
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x94>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000caa:	f080 80fc 	bcs.w	8000ea6 <__udivmoddi4+0x282>
 8000cae:	429e      	cmp	r6, r3
 8000cb0:	f240 80f9 	bls.w	8000ea6 <__udivmoddi4+0x282>
 8000cb4:	4463      	add	r3, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa6>
 8000cc2:	40d3      	lsrs	r3, r2
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xba>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb4>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa6>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x150>
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xcc>
 8000cea:	4290      	cmp	r0, r2
 8000cec:	f0c0 80f0 	bcc.w	8000ed0 <__udivmoddi4+0x2ac>
 8000cf0:	1a86      	subs	r6, r0, r2
 8000cf2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	2d00      	cmp	r5, #0
 8000cfa:	d0e6      	beq.n	8000cca <__udivmoddi4+0xa6>
 8000cfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000d00:	e7e3      	b.n	8000cca <__udivmoddi4+0xa6>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x204>
 8000d08:	eba1 040c 	sub.w	r4, r1, ip
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa1f f78c 	uxth.w	r7, ip
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb07 f006 	mul.w	r0, r7, r6
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x11c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x11a>
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	f200 80cd 	bhi.w	8000ed8 <__udivmoddi4+0x2b4>
 8000d3e:	4626      	mov	r6, r4
 8000d40:	1a1c      	subs	r4, r3, r0
 8000d42:	fa1f f38e 	uxth.w	r3, lr
 8000d46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb00 f707 	mul.w	r7, r0, r7
 8000d56:	429f      	cmp	r7, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x148>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x146>
 8000d64:	429f      	cmp	r7, r3
 8000d66:	f200 80b0 	bhi.w	8000eca <__udivmoddi4+0x2a6>
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	1bdb      	subs	r3, r3, r7
 8000d6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x9c>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d84:	fa04 f301 	lsl.w	r3, r4, r1
 8000d88:	ea43 030c 	orr.w	r3, r3, ip
 8000d8c:	40f4      	lsrs	r4, r6
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	0c38      	lsrs	r0, r7, #16
 8000d94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d98:	fbb4 fef0 	udiv	lr, r4, r0
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	fb00 441e 	mls	r4, r0, lr, r4
 8000da4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da8:	fb0e f90c 	mul.w	r9, lr, ip
 8000dac:	45a1      	cmp	r9, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x1a6>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dba:	f080 8084 	bcs.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	f240 8081 	bls.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	eba4 0409 	sub.w	r4, r4, r9
 8000dce:	fa1f f983 	uxth.w	r9, r3
 8000dd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1d2>
 8000de6:	193c      	adds	r4, r7, r4
 8000de8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dec:	d267      	bcs.n	8000ebe <__udivmoddi4+0x29a>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d965      	bls.n	8000ebe <__udivmoddi4+0x29a>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfe:	eba4 040c 	sub.w	r4, r4, ip
 8000e02:	429c      	cmp	r4, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	469c      	mov	ip, r3
 8000e08:	d351      	bcc.n	8000eae <__udivmoddi4+0x28a>
 8000e0a:	d04e      	beq.n	8000eaa <__udivmoddi4+0x286>
 8000e0c:	b155      	cbz	r5, 8000e24 <__udivmoddi4+0x200>
 8000e0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e12:	eb64 040c 	sbc.w	r4, r4, ip
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	40cb      	lsrs	r3, r1
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	40cc      	lsrs	r4, r1
 8000e20:	e9c5 6400 	strd	r6, r4, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	e750      	b.n	8000cca <__udivmoddi4+0xa6>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa24 f303 	lsr.w	r3, r4, r3
 8000e38:	4094      	lsls	r4, r2
 8000e3a:	430c      	orrs	r4, r1
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e50:	0c23      	lsrs	r3, r4, #16
 8000e52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e56:	fb00 f107 	mul.w	r1, r0, r7
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x24c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e66:	d22c      	bcs.n	8000ec2 <__udivmoddi4+0x29e>
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d92a      	bls.n	8000ec2 <__udivmoddi4+0x29e>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e80:	fb01 f307 	mul.w	r3, r1, r7
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x276>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e90:	d213      	bcs.n	8000eba <__udivmoddi4+0x296>
 8000e92:	42a3      	cmp	r3, r4
 8000e94:	d911      	bls.n	8000eba <__udivmoddi4+0x296>
 8000e96:	3902      	subs	r1, #2
 8000e98:	4464      	add	r4, ip
 8000e9a:	1ae4      	subs	r4, r4, r3
 8000e9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea0:	e739      	b.n	8000d16 <__udivmoddi4+0xf2>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	e6f0      	b.n	8000c88 <__udivmoddi4+0x64>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e706      	b.n	8000cb8 <__udivmoddi4+0x94>
 8000eaa:	45c8      	cmp	r8, r9
 8000eac:	d2ae      	bcs.n	8000e0c <__udivmoddi4+0x1e8>
 8000eae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb6:	3801      	subs	r0, #1
 8000eb8:	e7a8      	b.n	8000e0c <__udivmoddi4+0x1e8>
 8000eba:	4631      	mov	r1, r6
 8000ebc:	e7ed      	b.n	8000e9a <__udivmoddi4+0x276>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e799      	b.n	8000df6 <__udivmoddi4+0x1d2>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e7d4      	b.n	8000e70 <__udivmoddi4+0x24c>
 8000ec6:	46d6      	mov	lr, sl
 8000ec8:	e77f      	b.n	8000dca <__udivmoddi4+0x1a6>
 8000eca:	4463      	add	r3, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e74d      	b.n	8000d6c <__udivmoddi4+0x148>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e70f      	b.n	8000cf8 <__udivmoddi4+0xd4>
 8000ed8:	3e02      	subs	r6, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	e730      	b.n	8000d40 <__udivmoddi4+0x11c>
 8000ede:	bf00      	nop

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2232      	movs	r2, #50	@ 0x32
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f002 f9f7 	bl	80032e8 <HAL_ADC_Start_DMA>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <Update_adc>:

uint32_t Update_adc(ADC* adc){
 8000f02:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	uint64_t sum_adc = 0;
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e011      	b.n	8000f42 <Update_adc+0x40>
		sum_adc += adc -> adc_buffer[i];
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f26:	2200      	movs	r2, #0
 8000f28:	461c      	mov	r4, r3
 8000f2a:	4615      	mov	r5, r2
 8000f2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f30:	eb12 0804 	adds.w	r8, r2, r4
 8000f34:	eb43 0905 	adc.w	r9, r3, r5
 8000f38:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b31      	cmp	r3, #49	@ 0x31
 8000f46:	d9ea      	bls.n	8000f1e <Update_adc+0x1c>
	}
	return adc -> adc_avg = sum_adc / 50;
 8000f48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f4c:	f04f 0232 	mov.w	r2, #50	@ 0x32
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	f7ff fe4e 	bl	8000bf4 <__aeabi_uldivmod>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000f74 <Update_joy>:
 *      Author: naker
 */

#include "joy.h"

void Update_joy(JOY *joy){
 8000f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
	uint8_t s_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000f7e:	2120      	movs	r1, #32
 8000f80:	4835      	ldr	r0, [pc, #212]	@ (8001058 <Update_joy+0xe4>)
 8000f82:	f004 f8db 	bl	800513c <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
	uint8_t s_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000f8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f92:	f004 f8d3 	bl	800513c <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73bb      	strb	r3, [r7, #14]
	uint8_t s_3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	482f      	ldr	r0, [pc, #188]	@ (800105c <Update_joy+0xe8>)
 8000f9e:	f004 f8cd 	bl	800513c <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	737b      	strb	r3, [r7, #13]
	uint8_t s_4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8000fa6:	2120      	movs	r1, #32
 8000fa8:	482c      	ldr	r0, [pc, #176]	@ (800105c <Update_joy+0xe8>)
 8000faa:	f004 f8c7 	bl	800513c <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	733b      	strb	r3, [r7, #12]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d008      	beq.n	8000fca <Update_joy+0x56>
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <Update_joy+0x56>
 8000fbe:	7b7b      	ldrb	r3, [r7, #13]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <Update_joy+0x56>
 8000fc4:	7b3b      	ldrb	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d133      	bne.n	8001032 <Update_joy+0xbe>
		static uint8_t is_first = 1;
		static uint64_t timestamp = 0;
		if(is_first){
 8000fca:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <Update_joy+0xec>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00c      	beq.n	8000fec <Update_joy+0x78>
			timestamp = HAL_GetTick() + 50;
 8000fd2:	f001 fd81 	bl	8002ad8 <HAL_GetTick>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	3332      	adds	r3, #50	@ 0x32
 8000fda:	2200      	movs	r2, #0
 8000fdc:	469a      	mov	sl, r3
 8000fde:	4693      	mov	fp, r2
 8000fe0:	4b20      	ldr	r3, [pc, #128]	@ (8001064 <Update_joy+0xf0>)
 8000fe2:	e9c3 ab00 	strd	sl, fp, [r3]
			is_first = 0;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8001060 <Update_joy+0xec>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() > timestamp){
 8000fec:	f001 fd74 	bl	8002ad8 <HAL_GetTick>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	461c      	mov	r4, r3
 8000ff6:	4615      	mov	r5, r2
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <Update_joy+0xf0>)
 8000ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffe:	42a2      	cmp	r2, r4
 8001000:	41ab      	sbcs	r3, r5
 8001002:	d223      	bcs.n	800104c <Update_joy+0xd8>
			timestamp = HAL_GetTick() + 50;
 8001004:	f001 fd68 	bl	8002ad8 <HAL_GetTick>
 8001008:	4603      	mov	r3, r0
 800100a:	3332      	adds	r3, #50	@ 0x32
 800100c:	2200      	movs	r2, #0
 800100e:	4698      	mov	r8, r3
 8001010:	4691      	mov	r9, r2
 8001012:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <Update_joy+0xf0>)
 8001014:	e9c3 8900 	strd	r8, r9, [r3]
			joy -> s_1 = s_1;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	701a      	strb	r2, [r3, #0]
			joy -> s_2 = s_2;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7bba      	ldrb	r2, [r7, #14]
 8001022:	705a      	strb	r2, [r3, #1]
			joy -> s_3 = s_3;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7b7a      	ldrb	r2, [r7, #13]
 8001028:	709a      	strb	r2, [r3, #2]
			joy -> s_4 = s_4;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7b3a      	ldrb	r2, [r7, #12]
 800102e:	70da      	strb	r2, [r3, #3]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8001030:	e00c      	b.n	800104c <Update_joy+0xd8>
		}
	}else{
		joy -> s_1 = 1;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
		joy -> s_2 = 1;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	705a      	strb	r2, [r3, #1]
		joy -> s_3 = 1;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	709a      	strb	r2, [r3, #2]
		joy -> s_4 = 1;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	70da      	strb	r2, [r3, #3]
	}
}
 800104a:	e000      	b.n	800104e <Update_joy+0xda>
	if(!s_1 || !s_2 || !s_3 || !s_4){
 800104c:	bf00      	nop
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001058:	48000400 	.word	0x48000400
 800105c:	48000800 	.word	0x48000800
 8001060:	20000000 	.word	0x20000000
 8001064:	20000038 	.word	0x20000038

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f001 fccf 	bl	8002a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f8cc 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f000 fb54 	bl	8001720 <MX_GPIO_Init>
  MX_DMA_Init();
 8001078:	f000 fb28 	bl	80016cc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800107c:	f000 f988 	bl	8001390 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001080:	f000 f9d0 	bl	8001424 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001084:	f000 fa7e 	bl	8001584 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001088:	f000 faca 	bl	8001620 <MX_TIM4_Init>
  MX_ADC1_Init();
 800108c:	f000 f908 	bl	80012a0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //Update command timer
  HAL_TIM_Base_Start_IT(&htim3);
 8001090:	484b      	ldr	r0, [pc, #300]	@ (80011c0 <main+0x158>)
 8001092:	f005 f993 	bl	80063bc <HAL_TIM_Base_Start_IT>

  //PWM generator
  HAL_TIM_Base_Start(&htim1);
 8001096:	484b      	ldr	r0, [pc, #300]	@ (80011c4 <main+0x15c>)
 8001098:	f005 f920 	bl	80062dc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800109c:	2100      	movs	r1, #0
 800109e:	4849      	ldr	r0, [pc, #292]	@ (80011c4 <main+0x15c>)
 80010a0:	f005 fa66 	bl	8006570 <HAL_TIM_PWM_Start>

  //Encoder reader
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80010a4:	213c      	movs	r1, #60	@ 0x3c
 80010a6:	4848      	ldr	r0, [pc, #288]	@ (80011c8 <main+0x160>)
 80010a8:	f005 fc1a 	bl	80068e0 <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, 8192, 8000, 65536);
 80010ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010b0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80010b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010b8:	4844      	ldr	r0, [pc, #272]	@ (80011cc <main+0x164>)
 80010ba:	f001 f846 	bl	800214a <QEI_init>

  //Current reader
  ADC_init(&hadc1, &current_sensor);
 80010be:	4944      	ldr	r1, [pc, #272]	@ (80011d0 <main+0x168>)
 80010c0:	4844      	ldr	r0, [pc, #272]	@ (80011d4 <main+0x16c>)
 80010c2:	f7ff ff0f 	bl	8000ee4 <ADC_init>

  //Position PID
  PID_init(&p_pid, p_kp, p_ki, p_kd, 0.001);
 80010c6:	4b44      	ldr	r3, [pc, #272]	@ (80011d8 <main+0x170>)
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	4b43      	ldr	r3, [pc, #268]	@ (80011dc <main+0x174>)
 80010ce:	ed93 7a00 	vldr	s14, [r3]
 80010d2:	4b43      	ldr	r3, [pc, #268]	@ (80011e0 <main+0x178>)
 80010d4:	edd3 6a00 	vldr	s13, [r3]
 80010d8:	eddf 1a42 	vldr	s3, [pc, #264]	@ 80011e4 <main+0x17c>
 80010dc:	eeb0 1a66 	vmov.f32	s2, s13
 80010e0:	eef0 0a47 	vmov.f32	s1, s14
 80010e4:	eeb0 0a67 	vmov.f32	s0, s15
 80010e8:	483f      	ldr	r0, [pc, #252]	@ (80011e8 <main+0x180>)
 80010ea:	f000 fe29 	bl	8001d40 <PID_init>
  PID_init(&v_pid, v_kp, v_ki, v_kd, 0.000125);
 80010ee:	4b3f      	ldr	r3, [pc, #252]	@ (80011ec <main+0x184>)
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	4b3e      	ldr	r3, [pc, #248]	@ (80011f0 <main+0x188>)
 80010f6:	ed93 7a00 	vldr	s14, [r3]
 80010fa:	4b3e      	ldr	r3, [pc, #248]	@ (80011f4 <main+0x18c>)
 80010fc:	edd3 6a00 	vldr	s13, [r3]
 8001100:	eddf 1a3d 	vldr	s3, [pc, #244]	@ 80011f8 <main+0x190>
 8001104:	eeb0 1a66 	vmov.f32	s2, s13
 8001108:	eef0 0a47 	vmov.f32	s1, s14
 800110c:	eeb0 0a67 	vmov.f32	s0, s15
 8001110:	483a      	ldr	r0, [pc, #232]	@ (80011fc <main+0x194>)
 8001112:	f000 fe15 	bl	8001d40 <PID_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(mode == 1){
 8001116:	e04d      	b.n	80011b4 <main+0x14c>
		  Update_joy(&joy);
 8001118:	4839      	ldr	r0, [pc, #228]	@ (8001200 <main+0x198>)
 800111a:	f7ff ff2b 	bl	8000f74 <Update_joy>
		  if (!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 800111e:	4b38      	ldr	r3, [pc, #224]	@ (8001200 <main+0x198>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d111      	bne.n	800114a <main+0xe2>
 8001126:	4b36      	ldr	r3, [pc, #216]	@ (8001200 <main+0x198>)
 8001128:	785b      	ldrb	r3, [r3, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00d      	beq.n	800114a <main+0xe2>
 800112e:	4b34      	ldr	r3, [pc, #208]	@ (8001200 <main+0x198>)
 8001130:	789b      	ldrb	r3, [r3, #2]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d009      	beq.n	800114a <main+0xe2>
 8001136:	4b32      	ldr	r3, [pc, #200]	@ (8001200 <main+0x198>)
 8001138:	78db      	ldrb	r3, [r3, #3]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <main+0xe2>
			  // switch 1 has pushed
			  jog += 10; // Move up 10 mm.
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <main+0x19c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	330a      	adds	r3, #10
 8001144:	4a2f      	ldr	r2, [pc, #188]	@ (8001204 <main+0x19c>)
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	e034      	b.n	80011b4 <main+0x14c>
		  }else if (joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 800114a:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <main+0x198>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d011      	beq.n	8001176 <main+0x10e>
 8001152:	4b2b      	ldr	r3, [pc, #172]	@ (8001200 <main+0x198>)
 8001154:	785b      	ldrb	r3, [r3, #1]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10d      	bne.n	8001176 <main+0x10e>
 800115a:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <main+0x198>)
 800115c:	789b      	ldrb	r3, [r3, #2]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d009      	beq.n	8001176 <main+0x10e>
 8001162:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <main+0x198>)
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d005      	beq.n	8001176 <main+0x10e>
			  // switch 2 has pushed
			  jog -= 10; // Move down 10 mm.
 800116a:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <main+0x19c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	3b0a      	subs	r3, #10
 8001170:	4a24      	ldr	r2, [pc, #144]	@ (8001204 <main+0x19c>)
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	e01e      	b.n	80011b4 <main+0x14c>
		  }else if (joy.s_1 && joy.s_2 && !joy.s_3 && joy.s_4){
 8001176:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <main+0x198>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d01a      	beq.n	80011b4 <main+0x14c>
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <main+0x198>)
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d016      	beq.n	80011b4 <main+0x14c>
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <main+0x198>)
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d112      	bne.n	80011b4 <main+0x14c>
 800118e:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <main+0x198>)
 8001190:	78db      	ldrb	r3, [r3, #3]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <main+0x136>
			  // switch 3 has pushed
			  mode = 0; // Change mode to Automatic
 8001196:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <main+0x1a0>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e00a      	b.n	80011b4 <main+0x14c>
		  }else if (joy.s_1 && joy.s_2 && joy.s_3 && !joy.s_4){
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <main+0x198>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <main+0x14c>
 80011a6:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <main+0x198>)
 80011a8:	785b      	ldrb	r3, [r3, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <main+0x14c>
 80011ae:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <main+0x198>)
 80011b0:	789b      	ldrb	r3, [r3, #2]
 80011b2:	2b00      	cmp	r3, #0
	  while(mode == 1){
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <main+0x1a0>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d0ad      	beq.n	8001118 <main+0xb0>
 80011bc:	e7fa      	b.n	80011b4 <main+0x14c>
 80011be:	bf00      	nop
 80011c0:	200001ec 	.word	0x200001ec
 80011c4:	200001a0 	.word	0x200001a0
 80011c8:	20000238 	.word	0x20000238
 80011cc:	20000388 	.word	0x20000388
 80011d0:	200002b8 	.word	0x200002b8
 80011d4:	20000040 	.word	0x20000040
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000410 	.word	0x20000410
 80011e0:	20000414 	.word	0x20000414
 80011e4:	3a83126f 	.word	0x3a83126f
 80011e8:	200003f8 	.word	0x200003f8
 80011ec:	20000004 	.word	0x20000004
 80011f0:	200003e8 	.word	0x200003e8
 80011f4:	200003ec 	.word	0x200003ec
 80011f8:	3903126f 	.word	0x3903126f
 80011fc:	200003d0 	.word	0x200003d0
 8001200:	2000029c 	.word	0x2000029c
 8001204:	200002a0 	.word	0x200002a0
 8001208:	200002b4 	.word	0x200002b4

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b094      	sub	sp, #80	@ 0x50
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0318 	add.w	r3, r7, #24
 8001216:	2238      	movs	r2, #56	@ 0x38
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f007 fc0e 	bl	8008a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800122e:	2000      	movs	r0, #0
 8001230:	f003 ffcc 	bl	80051cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001238:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800123c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001242:	2303      	movs	r3, #3
 8001244:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001246:	2306      	movs	r3, #6
 8001248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800124a:	2355      	movs	r3, #85	@ 0x55
 800124c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0318 	add.w	r3, r7, #24
 800125e:	4618      	mov	r0, r3
 8001260:	f004 f868 	bl	8005334 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800126a:	f000 fd63 	bl	8001d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001272:	2303      	movs	r3, #3
 8001274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2104      	movs	r1, #4
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fb66 	bl	8005958 <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001292:	f000 fd4f 	bl	8001d34 <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3750      	adds	r7, #80	@ 0x50
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	@ 0x30
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2220      	movs	r2, #32
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f007 fbbf 	bl	8008a3c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012be:	4b32      	ldr	r3, [pc, #200]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012c6:	4b30      	ldr	r3, [pc, #192]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80012da:	4b2b      	ldr	r3, [pc, #172]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012e0:	4b29      	ldr	r3, [pc, #164]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e6:	4b28      	ldr	r3, [pc, #160]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012e8:	2204      	movs	r2, #4
 80012ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012ec:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012f2:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012f8:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012fe:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <MX_ADC1_Init+0xe8>)
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <MX_ADC1_Init+0xe8>)
 8001308:	2200      	movs	r2, #0
 800130a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800130c:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <MX_ADC1_Init+0xe8>)
 800130e:	2200      	movs	r2, #0
 8001310:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001312:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <MX_ADC1_Init+0xe8>)
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800131a:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <MX_ADC1_Init+0xe8>)
 800131c:	2200      	movs	r2, #0
 800131e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <MX_ADC1_Init+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001328:	4817      	ldr	r0, [pc, #92]	@ (8001388 <MX_ADC1_Init+0xe8>)
 800132a:	f001 fe21 	bl	8002f70 <HAL_ADC_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001334:	f000 fcfe 	bl	8001d34 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800133c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	4811      	ldr	r0, [pc, #68]	@ (8001388 <MX_ADC1_Init+0xe8>)
 8001344:	f003 f8ee 	bl	8004524 <HAL_ADCEx_MultiModeConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800134e:	f000 fcf1 	bl	8001d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <MX_ADC1_Init+0xec>)
 8001354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001356:	2306      	movs	r3, #6
 8001358:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800135e:	237f      	movs	r3, #127	@ 0x7f
 8001360:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001362:	2304      	movs	r3, #4
 8001364:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	@ (8001388 <MX_ADC1_Init+0xe8>)
 8001370:	f002 fb16 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800137a:	f000 fcdb 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3730      	adds	r7, #48	@ 0x30
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000040 	.word	0x20000040
 800138c:	04300002 	.word	0x04300002

08001390 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001394:	4b21      	ldr	r3, [pc, #132]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 8001396:	4a22      	ldr	r2, [pc, #136]	@ (8001420 <MX_LPUART1_UART_Init+0x90>)
 8001398:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 800139c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b19      	ldr	r3, [pc, #100]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b18      	ldr	r3, [pc, #96]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80013d2:	4812      	ldr	r0, [pc, #72]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013d4:	f006 fcc4 	bl	8007d60 <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80013de:	f000 fca9 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e2:	2100      	movs	r1, #0
 80013e4:	480d      	ldr	r0, [pc, #52]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013e6:	f007 fa5f 	bl	80088a8 <HAL_UARTEx_SetTxFifoThreshold>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80013f0:	f000 fca0 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f4:	2100      	movs	r1, #0
 80013f6:	4809      	ldr	r0, [pc, #36]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013f8:	f007 fa94 	bl	8008924 <HAL_UARTEx_SetRxFifoThreshold>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001402:	f000 fc97 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 8001408:	f007 fa15 	bl	8008836 <HAL_UARTEx_DisableFifoMode>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001412:	f000 fc8f 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000010c 	.word	0x2000010c
 8001420:	40008000 	.word	0x40008000

08001424 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b09c      	sub	sp, #112	@ 0x70
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001444:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2234      	movs	r2, #52	@ 0x34
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f007 faec 	bl	8008a3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001464:	4b45      	ldr	r3, [pc, #276]	@ (800157c <MX_TIM1_Init+0x158>)
 8001466:	4a46      	ldr	r2, [pc, #280]	@ (8001580 <MX_TIM1_Init+0x15c>)
 8001468:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800146a:	4b44      	ldr	r3, [pc, #272]	@ (800157c <MX_TIM1_Init+0x158>)
 800146c:	22a9      	movs	r2, #169	@ 0xa9
 800146e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b42      	ldr	r3, [pc, #264]	@ (800157c <MX_TIM1_Init+0x158>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001476:	4b41      	ldr	r3, [pc, #260]	@ (800157c <MX_TIM1_Init+0x158>)
 8001478:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800147c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b3f      	ldr	r3, [pc, #252]	@ (800157c <MX_TIM1_Init+0x158>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001484:	4b3d      	ldr	r3, [pc, #244]	@ (800157c <MX_TIM1_Init+0x158>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b3c      	ldr	r3, [pc, #240]	@ (800157c <MX_TIM1_Init+0x158>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001490:	483a      	ldr	r0, [pc, #232]	@ (800157c <MX_TIM1_Init+0x158>)
 8001492:	f004 fecb 	bl	800622c <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800149c:	f000 fc4a 	bl	8001d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014aa:	4619      	mov	r1, r3
 80014ac:	4833      	ldr	r0, [pc, #204]	@ (800157c <MX_TIM1_Init+0x158>)
 80014ae:	f005 fd09 	bl	8006ec4 <HAL_TIM_ConfigClockSource>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014b8:	f000 fc3c 	bl	8001d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014bc:	482f      	ldr	r0, [pc, #188]	@ (800157c <MX_TIM1_Init+0x158>)
 80014be:	f004 fff5 	bl	80064ac <HAL_TIM_PWM_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80014c8:	f000 fc34 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014dc:	4619      	mov	r1, r3
 80014de:	4827      	ldr	r0, [pc, #156]	@ (800157c <MX_TIM1_Init+0x158>)
 80014e0:	f006 face 	bl	8007a80 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80014ea:	f000 fc23 	bl	8001d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ee:	2360      	movs	r3, #96	@ 0x60
 80014f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014fa:	2300      	movs	r3, #0
 80014fc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80014fe:	2304      	movs	r3, #4
 8001500:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800150a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800150e:	2200      	movs	r2, #0
 8001510:	4619      	mov	r1, r3
 8001512:	481a      	ldr	r0, [pc, #104]	@ (800157c <MX_TIM1_Init+0x158>)
 8001514:	f005 fbc2 	bl	8006c9c <HAL_TIM_PWM_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800151e:	f000 fc09 	bl	8001d34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001536:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800153a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001548:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001552:	2300      	movs	r3, #0
 8001554:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4807      	ldr	r0, [pc, #28]	@ (800157c <MX_TIM1_Init+0x158>)
 8001560:	f006 fb24 	bl	8007bac <HAL_TIMEx_ConfigBreakDeadTime>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800156a:	f000 fbe3 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800156e:	4803      	ldr	r0, [pc, #12]	@ (800157c <MX_TIM1_Init+0x158>)
 8001570:	f001 f972 	bl	8002858 <HAL_TIM_MspPostInit>

}
 8001574:	bf00      	nop
 8001576:	3770      	adds	r7, #112	@ 0x70
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200001a0 	.word	0x200001a0
 8001580:	40012c00 	.word	0x40012c00

08001584 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015a4:	4a1d      	ldr	r2, [pc, #116]	@ (800161c <MX_TIM3_Init+0x98>)
 80015a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015aa:	22a9      	movs	r2, #169	@ 0xa9
 80015ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015b6:	2263      	movs	r2, #99	@ 0x63
 80015b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ba:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c0:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015c6:	4814      	ldr	r0, [pc, #80]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015c8:	f004 fe30 	bl	800622c <HAL_TIM_Base_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80015d2:	f000 fbaf 	bl	8001d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	480d      	ldr	r0, [pc, #52]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015e4:	f005 fc6e 	bl	8006ec4 <HAL_TIM_ConfigClockSource>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80015ee:	f000 fba1 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	@ (8001618 <MX_TIM3_Init+0x94>)
 8001600:	f006 fa3e 	bl	8007a80 <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800160a:	f000 fb93 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200001ec 	.word	0x200001ec
 800161c:	40000400 	.word	0x40000400

08001620 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	@ 0x30
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001626:	f107 030c 	add.w	r3, r7, #12
 800162a:	2224      	movs	r2, #36	@ 0x24
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f007 fa04 	bl	8008a3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800163e:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 8001640:	4a21      	ldr	r2, [pc, #132]	@ (80016c8 <MX_TIM4_Init+0xa8>)
 8001642:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001644:	4b1f      	ldr	r3, [pc, #124]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 8001646:	2200      	movs	r2, #0
 8001648:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164a:	4b1e      	ldr	r3, [pc, #120]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001650:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 8001652:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001656:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001658:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165e:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001664:	2303      	movs	r3, #3
 8001666:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800166c:	2301      	movs	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800167c:	2301      	movs	r3, #1
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	4619      	mov	r1, r3
 800168e:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 8001690:	f005 f880 	bl	8006794 <HAL_TIM_Encoder_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800169a:	f000 fb4b 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016a6:	463b      	mov	r3, r7
 80016a8:	4619      	mov	r1, r3
 80016aa:	4806      	ldr	r0, [pc, #24]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 80016ac:	f006 f9e8 	bl	8007a80 <HAL_TIMEx_MasterConfigSynchronization>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80016b6:	f000 fb3d 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	3730      	adds	r7, #48	@ 0x30
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000238 	.word	0x20000238
 80016c8:	40000800 	.word	0x40000800

080016cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016d2:	4b12      	ldr	r3, [pc, #72]	@ (800171c <MX_DMA_Init+0x50>)
 80016d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d6:	4a11      	ldr	r2, [pc, #68]	@ (800171c <MX_DMA_Init+0x50>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80016de:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <MX_DMA_Init+0x50>)
 80016e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ea:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <MX_DMA_Init+0x50>)
 80016ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ee:	4a0b      	ldr	r2, [pc, #44]	@ (800171c <MX_DMA_Init+0x50>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <MX_DMA_Init+0x50>)
 80016f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	200b      	movs	r0, #11
 8001708:	f003 f8ef 	bl	80048ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800170c:	200b      	movs	r0, #11
 800170e:	f003 f906 	bl	800491e <HAL_NVIC_EnableIRQ>

}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000

08001720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	@ 0x28
 8001724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001736:	4b66      	ldr	r3, [pc, #408]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	4a65      	ldr	r2, [pc, #404]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001742:	4b63      	ldr	r3, [pc, #396]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800174e:	4b60      	ldr	r3, [pc, #384]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	4a5f      	ldr	r2, [pc, #380]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001754:	f043 0320 	orr.w	r3, r3, #32
 8001758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175a:	4b5d      	ldr	r3, [pc, #372]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4b5a      	ldr	r3, [pc, #360]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	4a59      	ldr	r2, [pc, #356]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001772:	4b57      	ldr	r3, [pc, #348]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	4b54      	ldr	r3, [pc, #336]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	4a53      	ldr	r2, [pc, #332]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178a:	4b51      	ldr	r3, [pc, #324]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800179c:	484d      	ldr	r0, [pc, #308]	@ (80018d4 <MX_GPIO_Init+0x1b4>)
 800179e:	f003 fce5 	bl	800516c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80017a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ac:	f003 fcde 	bl	800516c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f240 4116 	movw	r1, #1046	@ 0x416
 80017b6:	4848      	ldr	r0, [pc, #288]	@ (80018d8 <MX_GPIO_Init+0x1b8>)
 80017b8:	f003 fcd8 	bl	800516c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	4840      	ldr	r0, [pc, #256]	@ (80018d4 <MX_GPIO_Init+0x1b4>)
 80017d4:	f003 fb30 	bl	8004e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 80017d8:	2302      	movs	r3, #2
 80017da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4839      	ldr	r0, [pc, #228]	@ (80018d4 <MX_GPIO_Init+0x1b4>)
 80017f0:	f003 fb22 	bl	8004e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 80017f4:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001810:	f003 fb12 	bl	8004e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 8001814:	23f0      	movs	r3, #240	@ 0xf0
 8001816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	482b      	ldr	r0, [pc, #172]	@ (80018d4 <MX_GPIO_Init+0x1b4>)
 8001828:	f003 fb06 	bl	8004e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 800182c:	f240 4316 	movw	r3, #1046	@ 0x416
 8001830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4824      	ldr	r0, [pc, #144]	@ (80018d8 <MX_GPIO_Init+0x1b8>)
 8001846:	f003 faf7 	bl	8004e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|Emergency_switch_Pin;
 800184a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800184e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001850:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	481d      	ldr	r0, [pc, #116]	@ (80018d8 <MX_GPIO_Init+0x1b8>)
 8001862:	f003 fae9 	bl	8004e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 8001866:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	4815      	ldr	r0, [pc, #84]	@ (80018d4 <MX_GPIO_Init+0x1b4>)
 8001880:	f003 fada 	bl	8004e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 8001884:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189c:	f003 facc 	bl	8004e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : joy_switch_1_Pin */
  GPIO_InitStruct.Pin = joy_switch_1_Pin;
 80018a0:	2320      	movs	r3, #32
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(joy_switch_1_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4809      	ldr	r0, [pc, #36]	@ (80018d8 <MX_GPIO_Init+0x1b8>)
 80018b4:	f003 fac0 	bl	8004e38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2100      	movs	r1, #0
 80018bc:	2028      	movs	r0, #40	@ 0x28
 80018be:	f003 f814 	bl	80048ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018c2:	2028      	movs	r0, #40	@ 0x28
 80018c4:	f003 f82b 	bl	800491e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	@ 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48000800 	.word	0x48000800
 80018d8:	48000400 	.word	0x48000400

080018dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80018dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af02      	add	r7, sp, #8
 80018e4:	60f8      	str	r0, [r7, #12]
	if(htim == &htim3){
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4aa3      	ldr	r2, [pc, #652]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	f040 813f 	bne.w	8001b6e <HAL_TIM_PeriodElapsedCallback+0x292>
		Update_qei(&encoder, &htim4);
 80018f0:	49a2      	ldr	r1, [pc, #648]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80018f2:	48a3      	ldr	r0, [pc, #652]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80018f4:	f000 fc70 	bl	80021d8 <Update_qei>
		Update_adc(&current_sensor);
 80018f8:	48a2      	ldr	r0, [pc, #648]	@ (8001b84 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80018fa:	f7ff fb02 	bl	8000f02 <Update_adc>
		if((homing == 0) && (encoder.mm > 500 || encoder.mm < 0)){
 80018fe:	4ba2      	ldr	r3, [pc, #648]	@ (8001b88 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d11a      	bne.n	800193c <HAL_TIM_PeriodElapsedCallback+0x60>
 8001906:	4b9e      	ldr	r3, [pc, #632]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001908:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800190c:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8001b8c <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8001910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	dc07      	bgt.n	800192a <HAL_TIM_PeriodElapsedCallback+0x4e>
 800191a:	4b99      	ldr	r3, [pc, #612]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800191c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001920:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001928:	d508      	bpl.n	800193c <HAL_TIM_PeriodElapsedCallback+0x60>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 800192a:	2300      	movs	r3, #0
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2302      	movs	r3, #2
 8001930:	4a97      	ldr	r2, [pc, #604]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001932:	2100      	movs	r1, #0
 8001934:	4897      	ldr	r0, [pc, #604]	@ (8001b94 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001936:	f000 fb71 	bl	800201c <Update_pwm>
 800193a:	e118      	b.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x292>
		}
		else if(mode == 0 || mode == 1){
 800193c:	4b96      	ldr	r3, [pc, #600]	@ (8001b98 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_TIM_PeriodElapsedCallback+0x70>
 8001944:	4b94      	ldr	r3, [pc, #592]	@ (8001b98 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d13f      	bne.n	80019cc <HAL_TIM_PeriodElapsedCallback+0xf0>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, v_output);
 800194c:	4b93      	ldr	r3, [pc, #588]	@ (8001b9c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2302      	movs	r3, #2
 8001954:	4a8e      	ldr	r2, [pc, #568]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001956:	2100      	movs	r1, #0
 8001958:	488e      	ldr	r0, [pc, #568]	@ (8001b94 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800195a:	f000 fb5f 	bl	800201c <Update_pwm>
			if(mode == 0){ setpoint = 0;} // If mode == 0 : set point from base system
 800195e:	4b8e      	ldr	r3, [pc, #568]	@ (8001b98 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d104      	bne.n	8001970 <HAL_TIM_PeriodElapsedCallback+0x94>
 8001966:	4b8e      	ldr	r3, [pc, #568]	@ (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e007      	b.n	8001980 <HAL_TIM_PeriodElapsedCallback+0xa4>
			else if(mode == 1){setpoint = 1;} // If mode == 1 : set point from joy
 8001970:	4b89      	ldr	r3, [pc, #548]	@ (8001b98 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d103      	bne.n	8001980 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8001978:	4b89      	ldr	r3, [pc, #548]	@ (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800197a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800197e:	601a      	str	r2, [r3, #0]
			Update_velocity_control(test);
 8001980:	4b88      	ldr	r3, [pc, #544]	@ (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198c:	eeb0 0a67 	vmov.f32	s0, s15
 8001990:	f000 f9a0 	bl	8001cd4 <Update_velocity_control>
			static uint64_t timestamp = 0;
			if (timestamp == 8){
 8001994:	4b84      	ldr	r3, [pc, #528]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	f1a2 0108 	sub.w	r1, r2, #8
 800199e:	430b      	orrs	r3, r1
 80019a0:	d106      	bne.n	80019b0 <HAL_TIM_PeriodElapsedCallback+0xd4>
//				Update_position_control(test);
				timestamp = 0;
 80019a2:	4981      	ldr	r1, [pc, #516]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	e9c1 2300 	strd	r2, r3, [r1]
			}
			timestamp++;
 80019b0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	1c51      	adds	r1, r2, #1
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	f143 0300 	adc.w	r3, r3, #0
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	4b79      	ldr	r3, [pc, #484]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80019c6:	e9c3 1200 	strd	r1, r2, [r3]
		else if(mode == 0 || mode == 1){
 80019ca:	e0d0      	b.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x292>
		}
		else{
			repeat_cheack++;
 80019cc:	4b77      	ldr	r3, [pc, #476]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d2:	f112 0a01 	adds.w	sl, r2, #1
 80019d6:	f143 0b00 	adc.w	fp, r3, #0
 80019da:	4b74      	ldr	r3, [pc, #464]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80019dc:	e9c3 ab00 	strd	sl, fp, [r3]
			// Stop motor if emergency
			if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 80019e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019e4:	4872      	ldr	r0, [pc, #456]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80019e6:	f003 fba9 	bl	800513c <HAL_GPIO_ReadPin>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d112      	bne.n	8001a16 <HAL_TIM_PeriodElapsedCallback+0x13a>
				repeat_cheack++;
 80019f0:	4b6e      	ldr	r3, [pc, #440]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f112 0801 	adds.w	r8, r2, #1
 80019fa:	f143 0900 	adc.w	r9, r3, #0
 80019fe:	4b6b      	ldr	r3, [pc, #428]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001a00:	e9c3 8900 	strd	r8, r9, [r3]
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001a04:	2300      	movs	r3, #0
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2302      	movs	r3, #2
 8001a0a:	4a61      	ldr	r2, [pc, #388]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4861      	ldr	r0, [pc, #388]	@ (8001b94 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001a10:	f000 fb04 	bl	800201c <Update_pwm>
					homing_ts++;
				}
			}
		}
	}
}
 8001a14:	e0ab      	b.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x292>
			else if(wait_command){
 8001a16:	4b67      	ldr	r3, [pc, #412]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d038      	beq.n	8001a90 <HAL_TIM_PeriodElapsedCallback+0x1b4>
				Update_joy(&joy);
 8001a1e:	4866      	ldr	r0, [pc, #408]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001a20:	f7ff faa8 	bl	8000f74 <Update_joy>
				if(!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 8001a24:	4b64      	ldr	r3, [pc, #400]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d115      	bne.n	8001a58 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8001a2c:	4b62      	ldr	r3, [pc, #392]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001a2e:	785b      	ldrb	r3, [r3, #1]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d011      	beq.n	8001a58 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8001a34:	4b60      	ldr	r3, [pc, #384]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001a36:	789b      	ldrb	r3, [r3, #2]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00d      	beq.n	8001a58 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8001a3c:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001a3e:	78db      	ldrb	r3, [r3, #3]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d009      	beq.n	8001a58 <HAL_TIM_PeriodElapsedCallback+0x17c>
					mode = 0;
 8001a44:	4b54      	ldr	r3, [pc, #336]	@ (8001b98 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
					is_home = 0;
 8001a4a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
					wait_command = 0;
 8001a50:	4b58      	ldr	r3, [pc, #352]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
 8001a56:	e08a      	b.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x292>
				else if(joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 8001a58:	4b57      	ldr	r3, [pc, #348]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 8086 	beq.w	8001b6e <HAL_TIM_PeriodElapsedCallback+0x292>
 8001a62:	4b55      	ldr	r3, [pc, #340]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001a64:	785b      	ldrb	r3, [r3, #1]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f040 8081 	bne.w	8001b6e <HAL_TIM_PeriodElapsedCallback+0x292>
 8001a6c:	4b52      	ldr	r3, [pc, #328]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001a6e:	789b      	ldrb	r3, [r3, #2]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d07c      	beq.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x292>
 8001a74:	4b50      	ldr	r3, [pc, #320]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001a76:	78db      	ldrb	r3, [r3, #3]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d078      	beq.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x292>
					mode = 1;
 8001a7c:	4b46      	ldr	r3, [pc, #280]	@ (8001b98 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
					is_home = 0;
 8001a82:	4b4e      	ldr	r3, [pc, #312]	@ (8001bbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
					wait_command = 0;
 8001a88:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
}
 8001a8e:	e06e      	b.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x292>
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8001a90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a94:	4846      	ldr	r0, [pc, #280]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001a96:	f003 fb51 	bl	800513c <HAL_GPIO_ReadPin>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d066      	beq.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x292>
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	4a3a      	ldr	r2, [pc, #232]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	483a      	ldr	r0, [pc, #232]	@ (8001b94 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001aac:	f000 fab6 	bl	800201c <Update_pwm>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ab6:	4836      	ldr	r0, [pc, #216]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001ab8:	f003 fb58 	bl	800516c <HAL_GPIO_WritePin>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6)){
 8001abc:	2140      	movs	r1, #64	@ 0x40
 8001abe:	4834      	ldr	r0, [pc, #208]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001ac0:	f003 fb3c 	bl	800513c <HAL_GPIO_ReadPin>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d010      	beq.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x210>
					if(homing_first == 1){
 8001aca:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d14d      	bne.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x292>
						homing = 1;
 8001ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b88 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -100);
 8001ad8:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2302      	movs	r3, #2
 8001ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	482b      	ldr	r0, [pc, #172]	@ (8001b94 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001ae6:	f000 fa99 	bl	800201c <Update_pwm>
}
 8001aea:	e040      	b.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x292>
				else if(homing_first == 0){
 8001aec:	4b34      	ldr	r3, [pc, #208]	@ (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d13c      	bne.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x292>
					if (homing_ts == 8000){
 8001af4:	4b33      	ldr	r3, [pc, #204]	@ (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f5a2 51fa 	sub.w	r1, r2, #8000	@ 0x1f40
 8001afe:	430b      	orrs	r3, r1
 8001b00:	d10b      	bne.n	8001b1a <HAL_TIM_PeriodElapsedCallback+0x23e>
						homing_second = 1;
 8001b02:	4b31      	ldr	r3, [pc, #196]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001b08:	2300      	movs	r3, #0
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	4a20      	ldr	r2, [pc, #128]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b10:	2100      	movs	r1, #0
 8001b12:	4820      	ldr	r0, [pc, #128]	@ (8001b94 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001b14:	f000 fa82 	bl	800201c <Update_pwm>
 8001b18:	e01f      	b.n	8001b5a <HAL_TIM_PeriodElapsedCallback+0x27e>
					}else if(homing_ts == 18000){
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	492a      	ldr	r1, [pc, #168]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001b22:	4411      	add	r1, r2
 8001b24:	430b      	orrs	r3, r1
 8001b26:	d109      	bne.n	8001b3c <HAL_TIM_PeriodElapsedCallback+0x260>
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -80);
 8001b28:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2302      	movs	r3, #2
 8001b30:	4a17      	ldr	r2, [pc, #92]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b32:	2100      	movs	r1, #0
 8001b34:	4817      	ldr	r0, [pc, #92]	@ (8001b94 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001b36:	f000 fa71 	bl	800201c <Update_pwm>
 8001b3a:	e00e      	b.n	8001b5a <HAL_TIM_PeriodElapsedCallback+0x27e>
					}else if(homing_ts == 4000){
 8001b3c:	4b21      	ldr	r3, [pc, #132]	@ (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	f5a2 617a 	sub.w	r1, r2, #4000	@ 0xfa0
 8001b46:	430b      	orrs	r3, r1
 8001b48:	d107      	bne.n	8001b5a <HAL_TIM_PeriodElapsedCallback+0x27e>
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 200);
 8001b4a:	23c8      	movs	r3, #200	@ 0xc8
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2302      	movs	r3, #2
 8001b50:	4a0f      	ldr	r2, [pc, #60]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b52:	2100      	movs	r1, #0
 8001b54:	480f      	ldr	r0, [pc, #60]	@ (8001b94 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001b56:	f000 fa61 	bl	800201c <Update_pwm>
					homing_ts++;
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	1c54      	adds	r4, r2, #1
 8001b62:	f143 0500 	adc.w	r5, r3, #0
 8001b66:	4b17      	ldr	r3, [pc, #92]	@ (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001b68:	e9c3 4500 	strd	r4, r5, [r3]
}
 8001b6c:	e7ff      	b.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x292>
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b78:	200001ec 	.word	0x200001ec
 8001b7c:	20000238 	.word	0x20000238
 8001b80:	20000388 	.word	0x20000388
 8001b84:	200002b8 	.word	0x200002b8
 8001b88:	200002b1 	.word	0x200002b1
 8001b8c:	43fa0000 	.word	0x43fa0000
 8001b90:	48000800 	.word	0x48000800
 8001b94:	200001a0 	.word	0x200001a0
 8001b98:	200002b4 	.word	0x200002b4
 8001b9c:	200003f4 	.word	0x200003f4
 8001ba0:	20000298 	.word	0x20000298
 8001ba4:	20000294 	.word	0x20000294
 8001ba8:	20000418 	.word	0x20000418
 8001bac:	20000288 	.word	0x20000288
 8001bb0:	48000400 	.word	0x48000400
 8001bb4:	200002b3 	.word	0x200002b3
 8001bb8:	2000029c 	.word	0x2000029c
 8001bbc:	200002b2 	.word	0x200002b2
 8001bc0:	20000001 	.word	0x20000001
 8001bc4:	200002a8 	.word	0x200002a8
 8001bc8:	200002b0 	.word	0x200002b0
 8001bcc:	ffffb9b0 	.word	0xffffb9b0

08001bd0 <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15){
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001be0:	d10d      	bne.n	8001bfe <HAL_GPIO_EXTI_Callback+0x2e>
		// Emergency switch interrupted
		// Stop motor
		Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001be2:	2300      	movs	r3, #0
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2302      	movs	r3, #2
 8001be8:	4a2f      	ldr	r2, [pc, #188]	@ (8001ca8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001bea:	2100      	movs	r1, #0
 8001bec:	482f      	ldr	r0, [pc, #188]	@ (8001cac <HAL_GPIO_EXTI_Callback+0xdc>)
 8001bee:	f000 fa15 	bl	800201c <Update_pwm>
		// Emergency light enable
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bf8:	482b      	ldr	r0, [pc, #172]	@ (8001ca8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001bfa:	f003 fab7 	bl	800516c <HAL_GPIO_WritePin>
//		mode = 2;
	}
	if(GPIO_Pin == GPIO_PIN_12){
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c04:	d14d      	bne.n	8001ca2 <HAL_GPIO_EXTI_Callback+0xd2>
		// Proximity interrupted
		limitswitch_test++;
 8001c06:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	4a28      	ldr	r2, [pc, #160]	@ (8001cb0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001c0e:	6013      	str	r3, [r2, #0]
		if(homing == 1){
 8001c10:	4b28      	ldr	r3, [pc, #160]	@ (8001cb4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d135      	bne.n	8001c84 <HAL_GPIO_EXTI_Callback+0xb4>
			// If homing
			if(homing_first == 1){
 8001c18:	4b27      	ldr	r3, [pc, #156]	@ (8001cb8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d10b      	bne.n	8001c38 <HAL_GPIO_EXTI_Callback+0x68>
				// First time stop
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001c20:	2300      	movs	r3, #0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2302      	movs	r3, #2
 8001c26:	4a20      	ldr	r2, [pc, #128]	@ (8001ca8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4820      	ldr	r0, [pc, #128]	@ (8001cac <HAL_GPIO_EXTI_Callback+0xdc>)
 8001c2c:	f000 f9f6 	bl	800201c <Update_pwm>
				homing_first = 0;
 8001c30:	4b21      	ldr	r3, [pc, #132]	@ (8001cb8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
				return;
 8001c36:	e034      	b.n	8001ca2 <HAL_GPIO_EXTI_Callback+0xd2>
			}
			else if(homing_second == 1){
 8001c38:	4b20      	ldr	r3, [pc, #128]	@ (8001cbc <HAL_GPIO_EXTI_Callback+0xec>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d130      	bne.n	8001ca2 <HAL_GPIO_EXTI_Callback+0xd2>
				// Second time stop and reset variables.
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001c40:	2300      	movs	r3, #0
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2302      	movs	r3, #2
 8001c46:	4a18      	ldr	r2, [pc, #96]	@ (8001ca8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4818      	ldr	r0, [pc, #96]	@ (8001cac <HAL_GPIO_EXTI_Callback+0xdc>)
 8001c4c:	f000 f9e6 	bl	800201c <Update_pwm>
				homing_ts = 0;
 8001c50:	491b      	ldr	r1, [pc, #108]	@ (8001cc0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	e9c1 2300 	strd	r2, r3, [r1]
				is_home = 1;
 8001c5e:	4b19      	ldr	r3, [pc, #100]	@ (8001cc4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
				homing_second = 0;
 8001c64:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <HAL_GPIO_EXTI_Callback+0xec>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
				homing_first = 1;
 8001c6a:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
				homing = 0;
 8001c70:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
				wait_command = 1;
 8001c76:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
				Reset_qei(&encoder);
 8001c7c:	4813      	ldr	r0, [pc, #76]	@ (8001ccc <HAL_GPIO_EXTI_Callback+0xfc>)
 8001c7e:	f000 fc1f 	bl	80024c0 <Reset_qei>
 8001c82:	e00e      	b.n	8001ca2 <HAL_GPIO_EXTI_Callback+0xd2>
			}
		}
		else{
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001c84:	2300      	movs	r3, #0
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2302      	movs	r3, #2
 8001c8a:	4a07      	ldr	r2, [pc, #28]	@ (8001ca8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4807      	ldr	r0, [pc, #28]	@ (8001cac <HAL_GPIO_EXTI_Callback+0xdc>)
 8001c90:	f000 f9c4 	bl	800201c <Update_pwm>
			mode = 2;
 8001c94:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <HAL_GPIO_EXTI_Callback+0x100>)
 8001c96:	2202      	movs	r2, #2
 8001c98:	701a      	strb	r2, [r3, #0]
			homing_first = 0;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	@ (8001cb8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
			return;
 8001ca0:	bf00      	nop
		}
	}
}
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	48000800 	.word	0x48000800
 8001cac:	200001a0 	.word	0x200001a0
 8001cb0:	20000290 	.word	0x20000290
 8001cb4:	200002b1 	.word	0x200002b1
 8001cb8:	20000001 	.word	0x20000001
 8001cbc:	200002b0 	.word	0x200002b0
 8001cc0:	200002a8 	.word	0x200002a8
 8001cc4:	200002b2 	.word	0x200002b2
 8001cc8:	200002b3 	.word	0x200002b3
 8001ccc:	20000388 	.word	0x20000388
 8001cd0:	200002b4 	.word	0x200002b4

08001cd4 <Update_velocity_control>:
// Torque control update
void Update_torque_control(float32_t s){

}
// Velocity control update
void Update_velocity_control(float32_t s){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	ed87 0a01 	vstr	s0, [r7, #4]
	//input is pulse unit
	v_e = s - Get_mmps(&encoder);
 8001cde:	480f      	ldr	r0, [pc, #60]	@ (8001d1c <Update_velocity_control+0x48>)
 8001ce0:	f000 fc1f 	bl	8002522 <Get_mmps>
 8001ce4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ce8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <Update_velocity_control+0x4c>)
 8001cf2:	edc3 7a00 	vstr	s15, [r3]
	v_output = Update_pid(&v_pid, v_e, 900.0, 1000.0);
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <Update_velocity_control+0x4c>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8001d24 <Update_velocity_control+0x50>
 8001d00:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001d28 <Update_velocity_control+0x54>
 8001d04:	eeb0 0a67 	vmov.f32	s0, s15
 8001d08:	4808      	ldr	r0, [pc, #32]	@ (8001d2c <Update_velocity_control+0x58>)
 8001d0a:	f000 f83f 	bl	8001d8c <Update_pid>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a07      	ldr	r2, [pc, #28]	@ (8001d30 <Update_velocity_control+0x5c>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000388 	.word	0x20000388
 8001d20:	200003f0 	.word	0x200003f0
 8001d24:	447a0000 	.word	0x447a0000
 8001d28:	44610000 	.word	0x44610000
 8001d2c:	200003d0 	.word	0x200003d0
 8001d30:	200003f4 	.word	0x200003f4

08001d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d38:	b672      	cpsid	i
}
 8001d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <Error_Handler+0x8>

08001d40 <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6178      	str	r0, [r7, #20]
 8001d48:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d4c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001d50:	ed87 1a02 	vstr	s2, [r7, #8]
 8001d54:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 8001d70:	6979      	ldr	r1, [r7, #20]
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001d7e:	bf00      	nop
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 8001d8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d90:	b08a      	sub	sp, #40	@ 0x28
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d9a:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d9e:	ed87 1a00 	vstr	s2, [r7]
//	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	ed97 7a06 	vldr	s14, [r7, #24]
 8001db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db4:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 8001db8:	4b96      	ldr	r3, [pc, #600]	@ (8002014 <Update_pid+0x288>)
 8001dba:	edd3 7a00 	vldr	s15, [r3]
 8001dbe:	ed97 7a06 	vldr	s14, [r7, #24]
 8001dc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dcc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dda:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt / 2.0)*(e_n + e_n_1)) + y_n_1;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dee:	ee17 0a90 	vmov	r0, s15
 8001df2:	f7fe fb75 	bl	80004e0 <__aeabi_f2d>
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dfe:	f7fe fcf1 	bl	80007e4 <__aeabi_ddiv>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4690      	mov	r8, r2
 8001e08:	4699      	mov	r9, r3
 8001e0a:	4b82      	ldr	r3, [pc, #520]	@ (8002014 <Update_pid+0x288>)
 8001e0c:	ed93 7a00 	vldr	s14, [r3]
 8001e10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e18:	ee17 0a90 	vmov	r0, s15
 8001e1c:	f7fe fb60 	bl	80004e0 <__aeabi_f2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4640      	mov	r0, r8
 8001e26:	4649      	mov	r1, r9
 8001e28:	f7fe fbb2 	bl	8000590 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4690      	mov	r8, r2
 8001e32:	4699      	mov	r9, r3
 8001e34:	4b78      	ldr	r3, [pc, #480]	@ (8002018 <Update_pid+0x28c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fb51 	bl	80004e0 <__aeabi_f2d>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4640      	mov	r0, r8
 8001e44:	4649      	mov	r1, r9
 8001e46:	f7fe f9ed 	bl	8000224 <__adddf3>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7fe fe7f 	bl	8000b54 <__aeabi_d2f>
 8001e56:	4603      	mov	r3, r0
 8001e58:	623b      	str	r3, [r7, #32]

	if(pid -> ki == 0){
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e68:	d102      	bne.n	8001e70 <Update_pid+0xe4>
		i_term = 0;
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7e:	d102      	bne.n	8001e86 <Update_pid+0xfa>
		d_term = 0;
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 8001e86:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e8a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e92:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	ee17 0a90 	vmov	r0, s15
 8001e9e:	f7fe fb1f 	bl	80004e0 <__aeabi_f2d>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	68f9      	ldr	r1, [r7, #12]
 8001ea8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t is_sat = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7fe fb12 	bl	80004e0 <__aeabi_f2d>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4640      	mov	r0, r8
 8001ec2:	4649      	mov	r1, r9
 8001ec4:	f7fe fdf4 	bl	8000ab0 <__aeabi_dcmpgt>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <Update_pid+0x148>
		is_sat = 1;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	77fb      	strb	r3, [r7, #31]
 8001ed2:	e016      	b.n	8001f02 <Update_pid+0x176>
	}
	else if(pid -> y_n < -(pid_sat)){
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001eda:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ede:	eef1 7a67 	vneg.f32	s15, s15
 8001ee2:	ee17 3a90 	vmov	r3, s15
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fafa 	bl	80004e0 <__aeabi_f2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4640      	mov	r0, r8
 8001ef2:	4649      	mov	r1, r9
 8001ef4:	f7fe fdbe 	bl	8000a74 <__aeabi_dcmplt>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <Update_pid+0x176>
		is_sat = 1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 8001f02:	69b8      	ldr	r0, [r7, #24]
 8001f04:	f7fe faec 	bl	80004e0 <__aeabi_f2d>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f0e:	f7fe fb3f 	bl	8000590 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4690      	mov	r8, r2
 8001f18:	4699      	mov	r9, r3
 8001f1a:	69b8      	ldr	r0, [r7, #24]
 8001f1c:	f7fe fae0 	bl	80004e0 <__aeabi_f2d>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f26:	f7fe fb33 	bl	8000590 <__aeabi_dmul>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4614      	mov	r4, r2
 8001f30:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001f34:	4622      	mov	r2, r4
 8001f36:	462b      	mov	r3, r5
 8001f38:	4640      	mov	r0, r8
 8001f3a:	4649      	mov	r1, r9
 8001f3c:	f7fe fd90 	bl	8000a60 <__aeabi_dcmpeq>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d011      	beq.n	8001f6a <Update_pid+0x1de>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 8001f46:	7ffb      	ldrb	r3, [r7, #31]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d10e      	bne.n	8001f6a <Update_pid+0x1de>
			pid -> y_n = p_term + d_term;
 8001f4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f50:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f58:	ee17 0a90 	vmov	r0, s15
 8001f5c:	f7fe fac0 	bl	80004e0 <__aeabi_f2d>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	68f9      	ldr	r1, [r7, #12]
 8001f66:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	// Plant saturation
	if(pid -> y_n > plant_sat){
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001f70:	6838      	ldr	r0, [r7, #0]
 8001f72:	f7fe fab5 	bl	80004e0 <__aeabi_f2d>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	f7fe fd97 	bl	8000ab0 <__aeabi_dcmpgt>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <Update_pid+0x20e>
		pid -> y_n = plant_sat;
 8001f88:	6838      	ldr	r0, [r7, #0]
 8001f8a:	f7fe faa9 	bl	80004e0 <__aeabi_f2d>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	68f9      	ldr	r1, [r7, #12]
 8001f94:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001f98:	e022      	b.n	8001fe0 <Update_pid+0x254>
	}
	else if(pid -> y_n < -(plant_sat)){
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001fa0:	edd7 7a00 	vldr	s15, [r7]
 8001fa4:	eef1 7a67 	vneg.f32	s15, s15
 8001fa8:	ee17 3a90 	vmov	r3, s15
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fa97 	bl	80004e0 <__aeabi_f2d>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	4629      	mov	r1, r5
 8001fba:	f7fe fd5b 	bl	8000a74 <__aeabi_dcmplt>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00d      	beq.n	8001fe0 <Update_pid+0x254>
		pid -> y_n = (-(plant_sat));
 8001fc4:	edd7 7a00 	vldr	s15, [r7]
 8001fc8:	eef1 7a67 	vneg.f32	s15, s15
 8001fcc:	ee17 3a90 	vmov	r3, s15
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fa85 	bl	80004e0 <__aeabi_f2d>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	68f9      	ldr	r1, [r7, #12]
 8001fdc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f7fe fdb3 	bl	8000b54 <__aeabi_d2f>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a09      	ldr	r2, [pc, #36]	@ (8002018 <Update_pid+0x28c>)
 8001ff2:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 8001ff4:	4a07      	ldr	r2, [pc, #28]	@ (8002014 <Update_pid+0x288>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	6013      	str	r3, [r2, #0]
	return pid -> y_n;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
 8002004:	f7fe fd5e 	bl	8000ac4 <__aeabi_d2iz>
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3728      	adds	r7, #40	@ 0x28
 800200e:	46bd      	mov	sp, r7
 8002010:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002014:	20000420 	.word	0x20000420
 8002018:	20000424 	.word	0x20000424

0800201c <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 800201c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002020:	b08b      	sub	sp, #44	@ 0x2c
 8002022:	af00      	add	r7, sp, #0
 8002024:	6278      	str	r0, [r7, #36]	@ 0x24
 8002026:	61fa      	str	r2, [r7, #28]
 8002028:	461a      	mov	r2, r3
 800202a:	460b      	mov	r3, r1
 800202c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800202e:	4613      	mov	r3, r2
 8002030:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 8002032:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002034:	2b00      	cmp	r3, #0
 8002036:	d111      	bne.n	800205c <Update_pwm+0x40>
 8002038:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800203a:	f7fe fa3f 	bl	80004bc <__aeabi_i2d>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	613a      	str	r2, [r7, #16]
 8002044:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	681c      	ldr	r4, [r3, #0]
 800204e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002052:	f7fe fd5f 	bl	8000b14 <__aeabi_d2uiz>
 8002056:	4603      	mov	r3, r0
 8002058:	6363      	str	r3, [r4, #52]	@ 0x34
 800205a:	e061      	b.n	8002120 <Update_pwm+0x104>
 800205c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800205e:	2b04      	cmp	r3, #4
 8002060:	d111      	bne.n	8002086 <Update_pwm+0x6a>
 8002062:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002064:	f7fe fa2a 	bl	80004bc <__aeabi_i2d>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	60ba      	str	r2, [r7, #8]
 800206e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	681c      	ldr	r4, [r3, #0]
 8002078:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800207c:	f7fe fd4a 	bl	8000b14 <__aeabi_d2uiz>
 8002080:	4603      	mov	r3, r0
 8002082:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002084:	e04c      	b.n	8002120 <Update_pwm+0x104>
 8002086:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002088:	2b08      	cmp	r3, #8
 800208a:	d111      	bne.n	80020b0 <Update_pwm+0x94>
 800208c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800208e:	f7fe fa15 	bl	80004bc <__aeabi_i2d>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	603a      	str	r2, [r7, #0]
 8002098:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800209c:	607b      	str	r3, [r7, #4]
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	681c      	ldr	r4, [r3, #0]
 80020a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020a6:	f7fe fd35 	bl	8000b14 <__aeabi_d2uiz>
 80020aa:	4603      	mov	r3, r0
 80020ac:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80020ae:	e037      	b.n	8002120 <Update_pwm+0x104>
 80020b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80020b2:	2b0c      	cmp	r3, #12
 80020b4:	d110      	bne.n	80020d8 <Update_pwm+0xbc>
 80020b6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020b8:	f7fe fa00 	bl	80004bc <__aeabi_i2d>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4615      	mov	r5, r2
 80020c2:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	681c      	ldr	r4, [r3, #0]
 80020ca:	4628      	mov	r0, r5
 80020cc:	4631      	mov	r1, r6
 80020ce:	f7fe fd21 	bl	8000b14 <__aeabi_d2uiz>
 80020d2:	4603      	mov	r3, r0
 80020d4:	6423      	str	r3, [r4, #64]	@ 0x40
 80020d6:	e023      	b.n	8002120 <Update_pwm+0x104>
 80020d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80020da:	2b10      	cmp	r3, #16
 80020dc:	d110      	bne.n	8002100 <Update_pwm+0xe4>
 80020de:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020e0:	f7fe f9ec 	bl	80004bc <__aeabi_i2d>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4692      	mov	sl, r2
 80020ea:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	681c      	ldr	r4, [r3, #0]
 80020f2:	4650      	mov	r0, sl
 80020f4:	4659      	mov	r1, fp
 80020f6:	f7fe fd0d 	bl	8000b14 <__aeabi_d2uiz>
 80020fa:	4603      	mov	r3, r0
 80020fc:	64a3      	str	r3, [r4, #72]	@ 0x48
 80020fe:	e00f      	b.n	8002120 <Update_pwm+0x104>
 8002100:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002102:	f7fe f9db 	bl	80004bc <__aeabi_i2d>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4690      	mov	r8, r2
 800210c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002112:	681c      	ldr	r4, [r3, #0]
 8002114:	4640      	mov	r0, r8
 8002116:	4649      	mov	r1, r9
 8002118:	f7fe fcfc 	bl	8000b14 <__aeabi_d2uiz>
 800211c:	4603      	mov	r3, r0
 800211e:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 8002120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002122:	2b00      	cmp	r3, #0
 8002124:	da06      	bge.n	8002134 <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 8002126:	8c3b      	ldrh	r3, [r7, #32]
 8002128:	2200      	movs	r2, #0
 800212a:	4619      	mov	r1, r3
 800212c:	69f8      	ldr	r0, [r7, #28]
 800212e:	f003 f81d 	bl	800516c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 8002132:	e005      	b.n	8002140 <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 8002134:	8c3b      	ldrh	r3, [r7, #32]
 8002136:	2201      	movs	r2, #1
 8002138:	4619      	mov	r1, r3
 800213a:	69f8      	ldr	r0, [r7, #28]
 800213c:	f003 f816 	bl	800516c <HAL_GPIO_WritePin>
}
 8002140:	bf00      	nop
 8002142:	372c      	adds	r7, #44	@ 0x2c
 8002144:	46bd      	mov	sp, r7
 8002146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800214a <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 800214a:	b480      	push	{r7}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 800217c:	68f9      	ldr	r1, [r7, #12]
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 80021a2:	68f9      	ldr	r1, [r7, #12]
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0.0;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps = 0.0;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> mmps = 0.0;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	0000      	movs	r0, r0
	...

080021d8 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 80021d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	0fd9      	lsrs	r1, r3, #31
 8002208:	440b      	add	r3, r1
 800220a:	105b      	asrs	r3, r3, #1
 800220c:	429a      	cmp	r2, r3
 800220e:	dd06      	ble.n	800221e <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	1ad2      	subs	r2, r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	425b      	negs	r3, r3
 8002228:	0fd9      	lsrs	r1, r3, #31
 800222a:	440b      	add	r3, r1
 800222c:	105b      	asrs	r3, r3, #1
 800222e:	429a      	cmp	r2, r3
 8002230:	da06      	bge.n	8002240 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	441a      	add	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	615a      	str	r2, [r3, #20]
	}
	// Update velocity at difference unit
	qei -> pps = (float)qei -> diff_counter_value * (float)qei -> freq;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	ee07 3a90 	vmov	s15, r3
 8002248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	ee07 3a90 	vmov	s15, r3
 8002254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225c:	ee17 0a90 	vmov	r0, s15
 8002260:	f7fe f93e 	bl	80004e0 <__aeabi_f2d>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> radps = qei -> pps * 2.0 * M_PI / (float)(qei -> ppr);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	f7fd ffd4 	bl	8000224 <__adddf3>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	a38a      	add	r3, pc, #552	@ (adr r3, 80024b0 <Update_qei+0x2d8>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	f7fe f981 	bl	8000590 <__aeabi_dmul>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4692      	mov	sl, r2
 8002294:	469b      	mov	fp, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a2:	ee17 0a90 	vmov	r0, s15
 80022a6:	f7fe f91b 	bl	80004e0 <__aeabi_f2d>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4650      	mov	r0, sl
 80022b0:	4659      	mov	r1, fp
 80022b2:	f7fe fa97 	bl	80007e4 <__aeabi_ddiv>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	f7fe fc49 	bl	8000b54 <__aeabi_d2f>
 80022c2:	4602      	mov	r2, r0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	4b79      	ldr	r3, [pc, #484]	@ (80024b8 <Update_qei+0x2e0>)
 80022d4:	f7fe f95c 	bl	8000590 <__aeabi_dmul>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4692      	mov	sl, r2
 80022de:	469b      	mov	fp, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	ee07 3a90 	vmov	s15, r3
 80022e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ec:	ee17 0a90 	vmov	r0, s15
 80022f0:	f7fe f8f6 	bl	80004e0 <__aeabi_f2d>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4650      	mov	r0, sl
 80022fa:	4659      	mov	r1, fp
 80022fc:	f7fe fa72 	bl	80007e4 <__aeabi_ddiv>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	f7fe fc24 	bl	8000b54 <__aeabi_d2f>
 800230c:	4602      	mov	r2, r0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> mmps = qei -> pps * 16.0 / (float)(qei -> ppr);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	4b67      	ldr	r3, [pc, #412]	@ (80024bc <Update_qei+0x2e4>)
 800231e:	f7fe f937 	bl	8000590 <__aeabi_dmul>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4692      	mov	sl, r2
 8002328:	469b      	mov	fp, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002336:	ee17 0a90 	vmov	r0, s15
 800233a:	f7fe f8d1 	bl	80004e0 <__aeabi_f2d>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4650      	mov	r0, sl
 8002344:	4659      	mov	r1, fp
 8002346:	f7fe fa4d 	bl	80007e4 <__aeabi_ddiv>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	f7fe fbff 	bl	8000b54 <__aeabi_d2f>
 8002356:	4602      	mov	r2, r0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	@ 0x40
	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	6949      	ldr	r1, [r1, #20]
 8002366:	17c8      	asrs	r0, r1, #31
 8002368:	460c      	mov	r4, r1
 800236a:	4605      	mov	r5, r0
 800236c:	eb12 0804 	adds.w	r8, r2, r4
 8002370:	eb43 0905 	adc.w	r9, r3, r5
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	e9c3 8906 	strd	r8, r9, [r3, #24]
	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f8ae 	bl	80004e0 <__aeabi_f2d>
 8002384:	4604      	mov	r4, r0
 8002386:	460d      	mov	r5, r1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002394:	ee17 0a90 	vmov	r0, s15
 8002398:	f7fe f8a2 	bl	80004e0 <__aeabi_f2d>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	f7fd ff40 	bl	8000224 <__adddf3>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	a340      	add	r3, pc, #256	@ (adr r3, 80024b0 <Update_qei+0x2d8>)
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	f7fe f8ed 	bl	8000590 <__aeabi_dmul>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4690      	mov	r8, r2
 80023bc:	4699      	mov	r9, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ca:	ee17 0a90 	vmov	r0, s15
 80023ce:	f7fe f887 	bl	80004e0 <__aeabi_f2d>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4640      	mov	r0, r8
 80023d8:	4649      	mov	r1, r9
 80023da:	f7fe fa03 	bl	80007e4 <__aeabi_ddiv>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4620      	mov	r0, r4
 80023e4:	4629      	mov	r1, r5
 80023e6:	f7fd ff1d 	bl	8000224 <__adddf3>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7fe fbaf 	bl	8000b54 <__aeabi_d2f>
 80023f6:	4602      	mov	r2, r0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	ed93 7a08 	vldr	s14, [r3, #32]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	ee07 3a90 	vmov	s15, r3
 8002416:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800241a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800241e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	edc3 7a08 	vstr	s15, [r3, #32]
	qei -> mm += (float)qei -> diff_counter_value * 16.0 / (float)(qei -> ppr); // for lead 16 mm.
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f857 	bl	80004e0 <__aeabi_f2d>
 8002432:	4604      	mov	r4, r0
 8002434:	460d      	mov	r5, r1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002442:	ee17 0a90 	vmov	r0, s15
 8002446:	f7fe f84b 	bl	80004e0 <__aeabi_f2d>
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	4b1b      	ldr	r3, [pc, #108]	@ (80024bc <Update_qei+0x2e4>)
 8002450:	f7fe f89e 	bl	8000590 <__aeabi_dmul>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4690      	mov	r8, r2
 800245a:	4699      	mov	r9, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002468:	ee17 0a90 	vmov	r0, s15
 800246c:	f7fe f838 	bl	80004e0 <__aeabi_f2d>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4640      	mov	r0, r8
 8002476:	4649      	mov	r1, r9
 8002478:	f7fe f9b4 	bl	80007e4 <__aeabi_ddiv>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4620      	mov	r0, r4
 8002482:	4629      	mov	r1, r5
 8002484:	f7fd fece 	bl	8000224 <__adddf3>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	f7fe fb60 	bl	8000b54 <__aeabi_d2f>
 8002494:	4602      	mov	r2, r0
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	629a      	str	r2, [r3, #40]	@ 0x28
	// Update acceleration at difference

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	611a      	str	r2, [r3, #16]

}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ac:	f3af 8000 	nop.w
 80024b0:	54442d18 	.word	0x54442d18
 80024b4:	400921fb 	.word	0x400921fb
 80024b8:	404e0000 	.word	0x404e0000
 80024bc:	40300000 	.word	0x40300000

080024c0 <Reset_qei>:

void Reset_qei(QEI* qei){
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	qei -> counter_value[NEW] = 0;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
	qei -> pps = 0;
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps =0;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <Get_mmps>:

float32_t Get_mmps(QEI* qei){
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
	return qei -> mmps;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	ee07 3a90 	vmov	s15, r3
}
 8002532:	eeb0 0a67 	vmov.f32	s0, s15
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <HAL_MspInit+0x44>)
 8002548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254a:	4a0e      	ldr	r2, [pc, #56]	@ (8002584 <HAL_MspInit+0x44>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6613      	str	r3, [r2, #96]	@ 0x60
 8002552:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <HAL_MspInit+0x44>)
 8002554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <HAL_MspInit+0x44>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002562:	4a08      	ldr	r2, [pc, #32]	@ (8002584 <HAL_MspInit+0x44>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002568:	6593      	str	r3, [r2, #88]	@ 0x58
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <HAL_MspInit+0x44>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002576:	f002 fecd 	bl	8005314 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000

08002588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b09e      	sub	sp, #120	@ 0x78
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025a0:	f107 0310 	add.w	r3, r7, #16
 80025a4:	2254      	movs	r2, #84	@ 0x54
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f006 fa47 	bl	8008a3c <memset>
  if(hadc->Instance==ADC1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025b6:	d167      	bne.n	8002688 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80025b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80025be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80025c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025c4:	f107 0310 	add.w	r3, r7, #16
 80025c8:	4618      	mov	r0, r3
 80025ca:	f003 fbe1 	bl	8005d90 <HAL_RCCEx_PeriphCLKConfig>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80025d4:	f7ff fbae 	bl	8001d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80025d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002690 <HAL_ADC_MspInit+0x108>)
 80025da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002690 <HAL_ADC_MspInit+0x108>)
 80025de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002690 <HAL_ADC_MspInit+0x108>)
 80025e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f0:	4b27      	ldr	r3, [pc, #156]	@ (8002690 <HAL_ADC_MspInit+0x108>)
 80025f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f4:	4a26      	ldr	r2, [pc, #152]	@ (8002690 <HAL_ADC_MspInit+0x108>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025fc:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <HAL_ADC_MspInit+0x108>)
 80025fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 8002608:	2301      	movs	r3, #1
 800260a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800260c:	2303      	movs	r3, #3
 800260e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8002614:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002618:	4619      	mov	r1, r3
 800261a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800261e:	f002 fc0b 	bl	8004e38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002622:	4b1c      	ldr	r3, [pc, #112]	@ (8002694 <HAL_ADC_MspInit+0x10c>)
 8002624:	4a1c      	ldr	r2, [pc, #112]	@ (8002698 <HAL_ADC_MspInit+0x110>)
 8002626:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002628:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <HAL_ADC_MspInit+0x10c>)
 800262a:	2205      	movs	r2, #5
 800262c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800262e:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <HAL_ADC_MspInit+0x10c>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002634:	4b17      	ldr	r3, [pc, #92]	@ (8002694 <HAL_ADC_MspInit+0x10c>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800263a:	4b16      	ldr	r3, [pc, #88]	@ (8002694 <HAL_ADC_MspInit+0x10c>)
 800263c:	2280      	movs	r2, #128	@ 0x80
 800263e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002640:	4b14      	ldr	r3, [pc, #80]	@ (8002694 <HAL_ADC_MspInit+0x10c>)
 8002642:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002646:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002648:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <HAL_ADC_MspInit+0x10c>)
 800264a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800264e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002650:	4b10      	ldr	r3, [pc, #64]	@ (8002694 <HAL_ADC_MspInit+0x10c>)
 8002652:	2220      	movs	r2, #32
 8002654:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002656:	4b0f      	ldr	r3, [pc, #60]	@ (8002694 <HAL_ADC_MspInit+0x10c>)
 8002658:	2200      	movs	r2, #0
 800265a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800265c:	480d      	ldr	r0, [pc, #52]	@ (8002694 <HAL_ADC_MspInit+0x10c>)
 800265e:	f002 f979 	bl	8004954 <HAL_DMA_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002668:	f7ff fb64 	bl	8001d34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a09      	ldr	r2, [pc, #36]	@ (8002694 <HAL_ADC_MspInit+0x10c>)
 8002670:	655a      	str	r2, [r3, #84]	@ 0x54
 8002672:	4a08      	ldr	r2, [pc, #32]	@ (8002694 <HAL_ADC_MspInit+0x10c>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002678:	2200      	movs	r2, #0
 800267a:	2100      	movs	r1, #0
 800267c:	2012      	movs	r0, #18
 800267e:	f002 f934 	bl	80048ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002682:	2012      	movs	r0, #18
 8002684:	f002 f94b 	bl	800491e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002688:	bf00      	nop
 800268a:	3778      	adds	r7, #120	@ 0x78
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	200000ac 	.word	0x200000ac
 8002698:	40020008 	.word	0x40020008

0800269c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b09e      	sub	sp, #120	@ 0x78
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b4:	f107 0310 	add.w	r3, r7, #16
 80026b8:	2254      	movs	r2, #84	@ 0x54
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f006 f9bd 	bl	8008a3c <memset>
  if(huart->Instance==LPUART1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002744 <HAL_UART_MspInit+0xa8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d136      	bne.n	800273a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80026cc:	2320      	movs	r3, #32
 80026ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d4:	f107 0310 	add.w	r3, r7, #16
 80026d8:	4618      	mov	r0, r3
 80026da:	f003 fb59 	bl	8005d90 <HAL_RCCEx_PeriphCLKConfig>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026e4:	f7ff fb26 	bl	8001d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80026e8:	4b17      	ldr	r3, [pc, #92]	@ (8002748 <HAL_UART_MspInit+0xac>)
 80026ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ec:	4a16      	ldr	r2, [pc, #88]	@ (8002748 <HAL_UART_MspInit+0xac>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80026f4:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <HAL_UART_MspInit+0xac>)
 80026f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <HAL_UART_MspInit+0xac>)
 8002702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002704:	4a10      	ldr	r2, [pc, #64]	@ (8002748 <HAL_UART_MspInit+0xac>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800270c:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <HAL_UART_MspInit+0xac>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002718:	230c      	movs	r3, #12
 800271a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2300      	movs	r3, #0
 8002726:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002728:	230c      	movs	r3, #12
 800272a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002730:	4619      	mov	r1, r3
 8002732:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002736:	f002 fb7f 	bl	8004e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800273a:	bf00      	nop
 800273c:	3778      	adds	r7, #120	@ 0x78
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40008000 	.word	0x40008000
 8002748:	40021000 	.word	0x40021000

0800274c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a16      	ldr	r2, [pc, #88]	@ (80027b4 <HAL_TIM_Base_MspInit+0x68>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10c      	bne.n	8002778 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800275e:	4b16      	ldr	r3, [pc, #88]	@ (80027b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002762:	4a15      	ldr	r2, [pc, #84]	@ (80027b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002764:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002768:	6613      	str	r3, [r2, #96]	@ 0x60
 800276a:	4b13      	ldr	r3, [pc, #76]	@ (80027b8 <HAL_TIM_Base_MspInit+0x6c>)
 800276c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800276e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002776:	e018      	b.n	80027aa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0f      	ldr	r2, [pc, #60]	@ (80027bc <HAL_TIM_Base_MspInit+0x70>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d113      	bne.n	80027aa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002782:	4b0d      	ldr	r3, [pc, #52]	@ (80027b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002786:	4a0c      	ldr	r2, [pc, #48]	@ (80027b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	6593      	str	r3, [r2, #88]	@ 0x58
 800278e:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2100      	movs	r1, #0
 800279e:	201d      	movs	r0, #29
 80027a0:	f002 f8a3 	bl	80048ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027a4:	201d      	movs	r0, #29
 80027a6:	f002 f8ba 	bl	800491e <HAL_NVIC_EnableIRQ>
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40012c00 	.word	0x40012c00
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40000400 	.word	0x40000400

080027c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	@ 0x28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002850 <HAL_TIM_Encoder_MspInit+0x90>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d131      	bne.n	8002846 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002854 <HAL_TIM_Encoder_MspInit+0x94>)
 80027e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002854 <HAL_TIM_Encoder_MspInit+0x94>)
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80027ee:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <HAL_TIM_Encoder_MspInit+0x94>)
 80027f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	4b16      	ldr	r3, [pc, #88]	@ (8002854 <HAL_TIM_Encoder_MspInit+0x94>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027fe:	4a15      	ldr	r2, [pc, #84]	@ (8002854 <HAL_TIM_Encoder_MspInit+0x94>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002806:	4b13      	ldr	r3, [pc, #76]	@ (8002854 <HAL_TIM_Encoder_MspInit+0x94>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8002812:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002820:	2300      	movs	r3, #0
 8002822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002824:	230a      	movs	r3, #10
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	4619      	mov	r1, r3
 800282e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002832:	f002 fb01 	bl	8004e38 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2100      	movs	r1, #0
 800283a:	201e      	movs	r0, #30
 800283c:	f002 f855 	bl	80048ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002840:	201e      	movs	r0, #30
 8002842:	f002 f86c 	bl	800491e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002846:	bf00      	nop
 8002848:	3728      	adds	r7, #40	@ 0x28
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40000800 	.word	0x40000800
 8002854:	40021000 	.word	0x40021000

08002858 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 030c 	add.w	r3, r7, #12
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a11      	ldr	r2, [pc, #68]	@ (80028bc <HAL_TIM_MspPostInit+0x64>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d11b      	bne.n	80028b2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800287a:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <HAL_TIM_MspPostInit+0x68>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287e:	4a10      	ldr	r2, [pc, #64]	@ (80028c0 <HAL_TIM_MspPostInit+0x68>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002886:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <HAL_TIM_MspPostInit+0x68>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 8002892:	2301      	movs	r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80028a2:	2302      	movs	r3, #2
 80028a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	4619      	mov	r1, r3
 80028ac:	4805      	ldr	r0, [pc, #20]	@ (80028c4 <HAL_TIM_MspPostInit+0x6c>)
 80028ae:	f002 fac3 	bl	8004e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028b2:	bf00      	nop
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40021000 	.word	0x40021000
 80028c4:	48000800 	.word	0x48000800

080028c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028cc:	bf00      	nop
 80028ce:	e7fd      	b.n	80028cc <NMI_Handler+0x4>

080028d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <HardFault_Handler+0x4>

080028d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <MemManage_Handler+0x4>

080028e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <BusFault_Handler+0x4>

080028e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <UsageFault_Handler+0x4>

080028f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800291e:	f000 f8c9 	bl	8002ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800292c:	4802      	ldr	r0, [pc, #8]	@ (8002938 <DMA1_Channel1_IRQHandler+0x10>)
 800292e:	f002 f934 	bl	8004b9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200000ac 	.word	0x200000ac

0800293c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002940:	4802      	ldr	r0, [pc, #8]	@ (800294c <ADC1_2_IRQHandler+0x10>)
 8002942:	f000 fda5 	bl	8003490 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000040 	.word	0x20000040

08002950 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002954:	4802      	ldr	r0, [pc, #8]	@ (8002960 <TIM3_IRQHandler+0x10>)
 8002956:	f004 f851 	bl	80069fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200001ec 	.word	0x200001ec

08002964 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002968:	4802      	ldr	r0, [pc, #8]	@ (8002974 <TIM4_IRQHandler+0x10>)
 800296a:	f004 f847 	bl	80069fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000238 	.word	0x20000238

08002978 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_Pin);
 800297c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002980:	f002 fc0c 	bl	800519c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002984:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002988:	f002 fc08 	bl	800519c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 800298c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002990:	f002 fc04 	bl	800519c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}

08002998 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800299c:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <SystemInit+0x20>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a2:	4a05      	ldr	r2, [pc, #20]	@ (80029b8 <SystemInit+0x20>)
 80029a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029bc:	480d      	ldr	r0, [pc, #52]	@ (80029f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029c0:	f7ff ffea 	bl	8002998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029c4:	480c      	ldr	r0, [pc, #48]	@ (80029f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80029c6:	490d      	ldr	r1, [pc, #52]	@ (80029fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80029c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a00 <LoopForever+0xe>)
  movs r3, #0
 80029ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029cc:	e002      	b.n	80029d4 <LoopCopyDataInit>

080029ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029d2:	3304      	adds	r3, #4

080029d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d8:	d3f9      	bcc.n	80029ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029da:	4a0a      	ldr	r2, [pc, #40]	@ (8002a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002a08 <LoopForever+0x16>)
  movs r3, #0
 80029de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e0:	e001      	b.n	80029e6 <LoopFillZerobss>

080029e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e4:	3204      	adds	r2, #4

080029e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e8:	d3fb      	bcc.n	80029e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ea:	f006 f82f 	bl	8008a4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029ee:	f7fe fb3b 	bl	8001068 <main>

080029f2 <LoopForever>:

LoopForever:
    b LoopForever
 80029f2:	e7fe      	b.n	80029f2 <LoopForever>
  ldr   r0, =_estack
 80029f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029fc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002a00:	08008afc 	.word	0x08008afc
  ldr r2, =_sbss
 8002a04:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002a08:	2000042c 	.word	0x2000042c

08002a0c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a0c:	e7fe      	b.n	8002a0c <ADC3_IRQHandler>

08002a0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a18:	2003      	movs	r0, #3
 8002a1a:	f001 ff5b 	bl	80048d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f000 f80e 	bl	8002a40 <HAL_InitTick>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	71fb      	strb	r3, [r7, #7]
 8002a2e:	e001      	b.n	8002a34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a30:	f7ff fd86 	bl	8002540 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a34:	79fb      	ldrb	r3, [r7, #7]

}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a4c:	4b16      	ldr	r3, [pc, #88]	@ (8002aa8 <HAL_InitTick+0x68>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d022      	beq.n	8002a9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a54:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <HAL_InitTick+0x6c>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b13      	ldr	r3, [pc, #76]	@ (8002aa8 <HAL_InitTick+0x68>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002a60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f001 ff66 	bl	800493a <HAL_SYSTICK_Config>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10f      	bne.n	8002a94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b0f      	cmp	r3, #15
 8002a78:	d809      	bhi.n	8002a8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a82:	f001 ff32 	bl	80048ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a86:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab0 <HAL_InitTick+0x70>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	e007      	b.n	8002a9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
 8002a92:	e004      	b.n	8002a9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	e001      	b.n	8002a9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000014 	.word	0x20000014
 8002aac:	2000000c 	.word	0x2000000c
 8002ab0:	20000010 	.word	0x20000010

08002ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ab8:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <HAL_IncTick+0x1c>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <HAL_IncTick+0x20>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	4a03      	ldr	r2, [pc, #12]	@ (8002ad0 <HAL_IncTick+0x1c>)
 8002ac4:	6013      	str	r3, [r2, #0]
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	20000428 	.word	0x20000428
 8002ad4:	20000014 	.word	0x20000014

08002ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return uwTick;
 8002adc:	4b03      	ldr	r3, [pc, #12]	@ (8002aec <HAL_GetTick+0x14>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000428 	.word	0x20000428

08002af0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	609a      	str	r2, [r3, #8]
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3360      	adds	r3, #96	@ 0x60
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b08      	ldr	r3, [pc, #32]	@ (8002b9c <LL_ADC_SetOffset+0x44>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b90:	bf00      	nop
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	03fff000 	.word	0x03fff000

08002ba0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3360      	adds	r3, #96	@ 0x60
 8002bae:	461a      	mov	r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3360      	adds	r3, #96	@ 0x60
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b087      	sub	sp, #28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3360      	adds	r3, #96	@ 0x60
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002c2c:	bf00      	nop
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3360      	adds	r3, #96	@ 0x60
 8002c48:	461a      	mov	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	615a      	str	r2, [r3, #20]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b087      	sub	sp, #28
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3330      	adds	r3, #48	@ 0x30
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	4413      	add	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	211f      	movs	r1, #31
 8002ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	401a      	ands	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0e9b      	lsrs	r3, r3, #26
 8002cf2:	f003 011f 	and.w	r1, r3, #31
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	431a      	orrs	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d06:	bf00      	nop
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	3314      	adds	r3, #20
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	0e5b      	lsrs	r3, r3, #25
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	4413      	add	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	0d1b      	lsrs	r3, r3, #20
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2107      	movs	r1, #7
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	0d1b      	lsrs	r3, r3, #20
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da8:	43db      	mvns	r3, r3
 8002daa:	401a      	ands	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0318 	and.w	r3, r3, #24
 8002db2:	4908      	ldr	r1, [pc, #32]	@ (8002dd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002db4:	40d9      	lsrs	r1, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	400b      	ands	r3, r1
 8002dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	0007ffff 	.word	0x0007ffff

08002dd8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 031f 	and.w	r3, r3, #31
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002e20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6093      	str	r3, [r2, #8]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e48:	d101      	bne.n	8002e4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002e6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e98:	d101      	bne.n	8002e9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ebc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <LL_ADC_IsEnabled+0x18>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <LL_ADC_IsEnabled+0x1a>
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f0a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f0e:	f043 0204 	orr.w	r2, r3, #4
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d101      	bne.n	8002f3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d101      	bne.n	8002f60 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b089      	sub	sp, #36	@ 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e1a9      	b.n	80032de <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d109      	bne.n	8002fac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff faf5 	bl	8002588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff3f 	bl	8002e34 <LL_ADC_IsDeepPowerDownEnabled>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d004      	beq.n	8002fc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff25 	bl	8002e10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ff5a 	bl	8002e84 <LL_ADC_IsInternalRegulatorEnabled>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d115      	bne.n	8003002 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ff3e 	bl	8002e5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fe0:	4b9c      	ldr	r3, [pc, #624]	@ (8003254 <HAL_ADC_Init+0x2e4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	099b      	lsrs	r3, r3, #6
 8002fe6:	4a9c      	ldr	r2, [pc, #624]	@ (8003258 <HAL_ADC_Init+0x2e8>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	3301      	adds	r3, #1
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ff4:	e002      	b.n	8002ffc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f9      	bne.n	8002ff6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff3c 	bl	8002e84 <LL_ADC_IsInternalRegulatorEnabled>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10d      	bne.n	800302e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003016:	f043 0210 	orr.w	r2, r3, #16
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003022:	f043 0201 	orr.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff ff75 	bl	8002f22 <LL_ADC_REG_IsConversionOngoing>
 8003038:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b00      	cmp	r3, #0
 8003044:	f040 8142 	bne.w	80032cc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 813e 	bne.w	80032cc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003054:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003058:	f043 0202 	orr.w	r2, r3, #2
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff35 	bl	8002ed4 <LL_ADC_IsEnabled>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d141      	bne.n	80030f4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003078:	d004      	beq.n	8003084 <HAL_ADC_Init+0x114>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a77      	ldr	r2, [pc, #476]	@ (800325c <HAL_ADC_Init+0x2ec>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d10f      	bne.n	80030a4 <HAL_ADC_Init+0x134>
 8003084:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003088:	f7ff ff24 	bl	8002ed4 <LL_ADC_IsEnabled>
 800308c:	4604      	mov	r4, r0
 800308e:	4873      	ldr	r0, [pc, #460]	@ (800325c <HAL_ADC_Init+0x2ec>)
 8003090:	f7ff ff20 	bl	8002ed4 <LL_ADC_IsEnabled>
 8003094:	4603      	mov	r3, r0
 8003096:	4323      	orrs	r3, r4
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	e012      	b.n	80030ca <HAL_ADC_Init+0x15a>
 80030a4:	486e      	ldr	r0, [pc, #440]	@ (8003260 <HAL_ADC_Init+0x2f0>)
 80030a6:	f7ff ff15 	bl	8002ed4 <LL_ADC_IsEnabled>
 80030aa:	4604      	mov	r4, r0
 80030ac:	486d      	ldr	r0, [pc, #436]	@ (8003264 <HAL_ADC_Init+0x2f4>)
 80030ae:	f7ff ff11 	bl	8002ed4 <LL_ADC_IsEnabled>
 80030b2:	4603      	mov	r3, r0
 80030b4:	431c      	orrs	r4, r3
 80030b6:	486c      	ldr	r0, [pc, #432]	@ (8003268 <HAL_ADC_Init+0x2f8>)
 80030b8:	f7ff ff0c 	bl	8002ed4 <LL_ADC_IsEnabled>
 80030bc:	4603      	mov	r3, r0
 80030be:	4323      	orrs	r3, r4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d012      	beq.n	80030f4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030d6:	d004      	beq.n	80030e2 <HAL_ADC_Init+0x172>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a5f      	ldr	r2, [pc, #380]	@ (800325c <HAL_ADC_Init+0x2ec>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_Init+0x176>
 80030e2:	4a62      	ldr	r2, [pc, #392]	@ (800326c <HAL_ADC_Init+0x2fc>)
 80030e4:	e000      	b.n	80030e8 <HAL_ADC_Init+0x178>
 80030e6:	4a62      	ldr	r2, [pc, #392]	@ (8003270 <HAL_ADC_Init+0x300>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f7ff fcfe 	bl	8002af0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7f5b      	ldrb	r3, [r3, #29]
 80030f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003104:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800310a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003112:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800311e:	2b01      	cmp	r3, #1
 8003120:	d106      	bne.n	8003130 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003126:	3b01      	subs	r3, #1
 8003128:	045b      	lsls	r3, r3, #17
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d009      	beq.n	800314c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003144:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	4b48      	ldr	r3, [pc, #288]	@ (8003274 <HAL_ADC_Init+0x304>)
 8003154:	4013      	ands	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	69b9      	ldr	r1, [r7, #24]
 800315c:	430b      	orrs	r3, r1
 800315e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fee4 	bl	8002f48 <LL_ADC_INJ_IsConversionOngoing>
 8003180:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d17f      	bne.n	8003288 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d17c      	bne.n	8003288 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003192:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800319a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031aa:	f023 0302 	bic.w	r3, r3, #2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	69b9      	ldr	r1, [r7, #24]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d017      	beq.n	80031f0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80031ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80031d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80031dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6911      	ldr	r1, [r2, #16]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	430b      	orrs	r3, r1
 80031ea:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80031ee:	e013      	b.n	8003218 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80031fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003210:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003214:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800321e:	2b01      	cmp	r3, #1
 8003220:	d12a      	bne.n	8003278 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800322c:	f023 0304 	bic.w	r3, r3, #4
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003238:	4311      	orrs	r1, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800323e:	4311      	orrs	r1, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003244:	430a      	orrs	r2, r1
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	611a      	str	r2, [r3, #16]
 8003252:	e019      	b.n	8003288 <HAL_ADC_Init+0x318>
 8003254:	2000000c 	.word	0x2000000c
 8003258:	053e2d63 	.word	0x053e2d63
 800325c:	50000100 	.word	0x50000100
 8003260:	50000400 	.word	0x50000400
 8003264:	50000500 	.word	0x50000500
 8003268:	50000600 	.word	0x50000600
 800326c:	50000300 	.word	0x50000300
 8003270:	50000700 	.word	0x50000700
 8003274:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0201 	bic.w	r2, r2, #1
 8003286:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d10c      	bne.n	80032aa <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	f023 010f 	bic.w	r1, r3, #15
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	1e5a      	subs	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80032a8:	e007      	b.n	80032ba <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 020f 	bic.w	r2, r2, #15
 80032b8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	f043 0201 	orr.w	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032ca:	e007      	b.n	80032dc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d0:	f043 0210 	orr.w	r2, r3, #16
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3724      	adds	r7, #36	@ 0x24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd90      	pop	{r4, r7, pc}
 80032e6:	bf00      	nop

080032e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032fc:	d004      	beq.n	8003308 <HAL_ADC_Start_DMA+0x20>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a5a      	ldr	r2, [pc, #360]	@ (800346c <HAL_ADC_Start_DMA+0x184>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d101      	bne.n	800330c <HAL_ADC_Start_DMA+0x24>
 8003308:	4b59      	ldr	r3, [pc, #356]	@ (8003470 <HAL_ADC_Start_DMA+0x188>)
 800330a:	e000      	b.n	800330e <HAL_ADC_Start_DMA+0x26>
 800330c:	4b59      	ldr	r3, [pc, #356]	@ (8003474 <HAL_ADC_Start_DMA+0x18c>)
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff fd62 	bl	8002dd8 <LL_ADC_GetMultimode>
 8003314:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff fe01 	bl	8002f22 <LL_ADC_REG_IsConversionOngoing>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 809b 	bne.w	800345e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_ADC_Start_DMA+0x4e>
 8003332:	2302      	movs	r3, #2
 8003334:	e096      	b.n	8003464 <HAL_ADC_Start_DMA+0x17c>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a4d      	ldr	r2, [pc, #308]	@ (8003478 <HAL_ADC_Start_DMA+0x190>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d008      	beq.n	800335a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b05      	cmp	r3, #5
 8003352:	d002      	beq.n	800335a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b09      	cmp	r3, #9
 8003358:	d17a      	bne.n	8003450 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 ff60 	bl	8004220 <ADC_Enable>
 8003360:	4603      	mov	r3, r0
 8003362:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d16d      	bne.n	8003446 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a3a      	ldr	r2, [pc, #232]	@ (800346c <HAL_ADC_Start_DMA+0x184>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_ADC_Start_DMA+0xb4>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a3b      	ldr	r2, [pc, #236]	@ (800347c <HAL_ADC_Start_DMA+0x194>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d002      	beq.n	8003398 <HAL_ADC_Start_DMA+0xb0>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	e003      	b.n	80033a0 <HAL_ADC_Start_DMA+0xb8>
 8003398:	4b39      	ldr	r3, [pc, #228]	@ (8003480 <HAL_ADC_Start_DMA+0x198>)
 800339a:	e001      	b.n	80033a0 <HAL_ADC_Start_DMA+0xb8>
 800339c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d002      	beq.n	80033ae <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d105      	bne.n	80033ba <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ca:	f023 0206 	bic.w	r2, r3, #6
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	661a      	str	r2, [r3, #96]	@ 0x60
 80033d2:	e002      	b.n	80033da <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033de:	4a29      	ldr	r2, [pc, #164]	@ (8003484 <HAL_ADC_Start_DMA+0x19c>)
 80033e0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e6:	4a28      	ldr	r2, [pc, #160]	@ (8003488 <HAL_ADC_Start_DMA+0x1a0>)
 80033e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ee:	4a27      	ldr	r2, [pc, #156]	@ (800348c <HAL_ADC_Start_DMA+0x1a4>)
 80033f0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	221c      	movs	r2, #28
 80033f8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0210 	orr.w	r2, r2, #16
 8003410:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3340      	adds	r3, #64	@ 0x40
 800342c:	4619      	mov	r1, r3
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f001 fb37 	bl	8004aa4 <HAL_DMA_Start_IT>
 8003436:	4603      	mov	r3, r0
 8003438:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fd5b 	bl	8002efa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003444:	e00d      	b.n	8003462 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800344e:	e008      	b.n	8003462 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800345c:	e001      	b.n	8003462 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800345e:	2302      	movs	r3, #2
 8003460:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003462:	7dfb      	ldrb	r3, [r7, #23]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	50000100 	.word	0x50000100
 8003470:	50000300 	.word	0x50000300
 8003474:	50000700 	.word	0x50000700
 8003478:	50000600 	.word	0x50000600
 800347c:	50000500 	.word	0x50000500
 8003480:	50000400 	.word	0x50000400
 8003484:	0800434d 	.word	0x0800434d
 8003488:	08004425 	.word	0x08004425
 800348c:	08004441 	.word	0x08004441

08003490 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	@ 0x28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003498:	2300      	movs	r3, #0
 800349a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034b4:	d004      	beq.n	80034c0 <HAL_ADC_IRQHandler+0x30>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a8e      	ldr	r2, [pc, #568]	@ (80036f4 <HAL_ADC_IRQHandler+0x264>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_IRQHandler+0x34>
 80034c0:	4b8d      	ldr	r3, [pc, #564]	@ (80036f8 <HAL_ADC_IRQHandler+0x268>)
 80034c2:	e000      	b.n	80034c6 <HAL_ADC_IRQHandler+0x36>
 80034c4:	4b8d      	ldr	r3, [pc, #564]	@ (80036fc <HAL_ADC_IRQHandler+0x26c>)
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fc86 	bl	8002dd8 <LL_ADC_GetMultimode>
 80034cc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d017      	beq.n	8003508 <HAL_ADC_IRQHandler+0x78>
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d012      	beq.n	8003508 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d105      	bne.n	80034fa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f001 f808 	bl	8004510 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2202      	movs	r2, #2
 8003506:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d004      	beq.n	800351c <HAL_ADC_IRQHandler+0x8c>
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 8094 	beq.w	8003650 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 808e 	beq.w	8003650 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	d105      	bne.n	800354c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003544:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fb9f 	bl	8002c94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d072      	beq.n	8003642 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a64      	ldr	r2, [pc, #400]	@ (80036f4 <HAL_ADC_IRQHandler+0x264>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d009      	beq.n	800357a <HAL_ADC_IRQHandler+0xea>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a65      	ldr	r2, [pc, #404]	@ (8003700 <HAL_ADC_IRQHandler+0x270>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d002      	beq.n	8003576 <HAL_ADC_IRQHandler+0xe6>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	e003      	b.n	800357e <HAL_ADC_IRQHandler+0xee>
 8003576:	4b63      	ldr	r3, [pc, #396]	@ (8003704 <HAL_ADC_IRQHandler+0x274>)
 8003578:	e001      	b.n	800357e <HAL_ADC_IRQHandler+0xee>
 800357a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6812      	ldr	r2, [r2, #0]
 8003582:	4293      	cmp	r3, r2
 8003584:	d008      	beq.n	8003598 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2b05      	cmp	r3, #5
 8003590:	d002      	beq.n	8003598 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b09      	cmp	r3, #9
 8003596:	d104      	bne.n	80035a2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	623b      	str	r3, [r7, #32]
 80035a0:	e014      	b.n	80035cc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a53      	ldr	r2, [pc, #332]	@ (80036f4 <HAL_ADC_IRQHandler+0x264>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d009      	beq.n	80035c0 <HAL_ADC_IRQHandler+0x130>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a53      	ldr	r2, [pc, #332]	@ (8003700 <HAL_ADC_IRQHandler+0x270>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d002      	beq.n	80035bc <HAL_ADC_IRQHandler+0x12c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	e003      	b.n	80035c4 <HAL_ADC_IRQHandler+0x134>
 80035bc:	4b51      	ldr	r3, [pc, #324]	@ (8003704 <HAL_ADC_IRQHandler+0x274>)
 80035be:	e001      	b.n	80035c4 <HAL_ADC_IRQHandler+0x134>
 80035c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80035c4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d135      	bne.n	8003642 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d12e      	bne.n	8003642 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fc9a 	bl	8002f22 <LL_ADC_REG_IsConversionOngoing>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11a      	bne.n	800362a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 020c 	bic.w	r2, r2, #12
 8003602:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003608:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003614:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d112      	bne.n	8003642 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003620:	f043 0201 	orr.w	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003628:	e00b      	b.n	8003642 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362e:	f043 0210 	orr.w	r2, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363a:	f043 0201 	orr.w	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f984 	bl	8003950 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	220c      	movs	r2, #12
 800364e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	d004      	beq.n	8003664 <HAL_ADC_IRQHandler+0x1d4>
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10b      	bne.n	800367c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80b3 	beq.w	80037d6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80ad 	beq.w	80037d6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b00      	cmp	r3, #0
 8003686:	d105      	bne.n	8003694 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fb3a 	bl	8002d12 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800369e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff faf5 	bl	8002c94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036aa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a10      	ldr	r2, [pc, #64]	@ (80036f4 <HAL_ADC_IRQHandler+0x264>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d009      	beq.n	80036ca <HAL_ADC_IRQHandler+0x23a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a11      	ldr	r2, [pc, #68]	@ (8003700 <HAL_ADC_IRQHandler+0x270>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d002      	beq.n	80036c6 <HAL_ADC_IRQHandler+0x236>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	e003      	b.n	80036ce <HAL_ADC_IRQHandler+0x23e>
 80036c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003704 <HAL_ADC_IRQHandler+0x274>)
 80036c8:	e001      	b.n	80036ce <HAL_ADC_IRQHandler+0x23e>
 80036ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d008      	beq.n	80036e8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d002      	beq.n	80036e8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b07      	cmp	r3, #7
 80036e6:	d10f      	bne.n	8003708 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	623b      	str	r3, [r7, #32]
 80036f0:	e01f      	b.n	8003732 <HAL_ADC_IRQHandler+0x2a2>
 80036f2:	bf00      	nop
 80036f4:	50000100 	.word	0x50000100
 80036f8:	50000300 	.word	0x50000300
 80036fc:	50000700 	.word	0x50000700
 8003700:	50000500 	.word	0x50000500
 8003704:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a8b      	ldr	r2, [pc, #556]	@ (800393c <HAL_ADC_IRQHandler+0x4ac>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_ADC_IRQHandler+0x296>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a8a      	ldr	r2, [pc, #552]	@ (8003940 <HAL_ADC_IRQHandler+0x4b0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d002      	beq.n	8003722 <HAL_ADC_IRQHandler+0x292>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	e003      	b.n	800372a <HAL_ADC_IRQHandler+0x29a>
 8003722:	4b88      	ldr	r3, [pc, #544]	@ (8003944 <HAL_ADC_IRQHandler+0x4b4>)
 8003724:	e001      	b.n	800372a <HAL_ADC_IRQHandler+0x29a>
 8003726:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800372a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d047      	beq.n	80037c8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_ADC_IRQHandler+0x2c2>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d03f      	beq.n	80037c8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800374e:	2b00      	cmp	r3, #0
 8003750:	d13a      	bne.n	80037c8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375c:	2b40      	cmp	r3, #64	@ 0x40
 800375e:	d133      	bne.n	80037c8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d12e      	bne.n	80037c8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fbea 	bl	8002f48 <LL_ADC_INJ_IsConversionOngoing>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d11a      	bne.n	80037b0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003788:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d112      	bne.n	80037c8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	f043 0201 	orr.w	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037ae:	e00b      	b.n	80037c8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b4:	f043 0210 	orr.w	r2, r3, #16
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c0:	f043 0201 	orr.w	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fe79 	bl	80044c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2260      	movs	r2, #96	@ 0x60
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d011      	beq.n	8003804 <HAL_ADC_IRQHandler+0x374>
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f8be 	bl	8003978 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2280      	movs	r2, #128	@ 0x80
 8003802:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d012      	beq.n	8003834 <HAL_ADC_IRQHandler+0x3a4>
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fe5f 	bl	80044e8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800383a:	2b00      	cmp	r3, #0
 800383c:	d012      	beq.n	8003864 <HAL_ADC_IRQHandler+0x3d4>
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00d      	beq.n	8003864 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fe51 	bl	80044fc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003862:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d043      	beq.n	80038f6 <HAL_ADC_IRQHandler+0x466>
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	d03e      	beq.n	80038f6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003880:	2301      	movs	r3, #1
 8003882:	627b      	str	r3, [r7, #36]	@ 0x24
 8003884:	e021      	b.n	80038ca <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d015      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003894:	d004      	beq.n	80038a0 <HAL_ADC_IRQHandler+0x410>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a28      	ldr	r2, [pc, #160]	@ (800393c <HAL_ADC_IRQHandler+0x4ac>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d101      	bne.n	80038a4 <HAL_ADC_IRQHandler+0x414>
 80038a0:	4b29      	ldr	r3, [pc, #164]	@ (8003948 <HAL_ADC_IRQHandler+0x4b8>)
 80038a2:	e000      	b.n	80038a6 <HAL_ADC_IRQHandler+0x416>
 80038a4:	4b29      	ldr	r3, [pc, #164]	@ (800394c <HAL_ADC_IRQHandler+0x4bc>)
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff faa4 	bl	8002df4 <LL_ADC_GetMultiDMATransfer>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80038b2:	2301      	movs	r3, #1
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b6:	e008      	b.n	80038ca <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80038c6:	2301      	movs	r3, #1
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10e      	bne.n	80038ee <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e0:	f043 0202 	orr.w	r2, r3, #2
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f84f 	bl	800398c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2210      	movs	r2, #16
 80038f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d018      	beq.n	8003932 <HAL_ADC_IRQHandler+0x4a2>
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003906:	2b00      	cmp	r3, #0
 8003908:	d013      	beq.n	8003932 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391a:	f043 0208 	orr.w	r2, r3, #8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800392a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fdd1 	bl	80044d4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003932:	bf00      	nop
 8003934:	3728      	adds	r7, #40	@ 0x28
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	50000100 	.word	0x50000100
 8003940:	50000500 	.word	0x50000500
 8003944:	50000400 	.word	0x50000400
 8003948:	50000300 	.word	0x50000300
 800394c:	50000700 	.word	0x50000700

08003950 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b0b6      	sub	sp, #216	@ 0xd8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d102      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x24>
 80039be:	2302      	movs	r3, #2
 80039c0:	f000 bc13 	b.w	80041ea <HAL_ADC_ConfigChannel+0x84a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff faa6 	bl	8002f22 <LL_ADC_REG_IsConversionOngoing>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f040 83f3 	bne.w	80041c4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6859      	ldr	r1, [r3, #4]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	f7ff f965 	bl	8002cba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff fa94 	bl	8002f22 <LL_ADC_REG_IsConversionOngoing>
 80039fa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff faa0 	bl	8002f48 <LL_ADC_INJ_IsConversionOngoing>
 8003a08:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f040 81d9 	bne.w	8003dc8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f040 81d4 	bne.w	8003dc8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a28:	d10f      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2200      	movs	r2, #0
 8003a34:	4619      	mov	r1, r3
 8003a36:	f7ff f97f 	bl	8002d38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff f913 	bl	8002c6e <LL_ADC_SetSamplingTimeCommonConfig>
 8003a48:	e00e      	b.n	8003a68 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6819      	ldr	r1, [r3, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	461a      	mov	r2, r3
 8003a58:	f7ff f96e 	bl	8002d38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff f903 	bl	8002c6e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	08db      	lsrs	r3, r3, #3
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d022      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6919      	ldr	r1, [r3, #16]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a9a:	f7ff f85d 	bl	8002b58 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6919      	ldr	r1, [r3, #16]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f7ff f8a9 	bl	8002c02 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d102      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x126>
 8003ac0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ac4:	e000      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x128>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f7ff f8b5 	bl	8002c38 <LL_ADC_SetOffsetSaturation>
 8003ace:	e17b      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff f862 	bl	8002ba0 <LL_ADC_GetOffsetChannel>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x15c>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2100      	movs	r1, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff f857 	bl	8002ba0 <LL_ADC_GetOffsetChannel>
 8003af2:	4603      	mov	r3, r0
 8003af4:	0e9b      	lsrs	r3, r3, #26
 8003af6:	f003 021f 	and.w	r2, r3, #31
 8003afa:	e01e      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x19a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff f84c 	bl	8002ba0 <LL_ADC_GetOffsetChannel>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b12:	fa93 f3a3 	rbit	r3, r3
 8003b16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003b2a:	2320      	movs	r3, #32
 8003b2c:	e004      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003b2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b32:	fab3 f383 	clz	r3, r3
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d105      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x1b2>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	0e9b      	lsrs	r3, r3, #26
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	e018      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x1e4>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003b6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003b76:	2320      	movs	r3, #32
 8003b78:	e004      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003b7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b7e:	fab3 f383 	clz	r3, r3
 8003b82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d106      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff f81b 	bl	8002bcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe ffff 	bl	8002ba0 <LL_ADC_GetOffsetChannel>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10a      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x222>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe fff4 	bl	8002ba0 <LL_ADC_GetOffsetChannel>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	0e9b      	lsrs	r3, r3, #26
 8003bbc:	f003 021f 	and.w	r2, r3, #31
 8003bc0:	e01e      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x260>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fe ffe9 	bl	8002ba0 <LL_ADC_GetOffsetChannel>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003bd8:	fa93 f3a3 	rbit	r3, r3
 8003bdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003be0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003be4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003be8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	e004      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003bf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003bf8:	fab3 f383 	clz	r3, r3
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d105      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x278>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	0e9b      	lsrs	r3, r3, #26
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	e018      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x2aa>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c24:	fa93 f3a3 	rbit	r3, r3
 8003c28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003c2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003c3c:	2320      	movs	r3, #32
 8003c3e:	e004      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c44:	fab3 f383 	clz	r3, r3
 8003c48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d106      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2200      	movs	r2, #0
 8003c54:	2101      	movs	r1, #1
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fe ffb8 	bl	8002bcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2102      	movs	r1, #2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe ff9c 	bl	8002ba0 <LL_ADC_GetOffsetChannel>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x2e8>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2102      	movs	r1, #2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe ff91 	bl	8002ba0 <LL_ADC_GetOffsetChannel>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	0e9b      	lsrs	r3, r3, #26
 8003c82:	f003 021f 	and.w	r2, r3, #31
 8003c86:	e01e      	b.n	8003cc6 <HAL_ADC_ConfigChannel+0x326>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe ff86 	bl	8002ba0 <LL_ADC_GetOffsetChannel>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c9e:	fa93 f3a3 	rbit	r3, r3
 8003ca2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003ca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003caa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003cae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003cb6:	2320      	movs	r3, #32
 8003cb8:	e004      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003cba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cbe:	fab3 f383 	clz	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d105      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x33e>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	0e9b      	lsrs	r3, r3, #26
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	e016      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x36c>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003cf0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cf2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003cfe:	2320      	movs	r3, #32
 8003d00:	e004      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003d02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d06:	fab3 f383 	clz	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d106      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2200      	movs	r2, #0
 8003d16:	2102      	movs	r1, #2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fe ff57 	bl	8002bcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2103      	movs	r1, #3
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe ff3b 	bl	8002ba0 <LL_ADC_GetOffsetChannel>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x3aa>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2103      	movs	r1, #3
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe ff30 	bl	8002ba0 <LL_ADC_GetOffsetChannel>
 8003d40:	4603      	mov	r3, r0
 8003d42:	0e9b      	lsrs	r3, r3, #26
 8003d44:	f003 021f 	and.w	r2, r3, #31
 8003d48:	e017      	b.n	8003d7a <HAL_ADC_ConfigChannel+0x3da>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2103      	movs	r1, #3
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fe ff25 	bl	8002ba0 <LL_ADC_GetOffsetChannel>
 8003d56:	4603      	mov	r3, r0
 8003d58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d5c:	fa93 f3a3 	rbit	r3, r3
 8003d60:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003d62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d64:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003d66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003d6c:	2320      	movs	r3, #32
 8003d6e:	e003      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003d70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d105      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x3f2>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	0e9b      	lsrs	r3, r3, #26
 8003d8c:	f003 031f 	and.w	r3, r3, #31
 8003d90:	e011      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x416>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003da0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003da2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003da4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003daa:	2320      	movs	r3, #32
 8003dac:	e003      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003dae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003db0:	fab3 f383 	clz	r3, r3
 8003db4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d106      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2103      	movs	r1, #3
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe ff02 	bl	8002bcc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff f881 	bl	8002ed4 <LL_ADC_IsEnabled>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f040 813d 	bne.w	8004054 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6819      	ldr	r1, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f7fe ffd2 	bl	8002d90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4aa2      	ldr	r2, [pc, #648]	@ (800407c <HAL_ADC_ConfigChannel+0x6dc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	f040 812e 	bne.w	8004054 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10b      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x480>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	0e9b      	lsrs	r3, r3, #26
 8003e0e:	3301      	adds	r3, #1
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	2b09      	cmp	r3, #9
 8003e16:	bf94      	ite	ls
 8003e18:	2301      	movls	r3, #1
 8003e1a:	2300      	movhi	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	e019      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x4b4>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e28:	fa93 f3a3 	rbit	r3, r3
 8003e2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003e2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e30:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003e32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003e38:	2320      	movs	r3, #32
 8003e3a:	e003      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003e3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e3e:	fab3 f383 	clz	r3, r3
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	3301      	adds	r3, #1
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	2b09      	cmp	r3, #9
 8003e4c:	bf94      	ite	ls
 8003e4e:	2301      	movls	r3, #1
 8003e50:	2300      	movhi	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d079      	beq.n	8003f4c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d107      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x4d4>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	0e9b      	lsrs	r3, r3, #26
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	069b      	lsls	r3, r3, #26
 8003e6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e72:	e015      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x500>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e7c:	fa93 f3a3 	rbit	r3, r3
 8003e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003e82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e84:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	e003      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e92:	fab3 f383 	clz	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	3301      	adds	r3, #1
 8003e9a:	069b      	lsls	r3, r3, #26
 8003e9c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x520>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0e9b      	lsrs	r3, r3, #26
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	2101      	movs	r1, #1
 8003eba:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebe:	e017      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x550>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ec8:	fa93 f3a3 	rbit	r3, r3
 8003ecc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003ed8:	2320      	movs	r3, #32
 8003eda:	e003      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003edc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ede:	fab3 f383 	clz	r3, r3
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	f003 031f 	and.w	r3, r3, #31
 8003eea:	2101      	movs	r1, #1
 8003eec:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef0:	ea42 0103 	orr.w	r1, r2, r3
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10a      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x576>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	0e9b      	lsrs	r3, r3, #26
 8003f06:	3301      	adds	r3, #1
 8003f08:	f003 021f 	and.w	r2, r3, #31
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	4413      	add	r3, r2
 8003f12:	051b      	lsls	r3, r3, #20
 8003f14:	e018      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x5a8>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1e:	fa93 f3a3 	rbit	r3, r3
 8003f22:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003f2e:	2320      	movs	r3, #32
 8003f30:	e003      	b.n	8003f3a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f34:	fab3 f383 	clz	r3, r3
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	f003 021f 	and.w	r2, r3, #31
 8003f40:	4613      	mov	r3, r2
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	4413      	add	r3, r2
 8003f46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	e07e      	b.n	800404a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d107      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x5c8>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	0e9b      	lsrs	r3, r3, #26
 8003f5e:	3301      	adds	r3, #1
 8003f60:	069b      	lsls	r3, r3, #26
 8003f62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f66:	e015      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x5f4>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f70:	fa93 f3a3 	rbit	r3, r3
 8003f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f78:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003f80:	2320      	movs	r3, #32
 8003f82:	e003      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f86:	fab3 f383 	clz	r3, r3
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	069b      	lsls	r3, r3, #26
 8003f90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d109      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x614>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	0e9b      	lsrs	r3, r3, #26
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	2101      	movs	r1, #1
 8003fae:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb2:	e017      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x644>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	fa93 f3a3 	rbit	r3, r3
 8003fc0:	61fb      	str	r3, [r7, #28]
  return result;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003fcc:	2320      	movs	r3, #32
 8003fce:	e003      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	fab3 f383 	clz	r3, r3
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	3301      	adds	r3, #1
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	2101      	movs	r1, #1
 8003fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe4:	ea42 0103 	orr.w	r1, r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10d      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x670>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	0e9b      	lsrs	r3, r3, #26
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	f003 021f 	and.w	r2, r3, #31
 8004000:	4613      	mov	r3, r2
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	4413      	add	r3, r2
 8004006:	3b1e      	subs	r3, #30
 8004008:	051b      	lsls	r3, r3, #20
 800400a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800400e:	e01b      	b.n	8004048 <HAL_ADC_ConfigChannel+0x6a8>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	fa93 f3a3 	rbit	r3, r3
 800401c:	613b      	str	r3, [r7, #16]
  return result;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004028:	2320      	movs	r3, #32
 800402a:	e003      	b.n	8004034 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	3301      	adds	r3, #1
 8004036:	f003 021f 	and.w	r2, r3, #31
 800403a:	4613      	mov	r3, r2
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4413      	add	r3, r2
 8004040:	3b1e      	subs	r3, #30
 8004042:	051b      	lsls	r3, r3, #20
 8004044:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004048:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800404e:	4619      	mov	r1, r3
 8004050:	f7fe fe72 	bl	8002d38 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b09      	ldr	r3, [pc, #36]	@ (8004080 <HAL_ADC_ConfigChannel+0x6e0>)
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 80be 	beq.w	80041de <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800406a:	d004      	beq.n	8004076 <HAL_ADC_ConfigChannel+0x6d6>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a04      	ldr	r2, [pc, #16]	@ (8004084 <HAL_ADC_ConfigChannel+0x6e4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d10a      	bne.n	800408c <HAL_ADC_ConfigChannel+0x6ec>
 8004076:	4b04      	ldr	r3, [pc, #16]	@ (8004088 <HAL_ADC_ConfigChannel+0x6e8>)
 8004078:	e009      	b.n	800408e <HAL_ADC_ConfigChannel+0x6ee>
 800407a:	bf00      	nop
 800407c:	407f0000 	.word	0x407f0000
 8004080:	80080000 	.word	0x80080000
 8004084:	50000100 	.word	0x50000100
 8004088:	50000300 	.word	0x50000300
 800408c:	4b59      	ldr	r3, [pc, #356]	@ (80041f4 <HAL_ADC_ConfigChannel+0x854>)
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe fd54 	bl	8002b3c <LL_ADC_GetCommonPathInternalCh>
 8004094:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a56      	ldr	r2, [pc, #344]	@ (80041f8 <HAL_ADC_ConfigChannel+0x858>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d004      	beq.n	80040ac <HAL_ADC_ConfigChannel+0x70c>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a55      	ldr	r2, [pc, #340]	@ (80041fc <HAL_ADC_ConfigChannel+0x85c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d13a      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d134      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040c0:	d005      	beq.n	80040ce <HAL_ADC_ConfigChannel+0x72e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a4e      	ldr	r2, [pc, #312]	@ (8004200 <HAL_ADC_ConfigChannel+0x860>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	f040 8085 	bne.w	80041d8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040d6:	d004      	beq.n	80040e2 <HAL_ADC_ConfigChannel+0x742>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a49      	ldr	r2, [pc, #292]	@ (8004204 <HAL_ADC_ConfigChannel+0x864>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d101      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x746>
 80040e2:	4a49      	ldr	r2, [pc, #292]	@ (8004208 <HAL_ADC_ConfigChannel+0x868>)
 80040e4:	e000      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x748>
 80040e6:	4a43      	ldr	r2, [pc, #268]	@ (80041f4 <HAL_ADC_ConfigChannel+0x854>)
 80040e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040f0:	4619      	mov	r1, r3
 80040f2:	4610      	mov	r0, r2
 80040f4:	f7fe fd0f 	bl	8002b16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040f8:	4b44      	ldr	r3, [pc, #272]	@ (800420c <HAL_ADC_ConfigChannel+0x86c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	099b      	lsrs	r3, r3, #6
 80040fe:	4a44      	ldr	r2, [pc, #272]	@ (8004210 <HAL_ADC_ConfigChannel+0x870>)
 8004100:	fba2 2303 	umull	r2, r3, r2, r3
 8004104:	099b      	lsrs	r3, r3, #6
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	4613      	mov	r3, r2
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004112:	e002      	b.n	800411a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3b01      	subs	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f9      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004120:	e05a      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a3b      	ldr	r2, [pc, #236]	@ (8004214 <HAL_ADC_ConfigChannel+0x874>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d125      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800412c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d11f      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a31      	ldr	r2, [pc, #196]	@ (8004204 <HAL_ADC_ConfigChannel+0x864>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d104      	bne.n	800414c <HAL_ADC_ConfigChannel+0x7ac>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a34      	ldr	r2, [pc, #208]	@ (8004218 <HAL_ADC_ConfigChannel+0x878>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d047      	beq.n	80041dc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004154:	d004      	beq.n	8004160 <HAL_ADC_ConfigChannel+0x7c0>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2a      	ldr	r2, [pc, #168]	@ (8004204 <HAL_ADC_ConfigChannel+0x864>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x7c4>
 8004160:	4a29      	ldr	r2, [pc, #164]	@ (8004208 <HAL_ADC_ConfigChannel+0x868>)
 8004162:	e000      	b.n	8004166 <HAL_ADC_ConfigChannel+0x7c6>
 8004164:	4a23      	ldr	r2, [pc, #140]	@ (80041f4 <HAL_ADC_ConfigChannel+0x854>)
 8004166:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800416a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800416e:	4619      	mov	r1, r3
 8004170:	4610      	mov	r0, r2
 8004172:	f7fe fcd0 	bl	8002b16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004176:	e031      	b.n	80041dc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a27      	ldr	r2, [pc, #156]	@ (800421c <HAL_ADC_ConfigChannel+0x87c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d12d      	bne.n	80041de <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004182:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d127      	bne.n	80041de <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1c      	ldr	r2, [pc, #112]	@ (8004204 <HAL_ADC_ConfigChannel+0x864>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d022      	beq.n	80041de <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041a0:	d004      	beq.n	80041ac <HAL_ADC_ConfigChannel+0x80c>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a17      	ldr	r2, [pc, #92]	@ (8004204 <HAL_ADC_ConfigChannel+0x864>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d101      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x810>
 80041ac:	4a16      	ldr	r2, [pc, #88]	@ (8004208 <HAL_ADC_ConfigChannel+0x868>)
 80041ae:	e000      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x812>
 80041b0:	4a10      	ldr	r2, [pc, #64]	@ (80041f4 <HAL_ADC_ConfigChannel+0x854>)
 80041b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041ba:	4619      	mov	r1, r3
 80041bc:	4610      	mov	r0, r2
 80041be:	f7fe fcaa 	bl	8002b16 <LL_ADC_SetCommonPathInternalCh>
 80041c2:	e00c      	b.n	80041de <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c8:	f043 0220 	orr.w	r2, r3, #32
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80041d6:	e002      	b.n	80041de <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041d8:	bf00      	nop
 80041da:	e000      	b.n	80041de <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80041e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	37d8      	adds	r7, #216	@ 0xd8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	50000700 	.word	0x50000700
 80041f8:	c3210000 	.word	0xc3210000
 80041fc:	90c00010 	.word	0x90c00010
 8004200:	50000600 	.word	0x50000600
 8004204:	50000100 	.word	0x50000100
 8004208:	50000300 	.word	0x50000300
 800420c:	2000000c 	.word	0x2000000c
 8004210:	053e2d63 	.word	0x053e2d63
 8004214:	c7520000 	.word	0xc7520000
 8004218:	50000500 	.word	0x50000500
 800421c:	cb840000 	.word	0xcb840000

08004220 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004228:	2300      	movs	r3, #0
 800422a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe fe4f 	bl	8002ed4 <LL_ADC_IsEnabled>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d176      	bne.n	800432a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	4b3c      	ldr	r3, [pc, #240]	@ (8004334 <ADC_Enable+0x114>)
 8004244:	4013      	ands	r3, r2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00d      	beq.n	8004266 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800424e:	f043 0210 	orr.w	r2, r3, #16
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800425a:	f043 0201 	orr.w	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e062      	b.n	800432c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe fe1e 	bl	8002eac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004278:	d004      	beq.n	8004284 <ADC_Enable+0x64>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a2e      	ldr	r2, [pc, #184]	@ (8004338 <ADC_Enable+0x118>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d101      	bne.n	8004288 <ADC_Enable+0x68>
 8004284:	4b2d      	ldr	r3, [pc, #180]	@ (800433c <ADC_Enable+0x11c>)
 8004286:	e000      	b.n	800428a <ADC_Enable+0x6a>
 8004288:	4b2d      	ldr	r3, [pc, #180]	@ (8004340 <ADC_Enable+0x120>)
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe fc56 	bl	8002b3c <LL_ADC_GetCommonPathInternalCh>
 8004290:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004292:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004296:	2b00      	cmp	r3, #0
 8004298:	d013      	beq.n	80042c2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800429a:	4b2a      	ldr	r3, [pc, #168]	@ (8004344 <ADC_Enable+0x124>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	099b      	lsrs	r3, r3, #6
 80042a0:	4a29      	ldr	r2, [pc, #164]	@ (8004348 <ADC_Enable+0x128>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	099b      	lsrs	r3, r3, #6
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	4613      	mov	r3, r2
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80042b4:	e002      	b.n	80042bc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f9      	bne.n	80042b6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80042c2:	f7fe fc09 	bl	8002ad8 <HAL_GetTick>
 80042c6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042c8:	e028      	b.n	800431c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fe fe00 	bl	8002ed4 <LL_ADC_IsEnabled>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d104      	bne.n	80042e4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fde4 	bl	8002eac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042e4:	f7fe fbf8 	bl	8002ad8 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d914      	bls.n	800431c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d00d      	beq.n	800431c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004304:	f043 0210 	orr.w	r2, r3, #16
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004310:	f043 0201 	orr.w	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e007      	b.n	800432c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b01      	cmp	r3, #1
 8004328:	d1cf      	bne.n	80042ca <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	8000003f 	.word	0x8000003f
 8004338:	50000100 	.word	0x50000100
 800433c:	50000300 	.word	0x50000300
 8004340:	50000700 	.word	0x50000700
 8004344:	2000000c 	.word	0x2000000c
 8004348:	053e2d63 	.word	0x053e2d63

0800434c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004358:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800435e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004362:	2b00      	cmp	r3, #0
 8004364:	d14b      	bne.n	80043fe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b00      	cmp	r3, #0
 800437e:	d021      	beq.n	80043c4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe fc85 	bl	8002c94 <LL_ADC_REG_IsTriggerSourceSWStart>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d032      	beq.n	80043f6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d12b      	bne.n	80043f6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d11f      	bne.n	80043f6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ba:	f043 0201 	orr.w	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043c2:	e018      	b.n	80043f6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d111      	bne.n	80043f6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d105      	bne.n	80043f6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ee:	f043 0201 	orr.w	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7ff faaa 	bl	8003950 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043fc:	e00e      	b.n	800441c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f7ff fabe 	bl	800398c <HAL_ADC_ErrorCallback>
}
 8004410:	e004      	b.n	800441c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f7ff fa96 	bl	8003964 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004452:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445e:	f043 0204 	orr.w	r2, r3, #4
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7ff fa90 	bl	800398c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800446c:	bf00      	nop
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <LL_ADC_IsEnabled>:
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <LL_ADC_IsEnabled+0x18>
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <LL_ADC_IsEnabled+0x1a>
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <LL_ADC_REG_IsConversionOngoing>:
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d101      	bne.n	80044b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b0a1      	sub	sp, #132	@ 0x84
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800453e:	2302      	movs	r3, #2
 8004540:	e0e7      	b.n	8004712 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800454a:	2300      	movs	r3, #0
 800454c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800454e:	2300      	movs	r3, #0
 8004550:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800455a:	d102      	bne.n	8004562 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800455c:	4b6f      	ldr	r3, [pc, #444]	@ (800471c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	e009      	b.n	8004576 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a6e      	ldr	r2, [pc, #440]	@ (8004720 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d102      	bne.n	8004572 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800456c:	4b6d      	ldr	r3, [pc, #436]	@ (8004724 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	e001      	b.n	8004576 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10b      	bne.n	8004594 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0be      	b.n	8004712 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff ff7f 	bl	800449a <LL_ADC_REG_IsConversionOngoing>
 800459c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff ff79 	bl	800449a <LL_ADC_REG_IsConversionOngoing>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f040 80a0 	bne.w	80046f0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80045b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f040 809c 	bne.w	80046f0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045c0:	d004      	beq.n	80045cc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a55      	ldr	r2, [pc, #340]	@ (800471c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d101      	bne.n	80045d0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80045cc:	4b56      	ldr	r3, [pc, #344]	@ (8004728 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80045ce:	e000      	b.n	80045d2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80045d0:	4b56      	ldr	r3, [pc, #344]	@ (800472c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80045d2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d04b      	beq.n	8004674 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80045dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6859      	ldr	r1, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80045ee:	035b      	lsls	r3, r3, #13
 80045f0:	430b      	orrs	r3, r1
 80045f2:	431a      	orrs	r2, r3
 80045f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004600:	d004      	beq.n	800460c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a45      	ldr	r2, [pc, #276]	@ (800471c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d10f      	bne.n	800462c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800460c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004610:	f7ff ff30 	bl	8004474 <LL_ADC_IsEnabled>
 8004614:	4604      	mov	r4, r0
 8004616:	4841      	ldr	r0, [pc, #260]	@ (800471c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004618:	f7ff ff2c 	bl	8004474 <LL_ADC_IsEnabled>
 800461c:	4603      	mov	r3, r0
 800461e:	4323      	orrs	r3, r4
 8004620:	2b00      	cmp	r3, #0
 8004622:	bf0c      	ite	eq
 8004624:	2301      	moveq	r3, #1
 8004626:	2300      	movne	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	e012      	b.n	8004652 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800462c:	483c      	ldr	r0, [pc, #240]	@ (8004720 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800462e:	f7ff ff21 	bl	8004474 <LL_ADC_IsEnabled>
 8004632:	4604      	mov	r4, r0
 8004634:	483b      	ldr	r0, [pc, #236]	@ (8004724 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004636:	f7ff ff1d 	bl	8004474 <LL_ADC_IsEnabled>
 800463a:	4603      	mov	r3, r0
 800463c:	431c      	orrs	r4, r3
 800463e:	483c      	ldr	r0, [pc, #240]	@ (8004730 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004640:	f7ff ff18 	bl	8004474 <LL_ADC_IsEnabled>
 8004644:	4603      	mov	r3, r0
 8004646:	4323      	orrs	r3, r4
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf0c      	ite	eq
 800464c:	2301      	moveq	r3, #1
 800464e:	2300      	movne	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d056      	beq.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800465e:	f023 030f 	bic.w	r3, r3, #15
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	6811      	ldr	r1, [r2, #0]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	6892      	ldr	r2, [r2, #8]
 800466a:	430a      	orrs	r2, r1
 800466c:	431a      	orrs	r2, r3
 800466e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004670:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004672:	e047      	b.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004674:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800467c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800467e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004688:	d004      	beq.n	8004694 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a23      	ldr	r2, [pc, #140]	@ (800471c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d10f      	bne.n	80046b4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004694:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004698:	f7ff feec 	bl	8004474 <LL_ADC_IsEnabled>
 800469c:	4604      	mov	r4, r0
 800469e:	481f      	ldr	r0, [pc, #124]	@ (800471c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046a0:	f7ff fee8 	bl	8004474 <LL_ADC_IsEnabled>
 80046a4:	4603      	mov	r3, r0
 80046a6:	4323      	orrs	r3, r4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e012      	b.n	80046da <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80046b4:	481a      	ldr	r0, [pc, #104]	@ (8004720 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80046b6:	f7ff fedd 	bl	8004474 <LL_ADC_IsEnabled>
 80046ba:	4604      	mov	r4, r0
 80046bc:	4819      	ldr	r0, [pc, #100]	@ (8004724 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80046be:	f7ff fed9 	bl	8004474 <LL_ADC_IsEnabled>
 80046c2:	4603      	mov	r3, r0
 80046c4:	431c      	orrs	r4, r3
 80046c6:	481a      	ldr	r0, [pc, #104]	@ (8004730 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80046c8:	f7ff fed4 	bl	8004474 <LL_ADC_IsEnabled>
 80046cc:	4603      	mov	r3, r0
 80046ce:	4323      	orrs	r3, r4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf0c      	ite	eq
 80046d4:	2301      	moveq	r3, #1
 80046d6:	2300      	movne	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d012      	beq.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80046de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80046e6:	f023 030f 	bic.w	r3, r3, #15
 80046ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80046ec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80046ee:	e009      	b.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f4:	f043 0220 	orr.w	r2, r3, #32
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004702:	e000      	b.n	8004706 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004704:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800470e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004712:	4618      	mov	r0, r3
 8004714:	3784      	adds	r7, #132	@ 0x84
 8004716:	46bd      	mov	sp, r7
 8004718:	bd90      	pop	{r4, r7, pc}
 800471a:	bf00      	nop
 800471c:	50000100 	.word	0x50000100
 8004720:	50000400 	.word	0x50000400
 8004724:	50000500 	.word	0x50000500
 8004728:	50000300 	.word	0x50000300
 800472c:	50000700 	.word	0x50000700
 8004730:	50000600 	.word	0x50000600

08004734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004744:	4b0c      	ldr	r3, [pc, #48]	@ (8004778 <__NVIC_SetPriorityGrouping+0x44>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004750:	4013      	ands	r3, r2
 8004752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800475c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004766:	4a04      	ldr	r2, [pc, #16]	@ (8004778 <__NVIC_SetPriorityGrouping+0x44>)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	60d3      	str	r3, [r2, #12]
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	e000ed00 	.word	0xe000ed00

0800477c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004780:	4b04      	ldr	r3, [pc, #16]	@ (8004794 <__NVIC_GetPriorityGrouping+0x18>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	0a1b      	lsrs	r3, r3, #8
 8004786:	f003 0307 	and.w	r3, r3, #7
}
 800478a:	4618      	mov	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	e000ed00 	.word	0xe000ed00

08004798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	db0b      	blt.n	80047c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	f003 021f 	and.w	r2, r3, #31
 80047b0:	4907      	ldr	r1, [pc, #28]	@ (80047d0 <__NVIC_EnableIRQ+0x38>)
 80047b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	2001      	movs	r0, #1
 80047ba:	fa00 f202 	lsl.w	r2, r0, r2
 80047be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	e000e100 	.word	0xe000e100

080047d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	6039      	str	r1, [r7, #0]
 80047de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	db0a      	blt.n	80047fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	490c      	ldr	r1, [pc, #48]	@ (8004820 <__NVIC_SetPriority+0x4c>)
 80047ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f2:	0112      	lsls	r2, r2, #4
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	440b      	add	r3, r1
 80047f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047fc:	e00a      	b.n	8004814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	b2da      	uxtb	r2, r3
 8004802:	4908      	ldr	r1, [pc, #32]	@ (8004824 <__NVIC_SetPriority+0x50>)
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	3b04      	subs	r3, #4
 800480c:	0112      	lsls	r2, r2, #4
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	440b      	add	r3, r1
 8004812:	761a      	strb	r2, [r3, #24]
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	e000e100 	.word	0xe000e100
 8004824:	e000ed00 	.word	0xe000ed00

08004828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004828:	b480      	push	{r7}
 800482a:	b089      	sub	sp, #36	@ 0x24
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f1c3 0307 	rsb	r3, r3, #7
 8004842:	2b04      	cmp	r3, #4
 8004844:	bf28      	it	cs
 8004846:	2304      	movcs	r3, #4
 8004848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	3304      	adds	r3, #4
 800484e:	2b06      	cmp	r3, #6
 8004850:	d902      	bls.n	8004858 <NVIC_EncodePriority+0x30>
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3b03      	subs	r3, #3
 8004856:	e000      	b.n	800485a <NVIC_EncodePriority+0x32>
 8004858:	2300      	movs	r3, #0
 800485a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800485c:	f04f 32ff 	mov.w	r2, #4294967295
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43da      	mvns	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	401a      	ands	r2, r3
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004870:	f04f 31ff 	mov.w	r1, #4294967295
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	fa01 f303 	lsl.w	r3, r1, r3
 800487a:	43d9      	mvns	r1, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004880:	4313      	orrs	r3, r2
         );
}
 8004882:	4618      	mov	r0, r3
 8004884:	3724      	adds	r7, #36	@ 0x24
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3b01      	subs	r3, #1
 800489c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048a0:	d301      	bcc.n	80048a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048a2:	2301      	movs	r3, #1
 80048a4:	e00f      	b.n	80048c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048a6:	4a0a      	ldr	r2, [pc, #40]	@ (80048d0 <SysTick_Config+0x40>)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048ae:	210f      	movs	r1, #15
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295
 80048b4:	f7ff ff8e 	bl	80047d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048b8:	4b05      	ldr	r3, [pc, #20]	@ (80048d0 <SysTick_Config+0x40>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048be:	4b04      	ldr	r3, [pc, #16]	@ (80048d0 <SysTick_Config+0x40>)
 80048c0:	2207      	movs	r2, #7
 80048c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	e000e010 	.word	0xe000e010

080048d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff ff29 	bl	8004734 <__NVIC_SetPriorityGrouping>
}
 80048e2:	bf00      	nop
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b086      	sub	sp, #24
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	4603      	mov	r3, r0
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	607a      	str	r2, [r7, #4]
 80048f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048f8:	f7ff ff40 	bl	800477c <__NVIC_GetPriorityGrouping>
 80048fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	68b9      	ldr	r1, [r7, #8]
 8004902:	6978      	ldr	r0, [r7, #20]
 8004904:	f7ff ff90 	bl	8004828 <NVIC_EncodePriority>
 8004908:	4602      	mov	r2, r0
 800490a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff ff5f 	bl	80047d4 <__NVIC_SetPriority>
}
 8004916:	bf00      	nop
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	4603      	mov	r3, r0
 8004926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff ff33 	bl	8004798 <__NVIC_EnableIRQ>
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7ff ffa4 	bl	8004890 <SysTick_Config>
 8004948:	4603      	mov	r3, r0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e08d      	b.n	8004a82 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	4b47      	ldr	r3, [pc, #284]	@ (8004a8c <HAL_DMA_Init+0x138>)
 800496e:	429a      	cmp	r2, r3
 8004970:	d80f      	bhi.n	8004992 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	4b45      	ldr	r3, [pc, #276]	@ (8004a90 <HAL_DMA_Init+0x13c>)
 800497a:	4413      	add	r3, r2
 800497c:	4a45      	ldr	r2, [pc, #276]	@ (8004a94 <HAL_DMA_Init+0x140>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	091b      	lsrs	r3, r3, #4
 8004984:	009a      	lsls	r2, r3, #2
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a42      	ldr	r2, [pc, #264]	@ (8004a98 <HAL_DMA_Init+0x144>)
 800498e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004990:	e00e      	b.n	80049b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	4b40      	ldr	r3, [pc, #256]	@ (8004a9c <HAL_DMA_Init+0x148>)
 800499a:	4413      	add	r3, r2
 800499c:	4a3d      	ldr	r2, [pc, #244]	@ (8004a94 <HAL_DMA_Init+0x140>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	091b      	lsrs	r3, r3, #4
 80049a4:	009a      	lsls	r2, r3, #2
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a3c      	ldr	r2, [pc, #240]	@ (8004aa0 <HAL_DMA_Init+0x14c>)
 80049ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80049c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80049d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f9b6 	bl	8004d74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a10:	d102      	bne.n	8004a18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a2c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d010      	beq.n	8004a58 <HAL_DMA_Init+0x104>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d80c      	bhi.n	8004a58 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f9d6 	bl	8004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a54:	605a      	str	r2, [r3, #4]
 8004a56:	e008      	b.n	8004a6a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40020407 	.word	0x40020407
 8004a90:	bffdfff8 	.word	0xbffdfff8
 8004a94:	cccccccd 	.word	0xcccccccd
 8004a98:	40020000 	.word	0x40020000
 8004a9c:	bffdfbf8 	.word	0xbffdfbf8
 8004aa0:	40020400 	.word	0x40020400

08004aa4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_DMA_Start_IT+0x20>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e066      	b.n	8004b92 <HAL_DMA_Start_IT+0xee>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d155      	bne.n	8004b84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0201 	bic.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f8fb 	bl	8004cf8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d008      	beq.n	8004b1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 020e 	orr.w	r2, r2, #14
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	e00f      	b.n	8004b3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0204 	bic.w	r2, r2, #4
 8004b2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 020a 	orr.w	r2, r2, #10
 8004b3a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d007      	beq.n	8004b5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b58:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d007      	beq.n	8004b72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b70:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0201 	orr.w	r2, r2, #1
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	e005      	b.n	8004b90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb6:	f003 031f 	and.w	r3, r3, #31
 8004bba:	2204      	movs	r2, #4
 8004bbc:	409a      	lsls	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d026      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x7a>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d021      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d107      	bne.n	8004bee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0204 	bic.w	r2, r2, #4
 8004bec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf2:	f003 021f 	and.w	r2, r3, #31
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	2104      	movs	r1, #4
 8004bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8004c00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d071      	beq.n	8004cee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004c12:	e06c      	b.n	8004cee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	409a      	lsls	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d02e      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d029      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10b      	bne.n	8004c58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 020a 	bic.w	r2, r2, #10
 8004c4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5c:	f003 021f 	and.w	r2, r3, #31
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	2102      	movs	r1, #2
 8004c66:	fa01 f202 	lsl.w	r2, r1, r2
 8004c6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d038      	beq.n	8004cee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004c84:	e033      	b.n	8004cee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	2208      	movs	r2, #8
 8004c90:	409a      	lsls	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d02a      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d025      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 020e 	bic.w	r2, r2, #14
 8004cb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb8:	f003 021f 	and.w	r2, r3, #31
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d004      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
}
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d0e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d004      	beq.n	8004d22 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d20:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d26:	f003 021f 	and.w	r2, r3, #31
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	2101      	movs	r1, #1
 8004d30:	fa01 f202 	lsl.w	r2, r1, r2
 8004d34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b10      	cmp	r3, #16
 8004d44:	d108      	bne.n	8004d58 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d56:	e007      	b.n	8004d68 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	60da      	str	r2, [r3, #12]
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	4b16      	ldr	r3, [pc, #88]	@ (8004ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d802      	bhi.n	8004d8e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004d88:	4b15      	ldr	r3, [pc, #84]	@ (8004de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	e001      	b.n	8004d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004d8e:	4b15      	ldr	r3, [pc, #84]	@ (8004de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004d90:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	3b08      	subs	r3, #8
 8004d9e:	4a12      	ldr	r2, [pc, #72]	@ (8004de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004da0:	fba2 2303 	umull	r2, r3, r2, r3
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dac:	089b      	lsrs	r3, r3, #2
 8004dae:	009a      	lsls	r2, r3, #2
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	4413      	add	r3, r2
 8004db4:	461a      	mov	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8004dec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004dbe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 031f 	and.w	r3, r3, #31
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	409a      	lsls	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40020407 	.word	0x40020407
 8004de0:	40020800 	.word	0x40020800
 8004de4:	40020820 	.word	0x40020820
 8004de8:	cccccccd 	.word	0xcccccccd
 8004dec:	40020880 	.word	0x40020880

08004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	461a      	mov	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a08      	ldr	r2, [pc, #32]	@ (8004e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004e12:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	f003 031f 	and.w	r3, r3, #31
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	409a      	lsls	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004e24:	bf00      	nop
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	1000823f 	.word	0x1000823f
 8004e34:	40020940 	.word	0x40020940

08004e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e46:	e15a      	b.n	80050fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	fa01 f303 	lsl.w	r3, r1, r3
 8004e54:	4013      	ands	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 814c 	beq.w	80050f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d005      	beq.n	8004e78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d130      	bne.n	8004eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	2203      	movs	r2, #3
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004eae:	2201      	movs	r2, #1
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	f003 0201 	and.w	r2, r3, #1
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d017      	beq.n	8004f16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4013      	ands	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d123      	bne.n	8004f6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	08da      	lsrs	r2, r3, #3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3208      	adds	r2, #8
 8004f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	220f      	movs	r2, #15
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4013      	ands	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	08da      	lsrs	r2, r3, #3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3208      	adds	r2, #8
 8004f64:	6939      	ldr	r1, [r7, #16]
 8004f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	2203      	movs	r2, #3
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f003 0203 	and.w	r2, r3, #3
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 80a6 	beq.w	80050f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fac:	4b5b      	ldr	r3, [pc, #364]	@ (800511c <HAL_GPIO_Init+0x2e4>)
 8004fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb0:	4a5a      	ldr	r2, [pc, #360]	@ (800511c <HAL_GPIO_Init+0x2e4>)
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	6613      	str	r3, [r2, #96]	@ 0x60
 8004fb8:	4b58      	ldr	r3, [pc, #352]	@ (800511c <HAL_GPIO_Init+0x2e4>)
 8004fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fc4:	4a56      	ldr	r2, [pc, #344]	@ (8005120 <HAL_GPIO_Init+0x2e8>)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	089b      	lsrs	r3, r3, #2
 8004fca:	3302      	adds	r3, #2
 8004fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	220f      	movs	r2, #15
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004fee:	d01f      	beq.n	8005030 <HAL_GPIO_Init+0x1f8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a4c      	ldr	r2, [pc, #304]	@ (8005124 <HAL_GPIO_Init+0x2ec>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d019      	beq.n	800502c <HAL_GPIO_Init+0x1f4>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a4b      	ldr	r2, [pc, #300]	@ (8005128 <HAL_GPIO_Init+0x2f0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d013      	beq.n	8005028 <HAL_GPIO_Init+0x1f0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a4a      	ldr	r2, [pc, #296]	@ (800512c <HAL_GPIO_Init+0x2f4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00d      	beq.n	8005024 <HAL_GPIO_Init+0x1ec>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a49      	ldr	r2, [pc, #292]	@ (8005130 <HAL_GPIO_Init+0x2f8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d007      	beq.n	8005020 <HAL_GPIO_Init+0x1e8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a48      	ldr	r2, [pc, #288]	@ (8005134 <HAL_GPIO_Init+0x2fc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d101      	bne.n	800501c <HAL_GPIO_Init+0x1e4>
 8005018:	2305      	movs	r3, #5
 800501a:	e00a      	b.n	8005032 <HAL_GPIO_Init+0x1fa>
 800501c:	2306      	movs	r3, #6
 800501e:	e008      	b.n	8005032 <HAL_GPIO_Init+0x1fa>
 8005020:	2304      	movs	r3, #4
 8005022:	e006      	b.n	8005032 <HAL_GPIO_Init+0x1fa>
 8005024:	2303      	movs	r3, #3
 8005026:	e004      	b.n	8005032 <HAL_GPIO_Init+0x1fa>
 8005028:	2302      	movs	r3, #2
 800502a:	e002      	b.n	8005032 <HAL_GPIO_Init+0x1fa>
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <HAL_GPIO_Init+0x1fa>
 8005030:	2300      	movs	r3, #0
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	f002 0203 	and.w	r2, r2, #3
 8005038:	0092      	lsls	r2, r2, #2
 800503a:	4093      	lsls	r3, r2
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005042:	4937      	ldr	r1, [pc, #220]	@ (8005120 <HAL_GPIO_Init+0x2e8>)
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	089b      	lsrs	r3, r3, #2
 8005048:	3302      	adds	r3, #2
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005050:	4b39      	ldr	r3, [pc, #228]	@ (8005138 <HAL_GPIO_Init+0x300>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	43db      	mvns	r3, r3
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4013      	ands	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005074:	4a30      	ldr	r2, [pc, #192]	@ (8005138 <HAL_GPIO_Init+0x300>)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800507a:	4b2f      	ldr	r3, [pc, #188]	@ (8005138 <HAL_GPIO_Init+0x300>)
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	43db      	mvns	r3, r3
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4013      	ands	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800509e:	4a26      	ldr	r2, [pc, #152]	@ (8005138 <HAL_GPIO_Init+0x300>)
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80050a4:	4b24      	ldr	r3, [pc, #144]	@ (8005138 <HAL_GPIO_Init+0x300>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4013      	ands	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005138 <HAL_GPIO_Init+0x300>)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80050ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005138 <HAL_GPIO_Init+0x300>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	43db      	mvns	r3, r3
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4013      	ands	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050f2:	4a11      	ldr	r2, [pc, #68]	@ (8005138 <HAL_GPIO_Init+0x300>)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	3301      	adds	r3, #1
 80050fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	f47f ae9d 	bne.w	8004e48 <HAL_GPIO_Init+0x10>
  }
}
 800510e:	bf00      	nop
 8005110:	bf00      	nop
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	40021000 	.word	0x40021000
 8005120:	40010000 	.word	0x40010000
 8005124:	48000400 	.word	0x48000400
 8005128:	48000800 	.word	0x48000800
 800512c:	48000c00 	.word	0x48000c00
 8005130:	48001000 	.word	0x48001000
 8005134:	48001400 	.word	0x48001400
 8005138:	40010400 	.word	0x40010400

0800513c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	887b      	ldrh	r3, [r7, #2]
 800514e:	4013      	ands	r3, r2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005154:	2301      	movs	r3, #1
 8005156:	73fb      	strb	r3, [r7, #15]
 8005158:	e001      	b.n	800515e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800515a:	2300      	movs	r3, #0
 800515c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800515e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	807b      	strh	r3, [r7, #2]
 8005178:	4613      	mov	r3, r2
 800517a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800517c:	787b      	ldrb	r3, [r7, #1]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005182:	887a      	ldrh	r2, [r7, #2]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005188:	e002      	b.n	8005190 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800518a:	887a      	ldrh	r2, [r7, #2]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051a6:	4b08      	ldr	r3, [pc, #32]	@ (80051c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051a8:	695a      	ldr	r2, [r3, #20]
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	4013      	ands	r3, r2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d006      	beq.n	80051c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051b2:	4a05      	ldr	r2, [pc, #20]	@ (80051c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051b4:	88fb      	ldrh	r3, [r7, #6]
 80051b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051b8:	88fb      	ldrh	r3, [r7, #6]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fc fd08 	bl	8001bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40010400 	.word	0x40010400

080051cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d141      	bne.n	800525e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051da:	4b4b      	ldr	r3, [pc, #300]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051e6:	d131      	bne.n	800524c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051e8:	4b47      	ldr	r3, [pc, #284]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ee:	4a46      	ldr	r2, [pc, #280]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051f8:	4b43      	ldr	r3, [pc, #268]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005200:	4a41      	ldr	r2, [pc, #260]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005202:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005206:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005208:	4b40      	ldr	r3, [pc, #256]	@ (800530c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2232      	movs	r2, #50	@ 0x32
 800520e:	fb02 f303 	mul.w	r3, r2, r3
 8005212:	4a3f      	ldr	r2, [pc, #252]	@ (8005310 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005214:	fba2 2303 	umull	r2, r3, r2, r3
 8005218:	0c9b      	lsrs	r3, r3, #18
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800521e:	e002      	b.n	8005226 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3b01      	subs	r3, #1
 8005224:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005226:	4b38      	ldr	r3, [pc, #224]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800522e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005232:	d102      	bne.n	800523a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f2      	bne.n	8005220 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800523a:	4b33      	ldr	r3, [pc, #204]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005246:	d158      	bne.n	80052fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e057      	b.n	80052fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800524c:	4b2e      	ldr	r3, [pc, #184]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005252:	4a2d      	ldr	r2, [pc, #180]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005258:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800525c:	e04d      	b.n	80052fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005264:	d141      	bne.n	80052ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005266:	4b28      	ldr	r3, [pc, #160]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800526e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005272:	d131      	bne.n	80052d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005274:	4b24      	ldr	r3, [pc, #144]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800527a:	4a23      	ldr	r2, [pc, #140]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800527c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005280:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005284:	4b20      	ldr	r3, [pc, #128]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800528c:	4a1e      	ldr	r2, [pc, #120]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005292:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005294:	4b1d      	ldr	r3, [pc, #116]	@ (800530c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2232      	movs	r2, #50	@ 0x32
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	4a1c      	ldr	r2, [pc, #112]	@ (8005310 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052a0:	fba2 2303 	umull	r2, r3, r2, r3
 80052a4:	0c9b      	lsrs	r3, r3, #18
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052aa:	e002      	b.n	80052b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052b2:	4b15      	ldr	r3, [pc, #84]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052be:	d102      	bne.n	80052c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f2      	bne.n	80052ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052c6:	4b10      	ldr	r3, [pc, #64]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d2:	d112      	bne.n	80052fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e011      	b.n	80052fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052de:	4a0a      	ldr	r2, [pc, #40]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052e8:	e007      	b.n	80052fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052ea:	4b07      	ldr	r3, [pc, #28]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052f2:	4a05      	ldr	r2, [pc, #20]	@ (8005308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	40007000 	.word	0x40007000
 800530c:	2000000c 	.word	0x2000000c
 8005310:	431bde83 	.word	0x431bde83

08005314 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005318:	4b05      	ldr	r3, [pc, #20]	@ (8005330 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	4a04      	ldr	r2, [pc, #16]	@ (8005330 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800531e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005322:	6093      	str	r3, [r2, #8]
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40007000 	.word	0x40007000

08005334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e2fe      	b.n	8005944 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d075      	beq.n	800543e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005352:	4b97      	ldr	r3, [pc, #604]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 030c 	and.w	r3, r3, #12
 800535a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800535c:	4b94      	ldr	r3, [pc, #592]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0303 	and.w	r3, r3, #3
 8005364:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d102      	bne.n	8005372 <HAL_RCC_OscConfig+0x3e>
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2b03      	cmp	r3, #3
 8005370:	d002      	beq.n	8005378 <HAL_RCC_OscConfig+0x44>
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d10b      	bne.n	8005390 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005378:	4b8d      	ldr	r3, [pc, #564]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d05b      	beq.n	800543c <HAL_RCC_OscConfig+0x108>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d157      	bne.n	800543c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e2d9      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005398:	d106      	bne.n	80053a8 <HAL_RCC_OscConfig+0x74>
 800539a:	4b85      	ldr	r3, [pc, #532]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a84      	ldr	r2, [pc, #528]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 80053a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	e01d      	b.n	80053e4 <HAL_RCC_OscConfig+0xb0>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053b0:	d10c      	bne.n	80053cc <HAL_RCC_OscConfig+0x98>
 80053b2:	4b7f      	ldr	r3, [pc, #508]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a7e      	ldr	r2, [pc, #504]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 80053b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	4b7c      	ldr	r3, [pc, #496]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a7b      	ldr	r2, [pc, #492]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 80053c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	e00b      	b.n	80053e4 <HAL_RCC_OscConfig+0xb0>
 80053cc:	4b78      	ldr	r3, [pc, #480]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a77      	ldr	r2, [pc, #476]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 80053d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	4b75      	ldr	r3, [pc, #468]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a74      	ldr	r2, [pc, #464]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 80053de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d013      	beq.n	8005414 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ec:	f7fd fb74 	bl	8002ad8 <HAL_GetTick>
 80053f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053f4:	f7fd fb70 	bl	8002ad8 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b64      	cmp	r3, #100	@ 0x64
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e29e      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005406:	4b6a      	ldr	r3, [pc, #424]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0f0      	beq.n	80053f4 <HAL_RCC_OscConfig+0xc0>
 8005412:	e014      	b.n	800543e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005414:	f7fd fb60 	bl	8002ad8 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800541c:	f7fd fb5c 	bl	8002ad8 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b64      	cmp	r3, #100	@ 0x64
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e28a      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800542e:	4b60      	ldr	r3, [pc, #384]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f0      	bne.n	800541c <HAL_RCC_OscConfig+0xe8>
 800543a:	e000      	b.n	800543e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800543c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d075      	beq.n	8005536 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800544a:	4b59      	ldr	r3, [pc, #356]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 030c 	and.w	r3, r3, #12
 8005452:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005454:	4b56      	ldr	r3, [pc, #344]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b0c      	cmp	r3, #12
 8005462:	d102      	bne.n	800546a <HAL_RCC_OscConfig+0x136>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d002      	beq.n	8005470 <HAL_RCC_OscConfig+0x13c>
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b04      	cmp	r3, #4
 800546e:	d11f      	bne.n	80054b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005470:	4b4f      	ldr	r3, [pc, #316]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_RCC_OscConfig+0x154>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e25d      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005488:	4b49      	ldr	r3, [pc, #292]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	061b      	lsls	r3, r3, #24
 8005496:	4946      	ldr	r1, [pc, #280]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 8005498:	4313      	orrs	r3, r2
 800549a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800549c:	4b45      	ldr	r3, [pc, #276]	@ (80055b4 <HAL_RCC_OscConfig+0x280>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fd facd 	bl	8002a40 <HAL_InitTick>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d043      	beq.n	8005534 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e249      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d023      	beq.n	8005500 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054b8:	4b3d      	ldr	r3, [pc, #244]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a3c      	ldr	r2, [pc, #240]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 80054be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c4:	f7fd fb08 	bl	8002ad8 <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054cc:	f7fd fb04 	bl	8002ad8 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e232      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054de:	4b34      	ldr	r3, [pc, #208]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ea:	4b31      	ldr	r3, [pc, #196]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	061b      	lsls	r3, r3, #24
 80054f8:	492d      	ldr	r1, [pc, #180]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	604b      	str	r3, [r1, #4]
 80054fe:	e01a      	b.n	8005536 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005500:	4b2b      	ldr	r3, [pc, #172]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a2a      	ldr	r2, [pc, #168]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 8005506:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800550a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fd fae4 	bl	8002ad8 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005514:	f7fd fae0 	bl	8002ad8 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e20e      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005526:	4b22      	ldr	r3, [pc, #136]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x1e0>
 8005532:	e000      	b.n	8005536 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005534:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d041      	beq.n	80055c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01c      	beq.n	8005584 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800554a:	4b19      	ldr	r3, [pc, #100]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 800554c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005550:	4a17      	ldr	r2, [pc, #92]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555a:	f7fd fabd 	bl	8002ad8 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005562:	f7fd fab9 	bl	8002ad8 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e1e7      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005574:	4b0e      	ldr	r3, [pc, #56]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 8005576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0ef      	beq.n	8005562 <HAL_RCC_OscConfig+0x22e>
 8005582:	e020      	b.n	80055c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005584:	4b0a      	ldr	r3, [pc, #40]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 8005586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800558a:	4a09      	ldr	r2, [pc, #36]	@ (80055b0 <HAL_RCC_OscConfig+0x27c>)
 800558c:	f023 0301 	bic.w	r3, r3, #1
 8005590:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fd faa0 	bl	8002ad8 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800559a:	e00d      	b.n	80055b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800559c:	f7fd fa9c 	bl	8002ad8 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d906      	bls.n	80055b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e1ca      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
 80055ae:	bf00      	nop
 80055b0:	40021000 	.word	0x40021000
 80055b4:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055b8:	4b8c      	ldr	r3, [pc, #560]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 80055ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1ea      	bne.n	800559c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 80a6 	beq.w	8005720 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055d4:	2300      	movs	r3, #0
 80055d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055d8:	4b84      	ldr	r3, [pc, #528]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 80055da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_RCC_OscConfig+0x2b4>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <HAL_RCC_OscConfig+0x2b6>
 80055e8:	2300      	movs	r3, #0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00d      	beq.n	800560a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ee:	4b7f      	ldr	r3, [pc, #508]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 80055f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f2:	4a7e      	ldr	r2, [pc, #504]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 80055f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80055fa:	4b7c      	ldr	r3, [pc, #496]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 80055fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005606:	2301      	movs	r3, #1
 8005608:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800560a:	4b79      	ldr	r3, [pc, #484]	@ (80057f0 <HAL_RCC_OscConfig+0x4bc>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005612:	2b00      	cmp	r3, #0
 8005614:	d118      	bne.n	8005648 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005616:	4b76      	ldr	r3, [pc, #472]	@ (80057f0 <HAL_RCC_OscConfig+0x4bc>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a75      	ldr	r2, [pc, #468]	@ (80057f0 <HAL_RCC_OscConfig+0x4bc>)
 800561c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005622:	f7fd fa59 	bl	8002ad8 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005628:	e008      	b.n	800563c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800562a:	f7fd fa55 	bl	8002ad8 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e183      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800563c:	4b6c      	ldr	r3, [pc, #432]	@ (80057f0 <HAL_RCC_OscConfig+0x4bc>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0f0      	beq.n	800562a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d108      	bne.n	8005662 <HAL_RCC_OscConfig+0x32e>
 8005650:	4b66      	ldr	r3, [pc, #408]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 8005652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005656:	4a65      	ldr	r2, [pc, #404]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005660:	e024      	b.n	80056ac <HAL_RCC_OscConfig+0x378>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b05      	cmp	r3, #5
 8005668:	d110      	bne.n	800568c <HAL_RCC_OscConfig+0x358>
 800566a:	4b60      	ldr	r3, [pc, #384]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 800566c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005670:	4a5e      	ldr	r2, [pc, #376]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 8005672:	f043 0304 	orr.w	r3, r3, #4
 8005676:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800567a:	4b5c      	ldr	r3, [pc, #368]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 800567c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005680:	4a5a      	ldr	r2, [pc, #360]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 8005682:	f043 0301 	orr.w	r3, r3, #1
 8005686:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800568a:	e00f      	b.n	80056ac <HAL_RCC_OscConfig+0x378>
 800568c:	4b57      	ldr	r3, [pc, #348]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 800568e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005692:	4a56      	ldr	r2, [pc, #344]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800569c:	4b53      	ldr	r3, [pc, #332]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a2:	4a52      	ldr	r2, [pc, #328]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 80056a4:	f023 0304 	bic.w	r3, r3, #4
 80056a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d016      	beq.n	80056e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b4:	f7fd fa10 	bl	8002ad8 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ba:	e00a      	b.n	80056d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056bc:	f7fd fa0c 	bl	8002ad8 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e138      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056d2:	4b46      	ldr	r3, [pc, #280]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0ed      	beq.n	80056bc <HAL_RCC_OscConfig+0x388>
 80056e0:	e015      	b.n	800570e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e2:	f7fd f9f9 	bl	8002ad8 <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056e8:	e00a      	b.n	8005700 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ea:	f7fd f9f5 	bl	8002ad8 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e121      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005700:	4b3a      	ldr	r3, [pc, #232]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 8005702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1ed      	bne.n	80056ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800570e:	7ffb      	ldrb	r3, [r7, #31]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d105      	bne.n	8005720 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005714:	4b35      	ldr	r3, [pc, #212]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 8005716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005718:	4a34      	ldr	r2, [pc, #208]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 800571a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800571e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	d03c      	beq.n	80057a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01c      	beq.n	800576e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005734:	4b2d      	ldr	r3, [pc, #180]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 8005736:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800573a:	4a2c      	ldr	r2, [pc, #176]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 800573c:	f043 0301 	orr.w	r3, r3, #1
 8005740:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005744:	f7fd f9c8 	bl	8002ad8 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800574c:	f7fd f9c4 	bl	8002ad8 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e0f2      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800575e:	4b23      	ldr	r3, [pc, #140]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 8005760:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0ef      	beq.n	800574c <HAL_RCC_OscConfig+0x418>
 800576c:	e01b      	b.n	80057a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800576e:	4b1f      	ldr	r3, [pc, #124]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 8005770:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005774:	4a1d      	ldr	r2, [pc, #116]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 8005776:	f023 0301 	bic.w	r3, r3, #1
 800577a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577e:	f7fd f9ab 	bl	8002ad8 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005786:	f7fd f9a7 	bl	8002ad8 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e0d5      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005798:	4b14      	ldr	r3, [pc, #80]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 800579a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1ef      	bne.n	8005786 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 80c9 	beq.w	8005942 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057b0:	4b0e      	ldr	r3, [pc, #56]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f003 030c 	and.w	r3, r3, #12
 80057b8:	2b0c      	cmp	r3, #12
 80057ba:	f000 8083 	beq.w	80058c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d15e      	bne.n	8005884 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c6:	4b09      	ldr	r3, [pc, #36]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a08      	ldr	r2, [pc, #32]	@ (80057ec <HAL_RCC_OscConfig+0x4b8>)
 80057cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d2:	f7fd f981 	bl	8002ad8 <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057d8:	e00c      	b.n	80057f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057da:	f7fd f97d 	bl	8002ad8 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d905      	bls.n	80057f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e0ab      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
 80057ec:	40021000 	.word	0x40021000
 80057f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057f4:	4b55      	ldr	r3, [pc, #340]	@ (800594c <HAL_RCC_OscConfig+0x618>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1ec      	bne.n	80057da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005800:	4b52      	ldr	r3, [pc, #328]	@ (800594c <HAL_RCC_OscConfig+0x618>)
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	4b52      	ldr	r3, [pc, #328]	@ (8005950 <HAL_RCC_OscConfig+0x61c>)
 8005806:	4013      	ands	r3, r2
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6a11      	ldr	r1, [r2, #32]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005810:	3a01      	subs	r2, #1
 8005812:	0112      	lsls	r2, r2, #4
 8005814:	4311      	orrs	r1, r2
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800581a:	0212      	lsls	r2, r2, #8
 800581c:	4311      	orrs	r1, r2
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005822:	0852      	lsrs	r2, r2, #1
 8005824:	3a01      	subs	r2, #1
 8005826:	0552      	lsls	r2, r2, #21
 8005828:	4311      	orrs	r1, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800582e:	0852      	lsrs	r2, r2, #1
 8005830:	3a01      	subs	r2, #1
 8005832:	0652      	lsls	r2, r2, #25
 8005834:	4311      	orrs	r1, r2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800583a:	06d2      	lsls	r2, r2, #27
 800583c:	430a      	orrs	r2, r1
 800583e:	4943      	ldr	r1, [pc, #268]	@ (800594c <HAL_RCC_OscConfig+0x618>)
 8005840:	4313      	orrs	r3, r2
 8005842:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005844:	4b41      	ldr	r3, [pc, #260]	@ (800594c <HAL_RCC_OscConfig+0x618>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a40      	ldr	r2, [pc, #256]	@ (800594c <HAL_RCC_OscConfig+0x618>)
 800584a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800584e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005850:	4b3e      	ldr	r3, [pc, #248]	@ (800594c <HAL_RCC_OscConfig+0x618>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4a3d      	ldr	r2, [pc, #244]	@ (800594c <HAL_RCC_OscConfig+0x618>)
 8005856:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800585a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585c:	f7fd f93c 	bl	8002ad8 <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005864:	f7fd f938 	bl	8002ad8 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e066      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005876:	4b35      	ldr	r3, [pc, #212]	@ (800594c <HAL_RCC_OscConfig+0x618>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0f0      	beq.n	8005864 <HAL_RCC_OscConfig+0x530>
 8005882:	e05e      	b.n	8005942 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005884:	4b31      	ldr	r3, [pc, #196]	@ (800594c <HAL_RCC_OscConfig+0x618>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a30      	ldr	r2, [pc, #192]	@ (800594c <HAL_RCC_OscConfig+0x618>)
 800588a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800588e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005890:	f7fd f922 	bl	8002ad8 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005898:	f7fd f91e 	bl	8002ad8 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e04c      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058aa:	4b28      	ldr	r3, [pc, #160]	@ (800594c <HAL_RCC_OscConfig+0x618>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80058b6:	4b25      	ldr	r3, [pc, #148]	@ (800594c <HAL_RCC_OscConfig+0x618>)
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	4924      	ldr	r1, [pc, #144]	@ (800594c <HAL_RCC_OscConfig+0x618>)
 80058bc:	4b25      	ldr	r3, [pc, #148]	@ (8005954 <HAL_RCC_OscConfig+0x620>)
 80058be:	4013      	ands	r3, r2
 80058c0:	60cb      	str	r3, [r1, #12]
 80058c2:	e03e      	b.n	8005942 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e039      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80058d0:	4b1e      	ldr	r3, [pc, #120]	@ (800594c <HAL_RCC_OscConfig+0x618>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f003 0203 	and.w	r2, r3, #3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d12c      	bne.n	800593e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ee:	3b01      	subs	r3, #1
 80058f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d123      	bne.n	800593e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005900:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005902:	429a      	cmp	r2, r3
 8005904:	d11b      	bne.n	800593e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005910:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005912:	429a      	cmp	r2, r3
 8005914:	d113      	bne.n	800593e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005920:	085b      	lsrs	r3, r3, #1
 8005922:	3b01      	subs	r3, #1
 8005924:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005926:	429a      	cmp	r2, r3
 8005928:	d109      	bne.n	800593e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005934:	085b      	lsrs	r3, r3, #1
 8005936:	3b01      	subs	r3, #1
 8005938:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800593a:	429a      	cmp	r2, r3
 800593c:	d001      	beq.n	8005942 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3720      	adds	r7, #32
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40021000 	.word	0x40021000
 8005950:	019f800c 	.word	0x019f800c
 8005954:	feeefffc 	.word	0xfeeefffc

08005958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005962:	2300      	movs	r3, #0
 8005964:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e11e      	b.n	8005bae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005970:	4b91      	ldr	r3, [pc, #580]	@ (8005bb8 <HAL_RCC_ClockConfig+0x260>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d910      	bls.n	80059a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800597e:	4b8e      	ldr	r3, [pc, #568]	@ (8005bb8 <HAL_RCC_ClockConfig+0x260>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f023 020f 	bic.w	r2, r3, #15
 8005986:	498c      	ldr	r1, [pc, #560]	@ (8005bb8 <HAL_RCC_ClockConfig+0x260>)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	4313      	orrs	r3, r2
 800598c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800598e:	4b8a      	ldr	r3, [pc, #552]	@ (8005bb8 <HAL_RCC_ClockConfig+0x260>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d001      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e106      	b.n	8005bae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d073      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d129      	bne.n	8005a08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059b4:	4b81      	ldr	r3, [pc, #516]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e0f4      	b.n	8005bae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80059c4:	f000 f99e 	bl	8005d04 <RCC_GetSysClockFreqFromPLLSource>
 80059c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4a7c      	ldr	r2, [pc, #496]	@ (8005bc0 <HAL_RCC_ClockConfig+0x268>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d93f      	bls.n	8005a52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80059d2:	4b7a      	ldr	r3, [pc, #488]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d009      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d033      	beq.n	8005a52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d12f      	bne.n	8005a52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059f2:	4b72      	ldr	r3, [pc, #456]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059fa:	4a70      	ldr	r2, [pc, #448]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 80059fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a02:	2380      	movs	r3, #128	@ 0x80
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	e024      	b.n	8005a52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d107      	bne.n	8005a20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a10:	4b6a      	ldr	r3, [pc, #424]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d109      	bne.n	8005a30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e0c6      	b.n	8005bae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a20:	4b66      	ldr	r3, [pc, #408]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0be      	b.n	8005bae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a30:	f000 f8ce 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8005a34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	4a61      	ldr	r2, [pc, #388]	@ (8005bc0 <HAL_RCC_ClockConfig+0x268>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d909      	bls.n	8005a52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a46:	4a5d      	ldr	r2, [pc, #372]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a4e:	2380      	movs	r3, #128	@ 0x80
 8005a50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a52:	4b5a      	ldr	r3, [pc, #360]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f023 0203 	bic.w	r2, r3, #3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	4957      	ldr	r1, [pc, #348]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a64:	f7fd f838 	bl	8002ad8 <HAL_GetTick>
 8005a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6a:	e00a      	b.n	8005a82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a6c:	f7fd f834 	bl	8002ad8 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e095      	b.n	8005bae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a82:	4b4e      	ldr	r3, [pc, #312]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 020c 	and.w	r2, r3, #12
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d1eb      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d023      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005aac:	4b43      	ldr	r3, [pc, #268]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	4a42      	ldr	r2, [pc, #264]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005ab2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005ab6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005ac4:	4b3d      	ldr	r3, [pc, #244]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005acc:	4a3b      	ldr	r2, [pc, #236]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005ace:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005ad2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad4:	4b39      	ldr	r3, [pc, #228]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4936      	ldr	r1, [pc, #216]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	608b      	str	r3, [r1, #8]
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2b80      	cmp	r3, #128	@ 0x80
 8005aec:	d105      	bne.n	8005afa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005aee:	4b33      	ldr	r3, [pc, #204]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	4a32      	ldr	r2, [pc, #200]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005af4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005af8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005afa:	4b2f      	ldr	r3, [pc, #188]	@ (8005bb8 <HAL_RCC_ClockConfig+0x260>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d21d      	bcs.n	8005b44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b08:	4b2b      	ldr	r3, [pc, #172]	@ (8005bb8 <HAL_RCC_ClockConfig+0x260>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f023 020f 	bic.w	r2, r3, #15
 8005b10:	4929      	ldr	r1, [pc, #164]	@ (8005bb8 <HAL_RCC_ClockConfig+0x260>)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b18:	f7fc ffde 	bl	8002ad8 <HAL_GetTick>
 8005b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1e:	e00a      	b.n	8005b36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b20:	f7fc ffda 	bl	8002ad8 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e03b      	b.n	8005bae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b36:	4b20      	ldr	r3, [pc, #128]	@ (8005bb8 <HAL_RCC_ClockConfig+0x260>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d1ed      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d008      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b50:	4b1a      	ldr	r3, [pc, #104]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	4917      	ldr	r1, [pc, #92]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d009      	beq.n	8005b82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b6e:	4b13      	ldr	r3, [pc, #76]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	490f      	ldr	r1, [pc, #60]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b82:	f000 f825 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8005b86:	4602      	mov	r2, r0
 8005b88:	4b0c      	ldr	r3, [pc, #48]	@ (8005bbc <HAL_RCC_ClockConfig+0x264>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	091b      	lsrs	r3, r3, #4
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	490c      	ldr	r1, [pc, #48]	@ (8005bc4 <HAL_RCC_ClockConfig+0x26c>)
 8005b94:	5ccb      	ldrb	r3, [r1, r3]
 8005b96:	f003 031f 	and.w	r3, r3, #31
 8005b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8005bc8 <HAL_RCC_ClockConfig+0x270>)
 8005ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bcc <HAL_RCC_ClockConfig+0x274>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fc ff4a 	bl	8002a40 <HAL_InitTick>
 8005bac:	4603      	mov	r3, r0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40022000 	.word	0x40022000
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	04c4b400 	.word	0x04c4b400
 8005bc4:	08008aac 	.word	0x08008aac
 8005bc8:	2000000c 	.word	0x2000000c
 8005bcc:	20000010 	.word	0x20000010

08005bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 030c 	and.w	r3, r3, #12
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d102      	bne.n	8005be8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005be2:	4b2a      	ldr	r3, [pc, #168]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	e047      	b.n	8005c78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005be8:	4b27      	ldr	r3, [pc, #156]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 030c 	and.w	r3, r3, #12
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d102      	bne.n	8005bfa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bf4:	4b26      	ldr	r3, [pc, #152]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	e03e      	b.n	8005c78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005bfa:	4b23      	ldr	r3, [pc, #140]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
 8005c02:	2b0c      	cmp	r3, #12
 8005c04:	d136      	bne.n	8005c74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c06:	4b20      	ldr	r3, [pc, #128]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c10:	4b1d      	ldr	r3, [pc, #116]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	091b      	lsrs	r3, r3, #4
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d10c      	bne.n	8005c3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c24:	4a1a      	ldr	r2, [pc, #104]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2c:	4a16      	ldr	r2, [pc, #88]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c2e:	68d2      	ldr	r2, [r2, #12]
 8005c30:	0a12      	lsrs	r2, r2, #8
 8005c32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c36:	fb02 f303 	mul.w	r3, r2, r3
 8005c3a:	617b      	str	r3, [r7, #20]
      break;
 8005c3c:	e00c      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c3e:	4a13      	ldr	r2, [pc, #76]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c46:	4a10      	ldr	r2, [pc, #64]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c48:	68d2      	ldr	r2, [r2, #12]
 8005c4a:	0a12      	lsrs	r2, r2, #8
 8005c4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c50:	fb02 f303 	mul.w	r3, r2, r3
 8005c54:	617b      	str	r3, [r7, #20]
      break;
 8005c56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c58:	4b0b      	ldr	r3, [pc, #44]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	0e5b      	lsrs	r3, r3, #25
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	3301      	adds	r3, #1
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	e001      	b.n	8005c78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c78:	693b      	ldr	r3, [r7, #16]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	00f42400 	.word	0x00f42400
 8005c90:	016e3600 	.word	0x016e3600

08005c94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c98:	4b03      	ldr	r3, [pc, #12]	@ (8005ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	2000000c 	.word	0x2000000c

08005cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005cb0:	f7ff fff0 	bl	8005c94 <HAL_RCC_GetHCLKFreq>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	4b06      	ldr	r3, [pc, #24]	@ (8005cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	0a1b      	lsrs	r3, r3, #8
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	4904      	ldr	r1, [pc, #16]	@ (8005cd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cc2:	5ccb      	ldrb	r3, [r1, r3]
 8005cc4:	f003 031f 	and.w	r3, r3, #31
 8005cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	08008abc 	.word	0x08008abc

08005cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005cdc:	f7ff ffda 	bl	8005c94 <HAL_RCC_GetHCLKFreq>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	4b06      	ldr	r3, [pc, #24]	@ (8005cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	0adb      	lsrs	r3, r3, #11
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	4904      	ldr	r1, [pc, #16]	@ (8005d00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cee:	5ccb      	ldrb	r3, [r1, r3]
 8005cf0:	f003 031f 	and.w	r3, r3, #31
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	08008abc 	.word	0x08008abc

08005d04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005d84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d14:	4b1b      	ldr	r3, [pc, #108]	@ (8005d84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	091b      	lsrs	r3, r3, #4
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	3301      	adds	r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d10c      	bne.n	8005d42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d28:	4a17      	ldr	r2, [pc, #92]	@ (8005d88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	4a14      	ldr	r2, [pc, #80]	@ (8005d84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d32:	68d2      	ldr	r2, [r2, #12]
 8005d34:	0a12      	lsrs	r2, r2, #8
 8005d36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d3a:	fb02 f303 	mul.w	r3, r2, r3
 8005d3e:	617b      	str	r3, [r7, #20]
    break;
 8005d40:	e00c      	b.n	8005d5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d42:	4a12      	ldr	r2, [pc, #72]	@ (8005d8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8005d84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d4c:	68d2      	ldr	r2, [r2, #12]
 8005d4e:	0a12      	lsrs	r2, r2, #8
 8005d50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d54:	fb02 f303 	mul.w	r3, r2, r3
 8005d58:	617b      	str	r3, [r7, #20]
    break;
 8005d5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d5c:	4b09      	ldr	r3, [pc, #36]	@ (8005d84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	0e5b      	lsrs	r3, r3, #25
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	3301      	adds	r3, #1
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005d76:	687b      	ldr	r3, [r7, #4]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	40021000 	.word	0x40021000
 8005d88:	016e3600 	.word	0x016e3600
 8005d8c:	00f42400 	.word	0x00f42400

08005d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d98:	2300      	movs	r3, #0
 8005d9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 8098 	beq.w	8005ede <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dae:	2300      	movs	r3, #0
 8005db0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005db2:	4b43      	ldr	r3, [pc, #268]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10d      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dbe:	4b40      	ldr	r3, [pc, #256]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc2:	4a3f      	ldr	r2, [pc, #252]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dca:	4b3d      	ldr	r3, [pc, #244]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dd2:	60bb      	str	r3, [r7, #8]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dda:	4b3a      	ldr	r3, [pc, #232]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a39      	ldr	r2, [pc, #228]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005de4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005de6:	f7fc fe77 	bl	8002ad8 <HAL_GetTick>
 8005dea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dec:	e009      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dee:	f7fc fe73 	bl	8002ad8 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d902      	bls.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	74fb      	strb	r3, [r7, #19]
        break;
 8005e00:	e005      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e02:	4b30      	ldr	r3, [pc, #192]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0ef      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005e0e:	7cfb      	ldrb	r3, [r7, #19]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d159      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e14:	4b2a      	ldr	r3, [pc, #168]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01e      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d019      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e30:	4b23      	ldr	r3, [pc, #140]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e3c:	4b20      	ldr	r3, [pc, #128]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e42:	4a1f      	ldr	r2, [pc, #124]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e52:	4a1b      	ldr	r2, [pc, #108]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e5c:	4a18      	ldr	r2, [pc, #96]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d016      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6e:	f7fc fe33 	bl	8002ad8 <HAL_GetTick>
 8005e72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e74:	e00b      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e76:	f7fc fe2f 	bl	8002ad8 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d902      	bls.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	74fb      	strb	r3, [r7, #19]
            break;
 8005e8c:	e006      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0ec      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005e9c:	7cfb      	ldrb	r3, [r7, #19]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10b      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ea2:	4b07      	ldr	r3, [pc, #28]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ea8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb0:	4903      	ldr	r1, [pc, #12]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005eb8:	e008      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005eba:	7cfb      	ldrb	r3, [r7, #19]
 8005ebc:	74bb      	strb	r3, [r7, #18]
 8005ebe:	e005      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec8:	7cfb      	ldrb	r3, [r7, #19]
 8005eca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ecc:	7c7b      	ldrb	r3, [r7, #17]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d105      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ed2:	4ba7      	ldr	r3, [pc, #668]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ed6:	4aa6      	ldr	r2, [pc, #664]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005edc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005eea:	4ba1      	ldr	r3, [pc, #644]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef0:	f023 0203 	bic.w	r2, r3, #3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	499d      	ldr	r1, [pc, #628]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f0c:	4b98      	ldr	r3, [pc, #608]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f12:	f023 020c 	bic.w	r2, r3, #12
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	4995      	ldr	r1, [pc, #596]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f2e:	4b90      	ldr	r3, [pc, #576]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	498c      	ldr	r1, [pc, #560]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0308 	and.w	r3, r3, #8
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f50:	4b87      	ldr	r3, [pc, #540]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	4984      	ldr	r1, [pc, #528]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0310 	and.w	r3, r3, #16
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f72:	4b7f      	ldr	r3, [pc, #508]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	497b      	ldr	r1, [pc, #492]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f94:	4b76      	ldr	r3, [pc, #472]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	4973      	ldr	r1, [pc, #460]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fb6:	4b6e      	ldr	r3, [pc, #440]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fbc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	496a      	ldr	r1, [pc, #424]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fd8:	4b65      	ldr	r3, [pc, #404]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fde:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	4962      	ldr	r1, [pc, #392]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ffa:	4b5d      	ldr	r3, [pc, #372]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006000:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006008:	4959      	ldr	r1, [pc, #356]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600a:	4313      	orrs	r3, r2
 800600c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800601c:	4b54      	ldr	r3, [pc, #336]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800601e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006022:	f023 0203 	bic.w	r2, r3, #3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602a:	4951      	ldr	r1, [pc, #324]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602c:	4313      	orrs	r3, r2
 800602e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800603e:	4b4c      	ldr	r3, [pc, #304]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006044:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604c:	4948      	ldr	r1, [pc, #288]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800605c:	2b00      	cmp	r3, #0
 800605e:	d015      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006060:	4b43      	ldr	r3, [pc, #268]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006066:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606e:	4940      	ldr	r1, [pc, #256]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006070:	4313      	orrs	r3, r2
 8006072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800607a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800607e:	d105      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006080:	4b3b      	ldr	r3, [pc, #236]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	4a3a      	ldr	r2, [pc, #232]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800608a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006094:	2b00      	cmp	r3, #0
 8006096:	d015      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006098:	4b35      	ldr	r3, [pc, #212]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a6:	4932      	ldr	r1, [pc, #200]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060b6:	d105      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060c2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d015      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060d0:	4b27      	ldr	r3, [pc, #156]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060de:	4924      	ldr	r1, [pc, #144]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060ee:	d105      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060f0:	4b1f      	ldr	r3, [pc, #124]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d015      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006108:	4b19      	ldr	r3, [pc, #100]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800610a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800610e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006116:	4916      	ldr	r1, [pc, #88]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006122:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006126:	d105      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006128:	4b11      	ldr	r3, [pc, #68]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	4a10      	ldr	r2, [pc, #64]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800612e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006132:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d019      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006140:	4b0b      	ldr	r3, [pc, #44]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006146:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	4908      	ldr	r1, [pc, #32]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006150:	4313      	orrs	r3, r2
 8006152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800615e:	d109      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006160:	4b03      	ldr	r3, [pc, #12]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	4a02      	ldr	r2, [pc, #8]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800616a:	60d3      	str	r3, [r2, #12]
 800616c:	e002      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800616e:	bf00      	nop
 8006170:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d015      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006180:	4b29      	ldr	r3, [pc, #164]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006186:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618e:	4926      	ldr	r1, [pc, #152]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006190:	4313      	orrs	r3, r2
 8006192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800619a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800619e:	d105      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061a0:	4b21      	ldr	r3, [pc, #132]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	4a20      	ldr	r2, [pc, #128]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061aa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d015      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80061b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061be:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061c6:	4918      	ldr	r1, [pc, #96]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d6:	d105      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061d8:	4b13      	ldr	r3, [pc, #76]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	4a12      	ldr	r2, [pc, #72]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061e2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d015      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80061f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061fe:	490a      	ldr	r1, [pc, #40]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006200:	4313      	orrs	r3, r2
 8006202:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800620a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800620e:	d105      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006210:	4b05      	ldr	r3, [pc, #20]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4a04      	ldr	r2, [pc, #16]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800621a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800621c:	7cbb      	ldrb	r3, [r7, #18]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	40021000 	.word	0x40021000

0800622c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e049      	b.n	80062d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fc fa7a 	bl	800274c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3304      	adds	r3, #4
 8006268:	4619      	mov	r1, r3
 800626a:	4610      	mov	r0, r2
 800626c:	f000 ff68 	bl	8007140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d001      	beq.n	80062f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e04c      	b.n	800638e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a26      	ldr	r2, [pc, #152]	@ (800639c <HAL_TIM_Base_Start+0xc0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d022      	beq.n	800634c <HAL_TIM_Base_Start+0x70>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800630e:	d01d      	beq.n	800634c <HAL_TIM_Base_Start+0x70>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a22      	ldr	r2, [pc, #136]	@ (80063a0 <HAL_TIM_Base_Start+0xc4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d018      	beq.n	800634c <HAL_TIM_Base_Start+0x70>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a21      	ldr	r2, [pc, #132]	@ (80063a4 <HAL_TIM_Base_Start+0xc8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d013      	beq.n	800634c <HAL_TIM_Base_Start+0x70>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1f      	ldr	r2, [pc, #124]	@ (80063a8 <HAL_TIM_Base_Start+0xcc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00e      	beq.n	800634c <HAL_TIM_Base_Start+0x70>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1e      	ldr	r2, [pc, #120]	@ (80063ac <HAL_TIM_Base_Start+0xd0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d009      	beq.n	800634c <HAL_TIM_Base_Start+0x70>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1c      	ldr	r2, [pc, #112]	@ (80063b0 <HAL_TIM_Base_Start+0xd4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d004      	beq.n	800634c <HAL_TIM_Base_Start+0x70>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1b      	ldr	r2, [pc, #108]	@ (80063b4 <HAL_TIM_Base_Start+0xd8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d115      	bne.n	8006378 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	4b19      	ldr	r3, [pc, #100]	@ (80063b8 <HAL_TIM_Base_Start+0xdc>)
 8006354:	4013      	ands	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b06      	cmp	r3, #6
 800635c:	d015      	beq.n	800638a <HAL_TIM_Base_Start+0xae>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006364:	d011      	beq.n	800638a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0201 	orr.w	r2, r2, #1
 8006374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006376:	e008      	b.n	800638a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e000      	b.n	800638c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40012c00 	.word	0x40012c00
 80063a0:	40000400 	.word	0x40000400
 80063a4:	40000800 	.word	0x40000800
 80063a8:	40000c00 	.word	0x40000c00
 80063ac:	40013400 	.word	0x40013400
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40015000 	.word	0x40015000
 80063b8:	00010007 	.word	0x00010007

080063bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d001      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e054      	b.n	800647e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a26      	ldr	r2, [pc, #152]	@ (800648c <HAL_TIM_Base_Start_IT+0xd0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d022      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x80>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063fe:	d01d      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x80>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a22      	ldr	r2, [pc, #136]	@ (8006490 <HAL_TIM_Base_Start_IT+0xd4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d018      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x80>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a21      	ldr	r2, [pc, #132]	@ (8006494 <HAL_TIM_Base_Start_IT+0xd8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d013      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x80>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1f      	ldr	r2, [pc, #124]	@ (8006498 <HAL_TIM_Base_Start_IT+0xdc>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00e      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x80>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1e      	ldr	r2, [pc, #120]	@ (800649c <HAL_TIM_Base_Start_IT+0xe0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d009      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x80>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1c      	ldr	r2, [pc, #112]	@ (80064a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d004      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x80>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1b      	ldr	r2, [pc, #108]	@ (80064a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d115      	bne.n	8006468 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689a      	ldr	r2, [r3, #8]
 8006442:	4b19      	ldr	r3, [pc, #100]	@ (80064a8 <HAL_TIM_Base_Start_IT+0xec>)
 8006444:	4013      	ands	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b06      	cmp	r3, #6
 800644c:	d015      	beq.n	800647a <HAL_TIM_Base_Start_IT+0xbe>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006454:	d011      	beq.n	800647a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0201 	orr.w	r2, r2, #1
 8006464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006466:	e008      	b.n	800647a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0201 	orr.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	e000      	b.n	800647c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40012c00 	.word	0x40012c00
 8006490:	40000400 	.word	0x40000400
 8006494:	40000800 	.word	0x40000800
 8006498:	40000c00 	.word	0x40000c00
 800649c:	40013400 	.word	0x40013400
 80064a0:	40014000 	.word	0x40014000
 80064a4:	40015000 	.word	0x40015000
 80064a8:	00010007 	.word	0x00010007

080064ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e049      	b.n	8006552 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f841 	bl	800655a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4619      	mov	r1, r3
 80064ea:	4610      	mov	r0, r2
 80064ec:	f000 fe28 	bl	8007140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
	...

08006570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <HAL_TIM_PWM_Start+0x24>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b01      	cmp	r3, #1
 800658a:	bf14      	ite	ne
 800658c:	2301      	movne	r3, #1
 800658e:	2300      	moveq	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	e03c      	b.n	800660e <HAL_TIM_PWM_Start+0x9e>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b04      	cmp	r3, #4
 8006598:	d109      	bne.n	80065ae <HAL_TIM_PWM_Start+0x3e>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	bf14      	ite	ne
 80065a6:	2301      	movne	r3, #1
 80065a8:	2300      	moveq	r3, #0
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	e02f      	b.n	800660e <HAL_TIM_PWM_Start+0x9e>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d109      	bne.n	80065c8 <HAL_TIM_PWM_Start+0x58>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b01      	cmp	r3, #1
 80065be:	bf14      	ite	ne
 80065c0:	2301      	movne	r3, #1
 80065c2:	2300      	moveq	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	e022      	b.n	800660e <HAL_TIM_PWM_Start+0x9e>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b0c      	cmp	r3, #12
 80065cc:	d109      	bne.n	80065e2 <HAL_TIM_PWM_Start+0x72>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	bf14      	ite	ne
 80065da:	2301      	movne	r3, #1
 80065dc:	2300      	moveq	r3, #0
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	e015      	b.n	800660e <HAL_TIM_PWM_Start+0x9e>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d109      	bne.n	80065fc <HAL_TIM_PWM_Start+0x8c>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	bf14      	ite	ne
 80065f4:	2301      	movne	r3, #1
 80065f6:	2300      	moveq	r3, #0
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	e008      	b.n	800660e <HAL_TIM_PWM_Start+0x9e>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b01      	cmp	r3, #1
 8006606:	bf14      	ite	ne
 8006608:	2301      	movne	r3, #1
 800660a:	2300      	moveq	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e0a6      	b.n	8006764 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d104      	bne.n	8006626 <HAL_TIM_PWM_Start+0xb6>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006624:	e023      	b.n	800666e <HAL_TIM_PWM_Start+0xfe>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b04      	cmp	r3, #4
 800662a:	d104      	bne.n	8006636 <HAL_TIM_PWM_Start+0xc6>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006634:	e01b      	b.n	800666e <HAL_TIM_PWM_Start+0xfe>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b08      	cmp	r3, #8
 800663a:	d104      	bne.n	8006646 <HAL_TIM_PWM_Start+0xd6>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006644:	e013      	b.n	800666e <HAL_TIM_PWM_Start+0xfe>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b0c      	cmp	r3, #12
 800664a:	d104      	bne.n	8006656 <HAL_TIM_PWM_Start+0xe6>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006654:	e00b      	b.n	800666e <HAL_TIM_PWM_Start+0xfe>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b10      	cmp	r3, #16
 800665a:	d104      	bne.n	8006666 <HAL_TIM_PWM_Start+0xf6>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006664:	e003      	b.n	800666e <HAL_TIM_PWM_Start+0xfe>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2201      	movs	r2, #1
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f001 f9dc 	bl	8007a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a3a      	ldr	r2, [pc, #232]	@ (800676c <HAL_TIM_PWM_Start+0x1fc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d018      	beq.n	80066b8 <HAL_TIM_PWM_Start+0x148>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a39      	ldr	r2, [pc, #228]	@ (8006770 <HAL_TIM_PWM_Start+0x200>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d013      	beq.n	80066b8 <HAL_TIM_PWM_Start+0x148>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a37      	ldr	r2, [pc, #220]	@ (8006774 <HAL_TIM_PWM_Start+0x204>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d00e      	beq.n	80066b8 <HAL_TIM_PWM_Start+0x148>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a36      	ldr	r2, [pc, #216]	@ (8006778 <HAL_TIM_PWM_Start+0x208>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d009      	beq.n	80066b8 <HAL_TIM_PWM_Start+0x148>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a34      	ldr	r2, [pc, #208]	@ (800677c <HAL_TIM_PWM_Start+0x20c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d004      	beq.n	80066b8 <HAL_TIM_PWM_Start+0x148>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a33      	ldr	r2, [pc, #204]	@ (8006780 <HAL_TIM_PWM_Start+0x210>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d101      	bne.n	80066bc <HAL_TIM_PWM_Start+0x14c>
 80066b8:	2301      	movs	r3, #1
 80066ba:	e000      	b.n	80066be <HAL_TIM_PWM_Start+0x14e>
 80066bc:	2300      	movs	r3, #0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d007      	beq.n	80066d2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a25      	ldr	r2, [pc, #148]	@ (800676c <HAL_TIM_PWM_Start+0x1fc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d022      	beq.n	8006722 <HAL_TIM_PWM_Start+0x1b2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066e4:	d01d      	beq.n	8006722 <HAL_TIM_PWM_Start+0x1b2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a26      	ldr	r2, [pc, #152]	@ (8006784 <HAL_TIM_PWM_Start+0x214>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d018      	beq.n	8006722 <HAL_TIM_PWM_Start+0x1b2>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a24      	ldr	r2, [pc, #144]	@ (8006788 <HAL_TIM_PWM_Start+0x218>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <HAL_TIM_PWM_Start+0x1b2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a23      	ldr	r2, [pc, #140]	@ (800678c <HAL_TIM_PWM_Start+0x21c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00e      	beq.n	8006722 <HAL_TIM_PWM_Start+0x1b2>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a19      	ldr	r2, [pc, #100]	@ (8006770 <HAL_TIM_PWM_Start+0x200>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d009      	beq.n	8006722 <HAL_TIM_PWM_Start+0x1b2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a18      	ldr	r2, [pc, #96]	@ (8006774 <HAL_TIM_PWM_Start+0x204>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_TIM_PWM_Start+0x1b2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a18      	ldr	r2, [pc, #96]	@ (8006780 <HAL_TIM_PWM_Start+0x210>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d115      	bne.n	800674e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	4b19      	ldr	r3, [pc, #100]	@ (8006790 <HAL_TIM_PWM_Start+0x220>)
 800672a:	4013      	ands	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b06      	cmp	r3, #6
 8006732:	d015      	beq.n	8006760 <HAL_TIM_PWM_Start+0x1f0>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800673a:	d011      	beq.n	8006760 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0201 	orr.w	r2, r2, #1
 800674a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800674c:	e008      	b.n	8006760 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0201 	orr.w	r2, r2, #1
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e000      	b.n	8006762 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006760:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40012c00 	.word	0x40012c00
 8006770:	40013400 	.word	0x40013400
 8006774:	40014000 	.word	0x40014000
 8006778:	40014400 	.word	0x40014400
 800677c:	40014800 	.word	0x40014800
 8006780:	40015000 	.word	0x40015000
 8006784:	40000400 	.word	0x40000400
 8006788:	40000800 	.word	0x40000800
 800678c:	40000c00 	.word	0x40000c00
 8006790:	00010007 	.word	0x00010007

08006794 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e097      	b.n	80068d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d106      	bne.n	80067c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7fb ffff 	bl	80027c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2202      	movs	r2, #2
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6812      	ldr	r2, [r2, #0]
 80067d4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80067d8:	f023 0307 	bic.w	r3, r3, #7
 80067dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3304      	adds	r3, #4
 80067e6:	4619      	mov	r1, r3
 80067e8:	4610      	mov	r0, r2
 80067ea:	f000 fca9 	bl	8007140 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	4313      	orrs	r3, r2
 800680e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006816:	f023 0303 	bic.w	r3, r3, #3
 800681a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	4313      	orrs	r3, r2
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006834:	f023 030c 	bic.w	r3, r3, #12
 8006838:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006840:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006844:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	021b      	lsls	r3, r3, #8
 8006850:	4313      	orrs	r3, r2
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	011a      	lsls	r2, r3, #4
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	031b      	lsls	r3, r3, #12
 8006864:	4313      	orrs	r3, r2
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006872:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800687a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	011b      	lsls	r3, r3, #4
 8006886:	4313      	orrs	r3, r2
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80068f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006900:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006908:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d110      	bne.n	8006932 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d102      	bne.n	800691c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006916:	7b7b      	ldrb	r3, [r7, #13]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d001      	beq.n	8006920 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e069      	b.n	80069f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006930:	e031      	b.n	8006996 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b04      	cmp	r3, #4
 8006936:	d110      	bne.n	800695a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006938:	7bbb      	ldrb	r3, [r7, #14]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d102      	bne.n	8006944 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800693e:	7b3b      	ldrb	r3, [r7, #12]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d001      	beq.n	8006948 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e055      	b.n	80069f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006958:	e01d      	b.n	8006996 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d108      	bne.n	8006972 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006960:	7bbb      	ldrb	r3, [r7, #14]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d105      	bne.n	8006972 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006966:	7b7b      	ldrb	r3, [r7, #13]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d102      	bne.n	8006972 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800696c:	7b3b      	ldrb	r3, [r7, #12]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d001      	beq.n	8006976 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e03e      	b.n	80069f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2202      	movs	r2, #2
 800697a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2202      	movs	r2, #2
 8006982:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2202      	movs	r2, #2
 800698a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2202      	movs	r2, #2
 8006992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <HAL_TIM_Encoder_Start+0xc4>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d008      	beq.n	80069b4 <HAL_TIM_Encoder_Start+0xd4>
 80069a2:	e00f      	b.n	80069c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2201      	movs	r2, #1
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 f841 	bl	8007a34 <TIM_CCxChannelCmd>
      break;
 80069b2:	e016      	b.n	80069e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2201      	movs	r2, #1
 80069ba:	2104      	movs	r1, #4
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 f839 	bl	8007a34 <TIM_CCxChannelCmd>
      break;
 80069c2:	e00e      	b.n	80069e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2201      	movs	r2, #1
 80069ca:	2100      	movs	r1, #0
 80069cc:	4618      	mov	r0, r3
 80069ce:	f001 f831 	bl	8007a34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2201      	movs	r2, #1
 80069d8:	2104      	movs	r1, #4
 80069da:	4618      	mov	r0, r3
 80069dc:	f001 f82a 	bl	8007a34 <TIM_CCxChannelCmd>
      break;
 80069e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 0201 	orr.w	r2, r2, #1
 80069f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d020      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d01b      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0202 	mvn.w	r2, #2
 8006a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fb5c 	bl	8007104 <HAL_TIM_IC_CaptureCallback>
 8006a4c:	e005      	b.n	8006a5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fb4e 	bl	80070f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fb5f 	bl	8007118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d020      	beq.n	8006aac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01b      	beq.n	8006aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f06f 0204 	mvn.w	r2, #4
 8006a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2202      	movs	r2, #2
 8006a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fb36 	bl	8007104 <HAL_TIM_IC_CaptureCallback>
 8006a98:	e005      	b.n	8006aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fb28 	bl	80070f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fb39 	bl	8007118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d020      	beq.n	8006af8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01b      	beq.n	8006af8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0208 	mvn.w	r2, #8
 8006ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2204      	movs	r2, #4
 8006ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fb10 	bl	8007104 <HAL_TIM_IC_CaptureCallback>
 8006ae4:	e005      	b.n	8006af2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fb02 	bl	80070f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fb13 	bl	8007118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f003 0310 	and.w	r3, r3, #16
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d020      	beq.n	8006b44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01b      	beq.n	8006b44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0210 	mvn.w	r2, #16
 8006b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2208      	movs	r2, #8
 8006b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 faea 	bl	8007104 <HAL_TIM_IC_CaptureCallback>
 8006b30:	e005      	b.n	8006b3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fadc 	bl	80070f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 faed 	bl	8007118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00c      	beq.n	8006b68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d007      	beq.n	8006b68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0201 	mvn.w	r2, #1
 8006b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fa feba 	bl	80018dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d104      	bne.n	8006b7c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00c      	beq.n	8006b96 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f001 f8a9 	bl	8007ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00c      	beq.n	8006bba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d007      	beq.n	8006bba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 f8a1 	bl	8007cfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00c      	beq.n	8006bde <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d007      	beq.n	8006bde <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 faa7 	bl	800712c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f003 0320 	and.w	r3, r3, #32
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00c      	beq.n	8006c02 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d007      	beq.n	8006c02 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f06f 0220 	mvn.w	r2, #32
 8006bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 f869 	bl	8007cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00c      	beq.n	8006c26 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d007      	beq.n	8006c26 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 f875 	bl	8007d10 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00c      	beq.n	8006c4a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d007      	beq.n	8006c4a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 f86d 	bl	8007d24 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00c      	beq.n	8006c6e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d007      	beq.n	8006c6e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 f865 	bl	8007d38 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00c      	beq.n	8006c92 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d007      	beq.n	8006c92 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 f85d 	bl	8007d4c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c92:	bf00      	nop
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e0ff      	b.n	8006eba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b14      	cmp	r3, #20
 8006cc6:	f200 80f0 	bhi.w	8006eaa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006cca:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd0:	08006d25 	.word	0x08006d25
 8006cd4:	08006eab 	.word	0x08006eab
 8006cd8:	08006eab 	.word	0x08006eab
 8006cdc:	08006eab 	.word	0x08006eab
 8006ce0:	08006d65 	.word	0x08006d65
 8006ce4:	08006eab 	.word	0x08006eab
 8006ce8:	08006eab 	.word	0x08006eab
 8006cec:	08006eab 	.word	0x08006eab
 8006cf0:	08006da7 	.word	0x08006da7
 8006cf4:	08006eab 	.word	0x08006eab
 8006cf8:	08006eab 	.word	0x08006eab
 8006cfc:	08006eab 	.word	0x08006eab
 8006d00:	08006de7 	.word	0x08006de7
 8006d04:	08006eab 	.word	0x08006eab
 8006d08:	08006eab 	.word	0x08006eab
 8006d0c:	08006eab 	.word	0x08006eab
 8006d10:	08006e29 	.word	0x08006e29
 8006d14:	08006eab 	.word	0x08006eab
 8006d18:	08006eab 	.word	0x08006eab
 8006d1c:	08006eab 	.word	0x08006eab
 8006d20:	08006e69 	.word	0x08006e69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fabc 	bl	80072a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0208 	orr.w	r2, r2, #8
 8006d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0204 	bic.w	r2, r2, #4
 8006d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6999      	ldr	r1, [r3, #24]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	619a      	str	r2, [r3, #24]
      break;
 8006d62:	e0a5      	b.n	8006eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 fb36 	bl	80073dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	699a      	ldr	r2, [r3, #24]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	699a      	ldr	r2, [r3, #24]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6999      	ldr	r1, [r3, #24]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	021a      	lsls	r2, r3, #8
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	619a      	str	r2, [r3, #24]
      break;
 8006da4:	e084      	b.n	8006eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68b9      	ldr	r1, [r7, #8]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fba9 	bl	8007504 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69da      	ldr	r2, [r3, #28]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0208 	orr.w	r2, r2, #8
 8006dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0204 	bic.w	r2, r2, #4
 8006dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69d9      	ldr	r1, [r3, #28]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	691a      	ldr	r2, [r3, #16]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	430a      	orrs	r2, r1
 8006de2:	61da      	str	r2, [r3, #28]
      break;
 8006de4:	e064      	b.n	8006eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fc1b 	bl	8007628 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	69da      	ldr	r2, [r3, #28]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69da      	ldr	r2, [r3, #28]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69d9      	ldr	r1, [r3, #28]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	021a      	lsls	r2, r3, #8
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	61da      	str	r2, [r3, #28]
      break;
 8006e26:	e043      	b.n	8006eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fc8e 	bl	8007750 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0208 	orr.w	r2, r2, #8
 8006e42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0204 	bic.w	r2, r2, #4
 8006e52:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	691a      	ldr	r2, [r3, #16]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006e66:	e023      	b.n	8006eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fcd8 	bl	8007824 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e82:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e92:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	021a      	lsls	r2, r3, #8
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006ea8:	e002      	b.n	8006eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	75fb      	strb	r3, [r7, #23]
      break;
 8006eae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop

08006ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_TIM_ConfigClockSource+0x1c>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e0f6      	b.n	80070ce <HAL_TIM_ConfigClockSource+0x20a>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006efe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a6f      	ldr	r2, [pc, #444]	@ (80070d8 <HAL_TIM_ConfigClockSource+0x214>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	f000 80c1 	beq.w	80070a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006f20:	4a6d      	ldr	r2, [pc, #436]	@ (80070d8 <HAL_TIM_ConfigClockSource+0x214>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	f200 80c6 	bhi.w	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f28:	4a6c      	ldr	r2, [pc, #432]	@ (80070dc <HAL_TIM_ConfigClockSource+0x218>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	f000 80b9 	beq.w	80070a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006f30:	4a6a      	ldr	r2, [pc, #424]	@ (80070dc <HAL_TIM_ConfigClockSource+0x218>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	f200 80be 	bhi.w	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f38:	4a69      	ldr	r2, [pc, #420]	@ (80070e0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	f000 80b1 	beq.w	80070a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006f40:	4a67      	ldr	r2, [pc, #412]	@ (80070e0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	f200 80b6 	bhi.w	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f48:	4a66      	ldr	r2, [pc, #408]	@ (80070e4 <HAL_TIM_ConfigClockSource+0x220>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	f000 80a9 	beq.w	80070a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006f50:	4a64      	ldr	r2, [pc, #400]	@ (80070e4 <HAL_TIM_ConfigClockSource+0x220>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	f200 80ae 	bhi.w	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f58:	4a63      	ldr	r2, [pc, #396]	@ (80070e8 <HAL_TIM_ConfigClockSource+0x224>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	f000 80a1 	beq.w	80070a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006f60:	4a61      	ldr	r2, [pc, #388]	@ (80070e8 <HAL_TIM_ConfigClockSource+0x224>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	f200 80a6 	bhi.w	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f68:	4a60      	ldr	r2, [pc, #384]	@ (80070ec <HAL_TIM_ConfigClockSource+0x228>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	f000 8099 	beq.w	80070a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006f70:	4a5e      	ldr	r2, [pc, #376]	@ (80070ec <HAL_TIM_ConfigClockSource+0x228>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	f200 809e 	bhi.w	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f7c:	f000 8091 	beq.w	80070a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006f80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f84:	f200 8096 	bhi.w	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f8c:	f000 8089 	beq.w	80070a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006f90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f94:	f200 808e 	bhi.w	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f9c:	d03e      	beq.n	800701c <HAL_TIM_ConfigClockSource+0x158>
 8006f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fa2:	f200 8087 	bhi.w	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006faa:	f000 8086 	beq.w	80070ba <HAL_TIM_ConfigClockSource+0x1f6>
 8006fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fb2:	d87f      	bhi.n	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fb4:	2b70      	cmp	r3, #112	@ 0x70
 8006fb6:	d01a      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0x12a>
 8006fb8:	2b70      	cmp	r3, #112	@ 0x70
 8006fba:	d87b      	bhi.n	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fbc:	2b60      	cmp	r3, #96	@ 0x60
 8006fbe:	d050      	beq.n	8007062 <HAL_TIM_ConfigClockSource+0x19e>
 8006fc0:	2b60      	cmp	r3, #96	@ 0x60
 8006fc2:	d877      	bhi.n	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fc4:	2b50      	cmp	r3, #80	@ 0x50
 8006fc6:	d03c      	beq.n	8007042 <HAL_TIM_ConfigClockSource+0x17e>
 8006fc8:	2b50      	cmp	r3, #80	@ 0x50
 8006fca:	d873      	bhi.n	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fcc:	2b40      	cmp	r3, #64	@ 0x40
 8006fce:	d058      	beq.n	8007082 <HAL_TIM_ConfigClockSource+0x1be>
 8006fd0:	2b40      	cmp	r3, #64	@ 0x40
 8006fd2:	d86f      	bhi.n	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fd4:	2b30      	cmp	r3, #48	@ 0x30
 8006fd6:	d064      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006fd8:	2b30      	cmp	r3, #48	@ 0x30
 8006fda:	d86b      	bhi.n	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fdc:	2b20      	cmp	r3, #32
 8006fde:	d060      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006fe0:	2b20      	cmp	r3, #32
 8006fe2:	d867      	bhi.n	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d05c      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006fe8:	2b10      	cmp	r3, #16
 8006fea:	d05a      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006fec:	e062      	b.n	80070b4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ffe:	f000 fcf9 	bl	80079f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007010:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	609a      	str	r2, [r3, #8]
      break;
 800701a:	e04f      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800702c:	f000 fce2 	bl	80079f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689a      	ldr	r2, [r3, #8]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800703e:	609a      	str	r2, [r3, #8]
      break;
 8007040:	e03c      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800704e:	461a      	mov	r2, r3
 8007050:	f000 fc54 	bl	80078fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2150      	movs	r1, #80	@ 0x50
 800705a:	4618      	mov	r0, r3
 800705c:	f000 fcad 	bl	80079ba <TIM_ITRx_SetConfig>
      break;
 8007060:	e02c      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800706e:	461a      	mov	r2, r3
 8007070:	f000 fc73 	bl	800795a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2160      	movs	r1, #96	@ 0x60
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fc9d 	bl	80079ba <TIM_ITRx_SetConfig>
      break;
 8007080:	e01c      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800708e:	461a      	mov	r2, r3
 8007090:	f000 fc34 	bl	80078fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2140      	movs	r1, #64	@ 0x40
 800709a:	4618      	mov	r0, r3
 800709c:	f000 fc8d 	bl	80079ba <TIM_ITRx_SetConfig>
      break;
 80070a0:	e00c      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4619      	mov	r1, r3
 80070ac:	4610      	mov	r0, r2
 80070ae:	f000 fc84 	bl	80079ba <TIM_ITRx_SetConfig>
      break;
 80070b2:	e003      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	73fb      	strb	r3, [r7, #15]
      break;
 80070b8:	e000      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80070ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	00100070 	.word	0x00100070
 80070dc:	00100060 	.word	0x00100060
 80070e0:	00100050 	.word	0x00100050
 80070e4:	00100040 	.word	0x00100040
 80070e8:	00100030 	.word	0x00100030
 80070ec:	00100020 	.word	0x00100020

080070f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a4c      	ldr	r2, [pc, #304]	@ (8007284 <TIM_Base_SetConfig+0x144>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d017      	beq.n	8007188 <TIM_Base_SetConfig+0x48>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800715e:	d013      	beq.n	8007188 <TIM_Base_SetConfig+0x48>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a49      	ldr	r2, [pc, #292]	@ (8007288 <TIM_Base_SetConfig+0x148>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00f      	beq.n	8007188 <TIM_Base_SetConfig+0x48>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a48      	ldr	r2, [pc, #288]	@ (800728c <TIM_Base_SetConfig+0x14c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00b      	beq.n	8007188 <TIM_Base_SetConfig+0x48>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a47      	ldr	r2, [pc, #284]	@ (8007290 <TIM_Base_SetConfig+0x150>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d007      	beq.n	8007188 <TIM_Base_SetConfig+0x48>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a46      	ldr	r2, [pc, #280]	@ (8007294 <TIM_Base_SetConfig+0x154>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_Base_SetConfig+0x48>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a45      	ldr	r2, [pc, #276]	@ (8007298 <TIM_Base_SetConfig+0x158>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d108      	bne.n	800719a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800718e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a39      	ldr	r2, [pc, #228]	@ (8007284 <TIM_Base_SetConfig+0x144>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d023      	beq.n	80071ea <TIM_Base_SetConfig+0xaa>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071a8:	d01f      	beq.n	80071ea <TIM_Base_SetConfig+0xaa>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a36      	ldr	r2, [pc, #216]	@ (8007288 <TIM_Base_SetConfig+0x148>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d01b      	beq.n	80071ea <TIM_Base_SetConfig+0xaa>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a35      	ldr	r2, [pc, #212]	@ (800728c <TIM_Base_SetConfig+0x14c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d017      	beq.n	80071ea <TIM_Base_SetConfig+0xaa>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a34      	ldr	r2, [pc, #208]	@ (8007290 <TIM_Base_SetConfig+0x150>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d013      	beq.n	80071ea <TIM_Base_SetConfig+0xaa>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a33      	ldr	r2, [pc, #204]	@ (8007294 <TIM_Base_SetConfig+0x154>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00f      	beq.n	80071ea <TIM_Base_SetConfig+0xaa>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a33      	ldr	r2, [pc, #204]	@ (800729c <TIM_Base_SetConfig+0x15c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d00b      	beq.n	80071ea <TIM_Base_SetConfig+0xaa>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a32      	ldr	r2, [pc, #200]	@ (80072a0 <TIM_Base_SetConfig+0x160>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d007      	beq.n	80071ea <TIM_Base_SetConfig+0xaa>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a31      	ldr	r2, [pc, #196]	@ (80072a4 <TIM_Base_SetConfig+0x164>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d003      	beq.n	80071ea <TIM_Base_SetConfig+0xaa>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a2c      	ldr	r2, [pc, #176]	@ (8007298 <TIM_Base_SetConfig+0x158>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d108      	bne.n	80071fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a18      	ldr	r2, [pc, #96]	@ (8007284 <TIM_Base_SetConfig+0x144>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d013      	beq.n	8007250 <TIM_Base_SetConfig+0x110>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a1a      	ldr	r2, [pc, #104]	@ (8007294 <TIM_Base_SetConfig+0x154>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00f      	beq.n	8007250 <TIM_Base_SetConfig+0x110>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a1a      	ldr	r2, [pc, #104]	@ (800729c <TIM_Base_SetConfig+0x15c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00b      	beq.n	8007250 <TIM_Base_SetConfig+0x110>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a19      	ldr	r2, [pc, #100]	@ (80072a0 <TIM_Base_SetConfig+0x160>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d007      	beq.n	8007250 <TIM_Base_SetConfig+0x110>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a18      	ldr	r2, [pc, #96]	@ (80072a4 <TIM_Base_SetConfig+0x164>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d003      	beq.n	8007250 <TIM_Base_SetConfig+0x110>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a13      	ldr	r2, [pc, #76]	@ (8007298 <TIM_Base_SetConfig+0x158>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d103      	bne.n	8007258 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	691a      	ldr	r2, [r3, #16]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b01      	cmp	r3, #1
 8007268:	d105      	bne.n	8007276 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f023 0201 	bic.w	r2, r3, #1
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	611a      	str	r2, [r3, #16]
  }
}
 8007276:	bf00      	nop
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	40012c00 	.word	0x40012c00
 8007288:	40000400 	.word	0x40000400
 800728c:	40000800 	.word	0x40000800
 8007290:	40000c00 	.word	0x40000c00
 8007294:	40013400 	.word	0x40013400
 8007298:	40015000 	.word	0x40015000
 800729c:	40014000 	.word	0x40014000
 80072a0:	40014400 	.word	0x40014400
 80072a4:	40014800 	.word	0x40014800

080072a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	f023 0201 	bic.w	r2, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 0303 	bic.w	r3, r3, #3
 80072e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f023 0302 	bic.w	r3, r3, #2
 80072f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a30      	ldr	r2, [pc, #192]	@ (80073c4 <TIM_OC1_SetConfig+0x11c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d013      	beq.n	8007330 <TIM_OC1_SetConfig+0x88>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a2f      	ldr	r2, [pc, #188]	@ (80073c8 <TIM_OC1_SetConfig+0x120>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d00f      	beq.n	8007330 <TIM_OC1_SetConfig+0x88>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a2e      	ldr	r2, [pc, #184]	@ (80073cc <TIM_OC1_SetConfig+0x124>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00b      	beq.n	8007330 <TIM_OC1_SetConfig+0x88>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a2d      	ldr	r2, [pc, #180]	@ (80073d0 <TIM_OC1_SetConfig+0x128>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d007      	beq.n	8007330 <TIM_OC1_SetConfig+0x88>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a2c      	ldr	r2, [pc, #176]	@ (80073d4 <TIM_OC1_SetConfig+0x12c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d003      	beq.n	8007330 <TIM_OC1_SetConfig+0x88>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a2b      	ldr	r2, [pc, #172]	@ (80073d8 <TIM_OC1_SetConfig+0x130>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d10c      	bne.n	800734a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f023 0308 	bic.w	r3, r3, #8
 8007336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	4313      	orrs	r3, r2
 8007340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f023 0304 	bic.w	r3, r3, #4
 8007348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a1d      	ldr	r2, [pc, #116]	@ (80073c4 <TIM_OC1_SetConfig+0x11c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d013      	beq.n	800737a <TIM_OC1_SetConfig+0xd2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a1c      	ldr	r2, [pc, #112]	@ (80073c8 <TIM_OC1_SetConfig+0x120>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d00f      	beq.n	800737a <TIM_OC1_SetConfig+0xd2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a1b      	ldr	r2, [pc, #108]	@ (80073cc <TIM_OC1_SetConfig+0x124>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d00b      	beq.n	800737a <TIM_OC1_SetConfig+0xd2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a1a      	ldr	r2, [pc, #104]	@ (80073d0 <TIM_OC1_SetConfig+0x128>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d007      	beq.n	800737a <TIM_OC1_SetConfig+0xd2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a19      	ldr	r2, [pc, #100]	@ (80073d4 <TIM_OC1_SetConfig+0x12c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d003      	beq.n	800737a <TIM_OC1_SetConfig+0xd2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a18      	ldr	r2, [pc, #96]	@ (80073d8 <TIM_OC1_SetConfig+0x130>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d111      	bne.n	800739e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	4313      	orrs	r3, r2
 8007392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4313      	orrs	r3, r2
 800739c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	621a      	str	r2, [r3, #32]
}
 80073b8:	bf00      	nop
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	40012c00 	.word	0x40012c00
 80073c8:	40013400 	.word	0x40013400
 80073cc:	40014000 	.word	0x40014000
 80073d0:	40014400 	.word	0x40014400
 80073d4:	40014800 	.word	0x40014800
 80073d8:	40015000 	.word	0x40015000

080073dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f023 0210 	bic.w	r2, r3, #16
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800740a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800740e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	021b      	lsls	r3, r3, #8
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	4313      	orrs	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f023 0320 	bic.w	r3, r3, #32
 800742a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	011b      	lsls	r3, r3, #4
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	4313      	orrs	r3, r2
 8007436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a2c      	ldr	r2, [pc, #176]	@ (80074ec <TIM_OC2_SetConfig+0x110>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d007      	beq.n	8007450 <TIM_OC2_SetConfig+0x74>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a2b      	ldr	r2, [pc, #172]	@ (80074f0 <TIM_OC2_SetConfig+0x114>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d003      	beq.n	8007450 <TIM_OC2_SetConfig+0x74>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a2a      	ldr	r2, [pc, #168]	@ (80074f4 <TIM_OC2_SetConfig+0x118>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d10d      	bne.n	800746c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	011b      	lsls	r3, r3, #4
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	4313      	orrs	r3, r2
 8007462:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800746a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a1f      	ldr	r2, [pc, #124]	@ (80074ec <TIM_OC2_SetConfig+0x110>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d013      	beq.n	800749c <TIM_OC2_SetConfig+0xc0>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a1e      	ldr	r2, [pc, #120]	@ (80074f0 <TIM_OC2_SetConfig+0x114>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00f      	beq.n	800749c <TIM_OC2_SetConfig+0xc0>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a1e      	ldr	r2, [pc, #120]	@ (80074f8 <TIM_OC2_SetConfig+0x11c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00b      	beq.n	800749c <TIM_OC2_SetConfig+0xc0>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a1d      	ldr	r2, [pc, #116]	@ (80074fc <TIM_OC2_SetConfig+0x120>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d007      	beq.n	800749c <TIM_OC2_SetConfig+0xc0>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a1c      	ldr	r2, [pc, #112]	@ (8007500 <TIM_OC2_SetConfig+0x124>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d003      	beq.n	800749c <TIM_OC2_SetConfig+0xc0>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a17      	ldr	r2, [pc, #92]	@ (80074f4 <TIM_OC2_SetConfig+0x118>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d113      	bne.n	80074c4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	621a      	str	r2, [r3, #32]
}
 80074de:	bf00      	nop
 80074e0:	371c      	adds	r7, #28
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	40012c00 	.word	0x40012c00
 80074f0:	40013400 	.word	0x40013400
 80074f4:	40015000 	.word	0x40015000
 80074f8:	40014000 	.word	0x40014000
 80074fc:	40014400 	.word	0x40014400
 8007500:	40014800 	.word	0x40014800

08007504 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a1b      	ldr	r3, [r3, #32]
 8007518:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0303 	bic.w	r3, r3, #3
 800753e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	021b      	lsls	r3, r3, #8
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	4313      	orrs	r3, r2
 800755c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a2b      	ldr	r2, [pc, #172]	@ (8007610 <TIM_OC3_SetConfig+0x10c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d007      	beq.n	8007576 <TIM_OC3_SetConfig+0x72>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a2a      	ldr	r2, [pc, #168]	@ (8007614 <TIM_OC3_SetConfig+0x110>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d003      	beq.n	8007576 <TIM_OC3_SetConfig+0x72>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a29      	ldr	r2, [pc, #164]	@ (8007618 <TIM_OC3_SetConfig+0x114>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d10d      	bne.n	8007592 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800757c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	4313      	orrs	r3, r2
 8007588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a1e      	ldr	r2, [pc, #120]	@ (8007610 <TIM_OC3_SetConfig+0x10c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d013      	beq.n	80075c2 <TIM_OC3_SetConfig+0xbe>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a1d      	ldr	r2, [pc, #116]	@ (8007614 <TIM_OC3_SetConfig+0x110>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00f      	beq.n	80075c2 <TIM_OC3_SetConfig+0xbe>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a1d      	ldr	r2, [pc, #116]	@ (800761c <TIM_OC3_SetConfig+0x118>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d00b      	beq.n	80075c2 <TIM_OC3_SetConfig+0xbe>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007620 <TIM_OC3_SetConfig+0x11c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d007      	beq.n	80075c2 <TIM_OC3_SetConfig+0xbe>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007624 <TIM_OC3_SetConfig+0x120>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d003      	beq.n	80075c2 <TIM_OC3_SetConfig+0xbe>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a16      	ldr	r2, [pc, #88]	@ (8007618 <TIM_OC3_SetConfig+0x114>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d113      	bne.n	80075ea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80075d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	4313      	orrs	r3, r2
 80075dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	621a      	str	r2, [r3, #32]
}
 8007604:	bf00      	nop
 8007606:	371c      	adds	r7, #28
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	40012c00 	.word	0x40012c00
 8007614:	40013400 	.word	0x40013400
 8007618:	40015000 	.word	0x40015000
 800761c:	40014000 	.word	0x40014000
 8007620:	40014400 	.word	0x40014400
 8007624:	40014800 	.word	0x40014800

08007628 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a1b      	ldr	r3, [r3, #32]
 800763c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800765a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	021b      	lsls	r3, r3, #8
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	031b      	lsls	r3, r3, #12
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	4313      	orrs	r3, r2
 8007682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a2c      	ldr	r2, [pc, #176]	@ (8007738 <TIM_OC4_SetConfig+0x110>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d007      	beq.n	800769c <TIM_OC4_SetConfig+0x74>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a2b      	ldr	r2, [pc, #172]	@ (800773c <TIM_OC4_SetConfig+0x114>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d003      	beq.n	800769c <TIM_OC4_SetConfig+0x74>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a2a      	ldr	r2, [pc, #168]	@ (8007740 <TIM_OC4_SetConfig+0x118>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d10d      	bne.n	80076b8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80076a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	031b      	lsls	r3, r3, #12
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a1f      	ldr	r2, [pc, #124]	@ (8007738 <TIM_OC4_SetConfig+0x110>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d013      	beq.n	80076e8 <TIM_OC4_SetConfig+0xc0>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a1e      	ldr	r2, [pc, #120]	@ (800773c <TIM_OC4_SetConfig+0x114>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d00f      	beq.n	80076e8 <TIM_OC4_SetConfig+0xc0>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007744 <TIM_OC4_SetConfig+0x11c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00b      	beq.n	80076e8 <TIM_OC4_SetConfig+0xc0>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a1d      	ldr	r2, [pc, #116]	@ (8007748 <TIM_OC4_SetConfig+0x120>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d007      	beq.n	80076e8 <TIM_OC4_SetConfig+0xc0>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a1c      	ldr	r2, [pc, #112]	@ (800774c <TIM_OC4_SetConfig+0x124>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_OC4_SetConfig+0xc0>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a17      	ldr	r2, [pc, #92]	@ (8007740 <TIM_OC4_SetConfig+0x118>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d113      	bne.n	8007710 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076ee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80076f6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	019b      	lsls	r3, r3, #6
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	019b      	lsls	r3, r3, #6
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	621a      	str	r2, [r3, #32]
}
 800772a:	bf00      	nop
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40012c00 	.word	0x40012c00
 800773c:	40013400 	.word	0x40013400
 8007740:	40015000 	.word	0x40015000
 8007744:	40014000 	.word	0x40014000
 8007748:	40014400 	.word	0x40014400
 800774c:	40014800 	.word	0x40014800

08007750 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800777e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007794:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	041b      	lsls	r3, r3, #16
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a19      	ldr	r2, [pc, #100]	@ (800780c <TIM_OC5_SetConfig+0xbc>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d013      	beq.n	80077d2 <TIM_OC5_SetConfig+0x82>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a18      	ldr	r2, [pc, #96]	@ (8007810 <TIM_OC5_SetConfig+0xc0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00f      	beq.n	80077d2 <TIM_OC5_SetConfig+0x82>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a17      	ldr	r2, [pc, #92]	@ (8007814 <TIM_OC5_SetConfig+0xc4>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d00b      	beq.n	80077d2 <TIM_OC5_SetConfig+0x82>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a16      	ldr	r2, [pc, #88]	@ (8007818 <TIM_OC5_SetConfig+0xc8>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d007      	beq.n	80077d2 <TIM_OC5_SetConfig+0x82>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a15      	ldr	r2, [pc, #84]	@ (800781c <TIM_OC5_SetConfig+0xcc>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d003      	beq.n	80077d2 <TIM_OC5_SetConfig+0x82>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a14      	ldr	r2, [pc, #80]	@ (8007820 <TIM_OC5_SetConfig+0xd0>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d109      	bne.n	80077e6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	021b      	lsls	r3, r3, #8
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	621a      	str	r2, [r3, #32]
}
 8007800:	bf00      	nop
 8007802:	371c      	adds	r7, #28
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	40012c00 	.word	0x40012c00
 8007810:	40013400 	.word	0x40013400
 8007814:	40014000 	.word	0x40014000
 8007818:	40014400 	.word	0x40014400
 800781c:	40014800 	.word	0x40014800
 8007820:	40015000 	.word	0x40015000

08007824 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800784a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	021b      	lsls	r3, r3, #8
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	4313      	orrs	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800786a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	051b      	lsls	r3, r3, #20
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a1a      	ldr	r2, [pc, #104]	@ (80078e4 <TIM_OC6_SetConfig+0xc0>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d013      	beq.n	80078a8 <TIM_OC6_SetConfig+0x84>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a19      	ldr	r2, [pc, #100]	@ (80078e8 <TIM_OC6_SetConfig+0xc4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d00f      	beq.n	80078a8 <TIM_OC6_SetConfig+0x84>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a18      	ldr	r2, [pc, #96]	@ (80078ec <TIM_OC6_SetConfig+0xc8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00b      	beq.n	80078a8 <TIM_OC6_SetConfig+0x84>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a17      	ldr	r2, [pc, #92]	@ (80078f0 <TIM_OC6_SetConfig+0xcc>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d007      	beq.n	80078a8 <TIM_OC6_SetConfig+0x84>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a16      	ldr	r2, [pc, #88]	@ (80078f4 <TIM_OC6_SetConfig+0xd0>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d003      	beq.n	80078a8 <TIM_OC6_SetConfig+0x84>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a15      	ldr	r2, [pc, #84]	@ (80078f8 <TIM_OC6_SetConfig+0xd4>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d109      	bne.n	80078bc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	029b      	lsls	r3, r3, #10
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	621a      	str	r2, [r3, #32]
}
 80078d6:	bf00      	nop
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40012c00 	.word	0x40012c00
 80078e8:	40013400 	.word	0x40013400
 80078ec:	40014000 	.word	0x40014000
 80078f0:	40014400 	.word	0x40014400
 80078f4:	40014800 	.word	0x40014800
 80078f8:	40015000 	.word	0x40015000

080078fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	f023 0201 	bic.w	r2, r3, #1
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4313      	orrs	r3, r2
 8007930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f023 030a 	bic.w	r3, r3, #10
 8007938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4313      	orrs	r3, r2
 8007940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	621a      	str	r2, [r3, #32]
}
 800794e:	bf00      	nop
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800795a:	b480      	push	{r7}
 800795c:	b087      	sub	sp, #28
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	f023 0210 	bic.w	r2, r3, #16
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007984:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	031b      	lsls	r3, r3, #12
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4313      	orrs	r3, r2
 800798e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007996:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	011b      	lsls	r3, r3, #4
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	4313      	orrs	r3, r2
 80079a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	621a      	str	r2, [r3, #32]
}
 80079ae:	bf00      	nop
 80079b0:	371c      	adds	r7, #28
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80079d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	f043 0307 	orr.w	r3, r3, #7
 80079e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	609a      	str	r2, [r3, #8]
}
 80079e8:	bf00      	nop
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	021a      	lsls	r2, r3, #8
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	431a      	orrs	r2, r3
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	609a      	str	r2, [r3, #8]
}
 8007a28:	bf00      	nop
 8007a2a:	371c      	adds	r7, #28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f003 031f 	and.w	r3, r3, #31
 8007a46:	2201      	movs	r2, #1
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6a1a      	ldr	r2, [r3, #32]
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	43db      	mvns	r3, r3
 8007a56:	401a      	ands	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a1a      	ldr	r2, [r3, #32]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f003 031f 	and.w	r3, r3, #31
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	fa01 f303 	lsl.w	r3, r1, r3
 8007a6c:	431a      	orrs	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	621a      	str	r2, [r3, #32]
}
 8007a72:	bf00      	nop
 8007a74:	371c      	adds	r7, #28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
	...

08007a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d101      	bne.n	8007a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e074      	b.n	8007b82 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a34      	ldr	r2, [pc, #208]	@ (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d009      	beq.n	8007ad6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a33      	ldr	r2, [pc, #204]	@ (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d004      	beq.n	8007ad6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a31      	ldr	r2, [pc, #196]	@ (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d108      	bne.n	8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007adc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a21      	ldr	r2, [pc, #132]	@ (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d022      	beq.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b18:	d01d      	beq.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d018      	beq.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a1d      	ldr	r2, [pc, #116]	@ (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d013      	beq.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a1c      	ldr	r2, [pc, #112]	@ (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d00e      	beq.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a15      	ldr	r2, [pc, #84]	@ (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d009      	beq.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a18      	ldr	r2, [pc, #96]	@ (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d004      	beq.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a11      	ldr	r2, [pc, #68]	@ (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d10c      	bne.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	40012c00 	.word	0x40012c00
 8007b94:	40013400 	.word	0x40013400
 8007b98:	40015000 	.word	0x40015000
 8007b9c:	40000400 	.word	0x40000400
 8007ba0:	40000800 	.word	0x40000800
 8007ba4:	40000c00 	.word	0x40000c00
 8007ba8:	40014000 	.word	0x40014000

08007bac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d101      	bne.n	8007bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	e078      	b.n	8007cba <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	041b      	lsls	r3, r3, #16
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a1c      	ldr	r2, [pc, #112]	@ (8007cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d009      	beq.n	8007c6e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8007ccc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d004      	beq.n	8007c6e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a19      	ldr	r2, [pc, #100]	@ (8007cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d11c      	bne.n	8007ca8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c78:	051b      	lsls	r3, r3, #20
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40012c00 	.word	0x40012c00
 8007ccc:	40013400 	.word	0x40013400
 8007cd0:	40015000 	.word	0x40015000

08007cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e042      	b.n	8007df8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d106      	bne.n	8007d8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7fa fc89 	bl	800269c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2224      	movs	r2, #36	@ 0x24
 8007d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0201 	bic.w	r2, r2, #1
 8007da0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fb24 	bl	80083f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f825 	bl	8007e00 <UART_SetConfig>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d101      	bne.n	8007dc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e01b      	b.n	8007df8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007dce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689a      	ldr	r2, [r3, #8]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0201 	orr.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fba3 	bl	800853c <UART_CheckIdleState>
 8007df6:	4603      	mov	r3, r0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e04:	b08c      	sub	sp, #48	@ 0x30
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	4baa      	ldr	r3, [pc, #680]	@ (80080d8 <UART_SetConfig+0x2d8>)
 8007e30:	4013      	ands	r3, r2
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	6812      	ldr	r2, [r2, #0]
 8007e36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e38:	430b      	orrs	r3, r1
 8007e3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a9f      	ldr	r2, [pc, #636]	@ (80080dc <UART_SetConfig+0x2dc>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d004      	beq.n	8007e6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007e76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	6812      	ldr	r2, [r2, #0]
 8007e7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e80:	430b      	orrs	r3, r1
 8007e82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e8a:	f023 010f 	bic.w	r1, r3, #15
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a90      	ldr	r2, [pc, #576]	@ (80080e0 <UART_SetConfig+0x2e0>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d125      	bne.n	8007ef0 <UART_SetConfig+0xf0>
 8007ea4:	4b8f      	ldr	r3, [pc, #572]	@ (80080e4 <UART_SetConfig+0x2e4>)
 8007ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eaa:	f003 0303 	and.w	r3, r3, #3
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d81a      	bhi.n	8007ee8 <UART_SetConfig+0xe8>
 8007eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb8 <UART_SetConfig+0xb8>)
 8007eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb8:	08007ec9 	.word	0x08007ec9
 8007ebc:	08007ed9 	.word	0x08007ed9
 8007ec0:	08007ed1 	.word	0x08007ed1
 8007ec4:	08007ee1 	.word	0x08007ee1
 8007ec8:	2301      	movs	r3, #1
 8007eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ece:	e116      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ed6:	e112      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007ed8:	2304      	movs	r3, #4
 8007eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ede:	e10e      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007ee0:	2308      	movs	r3, #8
 8007ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ee6:	e10a      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007ee8:	2310      	movs	r3, #16
 8007eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eee:	e106      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a7c      	ldr	r2, [pc, #496]	@ (80080e8 <UART_SetConfig+0x2e8>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d138      	bne.n	8007f6c <UART_SetConfig+0x16c>
 8007efa:	4b7a      	ldr	r3, [pc, #488]	@ (80080e4 <UART_SetConfig+0x2e4>)
 8007efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f00:	f003 030c 	and.w	r3, r3, #12
 8007f04:	2b0c      	cmp	r3, #12
 8007f06:	d82d      	bhi.n	8007f64 <UART_SetConfig+0x164>
 8007f08:	a201      	add	r2, pc, #4	@ (adr r2, 8007f10 <UART_SetConfig+0x110>)
 8007f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0e:	bf00      	nop
 8007f10:	08007f45 	.word	0x08007f45
 8007f14:	08007f65 	.word	0x08007f65
 8007f18:	08007f65 	.word	0x08007f65
 8007f1c:	08007f65 	.word	0x08007f65
 8007f20:	08007f55 	.word	0x08007f55
 8007f24:	08007f65 	.word	0x08007f65
 8007f28:	08007f65 	.word	0x08007f65
 8007f2c:	08007f65 	.word	0x08007f65
 8007f30:	08007f4d 	.word	0x08007f4d
 8007f34:	08007f65 	.word	0x08007f65
 8007f38:	08007f65 	.word	0x08007f65
 8007f3c:	08007f65 	.word	0x08007f65
 8007f40:	08007f5d 	.word	0x08007f5d
 8007f44:	2300      	movs	r3, #0
 8007f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f4a:	e0d8      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f52:	e0d4      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007f54:	2304      	movs	r3, #4
 8007f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f5a:	e0d0      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007f5c:	2308      	movs	r3, #8
 8007f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f62:	e0cc      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007f64:	2310      	movs	r3, #16
 8007f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f6a:	e0c8      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a5e      	ldr	r2, [pc, #376]	@ (80080ec <UART_SetConfig+0x2ec>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d125      	bne.n	8007fc2 <UART_SetConfig+0x1c2>
 8007f76:	4b5b      	ldr	r3, [pc, #364]	@ (80080e4 <UART_SetConfig+0x2e4>)
 8007f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f80:	2b30      	cmp	r3, #48	@ 0x30
 8007f82:	d016      	beq.n	8007fb2 <UART_SetConfig+0x1b2>
 8007f84:	2b30      	cmp	r3, #48	@ 0x30
 8007f86:	d818      	bhi.n	8007fba <UART_SetConfig+0x1ba>
 8007f88:	2b20      	cmp	r3, #32
 8007f8a:	d00a      	beq.n	8007fa2 <UART_SetConfig+0x1a2>
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d814      	bhi.n	8007fba <UART_SetConfig+0x1ba>
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <UART_SetConfig+0x19a>
 8007f94:	2b10      	cmp	r3, #16
 8007f96:	d008      	beq.n	8007faa <UART_SetConfig+0x1aa>
 8007f98:	e00f      	b.n	8007fba <UART_SetConfig+0x1ba>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fa0:	e0ad      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fa8:	e0a9      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007faa:	2304      	movs	r3, #4
 8007fac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fb0:	e0a5      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007fb2:	2308      	movs	r3, #8
 8007fb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fb8:	e0a1      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007fba:	2310      	movs	r3, #16
 8007fbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fc0:	e09d      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a4a      	ldr	r2, [pc, #296]	@ (80080f0 <UART_SetConfig+0x2f0>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d125      	bne.n	8008018 <UART_SetConfig+0x218>
 8007fcc:	4b45      	ldr	r3, [pc, #276]	@ (80080e4 <UART_SetConfig+0x2e4>)
 8007fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007fd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fd8:	d016      	beq.n	8008008 <UART_SetConfig+0x208>
 8007fda:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fdc:	d818      	bhi.n	8008010 <UART_SetConfig+0x210>
 8007fde:	2b80      	cmp	r3, #128	@ 0x80
 8007fe0:	d00a      	beq.n	8007ff8 <UART_SetConfig+0x1f8>
 8007fe2:	2b80      	cmp	r3, #128	@ 0x80
 8007fe4:	d814      	bhi.n	8008010 <UART_SetConfig+0x210>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <UART_SetConfig+0x1f0>
 8007fea:	2b40      	cmp	r3, #64	@ 0x40
 8007fec:	d008      	beq.n	8008000 <UART_SetConfig+0x200>
 8007fee:	e00f      	b.n	8008010 <UART_SetConfig+0x210>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ff6:	e082      	b.n	80080fe <UART_SetConfig+0x2fe>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ffe:	e07e      	b.n	80080fe <UART_SetConfig+0x2fe>
 8008000:	2304      	movs	r3, #4
 8008002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008006:	e07a      	b.n	80080fe <UART_SetConfig+0x2fe>
 8008008:	2308      	movs	r3, #8
 800800a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800e:	e076      	b.n	80080fe <UART_SetConfig+0x2fe>
 8008010:	2310      	movs	r3, #16
 8008012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008016:	e072      	b.n	80080fe <UART_SetConfig+0x2fe>
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a35      	ldr	r2, [pc, #212]	@ (80080f4 <UART_SetConfig+0x2f4>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d12a      	bne.n	8008078 <UART_SetConfig+0x278>
 8008022:	4b30      	ldr	r3, [pc, #192]	@ (80080e4 <UART_SetConfig+0x2e4>)
 8008024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008028:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800802c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008030:	d01a      	beq.n	8008068 <UART_SetConfig+0x268>
 8008032:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008036:	d81b      	bhi.n	8008070 <UART_SetConfig+0x270>
 8008038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800803c:	d00c      	beq.n	8008058 <UART_SetConfig+0x258>
 800803e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008042:	d815      	bhi.n	8008070 <UART_SetConfig+0x270>
 8008044:	2b00      	cmp	r3, #0
 8008046:	d003      	beq.n	8008050 <UART_SetConfig+0x250>
 8008048:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800804c:	d008      	beq.n	8008060 <UART_SetConfig+0x260>
 800804e:	e00f      	b.n	8008070 <UART_SetConfig+0x270>
 8008050:	2300      	movs	r3, #0
 8008052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008056:	e052      	b.n	80080fe <UART_SetConfig+0x2fe>
 8008058:	2302      	movs	r3, #2
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800805e:	e04e      	b.n	80080fe <UART_SetConfig+0x2fe>
 8008060:	2304      	movs	r3, #4
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008066:	e04a      	b.n	80080fe <UART_SetConfig+0x2fe>
 8008068:	2308      	movs	r3, #8
 800806a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800806e:	e046      	b.n	80080fe <UART_SetConfig+0x2fe>
 8008070:	2310      	movs	r3, #16
 8008072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008076:	e042      	b.n	80080fe <UART_SetConfig+0x2fe>
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a17      	ldr	r2, [pc, #92]	@ (80080dc <UART_SetConfig+0x2dc>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d13a      	bne.n	80080f8 <UART_SetConfig+0x2f8>
 8008082:	4b18      	ldr	r3, [pc, #96]	@ (80080e4 <UART_SetConfig+0x2e4>)
 8008084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008088:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800808c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008090:	d01a      	beq.n	80080c8 <UART_SetConfig+0x2c8>
 8008092:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008096:	d81b      	bhi.n	80080d0 <UART_SetConfig+0x2d0>
 8008098:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800809c:	d00c      	beq.n	80080b8 <UART_SetConfig+0x2b8>
 800809e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080a2:	d815      	bhi.n	80080d0 <UART_SetConfig+0x2d0>
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <UART_SetConfig+0x2b0>
 80080a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080ac:	d008      	beq.n	80080c0 <UART_SetConfig+0x2c0>
 80080ae:	e00f      	b.n	80080d0 <UART_SetConfig+0x2d0>
 80080b0:	2300      	movs	r3, #0
 80080b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080b6:	e022      	b.n	80080fe <UART_SetConfig+0x2fe>
 80080b8:	2302      	movs	r3, #2
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080be:	e01e      	b.n	80080fe <UART_SetConfig+0x2fe>
 80080c0:	2304      	movs	r3, #4
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c6:	e01a      	b.n	80080fe <UART_SetConfig+0x2fe>
 80080c8:	2308      	movs	r3, #8
 80080ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ce:	e016      	b.n	80080fe <UART_SetConfig+0x2fe>
 80080d0:	2310      	movs	r3, #16
 80080d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080d6:	e012      	b.n	80080fe <UART_SetConfig+0x2fe>
 80080d8:	cfff69f3 	.word	0xcfff69f3
 80080dc:	40008000 	.word	0x40008000
 80080e0:	40013800 	.word	0x40013800
 80080e4:	40021000 	.word	0x40021000
 80080e8:	40004400 	.word	0x40004400
 80080ec:	40004800 	.word	0x40004800
 80080f0:	40004c00 	.word	0x40004c00
 80080f4:	40005000 	.word	0x40005000
 80080f8:	2310      	movs	r3, #16
 80080fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4aae      	ldr	r2, [pc, #696]	@ (80083bc <UART_SetConfig+0x5bc>)
 8008104:	4293      	cmp	r3, r2
 8008106:	f040 8097 	bne.w	8008238 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800810a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800810e:	2b08      	cmp	r3, #8
 8008110:	d823      	bhi.n	800815a <UART_SetConfig+0x35a>
 8008112:	a201      	add	r2, pc, #4	@ (adr r2, 8008118 <UART_SetConfig+0x318>)
 8008114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008118:	0800813d 	.word	0x0800813d
 800811c:	0800815b 	.word	0x0800815b
 8008120:	08008145 	.word	0x08008145
 8008124:	0800815b 	.word	0x0800815b
 8008128:	0800814b 	.word	0x0800814b
 800812c:	0800815b 	.word	0x0800815b
 8008130:	0800815b 	.word	0x0800815b
 8008134:	0800815b 	.word	0x0800815b
 8008138:	08008153 	.word	0x08008153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800813c:	f7fd fdb6 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 8008140:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008142:	e010      	b.n	8008166 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008144:	4b9e      	ldr	r3, [pc, #632]	@ (80083c0 <UART_SetConfig+0x5c0>)
 8008146:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008148:	e00d      	b.n	8008166 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800814a:	f7fd fd41 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 800814e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008150:	e009      	b.n	8008166 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008156:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008158:	e005      	b.n	8008166 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008164:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 8130 	beq.w	80083ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008172:	4a94      	ldr	r2, [pc, #592]	@ (80083c4 <UART_SetConfig+0x5c4>)
 8008174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008178:	461a      	mov	r2, r3
 800817a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008180:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	4613      	mov	r3, r2
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	4413      	add	r3, r2
 800818c:	69ba      	ldr	r2, [r7, #24]
 800818e:	429a      	cmp	r2, r3
 8008190:	d305      	bcc.n	800819e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	429a      	cmp	r2, r3
 800819c:	d903      	bls.n	80081a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081a4:	e113      	b.n	80083ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a8:	2200      	movs	r2, #0
 80081aa:	60bb      	str	r3, [r7, #8]
 80081ac:	60fa      	str	r2, [r7, #12]
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b2:	4a84      	ldr	r2, [pc, #528]	@ (80083c4 <UART_SetConfig+0x5c4>)
 80081b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	2200      	movs	r2, #0
 80081bc:	603b      	str	r3, [r7, #0]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081c8:	f7f8 fd14 	bl	8000bf4 <__aeabi_uldivmod>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4610      	mov	r0, r2
 80081d2:	4619      	mov	r1, r3
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	f04f 0300 	mov.w	r3, #0
 80081dc:	020b      	lsls	r3, r1, #8
 80081de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081e2:	0202      	lsls	r2, r0, #8
 80081e4:	6979      	ldr	r1, [r7, #20]
 80081e6:	6849      	ldr	r1, [r1, #4]
 80081e8:	0849      	lsrs	r1, r1, #1
 80081ea:	2000      	movs	r0, #0
 80081ec:	460c      	mov	r4, r1
 80081ee:	4605      	mov	r5, r0
 80081f0:	eb12 0804 	adds.w	r8, r2, r4
 80081f4:	eb43 0905 	adc.w	r9, r3, r5
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	469a      	mov	sl, r3
 8008200:	4693      	mov	fp, r2
 8008202:	4652      	mov	r2, sl
 8008204:	465b      	mov	r3, fp
 8008206:	4640      	mov	r0, r8
 8008208:	4649      	mov	r1, r9
 800820a:	f7f8 fcf3 	bl	8000bf4 <__aeabi_uldivmod>
 800820e:	4602      	mov	r2, r0
 8008210:	460b      	mov	r3, r1
 8008212:	4613      	mov	r3, r2
 8008214:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800821c:	d308      	bcc.n	8008230 <UART_SetConfig+0x430>
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008224:	d204      	bcs.n	8008230 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6a3a      	ldr	r2, [r7, #32]
 800822c:	60da      	str	r2, [r3, #12]
 800822e:	e0ce      	b.n	80083ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008236:	e0ca      	b.n	80083ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008240:	d166      	bne.n	8008310 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008242:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008246:	2b08      	cmp	r3, #8
 8008248:	d827      	bhi.n	800829a <UART_SetConfig+0x49a>
 800824a:	a201      	add	r2, pc, #4	@ (adr r2, 8008250 <UART_SetConfig+0x450>)
 800824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008250:	08008275 	.word	0x08008275
 8008254:	0800827d 	.word	0x0800827d
 8008258:	08008285 	.word	0x08008285
 800825c:	0800829b 	.word	0x0800829b
 8008260:	0800828b 	.word	0x0800828b
 8008264:	0800829b 	.word	0x0800829b
 8008268:	0800829b 	.word	0x0800829b
 800826c:	0800829b 	.word	0x0800829b
 8008270:	08008293 	.word	0x08008293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008274:	f7fd fd1a 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 8008278:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800827a:	e014      	b.n	80082a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800827c:	f7fd fd2c 	bl	8005cd8 <HAL_RCC_GetPCLK2Freq>
 8008280:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008282:	e010      	b.n	80082a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008284:	4b4e      	ldr	r3, [pc, #312]	@ (80083c0 <UART_SetConfig+0x5c0>)
 8008286:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008288:	e00d      	b.n	80082a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800828a:	f7fd fca1 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 800828e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008290:	e009      	b.n	80082a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008296:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008298:	e005      	b.n	80082a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 8090 	beq.w	80083ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b2:	4a44      	ldr	r2, [pc, #272]	@ (80083c4 <UART_SetConfig+0x5c4>)
 80082b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082b8:	461a      	mov	r2, r3
 80082ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80082c0:	005a      	lsls	r2, r3, #1
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	085b      	lsrs	r3, r3, #1
 80082c8:	441a      	add	r2, r3
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082d4:	6a3b      	ldr	r3, [r7, #32]
 80082d6:	2b0f      	cmp	r3, #15
 80082d8:	d916      	bls.n	8008308 <UART_SetConfig+0x508>
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082e0:	d212      	bcs.n	8008308 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	f023 030f 	bic.w	r3, r3, #15
 80082ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	085b      	lsrs	r3, r3, #1
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	f003 0307 	and.w	r3, r3, #7
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	8bfb      	ldrh	r3, [r7, #30]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	8bfa      	ldrh	r2, [r7, #30]
 8008304:	60da      	str	r2, [r3, #12]
 8008306:	e062      	b.n	80083ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800830e:	e05e      	b.n	80083ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008310:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008314:	2b08      	cmp	r3, #8
 8008316:	d828      	bhi.n	800836a <UART_SetConfig+0x56a>
 8008318:	a201      	add	r2, pc, #4	@ (adr r2, 8008320 <UART_SetConfig+0x520>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	08008345 	.word	0x08008345
 8008324:	0800834d 	.word	0x0800834d
 8008328:	08008355 	.word	0x08008355
 800832c:	0800836b 	.word	0x0800836b
 8008330:	0800835b 	.word	0x0800835b
 8008334:	0800836b 	.word	0x0800836b
 8008338:	0800836b 	.word	0x0800836b
 800833c:	0800836b 	.word	0x0800836b
 8008340:	08008363 	.word	0x08008363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008344:	f7fd fcb2 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 8008348:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800834a:	e014      	b.n	8008376 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800834c:	f7fd fcc4 	bl	8005cd8 <HAL_RCC_GetPCLK2Freq>
 8008350:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008352:	e010      	b.n	8008376 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008354:	4b1a      	ldr	r3, [pc, #104]	@ (80083c0 <UART_SetConfig+0x5c0>)
 8008356:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008358:	e00d      	b.n	8008376 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800835a:	f7fd fc39 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 800835e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008360:	e009      	b.n	8008376 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008366:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008368:	e005      	b.n	8008376 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008374:	bf00      	nop
    }

    if (pclk != 0U)
 8008376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008378:	2b00      	cmp	r3, #0
 800837a:	d028      	beq.n	80083ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008380:	4a10      	ldr	r2, [pc, #64]	@ (80083c4 <UART_SetConfig+0x5c4>)
 8008382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008386:	461a      	mov	r2, r3
 8008388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838a:	fbb3 f2f2 	udiv	r2, r3, r2
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	085b      	lsrs	r3, r3, #1
 8008394:	441a      	add	r2, r3
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	fbb2 f3f3 	udiv	r3, r2, r3
 800839e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	2b0f      	cmp	r3, #15
 80083a4:	d910      	bls.n	80083c8 <UART_SetConfig+0x5c8>
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083ac:	d20c      	bcs.n	80083c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	60da      	str	r2, [r3, #12]
 80083b8:	e009      	b.n	80083ce <UART_SetConfig+0x5ce>
 80083ba:	bf00      	nop
 80083bc:	40008000 	.word	0x40008000
 80083c0:	00f42400 	.word	0x00f42400
 80083c4:	08008ac4 	.word	0x08008ac4
      }
      else
      {
        ret = HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2201      	movs	r2, #1
 80083da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2200      	movs	r2, #0
 80083e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2200      	movs	r2, #0
 80083e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80083ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3730      	adds	r7, #48	@ 0x30
 80083f2:	46bd      	mov	sp, r7
 80083f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080083f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846a:	f003 0304 	and.w	r3, r3, #4
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848c:	f003 0310 	and.w	r3, r3, #16
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ae:	f003 0320 	and.w	r3, r3, #32
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00a      	beq.n	80084cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01a      	beq.n	800850e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084f6:	d10a      	bne.n	800850e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	430a      	orrs	r2, r1
 800852e:	605a      	str	r2, [r3, #4]
  }
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b098      	sub	sp, #96	@ 0x60
 8008540:	af02      	add	r7, sp, #8
 8008542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800854c:	f7fa fac4 	bl	8002ad8 <HAL_GetTick>
 8008550:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0308 	and.w	r3, r3, #8
 800855c:	2b08      	cmp	r3, #8
 800855e:	d12f      	bne.n	80085c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008560:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008568:	2200      	movs	r2, #0
 800856a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f88e 	bl	8008690 <UART_WaitOnFlagUntilTimeout>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d022      	beq.n	80085c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800858a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800858e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	461a      	mov	r2, r3
 8008596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008598:	647b      	str	r3, [r7, #68]	@ 0x44
 800859a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800859e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e6      	bne.n	800857a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e063      	b.n	8008688 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0304 	and.w	r3, r3, #4
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	d149      	bne.n	8008662 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085d6:	2200      	movs	r2, #0
 80085d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f857 	bl	8008690 <UART_WaitOnFlagUntilTimeout>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d03c      	beq.n	8008662 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	623b      	str	r3, [r7, #32]
   return(result);
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	461a      	mov	r2, r3
 8008604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008606:	633b      	str	r3, [r7, #48]	@ 0x30
 8008608:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800860c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e6      	bne.n	80085e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3308      	adds	r3, #8
 8008620:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	60fb      	str	r3, [r7, #12]
   return(result);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f023 0301 	bic.w	r3, r3, #1
 8008630:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3308      	adds	r3, #8
 8008638:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800863a:	61fa      	str	r2, [r7, #28]
 800863c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	69b9      	ldr	r1, [r7, #24]
 8008640:	69fa      	ldr	r2, [r7, #28]
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	617b      	str	r3, [r7, #20]
   return(result);
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e5      	bne.n	800861a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2220      	movs	r2, #32
 8008652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e012      	b.n	8008688 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2220      	movs	r2, #32
 8008666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2220      	movs	r2, #32
 800866e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3758      	adds	r7, #88	@ 0x58
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	4613      	mov	r3, r2
 800869e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086a0:	e04f      	b.n	8008742 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a8:	d04b      	beq.n	8008742 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086aa:	f7fa fa15 	bl	8002ad8 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d302      	bcc.n	80086c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e04e      	b.n	8008762 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d037      	beq.n	8008742 <UART_WaitOnFlagUntilTimeout+0xb2>
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2b80      	cmp	r3, #128	@ 0x80
 80086d6:	d034      	beq.n	8008742 <UART_WaitOnFlagUntilTimeout+0xb2>
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b40      	cmp	r3, #64	@ 0x40
 80086dc:	d031      	beq.n	8008742 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	f003 0308 	and.w	r3, r3, #8
 80086e8:	2b08      	cmp	r3, #8
 80086ea:	d110      	bne.n	800870e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2208      	movs	r2, #8
 80086f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 f838 	bl	800876a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2208      	movs	r2, #8
 80086fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e029      	b.n	8008762 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800871c:	d111      	bne.n	8008742 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 f81e 	bl	800876a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2220      	movs	r2, #32
 8008732:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e00f      	b.n	8008762 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69da      	ldr	r2, [r3, #28]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	4013      	ands	r3, r2
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	429a      	cmp	r2, r3
 8008750:	bf0c      	ite	eq
 8008752:	2301      	moveq	r3, #1
 8008754:	2300      	movne	r3, #0
 8008756:	b2db      	uxtb	r3, r3
 8008758:	461a      	mov	r2, r3
 800875a:	79fb      	ldrb	r3, [r7, #7]
 800875c:	429a      	cmp	r2, r3
 800875e:	d0a0      	beq.n	80086a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800876a:	b480      	push	{r7}
 800876c:	b095      	sub	sp, #84	@ 0x54
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800877a:	e853 3f00 	ldrex	r3, [r3]
 800877e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	461a      	mov	r2, r3
 800878e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008790:	643b      	str	r3, [r7, #64]	@ 0x40
 8008792:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008794:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008796:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008798:	e841 2300 	strex	r3, r2, [r1]
 800879c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800879e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e6      	bne.n	8008772 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3308      	adds	r3, #8
 80087aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3308      	adds	r3, #8
 80087c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e3      	bne.n	80087a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d118      	bne.n	8008816 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	e853 3f00 	ldrex	r3, [r3]
 80087f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f023 0310 	bic.w	r3, r3, #16
 80087f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008802:	61bb      	str	r3, [r7, #24]
 8008804:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008806:	6979      	ldr	r1, [r7, #20]
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	613b      	str	r3, [r7, #16]
   return(result);
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1e6      	bne.n	80087e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2220      	movs	r2, #32
 800881a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800882a:	bf00      	nop
 800882c:	3754      	adds	r7, #84	@ 0x54
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008836:	b480      	push	{r7}
 8008838:	b085      	sub	sp, #20
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008844:	2b01      	cmp	r3, #1
 8008846:	d101      	bne.n	800884c <HAL_UARTEx_DisableFifoMode+0x16>
 8008848:	2302      	movs	r3, #2
 800884a:	e027      	b.n	800889c <HAL_UARTEx_DisableFifoMode+0x66>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2224      	movs	r2, #36	@ 0x24
 8008858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0201 	bic.w	r2, r2, #1
 8008872:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800887a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2220      	movs	r2, #32
 800888e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d101      	bne.n	80088c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088bc:	2302      	movs	r3, #2
 80088be:	e02d      	b.n	800891c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2224      	movs	r2, #36	@ 0x24
 80088cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0201 	bic.w	r2, r2, #1
 80088e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f84f 	bl	80089a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2220      	movs	r2, #32
 800890e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008934:	2b01      	cmp	r3, #1
 8008936:	d101      	bne.n	800893c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008938:	2302      	movs	r3, #2
 800893a:	e02d      	b.n	8008998 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2224      	movs	r2, #36	@ 0x24
 8008948:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f022 0201 	bic.w	r2, r2, #1
 8008962:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	430a      	orrs	r2, r1
 8008976:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f811 	bl	80089a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2220      	movs	r2, #32
 800898a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d108      	bne.n	80089c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089c0:	e031      	b.n	8008a26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089c2:	2308      	movs	r3, #8
 80089c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089c6:	2308      	movs	r3, #8
 80089c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	0e5b      	lsrs	r3, r3, #25
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	f003 0307 	and.w	r3, r3, #7
 80089d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	0f5b      	lsrs	r3, r3, #29
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	f003 0307 	and.w	r3, r3, #7
 80089e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	7b3a      	ldrb	r2, [r7, #12]
 80089ee:	4911      	ldr	r1, [pc, #68]	@ (8008a34 <UARTEx_SetNbDataToProcess+0x94>)
 80089f0:	5c8a      	ldrb	r2, [r1, r2]
 80089f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089f6:	7b3a      	ldrb	r2, [r7, #12]
 80089f8:	490f      	ldr	r1, [pc, #60]	@ (8008a38 <UARTEx_SetNbDataToProcess+0x98>)
 80089fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
 8008a0a:	7b7a      	ldrb	r2, [r7, #13]
 8008a0c:	4909      	ldr	r1, [pc, #36]	@ (8008a34 <UARTEx_SetNbDataToProcess+0x94>)
 8008a0e:	5c8a      	ldrb	r2, [r1, r2]
 8008a10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a14:	7b7a      	ldrb	r2, [r7, #13]
 8008a16:	4908      	ldr	r1, [pc, #32]	@ (8008a38 <UARTEx_SetNbDataToProcess+0x98>)
 8008a18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008a26:	bf00      	nop
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	08008adc 	.word	0x08008adc
 8008a38:	08008ae4 	.word	0x08008ae4

08008a3c <memset>:
 8008a3c:	4402      	add	r2, r0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d100      	bne.n	8008a46 <memset+0xa>
 8008a44:	4770      	bx	lr
 8008a46:	f803 1b01 	strb.w	r1, [r3], #1
 8008a4a:	e7f9      	b.n	8008a40 <memset+0x4>

08008a4c <__libc_init_array>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8008a84 <__libc_init_array+0x38>)
 8008a50:	4c0d      	ldr	r4, [pc, #52]	@ (8008a88 <__libc_init_array+0x3c>)
 8008a52:	1b64      	subs	r4, r4, r5
 8008a54:	10a4      	asrs	r4, r4, #2
 8008a56:	2600      	movs	r6, #0
 8008a58:	42a6      	cmp	r6, r4
 8008a5a:	d109      	bne.n	8008a70 <__libc_init_array+0x24>
 8008a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8008a8c <__libc_init_array+0x40>)
 8008a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8008a90 <__libc_init_array+0x44>)
 8008a60:	f000 f818 	bl	8008a94 <_init>
 8008a64:	1b64      	subs	r4, r4, r5
 8008a66:	10a4      	asrs	r4, r4, #2
 8008a68:	2600      	movs	r6, #0
 8008a6a:	42a6      	cmp	r6, r4
 8008a6c:	d105      	bne.n	8008a7a <__libc_init_array+0x2e>
 8008a6e:	bd70      	pop	{r4, r5, r6, pc}
 8008a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a74:	4798      	blx	r3
 8008a76:	3601      	adds	r6, #1
 8008a78:	e7ee      	b.n	8008a58 <__libc_init_array+0xc>
 8008a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a7e:	4798      	blx	r3
 8008a80:	3601      	adds	r6, #1
 8008a82:	e7f2      	b.n	8008a6a <__libc_init_array+0x1e>
 8008a84:	08008af4 	.word	0x08008af4
 8008a88:	08008af4 	.word	0x08008af4
 8008a8c:	08008af4 	.word	0x08008af4
 8008a90:	08008af8 	.word	0x08008af8

08008a94 <_init>:
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a96:	bf00      	nop
 8008a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a9a:	bc08      	pop	{r3}
 8008a9c:	469e      	mov	lr, r3
 8008a9e:	4770      	bx	lr

08008aa0 <_fini>:
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	bf00      	nop
 8008aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa6:	bc08      	pop	{r3}
 8008aa8:	469e      	mov	lr, r3
 8008aaa:	4770      	bx	lr


Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a78c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800a964  0800a964  0000b964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa08  0800aa08  0000c03c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa08  0800aa08  0000ba08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa10  0800aa10  0000c03c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa10  0800aa10  0000ba10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa14  0800aa14  0000ba14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  0800aa18  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e98  20000040  0800aa54  0000c040  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ed8  0800aa54  0000ced8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c03c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f683  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bed  00000000  00000000  0002b6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  0002f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d7  00000000  00000000  000309e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a259  00000000  00000000  00031bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e899  00000000  00000000  0005be10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011546b  00000000  00000000  0007a6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018fb14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063ec  00000000  00000000  0018fb58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00195f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000040 	.word	0x20000040
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a94c 	.word	0x0800a94c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000044 	.word	0x20000044
 8000214:	0800a94c 	.word	0x0800a94c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b96a 	b.w	8000ee0 <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d14e      	bne.n	8000cce <__udivmoddi4+0xaa>
 8000c30:	4694      	mov	ip, r2
 8000c32:	458c      	cmp	ip, r1
 8000c34:	4686      	mov	lr, r0
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	d962      	bls.n	8000d02 <__udivmoddi4+0xde>
 8000c3c:	b14a      	cbz	r2, 8000c52 <__udivmoddi4+0x2e>
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	4091      	lsls	r1, r2
 8000c44:	fa20 f303 	lsr.w	r3, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c56:	fa1f f68c 	uxth.w	r6, ip
 8000c5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c62:	fb07 1114 	mls	r1, r7, r4, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb04 f106 	mul.w	r1, r4, r6
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x64>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7a:	f080 8112 	bcs.w	8000ea2 <__udivmoddi4+0x27e>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 810f 	bls.w	8000ea2 <__udivmoddi4+0x27e>
 8000c84:	3c02      	subs	r4, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a59      	subs	r1, r3, r1
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c92:	fb07 1110 	mls	r1, r7, r0, r1
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f606 	mul.w	r6, r0, r6
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x94>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000caa:	f080 80fc 	bcs.w	8000ea6 <__udivmoddi4+0x282>
 8000cae:	429e      	cmp	r6, r3
 8000cb0:	f240 80f9 	bls.w	8000ea6 <__udivmoddi4+0x282>
 8000cb4:	4463      	add	r3, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa6>
 8000cc2:	40d3      	lsrs	r3, r2
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xba>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb4>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa6>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x150>
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xcc>
 8000cea:	4290      	cmp	r0, r2
 8000cec:	f0c0 80f0 	bcc.w	8000ed0 <__udivmoddi4+0x2ac>
 8000cf0:	1a86      	subs	r6, r0, r2
 8000cf2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	2d00      	cmp	r5, #0
 8000cfa:	d0e6      	beq.n	8000cca <__udivmoddi4+0xa6>
 8000cfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000d00:	e7e3      	b.n	8000cca <__udivmoddi4+0xa6>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x204>
 8000d08:	eba1 040c 	sub.w	r4, r1, ip
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa1f f78c 	uxth.w	r7, ip
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb07 f006 	mul.w	r0, r7, r6
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x11c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x11a>
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	f200 80cd 	bhi.w	8000ed8 <__udivmoddi4+0x2b4>
 8000d3e:	4626      	mov	r6, r4
 8000d40:	1a1c      	subs	r4, r3, r0
 8000d42:	fa1f f38e 	uxth.w	r3, lr
 8000d46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb00 f707 	mul.w	r7, r0, r7
 8000d56:	429f      	cmp	r7, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x148>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x146>
 8000d64:	429f      	cmp	r7, r3
 8000d66:	f200 80b0 	bhi.w	8000eca <__udivmoddi4+0x2a6>
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	1bdb      	subs	r3, r3, r7
 8000d6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x9c>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d84:	fa04 f301 	lsl.w	r3, r4, r1
 8000d88:	ea43 030c 	orr.w	r3, r3, ip
 8000d8c:	40f4      	lsrs	r4, r6
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	0c38      	lsrs	r0, r7, #16
 8000d94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d98:	fbb4 fef0 	udiv	lr, r4, r0
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	fb00 441e 	mls	r4, r0, lr, r4
 8000da4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da8:	fb0e f90c 	mul.w	r9, lr, ip
 8000dac:	45a1      	cmp	r9, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x1a6>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dba:	f080 8084 	bcs.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	f240 8081 	bls.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	eba4 0409 	sub.w	r4, r4, r9
 8000dce:	fa1f f983 	uxth.w	r9, r3
 8000dd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1d2>
 8000de6:	193c      	adds	r4, r7, r4
 8000de8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dec:	d267      	bcs.n	8000ebe <__udivmoddi4+0x29a>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d965      	bls.n	8000ebe <__udivmoddi4+0x29a>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfe:	eba4 040c 	sub.w	r4, r4, ip
 8000e02:	429c      	cmp	r4, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	469c      	mov	ip, r3
 8000e08:	d351      	bcc.n	8000eae <__udivmoddi4+0x28a>
 8000e0a:	d04e      	beq.n	8000eaa <__udivmoddi4+0x286>
 8000e0c:	b155      	cbz	r5, 8000e24 <__udivmoddi4+0x200>
 8000e0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e12:	eb64 040c 	sbc.w	r4, r4, ip
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	40cb      	lsrs	r3, r1
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	40cc      	lsrs	r4, r1
 8000e20:	e9c5 6400 	strd	r6, r4, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	e750      	b.n	8000cca <__udivmoddi4+0xa6>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa24 f303 	lsr.w	r3, r4, r3
 8000e38:	4094      	lsls	r4, r2
 8000e3a:	430c      	orrs	r4, r1
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e50:	0c23      	lsrs	r3, r4, #16
 8000e52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e56:	fb00 f107 	mul.w	r1, r0, r7
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x24c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e66:	d22c      	bcs.n	8000ec2 <__udivmoddi4+0x29e>
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d92a      	bls.n	8000ec2 <__udivmoddi4+0x29e>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e80:	fb01 f307 	mul.w	r3, r1, r7
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x276>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e90:	d213      	bcs.n	8000eba <__udivmoddi4+0x296>
 8000e92:	42a3      	cmp	r3, r4
 8000e94:	d911      	bls.n	8000eba <__udivmoddi4+0x296>
 8000e96:	3902      	subs	r1, #2
 8000e98:	4464      	add	r4, ip
 8000e9a:	1ae4      	subs	r4, r4, r3
 8000e9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea0:	e739      	b.n	8000d16 <__udivmoddi4+0xf2>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	e6f0      	b.n	8000c88 <__udivmoddi4+0x64>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e706      	b.n	8000cb8 <__udivmoddi4+0x94>
 8000eaa:	45c8      	cmp	r8, r9
 8000eac:	d2ae      	bcs.n	8000e0c <__udivmoddi4+0x1e8>
 8000eae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb6:	3801      	subs	r0, #1
 8000eb8:	e7a8      	b.n	8000e0c <__udivmoddi4+0x1e8>
 8000eba:	4631      	mov	r1, r6
 8000ebc:	e7ed      	b.n	8000e9a <__udivmoddi4+0x276>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e799      	b.n	8000df6 <__udivmoddi4+0x1d2>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e7d4      	b.n	8000e70 <__udivmoddi4+0x24c>
 8000ec6:	46d6      	mov	lr, sl
 8000ec8:	e77f      	b.n	8000dca <__udivmoddi4+0x1a6>
 8000eca:	4463      	add	r3, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e74d      	b.n	8000d6c <__udivmoddi4+0x148>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e70f      	b.n	8000cf8 <__udivmoddi4+0xd4>
 8000ed8:	3e02      	subs	r6, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	e730      	b.n	8000d40 <__udivmoddi4+0x11c>
 8000ede:	bf00      	nop

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <Gripper_Movement_Status>:
        strcpy(Vacuum, "Off");
        eff -> solenoid_command[0] = 0;
    }
}

void Gripper_Movement_Status(EFF* eff){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
    //Movement Forward
    if (registerFrame[0x03].U16 == 1){ // ใช้ == แทน =
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <Gripper_Movement_Status+0x54>)
 8000eee:	88db      	ldrh	r3, [r3, #6]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d10c      	bne.n	8000f0e <Gripper_Movement_Status+0x2a>
        strcpy(Gripper, "Forward");
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <Gripper_Movement_Status+0x58>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <Gripper_Movement_Status+0x5c>)
 8000ef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000efc:	e883 0003 	stmia.w	r3, {r0, r1}
        eff -> solenoid_command[1] = 1;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2201      	movs	r2, #1
 8000f04:	70da      	strb	r2, [r3, #3]
        eff -> solenoid_command[2] = 0;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	711a      	strb	r2, [r3, #4]
    else if (registerFrame[0x03].U16 == 0){ // ใช้ == แทน =
        strcpy(Gripper, "Backward");
        eff -> solenoid_command[1] = 0;
        eff -> solenoid_command[2] = 1;
    }
}
 8000f0c:	e00e      	b.n	8000f2c <Gripper_Movement_Status+0x48>
    else if (registerFrame[0x03].U16 == 0){ // ใช้ == แทน =
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <Gripper_Movement_Status+0x54>)
 8000f10:	88db      	ldrh	r3, [r3, #6]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10a      	bne.n	8000f2c <Gripper_Movement_Status+0x48>
        strcpy(Gripper, "Backward");
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <Gripper_Movement_Status+0x58>)
 8000f18:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <Gripper_Movement_Status+0x60>)
 8000f1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f1c:	c303      	stmia	r3!, {r0, r1}
 8000f1e:	701a      	strb	r2, [r3, #0]
        eff -> solenoid_command[1] = 0;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	70da      	strb	r2, [r3, #3]
        eff -> solenoid_command[2] = 1;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	711a      	strb	r2, [r3, #4]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	20000ba4 	.word	0x20000ba4
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	0800a968 	.word	0x0800a968
 8000f44:	0800a970 	.word	0x0800a970

08000f48 <Set_Home>:
		registerFrame[0x10].U16 = 8;
		state = registerFrame[0x10].U16;
	}
}

void Set_Home(){
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
	if(registerFrame[0x10].U16 == 2){
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <Set_Home+0x28>)
 8000f4e:	8c1b      	ldrh	r3, [r3, #32]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d108      	bne.n	8000f66 <Set_Home+0x1e>
		state = 2;
 8000f54:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <Set_Home+0x2c>)
 8000f56:	2202      	movs	r2, #2
 8000f58:	801a      	strh	r2, [r3, #0]
		strcpy(Home, "Homing...");
 8000f5a:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <Set_Home+0x30>)
 8000f5c:	4a07      	ldr	r2, [pc, #28]	@ (8000f7c <Set_Home+0x34>)
 8000f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f60:	c303      	stmia	r3!, {r0, r1}
 8000f62:	801a      	strh	r2, [r3, #0]
 8000f64:	e000      	b.n	8000f68 <Set_Home+0x20>
	}
	else{
		return;
 8000f66:	bf00      	nop
//	if (Jogginghome == 1){
//		registerFrame[0x01].U16 = 0;
//	}


}
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	20000ba4 	.word	0x20000ba4
 8000f74:	2000005c 	.word	0x2000005c
 8000f78:	20000014 	.word	0x20000014
 8000f7c:	0800a97c 	.word	0x0800a97c

08000f80 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000f84:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <modbus_1t5_Timeout+0x3c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <modbus_1t5_Timeout+0x3c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <modbus_1t5_Timeout+0x3c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <modbus_1t5_Timeout+0x3c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 0201 	orr.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000538 	.word	0x20000538

08000fc0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000fc8:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <modbus_3t5_Timeout+0x1c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	755a      	strb	r2, [r3, #21]

}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	20000538 	.word	0x20000538

08000fe0 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f008 fbbb 	bl	8009764 <HAL_UART_GetError>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b20      	cmp	r3, #32
 8000ff2:	d101      	bne.n	8000ff8 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000ff4:	f7ff ffc4 	bl	8000f80 <modbus_1t5_Timeout>

	}
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800100a:	4a25      	ldr	r2, [pc, #148]	@ (80010a0 <Modbus_init+0xa0>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001010:	4b23      	ldr	r3, [pc, #140]	@ (80010a0 <Modbus_init+0xa0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	4a21      	ldr	r2, [pc, #132]	@ (80010a4 <Modbus_init+0xa4>)
 800101e:	210e      	movs	r1, #14
 8001020:	4618      	mov	r0, r3
 8001022:	f006 fe63 	bl	8007cec <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2110      	movs	r1, #16
 800102c:	4618      	mov	r0, r3
 800102e:	f008 fb43 	bl	80096b8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	4618      	mov	r0, r3
 8001038:	f008 fb5a 	bl	80096f0 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	4a19      	ldr	r2, [pc, #100]	@ (80010a8 <Modbus_init+0xa8>)
 8001042:	2104      	movs	r1, #4
 8001044:	4618      	mov	r0, r3
 8001046:	f007 fea1 	bl	8008d8c <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <Modbus_init+0xa0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <Modbus_init+0xa0>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <Modbus_init+0xa0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 800105c:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001060:	4413      	add	r3, r2
 8001062:	3302      	adds	r3, #2
 8001064:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001068:	4619      	mov	r1, r3
 800106a:	f007 ff49 	bl	8008f00 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800106e:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <Modbus_init+0xa0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b01      	cmp	r3, #1
 800107c:	d10c      	bne.n	8001098 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <Modbus_init+0xa0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	4618      	mov	r0, r3
 8001086:	f005 fe03 	bl	8006c90 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800108a:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <Modbus_init+0xa0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f006 f85c 	bl	8007150 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000538 	.word	0x20000538
 80010a4:	08000fc1 	.word	0x08000fc1
 80010a8:	08000fe1 	.word	0x08000fe1

080010ac <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2232      	movs	r2, #50	@ 0x32
 80010ba:	4619      	mov	r1, r3
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f002 fcb1 	bl	8003a24 <HAL_ADC_Start_DMA>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <Update_adc>:

uint32_t Update_adc(ADC* adc){
 80010ca:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	uint64_t sum_adc = 0;
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e011      	b.n	800110a <Update_adc+0x40>
		sum_adc += adc -> adc_buffer[i];
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ee:	2200      	movs	r2, #0
 80010f0:	461c      	mov	r4, r3
 80010f2:	4615      	mov	r5, r2
 80010f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010f8:	eb12 0804 	adds.w	r8, r2, r4
 80010fc:	eb43 0905 	adc.w	r9, r3, r5
 8001100:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	3301      	adds	r3, #1
 8001108:	73fb      	strb	r3, [r7, #15]
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	2b31      	cmp	r3, #49	@ 0x31
 800110e:	d9ea      	bls.n	80010e6 <Update_adc+0x1c>
	}
	return adc -> adc_avg = sum_adc / 50;
 8001110:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001114:	f04f 0232 	mov.w	r2, #50	@ 0x32
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	f7ff fd6a 	bl	8000bf4 <__aeabi_uldivmod>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800113a <Update_actual_eff>:
 *      Author: naker
 */

#include "eff.h"

void Update_actual_eff(EFF* eff, u16u8_t* registerFrame[200], GPIO_TypeDef* GPIO_Pull, uint16_t GPIO_Pin_Pull, GPIO_TypeDef* GPIO_Push, uint16_t GPIO_Pin_Push){
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	807b      	strh	r3, [r7, #2]
	eff -> actual_status[0] = HAL_GPIO_ReadPin(GPIO_Pull, GPIO_Pin_Pull);
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	4619      	mov	r1, r3
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f004 fc53 	bl	80059f8 <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	701a      	strb	r2, [r3, #0]
	eff -> actual_status[1] = HAL_GPIO_ReadPin(GPIO_Push, GPIO_Pin_Push);
 800115a:	8bbb      	ldrh	r3, [r7, #28]
 800115c:	4619      	mov	r1, r3
 800115e:	69b8      	ldr	r0, [r7, #24]
 8001160:	f004 fc4a 	bl	80059f8 <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	705a      	strb	r2, [r3, #1]
	if(eff -> actual_status[0] && !eff -> actual_status[1]){
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d009      	beq.n	8001188 <Update_actual_eff+0x4e>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	785b      	ldrb	r3, [r3, #1]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d105      	bne.n	8001188 <Update_actual_eff+0x4e>
		// Pull reed switch on and Push reed switch off
		registerFrame[0x04] -> U16 = 1;
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	3310      	adds	r3, #16
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2201      	movs	r2, #1
 8001184:	801a      	strh	r2, [r3, #0]
 8001186:	e012      	b.n	80011ae <Update_actual_eff+0x74>
	}
	else if(!eff -> actual_status[0] && eff -> actual_status[1]){
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d109      	bne.n	80011a4 <Update_actual_eff+0x6a>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <Update_actual_eff+0x6a>
		// Pull reed switch off and Push reed switch on
		registerFrame[0x04] -> U16 = 2;
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	3310      	adds	r3, #16
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2202      	movs	r2, #2
 80011a0:	801a      	strh	r2, [r3, #0]
 80011a2:	e004      	b.n	80011ae <Update_actual_eff+0x74>
	}
	else{registerFrame[0x04] = 0;} // Pull reed switch off and Push reed switch off
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	3310      	adds	r3, #16
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011bc:	f001 ffc5 	bl	800314a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c0:	f000 f89e 	bl	8001300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c4:	f000 fbb8 	bl	8001938 <MX_GPIO_Init>
  MX_DMA_Init();
 80011c8:	f000 fb7c 	bl	80018c4 <MX_DMA_Init>
  MX_TIM1_Init();
 80011cc:	f000 f95a 	bl	8001484 <MX_TIM1_Init>
  MX_TIM3_Init();
 80011d0:	f000 fa08 	bl	80015e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011d4:	f000 fa54 	bl	8001680 <MX_TIM4_Init>
  MX_ADC1_Init();
 80011d8:	f000 f8dc 	bl	8001394 <MX_ADC1_Init>
  MX_TIM5_Init();
 80011dc:	f000 faa6 	bl	800172c <MX_TIM5_Init>
  MX_TIM16_Init();
 80011e0:	f000 faf2 	bl	80017c8 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80011e4:	f000 fb20 	bl	8001828 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Modbus setting
  hmodbus.huart = &huart2;
 80011e8:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <main+0xf0>)
 80011ea:	4a30      	ldr	r2, [pc, #192]	@ (80012ac <main+0xf4>)
 80011ec:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80011ee:	4b2e      	ldr	r3, [pc, #184]	@ (80012a8 <main+0xf0>)
 80011f0:	4a2f      	ldr	r2, [pc, #188]	@ (80012b0 <main+0xf8>)
 80011f2:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80011f4:	4b2c      	ldr	r3, [pc, #176]	@ (80012a8 <main+0xf0>)
 80011f6:	2215      	movs	r2, #21
 80011f8:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80011fa:	4b2b      	ldr	r3, [pc, #172]	@ (80012a8 <main+0xf0>)
 80011fc:	22c8      	movs	r2, #200	@ 0xc8
 80011fe:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001200:	492c      	ldr	r1, [pc, #176]	@ (80012b4 <main+0xfc>)
 8001202:	4829      	ldr	r0, [pc, #164]	@ (80012a8 <main+0xf0>)
 8001204:	f7ff fefc 	bl	8001000 <Modbus_init>
  registerFrame[0x00].U16 = 22881; // Set default heart beat to "Ya"
 8001208:	4b2a      	ldr	r3, [pc, #168]	@ (80012b4 <main+0xfc>)
 800120a:	f645 1261 	movw	r2, #22881	@ 0x5961
 800120e:	801a      	strh	r2, [r3, #0]
  //Update MODBUS timer
  HAL_TIM_Base_Start_IT(&htim5);
 8001210:	4829      	ldr	r0, [pc, #164]	@ (80012b8 <main+0x100>)
 8001212:	f005 fd3d 	bl	8006c90 <HAL_TIM_Base_Start_IT>

  //Update command timer
  HAL_TIM_Base_Start_IT(&htim3);
 8001216:	4829      	ldr	r0, [pc, #164]	@ (80012bc <main+0x104>)
 8001218:	f005 fd3a 	bl	8006c90 <HAL_TIM_Base_Start_IT>

  //PWM generator
  HAL_TIM_Base_Start(&htim1);
 800121c:	4828      	ldr	r0, [pc, #160]	@ (80012c0 <main+0x108>)
 800121e:	f005 fcc7 	bl	8006bb0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001222:	2100      	movs	r1, #0
 8001224:	4826      	ldr	r0, [pc, #152]	@ (80012c0 <main+0x108>)
 8001226:	f005 fe19 	bl	8006e5c <HAL_TIM_PWM_Start>

  //Encoder reader
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800122a:	213c      	movs	r1, #60	@ 0x3c
 800122c:	4825      	ldr	r0, [pc, #148]	@ (80012c4 <main+0x10c>)
 800122e:	f006 f8d1 	bl	80073d4 <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, 8192, 8000, 65536);
 8001232:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001236:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800123a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800123e:	4822      	ldr	r0, [pc, #136]	@ (80012c8 <main+0x110>)
 8001240:	f000 ff79 	bl	8002136 <QEI_init>

  //Current reader
  ADC_init(&hadc1, &current_sensor);
 8001244:	4921      	ldr	r1, [pc, #132]	@ (80012cc <main+0x114>)
 8001246:	4822      	ldr	r0, [pc, #136]	@ (80012d0 <main+0x118>)
 8001248:	f7ff ff30 	bl	80010ac <ADC_init>

  //Position PID
  PID_init(&p_pid, p_kp, p_ki, p_kd, 0.001);
 800124c:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <main+0x11c>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	4b21      	ldr	r3, [pc, #132]	@ (80012d8 <main+0x120>)
 8001254:	ed93 7a00 	vldr	s14, [r3]
 8001258:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <main+0x124>)
 800125a:	edd3 6a00 	vldr	s13, [r3]
 800125e:	eddf 1a20 	vldr	s3, [pc, #128]	@ 80012e0 <main+0x128>
 8001262:	eeb0 1a66 	vmov.f32	s2, s13
 8001266:	eef0 0a47 	vmov.f32	s1, s14
 800126a:	eeb0 0a67 	vmov.f32	s0, s15
 800126e:	481d      	ldr	r0, [pc, #116]	@ (80012e4 <main+0x12c>)
 8001270:	f000 fd5c 	bl	8001d2c <PID_init>
  PID_init(&v_pid, v_kp, v_ki, v_kd, 0.000125);
 8001274:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <main+0x130>)
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ec <main+0x134>)
 800127c:	ed93 7a00 	vldr	s14, [r3]
 8001280:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <main+0x138>)
 8001282:	edd3 6a00 	vldr	s13, [r3]
 8001286:	eddf 1a1b 	vldr	s3, [pc, #108]	@ 80012f4 <main+0x13c>
 800128a:	eeb0 1a66 	vmov.f32	s2, s13
 800128e:	eef0 0a47 	vmov.f32	s1, s14
 8001292:	eeb0 0a67 	vmov.f32	s0, s15
 8001296:	4818      	ldr	r0, [pc, #96]	@ (80012f8 <main+0x140>)
 8001298:	f000 fd48 	bl	8001d2c <PID_init>

  //Set point
  set_point = 0;
 800129c:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <main+0x144>)
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <main+0xec>
 80012a8:	20000060 	.word	0x20000060
 80012ac:	20000a04 	.word	0x20000a04
 80012b0:	20000938 	.word	0x20000938
 80012b4:	20000ba4 	.word	0x20000ba4
 80012b8:	2000086c 	.word	0x2000086c
 80012bc:	200006d4 	.word	0x200006d4
 80012c0:	20000608 	.word	0x20000608
 80012c4:	200007a0 	.word	0x200007a0
 80012c8:	20000e08 	.word	0x20000e08
 80012cc:	20000d3c 	.word	0x20000d3c
 80012d0:	2000053c 	.word	0x2000053c
 80012d4:	2000002c 	.word	0x2000002c
 80012d8:	20000ea8 	.word	0x20000ea8
 80012dc:	20000eac 	.word	0x20000eac
 80012e0:	3a83126f 	.word	0x3a83126f
 80012e4:	20000e90 	.word	0x20000e90
 80012e8:	20000028 	.word	0x20000028
 80012ec:	20000e80 	.word	0x20000e80
 80012f0:	20000e84 	.word	0x20000e84
 80012f4:	3903126f 	.word	0x3903126f
 80012f8:	20000e68 	.word	0x20000e68
 80012fc:	20000b98 	.word	0x20000b98

08001300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b094      	sub	sp, #80	@ 0x50
 8001304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001306:	f107 0318 	add.w	r3, r7, #24
 800130a:	2238      	movs	r2, #56	@ 0x38
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f009 faf0 	bl	800a8f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001322:	2000      	movs	r0, #0
 8001324:	f004 fbb0 	bl	8005a88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001328:	2301      	movs	r3, #1
 800132a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800132c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001330:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001332:	2302      	movs	r3, #2
 8001334:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001336:	2303      	movs	r3, #3
 8001338:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800133a:	2306      	movs	r3, #6
 800133c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800133e:	2355      	movs	r3, #85	@ 0x55
 8001340:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001342:	2302      	movs	r3, #2
 8001344:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001346:	2302      	movs	r3, #2
 8001348:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800134a:	2302      	movs	r3, #2
 800134c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	4618      	mov	r0, r3
 8001354:	f004 fc4c 	bl	8005bf0 <HAL_RCC_OscConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800135e:	f000 fcdf 	bl	8001d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	2303      	movs	r3, #3
 8001368:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2104      	movs	r1, #4
 800137a:	4618      	mov	r0, r3
 800137c:	f004 ff4a 	bl	8006214 <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001386:	f000 fccb 	bl	8001d20 <Error_Handler>
  }
}
 800138a:	bf00      	nop
 800138c:	3750      	adds	r7, #80	@ 0x50
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	@ 0x30
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800139a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2220      	movs	r2, #32
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f009 faa1 	bl	800a8f4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013b2:	4b32      	ldr	r3, [pc, #200]	@ (800147c <MX_ADC1_Init+0xe8>)
 80013b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013ba:	4b30      	ldr	r3, [pc, #192]	@ (800147c <MX_ADC1_Init+0xe8>)
 80013bc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80013c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013c2:	4b2e      	ldr	r3, [pc, #184]	@ (800147c <MX_ADC1_Init+0xe8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c8:	4b2c      	ldr	r3, [pc, #176]	@ (800147c <MX_ADC1_Init+0xe8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80013ce:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <MX_ADC1_Init+0xe8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013d4:	4b29      	ldr	r3, [pc, #164]	@ (800147c <MX_ADC1_Init+0xe8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013da:	4b28      	ldr	r3, [pc, #160]	@ (800147c <MX_ADC1_Init+0xe8>)
 80013dc:	2204      	movs	r2, #4
 80013de:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013e0:	4b26      	ldr	r3, [pc, #152]	@ (800147c <MX_ADC1_Init+0xe8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013e6:	4b25      	ldr	r3, [pc, #148]	@ (800147c <MX_ADC1_Init+0xe8>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80013ec:	4b23      	ldr	r3, [pc, #140]	@ (800147c <MX_ADC1_Init+0xe8>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013f2:	4b22      	ldr	r3, [pc, #136]	@ (800147c <MX_ADC1_Init+0xe8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <MX_ADC1_Init+0xe8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001400:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <MX_ADC1_Init+0xe8>)
 8001402:	2200      	movs	r2, #0
 8001404:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001406:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <MX_ADC1_Init+0xe8>)
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800140e:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <MX_ADC1_Init+0xe8>)
 8001410:	2200      	movs	r2, #0
 8001412:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001414:	4b19      	ldr	r3, [pc, #100]	@ (800147c <MX_ADC1_Init+0xe8>)
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800141c:	4817      	ldr	r0, [pc, #92]	@ (800147c <MX_ADC1_Init+0xe8>)
 800141e:	f002 f945 	bl	80036ac <HAL_ADC_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001428:	f000 fc7a 	bl	8001d20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001430:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	4811      	ldr	r0, [pc, #68]	@ (800147c <MX_ADC1_Init+0xe8>)
 8001438:	f003 fc12 	bl	8004c60 <HAL_ADCEx_MultiModeConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001442:	f000 fc6d 	bl	8001d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <MX_ADC1_Init+0xec>)
 8001448:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800144a:	2306      	movs	r3, #6
 800144c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001452:	237f      	movs	r3, #127	@ 0x7f
 8001454:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001456:	2304      	movs	r3, #4
 8001458:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4806      	ldr	r0, [pc, #24]	@ (800147c <MX_ADC1_Init+0xe8>)
 8001464:	f002 fe3a 	bl	80040dc <HAL_ADC_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800146e:	f000 fc57 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	3730      	adds	r7, #48	@ 0x30
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000053c 	.word	0x2000053c
 8001480:	04300002 	.word	0x04300002

08001484 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b09c      	sub	sp, #112	@ 0x70
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	615a      	str	r2, [r3, #20]
 80014b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2234      	movs	r2, #52	@ 0x34
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f009 fa18 	bl	800a8f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c4:	4b45      	ldr	r3, [pc, #276]	@ (80015dc <MX_TIM1_Init+0x158>)
 80014c6:	4a46      	ldr	r2, [pc, #280]	@ (80015e0 <MX_TIM1_Init+0x15c>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80014ca:	4b44      	ldr	r3, [pc, #272]	@ (80015dc <MX_TIM1_Init+0x158>)
 80014cc:	22a9      	movs	r2, #169	@ 0xa9
 80014ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b42      	ldr	r3, [pc, #264]	@ (80015dc <MX_TIM1_Init+0x158>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80014d6:	4b41      	ldr	r3, [pc, #260]	@ (80015dc <MX_TIM1_Init+0x158>)
 80014d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b3f      	ldr	r3, [pc, #252]	@ (80015dc <MX_TIM1_Init+0x158>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e4:	4b3d      	ldr	r3, [pc, #244]	@ (80015dc <MX_TIM1_Init+0x158>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b3c      	ldr	r3, [pc, #240]	@ (80015dc <MX_TIM1_Init+0x158>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014f0:	483a      	ldr	r0, [pc, #232]	@ (80015dc <MX_TIM1_Init+0x158>)
 80014f2:	f005 faf9 	bl	8006ae8 <HAL_TIM_Base_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014fc:	f000 fc10 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001500:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001504:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001506:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800150a:	4619      	mov	r1, r3
 800150c:	4833      	ldr	r0, [pc, #204]	@ (80015dc <MX_TIM1_Init+0x158>)
 800150e:	f006 fa7d 	bl	8007a0c <HAL_TIM_ConfigClockSource>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001518:	f000 fc02 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800151c:	482f      	ldr	r0, [pc, #188]	@ (80015dc <MX_TIM1_Init+0x158>)
 800151e:	f005 fc2f 	bl	8006d80 <HAL_TIM_PWM_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001528:	f000 fbfa 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001538:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800153c:	4619      	mov	r1, r3
 800153e:	4827      	ldr	r0, [pc, #156]	@ (80015dc <MX_TIM1_Init+0x158>)
 8001540:	f007 fa4a 	bl	80089d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800154a:	f000 fbe9 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154e:	2360      	movs	r3, #96	@ 0x60
 8001550:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001556:	2300      	movs	r3, #0
 8001558:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800155a:	2300      	movs	r3, #0
 800155c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800155e:	2304      	movs	r3, #4
 8001560:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800156a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800156e:	2200      	movs	r2, #0
 8001570:	4619      	mov	r1, r3
 8001572:	481a      	ldr	r0, [pc, #104]	@ (80015dc <MX_TIM1_Init+0x158>)
 8001574:	f006 f936 	bl	80077e4 <HAL_TIM_PWM_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800157e:	f000 fbcf 	bl	8001d20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001596:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800159a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015b2:	2300      	movs	r3, #0
 80015b4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4807      	ldr	r0, [pc, #28]	@ (80015dc <MX_TIM1_Init+0x158>)
 80015c0:	f007 faa0 	bl	8008b04 <HAL_TIMEx_ConfigBreakDeadTime>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80015ca:	f000 fba9 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015ce:	4803      	ldr	r0, [pc, #12]	@ (80015dc <MX_TIM1_Init+0x158>)
 80015d0:	f001 fbf2 	bl	8002db8 <HAL_TIM_MspPostInit>

}
 80015d4:	bf00      	nop
 80015d6:	3770      	adds	r7, #112	@ 0x70
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000608 	.word	0x20000608
 80015e0:	40012c00 	.word	0x40012c00

080015e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001602:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <MX_TIM3_Init+0x94>)
 8001604:	4a1d      	ldr	r2, [pc, #116]	@ (800167c <MX_TIM3_Init+0x98>)
 8001606:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <MX_TIM3_Init+0x94>)
 800160a:	22a9      	movs	r2, #169	@ 0xa9
 800160c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <MX_TIM3_Init+0x94>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 124;
 8001614:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <MX_TIM3_Init+0x94>)
 8001616:	227c      	movs	r2, #124	@ 0x7c
 8001618:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <MX_TIM3_Init+0x94>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <MX_TIM3_Init+0x94>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001626:	4814      	ldr	r0, [pc, #80]	@ (8001678 <MX_TIM3_Init+0x94>)
 8001628:	f005 fa5e 	bl	8006ae8 <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001632:	f000 fb75 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800163a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4619      	mov	r1, r3
 8001642:	480d      	ldr	r0, [pc, #52]	@ (8001678 <MX_TIM3_Init+0x94>)
 8001644:	f006 f9e2 	bl	8007a0c <HAL_TIM_ConfigClockSource>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800164e:	f000 fb67 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	4619      	mov	r1, r3
 800165e:	4806      	ldr	r0, [pc, #24]	@ (8001678 <MX_TIM3_Init+0x94>)
 8001660:	f007 f9ba 	bl	80089d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800166a:	f000 fb59 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	3720      	adds	r7, #32
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200006d4 	.word	0x200006d4
 800167c:	40000400 	.word	0x40000400

08001680 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08c      	sub	sp, #48	@ 0x30
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	2224      	movs	r2, #36	@ 0x24
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f009 f930 	bl	800a8f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001694:	463b      	mov	r3, r7
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800169e:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <MX_TIM4_Init+0xa4>)
 80016a0:	4a21      	ldr	r2, [pc, #132]	@ (8001728 <MX_TIM4_Init+0xa8>)
 80016a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <MX_TIM4_Init+0xa4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001724 <MX_TIM4_Init+0xa4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <MX_TIM4_Init+0xa4>)
 80016b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <MX_TIM4_Init+0xa4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016be:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <MX_TIM4_Init+0xa4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016c4:	2303      	movs	r3, #3
 80016c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016cc:	2301      	movs	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016dc:	2301      	movs	r3, #1
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	4619      	mov	r1, r3
 80016ee:	480d      	ldr	r0, [pc, #52]	@ (8001724 <MX_TIM4_Init+0xa4>)
 80016f0:	f005 fdbc 	bl	800726c <HAL_TIM_Encoder_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80016fa:	f000 fb11 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001706:	463b      	mov	r3, r7
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	@ (8001724 <MX_TIM4_Init+0xa4>)
 800170c:	f007 f964 	bl	80089d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001716:	f000 fb03 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	3730      	adds	r7, #48	@ 0x30
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200007a0 	.word	0x200007a0
 8001728:	40000800 	.word	0x40000800

0800172c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800174a:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <MX_TIM5_Init+0x94>)
 800174c:	4a1d      	ldr	r2, [pc, #116]	@ (80017c4 <MX_TIM5_Init+0x98>)
 800174e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001750:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <MX_TIM5_Init+0x94>)
 8001752:	22a9      	movs	r2, #169	@ 0xa9
 8001754:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <MX_TIM5_Init+0x94>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 800175c:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <MX_TIM5_Init+0x94>)
 800175e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001762:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001764:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <MX_TIM5_Init+0x94>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <MX_TIM5_Init+0x94>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001770:	4813      	ldr	r0, [pc, #76]	@ (80017c0 <MX_TIM5_Init+0x94>)
 8001772:	f005 f9b9 	bl	8006ae8 <HAL_TIM_Base_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800177c:	f000 fad0 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001780:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001784:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	4619      	mov	r1, r3
 800178c:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <MX_TIM5_Init+0x94>)
 800178e:	f006 f93d 	bl	8007a0c <HAL_TIM_ConfigClockSource>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001798:	f000 fac2 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_TIM5_Init+0x94>)
 80017aa:	f007 f915 	bl	80089d8 <HAL_TIMEx_MasterConfigSynchronization>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80017b4:	f000 fab4 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000086c 	.word	0x2000086c
 80017c4:	40000c00 	.word	0x40000c00

080017c8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80017cc:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <MX_TIM16_Init+0x58>)
 80017ce:	4a15      	ldr	r2, [pc, #84]	@ (8001824 <MX_TIM16_Init+0x5c>)
 80017d0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80017d2:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <MX_TIM16_Init+0x58>)
 80017d4:	22a9      	movs	r2, #169	@ 0xa9
 80017d6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <MX_TIM16_Init+0x58>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <MX_TIM16_Init+0x58>)
 80017e0:	f240 4279 	movw	r2, #1145	@ 0x479
 80017e4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <MX_TIM16_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <MX_TIM16_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <MX_TIM16_Init+0x58>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80017f8:	4809      	ldr	r0, [pc, #36]	@ (8001820 <MX_TIM16_Init+0x58>)
 80017fa:	f005 f975 	bl	8006ae8 <HAL_TIM_Base_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001804:	f000 fa8c 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001808:	2108      	movs	r1, #8
 800180a:	4805      	ldr	r0, [pc, #20]	@ (8001820 <MX_TIM16_Init+0x58>)
 800180c:	f005 fc38 	bl	8007080 <HAL_TIM_OnePulse_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001816:	f000 fa83 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000938 	.word	0x20000938
 8001824:	40014400 	.word	0x40014400

08001828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800182c:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 800182e:	4a24      	ldr	r2, [pc, #144]	@ (80018c0 <MX_USART2_UART_Init+0x98>)
 8001830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001832:	4b22      	ldr	r3, [pc, #136]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001834:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800183a:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 800183c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001840:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001842:	4b1e      	ldr	r3, [pc, #120]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001848:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 800184a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800184e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001850:	4b1a      	ldr	r3, [pc, #104]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001852:	220c      	movs	r2, #12
 8001854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001856:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800185c:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001862:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001868:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186e:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001870:	2200      	movs	r2, #0
 8001872:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001874:	4811      	ldr	r0, [pc, #68]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001876:	f007 fa29 	bl	8008ccc <HAL_UART_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001880:	f000 fa4e 	bl	8001d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001884:	2100      	movs	r1, #0
 8001886:	480d      	ldr	r0, [pc, #52]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001888:	f008 ff6a 	bl	800a760 <HAL_UARTEx_SetTxFifoThreshold>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001892:	f000 fa45 	bl	8001d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001896:	2100      	movs	r1, #0
 8001898:	4808      	ldr	r0, [pc, #32]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 800189a:	f008 ff9f 	bl	800a7dc <HAL_UARTEx_SetRxFifoThreshold>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80018a4:	f000 fa3c 	bl	8001d20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018a8:	4804      	ldr	r0, [pc, #16]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 80018aa:	f008 ff20 	bl	800a6ee <HAL_UARTEx_DisableFifoMode>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80018b4:	f000 fa34 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000a04 	.word	0x20000a04
 80018c0:	40004400 	.word	0x40004400

080018c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <MX_DMA_Init+0x70>)
 80018cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ce:	4a19      	ldr	r2, [pc, #100]	@ (8001934 <MX_DMA_Init+0x70>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80018d6:	4b17      	ldr	r3, [pc, #92]	@ (8001934 <MX_DMA_Init+0x70>)
 80018d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018e2:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <MX_DMA_Init+0x70>)
 80018e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e6:	4a13      	ldr	r2, [pc, #76]	@ (8001934 <MX_DMA_Init+0x70>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80018ee:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <MX_DMA_Init+0x70>)
 80018f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	200b      	movs	r0, #11
 8001900:	f003 fb91 	bl	8005026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001904:	200b      	movs	r0, #11
 8001906:	f003 fba8 	bl	800505a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	200c      	movs	r0, #12
 8001910:	f003 fb89 	bl	8005026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001914:	200c      	movs	r0, #12
 8001916:	f003 fba0 	bl	800505a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	200d      	movs	r0, #13
 8001920:	f003 fb81 	bl	8005026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001924:	200d      	movs	r0, #13
 8001926:	f003 fb98 	bl	800505a <HAL_NVIC_EnableIRQ>

}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000

08001938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	@ 0x28
 800193c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194e:	4b67      	ldr	r3, [pc, #412]	@ (8001aec <MX_GPIO_Init+0x1b4>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	4a66      	ldr	r2, [pc, #408]	@ (8001aec <MX_GPIO_Init+0x1b4>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195a:	4b64      	ldr	r3, [pc, #400]	@ (8001aec <MX_GPIO_Init+0x1b4>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001966:	4b61      	ldr	r3, [pc, #388]	@ (8001aec <MX_GPIO_Init+0x1b4>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196a:	4a60      	ldr	r2, [pc, #384]	@ (8001aec <MX_GPIO_Init+0x1b4>)
 800196c:	f043 0320 	orr.w	r3, r3, #32
 8001970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001972:	4b5e      	ldr	r3, [pc, #376]	@ (8001aec <MX_GPIO_Init+0x1b4>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001976:	f003 0320 	and.w	r3, r3, #32
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	4b5b      	ldr	r3, [pc, #364]	@ (8001aec <MX_GPIO_Init+0x1b4>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001982:	4a5a      	ldr	r2, [pc, #360]	@ (8001aec <MX_GPIO_Init+0x1b4>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800198a:	4b58      	ldr	r3, [pc, #352]	@ (8001aec <MX_GPIO_Init+0x1b4>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	4b55      	ldr	r3, [pc, #340]	@ (8001aec <MX_GPIO_Init+0x1b4>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	4a54      	ldr	r2, [pc, #336]	@ (8001aec <MX_GPIO_Init+0x1b4>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a2:	4b52      	ldr	r3, [pc, #328]	@ (8001aec <MX_GPIO_Init+0x1b4>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80019b4:	484e      	ldr	r0, [pc, #312]	@ (8001af0 <MX_GPIO_Init+0x1b8>)
 80019b6:	f004 f837 	bl	8005a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80019c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019c4:	f004 f830 	bl	8005a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f240 4116 	movw	r1, #1046	@ 0x416
 80019ce:	4849      	ldr	r0, [pc, #292]	@ (8001af4 <MX_GPIO_Init+0x1bc>)
 80019d0:	f004 f82a 	bl	8005a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	4841      	ldr	r0, [pc, #260]	@ (8001af0 <MX_GPIO_Init+0x1b8>)
 80019ec:	f003 fe82 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 80019f0:	2302      	movs	r3, #2
 80019f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	483a      	ldr	r0, [pc, #232]	@ (8001af0 <MX_GPIO_Init+0x1b8>)
 8001a08:	f003 fe74 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 8001a0c:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a28:	f003 fe64 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 8001a2c:	23f0      	movs	r3, #240	@ 0xf0
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	482c      	ldr	r0, [pc, #176]	@ (8001af0 <MX_GPIO_Init+0x1b8>)
 8001a40:	f003 fe58 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 8001a44:	f240 4316 	movw	r3, #1046	@ 0x416
 8001a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4825      	ldr	r0, [pc, #148]	@ (8001af4 <MX_GPIO_Init+0x1bc>)
 8001a5e:	f003 fe49 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin joy_switch_1_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|joy_switch_1_Pin;
 8001a62:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	481f      	ldr	r0, [pc, #124]	@ (8001af4 <MX_GPIO_Init+0x1bc>)
 8001a78:	f003 fe3c 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Emergency_switch_Pin;
 8001a7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a82:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_switch_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4818      	ldr	r0, [pc, #96]	@ (8001af4 <MX_GPIO_Init+0x1bc>)
 8001a94:	f003 fe2e 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 8001a98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480f      	ldr	r0, [pc, #60]	@ (8001af0 <MX_GPIO_Init+0x1b8>)
 8001ab2:	f003 fe1f 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 8001ab6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ace:	f003 fe11 	bl	80056f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2028      	movs	r0, #40	@ 0x28
 8001ad8:	f003 faa5 	bl	8005026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001adc:	2028      	movs	r0, #40	@ 0x28
 8001ade:	f003 fabc 	bl	800505a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	@ 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	48000800 	.word	0x48000800
 8001af4:	48000400 	.word	0x48000400

08001af8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001af8:	b5b0      	push	{r4, r5, r7, lr}
 8001afa:	b08a      	sub	sp, #40	@ 0x28
 8001afc:	af08      	add	r7, sp, #32
 8001afe:	6078      	str	r0, [r7, #4]
//			registerFrame[0x13].U16 = encoder.mmpss;	// Z-axis Acceleration(0x13)    //////ความเร่งต้องเปลี่ยน/////
//			registerFrame[0x40].U16 = encoder.rpm;		// X-axis Actual Position(0x40)
//		  heartbeat_status = 0;
//		}
	}
	if(htim == &htim3){
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a4a      	ldr	r2, [pc, #296]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	f040 808d 	bne.w	8001c24 <HAL_TIM_PeriodElapsedCallback+0x12c>
		// Update main
		Update_qei(&encoder, &htim4);
 8001b0a:	4949      	ldr	r1, [pc, #292]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001b0c:	4849      	ldr	r0, [pc, #292]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001b0e:	f000 fb6b 	bl	80021e8 <Update_qei>
		Update_adc(&current_sensor);
 8001b12:	4849      	ldr	r0, [pc, #292]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001b14:	f7ff fad9 	bl	80010ca <Update_adc>
		Update_actual_eff(&eff, &registerFrame,GPIOC, GPIO_PIN_7, GPIOA, GPIO_PIN_9); // Pull -> Push
 8001b18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	2380      	movs	r3, #128	@ 0x80
 8001b26:	4a45      	ldr	r2, [pc, #276]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001b28:	4945      	ldr	r1, [pc, #276]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001b2a:	4846      	ldr	r0, [pc, #280]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001b2c:	f7ff fb05 	bl	800113a <Update_actual_eff>
		Gripper_Movement_Status(&eff);
 8001b30:	4844      	ldr	r0, [pc, #272]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001b32:	f7ff f9d7 	bl	8000ee4 <Gripper_Movement_Status>
		if(emer.emer_state == 1){
 8001b36:	4b44      	ldr	r3, [pc, #272]	@ (8001c48 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d126      	bne.n	8001b8c <HAL_TIM_PeriodElapsedCallback+0x94>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2302      	movs	r3, #2
 8001b44:	4a3d      	ldr	r2, [pc, #244]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001b46:	2100      	movs	r1, #0
 8001b48:	4840      	ldr	r0, [pc, #256]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001b4a:	f000 fa5d 	bl	8002008 <Update_pwm>
			// Check for homing from base system
			Set_Home();
 8001b4e:	f7ff f9fb 	bl	8000f48 <Set_Home>
			// homing function for homing state and reset emergency state
			homing(&home, GPIOB, GPIO_PIN_12, &htim1, TIM_CHANNEL_1,
 8001b52:	4b38      	ldr	r3, [pc, #224]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001b54:	9306      	str	r3, [sp, #24]
 8001b56:	2340      	movs	r3, #64	@ 0x40
 8001b58:	9305      	str	r3, [sp, #20]
 8001b5a:	4b38      	ldr	r3, [pc, #224]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001b5c:	9304      	str	r3, [sp, #16]
 8001b5e:	4b38      	ldr	r3, [pc, #224]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001b60:	9303      	str	r3, [sp, #12]
 8001b62:	2302      	movs	r3, #2
 8001b64:	9302      	str	r3, [sp, #8]
 8001b66:	4b35      	ldr	r3, [pc, #212]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	4b37      	ldr	r3, [pc, #220]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001b70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b74:	4936      	ldr	r1, [pc, #216]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001b76:	4837      	ldr	r0, [pc, #220]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001b78:	f000 fdaa 	bl	80026d0 <homing>
					GPIOC, GPIO_PIN_1, &registerFrame, GPIOC,
					GPIO_PIN_6, &encoder);
			if(home.is_home == 1){
 8001b7c:	4b35      	ldr	r3, [pc, #212]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001b7e:	78db      	ldrb	r3, [r3, #3]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d14f      	bne.n	8001c24 <HAL_TIM_PeriodElapsedCallback+0x12c>
				emer.emer_state = 0; // Reset emergency state
 8001b84:	4b30      	ldr	r3, [pc, #192]	@ (8001c48 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
//					homing_ts++;
//				}
//			}
//		}
	}
}
 8001b8a:	e04b      	b.n	8001c24 <HAL_TIM_PeriodElapsedCallback+0x12c>
		else if(encoder.mm >= 685 || encoder.mm <= 5){
 8001b8c:	4b29      	ldr	r3, [pc, #164]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001b8e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001b92:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001c58 <HAL_TIM_PeriodElapsedCallback+0x160>
 8001b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9e:	da09      	bge.n	8001bb4 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001ba0:	4b24      	ldr	r3, [pc, #144]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001ba2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ba6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	d808      	bhi.n	8001bc6 <HAL_TIM_PeriodElapsedCallback+0xce>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2302      	movs	r3, #2
 8001bba:	4a20      	ldr	r2, [pc, #128]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4823      	ldr	r0, [pc, #140]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001bc0:	f000 fa22 	bl	8002008 <Update_pwm>
}
 8001bc4:	e02e      	b.n	8001c24 <HAL_TIM_PeriodElapsedCallback+0x12c>
		else if(tuning == 1){
 8001bc6:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d12a      	bne.n	8001c24 <HAL_TIM_PeriodElapsedCallback+0x12c>
			if(control_loop_ts == 8){
 8001bce:	4b24      	ldr	r3, [pc, #144]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f1a2 0108 	sub.w	r1, r2, #8
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	d107      	bne.n	8001bec <HAL_TIM_PeriodElapsedCallback+0xf4>
				control_loop_ts = 0;
 8001bdc:	4920      	ldr	r1, [pc, #128]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	e9c1 2300 	strd	r2, r3, [r1]
 8001bea:	e008      	b.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x106>
			else{control_loop_ts++;}
 8001bec:	4b1c      	ldr	r3, [pc, #112]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	1c54      	adds	r4, r2, #1
 8001bf4:	f143 0500 	adc.w	r5, r3, #0
 8001bf8:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001bfa:	e9c3 4500 	strd	r4, r5, [r3]
			Update_velocity_control(test);
 8001bfe:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0e:	f000 f857 	bl	8001cc0 <Update_velocity_control>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, v_output);
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2302      	movs	r3, #2
 8001c1a:	4a08      	ldr	r2, [pc, #32]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	480b      	ldr	r0, [pc, #44]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001c20:	f000 f9f2 	bl	8002008 <Update_pwm>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2c:	200006d4 	.word	0x200006d4
 8001c30:	200007a0 	.word	0x200007a0
 8001c34:	20000e08 	.word	0x20000e08
 8001c38:	20000d3c 	.word	0x20000d3c
 8001c3c:	48000800 	.word	0x48000800
 8001c40:	20000ba4 	.word	0x20000ba4
 8001c44:	20000d34 	.word	0x20000d34
 8001c48:	20000ba0 	.word	0x20000ba0
 8001c4c:	20000608 	.word	0x20000608
 8001c50:	48000400 	.word	0x48000400
 8001c54:	20000b9c 	.word	0x20000b9c
 8001c58:	442b4000 	.word	0x442b4000
 8001c5c:	20000b90 	.word	0x20000b90
 8001c60:	20000eb0 	.word	0x20000eb0
 8001c64:	20000b94 	.word	0x20000b94
 8001c68:	20000e8c 	.word	0x20000e8c

08001c6c <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	4603      	mov	r3, r0
 8001c74:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15){
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c7c:	d113      	bne.n	8001ca6 <HAL_GPIO_EXTI_Callback+0x3a>
		// Emergency switch interrupted
		// Stop motor
		Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001c7e:	2300      	movs	r3, #0
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2302      	movs	r3, #2
 8001c84:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <HAL_GPIO_EXTI_Callback+0x44>)
 8001c86:	2100      	movs	r1, #0
 8001c88:	480a      	ldr	r0, [pc, #40]	@ (8001cb4 <HAL_GPIO_EXTI_Callback+0x48>)
 8001c8a:	f000 f9bd 	bl	8002008 <Update_pwm>
		// Emergency light enable
		Reset_qei(&encoder);
 8001c8e:	480a      	ldr	r0, [pc, #40]	@ (8001cb8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001c90:	f000 fcc2 	bl	8002618 <Reset_qei>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c9a:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <HAL_GPIO_EXTI_Callback+0x44>)
 8001c9c:	f003 fec4 	bl	8005a28 <HAL_GPIO_WritePin>
		emer.emer_state = 1;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <HAL_GPIO_EXTI_Callback+0x50>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
	}
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	48000800 	.word	0x48000800
 8001cb4:	20000608 	.word	0x20000608
 8001cb8:	20000e08 	.word	0x20000e08
 8001cbc:	20000ba0 	.word	0x20000ba0

08001cc0 <Update_velocity_control>:
// Torque control update
void Update_torque_control(float32_t s){

}
// Velocity control update
void Update_velocity_control(float32_t s){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	ed87 0a01 	vstr	s0, [r7, #4]
	//input is pulse unit
	v_e = s - Get_mmps(&encoder);
 8001cca:	480f      	ldr	r0, [pc, #60]	@ (8001d08 <Update_velocity_control+0x48>)
 8001ccc:	f000 fcf1 	bl	80026b2 <Get_mmps>
 8001cd0:	eeb0 7a40 	vmov.f32	s14, s0
 8001cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <Update_velocity_control+0x4c>)
 8001cde:	edc3 7a00 	vstr	s15, [r3]
	v_output = Update_pid(&v_pid, v_e, 900.0, 1000.0);
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <Update_velocity_control+0x4c>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8001d10 <Update_velocity_control+0x50>
 8001cec:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001d14 <Update_velocity_control+0x54>
 8001cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf4:	4808      	ldr	r0, [pc, #32]	@ (8001d18 <Update_velocity_control+0x58>)
 8001cf6:	f000 f83f 	bl	8001d78 <Update_pid>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4a07      	ldr	r2, [pc, #28]	@ (8001d1c <Update_velocity_control+0x5c>)
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000e08 	.word	0x20000e08
 8001d0c:	20000e88 	.word	0x20000e88
 8001d10:	447a0000 	.word	0x447a0000
 8001d14:	44610000 	.word	0x44610000
 8001d18:	20000e68 	.word	0x20000e68
 8001d1c:	20000e8c 	.word	0x20000e8c

08001d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d24:	b672      	cpsid	i
}
 8001d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <Error_Handler+0x8>

08001d2c <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6178      	str	r0, [r7, #20]
 8001d34:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d38:	edc7 0a03 	vstr	s1, [r7, #12]
 8001d3c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001d40:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 8001d5c:	6979      	ldr	r1, [r7, #20]
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001d6a:	bf00      	nop
 8001d6c:	371c      	adds	r7, #28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 8001d78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d7c:	b08a      	sub	sp, #40	@ 0x28
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d86:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d8a:	ed87 1a00 	vstr	s2, [r7]
//	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da0:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 8001da4:	4b96      	ldr	r3, [pc, #600]	@ (8002000 <Update_pid+0x288>)
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	ed97 7a06 	vldr	s14, [r7, #24]
 8001dae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001db8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	ed93 7a03 	vldr	s14, [r3, #12]
 8001dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dc6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt / 2.0)*(e_n + e_n_1)) + y_n_1;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dda:	ee17 0a90 	vmov	r0, s15
 8001dde:	f7fe fb7f 	bl	80004e0 <__aeabi_f2d>
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dea:	f7fe fcfb 	bl	80007e4 <__aeabi_ddiv>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4690      	mov	r8, r2
 8001df4:	4699      	mov	r9, r3
 8001df6:	4b82      	ldr	r3, [pc, #520]	@ (8002000 <Update_pid+0x288>)
 8001df8:	ed93 7a00 	vldr	s14, [r3]
 8001dfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e04:	ee17 0a90 	vmov	r0, s15
 8001e08:	f7fe fb6a 	bl	80004e0 <__aeabi_f2d>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4640      	mov	r0, r8
 8001e12:	4649      	mov	r1, r9
 8001e14:	f7fe fbbc 	bl	8000590 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4690      	mov	r8, r2
 8001e1e:	4699      	mov	r9, r3
 8001e20:	4b78      	ldr	r3, [pc, #480]	@ (8002004 <Update_pid+0x28c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fb5b 	bl	80004e0 <__aeabi_f2d>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4640      	mov	r0, r8
 8001e30:	4649      	mov	r1, r9
 8001e32:	f7fe f9f7 	bl	8000224 <__adddf3>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe fe89 	bl	8000b54 <__aeabi_d2f>
 8001e42:	4603      	mov	r3, r0
 8001e44:	623b      	str	r3, [r7, #32]

	if(pid -> ki == 0){
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	d102      	bne.n	8001e5c <Update_pid+0xe4>
		i_term = 0;
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6a:	d102      	bne.n	8001e72 <Update_pid+0xfa>
		d_term = 0;
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 8001e72:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e76:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e86:	ee17 0a90 	vmov	r0, s15
 8001e8a:	f7fe fb29 	bl	80004e0 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	68f9      	ldr	r1, [r7, #12]
 8001e94:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t is_sat = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe fb1c 	bl	80004e0 <__aeabi_f2d>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4640      	mov	r0, r8
 8001eae:	4649      	mov	r1, r9
 8001eb0:	f7fe fdfe 	bl	8000ab0 <__aeabi_dcmpgt>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <Update_pid+0x148>
		is_sat = 1;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	77fb      	strb	r3, [r7, #31]
 8001ebe:	e016      	b.n	8001eee <Update_pid+0x176>
	}
	else if(pid -> y_n < -(pid_sat)){
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001ec6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eca:	eef1 7a67 	vneg.f32	s15, s15
 8001ece:	ee17 3a90 	vmov	r3, s15
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fb04 	bl	80004e0 <__aeabi_f2d>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4640      	mov	r0, r8
 8001ede:	4649      	mov	r1, r9
 8001ee0:	f7fe fdc8 	bl	8000a74 <__aeabi_dcmplt>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <Update_pid+0x176>
		is_sat = 1;
 8001eea:	2301      	movs	r3, #1
 8001eec:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 8001eee:	69b8      	ldr	r0, [r7, #24]
 8001ef0:	f7fe faf6 	bl	80004e0 <__aeabi_f2d>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001efa:	f7fe fb49 	bl	8000590 <__aeabi_dmul>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4690      	mov	r8, r2
 8001f04:	4699      	mov	r9, r3
 8001f06:	69b8      	ldr	r0, [r7, #24]
 8001f08:	f7fe faea 	bl	80004e0 <__aeabi_f2d>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f12:	f7fe fb3d 	bl	8000590 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4614      	mov	r4, r2
 8001f1c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001f20:	4622      	mov	r2, r4
 8001f22:	462b      	mov	r3, r5
 8001f24:	4640      	mov	r0, r8
 8001f26:	4649      	mov	r1, r9
 8001f28:	f7fe fd9a 	bl	8000a60 <__aeabi_dcmpeq>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d011      	beq.n	8001f56 <Update_pid+0x1de>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 8001f32:	7ffb      	ldrb	r3, [r7, #31]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d10e      	bne.n	8001f56 <Update_pid+0x1de>
			pid -> y_n = p_term + d_term;
 8001f38:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f3c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f44:	ee17 0a90 	vmov	r0, s15
 8001f48:	f7fe faca 	bl	80004e0 <__aeabi_f2d>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	68f9      	ldr	r1, [r7, #12]
 8001f52:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	// Plant saturation
	if(pid -> y_n > plant_sat){
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001f5c:	6838      	ldr	r0, [r7, #0]
 8001f5e:	f7fe fabf 	bl	80004e0 <__aeabi_f2d>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4620      	mov	r0, r4
 8001f68:	4629      	mov	r1, r5
 8001f6a:	f7fe fda1 	bl	8000ab0 <__aeabi_dcmpgt>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <Update_pid+0x20e>
		pid -> y_n = plant_sat;
 8001f74:	6838      	ldr	r0, [r7, #0]
 8001f76:	f7fe fab3 	bl	80004e0 <__aeabi_f2d>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	68f9      	ldr	r1, [r7, #12]
 8001f80:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001f84:	e022      	b.n	8001fcc <Update_pid+0x254>
	}
	else if(pid -> y_n < -(plant_sat)){
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001f8c:	edd7 7a00 	vldr	s15, [r7]
 8001f90:	eef1 7a67 	vneg.f32	s15, s15
 8001f94:	ee17 3a90 	vmov	r3, s15
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe faa1 	bl	80004e0 <__aeabi_f2d>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	f7fe fd65 	bl	8000a74 <__aeabi_dcmplt>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00d      	beq.n	8001fcc <Update_pid+0x254>
		pid -> y_n = (-(plant_sat));
 8001fb0:	edd7 7a00 	vldr	s15, [r7]
 8001fb4:	eef1 7a67 	vneg.f32	s15, s15
 8001fb8:	ee17 3a90 	vmov	r3, s15
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fa8f 	bl	80004e0 <__aeabi_f2d>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	68f9      	ldr	r1, [r7, #12]
 8001fc8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f7fe fdbd 	bl	8000b54 <__aeabi_d2f>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a09      	ldr	r2, [pc, #36]	@ (8002004 <Update_pid+0x28c>)
 8001fde:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 8001fe0:	4a07      	ldr	r2, [pc, #28]	@ (8002000 <Update_pid+0x288>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	6013      	str	r3, [r2, #0]
	return pid -> y_n;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f7fe fd68 	bl	8000ac4 <__aeabi_d2iz>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3728      	adds	r7, #40	@ 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002000:	20000eb8 	.word	0x20000eb8
 8002004:	20000ebc 	.word	0x20000ebc

08002008 <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 8002008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800200c:	b08b      	sub	sp, #44	@ 0x2c
 800200e:	af00      	add	r7, sp, #0
 8002010:	6278      	str	r0, [r7, #36]	@ 0x24
 8002012:	61fa      	str	r2, [r7, #28]
 8002014:	461a      	mov	r2, r3
 8002016:	460b      	mov	r3, r1
 8002018:	847b      	strh	r3, [r7, #34]	@ 0x22
 800201a:	4613      	mov	r3, r2
 800201c:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 800201e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002020:	2b00      	cmp	r3, #0
 8002022:	d111      	bne.n	8002048 <Update_pwm+0x40>
 8002024:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002026:	f7fe fa49 	bl	80004bc <__aeabi_i2d>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	613a      	str	r2, [r7, #16]
 8002030:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	681c      	ldr	r4, [r3, #0]
 800203a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800203e:	f7fe fd69 	bl	8000b14 <__aeabi_d2uiz>
 8002042:	4603      	mov	r3, r0
 8002044:	6363      	str	r3, [r4, #52]	@ 0x34
 8002046:	e061      	b.n	800210c <Update_pwm+0x104>
 8002048:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800204a:	2b04      	cmp	r3, #4
 800204c:	d111      	bne.n	8002072 <Update_pwm+0x6a>
 800204e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002050:	f7fe fa34 	bl	80004bc <__aeabi_i2d>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	60ba      	str	r2, [r7, #8]
 800205a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	681c      	ldr	r4, [r3, #0]
 8002064:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002068:	f7fe fd54 	bl	8000b14 <__aeabi_d2uiz>
 800206c:	4603      	mov	r3, r0
 800206e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002070:	e04c      	b.n	800210c <Update_pwm+0x104>
 8002072:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002074:	2b08      	cmp	r3, #8
 8002076:	d111      	bne.n	800209c <Update_pwm+0x94>
 8002078:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800207a:	f7fe fa1f 	bl	80004bc <__aeabi_i2d>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	603a      	str	r2, [r7, #0]
 8002084:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	681c      	ldr	r4, [r3, #0]
 800208e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002092:	f7fe fd3f 	bl	8000b14 <__aeabi_d2uiz>
 8002096:	4603      	mov	r3, r0
 8002098:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800209a:	e037      	b.n	800210c <Update_pwm+0x104>
 800209c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800209e:	2b0c      	cmp	r3, #12
 80020a0:	d110      	bne.n	80020c4 <Update_pwm+0xbc>
 80020a2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020a4:	f7fe fa0a 	bl	80004bc <__aeabi_i2d>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4615      	mov	r5, r2
 80020ae:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	681c      	ldr	r4, [r3, #0]
 80020b6:	4628      	mov	r0, r5
 80020b8:	4631      	mov	r1, r6
 80020ba:	f7fe fd2b 	bl	8000b14 <__aeabi_d2uiz>
 80020be:	4603      	mov	r3, r0
 80020c0:	6423      	str	r3, [r4, #64]	@ 0x40
 80020c2:	e023      	b.n	800210c <Update_pwm+0x104>
 80020c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80020c6:	2b10      	cmp	r3, #16
 80020c8:	d110      	bne.n	80020ec <Update_pwm+0xe4>
 80020ca:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020cc:	f7fe f9f6 	bl	80004bc <__aeabi_i2d>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4692      	mov	sl, r2
 80020d6:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	681c      	ldr	r4, [r3, #0]
 80020de:	4650      	mov	r0, sl
 80020e0:	4659      	mov	r1, fp
 80020e2:	f7fe fd17 	bl	8000b14 <__aeabi_d2uiz>
 80020e6:	4603      	mov	r3, r0
 80020e8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80020ea:	e00f      	b.n	800210c <Update_pwm+0x104>
 80020ec:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020ee:	f7fe f9e5 	bl	80004bc <__aeabi_i2d>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4690      	mov	r8, r2
 80020f8:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	681c      	ldr	r4, [r3, #0]
 8002100:	4640      	mov	r0, r8
 8002102:	4649      	mov	r1, r9
 8002104:	f7fe fd06 	bl	8000b14 <__aeabi_d2uiz>
 8002108:	4603      	mov	r3, r0
 800210a:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 800210c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800210e:	2b00      	cmp	r3, #0
 8002110:	da06      	bge.n	8002120 <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 8002112:	8c3b      	ldrh	r3, [r7, #32]
 8002114:	2200      	movs	r2, #0
 8002116:	4619      	mov	r1, r3
 8002118:	69f8      	ldr	r0, [r7, #28]
 800211a:	f003 fc85 	bl	8005a28 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 800211e:	e005      	b.n	800212c <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 8002120:	8c3b      	ldrh	r3, [r7, #32]
 8002122:	2201      	movs	r2, #1
 8002124:	4619      	mov	r1, r3
 8002126:	69f8      	ldr	r0, [r7, #28]
 8002128:	f003 fc7e 	bl	8005a28 <HAL_GPIO_WritePin>
}
 800212c:	bf00      	nop
 800212e:	372c      	adds	r7, #44	@ 0x2c
 8002130:	46bd      	mov	sp, r7
 8002132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002136 <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 8002136:	b480      	push	{r7}
 8002138:	b085      	sub	sp, #20
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8002168:	68f9      	ldr	r1, [r7, #12]
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 800218e:	68f9      	ldr	r1, [r7, #12]
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0.0;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps = 0.0;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> mmps = 0.0;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	641a      	str	r2, [r3, #64]	@ 0x40
	qei -> radpss = 0.0;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> rpms = 0.0;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	659a      	str	r2, [r3, #88]	@ 0x58
	qei -> mmpss = 0.0;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	65da      	str	r2, [r3, #92]	@ 0x5c
	qei -> velocity_value[NEW] = 0;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	645a      	str	r2, [r3, #68]	@ 0x44
	qei -> velocity_value[OLD] = 0;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	649a      	str	r2, [r3, #72]	@ 0x48

}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 80021e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	461a      	mov	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	0fd9      	lsrs	r1, r3, #31
 8002218:	440b      	add	r3, r1
 800221a:	105b      	asrs	r3, r3, #1
 800221c:	429a      	cmp	r2, r3
 800221e:	dd06      	ble.n	800222e <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	1ad2      	subs	r2, r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	425b      	negs	r3, r3
 8002238:	0fd9      	lsrs	r1, r3, #31
 800223a:	440b      	add	r3, r1
 800223c:	105b      	asrs	r3, r3, #1
 800223e:	429a      	cmp	r2, r3
 8002240:	da06      	bge.n	8002250 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	441a      	add	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	615a      	str	r2, [r3, #20]
	}
	// Update velocity at difference unit
	qei -> pps = (float)qei -> diff_counter_value * (float)(qei -> freq);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	ee07 3a90 	vmov	s15, r3
 8002264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226c:	ee17 0a90 	vmov	r0, s15
 8002270:	f7fe f936 	bl	80004e0 <__aeabi_f2d>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> radps = qei -> pps * 2.0 * M_PI / (float)(qei -> ppr);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	f7fd ffcc 	bl	8000224 <__adddf3>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	a3dc      	add	r3, pc, #880	@ (adr r3, 8002608 <Update_qei+0x420>)
 8002296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229a:	f7fe f979 	bl	8000590 <__aeabi_dmul>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4692      	mov	sl, r2
 80022a4:	469b      	mov	fp, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b2:	ee17 0a90 	vmov	r0, s15
 80022b6:	f7fe f913 	bl	80004e0 <__aeabi_f2d>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4650      	mov	r0, sl
 80022c0:	4659      	mov	r1, fp
 80022c2:	f7fe fa8f 	bl	80007e4 <__aeabi_ddiv>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	f7fe fc41 	bl	8000b54 <__aeabi_d2f>
 80022d2:	4602      	mov	r2, r0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	4bcb      	ldr	r3, [pc, #812]	@ (8002610 <Update_qei+0x428>)
 80022e4:	f7fe f954 	bl	8000590 <__aeabi_dmul>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4692      	mov	sl, r2
 80022ee:	469b      	mov	fp, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	ee07 3a90 	vmov	s15, r3
 80022f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022fc:	ee17 0a90 	vmov	r0, s15
 8002300:	f7fe f8ee 	bl	80004e0 <__aeabi_f2d>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4650      	mov	r0, sl
 800230a:	4659      	mov	r1, fp
 800230c:	f7fe fa6a 	bl	80007e4 <__aeabi_ddiv>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	f7fe fc1c 	bl	8000b54 <__aeabi_d2f>
 800231c:	4602      	mov	r2, r0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> mmps = qei -> pps * 16.0 / (float)(qei -> ppr);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	4bb9      	ldr	r3, [pc, #740]	@ (8002614 <Update_qei+0x42c>)
 800232e:	f7fe f92f 	bl	8000590 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4692      	mov	sl, r2
 8002338:	469b      	mov	fp, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002346:	ee17 0a90 	vmov	r0, s15
 800234a:	f7fe f8c9 	bl	80004e0 <__aeabi_f2d>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4650      	mov	r0, sl
 8002354:	4659      	mov	r1, fp
 8002356:	f7fe fa45 	bl	80007e4 <__aeabi_ddiv>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	f7fe fbf7 	bl	8000b54 <__aeabi_d2f>
 8002366:	4602      	mov	r2, r0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	641a      	str	r2, [r3, #64]	@ 0x40

	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	6949      	ldr	r1, [r1, #20]
 8002376:	17c8      	asrs	r0, r1, #31
 8002378:	460c      	mov	r4, r1
 800237a:	4605      	mov	r5, r0
 800237c:	eb12 0804 	adds.w	r8, r2, r4
 8002380:	eb43 0905 	adc.w	r9, r3, r5
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	e9c3 8906 	strd	r8, r9, [r3, #24]
	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f8a6 	bl	80004e0 <__aeabi_f2d>
 8002394:	4604      	mov	r4, r0
 8002396:	460d      	mov	r5, r1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a4:	ee17 0a90 	vmov	r0, s15
 80023a8:	f7fe f89a 	bl	80004e0 <__aeabi_f2d>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	f7fd ff38 	bl	8000224 <__adddf3>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	a392      	add	r3, pc, #584	@ (adr r3, 8002608 <Update_qei+0x420>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	f7fe f8e5 	bl	8000590 <__aeabi_dmul>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4690      	mov	r8, r2
 80023cc:	4699      	mov	r9, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023da:	ee17 0a90 	vmov	r0, s15
 80023de:	f7fe f87f 	bl	80004e0 <__aeabi_f2d>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4640      	mov	r0, r8
 80023e8:	4649      	mov	r1, r9
 80023ea:	f7fe f9fb 	bl	80007e4 <__aeabi_ddiv>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4620      	mov	r0, r4
 80023f4:	4629      	mov	r1, r5
 80023f6:	f7fd ff15 	bl	8000224 <__adddf3>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	f7fe fba7 	bl	8000b54 <__aeabi_d2f>
 8002406:	4602      	mov	r2, r0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800242a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800242e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	edc3 7a08 	vstr	s15, [r3, #32]
	qei -> mm += (float)qei -> diff_counter_value * 16.0 / (float)(qei -> ppr); // for lead 16 mm.
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f84f 	bl	80004e0 <__aeabi_f2d>
 8002442:	4604      	mov	r4, r0
 8002444:	460d      	mov	r5, r1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002452:	ee17 0a90 	vmov	r0, s15
 8002456:	f7fe f843 	bl	80004e0 <__aeabi_f2d>
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	4b6d      	ldr	r3, [pc, #436]	@ (8002614 <Update_qei+0x42c>)
 8002460:	f7fe f896 	bl	8000590 <__aeabi_dmul>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4690      	mov	r8, r2
 800246a:	4699      	mov	r9, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002478:	ee17 0a90 	vmov	r0, s15
 800247c:	f7fe f830 	bl	80004e0 <__aeabi_f2d>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4640      	mov	r0, r8
 8002486:	4649      	mov	r1, r9
 8002488:	f7fe f9ac 	bl	80007e4 <__aeabi_ddiv>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4620      	mov	r0, r4
 8002492:	4629      	mov	r1, r5
 8002494:	f7fd fec6 	bl	8000224 <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fb58 	bl	8000b54 <__aeabi_d2f>
 80024a4:	4602      	mov	r2, r0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	629a      	str	r2, [r3, #40]	@ 0x28

	// Update acceleration
	qei -> velocity_value[NEW] = qei -> pps;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	f7fe fb4e 	bl	8000b54 <__aeabi_d2f>
 80024b8:	4602      	mov	r2, r0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	645a      	str	r2, [r3, #68]	@ 0x44
	qei -> diff_velocity_value = qei -> velocity_value[NEW] - qei -> velocity_value[OLD];
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80024ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	qei -> ppss = qei -> diff_velocity_value * (float)(qei -> freq);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	qei -> radpss = qei -> ppss * 2.0 * M_PI / (float)(qei -> ppr);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fd fff3 	bl	80004e0 <__aeabi_f2d>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	f7fd fe91 	bl	8000224 <__adddf3>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	a33f      	add	r3, pc, #252	@ (adr r3, 8002608 <Update_qei+0x420>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f7fe f83e 	bl	8000590 <__aeabi_dmul>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4614      	mov	r4, r2
 800251a:	461d      	mov	r5, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002528:	ee17 0a90 	vmov	r0, s15
 800252c:	f7fd ffd8 	bl	80004e0 <__aeabi_f2d>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4620      	mov	r0, r4
 8002536:	4629      	mov	r1, r5
 8002538:	f7fe f954 	bl	80007e4 <__aeabi_ddiv>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f7fe fb06 	bl	8000b54 <__aeabi_d2f>
 8002548:	4602      	mov	r2, r0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> rpms = qei -> ppss * 60.0 / (float)(qei -> ppr);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002552:	4618      	mov	r0, r3
 8002554:	f7fd ffc4 	bl	80004e0 <__aeabi_f2d>
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	4b2c      	ldr	r3, [pc, #176]	@ (8002610 <Update_qei+0x428>)
 800255e:	f7fe f817 	bl	8000590 <__aeabi_dmul>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4614      	mov	r4, r2
 8002568:	461d      	mov	r5, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002576:	ee17 0a90 	vmov	r0, s15
 800257a:	f7fd ffb1 	bl	80004e0 <__aeabi_f2d>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4620      	mov	r0, r4
 8002584:	4629      	mov	r1, r5
 8002586:	f7fe f92d 	bl	80007e4 <__aeabi_ddiv>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	f7fe fadf 	bl	8000b54 <__aeabi_d2f>
 8002596:	4602      	mov	r2, r0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	659a      	str	r2, [r3, #88]	@ 0x58
	qei -> mmpss = qei -> ppss * 16.0 / (float)(qei -> ppr); // Acceleration in mm/s^2
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd ff9d 	bl	80004e0 <__aeabi_f2d>
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002614 <Update_qei+0x42c>)
 80025ac:	f7fd fff0 	bl	8000590 <__aeabi_dmul>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4614      	mov	r4, r2
 80025b6:	461d      	mov	r5, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	ee07 3a90 	vmov	s15, r3
 80025c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c4:	ee17 0a90 	vmov	r0, s15
 80025c8:	f7fd ff8a 	bl	80004e0 <__aeabi_f2d>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4620      	mov	r0, r4
 80025d2:	4629      	mov	r1, r5
 80025d4:	f7fe f906 	bl	80007e4 <__aeabi_ddiv>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	f7fe fab8 	bl	8000b54 <__aeabi_d2f>
 80025e4:	4602      	mov	r2, r0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	65da      	str	r2, [r3, #92]	@ 0x5c

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	611a      	str	r2, [r3, #16]
	qei -> velocity_value[OLD] = qei -> velocity_value[NEW];
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	649a      	str	r2, [r3, #72]	@ 0x48

}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002604:	f3af 8000 	nop.w
 8002608:	54442d18 	.word	0x54442d18
 800260c:	400921fb 	.word	0x400921fb
 8002610:	404e0000 	.word	0x404e0000
 8002614:	40300000 	.word	0x40300000

08002618 <Reset_qei>:

void Reset_qei(QEI* qei){
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	qei -> counter_value[NEW] = 0;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0.0;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps = 0.0;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> mmps = 0.0;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	641a      	str	r2, [r3, #64]	@ 0x40
	qei -> radpss = 0.0;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> rpms = 0.0;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	659a      	str	r2, [r3, #88]	@ 0x58
	qei -> mmpss = 0.0;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	65da      	str	r2, [r3, #92]	@ 0x5c
	qei -> velocity_value[NEW] = 0;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	645a      	str	r2, [r3, #68]	@ 0x44
	qei -> velocity_value[OLD] = 0;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <Get_mmps>:

float32_t Get_mmps(QEI* qei){
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
	return qei -> mmps;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	ee07 3a90 	vmov	s15, r3
}
 80026c2:	eeb0 0a67 	vmov.f32	s0, s15
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <homing>:
#include "state.h"

void homing(HOME* home, GPIO_TypeDef* GPIO_Prox, uint16_t GPIO_Pin_Prox, TIM_HandleTypeDef* htim, uint16_t htim_channel
		, GPIO_TypeDef* GPIO_PWM, uint16_t GPIO_Pin_PWM, u16u8_t* registerFrame[200]
		, GPIO_TypeDef* GPIO_HomingButton, uint16_t GPIO_Pin_HomingButton, QEI* encoder)
{
 80026d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d4:	b08a      	sub	sp, #40	@ 0x28
 80026d6:	af02      	add	r7, sp, #8
 80026d8:	61f8      	str	r0, [r7, #28]
 80026da:	61b9      	str	r1, [r7, #24]
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	4613      	mov	r3, r2
 80026e0:	82fb      	strh	r3, [r7, #22]
	static uint64_t is_home_ts = 0;
	// Clear is_home variable if is_home_ts = 1 mins is_home will clear
	if(is_home_ts == 480000){
 80026e2:	4ba3      	ldr	r3, [pc, #652]	@ (8002970 <homing+0x2a0>)
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	49a2      	ldr	r1, [pc, #648]	@ (8002974 <homing+0x2a4>)
 80026ea:	4411      	add	r1, r2
 80026ec:	430b      	orrs	r3, r1
 80026ee:	d109      	bne.n	8002704 <homing+0x34>
		home -> is_home = 0;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	2200      	movs	r2, #0
 80026f4:	70da      	strb	r2, [r3, #3]
		is_home_ts = 0;
 80026f6:	499e      	ldr	r1, [pc, #632]	@ (8002970 <homing+0x2a0>)
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9c1 2300 	strd	r2, r3, [r1]
	}
	// Check homing command from Homing button and Base system command
	if(state == 0b0010){
 8002704:	4b9c      	ldr	r3, [pc, #624]	@ (8002978 <homing+0x2a8>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d10d      	bne.n	8002728 <homing+0x58>
		home -> homing_command = 1;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2201      	movs	r2, #1
 8002710:	709a      	strb	r2, [r3, #2]
		registerFrame[0x01] -> U16 = 0b0000;
 8002712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002714:	3304      	adds	r3, #4
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2200      	movs	r2, #0
 800271a:	801a      	strh	r2, [r3, #0]
		registerFrame[0x10] -> U16 = 0b0010;
 800271c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800271e:	3340      	adds	r3, #64	@ 0x40
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2202      	movs	r2, #2
 8002724:	801a      	strh	r2, [r3, #0]
 8002726:	e1c6      	b.n	8002ab6 <homing+0x3e6>
	}
	else if(HAL_GPIO_ReadPin(GPIO_HomingButton, GPIO_Pin_HomingButton)){
 8002728:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800272c:	4619      	mov	r1, r3
 800272e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002730:	f003 f962 	bl	80059f8 <HAL_GPIO_ReadPin>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <homing+0x7c>
		home -> homing_command = 1;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	2201      	movs	r2, #1
 800273e:	709a      	strb	r2, [r3, #2]
		registerFrame[0x10] -> U16 = 0b0010;
 8002740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002742:	3340      	adds	r3, #64	@ 0x40
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2202      	movs	r2, #2
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	e1b4      	b.n	8002ab6 <homing+0x3e6>
	}
	// If we have homing command
	else if(home -> homing_command){
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	789b      	ldrb	r3, [r3, #2]
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 81a6 	beq.w	8002aa2 <homing+0x3d2>
		if(home -> homing_state[0] == 0){
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d132      	bne.n	80027c4 <homing+0xf4>
			// Homing state selection
			// Robot is actually home
			if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && home -> is_home){
 800275e:	8afb      	ldrh	r3, [r7, #22]
 8002760:	4619      	mov	r1, r3
 8002762:	69b8      	ldr	r0, [r7, #24]
 8002764:	f003 f948 	bl	80059f8 <HAL_GPIO_ReadPin>
 8002768:	4603      	mov	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d107      	bne.n	800277e <homing+0xae>
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	78db      	ldrb	r3, [r3, #3]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <homing+0xae>
				home -> homing_state[1] = 1;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	2201      	movs	r2, #1
 800277a:	705a      	strb	r2, [r3, #1]
 800277c:	e01e      	b.n	80027bc <homing+0xec>
			}
			// Robot is not home but proximity is detecting
			else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && !(home -> is_home)){
 800277e:	8afb      	ldrh	r3, [r7, #22]
 8002780:	4619      	mov	r1, r3
 8002782:	69b8      	ldr	r0, [r7, #24]
 8002784:	f003 f938 	bl	80059f8 <HAL_GPIO_ReadPin>
 8002788:	4603      	mov	r3, r0
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <homing+0xce>
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	78db      	ldrb	r3, [r3, #3]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d103      	bne.n	800279e <homing+0xce>
				home -> homing_state[1] = 2;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	2202      	movs	r2, #2
 800279a:	705a      	strb	r2, [r3, #1]
 800279c:	e00e      	b.n	80027bc <homing+0xec>
			}
			// Robot is not home and proximity isn't detecting
			else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && !(home -> is_home)){
 800279e:	8afb      	ldrh	r3, [r7, #22]
 80027a0:	4619      	mov	r1, r3
 80027a2:	69b8      	ldr	r0, [r7, #24]
 80027a4:	f003 f928 	bl	80059f8 <HAL_GPIO_ReadPin>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <homing+0xec>
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	78db      	ldrb	r3, [r3, #3]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d102      	bne.n	80027bc <homing+0xec>
				home -> homing_state[1] = 3;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	2203      	movs	r2, #3
 80027ba:	705a      	strb	r2, [r3, #1]
			}
			// Set homing state
			home -> homing_state[0] = 1;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e178      	b.n	8002ab6 <homing+0x3e6>
		}
		else if(home -> homing_state[0] == 1){
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	f040 8174 	bne.w	8002ab6 <homing+0x3e6>
			static uint64_t homing_ts = 0; // Start homing time stamp
			// Homing
			if(home -> homing_state[1] == 1){
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	785b      	ldrb	r3, [r3, #1]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d11b      	bne.n	800280e <homing+0x13e>
				Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
 80027d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80027da:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80027de:	2200      	movs	r2, #0
 80027e0:	9200      	str	r2, [sp, #0]
 80027e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027e4:	6938      	ldr	r0, [r7, #16]
 80027e6:	f7ff fc0f 	bl	8002008 <Update_pwm>
				home -> homing_command = 0;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	2200      	movs	r2, #0
 80027ee:	709a      	strb	r2, [r3, #2]
				home -> homing_state[0] = 0;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
				Reset_qei(encoder); // Reset encoder parameter
 80027f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80027f8:	f7ff ff0e 	bl	8002618 <Reset_qei>
				home -> is_home = 1;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2201      	movs	r2, #1
 8002800:	70da      	strb	r2, [r3, #3]
				registerFrame[0x10] -> U16 = 0b0000;
 8002802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002804:	3340      	adds	r3, #64	@ 0x40
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2200      	movs	r2, #0
 800280a:	801a      	strh	r2, [r3, #0]
				return;
 800280c:	e153      	b.n	8002ab6 <homing+0x3e6>
			}
			else if(home -> homing_state[1] == 2){
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d172      	bne.n	80028fc <homing+0x22c>
				home -> homing_state[1] = 1;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	2201      	movs	r2, #1
 800281a:	705a      	strb	r2, [r3, #1]
				if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1){
 800281c:	8afb      	ldrh	r3, [r7, #22]
 800281e:	4619      	mov	r1, r3
 8002820:	69b8      	ldr	r0, [r7, #24]
 8002822:	f003 f8e9 	bl	80059f8 <HAL_GPIO_ReadPin>
 8002826:	4603      	mov	r3, r0
 8002828:	2b01      	cmp	r3, #1
 800282a:	d125      	bne.n	8002878 <homing+0x1a8>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0); // Stop when proximity was detected
 800282c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002830:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8002834:	2200      	movs	r2, #0
 8002836:	9200      	str	r2, [sp, #0]
 8002838:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800283a:	6938      	ldr	r0, [r7, #16]
 800283c:	f7ff fbe4 	bl	8002008 <Update_pwm>
					// Reset homing state and other
					homing_ts = 0;
 8002840:	494e      	ldr	r1, [pc, #312]	@ (800297c <homing+0x2ac>)
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	e9c1 2300 	strd	r2, r3, [r1]
					home -> homing_state[0] = 0;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
					home -> homing_state[1] = 0;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	2200      	movs	r2, #0
 8002858:	705a      	strb	r2, [r3, #1]
					home -> homing_command = 0;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	2200      	movs	r2, #0
 800285e:	709a      	strb	r2, [r3, #2]
					Reset_qei(encoder); // Reset encoder parameter
 8002860:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002862:	f7ff fed9 	bl	8002618 <Reset_qei>
					home -> is_home = 1;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	2201      	movs	r2, #1
 800286a:	70da      	strb	r2, [r3, #3]
					registerFrame[0x10] -> U16 = 0b0000;
 800286c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800286e:	3340      	adds	r3, #64	@ 0x40
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2200      	movs	r2, #0
 8002874:	801a      	strh	r2, [r3, #0]
					return;
 8002876:	e11e      	b.n	8002ab6 <homing+0x3e6>
				}else if(homing_ts == 0){
 8002878:	4b40      	ldr	r3, [pc, #256]	@ (800297c <homing+0x2ac>)
 800287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287e:	4313      	orrs	r3, r2
 8002880:	d10a      	bne.n	8002898 <homing+0x1c8>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 200); // Move upper
 8002882:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002886:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800288a:	22c8      	movs	r2, #200	@ 0xc8
 800288c:	9200      	str	r2, [sp, #0]
 800288e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002890:	6938      	ldr	r0, [r7, #16]
 8002892:	f7ff fbb9 	bl	8002008 <Update_pwm>
 8002896:	e023      	b.n	80028e0 <homing+0x210>
				}else if(homing_ts == 4000){ // wait 0.5 secs
 8002898:	4b38      	ldr	r3, [pc, #224]	@ (800297c <homing+0x2ac>)
 800289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289e:	f5a2 617a 	sub.w	r1, r2, #4000	@ 0xfa0
 80028a2:	430b      	orrs	r3, r1
 80028a4:	d10a      	bne.n	80028bc <homing+0x1ec>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0); // Stop
 80028a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80028aa:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80028ae:	2200      	movs	r2, #0
 80028b0:	9200      	str	r2, [sp, #0]
 80028b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028b4:	6938      	ldr	r0, [r7, #16]
 80028b6:	f7ff fba7 	bl	8002008 <Update_pwm>
 80028ba:	e011      	b.n	80028e0 <homing+0x210>
				}else if(homing_ts == 14000){ // wait 1.25 secs
 80028bc:	4b2f      	ldr	r3, [pc, #188]	@ (800297c <homing+0x2ac>)
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	492f      	ldr	r1, [pc, #188]	@ (8002980 <homing+0x2b0>)
 80028c4:	4411      	add	r1, r2
 80028c6:	430b      	orrs	r3, r1
 80028c8:	d10a      	bne.n	80028e0 <homing+0x210>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -100); // Move lower
 80028ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80028ce:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80028d2:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 80028d6:	9200      	str	r2, [sp, #0]
 80028d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028da:	6938      	ldr	r0, [r7, #16]
 80028dc:	f7ff fb94 	bl	8002008 <Update_pwm>
				}
				homing_ts++;
 80028e0:	4b26      	ldr	r3, [pc, #152]	@ (800297c <homing+0x2ac>)
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	1c51      	adds	r1, r2, #1
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	f143 0300 	adc.w	r3, r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	4b22      	ldr	r3, [pc, #136]	@ (800297c <homing+0x2ac>)
 80028f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80028f6:	e9c3 1200 	strd	r1, r2, [r3]
 80028fa:	e0dc      	b.n	8002ab6 <homing+0x3e6>
			}
			else if(home -> homing_state[1] == 3){
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	785b      	ldrb	r3, [r3, #1]
 8002900:	2b03      	cmp	r3, #3
 8002902:	f040 80d8 	bne.w	8002ab6 <homing+0x3e6>
				static uint8_t homing_first = 0;
				if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (homing_first == 1)){
 8002906:	8afb      	ldrh	r3, [r7, #22]
 8002908:	4619      	mov	r1, r3
 800290a:	69b8      	ldr	r0, [r7, #24]
 800290c:	f003 f874 	bl	80059f8 <HAL_GPIO_ReadPin>
 8002910:	4603      	mov	r3, r0
 8002912:	2b01      	cmp	r3, #1
 8002914:	d138      	bne.n	8002988 <homing+0x2b8>
 8002916:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <homing+0x2b4>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d134      	bne.n	8002988 <homing+0x2b8>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0); // Stop when proximity was detected
 800291e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002922:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8002926:	2200      	movs	r2, #0
 8002928:	9200      	str	r2, [sp, #0]
 800292a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800292c:	6938      	ldr	r0, [r7, #16]
 800292e:	f7ff fb6b 	bl	8002008 <Update_pwm>
					// Reset homing state and other
					homing_ts = 0;
 8002932:	4912      	ldr	r1, [pc, #72]	@ (800297c <homing+0x2ac>)
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	e9c1 2300 	strd	r2, r3, [r1]
					homing_first = 0;
 8002940:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <homing+0x2b4>)
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
					home -> homing_state[0] = 0;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
					home -> homing_state[1] = 0;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2200      	movs	r2, #0
 8002950:	705a      	strb	r2, [r3, #1]
					home -> homing_command = 0;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	2200      	movs	r2, #0
 8002956:	709a      	strb	r2, [r3, #2]
					Reset_qei(encoder); // Reset encoder parameter
 8002958:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800295a:	f7ff fe5d 	bl	8002618 <Reset_qei>
					home -> is_home = 1;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	2201      	movs	r2, #1
 8002962:	70da      	strb	r2, [r3, #3]
					registerFrame[0x10] -> U16 = 0b0000;
 8002964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002966:	3340      	adds	r3, #64	@ 0x40
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2200      	movs	r2, #0
 800296c:	801a      	strh	r2, [r3, #0]
					return;
 800296e:	e0a2      	b.n	8002ab6 <homing+0x3e6>
 8002970:	20000ec0 	.word	0x20000ec0
 8002974:	fff8ad00 	.word	0xfff8ad00
 8002978:	2000005c 	.word	0x2000005c
 800297c:	20000ec8 	.word	0x20000ec8
 8002980:	ffffc950 	.word	0xffffc950
 8002984:	20000ed0 	.word	0x20000ed0
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (homing_first == 0)){
 8002988:	8afb      	ldrh	r3, [r7, #22]
 800298a:	4619      	mov	r1, r3
 800298c:	69b8      	ldr	r0, [r7, #24]
 800298e:	f003 f833 	bl	80059f8 <HAL_GPIO_ReadPin>
 8002992:	4603      	mov	r3, r0
 8002994:	2b01      	cmp	r3, #1
 8002996:	d12f      	bne.n	80029f8 <homing+0x328>
 8002998:	4b49      	ldr	r3, [pc, #292]	@ (8002ac0 <homing+0x3f0>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d12b      	bne.n	80029f8 <homing+0x328>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0); // Stop when proximity was detected
 80029a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80029a4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80029a8:	2200      	movs	r2, #0
 80029aa:	9200      	str	r2, [sp, #0]
 80029ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029ae:	6938      	ldr	r0, [r7, #16]
 80029b0:	f7ff fb2a 	bl	8002008 <Update_pwm>
					homing_ts++;
 80029b4:	4b43      	ldr	r3, [pc, #268]	@ (8002ac4 <homing+0x3f4>)
 80029b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ba:	1c51      	adds	r1, r2, #1
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	f143 0300 	adc.w	r3, r3, #0
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac4 <homing+0x3f4>)
 80029c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80029ca:	e9c3 1200 	strd	r1, r2, [r3]
					if(homing_ts == 2000){ // wait 0.25 secs
 80029ce:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac4 <homing+0x3f4>)
 80029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d4:	f5a2 61fa 	sub.w	r1, r2, #2000	@ 0x7d0
 80029d8:	430b      	orrs	r3, r1
 80029da:	d16c      	bne.n	8002ab6 <homing+0x3e6>
						Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 200); // Move upper
 80029dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80029e0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80029e4:	22c8      	movs	r2, #200	@ 0xc8
 80029e6:	9200      	str	r2, [sp, #0]
 80029e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029ea:	6938      	ldr	r0, [r7, #16]
 80029ec:	f7ff fb0c 	bl	8002008 <Update_pwm>
						homing_first = 1;
 80029f0:	4b33      	ldr	r3, [pc, #204]	@ (8002ac0 <homing+0x3f0>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
					if(homing_ts == 2000){ // wait 0.25 secs
 80029f6:	e05e      	b.n	8002ab6 <homing+0x3e6>
					}
				}else if(homing_ts == 6000){ // wait 0.5 secs
 80029f8:	4b32      	ldr	r3, [pc, #200]	@ (8002ac4 <homing+0x3f4>)
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	4932      	ldr	r1, [pc, #200]	@ (8002ac8 <homing+0x3f8>)
 8002a00:	4411      	add	r1, r2
 8002a02:	430b      	orrs	r3, r1
 8002a04:	d114      	bne.n	8002a30 <homing+0x360>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0); // Stop
 8002a06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002a0a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8002a0e:	2200      	movs	r2, #0
 8002a10:	9200      	str	r2, [sp, #0]
 8002a12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a14:	6938      	ldr	r0, [r7, #16]
 8002a16:	f7ff faf7 	bl	8002008 <Update_pwm>
					homing_ts++;
 8002a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac4 <homing+0x3f4>)
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	f112 0a01 	adds.w	sl, r2, #1
 8002a24:	f143 0b00 	adc.w	fp, r3, #0
 8002a28:	4b26      	ldr	r3, [pc, #152]	@ (8002ac4 <homing+0x3f4>)
 8002a2a:	e9c3 ab00 	strd	sl, fp, [r3]
 8002a2e:	e042      	b.n	8002ab6 <homing+0x3e6>
				}else if(homing_ts == 16000){ // wait 1.25 secs
 8002a30:	4b24      	ldr	r3, [pc, #144]	@ (8002ac4 <homing+0x3f4>)
 8002a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a36:	f5a2 517a 	sub.w	r1, r2, #16000	@ 0x3e80
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	d10b      	bne.n	8002a56 <homing+0x386>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -100); // Move lower
 8002a3e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002a42:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8002a46:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8002a4a:	9200      	str	r2, [sp, #0]
 8002a4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a4e:	6938      	ldr	r0, [r7, #16]
 8002a50:	f7ff fada 	bl	8002008 <Update_pwm>
 8002a54:	e02f      	b.n	8002ab6 <homing+0x3e6>
				}else{
					if(homing_first == 1){
 8002a56:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac0 <homing+0x3f0>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d10a      	bne.n	8002a74 <homing+0x3a4>
						homing_ts++;
 8002a5e:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <homing+0x3f4>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f112 0801 	adds.w	r8, r2, #1
 8002a68:	f143 0900 	adc.w	r9, r3, #0
 8002a6c:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <homing+0x3f4>)
 8002a6e:	e9c3 8900 	strd	r8, r9, [r3]
 8002a72:	e020      	b.n	8002ab6 <homing+0x3e6>
					}else if(homing_first == 0){
 8002a74:	4b12      	ldr	r3, [pc, #72]	@ (8002ac0 <homing+0x3f0>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d11c      	bne.n	8002ab6 <homing+0x3e6>
						homing_ts = 0;
 8002a7c:	4911      	ldr	r1, [pc, #68]	@ (8002ac4 <homing+0x3f4>)
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	e9c1 2300 	strd	r2, r3, [r1]
						Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -100); // Move lower
 8002a8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002a8e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8002a92:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8002a96:	9200      	str	r2, [sp, #0]
 8002a98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a9a:	6938      	ldr	r0, [r7, #16]
 8002a9c:	f7ff fab4 	bl	8002008 <Update_pwm>
 8002aa0:	e009      	b.n	8002ab6 <homing+0x3e6>
			}
		}
	}
	// Nothing happen
	else{
		is_home_ts++;
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <homing+0x3fc>)
 8002aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa8:	1c54      	adds	r4, r2, #1
 8002aaa:	f143 0500 	adc.w	r5, r3, #0
 8002aae:	4b07      	ldr	r3, [pc, #28]	@ (8002acc <homing+0x3fc>)
 8002ab0:	e9c3 4500 	strd	r4, r5, [r3]
		return;
 8002ab4:	bf00      	nop
	}
}
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000ed0 	.word	0x20000ed0
 8002ac4:	20000ec8 	.word	0x20000ec8
 8002ac8:	ffffe890 	.word	0xffffe890
 8002acc:	20000ec0 	.word	0x20000ec0

08002ad0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <HAL_MspInit+0x44>)
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ada:	4a0e      	ldr	r2, [pc, #56]	@ (8002b14 <HAL_MspInit+0x44>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <HAL_MspInit+0x44>)
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	607b      	str	r3, [r7, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <HAL_MspInit+0x44>)
 8002af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af2:	4a08      	ldr	r2, [pc, #32]	@ (8002b14 <HAL_MspInit+0x44>)
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002afa:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <HAL_MspInit+0x44>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002b06:	f003 f863 	bl	8005bd0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000

08002b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b09e      	sub	sp, #120	@ 0x78
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b30:	f107 0310 	add.w	r3, r7, #16
 8002b34:	2254      	movs	r2, #84	@ 0x54
 8002b36:	2100      	movs	r1, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f007 fedb 	bl	800a8f4 <memset>
  if(hadc->Instance==ADC1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b46:	d167      	bne.n	8002c18 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002b48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b4c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002b4e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002b52:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b54:	f107 0310 	add.w	r3, r7, #16
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f003 fd77 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002b64:	f7ff f8dc 	bl	8001d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b68:	4b2d      	ldr	r3, [pc, #180]	@ (8002c20 <HAL_ADC_MspInit+0x108>)
 8002b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8002c20 <HAL_ADC_MspInit+0x108>)
 8002b6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b74:	4b2a      	ldr	r3, [pc, #168]	@ (8002c20 <HAL_ADC_MspInit+0x108>)
 8002b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b80:	4b27      	ldr	r3, [pc, #156]	@ (8002c20 <HAL_ADC_MspInit+0x108>)
 8002b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b84:	4a26      	ldr	r2, [pc, #152]	@ (8002c20 <HAL_ADC_MspInit+0x108>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b8c:	4b24      	ldr	r3, [pc, #144]	@ (8002c20 <HAL_ADC_MspInit+0x108>)
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8002ba4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bae:	f002 fda1 	bl	80056f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c24 <HAL_ADC_MspInit+0x10c>)
 8002bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c28 <HAL_ADC_MspInit+0x110>)
 8002bb6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c24 <HAL_ADC_MspInit+0x10c>)
 8002bba:	2205      	movs	r2, #5
 8002bbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bbe:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <HAL_ADC_MspInit+0x10c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bc4:	4b17      	ldr	r3, [pc, #92]	@ (8002c24 <HAL_ADC_MspInit+0x10c>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002bca:	4b16      	ldr	r3, [pc, #88]	@ (8002c24 <HAL_ADC_MspInit+0x10c>)
 8002bcc:	2280      	movs	r2, #128	@ 0x80
 8002bce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002bd0:	4b14      	ldr	r3, [pc, #80]	@ (8002c24 <HAL_ADC_MspInit+0x10c>)
 8002bd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bd6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002bd8:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <HAL_ADC_MspInit+0x10c>)
 8002bda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bde:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002be0:	4b10      	ldr	r3, [pc, #64]	@ (8002c24 <HAL_ADC_MspInit+0x10c>)
 8002be2:	2220      	movs	r2, #32
 8002be4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002be6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <HAL_ADC_MspInit+0x10c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002bec:	480d      	ldr	r0, [pc, #52]	@ (8002c24 <HAL_ADC_MspInit+0x10c>)
 8002bee:	f002 fa4f 	bl	8005090 <HAL_DMA_Init>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002bf8:	f7ff f892 	bl	8001d20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a09      	ldr	r2, [pc, #36]	@ (8002c24 <HAL_ADC_MspInit+0x10c>)
 8002c00:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c02:	4a08      	ldr	r2, [pc, #32]	@ (8002c24 <HAL_ADC_MspInit+0x10c>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	2012      	movs	r0, #18
 8002c0e:	f002 fa0a 	bl	8005026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002c12:	2012      	movs	r0, #18
 8002c14:	f002 fa21 	bl	800505a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c18:	bf00      	nop
 8002c1a:	3778      	adds	r7, #120	@ 0x78
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40021000 	.word	0x40021000
 8002c24:	200005a8 	.word	0x200005a8
 8002c28:	40020008 	.word	0x40020008

08002c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a34      	ldr	r2, [pc, #208]	@ (8002d0c <HAL_TIM_Base_MspInit+0xe0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d114      	bne.n	8002c68 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c3e:	4b34      	ldr	r3, [pc, #208]	@ (8002d10 <HAL_TIM_Base_MspInit+0xe4>)
 8002c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c42:	4a33      	ldr	r2, [pc, #204]	@ (8002d10 <HAL_TIM_Base_MspInit+0xe4>)
 8002c44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c48:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c4a:	4b31      	ldr	r3, [pc, #196]	@ (8002d10 <HAL_TIM_Base_MspInit+0xe4>)
 8002c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002c56:	2200      	movs	r2, #0
 8002c58:	2100      	movs	r1, #0
 8002c5a:	2019      	movs	r0, #25
 8002c5c:	f002 f9e3 	bl	8005026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c60:	2019      	movs	r0, #25
 8002c62:	f002 f9fa 	bl	800505a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002c66:	e04c      	b.n	8002d02 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a29      	ldr	r2, [pc, #164]	@ (8002d14 <HAL_TIM_Base_MspInit+0xe8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d114      	bne.n	8002c9c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c72:	4b27      	ldr	r3, [pc, #156]	@ (8002d10 <HAL_TIM_Base_MspInit+0xe4>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	4a26      	ldr	r2, [pc, #152]	@ (8002d10 <HAL_TIM_Base_MspInit+0xe4>)
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c7e:	4b24      	ldr	r3, [pc, #144]	@ (8002d10 <HAL_TIM_Base_MspInit+0xe4>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	201d      	movs	r0, #29
 8002c90:	f002 f9c9 	bl	8005026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c94:	201d      	movs	r0, #29
 8002c96:	f002 f9e0 	bl	800505a <HAL_NVIC_EnableIRQ>
}
 8002c9a:	e032      	b.n	8002d02 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d18 <HAL_TIM_Base_MspInit+0xec>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d114      	bne.n	8002cd0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d10 <HAL_TIM_Base_MspInit+0xe4>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002caa:	4a19      	ldr	r2, [pc, #100]	@ (8002d10 <HAL_TIM_Base_MspInit+0xe4>)
 8002cac:	f043 0308 	orr.w	r3, r3, #8
 8002cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cb2:	4b17      	ldr	r3, [pc, #92]	@ (8002d10 <HAL_TIM_Base_MspInit+0xe4>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	2032      	movs	r0, #50	@ 0x32
 8002cc4:	f002 f9af 	bl	8005026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002cc8:	2032      	movs	r0, #50	@ 0x32
 8002cca:	f002 f9c6 	bl	800505a <HAL_NVIC_EnableIRQ>
}
 8002cce:	e018      	b.n	8002d02 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a11      	ldr	r2, [pc, #68]	@ (8002d1c <HAL_TIM_Base_MspInit+0xf0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d113      	bne.n	8002d02 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002cda:	4b0d      	ldr	r3, [pc, #52]	@ (8002d10 <HAL_TIM_Base_MspInit+0xe4>)
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cde:	4a0c      	ldr	r2, [pc, #48]	@ (8002d10 <HAL_TIM_Base_MspInit+0xe4>)
 8002ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ce4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d10 <HAL_TIM_Base_MspInit+0xe4>)
 8002ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	2019      	movs	r0, #25
 8002cf8:	f002 f995 	bl	8005026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002cfc:	2019      	movs	r0, #25
 8002cfe:	f002 f9ac 	bl	800505a <HAL_NVIC_EnableIRQ>
}
 8002d02:	bf00      	nop
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40012c00 	.word	0x40012c00
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40000400 	.word	0x40000400
 8002d18:	40000c00 	.word	0x40000c00
 8002d1c:	40014400 	.word	0x40014400

08002d20 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	@ 0x28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	f107 0314 	add.w	r3, r7, #20
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002db0 <HAL_TIM_Encoder_MspInit+0x90>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d131      	bne.n	8002da6 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d42:	4b1c      	ldr	r3, [pc, #112]	@ (8002db4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d46:	4a1b      	ldr	r2, [pc, #108]	@ (8002db4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d4e:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5a:	4b16      	ldr	r3, [pc, #88]	@ (8002db4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5e:	4a15      	ldr	r2, [pc, #84]	@ (8002db4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d66:	4b13      	ldr	r3, [pc, #76]	@ (8002db4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8002d72:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002d84:	230a      	movs	r3, #10
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d88:	f107 0314 	add.w	r3, r7, #20
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d92:	f002 fcaf 	bl	80056f4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d96:	2200      	movs	r2, #0
 8002d98:	2100      	movs	r1, #0
 8002d9a:	201e      	movs	r0, #30
 8002d9c:	f002 f943 	bl	8005026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002da0:	201e      	movs	r0, #30
 8002da2:	f002 f95a 	bl	800505a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002da6:	bf00      	nop
 8002da8:	3728      	adds	r7, #40	@ 0x28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40021000 	.word	0x40021000

08002db8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 030c 	add.w	r3, r7, #12
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a11      	ldr	r2, [pc, #68]	@ (8002e1c <HAL_TIM_MspPostInit+0x64>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d11b      	bne.n	8002e12 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dda:	4b11      	ldr	r3, [pc, #68]	@ (8002e20 <HAL_TIM_MspPostInit+0x68>)
 8002ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dde:	4a10      	ldr	r2, [pc, #64]	@ (8002e20 <HAL_TIM_MspPostInit+0x68>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002de6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e20 <HAL_TIM_MspPostInit+0x68>)
 8002de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 8002df2:	2301      	movs	r3, #1
 8002df4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002e02:	2302      	movs	r3, #2
 8002e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 8002e06:	f107 030c 	add.w	r3, r7, #12
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4805      	ldr	r0, [pc, #20]	@ (8002e24 <HAL_TIM_MspPostInit+0x6c>)
 8002e0e:	f002 fc71 	bl	80056f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e12:	bf00      	nop
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40021000 	.word	0x40021000
 8002e24:	48000800 	.word	0x48000800

08002e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b09e      	sub	sp, #120	@ 0x78
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e40:	f107 0310 	add.w	r3, r7, #16
 8002e44:	2254      	movs	r2, #84	@ 0x54
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f007 fd53 	bl	800a8f4 <memset>
  if(huart->Instance==USART2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a4d      	ldr	r2, [pc, #308]	@ (8002f88 <HAL_UART_MspInit+0x160>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	f040 8092 	bne.w	8002f7e <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e62:	f107 0310 	add.w	r3, r7, #16
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 fbf0 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e72:	f7fe ff55 	bl	8001d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e76:	4b45      	ldr	r3, [pc, #276]	@ (8002f8c <HAL_UART_MspInit+0x164>)
 8002e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7a:	4a44      	ldr	r2, [pc, #272]	@ (8002f8c <HAL_UART_MspInit+0x164>)
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e82:	4b42      	ldr	r3, [pc, #264]	@ (8002f8c <HAL_UART_MspInit+0x164>)
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f8c <HAL_UART_MspInit+0x164>)
 8002e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e92:	4a3e      	ldr	r2, [pc, #248]	@ (8002f8c <HAL_UART_MspInit+0x164>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e9a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f8c <HAL_UART_MspInit+0x164>)
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ea6:	230c      	movs	r3, #12
 8002ea8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002eb6:	2307      	movs	r3, #7
 8002eb8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ec4:	f002 fc16 	bl	80056f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8002ec8:	4b31      	ldr	r3, [pc, #196]	@ (8002f90 <HAL_UART_MspInit+0x168>)
 8002eca:	4a32      	ldr	r2, [pc, #200]	@ (8002f94 <HAL_UART_MspInit+0x16c>)
 8002ecc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002ece:	4b30      	ldr	r3, [pc, #192]	@ (8002f90 <HAL_UART_MspInit+0x168>)
 8002ed0:	221a      	movs	r2, #26
 8002ed2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8002f90 <HAL_UART_MspInit+0x168>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eda:	4b2d      	ldr	r3, [pc, #180]	@ (8002f90 <HAL_UART_MspInit+0x168>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f90 <HAL_UART_MspInit+0x168>)
 8002ee2:	2280      	movs	r2, #128	@ 0x80
 8002ee4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f90 <HAL_UART_MspInit+0x168>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eec:	4b28      	ldr	r3, [pc, #160]	@ (8002f90 <HAL_UART_MspInit+0x168>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002ef2:	4b27      	ldr	r3, [pc, #156]	@ (8002f90 <HAL_UART_MspInit+0x168>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ef8:	4b25      	ldr	r3, [pc, #148]	@ (8002f90 <HAL_UART_MspInit+0x168>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002efe:	4824      	ldr	r0, [pc, #144]	@ (8002f90 <HAL_UART_MspInit+0x168>)
 8002f00:	f002 f8c6 	bl	8005090 <HAL_DMA_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002f0a:	f7fe ff09 	bl	8001d20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1f      	ldr	r2, [pc, #124]	@ (8002f90 <HAL_UART_MspInit+0x168>)
 8002f12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002f16:	4a1e      	ldr	r2, [pc, #120]	@ (8002f90 <HAL_UART_MspInit+0x168>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8002f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002f98 <HAL_UART_MspInit+0x170>)
 8002f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002f9c <HAL_UART_MspInit+0x174>)
 8002f20:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002f22:	4b1d      	ldr	r3, [pc, #116]	@ (8002f98 <HAL_UART_MspInit+0x170>)
 8002f24:	221b      	movs	r2, #27
 8002f26:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f28:	4b1b      	ldr	r3, [pc, #108]	@ (8002f98 <HAL_UART_MspInit+0x170>)
 8002f2a:	2210      	movs	r2, #16
 8002f2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002f98 <HAL_UART_MspInit+0x170>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f34:	4b18      	ldr	r3, [pc, #96]	@ (8002f98 <HAL_UART_MspInit+0x170>)
 8002f36:	2280      	movs	r2, #128	@ 0x80
 8002f38:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f3a:	4b17      	ldr	r3, [pc, #92]	@ (8002f98 <HAL_UART_MspInit+0x170>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f40:	4b15      	ldr	r3, [pc, #84]	@ (8002f98 <HAL_UART_MspInit+0x170>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002f46:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <HAL_UART_MspInit+0x170>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f4c:	4b12      	ldr	r3, [pc, #72]	@ (8002f98 <HAL_UART_MspInit+0x170>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002f52:	4811      	ldr	r0, [pc, #68]	@ (8002f98 <HAL_UART_MspInit+0x170>)
 8002f54:	f002 f89c 	bl	8005090 <HAL_DMA_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002f5e:	f7fe fedf 	bl	8001d20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a0c      	ldr	r2, [pc, #48]	@ (8002f98 <HAL_UART_MspInit+0x170>)
 8002f66:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002f68:	4a0b      	ldr	r2, [pc, #44]	@ (8002f98 <HAL_UART_MspInit+0x170>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	2026      	movs	r0, #38	@ 0x26
 8002f74:	f002 f857 	bl	8005026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f78:	2026      	movs	r0, #38	@ 0x26
 8002f7a:	f002 f86e 	bl	800505a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f7e:	bf00      	nop
 8002f80:	3778      	adds	r7, #120	@ 0x78
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40004400 	.word	0x40004400
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	20000ad0 	.word	0x20000ad0
 8002f94:	4002001c 	.word	0x4002001c
 8002f98:	20000b30 	.word	0x20000b30
 8002f9c:	40020030 	.word	0x40020030

08002fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <NMI_Handler+0x4>

08002fa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <HardFault_Handler+0x4>

08002fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb4:	bf00      	nop
 8002fb6:	e7fd      	b.n	8002fb4 <MemManage_Handler+0x4>

08002fb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fbc:	bf00      	nop
 8002fbe:	e7fd      	b.n	8002fbc <BusFault_Handler+0x4>

08002fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fc4:	bf00      	nop
 8002fc6:	e7fd      	b.n	8002fc4 <UsageFault_Handler+0x4>

08002fc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ff6:	f000 f8fb 	bl	80031f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003004:	4802      	ldr	r0, [pc, #8]	@ (8003010 <DMA1_Channel1_IRQHandler+0x10>)
 8003006:	f002 fa26 	bl	8005456 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	200005a8 	.word	0x200005a8

08003014 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003018:	4802      	ldr	r0, [pc, #8]	@ (8003024 <DMA1_Channel2_IRQHandler+0x10>)
 800301a:	f002 fa1c 	bl	8005456 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000ad0 	.word	0x20000ad0

08003028 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800302c:	4802      	ldr	r0, [pc, #8]	@ (8003038 <DMA1_Channel3_IRQHandler+0x10>)
 800302e:	f002 fa12 	bl	8005456 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000b30 	.word	0x20000b30

0800303c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003040:	4802      	ldr	r0, [pc, #8]	@ (800304c <ADC1_2_IRQHandler+0x10>)
 8003042:	f000 fdc3 	bl	8003bcc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	2000053c 	.word	0x2000053c

08003050 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003054:	4803      	ldr	r0, [pc, #12]	@ (8003064 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003056:	f004 fa4b 	bl	80074f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800305a:	4803      	ldr	r0, [pc, #12]	@ (8003068 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800305c:	f004 fa48 	bl	80074f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000608 	.word	0x20000608
 8003068:	20000938 	.word	0x20000938

0800306c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003070:	4802      	ldr	r0, [pc, #8]	@ (800307c <TIM3_IRQHandler+0x10>)
 8003072:	f004 fa3d 	bl	80074f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200006d4 	.word	0x200006d4

08003080 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003084:	4802      	ldr	r0, [pc, #8]	@ (8003090 <TIM4_IRQHandler+0x10>)
 8003086:	f004 fa33 	bl	80074f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	200007a0 	.word	0x200007a0

08003094 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003098:	4802      	ldr	r0, [pc, #8]	@ (80030a4 <USART2_IRQHandler+0x10>)
 800309a:	f005 ff7d 	bl	8008f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000a04 	.word	0x20000a04

080030a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80030ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80030b0:	f002 fcd2 	bl	8005a58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 80030b4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80030b8:	f002 fcce 	bl	8005a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}

080030c0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80030c4:	4802      	ldr	r0, [pc, #8]	@ (80030d0 <TIM5_IRQHandler+0x10>)
 80030c6:	f004 fa13 	bl	80074f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	2000086c 	.word	0x2000086c

080030d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80030d8:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <SystemInit+0x20>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030de:	4a05      	ldr	r2, [pc, #20]	@ (80030f4 <SystemInit+0x20>)
 80030e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030f8:	480d      	ldr	r0, [pc, #52]	@ (8003130 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030fc:	f7ff ffea 	bl	80030d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003100:	480c      	ldr	r0, [pc, #48]	@ (8003134 <LoopForever+0x6>)
  ldr r1, =_edata
 8003102:	490d      	ldr	r1, [pc, #52]	@ (8003138 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003104:	4a0d      	ldr	r2, [pc, #52]	@ (800313c <LoopForever+0xe>)
  movs r3, #0
 8003106:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003108:	e002      	b.n	8003110 <LoopCopyDataInit>

0800310a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800310a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800310c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800310e:	3304      	adds	r3, #4

08003110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003114:	d3f9      	bcc.n	800310a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003116:	4a0a      	ldr	r2, [pc, #40]	@ (8003140 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003118:	4c0a      	ldr	r4, [pc, #40]	@ (8003144 <LoopForever+0x16>)
  movs r3, #0
 800311a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800311c:	e001      	b.n	8003122 <LoopFillZerobss>

0800311e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800311e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003120:	3204      	adds	r2, #4

08003122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003124:	d3fb      	bcc.n	800311e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003126:	f007 fbed 	bl	800a904 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800312a:	f7fe f845 	bl	80011b8 <main>

0800312e <LoopForever>:

LoopForever:
    b LoopForever
 800312e:	e7fe      	b.n	800312e <LoopForever>
  ldr   r0, =_estack
 8003130:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003138:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 800313c:	0800aa18 	.word	0x0800aa18
  ldr r2, =_sbss
 8003140:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8003144:	20000ed8 	.word	0x20000ed8

08003148 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003148:	e7fe      	b.n	8003148 <ADC3_IRQHandler>

0800314a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003154:	2003      	movs	r0, #3
 8003156:	f001 ff5b 	bl	8005010 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800315a:	2000      	movs	r0, #0
 800315c:	f000 f80e 	bl	800317c <HAL_InitTick>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	71fb      	strb	r3, [r7, #7]
 800316a:	e001      	b.n	8003170 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800316c:	f7ff fcb0 	bl	8002ad0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003170:	79fb      	ldrb	r3, [r7, #7]

}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003188:	4b16      	ldr	r3, [pc, #88]	@ (80031e4 <HAL_InitTick+0x68>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d022      	beq.n	80031d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003190:	4b15      	ldr	r3, [pc, #84]	@ (80031e8 <HAL_InitTick+0x6c>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <HAL_InitTick+0x68>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800319c:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	4618      	mov	r0, r3
 80031a6:	f001 ff66 	bl	8005076 <HAL_SYSTICK_Config>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10f      	bne.n	80031d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	d809      	bhi.n	80031ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031b6:	2200      	movs	r2, #0
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	f04f 30ff 	mov.w	r0, #4294967295
 80031be:	f001 ff32 	bl	8005026 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031c2:	4a0a      	ldr	r2, [pc, #40]	@ (80031ec <HAL_InitTick+0x70>)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	e007      	b.n	80031da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
 80031ce:	e004      	b.n	80031da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
 80031d4:	e001      	b.n	80031da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000038 	.word	0x20000038
 80031e8:	20000030 	.word	0x20000030
 80031ec:	20000034 	.word	0x20000034

080031f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031f4:	4b05      	ldr	r3, [pc, #20]	@ (800320c <HAL_IncTick+0x1c>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <HAL_IncTick+0x20>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4413      	add	r3, r2
 80031fe:	4a03      	ldr	r2, [pc, #12]	@ (800320c <HAL_IncTick+0x1c>)
 8003200:	6013      	str	r3, [r2, #0]
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	20000ed4 	.word	0x20000ed4
 8003210:	20000038 	.word	0x20000038

08003214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return uwTick;
 8003218:	4b03      	ldr	r3, [pc, #12]	@ (8003228 <HAL_GetTick+0x14>)
 800321a:	681b      	ldr	r3, [r3, #0]
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000ed4 	.word	0x20000ed4

0800322c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	609a      	str	r2, [r3, #8]
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	609a      	str	r2, [r3, #8]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	3360      	adds	r3, #96	@ 0x60
 80032a6:	461a      	mov	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b08      	ldr	r3, [pc, #32]	@ (80032d8 <LL_ADC_SetOffset+0x44>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80032cc:	bf00      	nop
 80032ce:	371c      	adds	r7, #28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	03fff000 	.word	0x03fff000

080032dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3360      	adds	r3, #96	@ 0x60
 80032ea:	461a      	mov	r2, r3
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	3360      	adds	r3, #96	@ 0x60
 8003318:	461a      	mov	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	431a      	orrs	r2, r3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800333e:	b480      	push	{r7}
 8003340:	b087      	sub	sp, #28
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	3360      	adds	r3, #96	@ 0x60
 800334e:	461a      	mov	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	431a      	orrs	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003368:	bf00      	nop
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3360      	adds	r3, #96	@ 0x60
 8003384:	461a      	mov	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	431a      	orrs	r2, r3
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800339e:	bf00      	nop
 80033a0:	371c      	adds	r7, #28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	615a      	str	r2, [r3, #20]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b087      	sub	sp, #28
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3330      	adds	r3, #48	@ 0x30
 8003406:	461a      	mov	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	4413      	add	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	211f      	movs	r1, #31
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	401a      	ands	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	0e9b      	lsrs	r3, r3, #26
 800342e:	f003 011f 	and.w	r1, r3, #31
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	fa01 f303 	lsl.w	r3, r1, r3
 800343c:	431a      	orrs	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003442:	bf00      	nop
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3314      	adds	r3, #20
 8003484:	461a      	mov	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	0e5b      	lsrs	r3, r3, #25
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	4413      	add	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	0d1b      	lsrs	r3, r3, #20
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2107      	movs	r1, #7
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	401a      	ands	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	0d1b      	lsrs	r3, r3, #20
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	431a      	orrs	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80034be:	bf00      	nop
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e4:	43db      	mvns	r3, r3
 80034e6:	401a      	ands	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f003 0318 	and.w	r3, r3, #24
 80034ee:	4908      	ldr	r1, [pc, #32]	@ (8003510 <LL_ADC_SetChannelSingleDiff+0x44>)
 80034f0:	40d9      	lsrs	r1, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	400b      	ands	r3, r1
 80034f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fa:	431a      	orrs	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003502:	bf00      	nop
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	0007ffff 	.word	0x0007ffff

08003514 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 031f 	and.w	r3, r3, #31
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800355c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6093      	str	r3, [r2, #8]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003580:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003584:	d101      	bne.n	800358a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80035a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035d4:	d101      	bne.n	80035da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <LL_ADC_IsEnabled+0x18>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <LL_ADC_IsEnabled+0x1a>
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003646:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800364a:	f043 0204 	orr.w	r2, r3, #4
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b04      	cmp	r3, #4
 8003670:	d101      	bne.n	8003676 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b08      	cmp	r3, #8
 8003696:	d101      	bne.n	800369c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b089      	sub	sp, #36	@ 0x24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e1a9      	b.n	8003a1a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff fa1f 	bl	8002b18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff3f 	bl	8003570 <LL_ADC_IsDeepPowerDownEnabled>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d004      	beq.n	8003702 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff ff25 	bl	800354c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff ff5a 	bl	80035c0 <LL_ADC_IsInternalRegulatorEnabled>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d115      	bne.n	800373e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff ff3e 	bl	8003598 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800371c:	4b9c      	ldr	r3, [pc, #624]	@ (8003990 <HAL_ADC_Init+0x2e4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	099b      	lsrs	r3, r3, #6
 8003722:	4a9c      	ldr	r2, [pc, #624]	@ (8003994 <HAL_ADC_Init+0x2e8>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	3301      	adds	r3, #1
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003730:	e002      	b.n	8003738 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3b01      	subs	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f9      	bne.n	8003732 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff3c 	bl	80035c0 <LL_ADC_IsInternalRegulatorEnabled>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10d      	bne.n	800376a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003752:	f043 0210 	orr.w	r2, r3, #16
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375e:	f043 0201 	orr.w	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff ff75 	bl	800365e <LL_ADC_REG_IsConversionOngoing>
 8003774:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b00      	cmp	r3, #0
 8003780:	f040 8142 	bne.w	8003a08 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f040 813e 	bne.w	8003a08 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003790:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003794:	f043 0202 	orr.w	r2, r3, #2
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff ff35 	bl	8003610 <LL_ADC_IsEnabled>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d141      	bne.n	8003830 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037b4:	d004      	beq.n	80037c0 <HAL_ADC_Init+0x114>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a77      	ldr	r2, [pc, #476]	@ (8003998 <HAL_ADC_Init+0x2ec>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d10f      	bne.n	80037e0 <HAL_ADC_Init+0x134>
 80037c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80037c4:	f7ff ff24 	bl	8003610 <LL_ADC_IsEnabled>
 80037c8:	4604      	mov	r4, r0
 80037ca:	4873      	ldr	r0, [pc, #460]	@ (8003998 <HAL_ADC_Init+0x2ec>)
 80037cc:	f7ff ff20 	bl	8003610 <LL_ADC_IsEnabled>
 80037d0:	4603      	mov	r3, r0
 80037d2:	4323      	orrs	r3, r4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bf0c      	ite	eq
 80037d8:	2301      	moveq	r3, #1
 80037da:	2300      	movne	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e012      	b.n	8003806 <HAL_ADC_Init+0x15a>
 80037e0:	486e      	ldr	r0, [pc, #440]	@ (800399c <HAL_ADC_Init+0x2f0>)
 80037e2:	f7ff ff15 	bl	8003610 <LL_ADC_IsEnabled>
 80037e6:	4604      	mov	r4, r0
 80037e8:	486d      	ldr	r0, [pc, #436]	@ (80039a0 <HAL_ADC_Init+0x2f4>)
 80037ea:	f7ff ff11 	bl	8003610 <LL_ADC_IsEnabled>
 80037ee:	4603      	mov	r3, r0
 80037f0:	431c      	orrs	r4, r3
 80037f2:	486c      	ldr	r0, [pc, #432]	@ (80039a4 <HAL_ADC_Init+0x2f8>)
 80037f4:	f7ff ff0c 	bl	8003610 <LL_ADC_IsEnabled>
 80037f8:	4603      	mov	r3, r0
 80037fa:	4323      	orrs	r3, r4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d012      	beq.n	8003830 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003812:	d004      	beq.n	800381e <HAL_ADC_Init+0x172>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a5f      	ldr	r2, [pc, #380]	@ (8003998 <HAL_ADC_Init+0x2ec>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_ADC_Init+0x176>
 800381e:	4a62      	ldr	r2, [pc, #392]	@ (80039a8 <HAL_ADC_Init+0x2fc>)
 8003820:	e000      	b.n	8003824 <HAL_ADC_Init+0x178>
 8003822:	4a62      	ldr	r2, [pc, #392]	@ (80039ac <HAL_ADC_Init+0x300>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f7ff fcfe 	bl	800322c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7f5b      	ldrb	r3, [r3, #29]
 8003834:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800383a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003840:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003846:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800384e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800385a:	2b01      	cmp	r3, #1
 800385c:	d106      	bne.n	800386c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003862:	3b01      	subs	r3, #1
 8003864:	045b      	lsls	r3, r3, #17
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003878:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	4b48      	ldr	r3, [pc, #288]	@ (80039b0 <HAL_ADC_Init+0x304>)
 8003890:	4013      	ands	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	69b9      	ldr	r1, [r7, #24]
 8003898:	430b      	orrs	r3, r1
 800389a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fee4 	bl	8003684 <LL_ADC_INJ_IsConversionOngoing>
 80038bc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d17f      	bne.n	80039c4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d17c      	bne.n	80039c4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038ce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038d6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038e6:	f023 0302 	bic.w	r3, r3, #2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	430b      	orrs	r3, r1
 80038f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d017      	beq.n	800392c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800390a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003914:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003918:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6911      	ldr	r1, [r2, #16]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	430b      	orrs	r3, r1
 8003926:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800392a:	e013      	b.n	8003954 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800393a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800394c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003950:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800395a:	2b01      	cmp	r3, #1
 800395c:	d12a      	bne.n	80039b4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003968:	f023 0304 	bic.w	r3, r3, #4
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003974:	4311      	orrs	r1, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800397a:	4311      	orrs	r1, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003980:	430a      	orrs	r2, r1
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	611a      	str	r2, [r3, #16]
 800398e:	e019      	b.n	80039c4 <HAL_ADC_Init+0x318>
 8003990:	20000030 	.word	0x20000030
 8003994:	053e2d63 	.word	0x053e2d63
 8003998:	50000100 	.word	0x50000100
 800399c:	50000400 	.word	0x50000400
 80039a0:	50000500 	.word	0x50000500
 80039a4:	50000600 	.word	0x50000600
 80039a8:	50000300 	.word	0x50000300
 80039ac:	50000700 	.word	0x50000700
 80039b0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d10c      	bne.n	80039e6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d2:	f023 010f 	bic.w	r1, r3, #15
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	1e5a      	subs	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80039e4:	e007      	b.n	80039f6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 020f 	bic.w	r2, r2, #15
 80039f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fa:	f023 0303 	bic.w	r3, r3, #3
 80039fe:	f043 0201 	orr.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a06:	e007      	b.n	8003a18 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0c:	f043 0210 	orr.w	r2, r3, #16
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3724      	adds	r7, #36	@ 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd90      	pop	{r4, r7, pc}
 8003a22:	bf00      	nop

08003a24 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a38:	d004      	beq.n	8003a44 <HAL_ADC_Start_DMA+0x20>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a5a      	ldr	r2, [pc, #360]	@ (8003ba8 <HAL_ADC_Start_DMA+0x184>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d101      	bne.n	8003a48 <HAL_ADC_Start_DMA+0x24>
 8003a44:	4b59      	ldr	r3, [pc, #356]	@ (8003bac <HAL_ADC_Start_DMA+0x188>)
 8003a46:	e000      	b.n	8003a4a <HAL_ADC_Start_DMA+0x26>
 8003a48:	4b59      	ldr	r3, [pc, #356]	@ (8003bb0 <HAL_ADC_Start_DMA+0x18c>)
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff fd62 	bl	8003514 <LL_ADC_GetMultimode>
 8003a50:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fe01 	bl	800365e <LL_ADC_REG_IsConversionOngoing>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f040 809b 	bne.w	8003b9a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_ADC_Start_DMA+0x4e>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e096      	b.n	8003ba0 <HAL_ADC_Start_DMA+0x17c>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a4d      	ldr	r2, [pc, #308]	@ (8003bb4 <HAL_ADC_Start_DMA+0x190>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d008      	beq.n	8003a96 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b05      	cmp	r3, #5
 8003a8e:	d002      	beq.n	8003a96 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b09      	cmp	r3, #9
 8003a94:	d17a      	bne.n	8003b8c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 ff60 	bl	800495c <ADC_Enable>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d16d      	bne.n	8003b82 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aaa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a3a      	ldr	r2, [pc, #232]	@ (8003ba8 <HAL_ADC_Start_DMA+0x184>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d009      	beq.n	8003ad8 <HAL_ADC_Start_DMA+0xb4>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a3b      	ldr	r2, [pc, #236]	@ (8003bb8 <HAL_ADC_Start_DMA+0x194>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d002      	beq.n	8003ad4 <HAL_ADC_Start_DMA+0xb0>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	e003      	b.n	8003adc <HAL_ADC_Start_DMA+0xb8>
 8003ad4:	4b39      	ldr	r3, [pc, #228]	@ (8003bbc <HAL_ADC_Start_DMA+0x198>)
 8003ad6:	e001      	b.n	8003adc <HAL_ADC_Start_DMA+0xb8>
 8003ad8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d002      	beq.n	8003aea <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d105      	bne.n	8003af6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aee:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d006      	beq.n	8003b10 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b06:	f023 0206 	bic.w	r2, r3, #6
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003b0e:	e002      	b.n	8003b16 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1a:	4a29      	ldr	r2, [pc, #164]	@ (8003bc0 <HAL_ADC_Start_DMA+0x19c>)
 8003b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b22:	4a28      	ldr	r2, [pc, #160]	@ (8003bc4 <HAL_ADC_Start_DMA+0x1a0>)
 8003b24:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2a:	4a27      	ldr	r2, [pc, #156]	@ (8003bc8 <HAL_ADC_Start_DMA+0x1a4>)
 8003b2c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	221c      	movs	r2, #28
 8003b34:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0210 	orr.w	r2, r2, #16
 8003b4c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0201 	orr.w	r2, r2, #1
 8003b5c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3340      	adds	r3, #64	@ 0x40
 8003b68:	4619      	mov	r1, r3
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f001 fb37 	bl	80051e0 <HAL_DMA_Start_IT>
 8003b72:	4603      	mov	r3, r0
 8003b74:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fd5b 	bl	8003636 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003b80:	e00d      	b.n	8003b9e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003b8a:	e008      	b.n	8003b9e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003b98:	e001      	b.n	8003b9e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	50000100 	.word	0x50000100
 8003bac:	50000300 	.word	0x50000300
 8003bb0:	50000700 	.word	0x50000700
 8003bb4:	50000600 	.word	0x50000600
 8003bb8:	50000500 	.word	0x50000500
 8003bbc:	50000400 	.word	0x50000400
 8003bc0:	08004a89 	.word	0x08004a89
 8003bc4:	08004b61 	.word	0x08004b61
 8003bc8:	08004b7d 	.word	0x08004b7d

08003bcc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	@ 0x28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bf0:	d004      	beq.n	8003bfc <HAL_ADC_IRQHandler+0x30>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a8e      	ldr	r2, [pc, #568]	@ (8003e30 <HAL_ADC_IRQHandler+0x264>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d101      	bne.n	8003c00 <HAL_ADC_IRQHandler+0x34>
 8003bfc:	4b8d      	ldr	r3, [pc, #564]	@ (8003e34 <HAL_ADC_IRQHandler+0x268>)
 8003bfe:	e000      	b.n	8003c02 <HAL_ADC_IRQHandler+0x36>
 8003c00:	4b8d      	ldr	r3, [pc, #564]	@ (8003e38 <HAL_ADC_IRQHandler+0x26c>)
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fc86 	bl	8003514 <LL_ADC_GetMultimode>
 8003c08:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d017      	beq.n	8003c44 <HAL_ADC_IRQHandler+0x78>
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d012      	beq.n	8003c44 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d105      	bne.n	8003c36 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f001 f808 	bl	8004c4c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2202      	movs	r2, #2
 8003c42:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d004      	beq.n	8003c58 <HAL_ADC_IRQHandler+0x8c>
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10b      	bne.n	8003c70 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8094 	beq.w	8003d8c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 808e 	beq.w	8003d8c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d105      	bne.n	8003c88 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff fb9f 	bl	80033d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d072      	beq.n	8003d7e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a64      	ldr	r2, [pc, #400]	@ (8003e30 <HAL_ADC_IRQHandler+0x264>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d009      	beq.n	8003cb6 <HAL_ADC_IRQHandler+0xea>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a65      	ldr	r2, [pc, #404]	@ (8003e3c <HAL_ADC_IRQHandler+0x270>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d002      	beq.n	8003cb2 <HAL_ADC_IRQHandler+0xe6>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	e003      	b.n	8003cba <HAL_ADC_IRQHandler+0xee>
 8003cb2:	4b63      	ldr	r3, [pc, #396]	@ (8003e40 <HAL_ADC_IRQHandler+0x274>)
 8003cb4:	e001      	b.n	8003cba <HAL_ADC_IRQHandler+0xee>
 8003cb6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d008      	beq.n	8003cd4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d002      	beq.n	8003cd4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b09      	cmp	r3, #9
 8003cd2:	d104      	bne.n	8003cde <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	e014      	b.n	8003d08 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a53      	ldr	r2, [pc, #332]	@ (8003e30 <HAL_ADC_IRQHandler+0x264>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d009      	beq.n	8003cfc <HAL_ADC_IRQHandler+0x130>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a53      	ldr	r2, [pc, #332]	@ (8003e3c <HAL_ADC_IRQHandler+0x270>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d002      	beq.n	8003cf8 <HAL_ADC_IRQHandler+0x12c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	e003      	b.n	8003d00 <HAL_ADC_IRQHandler+0x134>
 8003cf8:	4b51      	ldr	r3, [pc, #324]	@ (8003e40 <HAL_ADC_IRQHandler+0x274>)
 8003cfa:	e001      	b.n	8003d00 <HAL_ADC_IRQHandler+0x134>
 8003cfc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003d00:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d135      	bne.n	8003d7e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d12e      	bne.n	8003d7e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fc9a 	bl	800365e <LL_ADC_REG_IsConversionOngoing>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d11a      	bne.n	8003d66 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 020c 	bic.w	r2, r2, #12
 8003d3e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d112      	bne.n	8003d7e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5c:	f043 0201 	orr.w	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d64:	e00b      	b.n	8003d7e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6a:	f043 0210 	orr.w	r2, r3, #16
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d76:	f043 0201 	orr.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f984 	bl	800408c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	220c      	movs	r2, #12
 8003d8a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d004      	beq.n	8003da0 <HAL_ADC_IRQHandler+0x1d4>
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10b      	bne.n	8003db8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80b3 	beq.w	8003f12 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 80ad 	beq.w	8003f12 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fb3a 	bl	800344e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003dda:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff faf5 	bl	80033d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003de6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a10      	ldr	r2, [pc, #64]	@ (8003e30 <HAL_ADC_IRQHandler+0x264>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d009      	beq.n	8003e06 <HAL_ADC_IRQHandler+0x23a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a11      	ldr	r2, [pc, #68]	@ (8003e3c <HAL_ADC_IRQHandler+0x270>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d002      	beq.n	8003e02 <HAL_ADC_IRQHandler+0x236>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	e003      	b.n	8003e0a <HAL_ADC_IRQHandler+0x23e>
 8003e02:	4b0f      	ldr	r3, [pc, #60]	@ (8003e40 <HAL_ADC_IRQHandler+0x274>)
 8003e04:	e001      	b.n	8003e0a <HAL_ADC_IRQHandler+0x23e>
 8003e06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d008      	beq.n	8003e24 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b06      	cmp	r3, #6
 8003e1c:	d002      	beq.n	8003e24 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b07      	cmp	r3, #7
 8003e22:	d10f      	bne.n	8003e44 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	623b      	str	r3, [r7, #32]
 8003e2c:	e01f      	b.n	8003e6e <HAL_ADC_IRQHandler+0x2a2>
 8003e2e:	bf00      	nop
 8003e30:	50000100 	.word	0x50000100
 8003e34:	50000300 	.word	0x50000300
 8003e38:	50000700 	.word	0x50000700
 8003e3c:	50000500 	.word	0x50000500
 8003e40:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a8b      	ldr	r2, [pc, #556]	@ (8004078 <HAL_ADC_IRQHandler+0x4ac>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_ADC_IRQHandler+0x296>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a8a      	ldr	r2, [pc, #552]	@ (800407c <HAL_ADC_IRQHandler+0x4b0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d002      	beq.n	8003e5e <HAL_ADC_IRQHandler+0x292>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	e003      	b.n	8003e66 <HAL_ADC_IRQHandler+0x29a>
 8003e5e:	4b88      	ldr	r3, [pc, #544]	@ (8004080 <HAL_ADC_IRQHandler+0x4b4>)
 8003e60:	e001      	b.n	8003e66 <HAL_ADC_IRQHandler+0x29a>
 8003e62:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003e66:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d047      	beq.n	8003f04 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <HAL_ADC_IRQHandler+0x2c2>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d03f      	beq.n	8003f04 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d13a      	bne.n	8003f04 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e98:	2b40      	cmp	r3, #64	@ 0x40
 8003e9a:	d133      	bne.n	8003f04 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d12e      	bne.n	8003f04 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fbea 	bl	8003684 <LL_ADC_INJ_IsConversionOngoing>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d11a      	bne.n	8003eec <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ec4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d112      	bne.n	8003f04 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee2:	f043 0201 	orr.w	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003eea:	e00b      	b.n	8003f04 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef0:	f043 0210 	orr.w	r2, r3, #16
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003efc:	f043 0201 	orr.w	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fe79 	bl	8004bfc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2260      	movs	r2, #96	@ 0x60
 8003f10:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d011      	beq.n	8003f40 <HAL_ADC_IRQHandler+0x374>
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00c      	beq.n	8003f40 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f8be 	bl	80040b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2280      	movs	r2, #128	@ 0x80
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d012      	beq.n	8003f70 <HAL_ADC_IRQHandler+0x3a4>
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f58:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fe5f 	bl	8004c24 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d012      	beq.n	8003fa0 <HAL_ADC_IRQHandler+0x3d4>
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00d      	beq.n	8003fa0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f88:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fe51 	bl	8004c38 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d043      	beq.n	8004032 <HAL_ADC_IRQHandler+0x466>
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d03e      	beq.n	8004032 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d102      	bne.n	8003fc2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc0:	e021      	b.n	8004006 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d015      	beq.n	8003ff4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fd0:	d004      	beq.n	8003fdc <HAL_ADC_IRQHandler+0x410>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a28      	ldr	r2, [pc, #160]	@ (8004078 <HAL_ADC_IRQHandler+0x4ac>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d101      	bne.n	8003fe0 <HAL_ADC_IRQHandler+0x414>
 8003fdc:	4b29      	ldr	r3, [pc, #164]	@ (8004084 <HAL_ADC_IRQHandler+0x4b8>)
 8003fde:	e000      	b.n	8003fe2 <HAL_ADC_IRQHandler+0x416>
 8003fe0:	4b29      	ldr	r3, [pc, #164]	@ (8004088 <HAL_ADC_IRQHandler+0x4bc>)
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff faa4 	bl	8003530 <LL_ADC_GetMultiDMATransfer>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff2:	e008      	b.n	8004006 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004002:	2301      	movs	r3, #1
 8004004:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	2b01      	cmp	r3, #1
 800400a:	d10e      	bne.n	800402a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004010:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401c:	f043 0202 	orr.w	r2, r3, #2
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f84f 	bl	80040c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2210      	movs	r2, #16
 8004030:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d018      	beq.n	800406e <HAL_ADC_IRQHandler+0x4a2>
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004042:	2b00      	cmp	r3, #0
 8004044:	d013      	beq.n	800406e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004056:	f043 0208 	orr.w	r2, r3, #8
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004066:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fdd1 	bl	8004c10 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800406e:	bf00      	nop
 8004070:	3728      	adds	r7, #40	@ 0x28
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	50000100 	.word	0x50000100
 800407c:	50000500 	.word	0x50000500
 8004080:	50000400 	.word	0x50000400
 8004084:	50000300 	.word	0x50000300
 8004088:	50000700 	.word	0x50000700

0800408c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b0b6      	sub	sp, #216	@ 0xd8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d102      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x24>
 80040fa:	2302      	movs	r3, #2
 80040fc:	f000 bc13 	b.w	8004926 <HAL_ADC_ConfigChannel+0x84a>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff faa6 	bl	800365e <LL_ADC_REG_IsConversionOngoing>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	f040 83f3 	bne.w	8004900 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6859      	ldr	r1, [r3, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	f7ff f965 	bl	80033f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff fa94 	bl	800365e <LL_ADC_REG_IsConversionOngoing>
 8004136:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff faa0 	bl	8003684 <LL_ADC_INJ_IsConversionOngoing>
 8004144:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004148:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800414c:	2b00      	cmp	r3, #0
 800414e:	f040 81d9 	bne.w	8004504 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004152:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004156:	2b00      	cmp	r3, #0
 8004158:	f040 81d4 	bne.w	8004504 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004164:	d10f      	bne.n	8004186 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2200      	movs	r2, #0
 8004170:	4619      	mov	r1, r3
 8004172:	f7ff f97f 	bl	8003474 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff f913 	bl	80033aa <LL_ADC_SetSamplingTimeCommonConfig>
 8004184:	e00e      	b.n	80041a4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6819      	ldr	r1, [r3, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	461a      	mov	r2, r3
 8004194:	f7ff f96e 	bl	8003474 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2100      	movs	r1, #0
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff f903 	bl	80033aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	08db      	lsrs	r3, r3, #3
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d022      	beq.n	800420c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6919      	ldr	r1, [r3, #16]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80041d6:	f7ff f85d 	bl	8003294 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	6919      	ldr	r1, [r3, #16]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f7ff f8a9 	bl	800333e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d102      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x126>
 80041fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004200:	e000      	b.n	8004204 <HAL_ADC_ConfigChannel+0x128>
 8004202:	2300      	movs	r3, #0
 8004204:	461a      	mov	r2, r3
 8004206:	f7ff f8b5 	bl	8003374 <LL_ADC_SetOffsetSaturation>
 800420a:	e17b      	b.n	8004504 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff f862 	bl	80032dc <LL_ADC_GetOffsetChannel>
 8004218:	4603      	mov	r3, r0
 800421a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10a      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x15c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff f857 	bl	80032dc <LL_ADC_GetOffsetChannel>
 800422e:	4603      	mov	r3, r0
 8004230:	0e9b      	lsrs	r3, r3, #26
 8004232:	f003 021f 	and.w	r2, r3, #31
 8004236:	e01e      	b.n	8004276 <HAL_ADC_ConfigChannel+0x19a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff f84c 	bl	80032dc <LL_ADC_GetOffsetChannel>
 8004244:	4603      	mov	r3, r0
 8004246:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004256:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800425a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800425e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004266:	2320      	movs	r3, #32
 8004268:	e004      	b.n	8004274 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800426a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800426e:	fab3 f383 	clz	r3, r3
 8004272:	b2db      	uxtb	r3, r3
 8004274:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427e:	2b00      	cmp	r3, #0
 8004280:	d105      	bne.n	800428e <HAL_ADC_ConfigChannel+0x1b2>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	0e9b      	lsrs	r3, r3, #26
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	e018      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x1e4>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004296:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800429a:	fa93 f3a3 	rbit	r3, r3
 800429e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80042a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80042aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80042b2:	2320      	movs	r3, #32
 80042b4:	e004      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80042b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d106      	bne.n	80042d2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2200      	movs	r2, #0
 80042ca:	2100      	movs	r1, #0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff f81b 	bl	8003308 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2101      	movs	r1, #1
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fe ffff 	bl	80032dc <LL_ADC_GetOffsetChannel>
 80042de:	4603      	mov	r3, r0
 80042e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x222>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2101      	movs	r1, #1
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fff4 	bl	80032dc <LL_ADC_GetOffsetChannel>
 80042f4:	4603      	mov	r3, r0
 80042f6:	0e9b      	lsrs	r3, r3, #26
 80042f8:	f003 021f 	and.w	r2, r3, #31
 80042fc:	e01e      	b.n	800433c <HAL_ADC_ConfigChannel+0x260>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2101      	movs	r1, #1
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe ffe9 	bl	80032dc <LL_ADC_GetOffsetChannel>
 800430a:	4603      	mov	r3, r0
 800430c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004314:	fa93 f3a3 	rbit	r3, r3
 8004318:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800431c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004320:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004324:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800432c:	2320      	movs	r3, #32
 800432e:	e004      	b.n	800433a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004330:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004334:	fab3 f383 	clz	r3, r3
 8004338:	b2db      	uxtb	r3, r3
 800433a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004344:	2b00      	cmp	r3, #0
 8004346:	d105      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x278>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	0e9b      	lsrs	r3, r3, #26
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	e018      	b.n	8004386 <HAL_ADC_ConfigChannel+0x2aa>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004360:	fa93 f3a3 	rbit	r3, r3
 8004364:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004368:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800436c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004370:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004378:	2320      	movs	r3, #32
 800437a:	e004      	b.n	8004386 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800437c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004380:	fab3 f383 	clz	r3, r3
 8004384:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004386:	429a      	cmp	r2, r3
 8004388:	d106      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2200      	movs	r2, #0
 8004390:	2101      	movs	r1, #1
 8004392:	4618      	mov	r0, r3
 8004394:	f7fe ffb8 	bl	8003308 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2102      	movs	r1, #2
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe ff9c 	bl	80032dc <LL_ADC_GetOffsetChannel>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x2e8>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2102      	movs	r1, #2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe ff91 	bl	80032dc <LL_ADC_GetOffsetChannel>
 80043ba:	4603      	mov	r3, r0
 80043bc:	0e9b      	lsrs	r3, r3, #26
 80043be:	f003 021f 	and.w	r2, r3, #31
 80043c2:	e01e      	b.n	8004402 <HAL_ADC_ConfigChannel+0x326>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2102      	movs	r1, #2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe ff86 	bl	80032dc <LL_ADC_GetOffsetChannel>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043da:	fa93 f3a3 	rbit	r3, r3
 80043de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80043e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80043ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80043f2:	2320      	movs	r3, #32
 80043f4:	e004      	b.n	8004400 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80043f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440a:	2b00      	cmp	r3, #0
 800440c:	d105      	bne.n	800441a <HAL_ADC_ConfigChannel+0x33e>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	0e9b      	lsrs	r3, r3, #26
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	e016      	b.n	8004448 <HAL_ADC_ConfigChannel+0x36c>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004422:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004426:	fa93 f3a3 	rbit	r3, r3
 800442a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800442c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800442e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004432:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800443a:	2320      	movs	r3, #32
 800443c:	e004      	b.n	8004448 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800443e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004442:	fab3 f383 	clz	r3, r3
 8004446:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004448:	429a      	cmp	r2, r3
 800444a:	d106      	bne.n	800445a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2200      	movs	r2, #0
 8004452:	2102      	movs	r1, #2
 8004454:	4618      	mov	r0, r3
 8004456:	f7fe ff57 	bl	8003308 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2103      	movs	r1, #3
 8004460:	4618      	mov	r0, r3
 8004462:	f7fe ff3b 	bl	80032dc <LL_ADC_GetOffsetChannel>
 8004466:	4603      	mov	r3, r0
 8004468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x3aa>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2103      	movs	r1, #3
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe ff30 	bl	80032dc <LL_ADC_GetOffsetChannel>
 800447c:	4603      	mov	r3, r0
 800447e:	0e9b      	lsrs	r3, r3, #26
 8004480:	f003 021f 	and.w	r2, r3, #31
 8004484:	e017      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x3da>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2103      	movs	r1, #3
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe ff25 	bl	80032dc <LL_ADC_GetOffsetChannel>
 8004492:	4603      	mov	r3, r0
 8004494:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004498:	fa93 f3a3 	rbit	r3, r3
 800449c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800449e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80044a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80044a8:	2320      	movs	r3, #32
 80044aa:	e003      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80044ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044ae:	fab3 f383 	clz	r3, r3
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d105      	bne.n	80044ce <HAL_ADC_ConfigChannel+0x3f2>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	0e9b      	lsrs	r3, r3, #26
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	e011      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x416>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044d6:	fa93 f3a3 	rbit	r3, r3
 80044da:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80044dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80044e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80044e6:	2320      	movs	r3, #32
 80044e8:	e003      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80044ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ec:	fab3 f383 	clz	r3, r3
 80044f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d106      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2200      	movs	r2, #0
 80044fc:	2103      	movs	r1, #3
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe ff02 	bl	8003308 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff f881 	bl	8003610 <LL_ADC_IsEnabled>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	f040 813d 	bne.w	8004790 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6819      	ldr	r1, [r3, #0]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	461a      	mov	r2, r3
 8004524:	f7fe ffd2 	bl	80034cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4aa2      	ldr	r2, [pc, #648]	@ (80047b8 <HAL_ADC_ConfigChannel+0x6dc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	f040 812e 	bne.w	8004790 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <HAL_ADC_ConfigChannel+0x480>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	0e9b      	lsrs	r3, r3, #26
 800454a:	3301      	adds	r3, #1
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	2b09      	cmp	r3, #9
 8004552:	bf94      	ite	ls
 8004554:	2301      	movls	r3, #1
 8004556:	2300      	movhi	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	e019      	b.n	8004590 <HAL_ADC_ConfigChannel+0x4b4>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004564:	fa93 f3a3 	rbit	r3, r3
 8004568:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800456a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800456c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800456e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004574:	2320      	movs	r3, #32
 8004576:	e003      	b.n	8004580 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004578:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800457a:	fab3 f383 	clz	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	3301      	adds	r3, #1
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	2b09      	cmp	r3, #9
 8004588:	bf94      	ite	ls
 800458a:	2301      	movls	r3, #1
 800458c:	2300      	movhi	r3, #0
 800458e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004590:	2b00      	cmp	r3, #0
 8004592:	d079      	beq.n	8004688 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459c:	2b00      	cmp	r3, #0
 800459e:	d107      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x4d4>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	0e9b      	lsrs	r3, r3, #26
 80045a6:	3301      	adds	r3, #1
 80045a8:	069b      	lsls	r3, r3, #26
 80045aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045ae:	e015      	b.n	80045dc <HAL_ADC_ConfigChannel+0x500>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045b8:	fa93 f3a3 	rbit	r3, r3
 80045bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80045be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80045c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80045c8:	2320      	movs	r3, #32
 80045ca:	e003      	b.n	80045d4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80045cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ce:	fab3 f383 	clz	r3, r3
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	3301      	adds	r3, #1
 80045d6:	069b      	lsls	r3, r3, #26
 80045d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d109      	bne.n	80045fc <HAL_ADC_ConfigChannel+0x520>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	0e9b      	lsrs	r3, r3, #26
 80045ee:	3301      	adds	r3, #1
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	2101      	movs	r1, #1
 80045f6:	fa01 f303 	lsl.w	r3, r1, r3
 80045fa:	e017      	b.n	800462c <HAL_ADC_ConfigChannel+0x550>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004604:	fa93 f3a3 	rbit	r3, r3
 8004608:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800460a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800460c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800460e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004614:	2320      	movs	r3, #32
 8004616:	e003      	b.n	8004620 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004618:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800461a:	fab3 f383 	clz	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	3301      	adds	r3, #1
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	2101      	movs	r1, #1
 8004628:	fa01 f303 	lsl.w	r3, r1, r3
 800462c:	ea42 0103 	orr.w	r1, r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10a      	bne.n	8004652 <HAL_ADC_ConfigChannel+0x576>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	0e9b      	lsrs	r3, r3, #26
 8004642:	3301      	adds	r3, #1
 8004644:	f003 021f 	and.w	r2, r3, #31
 8004648:	4613      	mov	r3, r2
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	4413      	add	r3, r2
 800464e:	051b      	lsls	r3, r3, #20
 8004650:	e018      	b.n	8004684 <HAL_ADC_ConfigChannel+0x5a8>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465a:	fa93 f3a3 	rbit	r3, r3
 800465e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800466a:	2320      	movs	r3, #32
 800466c:	e003      	b.n	8004676 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800466e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004670:	fab3 f383 	clz	r3, r3
 8004674:	b2db      	uxtb	r3, r3
 8004676:	3301      	adds	r3, #1
 8004678:	f003 021f 	and.w	r2, r3, #31
 800467c:	4613      	mov	r3, r2
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	4413      	add	r3, r2
 8004682:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004684:	430b      	orrs	r3, r1
 8004686:	e07e      	b.n	8004786 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x5c8>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	0e9b      	lsrs	r3, r3, #26
 800469a:	3301      	adds	r3, #1
 800469c:	069b      	lsls	r3, r3, #26
 800469e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046a2:	e015      	b.n	80046d0 <HAL_ADC_ConfigChannel+0x5f4>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ac:	fa93 f3a3 	rbit	r3, r3
 80046b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80046b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80046b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80046bc:	2320      	movs	r3, #32
 80046be:	e003      	b.n	80046c8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80046c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c2:	fab3 f383 	clz	r3, r3
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	3301      	adds	r3, #1
 80046ca:	069b      	lsls	r3, r3, #26
 80046cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x614>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	0e9b      	lsrs	r3, r3, #26
 80046e2:	3301      	adds	r3, #1
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	2101      	movs	r1, #1
 80046ea:	fa01 f303 	lsl.w	r3, r1, r3
 80046ee:	e017      	b.n	8004720 <HAL_ADC_ConfigChannel+0x644>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	fa93 f3a3 	rbit	r3, r3
 80046fc:	61fb      	str	r3, [r7, #28]
  return result;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004708:	2320      	movs	r3, #32
 800470a:	e003      	b.n	8004714 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	fab3 f383 	clz	r3, r3
 8004712:	b2db      	uxtb	r3, r3
 8004714:	3301      	adds	r3, #1
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	2101      	movs	r1, #1
 800471c:	fa01 f303 	lsl.w	r3, r1, r3
 8004720:	ea42 0103 	orr.w	r1, r2, r3
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10d      	bne.n	800474c <HAL_ADC_ConfigChannel+0x670>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	0e9b      	lsrs	r3, r3, #26
 8004736:	3301      	adds	r3, #1
 8004738:	f003 021f 	and.w	r2, r3, #31
 800473c:	4613      	mov	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	4413      	add	r3, r2
 8004742:	3b1e      	subs	r3, #30
 8004744:	051b      	lsls	r3, r3, #20
 8004746:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800474a:	e01b      	b.n	8004784 <HAL_ADC_ConfigChannel+0x6a8>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	613b      	str	r3, [r7, #16]
  return result;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004764:	2320      	movs	r3, #32
 8004766:	e003      	b.n	8004770 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b2db      	uxtb	r3, r3
 8004770:	3301      	adds	r3, #1
 8004772:	f003 021f 	and.w	r2, r3, #31
 8004776:	4613      	mov	r3, r2
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	4413      	add	r3, r2
 800477c:	3b1e      	subs	r3, #30
 800477e:	051b      	lsls	r3, r3, #20
 8004780:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004784:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800478a:	4619      	mov	r1, r3
 800478c:	f7fe fe72 	bl	8003474 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b09      	ldr	r3, [pc, #36]	@ (80047bc <HAL_ADC_ConfigChannel+0x6e0>)
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80be 	beq.w	800491a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047a6:	d004      	beq.n	80047b2 <HAL_ADC_ConfigChannel+0x6d6>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a04      	ldr	r2, [pc, #16]	@ (80047c0 <HAL_ADC_ConfigChannel+0x6e4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d10a      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x6ec>
 80047b2:	4b04      	ldr	r3, [pc, #16]	@ (80047c4 <HAL_ADC_ConfigChannel+0x6e8>)
 80047b4:	e009      	b.n	80047ca <HAL_ADC_ConfigChannel+0x6ee>
 80047b6:	bf00      	nop
 80047b8:	407f0000 	.word	0x407f0000
 80047bc:	80080000 	.word	0x80080000
 80047c0:	50000100 	.word	0x50000100
 80047c4:	50000300 	.word	0x50000300
 80047c8:	4b59      	ldr	r3, [pc, #356]	@ (8004930 <HAL_ADC_ConfigChannel+0x854>)
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe fd54 	bl	8003278 <LL_ADC_GetCommonPathInternalCh>
 80047d0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a56      	ldr	r2, [pc, #344]	@ (8004934 <HAL_ADC_ConfigChannel+0x858>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d004      	beq.n	80047e8 <HAL_ADC_ConfigChannel+0x70c>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a55      	ldr	r2, [pc, #340]	@ (8004938 <HAL_ADC_ConfigChannel+0x85c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d13a      	bne.n	800485e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d134      	bne.n	800485e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047fc:	d005      	beq.n	800480a <HAL_ADC_ConfigChannel+0x72e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a4e      	ldr	r2, [pc, #312]	@ (800493c <HAL_ADC_ConfigChannel+0x860>)
 8004804:	4293      	cmp	r3, r2
 8004806:	f040 8085 	bne.w	8004914 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004812:	d004      	beq.n	800481e <HAL_ADC_ConfigChannel+0x742>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a49      	ldr	r2, [pc, #292]	@ (8004940 <HAL_ADC_ConfigChannel+0x864>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d101      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x746>
 800481e:	4a49      	ldr	r2, [pc, #292]	@ (8004944 <HAL_ADC_ConfigChannel+0x868>)
 8004820:	e000      	b.n	8004824 <HAL_ADC_ConfigChannel+0x748>
 8004822:	4a43      	ldr	r2, [pc, #268]	@ (8004930 <HAL_ADC_ConfigChannel+0x854>)
 8004824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004828:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800482c:	4619      	mov	r1, r3
 800482e:	4610      	mov	r0, r2
 8004830:	f7fe fd0f 	bl	8003252 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004834:	4b44      	ldr	r3, [pc, #272]	@ (8004948 <HAL_ADC_ConfigChannel+0x86c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	099b      	lsrs	r3, r3, #6
 800483a:	4a44      	ldr	r2, [pc, #272]	@ (800494c <HAL_ADC_ConfigChannel+0x870>)
 800483c:	fba2 2303 	umull	r2, r3, r2, r3
 8004840:	099b      	lsrs	r3, r3, #6
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	4613      	mov	r3, r2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800484e:	e002      	b.n	8004856 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3b01      	subs	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1f9      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800485c:	e05a      	b.n	8004914 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a3b      	ldr	r2, [pc, #236]	@ (8004950 <HAL_ADC_ConfigChannel+0x874>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d125      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800486c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d11f      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a31      	ldr	r2, [pc, #196]	@ (8004940 <HAL_ADC_ConfigChannel+0x864>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d104      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x7ac>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a34      	ldr	r2, [pc, #208]	@ (8004954 <HAL_ADC_ConfigChannel+0x878>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d047      	beq.n	8004918 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004890:	d004      	beq.n	800489c <HAL_ADC_ConfigChannel+0x7c0>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a2a      	ldr	r2, [pc, #168]	@ (8004940 <HAL_ADC_ConfigChannel+0x864>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x7c4>
 800489c:	4a29      	ldr	r2, [pc, #164]	@ (8004944 <HAL_ADC_ConfigChannel+0x868>)
 800489e:	e000      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x7c6>
 80048a0:	4a23      	ldr	r2, [pc, #140]	@ (8004930 <HAL_ADC_ConfigChannel+0x854>)
 80048a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048aa:	4619      	mov	r1, r3
 80048ac:	4610      	mov	r0, r2
 80048ae:	f7fe fcd0 	bl	8003252 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048b2:	e031      	b.n	8004918 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a27      	ldr	r2, [pc, #156]	@ (8004958 <HAL_ADC_ConfigChannel+0x87c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d12d      	bne.n	800491a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d127      	bne.n	800491a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004940 <HAL_ADC_ConfigChannel+0x864>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d022      	beq.n	800491a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048dc:	d004      	beq.n	80048e8 <HAL_ADC_ConfigChannel+0x80c>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a17      	ldr	r2, [pc, #92]	@ (8004940 <HAL_ADC_ConfigChannel+0x864>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x810>
 80048e8:	4a16      	ldr	r2, [pc, #88]	@ (8004944 <HAL_ADC_ConfigChannel+0x868>)
 80048ea:	e000      	b.n	80048ee <HAL_ADC_ConfigChannel+0x812>
 80048ec:	4a10      	ldr	r2, [pc, #64]	@ (8004930 <HAL_ADC_ConfigChannel+0x854>)
 80048ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f7fe fcaa 	bl	8003252 <LL_ADC_SetCommonPathInternalCh>
 80048fe:	e00c      	b.n	800491a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004904:	f043 0220 	orr.w	r2, r3, #32
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004912:	e002      	b.n	800491a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004914:	bf00      	nop
 8004916:	e000      	b.n	800491a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004918:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004922:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004926:	4618      	mov	r0, r3
 8004928:	37d8      	adds	r7, #216	@ 0xd8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	50000700 	.word	0x50000700
 8004934:	c3210000 	.word	0xc3210000
 8004938:	90c00010 	.word	0x90c00010
 800493c:	50000600 	.word	0x50000600
 8004940:	50000100 	.word	0x50000100
 8004944:	50000300 	.word	0x50000300
 8004948:	20000030 	.word	0x20000030
 800494c:	053e2d63 	.word	0x053e2d63
 8004950:	c7520000 	.word	0xc7520000
 8004954:	50000500 	.word	0x50000500
 8004958:	cb840000 	.word	0xcb840000

0800495c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004964:	2300      	movs	r3, #0
 8004966:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f7fe fe4f 	bl	8003610 <LL_ADC_IsEnabled>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d176      	bne.n	8004a66 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	4b3c      	ldr	r3, [pc, #240]	@ (8004a70 <ADC_Enable+0x114>)
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00d      	beq.n	80049a2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498a:	f043 0210 	orr.w	r2, r3, #16
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004996:	f043 0201 	orr.w	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e062      	b.n	8004a68 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe fe1e 	bl	80035e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049b4:	d004      	beq.n	80049c0 <ADC_Enable+0x64>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004a74 <ADC_Enable+0x118>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d101      	bne.n	80049c4 <ADC_Enable+0x68>
 80049c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004a78 <ADC_Enable+0x11c>)
 80049c2:	e000      	b.n	80049c6 <ADC_Enable+0x6a>
 80049c4:	4b2d      	ldr	r3, [pc, #180]	@ (8004a7c <ADC_Enable+0x120>)
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fc56 	bl	8003278 <LL_ADC_GetCommonPathInternalCh>
 80049cc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80049ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d013      	beq.n	80049fe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004a80 <ADC_Enable+0x124>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	4a29      	ldr	r2, [pc, #164]	@ (8004a84 <ADC_Enable+0x128>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	099b      	lsrs	r3, r3, #6
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	4613      	mov	r3, r2
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049f0:	e002      	b.n	80049f8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f9      	bne.n	80049f2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049fe:	f7fe fc09 	bl	8003214 <HAL_GetTick>
 8004a02:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a04:	e028      	b.n	8004a58 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fe fe00 	bl	8003610 <LL_ADC_IsEnabled>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe fde4 	bl	80035e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a20:	f7fe fbf8 	bl	8003214 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d914      	bls.n	8004a58 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d00d      	beq.n	8004a58 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a40:	f043 0210 	orr.w	r2, r3, #16
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4c:	f043 0201 	orr.w	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e007      	b.n	8004a68 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d1cf      	bne.n	8004a06 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	8000003f 	.word	0x8000003f
 8004a74:	50000100 	.word	0x50000100
 8004a78:	50000300 	.word	0x50000300
 8004a7c:	50000700 	.word	0x50000700
 8004a80:	20000030 	.word	0x20000030
 8004a84:	053e2d63 	.word	0x053e2d63

08004a88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a9a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d14b      	bne.n	8004b3a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d021      	beq.n	8004b00 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fe fc85 	bl	80033d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d032      	beq.n	8004b32 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d12b      	bne.n	8004b32 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ade:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d11f      	bne.n	8004b32 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af6:	f043 0201 	orr.w	r2, r3, #1
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004afe:	e018      	b.n	8004b32 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d111      	bne.n	8004b32 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b12:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d105      	bne.n	8004b32 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7ff faaa 	bl	800408c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b38:	e00e      	b.n	8004b58 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f7ff fabe 	bl	80040c8 <HAL_ADC_ErrorCallback>
}
 8004b4c:	e004      	b.n	8004b58 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff fa96 	bl	80040a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b74:	bf00      	nop
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b9a:	f043 0204 	orr.w	r2, r3, #4
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff fa90 	bl	80040c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <LL_ADC_IsEnabled>:
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <LL_ADC_IsEnabled+0x18>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <LL_ADC_IsEnabled+0x1a>
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d101      	bne.n	8004bee <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004c60:	b590      	push	{r4, r7, lr}
 8004c62:	b0a1      	sub	sp, #132	@ 0x84
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e0e7      	b.n	8004e4e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004c86:	2300      	movs	r3, #0
 8004c88:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c96:	d102      	bne.n	8004c9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c98:	4b6f      	ldr	r3, [pc, #444]	@ (8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	e009      	b.n	8004cb2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a6e      	ldr	r2, [pc, #440]	@ (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d102      	bne.n	8004cae <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004ca8:	4b6d      	ldr	r3, [pc, #436]	@ (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004caa:	60bb      	str	r3, [r7, #8]
 8004cac:	e001      	b.n	8004cb2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cbc:	f043 0220 	orr.w	r2, r3, #32
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0be      	b.n	8004e4e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff ff7f 	bl	8004bd6 <LL_ADC_REG_IsConversionOngoing>
 8004cd8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff ff79 	bl	8004bd6 <LL_ADC_REG_IsConversionOngoing>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f040 80a0 	bne.w	8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004cec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 809c 	bne.w	8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cfc:	d004      	beq.n	8004d08 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a55      	ldr	r2, [pc, #340]	@ (8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d101      	bne.n	8004d0c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004d08:	4b56      	ldr	r3, [pc, #344]	@ (8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004d0a:	e000      	b.n	8004d0e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004d0c:	4b56      	ldr	r3, [pc, #344]	@ (8004e68 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004d0e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d04b      	beq.n	8004db0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d2a:	035b      	lsls	r3, r3, #13
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d3c:	d004      	beq.n	8004d48 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a45      	ldr	r2, [pc, #276]	@ (8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d10f      	bne.n	8004d68 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004d48:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d4c:	f7ff ff30 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004d50:	4604      	mov	r4, r0
 8004d52:	4841      	ldr	r0, [pc, #260]	@ (8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d54:	f7ff ff2c 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4323      	orrs	r3, r4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bf0c      	ite	eq
 8004d60:	2301      	moveq	r3, #1
 8004d62:	2300      	movne	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	e012      	b.n	8004d8e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004d68:	483c      	ldr	r0, [pc, #240]	@ (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004d6a:	f7ff ff21 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004d6e:	4604      	mov	r4, r0
 8004d70:	483b      	ldr	r0, [pc, #236]	@ (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004d72:	f7ff ff1d 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004d76:	4603      	mov	r3, r0
 8004d78:	431c      	orrs	r4, r3
 8004d7a:	483c      	ldr	r0, [pc, #240]	@ (8004e6c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004d7c:	f7ff ff18 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004d80:	4603      	mov	r3, r0
 8004d82:	4323      	orrs	r3, r4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bf0c      	ite	eq
 8004d88:	2301      	moveq	r3, #1
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d056      	beq.n	8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d9a:	f023 030f 	bic.w	r3, r3, #15
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	6811      	ldr	r1, [r2, #0]
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	6892      	ldr	r2, [r2, #8]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	431a      	orrs	r2, r3
 8004daa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dac:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004dae:	e047      	b.n	8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004db0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004db8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dc4:	d004      	beq.n	8004dd0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a23      	ldr	r2, [pc, #140]	@ (8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10f      	bne.n	8004df0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004dd0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004dd4:	f7ff feec 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004dd8:	4604      	mov	r4, r0
 8004dda:	481f      	ldr	r0, [pc, #124]	@ (8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ddc:	f7ff fee8 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004de0:	4603      	mov	r3, r0
 8004de2:	4323      	orrs	r3, r4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bf0c      	ite	eq
 8004de8:	2301      	moveq	r3, #1
 8004dea:	2300      	movne	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	e012      	b.n	8004e16 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004df0:	481a      	ldr	r0, [pc, #104]	@ (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004df2:	f7ff fedd 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004df6:	4604      	mov	r4, r0
 8004df8:	4819      	ldr	r0, [pc, #100]	@ (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004dfa:	f7ff fed9 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	431c      	orrs	r4, r3
 8004e02:	481a      	ldr	r0, [pc, #104]	@ (8004e6c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004e04:	f7ff fed4 	bl	8004bb0 <LL_ADC_IsEnabled>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4323      	orrs	r3, r4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bf0c      	ite	eq
 8004e10:	2301      	moveq	r3, #1
 8004e12:	2300      	movne	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d012      	beq.n	8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004e22:	f023 030f 	bic.w	r3, r3, #15
 8004e26:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e28:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e2a:	e009      	b.n	8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e30:	f043 0220 	orr.w	r2, r3, #32
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004e3e:	e000      	b.n	8004e42 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e4a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3784      	adds	r7, #132	@ 0x84
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd90      	pop	{r4, r7, pc}
 8004e56:	bf00      	nop
 8004e58:	50000100 	.word	0x50000100
 8004e5c:	50000400 	.word	0x50000400
 8004e60:	50000500 	.word	0x50000500
 8004e64:	50000300 	.word	0x50000300
 8004e68:	50000700 	.word	0x50000700
 8004e6c:	50000600 	.word	0x50000600

08004e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e80:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ea2:	4a04      	ldr	r2, [pc, #16]	@ (8004eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	60d3      	str	r3, [r2, #12]
}
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	e000ed00 	.word	0xe000ed00

08004eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ebc:	4b04      	ldr	r3, [pc, #16]	@ (8004ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	0a1b      	lsrs	r3, r3, #8
 8004ec2:	f003 0307 	and.w	r3, r3, #7
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	e000ed00 	.word	0xe000ed00

08004ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	db0b      	blt.n	8004efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	f003 021f 	and.w	r2, r3, #31
 8004eec:	4907      	ldr	r1, [pc, #28]	@ (8004f0c <__NVIC_EnableIRQ+0x38>)
 8004eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8004efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	e000e100 	.word	0xe000e100

08004f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	6039      	str	r1, [r7, #0]
 8004f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	db0a      	blt.n	8004f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	490c      	ldr	r1, [pc, #48]	@ (8004f5c <__NVIC_SetPriority+0x4c>)
 8004f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2e:	0112      	lsls	r2, r2, #4
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	440b      	add	r3, r1
 8004f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f38:	e00a      	b.n	8004f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	4908      	ldr	r1, [pc, #32]	@ (8004f60 <__NVIC_SetPriority+0x50>)
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	3b04      	subs	r3, #4
 8004f48:	0112      	lsls	r2, r2, #4
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	761a      	strb	r2, [r3, #24]
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	e000e100 	.word	0xe000e100
 8004f60:	e000ed00 	.word	0xe000ed00

08004f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b089      	sub	sp, #36	@ 0x24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f1c3 0307 	rsb	r3, r3, #7
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	bf28      	it	cs
 8004f82:	2304      	movcs	r3, #4
 8004f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	2b06      	cmp	r3, #6
 8004f8c:	d902      	bls.n	8004f94 <NVIC_EncodePriority+0x30>
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	3b03      	subs	r3, #3
 8004f92:	e000      	b.n	8004f96 <NVIC_EncodePriority+0x32>
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f98:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43da      	mvns	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	401a      	ands	r2, r3
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fac:	f04f 31ff 	mov.w	r1, #4294967295
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb6:	43d9      	mvns	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fbc:	4313      	orrs	r3, r2
         );
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3724      	adds	r7, #36	@ 0x24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fdc:	d301      	bcc.n	8004fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e00f      	b.n	8005002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800500c <SysTick_Config+0x40>)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fea:	210f      	movs	r1, #15
 8004fec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff0:	f7ff ff8e 	bl	8004f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ff4:	4b05      	ldr	r3, [pc, #20]	@ (800500c <SysTick_Config+0x40>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ffa:	4b04      	ldr	r3, [pc, #16]	@ (800500c <SysTick_Config+0x40>)
 8004ffc:	2207      	movs	r2, #7
 8004ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	e000e010 	.word	0xe000e010

08005010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff ff29 	bl	8004e70 <__NVIC_SetPriorityGrouping>
}
 800501e:	bf00      	nop
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b086      	sub	sp, #24
 800502a:	af00      	add	r7, sp, #0
 800502c:	4603      	mov	r3, r0
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
 8005032:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005034:	f7ff ff40 	bl	8004eb8 <__NVIC_GetPriorityGrouping>
 8005038:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	6978      	ldr	r0, [r7, #20]
 8005040:	f7ff ff90 	bl	8004f64 <NVIC_EncodePriority>
 8005044:	4602      	mov	r2, r0
 8005046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800504a:	4611      	mov	r1, r2
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff ff5f 	bl	8004f10 <__NVIC_SetPriority>
}
 8005052:	bf00      	nop
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	4603      	mov	r3, r0
 8005062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff ff33 	bl	8004ed4 <__NVIC_EnableIRQ>
}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff ffa4 	bl	8004fcc <SysTick_Config>
 8005084:	4603      	mov	r3, r0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e08d      	b.n	80051be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	4b47      	ldr	r3, [pc, #284]	@ (80051c8 <HAL_DMA_Init+0x138>)
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d80f      	bhi.n	80050ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	4b45      	ldr	r3, [pc, #276]	@ (80051cc <HAL_DMA_Init+0x13c>)
 80050b6:	4413      	add	r3, r2
 80050b8:	4a45      	ldr	r2, [pc, #276]	@ (80051d0 <HAL_DMA_Init+0x140>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	091b      	lsrs	r3, r3, #4
 80050c0:	009a      	lsls	r2, r3, #2
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a42      	ldr	r2, [pc, #264]	@ (80051d4 <HAL_DMA_Init+0x144>)
 80050ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80050cc:	e00e      	b.n	80050ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	4b40      	ldr	r3, [pc, #256]	@ (80051d8 <HAL_DMA_Init+0x148>)
 80050d6:	4413      	add	r3, r2
 80050d8:	4a3d      	ldr	r2, [pc, #244]	@ (80051d0 <HAL_DMA_Init+0x140>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	091b      	lsrs	r3, r3, #4
 80050e0:	009a      	lsls	r2, r3, #2
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a3c      	ldr	r2, [pc, #240]	@ (80051dc <HAL_DMA_Init+0x14c>)
 80050ea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005106:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005110:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800511c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005128:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fa76 	bl	8005630 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800514c:	d102      	bne.n	8005154 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005168:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d010      	beq.n	8005194 <HAL_DMA_Init+0x104>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b04      	cmp	r3, #4
 8005178:	d80c      	bhi.n	8005194 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fa96 	bl	80056ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005190:	605a      	str	r2, [r3, #4]
 8005192:	e008      	b.n	80051a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	40020407 	.word	0x40020407
 80051cc:	bffdfff8 	.word	0xbffdfff8
 80051d0:	cccccccd 	.word	0xcccccccd
 80051d4:	40020000 	.word	0x40020000
 80051d8:	bffdfbf8 	.word	0xbffdfbf8
 80051dc:	40020400 	.word	0x40020400

080051e0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_DMA_Start_IT+0x20>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e066      	b.n	80052ce <HAL_DMA_Start_IT+0xee>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b01      	cmp	r3, #1
 8005212:	d155      	bne.n	80052c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0201 	bic.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 f9bb 	bl	80055b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005242:	2b00      	cmp	r3, #0
 8005244:	d008      	beq.n	8005258 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 020e 	orr.w	r2, r2, #14
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	e00f      	b.n	8005278 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0204 	bic.w	r2, r2, #4
 8005266:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 020a 	orr.w	r2, r2, #10
 8005276:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005290:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005294:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800529a:	2b00      	cmp	r3, #0
 800529c:	d007      	beq.n	80052ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e005      	b.n	80052cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80052c8:	2302      	movs	r3, #2
 80052ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d005      	beq.n	80052fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2204      	movs	r2, #4
 80052f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
 80052f8:	e037      	b.n	800536a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 020e 	bic.w	r2, r2, #14
 8005308:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005314:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005318:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0201 	bic.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532e:	f003 021f 	and.w	r2, r3, #31
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005336:	2101      	movs	r1, #1
 8005338:	fa01 f202 	lsl.w	r2, r1, r2
 800533c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005346:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00c      	beq.n	800536a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800535a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800535e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005368:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800537a:	7bfb      	ldrb	r3, [r7, #15]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d00d      	beq.n	80053bc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2204      	movs	r2, #4
 80053a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	73fb      	strb	r3, [r7, #15]
 80053ba:	e047      	b.n	800544c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 020e 	bic.w	r2, r2, #14
 80053ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0201 	bic.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f0:	f003 021f 	and.w	r2, r3, #31
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f8:	2101      	movs	r1, #1
 80053fa:	fa01 f202 	lsl.w	r2, r1, r2
 80053fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005408:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00c      	beq.n	800542c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005420:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800542a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	4798      	blx	r3
    }
  }
  return status;
 800544c:	7bfb      	ldrb	r3, [r7, #15]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005472:	f003 031f 	and.w	r3, r3, #31
 8005476:	2204      	movs	r2, #4
 8005478:	409a      	lsls	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4013      	ands	r3, r2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d026      	beq.n	80054d0 <HAL_DMA_IRQHandler+0x7a>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d021      	beq.n	80054d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d107      	bne.n	80054aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0204 	bic.w	r2, r2, #4
 80054a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ae:	f003 021f 	and.w	r2, r3, #31
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b6:	2104      	movs	r1, #4
 80054b8:	fa01 f202 	lsl.w	r2, r1, r2
 80054bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d071      	beq.n	80055aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80054ce:	e06c      	b.n	80055aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d4:	f003 031f 	and.w	r3, r3, #31
 80054d8:	2202      	movs	r2, #2
 80054da:	409a      	lsls	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4013      	ands	r3, r2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d02e      	beq.n	8005542 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d029      	beq.n	8005542 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 020a 	bic.w	r2, r2, #10
 800550a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005518:	f003 021f 	and.w	r2, r3, #31
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005520:	2102      	movs	r1, #2
 8005522:	fa01 f202 	lsl.w	r2, r1, r2
 8005526:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d038      	beq.n	80055aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005540:	e033      	b.n	80055aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	2208      	movs	r2, #8
 800554c:	409a      	lsls	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4013      	ands	r3, r2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d02a      	beq.n	80055ac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b00      	cmp	r3, #0
 800555e:	d025      	beq.n	80055ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 020e 	bic.w	r2, r2, #14
 800556e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005574:	f003 021f 	and.w	r2, r3, #31
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557c:	2101      	movs	r1, #1
 800557e:	fa01 f202 	lsl.w	r2, r1, r2
 8005582:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055aa:	bf00      	nop
 80055ac:	bf00      	nop
}
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d004      	beq.n	80055de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e2:	f003 021f 	and.w	r2, r3, #31
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	2101      	movs	r1, #1
 80055ec:	fa01 f202 	lsl.w	r2, r1, r2
 80055f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b10      	cmp	r3, #16
 8005600:	d108      	bne.n	8005614 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005612:	e007      	b.n	8005624 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	60da      	str	r2, [r3, #12]
}
 8005624:	bf00      	nop
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	4b16      	ldr	r3, [pc, #88]	@ (8005698 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005640:	429a      	cmp	r2, r3
 8005642:	d802      	bhi.n	800564a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005644:	4b15      	ldr	r3, [pc, #84]	@ (800569c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	e001      	b.n	800564e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800564a:	4b15      	ldr	r3, [pc, #84]	@ (80056a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800564c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	3b08      	subs	r3, #8
 800565a:	4a12      	ldr	r2, [pc, #72]	@ (80056a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800565c:	fba2 2303 	umull	r2, r3, r2, r3
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005668:	089b      	lsrs	r3, r3, #2
 800566a:	009a      	lsls	r2, r3, #2
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4413      	add	r3, r2
 8005670:	461a      	mov	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a0b      	ldr	r2, [pc, #44]	@ (80056a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800567a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f003 031f 	and.w	r3, r3, #31
 8005682:	2201      	movs	r2, #1
 8005684:	409a      	lsls	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	40020407 	.word	0x40020407
 800569c:	40020800 	.word	0x40020800
 80056a0:	40020820 	.word	0x40020820
 80056a4:	cccccccd 	.word	0xcccccccd
 80056a8:	40020880 	.word	0x40020880

080056ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4b0b      	ldr	r3, [pc, #44]	@ (80056ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	461a      	mov	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a08      	ldr	r2, [pc, #32]	@ (80056f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80056ce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	f003 031f 	and.w	r3, r3, #31
 80056d8:	2201      	movs	r2, #1
 80056da:	409a      	lsls	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80056e0:	bf00      	nop
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	1000823f 	.word	0x1000823f
 80056f0:	40020940 	.word	0x40020940

080056f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056fe:	2300      	movs	r3, #0
 8005700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005702:	e15a      	b.n	80059ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	2101      	movs	r1, #1
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	fa01 f303 	lsl.w	r3, r1, r3
 8005710:	4013      	ands	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 814c 	beq.w	80059b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f003 0303 	and.w	r3, r3, #3
 8005724:	2b01      	cmp	r3, #1
 8005726:	d005      	beq.n	8005734 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005730:	2b02      	cmp	r3, #2
 8005732:	d130      	bne.n	8005796 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	2203      	movs	r2, #3
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	43db      	mvns	r3, r3
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4013      	ands	r3, r2
 800574a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800576a:	2201      	movs	r2, #1
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	43db      	mvns	r3, r3
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4013      	ands	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	091b      	lsrs	r3, r3, #4
 8005780:	f003 0201 	and.w	r2, r3, #1
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d017      	beq.n	80057d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	2203      	movs	r2, #3
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	43db      	mvns	r3, r3
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4013      	ands	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	fa02 f303 	lsl.w	r3, r2, r3
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d123      	bne.n	8005826 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	08da      	lsrs	r2, r3, #3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3208      	adds	r2, #8
 80057e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	220f      	movs	r2, #15
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	43db      	mvns	r3, r3
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4013      	ands	r3, r2
 8005800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	08da      	lsrs	r2, r3, #3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3208      	adds	r2, #8
 8005820:	6939      	ldr	r1, [r7, #16]
 8005822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	2203      	movs	r2, #3
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	43db      	mvns	r3, r3
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4013      	ands	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f003 0203 	and.w	r2, r3, #3
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	fa02 f303 	lsl.w	r3, r2, r3
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 80a6 	beq.w	80059b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005868:	4b5b      	ldr	r3, [pc, #364]	@ (80059d8 <HAL_GPIO_Init+0x2e4>)
 800586a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800586c:	4a5a      	ldr	r2, [pc, #360]	@ (80059d8 <HAL_GPIO_Init+0x2e4>)
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	6613      	str	r3, [r2, #96]	@ 0x60
 8005874:	4b58      	ldr	r3, [pc, #352]	@ (80059d8 <HAL_GPIO_Init+0x2e4>)
 8005876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005880:	4a56      	ldr	r2, [pc, #344]	@ (80059dc <HAL_GPIO_Init+0x2e8>)
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	089b      	lsrs	r3, r3, #2
 8005886:	3302      	adds	r3, #2
 8005888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	220f      	movs	r2, #15
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	43db      	mvns	r3, r3
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4013      	ands	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80058aa:	d01f      	beq.n	80058ec <HAL_GPIO_Init+0x1f8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a4c      	ldr	r2, [pc, #304]	@ (80059e0 <HAL_GPIO_Init+0x2ec>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d019      	beq.n	80058e8 <HAL_GPIO_Init+0x1f4>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a4b      	ldr	r2, [pc, #300]	@ (80059e4 <HAL_GPIO_Init+0x2f0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d013      	beq.n	80058e4 <HAL_GPIO_Init+0x1f0>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a4a      	ldr	r2, [pc, #296]	@ (80059e8 <HAL_GPIO_Init+0x2f4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00d      	beq.n	80058e0 <HAL_GPIO_Init+0x1ec>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a49      	ldr	r2, [pc, #292]	@ (80059ec <HAL_GPIO_Init+0x2f8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d007      	beq.n	80058dc <HAL_GPIO_Init+0x1e8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a48      	ldr	r2, [pc, #288]	@ (80059f0 <HAL_GPIO_Init+0x2fc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d101      	bne.n	80058d8 <HAL_GPIO_Init+0x1e4>
 80058d4:	2305      	movs	r3, #5
 80058d6:	e00a      	b.n	80058ee <HAL_GPIO_Init+0x1fa>
 80058d8:	2306      	movs	r3, #6
 80058da:	e008      	b.n	80058ee <HAL_GPIO_Init+0x1fa>
 80058dc:	2304      	movs	r3, #4
 80058de:	e006      	b.n	80058ee <HAL_GPIO_Init+0x1fa>
 80058e0:	2303      	movs	r3, #3
 80058e2:	e004      	b.n	80058ee <HAL_GPIO_Init+0x1fa>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e002      	b.n	80058ee <HAL_GPIO_Init+0x1fa>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <HAL_GPIO_Init+0x1fa>
 80058ec:	2300      	movs	r3, #0
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	f002 0203 	and.w	r2, r2, #3
 80058f4:	0092      	lsls	r2, r2, #2
 80058f6:	4093      	lsls	r3, r2
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058fe:	4937      	ldr	r1, [pc, #220]	@ (80059dc <HAL_GPIO_Init+0x2e8>)
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	089b      	lsrs	r3, r3, #2
 8005904:	3302      	adds	r3, #2
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800590c:	4b39      	ldr	r3, [pc, #228]	@ (80059f4 <HAL_GPIO_Init+0x300>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	43db      	mvns	r3, r3
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	4013      	ands	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005930:	4a30      	ldr	r2, [pc, #192]	@ (80059f4 <HAL_GPIO_Init+0x300>)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005936:	4b2f      	ldr	r3, [pc, #188]	@ (80059f4 <HAL_GPIO_Init+0x300>)
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	43db      	mvns	r3, r3
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4013      	ands	r3, r2
 8005944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800595a:	4a26      	ldr	r2, [pc, #152]	@ (80059f4 <HAL_GPIO_Init+0x300>)
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005960:	4b24      	ldr	r3, [pc, #144]	@ (80059f4 <HAL_GPIO_Init+0x300>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	43db      	mvns	r3, r3
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4013      	ands	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4313      	orrs	r3, r2
 8005982:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005984:	4a1b      	ldr	r2, [pc, #108]	@ (80059f4 <HAL_GPIO_Init+0x300>)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800598a:	4b1a      	ldr	r3, [pc, #104]	@ (80059f4 <HAL_GPIO_Init+0x300>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	43db      	mvns	r3, r3
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4013      	ands	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80059ae:	4a11      	ldr	r2, [pc, #68]	@ (80059f4 <HAL_GPIO_Init+0x300>)
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	3301      	adds	r3, #1
 80059b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	fa22 f303 	lsr.w	r3, r2, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f47f ae9d 	bne.w	8005704 <HAL_GPIO_Init+0x10>
  }
}
 80059ca:	bf00      	nop
 80059cc:	bf00      	nop
 80059ce:	371c      	adds	r7, #28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	40021000 	.word	0x40021000
 80059dc:	40010000 	.word	0x40010000
 80059e0:	48000400 	.word	0x48000400
 80059e4:	48000800 	.word	0x48000800
 80059e8:	48000c00 	.word	0x48000c00
 80059ec:	48001000 	.word	0x48001000
 80059f0:	48001400 	.word	0x48001400
 80059f4:	40010400 	.word	0x40010400

080059f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	887b      	ldrh	r3, [r7, #2]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a10:	2301      	movs	r3, #1
 8005a12:	73fb      	strb	r3, [r7, #15]
 8005a14:	e001      	b.n	8005a1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a16:	2300      	movs	r3, #0
 8005a18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	807b      	strh	r3, [r7, #2]
 8005a34:	4613      	mov	r3, r2
 8005a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a38:	787b      	ldrb	r3, [r7, #1]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a3e:	887a      	ldrh	r2, [r7, #2]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a44:	e002      	b.n	8005a4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a46:	887a      	ldrh	r2, [r7, #2]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a62:	4b08      	ldr	r3, [pc, #32]	@ (8005a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a64:	695a      	ldr	r2, [r3, #20]
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d006      	beq.n	8005a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a6e:	4a05      	ldr	r2, [pc, #20]	@ (8005a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a74:	88fb      	ldrh	r3, [r7, #6]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fc f8f8 	bl	8001c6c <HAL_GPIO_EXTI_Callback>
  }
}
 8005a7c:	bf00      	nop
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40010400 	.word	0x40010400

08005a88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d141      	bne.n	8005b1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a96:	4b4b      	ldr	r3, [pc, #300]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aa2:	d131      	bne.n	8005b08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005aa4:	4b47      	ldr	r3, [pc, #284]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aaa:	4a46      	ldr	r2, [pc, #280]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ab0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ab4:	4b43      	ldr	r3, [pc, #268]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005abc:	4a41      	ldr	r2, [pc, #260]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005abe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ac2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ac4:	4b40      	ldr	r3, [pc, #256]	@ (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2232      	movs	r2, #50	@ 0x32
 8005aca:	fb02 f303 	mul.w	r3, r2, r3
 8005ace:	4a3f      	ldr	r2, [pc, #252]	@ (8005bcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad4:	0c9b      	lsrs	r3, r3, #18
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ada:	e002      	b.n	8005ae2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ae2:	4b38      	ldr	r3, [pc, #224]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aee:	d102      	bne.n	8005af6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f2      	bne.n	8005adc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005af6:	4b33      	ldr	r3, [pc, #204]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b02:	d158      	bne.n	8005bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e057      	b.n	8005bb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b08:	4b2e      	ldr	r3, [pc, #184]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005b18:	e04d      	b.n	8005bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b20:	d141      	bne.n	8005ba6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b22:	4b28      	ldr	r3, [pc, #160]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b2e:	d131      	bne.n	8005b94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b30:	4b24      	ldr	r3, [pc, #144]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b36:	4a23      	ldr	r2, [pc, #140]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b40:	4b20      	ldr	r3, [pc, #128]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b48:	4a1e      	ldr	r2, [pc, #120]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b50:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2232      	movs	r2, #50	@ 0x32
 8005b56:	fb02 f303 	mul.w	r3, r2, r3
 8005b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8005bcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b60:	0c9b      	lsrs	r3, r3, #18
 8005b62:	3301      	adds	r3, #1
 8005b64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b66:	e002      	b.n	8005b6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b6e:	4b15      	ldr	r3, [pc, #84]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b7a:	d102      	bne.n	8005b82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f2      	bne.n	8005b68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b82:	4b10      	ldr	r3, [pc, #64]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b8e:	d112      	bne.n	8005bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e011      	b.n	8005bb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b94:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ba0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ba4:	e007      	b.n	8005bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ba6:	4b07      	ldr	r3, [pc, #28]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005bae:	4a05      	ldr	r2, [pc, #20]	@ (8005bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bb4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	40007000 	.word	0x40007000
 8005bc8:	20000030 	.word	0x20000030
 8005bcc:	431bde83 	.word	0x431bde83

08005bd0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005bd4:	4b05      	ldr	r3, [pc, #20]	@ (8005bec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	4a04      	ldr	r2, [pc, #16]	@ (8005bec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005bda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005bde:	6093      	str	r3, [r2, #8]
}
 8005be0:	bf00      	nop
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	40007000 	.word	0x40007000

08005bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e2fe      	b.n	8006200 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d075      	beq.n	8005cfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c0e:	4b97      	ldr	r3, [pc, #604]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 030c 	and.w	r3, r3, #12
 8005c16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c18:	4b94      	ldr	r3, [pc, #592]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	2b0c      	cmp	r3, #12
 8005c26:	d102      	bne.n	8005c2e <HAL_RCC_OscConfig+0x3e>
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d002      	beq.n	8005c34 <HAL_RCC_OscConfig+0x44>
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d10b      	bne.n	8005c4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c34:	4b8d      	ldr	r3, [pc, #564]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d05b      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x108>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d157      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e2d9      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c54:	d106      	bne.n	8005c64 <HAL_RCC_OscConfig+0x74>
 8005c56:	4b85      	ldr	r3, [pc, #532]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a84      	ldr	r2, [pc, #528]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	e01d      	b.n	8005ca0 <HAL_RCC_OscConfig+0xb0>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c6c:	d10c      	bne.n	8005c88 <HAL_RCC_OscConfig+0x98>
 8005c6e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a7e      	ldr	r2, [pc, #504]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	4b7c      	ldr	r3, [pc, #496]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a7b      	ldr	r2, [pc, #492]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	e00b      	b.n	8005ca0 <HAL_RCC_OscConfig+0xb0>
 8005c88:	4b78      	ldr	r3, [pc, #480]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a77      	ldr	r2, [pc, #476]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	4b75      	ldr	r3, [pc, #468]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a74      	ldr	r2, [pc, #464]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d013      	beq.n	8005cd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca8:	f7fd fab4 	bl	8003214 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cb0:	f7fd fab0 	bl	8003214 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b64      	cmp	r3, #100	@ 0x64
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e29e      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0f0      	beq.n	8005cb0 <HAL_RCC_OscConfig+0xc0>
 8005cce:	e014      	b.n	8005cfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd0:	f7fd faa0 	bl	8003214 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cd8:	f7fd fa9c 	bl	8003214 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b64      	cmp	r3, #100	@ 0x64
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e28a      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cea:	4b60      	ldr	r3, [pc, #384]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1f0      	bne.n	8005cd8 <HAL_RCC_OscConfig+0xe8>
 8005cf6:	e000      	b.n	8005cfa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d075      	beq.n	8005df2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d06:	4b59      	ldr	r3, [pc, #356]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 030c 	and.w	r3, r3, #12
 8005d0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d10:	4b56      	ldr	r3, [pc, #344]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	2b0c      	cmp	r3, #12
 8005d1e:	d102      	bne.n	8005d26 <HAL_RCC_OscConfig+0x136>
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d002      	beq.n	8005d2c <HAL_RCC_OscConfig+0x13c>
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d11f      	bne.n	8005d6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d2c:	4b4f      	ldr	r3, [pc, #316]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <HAL_RCC_OscConfig+0x154>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e25d      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d44:	4b49      	ldr	r3, [pc, #292]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	061b      	lsls	r3, r3, #24
 8005d52:	4946      	ldr	r1, [pc, #280]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d58:	4b45      	ldr	r3, [pc, #276]	@ (8005e70 <HAL_RCC_OscConfig+0x280>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fd fa0d 	bl	800317c <HAL_InitTick>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d043      	beq.n	8005df0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e249      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d023      	beq.n	8005dbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d74:	4b3d      	ldr	r3, [pc, #244]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a3c      	ldr	r2, [pc, #240]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d80:	f7fd fa48 	bl	8003214 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d88:	f7fd fa44 	bl	8003214 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e232      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d9a:	4b34      	ldr	r3, [pc, #208]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f0      	beq.n	8005d88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da6:	4b31      	ldr	r3, [pc, #196]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	061b      	lsls	r3, r3, #24
 8005db4:	492d      	ldr	r1, [pc, #180]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	604b      	str	r3, [r1, #4]
 8005dba:	e01a      	b.n	8005df2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005dc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc8:	f7fd fa24 	bl	8003214 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dd0:	f7fd fa20 	bl	8003214 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e20e      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005de2:	4b22      	ldr	r3, [pc, #136]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x1e0>
 8005dee:	e000      	b.n	8005df2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005df0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d041      	beq.n	8005e82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01c      	beq.n	8005e40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e06:	4b19      	ldr	r3, [pc, #100]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e0c:	4a17      	ldr	r2, [pc, #92]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e16:	f7fd f9fd 	bl	8003214 <HAL_GetTick>
 8005e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e1e:	f7fd f9f9 	bl	8003214 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e1e7      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e30:	4b0e      	ldr	r3, [pc, #56]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0ef      	beq.n	8005e1e <HAL_RCC_OscConfig+0x22e>
 8005e3e:	e020      	b.n	8005e82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e40:	4b0a      	ldr	r3, [pc, #40]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e46:	4a09      	ldr	r2, [pc, #36]	@ (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005e48:	f023 0301 	bic.w	r3, r3, #1
 8005e4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e50:	f7fd f9e0 	bl	8003214 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e56:	e00d      	b.n	8005e74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e58:	f7fd f9dc 	bl	8003214 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d906      	bls.n	8005e74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e1ca      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
 8005e6a:	bf00      	nop
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e74:	4b8c      	ldr	r3, [pc, #560]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1ea      	bne.n	8005e58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 80a6 	beq.w	8005fdc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e90:	2300      	movs	r3, #0
 8005e92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e94:	4b84      	ldr	r3, [pc, #528]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x2b4>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e000      	b.n	8005ea6 <HAL_RCC_OscConfig+0x2b6>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00d      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eae:	4a7e      	ldr	r2, [pc, #504]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005eb6:	4b7c      	ldr	r3, [pc, #496]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ec6:	4b79      	ldr	r3, [pc, #484]	@ (80060ac <HAL_RCC_OscConfig+0x4bc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d118      	bne.n	8005f04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ed2:	4b76      	ldr	r3, [pc, #472]	@ (80060ac <HAL_RCC_OscConfig+0x4bc>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a75      	ldr	r2, [pc, #468]	@ (80060ac <HAL_RCC_OscConfig+0x4bc>)
 8005ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ede:	f7fd f999 	bl	8003214 <HAL_GetTick>
 8005ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ee6:	f7fd f995 	bl	8003214 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e183      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ef8:	4b6c      	ldr	r3, [pc, #432]	@ (80060ac <HAL_RCC_OscConfig+0x4bc>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f0      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d108      	bne.n	8005f1e <HAL_RCC_OscConfig+0x32e>
 8005f0c:	4b66      	ldr	r3, [pc, #408]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f12:	4a65      	ldr	r2, [pc, #404]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f1c:	e024      	b.n	8005f68 <HAL_RCC_OscConfig+0x378>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b05      	cmp	r3, #5
 8005f24:	d110      	bne.n	8005f48 <HAL_RCC_OscConfig+0x358>
 8005f26:	4b60      	ldr	r3, [pc, #384]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f2c:	4a5e      	ldr	r2, [pc, #376]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005f2e:	f043 0304 	orr.w	r3, r3, #4
 8005f32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f36:	4b5c      	ldr	r3, [pc, #368]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f3c:	4a5a      	ldr	r2, [pc, #360]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005f3e:	f043 0301 	orr.w	r3, r3, #1
 8005f42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f46:	e00f      	b.n	8005f68 <HAL_RCC_OscConfig+0x378>
 8005f48:	4b57      	ldr	r3, [pc, #348]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f4e:	4a56      	ldr	r2, [pc, #344]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005f50:	f023 0301 	bic.w	r3, r3, #1
 8005f54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f58:	4b53      	ldr	r3, [pc, #332]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f5e:	4a52      	ldr	r2, [pc, #328]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005f60:	f023 0304 	bic.w	r3, r3, #4
 8005f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d016      	beq.n	8005f9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f70:	f7fd f950 	bl	8003214 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f76:	e00a      	b.n	8005f8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f78:	f7fd f94c 	bl	8003214 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e138      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f8e:	4b46      	ldr	r3, [pc, #280]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0ed      	beq.n	8005f78 <HAL_RCC_OscConfig+0x388>
 8005f9c:	e015      	b.n	8005fca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9e:	f7fd f939 	bl	8003214 <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fa4:	e00a      	b.n	8005fbc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa6:	f7fd f935 	bl	8003214 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e121      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1ed      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fca:	7ffb      	ldrb	r3, [r7, #31]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d105      	bne.n	8005fdc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fd0:	4b35      	ldr	r3, [pc, #212]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd4:	4a34      	ldr	r2, [pc, #208]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d03c      	beq.n	8006062 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01c      	beq.n	800602a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8005ff8:	f043 0301 	orr.w	r3, r3, #1
 8005ffc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006000:	f7fd f908 	bl	8003214 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006008:	f7fd f904 	bl	8003214 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e0f2      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800601a:	4b23      	ldr	r3, [pc, #140]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 800601c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0ef      	beq.n	8006008 <HAL_RCC_OscConfig+0x418>
 8006028:	e01b      	b.n	8006062 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800602a:	4b1f      	ldr	r3, [pc, #124]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 800602c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006030:	4a1d      	ldr	r2, [pc, #116]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8006032:	f023 0301 	bic.w	r3, r3, #1
 8006036:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800603a:	f7fd f8eb 	bl	8003214 <HAL_GetTick>
 800603e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006040:	e008      	b.n	8006054 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006042:	f7fd f8e7 	bl	8003214 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e0d5      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006054:	4b14      	ldr	r3, [pc, #80]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8006056:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1ef      	bne.n	8006042 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 80c9 	beq.w	80061fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800606c:	4b0e      	ldr	r3, [pc, #56]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 030c 	and.w	r3, r3, #12
 8006074:	2b0c      	cmp	r3, #12
 8006076:	f000 8083 	beq.w	8006180 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	2b02      	cmp	r3, #2
 8006080:	d15e      	bne.n	8006140 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006082:	4b09      	ldr	r3, [pc, #36]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a08      	ldr	r2, [pc, #32]	@ (80060a8 <HAL_RCC_OscConfig+0x4b8>)
 8006088:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800608c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608e:	f7fd f8c1 	bl	8003214 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006094:	e00c      	b.n	80060b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006096:	f7fd f8bd 	bl	8003214 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d905      	bls.n	80060b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e0ab      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
 80060a8:	40021000 	.word	0x40021000
 80060ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060b0:	4b55      	ldr	r3, [pc, #340]	@ (8006208 <HAL_RCC_OscConfig+0x618>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1ec      	bne.n	8006096 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060bc:	4b52      	ldr	r3, [pc, #328]	@ (8006208 <HAL_RCC_OscConfig+0x618>)
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	4b52      	ldr	r3, [pc, #328]	@ (800620c <HAL_RCC_OscConfig+0x61c>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6a11      	ldr	r1, [r2, #32]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060cc:	3a01      	subs	r2, #1
 80060ce:	0112      	lsls	r2, r2, #4
 80060d0:	4311      	orrs	r1, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80060d6:	0212      	lsls	r2, r2, #8
 80060d8:	4311      	orrs	r1, r2
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80060de:	0852      	lsrs	r2, r2, #1
 80060e0:	3a01      	subs	r2, #1
 80060e2:	0552      	lsls	r2, r2, #21
 80060e4:	4311      	orrs	r1, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80060ea:	0852      	lsrs	r2, r2, #1
 80060ec:	3a01      	subs	r2, #1
 80060ee:	0652      	lsls	r2, r2, #25
 80060f0:	4311      	orrs	r1, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80060f6:	06d2      	lsls	r2, r2, #27
 80060f8:	430a      	orrs	r2, r1
 80060fa:	4943      	ldr	r1, [pc, #268]	@ (8006208 <HAL_RCC_OscConfig+0x618>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006100:	4b41      	ldr	r3, [pc, #260]	@ (8006208 <HAL_RCC_OscConfig+0x618>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a40      	ldr	r2, [pc, #256]	@ (8006208 <HAL_RCC_OscConfig+0x618>)
 8006106:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800610a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800610c:	4b3e      	ldr	r3, [pc, #248]	@ (8006208 <HAL_RCC_OscConfig+0x618>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	4a3d      	ldr	r2, [pc, #244]	@ (8006208 <HAL_RCC_OscConfig+0x618>)
 8006112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006116:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006118:	f7fd f87c 	bl	8003214 <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006120:	f7fd f878 	bl	8003214 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e066      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006132:	4b35      	ldr	r3, [pc, #212]	@ (8006208 <HAL_RCC_OscConfig+0x618>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0f0      	beq.n	8006120 <HAL_RCC_OscConfig+0x530>
 800613e:	e05e      	b.n	80061fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006140:	4b31      	ldr	r3, [pc, #196]	@ (8006208 <HAL_RCC_OscConfig+0x618>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a30      	ldr	r2, [pc, #192]	@ (8006208 <HAL_RCC_OscConfig+0x618>)
 8006146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800614a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614c:	f7fd f862 	bl	8003214 <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006154:	f7fd f85e 	bl	8003214 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e04c      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006166:	4b28      	ldr	r3, [pc, #160]	@ (8006208 <HAL_RCC_OscConfig+0x618>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f0      	bne.n	8006154 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006172:	4b25      	ldr	r3, [pc, #148]	@ (8006208 <HAL_RCC_OscConfig+0x618>)
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	4924      	ldr	r1, [pc, #144]	@ (8006208 <HAL_RCC_OscConfig+0x618>)
 8006178:	4b25      	ldr	r3, [pc, #148]	@ (8006210 <HAL_RCC_OscConfig+0x620>)
 800617a:	4013      	ands	r3, r2
 800617c:	60cb      	str	r3, [r1, #12]
 800617e:	e03e      	b.n	80061fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e039      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800618c:	4b1e      	ldr	r3, [pc, #120]	@ (8006208 <HAL_RCC_OscConfig+0x618>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f003 0203 	and.w	r2, r3, #3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	429a      	cmp	r2, r3
 800619e:	d12c      	bne.n	80061fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061aa:	3b01      	subs	r3, #1
 80061ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d123      	bne.n	80061fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061be:	429a      	cmp	r2, r3
 80061c0:	d11b      	bne.n	80061fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d113      	bne.n	80061fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	3b01      	subs	r3, #1
 80061e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d109      	bne.n	80061fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f0:	085b      	lsrs	r3, r3, #1
 80061f2:	3b01      	subs	r3, #1
 80061f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d001      	beq.n	80061fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e000      	b.n	8006200 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3720      	adds	r7, #32
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40021000 	.word	0x40021000
 800620c:	019f800c 	.word	0x019f800c
 8006210:	feeefffc 	.word	0xfeeefffc

08006214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e11e      	b.n	800646a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800622c:	4b91      	ldr	r3, [pc, #580]	@ (8006474 <HAL_RCC_ClockConfig+0x260>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d910      	bls.n	800625c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800623a:	4b8e      	ldr	r3, [pc, #568]	@ (8006474 <HAL_RCC_ClockConfig+0x260>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f023 020f 	bic.w	r2, r3, #15
 8006242:	498c      	ldr	r1, [pc, #560]	@ (8006474 <HAL_RCC_ClockConfig+0x260>)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	4313      	orrs	r3, r2
 8006248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800624a:	4b8a      	ldr	r3, [pc, #552]	@ (8006474 <HAL_RCC_ClockConfig+0x260>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	429a      	cmp	r2, r3
 8006256:	d001      	beq.n	800625c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e106      	b.n	800646a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	d073      	beq.n	8006350 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b03      	cmp	r3, #3
 800626e:	d129      	bne.n	80062c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006270:	4b81      	ldr	r3, [pc, #516]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e0f4      	b.n	800646a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006280:	f000 f99e 	bl	80065c0 <RCC_GetSysClockFreqFromPLLSource>
 8006284:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4a7c      	ldr	r2, [pc, #496]	@ (800647c <HAL_RCC_ClockConfig+0x268>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d93f      	bls.n	800630e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800628e:	4b7a      	ldr	r3, [pc, #488]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d009      	beq.n	80062ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d033      	beq.n	800630e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d12f      	bne.n	800630e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062ae:	4b72      	ldr	r3, [pc, #456]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062b6:	4a70      	ldr	r2, [pc, #448]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 80062b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80062be:	2380      	movs	r3, #128	@ 0x80
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e024      	b.n	800630e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d107      	bne.n	80062dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062cc:	4b6a      	ldr	r3, [pc, #424]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d109      	bne.n	80062ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0c6      	b.n	800646a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062dc:	4b66      	ldr	r3, [pc, #408]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0be      	b.n	800646a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80062ec:	f000 f8ce 	bl	800648c <HAL_RCC_GetSysClockFreq>
 80062f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	4a61      	ldr	r2, [pc, #388]	@ (800647c <HAL_RCC_ClockConfig+0x268>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d909      	bls.n	800630e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062fa:	4b5f      	ldr	r3, [pc, #380]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006302:	4a5d      	ldr	r2, [pc, #372]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 8006304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006308:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800630a:	2380      	movs	r3, #128	@ 0x80
 800630c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800630e:	4b5a      	ldr	r3, [pc, #360]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f023 0203 	bic.w	r2, r3, #3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	4957      	ldr	r1, [pc, #348]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 800631c:	4313      	orrs	r3, r2
 800631e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006320:	f7fc ff78 	bl	8003214 <HAL_GetTick>
 8006324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006326:	e00a      	b.n	800633e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006328:	f7fc ff74 	bl	8003214 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006336:	4293      	cmp	r3, r2
 8006338:	d901      	bls.n	800633e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e095      	b.n	800646a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800633e:	4b4e      	ldr	r3, [pc, #312]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 020c 	and.w	r2, r3, #12
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	429a      	cmp	r2, r3
 800634e:	d1eb      	bne.n	8006328 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d023      	beq.n	80063a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006368:	4b43      	ldr	r3, [pc, #268]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	4a42      	ldr	r2, [pc, #264]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 800636e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006372:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0308 	and.w	r3, r3, #8
 800637c:	2b00      	cmp	r3, #0
 800637e:	d007      	beq.n	8006390 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006380:	4b3d      	ldr	r3, [pc, #244]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006388:	4a3b      	ldr	r2, [pc, #236]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 800638a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800638e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006390:	4b39      	ldr	r3, [pc, #228]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	4936      	ldr	r1, [pc, #216]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	608b      	str	r3, [r1, #8]
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2b80      	cmp	r3, #128	@ 0x80
 80063a8:	d105      	bne.n	80063b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80063aa:	4b33      	ldr	r3, [pc, #204]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	4a32      	ldr	r2, [pc, #200]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 80063b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063b6:	4b2f      	ldr	r3, [pc, #188]	@ (8006474 <HAL_RCC_ClockConfig+0x260>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d21d      	bcs.n	8006400 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006474 <HAL_RCC_ClockConfig+0x260>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f023 020f 	bic.w	r2, r3, #15
 80063cc:	4929      	ldr	r1, [pc, #164]	@ (8006474 <HAL_RCC_ClockConfig+0x260>)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80063d4:	f7fc ff1e 	bl	8003214 <HAL_GetTick>
 80063d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063da:	e00a      	b.n	80063f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063dc:	f7fc ff1a 	bl	8003214 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e03b      	b.n	800646a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f2:	4b20      	ldr	r3, [pc, #128]	@ (8006474 <HAL_RCC_ClockConfig+0x260>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d1ed      	bne.n	80063dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	d008      	beq.n	800641e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800640c:	4b1a      	ldr	r3, [pc, #104]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	4917      	ldr	r1, [pc, #92]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 800641a:	4313      	orrs	r3, r2
 800641c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0308 	and.w	r3, r3, #8
 8006426:	2b00      	cmp	r3, #0
 8006428:	d009      	beq.n	800643e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800642a:	4b13      	ldr	r3, [pc, #76]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	490f      	ldr	r1, [pc, #60]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 800643a:	4313      	orrs	r3, r2
 800643c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800643e:	f000 f825 	bl	800648c <HAL_RCC_GetSysClockFreq>
 8006442:	4602      	mov	r2, r0
 8006444:	4b0c      	ldr	r3, [pc, #48]	@ (8006478 <HAL_RCC_ClockConfig+0x264>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	091b      	lsrs	r3, r3, #4
 800644a:	f003 030f 	and.w	r3, r3, #15
 800644e:	490c      	ldr	r1, [pc, #48]	@ (8006480 <HAL_RCC_ClockConfig+0x26c>)
 8006450:	5ccb      	ldrb	r3, [r1, r3]
 8006452:	f003 031f 	and.w	r3, r3, #31
 8006456:	fa22 f303 	lsr.w	r3, r2, r3
 800645a:	4a0a      	ldr	r2, [pc, #40]	@ (8006484 <HAL_RCC_ClockConfig+0x270>)
 800645c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800645e:	4b0a      	ldr	r3, [pc, #40]	@ (8006488 <HAL_RCC_ClockConfig+0x274>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f7fc fe8a 	bl	800317c <HAL_InitTick>
 8006468:	4603      	mov	r3, r0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	40022000 	.word	0x40022000
 8006478:	40021000 	.word	0x40021000
 800647c:	04c4b400 	.word	0x04c4b400
 8006480:	0800a9c8 	.word	0x0800a9c8
 8006484:	20000030 	.word	0x20000030
 8006488:	20000034 	.word	0x20000034

0800648c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006492:	4b2c      	ldr	r3, [pc, #176]	@ (8006544 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 030c 	and.w	r3, r3, #12
 800649a:	2b04      	cmp	r3, #4
 800649c:	d102      	bne.n	80064a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800649e:	4b2a      	ldr	r3, [pc, #168]	@ (8006548 <HAL_RCC_GetSysClockFreq+0xbc>)
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	e047      	b.n	8006534 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80064a4:	4b27      	ldr	r3, [pc, #156]	@ (8006544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 030c 	and.w	r3, r3, #12
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d102      	bne.n	80064b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80064b0:	4b26      	ldr	r3, [pc, #152]	@ (800654c <HAL_RCC_GetSysClockFreq+0xc0>)
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	e03e      	b.n	8006534 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80064b6:	4b23      	ldr	r3, [pc, #140]	@ (8006544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 030c 	and.w	r3, r3, #12
 80064be:	2b0c      	cmp	r3, #12
 80064c0:	d136      	bne.n	8006530 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064c2:	4b20      	ldr	r3, [pc, #128]	@ (8006544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	091b      	lsrs	r3, r3, #4
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	3301      	adds	r3, #1
 80064d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d10c      	bne.n	80064fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064e0:	4a1a      	ldr	r2, [pc, #104]	@ (800654c <HAL_RCC_GetSysClockFreq+0xc0>)
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e8:	4a16      	ldr	r2, [pc, #88]	@ (8006544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064ea:	68d2      	ldr	r2, [r2, #12]
 80064ec:	0a12      	lsrs	r2, r2, #8
 80064ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80064f2:	fb02 f303 	mul.w	r3, r2, r3
 80064f6:	617b      	str	r3, [r7, #20]
      break;
 80064f8:	e00c      	b.n	8006514 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064fa:	4a13      	ldr	r2, [pc, #76]	@ (8006548 <HAL_RCC_GetSysClockFreq+0xbc>)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006502:	4a10      	ldr	r2, [pc, #64]	@ (8006544 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006504:	68d2      	ldr	r2, [r2, #12]
 8006506:	0a12      	lsrs	r2, r2, #8
 8006508:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800650c:	fb02 f303 	mul.w	r3, r2, r3
 8006510:	617b      	str	r3, [r7, #20]
      break;
 8006512:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006514:	4b0b      	ldr	r3, [pc, #44]	@ (8006544 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	0e5b      	lsrs	r3, r3, #25
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	3301      	adds	r3, #1
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	fbb2 f3f3 	udiv	r3, r2, r3
 800652c:	613b      	str	r3, [r7, #16]
 800652e:	e001      	b.n	8006534 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006534:	693b      	ldr	r3, [r7, #16]
}
 8006536:	4618      	mov	r0, r3
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40021000 	.word	0x40021000
 8006548:	00f42400 	.word	0x00f42400
 800654c:	016e3600 	.word	0x016e3600

08006550 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006554:	4b03      	ldr	r3, [pc, #12]	@ (8006564 <HAL_RCC_GetHCLKFreq+0x14>)
 8006556:	681b      	ldr	r3, [r3, #0]
}
 8006558:	4618      	mov	r0, r3
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	20000030 	.word	0x20000030

08006568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800656c:	f7ff fff0 	bl	8006550 <HAL_RCC_GetHCLKFreq>
 8006570:	4602      	mov	r2, r0
 8006572:	4b06      	ldr	r3, [pc, #24]	@ (800658c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	0a1b      	lsrs	r3, r3, #8
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	4904      	ldr	r1, [pc, #16]	@ (8006590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800657e:	5ccb      	ldrb	r3, [r1, r3]
 8006580:	f003 031f 	and.w	r3, r3, #31
 8006584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006588:	4618      	mov	r0, r3
 800658a:	bd80      	pop	{r7, pc}
 800658c:	40021000 	.word	0x40021000
 8006590:	0800a9d8 	.word	0x0800a9d8

08006594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006598:	f7ff ffda 	bl	8006550 <HAL_RCC_GetHCLKFreq>
 800659c:	4602      	mov	r2, r0
 800659e:	4b06      	ldr	r3, [pc, #24]	@ (80065b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	0adb      	lsrs	r3, r3, #11
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	4904      	ldr	r1, [pc, #16]	@ (80065bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80065aa:	5ccb      	ldrb	r3, [r1, r3]
 80065ac:	f003 031f 	and.w	r3, r3, #31
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40021000 	.word	0x40021000
 80065bc:	0800a9d8 	.word	0x0800a9d8

080065c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	091b      	lsrs	r3, r3, #4
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	3301      	adds	r3, #1
 80065dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d10c      	bne.n	80065fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065e4:	4a17      	ldr	r2, [pc, #92]	@ (8006644 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ec:	4a14      	ldr	r2, [pc, #80]	@ (8006640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065ee:	68d2      	ldr	r2, [r2, #12]
 80065f0:	0a12      	lsrs	r2, r2, #8
 80065f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80065f6:	fb02 f303 	mul.w	r3, r2, r3
 80065fa:	617b      	str	r3, [r7, #20]
    break;
 80065fc:	e00c      	b.n	8006618 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065fe:	4a12      	ldr	r2, [pc, #72]	@ (8006648 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	fbb2 f3f3 	udiv	r3, r2, r3
 8006606:	4a0e      	ldr	r2, [pc, #56]	@ (8006640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006608:	68d2      	ldr	r2, [r2, #12]
 800660a:	0a12      	lsrs	r2, r2, #8
 800660c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006610:	fb02 f303 	mul.w	r3, r2, r3
 8006614:	617b      	str	r3, [r7, #20]
    break;
 8006616:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006618:	4b09      	ldr	r3, [pc, #36]	@ (8006640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	0e5b      	lsrs	r3, r3, #25
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	3301      	adds	r3, #1
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006630:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006632:	687b      	ldr	r3, [r7, #4]
}
 8006634:	4618      	mov	r0, r3
 8006636:	371c      	adds	r7, #28
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	40021000 	.word	0x40021000
 8006644:	016e3600 	.word	0x016e3600
 8006648:	00f42400 	.word	0x00f42400

0800664c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006654:	2300      	movs	r3, #0
 8006656:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006658:	2300      	movs	r3, #0
 800665a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 8098 	beq.w	800679a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800666a:	2300      	movs	r3, #0
 800666c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800666e:	4b43      	ldr	r3, [pc, #268]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10d      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800667a:	4b40      	ldr	r3, [pc, #256]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800667c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800667e:	4a3f      	ldr	r2, [pc, #252]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006684:	6593      	str	r3, [r2, #88]	@ 0x58
 8006686:	4b3d      	ldr	r3, [pc, #244]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800668a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800668e:	60bb      	str	r3, [r7, #8]
 8006690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006692:	2301      	movs	r3, #1
 8006694:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006696:	4b3a      	ldr	r3, [pc, #232]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a39      	ldr	r2, [pc, #228]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800669c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066a2:	f7fc fdb7 	bl	8003214 <HAL_GetTick>
 80066a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066a8:	e009      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066aa:	f7fc fdb3 	bl	8003214 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d902      	bls.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	74fb      	strb	r3, [r7, #19]
        break;
 80066bc:	e005      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066be:	4b30      	ldr	r3, [pc, #192]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0ef      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80066ca:	7cfb      	ldrb	r3, [r7, #19]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d159      	bne.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066d0:	4b2a      	ldr	r3, [pc, #168]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d01e      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d019      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066ec:	4b23      	ldr	r3, [pc, #140]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066f8:	4b20      	ldr	r3, [pc, #128]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066fe:	4a1f      	ldr	r2, [pc, #124]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006708:	4b1c      	ldr	r3, [pc, #112]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800670a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800670e:	4a1b      	ldr	r2, [pc, #108]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006718:	4a18      	ldr	r2, [pc, #96]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d016      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672a:	f7fc fd73 	bl	8003214 <HAL_GetTick>
 800672e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006730:	e00b      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006732:	f7fc fd6f 	bl	8003214 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006740:	4293      	cmp	r3, r2
 8006742:	d902      	bls.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	74fb      	strb	r3, [r7, #19]
            break;
 8006748:	e006      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800674a:	4b0c      	ldr	r3, [pc, #48]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800674c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0ec      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006758:	7cfb      	ldrb	r3, [r7, #19]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10b      	bne.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800675e:	4b07      	ldr	r3, [pc, #28]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006764:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800676c:	4903      	ldr	r1, [pc, #12]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006774:	e008      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006776:	7cfb      	ldrb	r3, [r7, #19]
 8006778:	74bb      	strb	r3, [r7, #18]
 800677a:	e005      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800677c:	40021000 	.word	0x40021000
 8006780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006784:	7cfb      	ldrb	r3, [r7, #19]
 8006786:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006788:	7c7b      	ldrb	r3, [r7, #17]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d105      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800678e:	4ba7      	ldr	r3, [pc, #668]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006792:	4aa6      	ldr	r2, [pc, #664]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006798:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067a6:	4ba1      	ldr	r3, [pc, #644]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ac:	f023 0203 	bic.w	r2, r3, #3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	499d      	ldr	r1, [pc, #628]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067c8:	4b98      	ldr	r3, [pc, #608]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ce:	f023 020c 	bic.w	r2, r3, #12
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	4995      	ldr	r1, [pc, #596]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067ea:	4b90      	ldr	r3, [pc, #576]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	498c      	ldr	r1, [pc, #560]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0308 	and.w	r3, r3, #8
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00a      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800680c:	4b87      	ldr	r3, [pc, #540]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800680e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006812:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	4984      	ldr	r1, [pc, #528]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800681c:	4313      	orrs	r3, r2
 800681e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0310 	and.w	r3, r3, #16
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800682e:	4b7f      	ldr	r3, [pc, #508]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006834:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	497b      	ldr	r1, [pc, #492]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800683e:	4313      	orrs	r3, r2
 8006840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00a      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006850:	4b76      	ldr	r3, [pc, #472]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006856:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	4973      	ldr	r1, [pc, #460]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006860:	4313      	orrs	r3, r2
 8006862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006872:	4b6e      	ldr	r3, [pc, #440]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006878:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	496a      	ldr	r1, [pc, #424]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006882:	4313      	orrs	r3, r2
 8006884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006894:	4b65      	ldr	r3, [pc, #404]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800689a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	4962      	ldr	r1, [pc, #392]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068b6:	4b5d      	ldr	r3, [pc, #372]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c4:	4959      	ldr	r1, [pc, #356]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00a      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068d8:	4b54      	ldr	r3, [pc, #336]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068de:	f023 0203 	bic.w	r2, r3, #3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e6:	4951      	ldr	r1, [pc, #324]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068fa:	4b4c      	ldr	r3, [pc, #304]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006900:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006908:	4948      	ldr	r1, [pc, #288]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006918:	2b00      	cmp	r3, #0
 800691a:	d015      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800691c:	4b43      	ldr	r3, [pc, #268]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800691e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006922:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800692a:	4940      	ldr	r1, [pc, #256]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800692c:	4313      	orrs	r3, r2
 800692e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006936:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800693a:	d105      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800693c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	4a3a      	ldr	r2, [pc, #232]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006942:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006946:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006950:	2b00      	cmp	r3, #0
 8006952:	d015      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006954:	4b35      	ldr	r3, [pc, #212]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800695a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006962:	4932      	ldr	r1, [pc, #200]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006964:	4313      	orrs	r3, r2
 8006966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800696e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006972:	d105      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006974:	4b2d      	ldr	r3, [pc, #180]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	4a2c      	ldr	r2, [pc, #176]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800697a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800697e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d015      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800698c:	4b27      	ldr	r3, [pc, #156]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800698e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006992:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699a:	4924      	ldr	r1, [pc, #144]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800699c:	4313      	orrs	r3, r2
 800699e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069aa:	d105      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069ac:	4b1f      	ldr	r3, [pc, #124]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	4a1e      	ldr	r2, [pc, #120]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d015      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069c4:	4b19      	ldr	r3, [pc, #100]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d2:	4916      	ldr	r1, [pc, #88]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069e2:	d105      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069e4:	4b11      	ldr	r3, [pc, #68]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	4a10      	ldr	r2, [pc, #64]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d019      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069fc:	4b0b      	ldr	r3, [pc, #44]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0a:	4908      	ldr	r1, [pc, #32]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a1a:	d109      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a1c:	4b03      	ldr	r3, [pc, #12]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	4a02      	ldr	r2, [pc, #8]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a26:	60d3      	str	r3, [r2, #12]
 8006a28:	e002      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006a2a:	bf00      	nop
 8006a2c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d015      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a3c:	4b29      	ldr	r3, [pc, #164]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a4a:	4926      	ldr	r1, [pc, #152]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a5a:	d105      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a5c:	4b21      	ldr	r3, [pc, #132]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	4a20      	ldr	r2, [pc, #128]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a66:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d015      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006a74:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a7a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a82:	4918      	ldr	r1, [pc, #96]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a92:	d105      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a94:	4b13      	ldr	r3, [pc, #76]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	4a12      	ldr	r2, [pc, #72]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a9e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d015      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006aac:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ab2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aba:	490a      	ldr	r1, [pc, #40]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ac6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006aca:	d105      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006acc:	4b05      	ldr	r3, [pc, #20]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	4a04      	ldr	r2, [pc, #16]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ad6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006ad8:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	40021000 	.word	0x40021000

08006ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e054      	b.n	8006ba4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d111      	bne.n	8006b2a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 feec 	bl	80088ec <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d102      	bne.n	8006b22 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a23      	ldr	r2, [pc, #140]	@ (8006bac <HAL_TIM_Base_Init+0xc4>)
 8006b20:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	f001 fa35 	bl	8007fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	08002c2d 	.word	0x08002c2d

08006bb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d001      	beq.n	8006bc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e04c      	b.n	8006c62 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a26      	ldr	r2, [pc, #152]	@ (8006c70 <HAL_TIM_Base_Start+0xc0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d022      	beq.n	8006c20 <HAL_TIM_Base_Start+0x70>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006be2:	d01d      	beq.n	8006c20 <HAL_TIM_Base_Start+0x70>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a22      	ldr	r2, [pc, #136]	@ (8006c74 <HAL_TIM_Base_Start+0xc4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d018      	beq.n	8006c20 <HAL_TIM_Base_Start+0x70>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a21      	ldr	r2, [pc, #132]	@ (8006c78 <HAL_TIM_Base_Start+0xc8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d013      	beq.n	8006c20 <HAL_TIM_Base_Start+0x70>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8006c7c <HAL_TIM_Base_Start+0xcc>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00e      	beq.n	8006c20 <HAL_TIM_Base_Start+0x70>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a1e      	ldr	r2, [pc, #120]	@ (8006c80 <HAL_TIM_Base_Start+0xd0>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d009      	beq.n	8006c20 <HAL_TIM_Base_Start+0x70>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a1c      	ldr	r2, [pc, #112]	@ (8006c84 <HAL_TIM_Base_Start+0xd4>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d004      	beq.n	8006c20 <HAL_TIM_Base_Start+0x70>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006c88 <HAL_TIM_Base_Start+0xd8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d115      	bne.n	8006c4c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689a      	ldr	r2, [r3, #8]
 8006c26:	4b19      	ldr	r3, [pc, #100]	@ (8006c8c <HAL_TIM_Base_Start+0xdc>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b06      	cmp	r3, #6
 8006c30:	d015      	beq.n	8006c5e <HAL_TIM_Base_Start+0xae>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c38:	d011      	beq.n	8006c5e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f042 0201 	orr.w	r2, r2, #1
 8006c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c4a:	e008      	b.n	8006c5e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	e000      	b.n	8006c60 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40012c00 	.word	0x40012c00
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40000c00 	.word	0x40000c00
 8006c80:	40013400 	.word	0x40013400
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40015000 	.word	0x40015000
 8006c8c:	00010007 	.word	0x00010007

08006c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d001      	beq.n	8006ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e054      	b.n	8006d52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a26      	ldr	r2, [pc, #152]	@ (8006d60 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d022      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x80>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cd2:	d01d      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x80>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a22      	ldr	r2, [pc, #136]	@ (8006d64 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d018      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x80>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a21      	ldr	r2, [pc, #132]	@ (8006d68 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d013      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x80>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1f      	ldr	r2, [pc, #124]	@ (8006d6c <HAL_TIM_Base_Start_IT+0xdc>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00e      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x80>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8006d70 <HAL_TIM_Base_Start_IT+0xe0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d009      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x80>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a1c      	ldr	r2, [pc, #112]	@ (8006d74 <HAL_TIM_Base_Start_IT+0xe4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x80>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8006d78 <HAL_TIM_Base_Start_IT+0xe8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d115      	bne.n	8006d3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689a      	ldr	r2, [r3, #8]
 8006d16:	4b19      	ldr	r3, [pc, #100]	@ (8006d7c <HAL_TIM_Base_Start_IT+0xec>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b06      	cmp	r3, #6
 8006d20:	d015      	beq.n	8006d4e <HAL_TIM_Base_Start_IT+0xbe>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d28:	d011      	beq.n	8006d4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f042 0201 	orr.w	r2, r2, #1
 8006d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3a:	e008      	b.n	8006d4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	e000      	b.n	8006d50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40012c00 	.word	0x40012c00
 8006d64:	40000400 	.word	0x40000400
 8006d68:	40000800 	.word	0x40000800
 8006d6c:	40000c00 	.word	0x40000c00
 8006d70:	40013400 	.word	0x40013400
 8006d74:	40014000 	.word	0x40014000
 8006d78:	40015000 	.word	0x40015000
 8006d7c:	00010007 	.word	0x00010007

08006d80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e054      	b.n	8006e3c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d111      	bne.n	8006dc2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 fda0 	bl	80088ec <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d102      	bne.n	8006dba <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a23      	ldr	r2, [pc, #140]	@ (8006e44 <HAL_TIM_PWM_Init+0xc4>)
 8006db8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	f001 f8e9 	bl	8007fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	08006e49 	.word	0x08006e49

08006e48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d109      	bne.n	8006e80 <HAL_TIM_PWM_Start+0x24>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	bf14      	ite	ne
 8006e78:	2301      	movne	r3, #1
 8006e7a:	2300      	moveq	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	e03c      	b.n	8006efa <HAL_TIM_PWM_Start+0x9e>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d109      	bne.n	8006e9a <HAL_TIM_PWM_Start+0x3e>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	bf14      	ite	ne
 8006e92:	2301      	movne	r3, #1
 8006e94:	2300      	moveq	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	e02f      	b.n	8006efa <HAL_TIM_PWM_Start+0x9e>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d109      	bne.n	8006eb4 <HAL_TIM_PWM_Start+0x58>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	bf14      	ite	ne
 8006eac:	2301      	movne	r3, #1
 8006eae:	2300      	moveq	r3, #0
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	e022      	b.n	8006efa <HAL_TIM_PWM_Start+0x9e>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b0c      	cmp	r3, #12
 8006eb8:	d109      	bne.n	8006ece <HAL_TIM_PWM_Start+0x72>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	bf14      	ite	ne
 8006ec6:	2301      	movne	r3, #1
 8006ec8:	2300      	moveq	r3, #0
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	e015      	b.n	8006efa <HAL_TIM_PWM_Start+0x9e>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b10      	cmp	r3, #16
 8006ed2:	d109      	bne.n	8006ee8 <HAL_TIM_PWM_Start+0x8c>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	bf14      	ite	ne
 8006ee0:	2301      	movne	r3, #1
 8006ee2:	2300      	moveq	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	e008      	b.n	8006efa <HAL_TIM_PWM_Start+0x9e>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	bf14      	ite	ne
 8006ef4:	2301      	movne	r3, #1
 8006ef6:	2300      	moveq	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e0a6      	b.n	8007050 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d104      	bne.n	8006f12 <HAL_TIM_PWM_Start+0xb6>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f10:	e023      	b.n	8006f5a <HAL_TIM_PWM_Start+0xfe>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d104      	bne.n	8006f22 <HAL_TIM_PWM_Start+0xc6>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f20:	e01b      	b.n	8006f5a <HAL_TIM_PWM_Start+0xfe>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_PWM_Start+0xd6>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f30:	e013      	b.n	8006f5a <HAL_TIM_PWM_Start+0xfe>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b0c      	cmp	r3, #12
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_PWM_Start+0xe6>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f40:	e00b      	b.n	8006f5a <HAL_TIM_PWM_Start+0xfe>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b10      	cmp	r3, #16
 8006f46:	d104      	bne.n	8006f52 <HAL_TIM_PWM_Start+0xf6>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f50:	e003      	b.n	8006f5a <HAL_TIM_PWM_Start+0xfe>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2202      	movs	r2, #2
 8006f56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 fc9c 	bl	80088a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a3a      	ldr	r2, [pc, #232]	@ (8007058 <HAL_TIM_PWM_Start+0x1fc>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d018      	beq.n	8006fa4 <HAL_TIM_PWM_Start+0x148>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a39      	ldr	r2, [pc, #228]	@ (800705c <HAL_TIM_PWM_Start+0x200>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d013      	beq.n	8006fa4 <HAL_TIM_PWM_Start+0x148>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a37      	ldr	r2, [pc, #220]	@ (8007060 <HAL_TIM_PWM_Start+0x204>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00e      	beq.n	8006fa4 <HAL_TIM_PWM_Start+0x148>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a36      	ldr	r2, [pc, #216]	@ (8007064 <HAL_TIM_PWM_Start+0x208>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d009      	beq.n	8006fa4 <HAL_TIM_PWM_Start+0x148>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a34      	ldr	r2, [pc, #208]	@ (8007068 <HAL_TIM_PWM_Start+0x20c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d004      	beq.n	8006fa4 <HAL_TIM_PWM_Start+0x148>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a33      	ldr	r2, [pc, #204]	@ (800706c <HAL_TIM_PWM_Start+0x210>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d101      	bne.n	8006fa8 <HAL_TIM_PWM_Start+0x14c>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e000      	b.n	8006faa <HAL_TIM_PWM_Start+0x14e>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d007      	beq.n	8006fbe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a25      	ldr	r2, [pc, #148]	@ (8007058 <HAL_TIM_PWM_Start+0x1fc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d022      	beq.n	800700e <HAL_TIM_PWM_Start+0x1b2>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd0:	d01d      	beq.n	800700e <HAL_TIM_PWM_Start+0x1b2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a26      	ldr	r2, [pc, #152]	@ (8007070 <HAL_TIM_PWM_Start+0x214>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d018      	beq.n	800700e <HAL_TIM_PWM_Start+0x1b2>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a24      	ldr	r2, [pc, #144]	@ (8007074 <HAL_TIM_PWM_Start+0x218>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d013      	beq.n	800700e <HAL_TIM_PWM_Start+0x1b2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a23      	ldr	r2, [pc, #140]	@ (8007078 <HAL_TIM_PWM_Start+0x21c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d00e      	beq.n	800700e <HAL_TIM_PWM_Start+0x1b2>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a19      	ldr	r2, [pc, #100]	@ (800705c <HAL_TIM_PWM_Start+0x200>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d009      	beq.n	800700e <HAL_TIM_PWM_Start+0x1b2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a18      	ldr	r2, [pc, #96]	@ (8007060 <HAL_TIM_PWM_Start+0x204>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d004      	beq.n	800700e <HAL_TIM_PWM_Start+0x1b2>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a18      	ldr	r2, [pc, #96]	@ (800706c <HAL_TIM_PWM_Start+0x210>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d115      	bne.n	800703a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	4b19      	ldr	r3, [pc, #100]	@ (800707c <HAL_TIM_PWM_Start+0x220>)
 8007016:	4013      	ands	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b06      	cmp	r3, #6
 800701e:	d015      	beq.n	800704c <HAL_TIM_PWM_Start+0x1f0>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007026:	d011      	beq.n	800704c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007038:	e008      	b.n	800704c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0201 	orr.w	r2, r2, #1
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	e000      	b.n	800704e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	40012c00 	.word	0x40012c00
 800705c:	40013400 	.word	0x40013400
 8007060:	40014000 	.word	0x40014000
 8007064:	40014400 	.word	0x40014400
 8007068:	40014800 	.word	0x40014800
 800706c:	40015000 	.word	0x40015000
 8007070:	40000400 	.word	0x40000400
 8007074:	40000800 	.word	0x40000800
 8007078:	40000c00 	.word	0x40000c00
 800707c:	00010007 	.word	0x00010007

08007080 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e04c      	b.n	800712e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d111      	bne.n	80070c4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 fc1f 	bl	80088ec <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d102      	bne.n	80070bc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a1f      	ldr	r2, [pc, #124]	@ (8007138 <HAL_TIM_OnePulse_Init+0xb8>)
 80070ba:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3304      	adds	r3, #4
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f000 ff68 	bl	8007fac <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0208 	bic.w	r2, r2, #8
 80070ea:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6819      	ldr	r1, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	0800713d 	.word	0x0800713d

0800713c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007160:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007168:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007170:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007178:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d108      	bne.n	8007192 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d105      	bne.n	8007192 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007186:	7b7b      	ldrb	r3, [r7, #13]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d102      	bne.n	8007192 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800718c:	7b3b      	ldrb	r3, [r7, #12]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d001      	beq.n	8007196 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e059      	b.n	800724a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2202      	movs	r2, #2
 800719a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2202      	movs	r2, #2
 80071a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2202      	movs	r2, #2
 80071aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2202      	movs	r2, #2
 80071b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f042 0202 	orr.w	r2, r2, #2
 80071c4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f042 0204 	orr.w	r2, r2, #4
 80071d4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2201      	movs	r2, #1
 80071dc:	2100      	movs	r1, #0
 80071de:	4618      	mov	r0, r3
 80071e0:	f001 fb5e 	bl	80088a0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2201      	movs	r2, #1
 80071ea:	2104      	movs	r1, #4
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 fb57 	bl	80088a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a17      	ldr	r2, [pc, #92]	@ (8007254 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d018      	beq.n	800722e <HAL_TIM_OnePulse_Start_IT+0xde>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a15      	ldr	r2, [pc, #84]	@ (8007258 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d013      	beq.n	800722e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a14      	ldr	r2, [pc, #80]	@ (800725c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d00e      	beq.n	800722e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a12      	ldr	r2, [pc, #72]	@ (8007260 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d009      	beq.n	800722e <HAL_TIM_OnePulse_Start_IT+0xde>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a11      	ldr	r2, [pc, #68]	@ (8007264 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d004      	beq.n	800722e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a0f      	ldr	r2, [pc, #60]	@ (8007268 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d101      	bne.n	8007232 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800722e:	2301      	movs	r3, #1
 8007230:	e000      	b.n	8007234 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007232:	2300      	movs	r3, #0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007246:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	40012c00 	.word	0x40012c00
 8007258:	40013400 	.word	0x40013400
 800725c:	40014000 	.word	0x40014000
 8007260:	40014400 	.word	0x40014400
 8007264:	40014800 	.word	0x40014800
 8007268:	40015000 	.word	0x40015000

0800726c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e0a2      	b.n	80073c6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d111      	bne.n	80072b0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 fb29 	bl	80088ec <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d102      	bne.n	80072a8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a4a      	ldr	r2, [pc, #296]	@ (80073d0 <HAL_TIM_Encoder_Init+0x164>)
 80072a6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80072c6:	f023 0307 	bic.w	r3, r3, #7
 80072ca:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3304      	adds	r3, #4
 80072d4:	4619      	mov	r1, r3
 80072d6:	4610      	mov	r0, r2
 80072d8:	f000 fe68 	bl	8007fac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007304:	f023 0303 	bic.w	r3, r3, #3
 8007308:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	689a      	ldr	r2, [r3, #8]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	021b      	lsls	r3, r3, #8
 8007314:	4313      	orrs	r3, r2
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	4313      	orrs	r3, r2
 800731a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007322:	f023 030c 	bic.w	r3, r3, #12
 8007326:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800732e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	021b      	lsls	r3, r3, #8
 800733e:	4313      	orrs	r3, r2
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	4313      	orrs	r3, r2
 8007344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	011a      	lsls	r2, r3, #4
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	031b      	lsls	r3, r3, #12
 8007352:	4313      	orrs	r3, r2
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	4313      	orrs	r3, r2
 8007358:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007360:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007368:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	4313      	orrs	r3, r2
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	4313      	orrs	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	08002d21 	.word	0x08002d21

080073d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d110      	bne.n	8007426 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d102      	bne.n	8007410 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800740a:	7b7b      	ldrb	r3, [r7, #13]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d001      	beq.n	8007414 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e069      	b.n	80074e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007424:	e031      	b.n	800748a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b04      	cmp	r3, #4
 800742a:	d110      	bne.n	800744e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d102      	bne.n	8007438 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007432:	7b3b      	ldrb	r3, [r7, #12]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d001      	beq.n	800743c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e055      	b.n	80074e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800744c:	e01d      	b.n	800748a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d108      	bne.n	8007466 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d105      	bne.n	8007466 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800745a:	7b7b      	ldrb	r3, [r7, #13]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d102      	bne.n	8007466 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007460:	7b3b      	ldrb	r3, [r7, #12]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d001      	beq.n	800746a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e03e      	b.n	80074e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2202      	movs	r2, #2
 800746e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2202      	movs	r2, #2
 8007476:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2202      	movs	r2, #2
 800747e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2202      	movs	r2, #2
 8007486:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <HAL_TIM_Encoder_Start+0xc4>
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2b04      	cmp	r3, #4
 8007494:	d008      	beq.n	80074a8 <HAL_TIM_Encoder_Start+0xd4>
 8007496:	e00f      	b.n	80074b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2201      	movs	r2, #1
 800749e:	2100      	movs	r1, #0
 80074a0:	4618      	mov	r0, r3
 80074a2:	f001 f9fd 	bl	80088a0 <TIM_CCxChannelCmd>
      break;
 80074a6:	e016      	b.n	80074d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2201      	movs	r2, #1
 80074ae:	2104      	movs	r1, #4
 80074b0:	4618      	mov	r0, r3
 80074b2:	f001 f9f5 	bl	80088a0 <TIM_CCxChannelCmd>
      break;
 80074b6:	e00e      	b.n	80074d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2201      	movs	r2, #1
 80074be:	2100      	movs	r1, #0
 80074c0:	4618      	mov	r0, r3
 80074c2:	f001 f9ed 	bl	80088a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2201      	movs	r2, #1
 80074cc:	2104      	movs	r1, #4
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 f9e6 	bl	80088a0 <TIM_CCxChannelCmd>
      break;
 80074d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f042 0201 	orr.w	r2, r2, #1
 80074e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d026      	beq.n	8007560 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d021      	beq.n	8007560 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f06f 0202 	mvn.w	r2, #2
 8007524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	f003 0303 	and.w	r3, r3, #3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d005      	beq.n	8007546 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	4798      	blx	r3
 8007544:	e009      	b.n	800755a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f003 0304 	and.w	r3, r3, #4
 8007566:	2b00      	cmp	r3, #0
 8007568:	d026      	beq.n	80075b8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d021      	beq.n	80075b8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f06f 0204 	mvn.w	r2, #4
 800757c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2202      	movs	r2, #2
 8007582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800758e:	2b00      	cmp	r3, #0
 8007590:	d005      	beq.n	800759e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
 800759c:	e009      	b.n	80075b2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f003 0308 	and.w	r3, r3, #8
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d026      	beq.n	8007610 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d021      	beq.n	8007610 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f06f 0208 	mvn.w	r2, #8
 80075d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2204      	movs	r2, #4
 80075da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	4798      	blx	r3
 80075f4:	e009      	b.n	800760a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f003 0310 	and.w	r3, r3, #16
 8007616:	2b00      	cmp	r3, #0
 8007618:	d026      	beq.n	8007668 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f003 0310 	and.w	r3, r3, #16
 8007620:	2b00      	cmp	r3, #0
 8007622:	d021      	beq.n	8007668 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f06f 0210 	mvn.w	r2, #16
 800762c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2208      	movs	r2, #8
 8007632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800763e:	2b00      	cmp	r3, #0
 8007640:	d005      	beq.n	800764e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	4798      	blx	r3
 800764c:	e009      	b.n	8007662 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00e      	beq.n	8007690 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d009      	beq.n	8007690 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f06f 0201 	mvn.w	r2, #1
 8007684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007696:	2b00      	cmp	r3, #0
 8007698:	d104      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00e      	beq.n	80076c2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d009      	beq.n	80076c2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80076b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00e      	beq.n	80076ea <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d009      	beq.n	80076ea <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80076de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00e      	beq.n	8007712 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f003 0320 	and.w	r3, r3, #32
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00e      	beq.n	800773a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f06f 0220 	mvn.w	r2, #32
 800772e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00e      	beq.n	8007762 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d009      	beq.n	8007762 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00e      	beq.n	800778a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800777e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00e      	beq.n	80077b2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d009      	beq.n	80077b2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80077a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00e      	beq.n	80077da <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d009      	beq.n	80077da <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80077ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077da:	bf00      	nop
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
	...

080077e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d101      	bne.n	8007802 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077fe:	2302      	movs	r3, #2
 8007800:	e0ff      	b.n	8007a02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b14      	cmp	r3, #20
 800780e:	f200 80f0 	bhi.w	80079f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007812:	a201      	add	r2, pc, #4	@ (adr r2, 8007818 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	0800786d 	.word	0x0800786d
 800781c:	080079f3 	.word	0x080079f3
 8007820:	080079f3 	.word	0x080079f3
 8007824:	080079f3 	.word	0x080079f3
 8007828:	080078ad 	.word	0x080078ad
 800782c:	080079f3 	.word	0x080079f3
 8007830:	080079f3 	.word	0x080079f3
 8007834:	080079f3 	.word	0x080079f3
 8007838:	080078ef 	.word	0x080078ef
 800783c:	080079f3 	.word	0x080079f3
 8007840:	080079f3 	.word	0x080079f3
 8007844:	080079f3 	.word	0x080079f3
 8007848:	0800792f 	.word	0x0800792f
 800784c:	080079f3 	.word	0x080079f3
 8007850:	080079f3 	.word	0x080079f3
 8007854:	080079f3 	.word	0x080079f3
 8007858:	08007971 	.word	0x08007971
 800785c:	080079f3 	.word	0x080079f3
 8007860:	080079f3 	.word	0x080079f3
 8007864:	080079f3 	.word	0x080079f3
 8007868:	080079b1 	.word	0x080079b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68b9      	ldr	r1, [r7, #8]
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fc4e 	bl	8008114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	699a      	ldr	r2, [r3, #24]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f042 0208 	orr.w	r2, r2, #8
 8007886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	699a      	ldr	r2, [r3, #24]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0204 	bic.w	r2, r2, #4
 8007896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6999      	ldr	r1, [r3, #24]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	691a      	ldr	r2, [r3, #16]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	619a      	str	r2, [r3, #24]
      break;
 80078aa:	e0a5      	b.n	80079f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68b9      	ldr	r1, [r7, #8]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fcc8 	bl	8008248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	699a      	ldr	r2, [r3, #24]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	699a      	ldr	r2, [r3, #24]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6999      	ldr	r1, [r3, #24]
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	021a      	lsls	r2, r3, #8
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	619a      	str	r2, [r3, #24]
      break;
 80078ec:	e084      	b.n	80079f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fd3b 	bl	8008370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69da      	ldr	r2, [r3, #28]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f042 0208 	orr.w	r2, r2, #8
 8007908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69da      	ldr	r2, [r3, #28]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 0204 	bic.w	r2, r2, #4
 8007918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69d9      	ldr	r1, [r3, #28]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	691a      	ldr	r2, [r3, #16]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	61da      	str	r2, [r3, #28]
      break;
 800792c:	e064      	b.n	80079f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68b9      	ldr	r1, [r7, #8]
 8007934:	4618      	mov	r0, r3
 8007936:	f000 fdad 	bl	8008494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	69da      	ldr	r2, [r3, #28]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	69da      	ldr	r2, [r3, #28]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69d9      	ldr	r1, [r3, #28]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	021a      	lsls	r2, r3, #8
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	61da      	str	r2, [r3, #28]
      break;
 800796e:	e043      	b.n	80079f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68b9      	ldr	r1, [r7, #8]
 8007976:	4618      	mov	r0, r3
 8007978:	f000 fe20 	bl	80085bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0208 	orr.w	r2, r2, #8
 800798a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0204 	bic.w	r2, r2, #4
 800799a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	691a      	ldr	r2, [r3, #16]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80079ae:	e023      	b.n	80079f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68b9      	ldr	r1, [r7, #8]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fe6a 	bl	8008690 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	021a      	lsls	r2, r3, #8
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80079f0:	e002      	b.n	80079f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	75fb      	strb	r3, [r7, #23]
      break;
 80079f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop

08007a0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d101      	bne.n	8007a28 <HAL_TIM_ConfigClockSource+0x1c>
 8007a24:	2302      	movs	r3, #2
 8007a26:	e0f6      	b.n	8007c16 <HAL_TIM_ConfigClockSource+0x20a>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007a46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a6f      	ldr	r2, [pc, #444]	@ (8007c20 <HAL_TIM_ConfigClockSource+0x214>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	f000 80c1 	beq.w	8007bea <HAL_TIM_ConfigClockSource+0x1de>
 8007a68:	4a6d      	ldr	r2, [pc, #436]	@ (8007c20 <HAL_TIM_ConfigClockSource+0x214>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	f200 80c6 	bhi.w	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007a70:	4a6c      	ldr	r2, [pc, #432]	@ (8007c24 <HAL_TIM_ConfigClockSource+0x218>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	f000 80b9 	beq.w	8007bea <HAL_TIM_ConfigClockSource+0x1de>
 8007a78:	4a6a      	ldr	r2, [pc, #424]	@ (8007c24 <HAL_TIM_ConfigClockSource+0x218>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	f200 80be 	bhi.w	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007a80:	4a69      	ldr	r2, [pc, #420]	@ (8007c28 <HAL_TIM_ConfigClockSource+0x21c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	f000 80b1 	beq.w	8007bea <HAL_TIM_ConfigClockSource+0x1de>
 8007a88:	4a67      	ldr	r2, [pc, #412]	@ (8007c28 <HAL_TIM_ConfigClockSource+0x21c>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	f200 80b6 	bhi.w	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007a90:	4a66      	ldr	r2, [pc, #408]	@ (8007c2c <HAL_TIM_ConfigClockSource+0x220>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	f000 80a9 	beq.w	8007bea <HAL_TIM_ConfigClockSource+0x1de>
 8007a98:	4a64      	ldr	r2, [pc, #400]	@ (8007c2c <HAL_TIM_ConfigClockSource+0x220>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	f200 80ae 	bhi.w	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007aa0:	4a63      	ldr	r2, [pc, #396]	@ (8007c30 <HAL_TIM_ConfigClockSource+0x224>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	f000 80a1 	beq.w	8007bea <HAL_TIM_ConfigClockSource+0x1de>
 8007aa8:	4a61      	ldr	r2, [pc, #388]	@ (8007c30 <HAL_TIM_ConfigClockSource+0x224>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	f200 80a6 	bhi.w	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007ab0:	4a60      	ldr	r2, [pc, #384]	@ (8007c34 <HAL_TIM_ConfigClockSource+0x228>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	f000 8099 	beq.w	8007bea <HAL_TIM_ConfigClockSource+0x1de>
 8007ab8:	4a5e      	ldr	r2, [pc, #376]	@ (8007c34 <HAL_TIM_ConfigClockSource+0x228>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	f200 809e 	bhi.w	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007ac0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007ac4:	f000 8091 	beq.w	8007bea <HAL_TIM_ConfigClockSource+0x1de>
 8007ac8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007acc:	f200 8096 	bhi.w	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007ad0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ad4:	f000 8089 	beq.w	8007bea <HAL_TIM_ConfigClockSource+0x1de>
 8007ad8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007adc:	f200 808e 	bhi.w	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007ae0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ae4:	d03e      	beq.n	8007b64 <HAL_TIM_ConfigClockSource+0x158>
 8007ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007aea:	f200 8087 	bhi.w	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007af2:	f000 8086 	beq.w	8007c02 <HAL_TIM_ConfigClockSource+0x1f6>
 8007af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007afa:	d87f      	bhi.n	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007afc:	2b70      	cmp	r3, #112	@ 0x70
 8007afe:	d01a      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x12a>
 8007b00:	2b70      	cmp	r3, #112	@ 0x70
 8007b02:	d87b      	bhi.n	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007b04:	2b60      	cmp	r3, #96	@ 0x60
 8007b06:	d050      	beq.n	8007baa <HAL_TIM_ConfigClockSource+0x19e>
 8007b08:	2b60      	cmp	r3, #96	@ 0x60
 8007b0a:	d877      	bhi.n	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007b0c:	2b50      	cmp	r3, #80	@ 0x50
 8007b0e:	d03c      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x17e>
 8007b10:	2b50      	cmp	r3, #80	@ 0x50
 8007b12:	d873      	bhi.n	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007b14:	2b40      	cmp	r3, #64	@ 0x40
 8007b16:	d058      	beq.n	8007bca <HAL_TIM_ConfigClockSource+0x1be>
 8007b18:	2b40      	cmp	r3, #64	@ 0x40
 8007b1a:	d86f      	bhi.n	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007b1c:	2b30      	cmp	r3, #48	@ 0x30
 8007b1e:	d064      	beq.n	8007bea <HAL_TIM_ConfigClockSource+0x1de>
 8007b20:	2b30      	cmp	r3, #48	@ 0x30
 8007b22:	d86b      	bhi.n	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007b24:	2b20      	cmp	r3, #32
 8007b26:	d060      	beq.n	8007bea <HAL_TIM_ConfigClockSource+0x1de>
 8007b28:	2b20      	cmp	r3, #32
 8007b2a:	d867      	bhi.n	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d05c      	beq.n	8007bea <HAL_TIM_ConfigClockSource+0x1de>
 8007b30:	2b10      	cmp	r3, #16
 8007b32:	d05a      	beq.n	8007bea <HAL_TIM_ConfigClockSource+0x1de>
 8007b34:	e062      	b.n	8007bfc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b46:	f000 fe8b 	bl	8008860 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007b58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	609a      	str	r2, [r3, #8]
      break;
 8007b62:	e04f      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b74:	f000 fe74 	bl	8008860 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689a      	ldr	r2, [r3, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b86:	609a      	str	r2, [r3, #8]
      break;
 8007b88:	e03c      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b96:	461a      	mov	r2, r3
 8007b98:	f000 fde6 	bl	8008768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2150      	movs	r1, #80	@ 0x50
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fe3f 	bl	8008826 <TIM_ITRx_SetConfig>
      break;
 8007ba8:	e02c      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	f000 fe05 	bl	80087c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2160      	movs	r1, #96	@ 0x60
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 fe2f 	bl	8008826 <TIM_ITRx_SetConfig>
      break;
 8007bc8:	e01c      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f000 fdc6 	bl	8008768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2140      	movs	r1, #64	@ 0x40
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 fe1f 	bl	8008826 <TIM_ITRx_SetConfig>
      break;
 8007be8:	e00c      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	f000 fe16 	bl	8008826 <TIM_ITRx_SetConfig>
      break;
 8007bfa:	e003      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8007c00:	e000      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007c02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	00100070 	.word	0x00100070
 8007c24:	00100060 	.word	0x00100060
 8007c28:	00100050 	.word	0x00100050
 8007c2c:	00100040 	.word	0x00100040
 8007c30:	00100030 	.word	0x00100030
 8007c34:	00100020 	.word	0x00100020

08007c38 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b087      	sub	sp, #28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e14a      	b.n	8007f9e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	f040 80dd 	bne.w	8007ed0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007d16:	7afb      	ldrb	r3, [r7, #11]
 8007d18:	2b1f      	cmp	r3, #31
 8007d1a:	f200 80d6 	bhi.w	8007eca <HAL_TIM_RegisterCallback+0x1de>
 8007d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d24 <HAL_TIM_RegisterCallback+0x38>)
 8007d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d24:	08007da5 	.word	0x08007da5
 8007d28:	08007dad 	.word	0x08007dad
 8007d2c:	08007db5 	.word	0x08007db5
 8007d30:	08007dbd 	.word	0x08007dbd
 8007d34:	08007dc5 	.word	0x08007dc5
 8007d38:	08007dcd 	.word	0x08007dcd
 8007d3c:	08007dd5 	.word	0x08007dd5
 8007d40:	08007ddd 	.word	0x08007ddd
 8007d44:	08007de5 	.word	0x08007de5
 8007d48:	08007ded 	.word	0x08007ded
 8007d4c:	08007df5 	.word	0x08007df5
 8007d50:	08007dfd 	.word	0x08007dfd
 8007d54:	08007e05 	.word	0x08007e05
 8007d58:	08007e0d 	.word	0x08007e0d
 8007d5c:	08007e17 	.word	0x08007e17
 8007d60:	08007e21 	.word	0x08007e21
 8007d64:	08007e2b 	.word	0x08007e2b
 8007d68:	08007e35 	.word	0x08007e35
 8007d6c:	08007e3f 	.word	0x08007e3f
 8007d70:	08007e49 	.word	0x08007e49
 8007d74:	08007e53 	.word	0x08007e53
 8007d78:	08007e5d 	.word	0x08007e5d
 8007d7c:	08007e67 	.word	0x08007e67
 8007d80:	08007e71 	.word	0x08007e71
 8007d84:	08007e7b 	.word	0x08007e7b
 8007d88:	08007e85 	.word	0x08007e85
 8007d8c:	08007e8f 	.word	0x08007e8f
 8007d90:	08007e99 	.word	0x08007e99
 8007d94:	08007ea3 	.word	0x08007ea3
 8007d98:	08007ead 	.word	0x08007ead
 8007d9c:	08007eb7 	.word	0x08007eb7
 8007da0:	08007ec1 	.word	0x08007ec1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007daa:	e0f7      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007db2:	e0f3      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007dba:	e0ef      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007dc2:	e0eb      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007dca:	e0e7      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007dd2:	e0e3      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007dda:	e0df      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007de2:	e0db      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007dea:	e0d7      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007df2:	e0d3      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007dfa:	e0cf      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007e02:	e0cb      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007e0a:	e0c7      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007e14:	e0c2      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007e1e:	e0bd      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007e28:	e0b8      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007e32:	e0b3      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007e3c:	e0ae      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007e46:	e0a9      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007e50:	e0a4      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007e5a:	e09f      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007e64:	e09a      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007e6e:	e095      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007e78:	e090      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007e82:	e08b      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007e8c:	e086      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007e96:	e081      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007ea0:	e07c      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007eaa:	e077      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007eb4:	e072      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007ebe:	e06d      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007ec8:	e068      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	75fb      	strb	r3, [r7, #23]
        break;
 8007ece:	e065      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d15d      	bne.n	8007f98 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007edc:	7afb      	ldrb	r3, [r7, #11]
 8007ede:	2b0d      	cmp	r3, #13
 8007ee0:	d857      	bhi.n	8007f92 <HAL_TIM_RegisterCallback+0x2a6>
 8007ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee8 <HAL_TIM_RegisterCallback+0x1fc>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007f21 	.word	0x08007f21
 8007eec:	08007f29 	.word	0x08007f29
 8007ef0:	08007f31 	.word	0x08007f31
 8007ef4:	08007f39 	.word	0x08007f39
 8007ef8:	08007f41 	.word	0x08007f41
 8007efc:	08007f49 	.word	0x08007f49
 8007f00:	08007f51 	.word	0x08007f51
 8007f04:	08007f59 	.word	0x08007f59
 8007f08:	08007f61 	.word	0x08007f61
 8007f0c:	08007f69 	.word	0x08007f69
 8007f10:	08007f71 	.word	0x08007f71
 8007f14:	08007f79 	.word	0x08007f79
 8007f18:	08007f81 	.word	0x08007f81
 8007f1c:	08007f89 	.word	0x08007f89
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007f26:	e039      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007f2e:	e035      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007f36:	e031      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007f3e:	e02d      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007f46:	e029      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007f4e:	e025      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007f56:	e021      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007f5e:	e01d      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007f66:	e019      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007f6e:	e015      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007f76:	e011      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007f7e:	e00d      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007f86:	e009      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007f90:	e004      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	75fb      	strb	r3, [r7, #23]
        break;
 8007f96:	e001      	b.n	8007f9c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	371c      	adds	r7, #28
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop

08007fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a4c      	ldr	r2, [pc, #304]	@ (80080f0 <TIM_Base_SetConfig+0x144>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d017      	beq.n	8007ff4 <TIM_Base_SetConfig+0x48>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fca:	d013      	beq.n	8007ff4 <TIM_Base_SetConfig+0x48>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a49      	ldr	r2, [pc, #292]	@ (80080f4 <TIM_Base_SetConfig+0x148>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00f      	beq.n	8007ff4 <TIM_Base_SetConfig+0x48>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a48      	ldr	r2, [pc, #288]	@ (80080f8 <TIM_Base_SetConfig+0x14c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d00b      	beq.n	8007ff4 <TIM_Base_SetConfig+0x48>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a47      	ldr	r2, [pc, #284]	@ (80080fc <TIM_Base_SetConfig+0x150>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d007      	beq.n	8007ff4 <TIM_Base_SetConfig+0x48>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a46      	ldr	r2, [pc, #280]	@ (8008100 <TIM_Base_SetConfig+0x154>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d003      	beq.n	8007ff4 <TIM_Base_SetConfig+0x48>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a45      	ldr	r2, [pc, #276]	@ (8008104 <TIM_Base_SetConfig+0x158>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d108      	bne.n	8008006 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	4313      	orrs	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a39      	ldr	r2, [pc, #228]	@ (80080f0 <TIM_Base_SetConfig+0x144>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d023      	beq.n	8008056 <TIM_Base_SetConfig+0xaa>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008014:	d01f      	beq.n	8008056 <TIM_Base_SetConfig+0xaa>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a36      	ldr	r2, [pc, #216]	@ (80080f4 <TIM_Base_SetConfig+0x148>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d01b      	beq.n	8008056 <TIM_Base_SetConfig+0xaa>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a35      	ldr	r2, [pc, #212]	@ (80080f8 <TIM_Base_SetConfig+0x14c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d017      	beq.n	8008056 <TIM_Base_SetConfig+0xaa>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a34      	ldr	r2, [pc, #208]	@ (80080fc <TIM_Base_SetConfig+0x150>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d013      	beq.n	8008056 <TIM_Base_SetConfig+0xaa>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a33      	ldr	r2, [pc, #204]	@ (8008100 <TIM_Base_SetConfig+0x154>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d00f      	beq.n	8008056 <TIM_Base_SetConfig+0xaa>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a33      	ldr	r2, [pc, #204]	@ (8008108 <TIM_Base_SetConfig+0x15c>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d00b      	beq.n	8008056 <TIM_Base_SetConfig+0xaa>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a32      	ldr	r2, [pc, #200]	@ (800810c <TIM_Base_SetConfig+0x160>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d007      	beq.n	8008056 <TIM_Base_SetConfig+0xaa>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a31      	ldr	r2, [pc, #196]	@ (8008110 <TIM_Base_SetConfig+0x164>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d003      	beq.n	8008056 <TIM_Base_SetConfig+0xaa>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a2c      	ldr	r2, [pc, #176]	@ (8008104 <TIM_Base_SetConfig+0x158>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d108      	bne.n	8008068 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800805c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	4313      	orrs	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	4313      	orrs	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	689a      	ldr	r2, [r3, #8]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a18      	ldr	r2, [pc, #96]	@ (80080f0 <TIM_Base_SetConfig+0x144>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d013      	beq.n	80080bc <TIM_Base_SetConfig+0x110>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a1a      	ldr	r2, [pc, #104]	@ (8008100 <TIM_Base_SetConfig+0x154>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00f      	beq.n	80080bc <TIM_Base_SetConfig+0x110>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a1a      	ldr	r2, [pc, #104]	@ (8008108 <TIM_Base_SetConfig+0x15c>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d00b      	beq.n	80080bc <TIM_Base_SetConfig+0x110>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a19      	ldr	r2, [pc, #100]	@ (800810c <TIM_Base_SetConfig+0x160>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d007      	beq.n	80080bc <TIM_Base_SetConfig+0x110>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a18      	ldr	r2, [pc, #96]	@ (8008110 <TIM_Base_SetConfig+0x164>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d003      	beq.n	80080bc <TIM_Base_SetConfig+0x110>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a13      	ldr	r2, [pc, #76]	@ (8008104 <TIM_Base_SetConfig+0x158>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d103      	bne.n	80080c4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	691a      	ldr	r2, [r3, #16]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d105      	bne.n	80080e2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f023 0201 	bic.w	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	611a      	str	r2, [r3, #16]
  }
}
 80080e2:	bf00      	nop
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40012c00 	.word	0x40012c00
 80080f4:	40000400 	.word	0x40000400
 80080f8:	40000800 	.word	0x40000800
 80080fc:	40000c00 	.word	0x40000c00
 8008100:	40013400 	.word	0x40013400
 8008104:	40015000 	.word	0x40015000
 8008108:	40014000 	.word	0x40014000
 800810c:	40014400 	.word	0x40014400
 8008110:	40014800 	.word	0x40014800

08008114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	f023 0201 	bic.w	r2, r3, #1
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f023 0303 	bic.w	r3, r3, #3
 800814e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f023 0302 	bic.w	r3, r3, #2
 8008160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	4313      	orrs	r3, r2
 800816a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a30      	ldr	r2, [pc, #192]	@ (8008230 <TIM_OC1_SetConfig+0x11c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d013      	beq.n	800819c <TIM_OC1_SetConfig+0x88>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a2f      	ldr	r2, [pc, #188]	@ (8008234 <TIM_OC1_SetConfig+0x120>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00f      	beq.n	800819c <TIM_OC1_SetConfig+0x88>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a2e      	ldr	r2, [pc, #184]	@ (8008238 <TIM_OC1_SetConfig+0x124>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d00b      	beq.n	800819c <TIM_OC1_SetConfig+0x88>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a2d      	ldr	r2, [pc, #180]	@ (800823c <TIM_OC1_SetConfig+0x128>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d007      	beq.n	800819c <TIM_OC1_SetConfig+0x88>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a2c      	ldr	r2, [pc, #176]	@ (8008240 <TIM_OC1_SetConfig+0x12c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d003      	beq.n	800819c <TIM_OC1_SetConfig+0x88>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a2b      	ldr	r2, [pc, #172]	@ (8008244 <TIM_OC1_SetConfig+0x130>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d10c      	bne.n	80081b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	f023 0308 	bic.w	r3, r3, #8
 80081a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f023 0304 	bic.w	r3, r3, #4
 80081b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008230 <TIM_OC1_SetConfig+0x11c>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d013      	beq.n	80081e6 <TIM_OC1_SetConfig+0xd2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a1c      	ldr	r2, [pc, #112]	@ (8008234 <TIM_OC1_SetConfig+0x120>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d00f      	beq.n	80081e6 <TIM_OC1_SetConfig+0xd2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a1b      	ldr	r2, [pc, #108]	@ (8008238 <TIM_OC1_SetConfig+0x124>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d00b      	beq.n	80081e6 <TIM_OC1_SetConfig+0xd2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a1a      	ldr	r2, [pc, #104]	@ (800823c <TIM_OC1_SetConfig+0x128>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d007      	beq.n	80081e6 <TIM_OC1_SetConfig+0xd2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a19      	ldr	r2, [pc, #100]	@ (8008240 <TIM_OC1_SetConfig+0x12c>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d003      	beq.n	80081e6 <TIM_OC1_SetConfig+0xd2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a18      	ldr	r2, [pc, #96]	@ (8008244 <TIM_OC1_SetConfig+0x130>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d111      	bne.n	800820a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	4313      	orrs	r3, r2
 8008208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	621a      	str	r2, [r3, #32]
}
 8008224:	bf00      	nop
 8008226:	371c      	adds	r7, #28
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	40012c00 	.word	0x40012c00
 8008234:	40013400 	.word	0x40013400
 8008238:	40014000 	.word	0x40014000
 800823c:	40014400 	.word	0x40014400
 8008240:	40014800 	.word	0x40014800
 8008244:	40015000 	.word	0x40015000

08008248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a1b      	ldr	r3, [r3, #32]
 800825c:	f023 0210 	bic.w	r2, r3, #16
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800827a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	021b      	lsls	r3, r3, #8
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	4313      	orrs	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f023 0320 	bic.w	r3, r3, #32
 8008296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	011b      	lsls	r3, r3, #4
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a2c      	ldr	r2, [pc, #176]	@ (8008358 <TIM_OC2_SetConfig+0x110>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d007      	beq.n	80082bc <TIM_OC2_SetConfig+0x74>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a2b      	ldr	r2, [pc, #172]	@ (800835c <TIM_OC2_SetConfig+0x114>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d003      	beq.n	80082bc <TIM_OC2_SetConfig+0x74>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008360 <TIM_OC2_SetConfig+0x118>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d10d      	bne.n	80082d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	011b      	lsls	r3, r3, #4
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a1f      	ldr	r2, [pc, #124]	@ (8008358 <TIM_OC2_SetConfig+0x110>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d013      	beq.n	8008308 <TIM_OC2_SetConfig+0xc0>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a1e      	ldr	r2, [pc, #120]	@ (800835c <TIM_OC2_SetConfig+0x114>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00f      	beq.n	8008308 <TIM_OC2_SetConfig+0xc0>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008364 <TIM_OC2_SetConfig+0x11c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00b      	beq.n	8008308 <TIM_OC2_SetConfig+0xc0>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008368 <TIM_OC2_SetConfig+0x120>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d007      	beq.n	8008308 <TIM_OC2_SetConfig+0xc0>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a1c      	ldr	r2, [pc, #112]	@ (800836c <TIM_OC2_SetConfig+0x124>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d003      	beq.n	8008308 <TIM_OC2_SetConfig+0xc0>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a17      	ldr	r2, [pc, #92]	@ (8008360 <TIM_OC2_SetConfig+0x118>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d113      	bne.n	8008330 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800830e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	4313      	orrs	r3, r2
 8008322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	4313      	orrs	r3, r2
 800832e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	621a      	str	r2, [r3, #32]
}
 800834a:	bf00      	nop
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	40012c00 	.word	0x40012c00
 800835c:	40013400 	.word	0x40013400
 8008360:	40015000 	.word	0x40015000
 8008364:	40014000 	.word	0x40014000
 8008368:	40014400 	.word	0x40014400
 800836c:	40014800 	.word	0x40014800

08008370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008370:	b480      	push	{r7}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800839e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f023 0303 	bic.w	r3, r3, #3
 80083aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	021b      	lsls	r3, r3, #8
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a2b      	ldr	r2, [pc, #172]	@ (800847c <TIM_OC3_SetConfig+0x10c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d007      	beq.n	80083e2 <TIM_OC3_SetConfig+0x72>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a2a      	ldr	r2, [pc, #168]	@ (8008480 <TIM_OC3_SetConfig+0x110>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d003      	beq.n	80083e2 <TIM_OC3_SetConfig+0x72>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a29      	ldr	r2, [pc, #164]	@ (8008484 <TIM_OC3_SetConfig+0x114>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d10d      	bne.n	80083fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	021b      	lsls	r3, r3, #8
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a1e      	ldr	r2, [pc, #120]	@ (800847c <TIM_OC3_SetConfig+0x10c>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d013      	beq.n	800842e <TIM_OC3_SetConfig+0xbe>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a1d      	ldr	r2, [pc, #116]	@ (8008480 <TIM_OC3_SetConfig+0x110>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00f      	beq.n	800842e <TIM_OC3_SetConfig+0xbe>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a1d      	ldr	r2, [pc, #116]	@ (8008488 <TIM_OC3_SetConfig+0x118>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00b      	beq.n	800842e <TIM_OC3_SetConfig+0xbe>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a1c      	ldr	r2, [pc, #112]	@ (800848c <TIM_OC3_SetConfig+0x11c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d007      	beq.n	800842e <TIM_OC3_SetConfig+0xbe>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a1b      	ldr	r2, [pc, #108]	@ (8008490 <TIM_OC3_SetConfig+0x120>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d003      	beq.n	800842e <TIM_OC3_SetConfig+0xbe>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a16      	ldr	r2, [pc, #88]	@ (8008484 <TIM_OC3_SetConfig+0x114>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d113      	bne.n	8008456 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800843c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	011b      	lsls	r3, r3, #4
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	4313      	orrs	r3, r2
 8008448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	011b      	lsls	r3, r3, #4
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	4313      	orrs	r3, r2
 8008454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	621a      	str	r2, [r3, #32]
}
 8008470:	bf00      	nop
 8008472:	371c      	adds	r7, #28
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	40012c00 	.word	0x40012c00
 8008480:	40013400 	.word	0x40013400
 8008484:	40015000 	.word	0x40015000
 8008488:	40014000 	.word	0x40014000
 800848c:	40014400 	.word	0x40014400
 8008490:	40014800 	.word	0x40014800

08008494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a1b      	ldr	r3, [r3, #32]
 80084a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	021b      	lsls	r3, r3, #8
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	4313      	orrs	r3, r2
 80084da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	031b      	lsls	r3, r3, #12
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a2c      	ldr	r2, [pc, #176]	@ (80085a4 <TIM_OC4_SetConfig+0x110>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d007      	beq.n	8008508 <TIM_OC4_SetConfig+0x74>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a2b      	ldr	r2, [pc, #172]	@ (80085a8 <TIM_OC4_SetConfig+0x114>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d003      	beq.n	8008508 <TIM_OC4_SetConfig+0x74>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a2a      	ldr	r2, [pc, #168]	@ (80085ac <TIM_OC4_SetConfig+0x118>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d10d      	bne.n	8008524 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800850e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	031b      	lsls	r3, r3, #12
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	4313      	orrs	r3, r2
 800851a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008522:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a1f      	ldr	r2, [pc, #124]	@ (80085a4 <TIM_OC4_SetConfig+0x110>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d013      	beq.n	8008554 <TIM_OC4_SetConfig+0xc0>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a1e      	ldr	r2, [pc, #120]	@ (80085a8 <TIM_OC4_SetConfig+0x114>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00f      	beq.n	8008554 <TIM_OC4_SetConfig+0xc0>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a1e      	ldr	r2, [pc, #120]	@ (80085b0 <TIM_OC4_SetConfig+0x11c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d00b      	beq.n	8008554 <TIM_OC4_SetConfig+0xc0>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a1d      	ldr	r2, [pc, #116]	@ (80085b4 <TIM_OC4_SetConfig+0x120>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d007      	beq.n	8008554 <TIM_OC4_SetConfig+0xc0>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a1c      	ldr	r2, [pc, #112]	@ (80085b8 <TIM_OC4_SetConfig+0x124>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d003      	beq.n	8008554 <TIM_OC4_SetConfig+0xc0>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a17      	ldr	r2, [pc, #92]	@ (80085ac <TIM_OC4_SetConfig+0x118>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d113      	bne.n	800857c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800855a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008562:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	019b      	lsls	r3, r3, #6
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	4313      	orrs	r3, r2
 800856e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	019b      	lsls	r3, r3, #6
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	4313      	orrs	r3, r2
 800857a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	621a      	str	r2, [r3, #32]
}
 8008596:	bf00      	nop
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	40012c00 	.word	0x40012c00
 80085a8:	40013400 	.word	0x40013400
 80085ac:	40015000 	.word	0x40015000
 80085b0:	40014000 	.word	0x40014000
 80085b4:	40014400 	.word	0x40014400
 80085b8:	40014800 	.word	0x40014800

080085bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008600:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	041b      	lsls	r3, r3, #16
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	4313      	orrs	r3, r2
 800860c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a19      	ldr	r2, [pc, #100]	@ (8008678 <TIM_OC5_SetConfig+0xbc>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d013      	beq.n	800863e <TIM_OC5_SetConfig+0x82>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a18      	ldr	r2, [pc, #96]	@ (800867c <TIM_OC5_SetConfig+0xc0>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d00f      	beq.n	800863e <TIM_OC5_SetConfig+0x82>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a17      	ldr	r2, [pc, #92]	@ (8008680 <TIM_OC5_SetConfig+0xc4>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d00b      	beq.n	800863e <TIM_OC5_SetConfig+0x82>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a16      	ldr	r2, [pc, #88]	@ (8008684 <TIM_OC5_SetConfig+0xc8>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d007      	beq.n	800863e <TIM_OC5_SetConfig+0x82>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a15      	ldr	r2, [pc, #84]	@ (8008688 <TIM_OC5_SetConfig+0xcc>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d003      	beq.n	800863e <TIM_OC5_SetConfig+0x82>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a14      	ldr	r2, [pc, #80]	@ (800868c <TIM_OC5_SetConfig+0xd0>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d109      	bne.n	8008652 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008644:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	021b      	lsls	r3, r3, #8
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	4313      	orrs	r3, r2
 8008650:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	621a      	str	r2, [r3, #32]
}
 800866c:	bf00      	nop
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	40012c00 	.word	0x40012c00
 800867c:	40013400 	.word	0x40013400
 8008680:	40014000 	.word	0x40014000
 8008684:	40014400 	.word	0x40014400
 8008688:	40014800 	.word	0x40014800
 800868c:	40015000 	.word	0x40015000

08008690 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	021b      	lsls	r3, r3, #8
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80086d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	051b      	lsls	r3, r3, #20
 80086de:	693a      	ldr	r2, [r7, #16]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a1a      	ldr	r2, [pc, #104]	@ (8008750 <TIM_OC6_SetConfig+0xc0>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d013      	beq.n	8008714 <TIM_OC6_SetConfig+0x84>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a19      	ldr	r2, [pc, #100]	@ (8008754 <TIM_OC6_SetConfig+0xc4>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d00f      	beq.n	8008714 <TIM_OC6_SetConfig+0x84>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a18      	ldr	r2, [pc, #96]	@ (8008758 <TIM_OC6_SetConfig+0xc8>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00b      	beq.n	8008714 <TIM_OC6_SetConfig+0x84>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a17      	ldr	r2, [pc, #92]	@ (800875c <TIM_OC6_SetConfig+0xcc>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d007      	beq.n	8008714 <TIM_OC6_SetConfig+0x84>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a16      	ldr	r2, [pc, #88]	@ (8008760 <TIM_OC6_SetConfig+0xd0>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d003      	beq.n	8008714 <TIM_OC6_SetConfig+0x84>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a15      	ldr	r2, [pc, #84]	@ (8008764 <TIM_OC6_SetConfig+0xd4>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d109      	bne.n	8008728 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800871a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	029b      	lsls	r3, r3, #10
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	4313      	orrs	r3, r2
 8008726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	621a      	str	r2, [r3, #32]
}
 8008742:	bf00      	nop
 8008744:	371c      	adds	r7, #28
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	40012c00 	.word	0x40012c00
 8008754:	40013400 	.word	0x40013400
 8008758:	40014000 	.word	0x40014000
 800875c:	40014400 	.word	0x40014400
 8008760:	40014800 	.word	0x40014800
 8008764:	40015000 	.word	0x40015000

08008768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008768:	b480      	push	{r7}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	f023 0201 	bic.w	r2, r3, #1
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	011b      	lsls	r3, r3, #4
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	4313      	orrs	r3, r2
 800879c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f023 030a 	bic.w	r3, r3, #10
 80087a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	621a      	str	r2, [r3, #32]
}
 80087ba:	bf00      	nop
 80087bc:	371c      	adds	r7, #28
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b087      	sub	sp, #28
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	60b9      	str	r1, [r7, #8]
 80087d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	f023 0210 	bic.w	r2, r3, #16
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80087f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	031b      	lsls	r3, r3, #12
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008802:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	4313      	orrs	r3, r2
 800880c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	621a      	str	r2, [r3, #32]
}
 800881a:	bf00      	nop
 800881c:	371c      	adds	r7, #28
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008826:	b480      	push	{r7}
 8008828:	b085      	sub	sp, #20
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800883c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4313      	orrs	r3, r2
 8008848:	f043 0307 	orr.w	r3, r3, #7
 800884c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	609a      	str	r2, [r3, #8]
}
 8008854:	bf00      	nop
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008860:	b480      	push	{r7}
 8008862:	b087      	sub	sp, #28
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
 800886c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800887a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	021a      	lsls	r2, r3, #8
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	431a      	orrs	r2, r3
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	4313      	orrs	r3, r2
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	4313      	orrs	r3, r2
 800888c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	609a      	str	r2, [r3, #8]
}
 8008894:	bf00      	nop
 8008896:	371c      	adds	r7, #28
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b087      	sub	sp, #28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	f003 031f 	and.w	r3, r3, #31
 80088b2:	2201      	movs	r2, #1
 80088b4:	fa02 f303 	lsl.w	r3, r2, r3
 80088b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6a1a      	ldr	r2, [r3, #32]
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	43db      	mvns	r3, r3
 80088c2:	401a      	ands	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6a1a      	ldr	r2, [r3, #32]
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f003 031f 	and.w	r3, r3, #31
 80088d2:	6879      	ldr	r1, [r7, #4]
 80088d4:	fa01 f303 	lsl.w	r3, r1, r3
 80088d8:	431a      	orrs	r2, r3
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	621a      	str	r2, [r3, #32]
}
 80088de:	bf00      	nop
 80088e0:	371c      	adds	r7, #28
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
	...

080088ec <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a26      	ldr	r2, [pc, #152]	@ (8008990 <TIM_ResetCallback+0xa4>)
 80088f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a25      	ldr	r2, [pc, #148]	@ (8008994 <TIM_ResetCallback+0xa8>)
 8008900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a24      	ldr	r2, [pc, #144]	@ (8008998 <TIM_ResetCallback+0xac>)
 8008908:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a23      	ldr	r2, [pc, #140]	@ (800899c <TIM_ResetCallback+0xb0>)
 8008910:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a22      	ldr	r2, [pc, #136]	@ (80089a0 <TIM_ResetCallback+0xb4>)
 8008918:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a21      	ldr	r2, [pc, #132]	@ (80089a4 <TIM_ResetCallback+0xb8>)
 8008920:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a20      	ldr	r2, [pc, #128]	@ (80089a8 <TIM_ResetCallback+0xbc>)
 8008928:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a1f      	ldr	r2, [pc, #124]	@ (80089ac <TIM_ResetCallback+0xc0>)
 8008930:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a1e      	ldr	r2, [pc, #120]	@ (80089b0 <TIM_ResetCallback+0xc4>)
 8008938:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a1d      	ldr	r2, [pc, #116]	@ (80089b4 <TIM_ResetCallback+0xc8>)
 8008940:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a1c      	ldr	r2, [pc, #112]	@ (80089b8 <TIM_ResetCallback+0xcc>)
 8008948:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a1b      	ldr	r2, [pc, #108]	@ (80089bc <TIM_ResetCallback+0xd0>)
 8008950:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a1a      	ldr	r2, [pc, #104]	@ (80089c0 <TIM_ResetCallback+0xd4>)
 8008958:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a19      	ldr	r2, [pc, #100]	@ (80089c4 <TIM_ResetCallback+0xd8>)
 8008960:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a18      	ldr	r2, [pc, #96]	@ (80089c8 <TIM_ResetCallback+0xdc>)
 8008968:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a17      	ldr	r2, [pc, #92]	@ (80089cc <TIM_ResetCallback+0xe0>)
 8008970:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a16      	ldr	r2, [pc, #88]	@ (80089d0 <TIM_ResetCallback+0xe4>)
 8008978:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a15      	ldr	r2, [pc, #84]	@ (80089d4 <TIM_ResetCallback+0xe8>)
 8008980:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	08001af9 	.word	0x08001af9
 8008994:	08007c39 	.word	0x08007c39
 8008998:	08007cb1 	.word	0x08007cb1
 800899c:	08007cc5 	.word	0x08007cc5
 80089a0:	08007c61 	.word	0x08007c61
 80089a4:	08007c75 	.word	0x08007c75
 80089a8:	08007c4d 	.word	0x08007c4d
 80089ac:	08007c89 	.word	0x08007c89
 80089b0:	08007c9d 	.word	0x08007c9d
 80089b4:	08007cd9 	.word	0x08007cd9
 80089b8:	08008c2d 	.word	0x08008c2d
 80089bc:	08008c41 	.word	0x08008c41
 80089c0:	08008c55 	.word	0x08008c55
 80089c4:	08008c69 	.word	0x08008c69
 80089c8:	08008c7d 	.word	0x08008c7d
 80089cc:	08008c91 	.word	0x08008c91
 80089d0:	08008ca5 	.word	0x08008ca5
 80089d4:	08008cb9 	.word	0x08008cb9

080089d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d101      	bne.n	80089f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089ec:	2302      	movs	r3, #2
 80089ee:	e074      	b.n	8008ada <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a34      	ldr	r2, [pc, #208]	@ (8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d009      	beq.n	8008a2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a33      	ldr	r2, [pc, #204]	@ (8008aec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d004      	beq.n	8008a2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a31      	ldr	r2, [pc, #196]	@ (8008af0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d108      	bne.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008a34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a21      	ldr	r2, [pc, #132]	@ (8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d022      	beq.n	8008aae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a70:	d01d      	beq.n	8008aae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a1f      	ldr	r2, [pc, #124]	@ (8008af4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d018      	beq.n	8008aae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a1d      	ldr	r2, [pc, #116]	@ (8008af8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d013      	beq.n	8008aae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8008afc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d00e      	beq.n	8008aae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a15      	ldr	r2, [pc, #84]	@ (8008aec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d009      	beq.n	8008aae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a18      	ldr	r2, [pc, #96]	@ (8008b00 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d004      	beq.n	8008aae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a11      	ldr	r2, [pc, #68]	@ (8008af0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d10c      	bne.n	8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	40012c00 	.word	0x40012c00
 8008aec:	40013400 	.word	0x40013400
 8008af0:	40015000 	.word	0x40015000
 8008af4:	40000400 	.word	0x40000400
 8008af8:	40000800 	.word	0x40000800
 8008afc:	40000c00 	.word	0x40000c00
 8008b00:	40014000 	.word	0x40014000

08008b04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d101      	bne.n	8008b20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	e078      	b.n	8008c12 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b86:	4313      	orrs	r3, r2
 8008b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	041b      	lsls	r3, r3, #16
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a1c      	ldr	r2, [pc, #112]	@ (8008c20 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d009      	beq.n	8008bc6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8008c24 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d004      	beq.n	8008bc6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a19      	ldr	r2, [pc, #100]	@ (8008c28 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d11c      	bne.n	8008c00 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd0:	051b      	lsls	r3, r3, #20
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	40012c00 	.word	0x40012c00
 8008c24:	40013400 	.word	0x40013400
 8008c28:	40015000 	.word	0x40015000

08008c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e050      	b.n	8008d80 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d114      	bne.n	8008d12 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fd45 	bl	8009780 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d103      	bne.n	8008d08 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a21      	ldr	r2, [pc, #132]	@ (8008d88 <HAL_UART_Init+0xbc>)
 8008d04:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2224      	movs	r2, #36	@ 0x24
 8008d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f022 0201 	bic.w	r2, r2, #1
 8008d28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f001 f872 	bl	8009e1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fd73 	bl	8009824 <UART_SetConfig>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d101      	bne.n	8008d48 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e01b      	b.n	8008d80 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689a      	ldr	r2, [r3, #8]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f042 0201 	orr.w	r2, r2, #1
 8008d76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f001 f8f1 	bl	8009f60 <UART_CheckIdleState>
 8008d7e:	4603      	mov	r3, r0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	08002e29 	.word	0x08002e29

08008d8c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	460b      	mov	r3, r1
 8008d96:	607a      	str	r2, [r7, #4]
 8008d98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d109      	bne.n	8008db8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008daa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e09c      	b.n	8008ef2 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dbe:	2b20      	cmp	r3, #32
 8008dc0:	d16c      	bne.n	8008e9c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8008dc2:	7afb      	ldrb	r3, [r7, #11]
 8008dc4:	2b0c      	cmp	r3, #12
 8008dc6:	d85e      	bhi.n	8008e86 <HAL_UART_RegisterCallback+0xfa>
 8008dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd0 <HAL_UART_RegisterCallback+0x44>)
 8008dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dce:	bf00      	nop
 8008dd0:	08008e05 	.word	0x08008e05
 8008dd4:	08008e0f 	.word	0x08008e0f
 8008dd8:	08008e19 	.word	0x08008e19
 8008ddc:	08008e23 	.word	0x08008e23
 8008de0:	08008e2d 	.word	0x08008e2d
 8008de4:	08008e37 	.word	0x08008e37
 8008de8:	08008e41 	.word	0x08008e41
 8008dec:	08008e4b 	.word	0x08008e4b
 8008df0:	08008e55 	.word	0x08008e55
 8008df4:	08008e5f 	.word	0x08008e5f
 8008df8:	08008e69 	.word	0x08008e69
 8008dfc:	08008e73 	.word	0x08008e73
 8008e00:	08008e7d 	.word	0x08008e7d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008e0c:	e070      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008e16:	e06b      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008e20:	e066      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008e2a:	e061      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008e34:	e05c      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008e3e:	e057      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008e48:	e052      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008e52:	e04d      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008e5c:	e048      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008e66:	e043      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008e70:	e03e      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008e7a:	e039      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008e84:	e034      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	75fb      	strb	r3, [r7, #23]
        break;
 8008e9a:	e029      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d11a      	bne.n	8008edc <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8008ea6:	7afb      	ldrb	r3, [r7, #11]
 8008ea8:	2b0b      	cmp	r3, #11
 8008eaa:	d002      	beq.n	8008eb2 <HAL_UART_RegisterCallback+0x126>
 8008eac:	2b0c      	cmp	r3, #12
 8008eae:	d005      	beq.n	8008ebc <HAL_UART_RegisterCallback+0x130>
 8008eb0:	e009      	b.n	8008ec6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008eba:	e019      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008ec4:	e014      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ecc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	75fb      	strb	r3, [r7, #23]
        break;
 8008eda:	e009      	b.n	8008ef0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ee2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	371c      	adds	r7, #28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop

08008f00 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08a      	sub	sp, #40	@ 0x28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f14:	2b20      	cmp	r3, #32
 8008f16:	d137      	bne.n	8008f88 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d002      	beq.n	8008f24 <HAL_UART_Receive_DMA+0x24>
 8008f1e:	88fb      	ldrh	r3, [r7, #6]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e030      	b.n	8008f8a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a18      	ldr	r2, [pc, #96]	@ (8008f94 <HAL_UART_Receive_DMA+0x94>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d01f      	beq.n	8008f78 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d018      	beq.n	8008f78 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	e853 3f00 	ldrex	r3, [r3]
 8008f52:	613b      	str	r3, [r7, #16]
   return(result);
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	461a      	mov	r2, r3
 8008f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f64:	623b      	str	r3, [r7, #32]
 8008f66:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f68:	69f9      	ldr	r1, [r7, #28]
 8008f6a:	6a3a      	ldr	r2, [r7, #32]
 8008f6c:	e841 2300 	strex	r3, r2, [r1]
 8008f70:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1e6      	bne.n	8008f46 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008f78:	88fb      	ldrh	r3, [r7, #6]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	68b9      	ldr	r1, [r7, #8]
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f001 f906 	bl	800a190 <UART_Start_Receive_DMA>
 8008f84:	4603      	mov	r3, r0
 8008f86:	e000      	b.n	8008f8a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008f88:	2302      	movs	r3, #2
  }
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3728      	adds	r7, #40	@ 0x28
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	40008000 	.word	0x40008000

08008f98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b0ba      	sub	sp, #232	@ 0xe8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008fbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008fc2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008fcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d11b      	bne.n	800900c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d015      	beq.n	800900c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fe4:	f003 0320 	and.w	r3, r3, #32
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d105      	bne.n	8008ff8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d009      	beq.n	800900c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 82f3 	beq.w	80095e8 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	4798      	blx	r3
      }
      return;
 800900a:	e2ed      	b.n	80095e8 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800900c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 8129 	beq.w	8009268 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009016:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800901a:	4b90      	ldr	r3, [pc, #576]	@ (800925c <HAL_UART_IRQHandler+0x2c4>)
 800901c:	4013      	ands	r3, r2
 800901e:	2b00      	cmp	r3, #0
 8009020:	d106      	bne.n	8009030 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009022:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009026:	4b8e      	ldr	r3, [pc, #568]	@ (8009260 <HAL_UART_IRQHandler+0x2c8>)
 8009028:	4013      	ands	r3, r2
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 811c 	beq.w	8009268 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d011      	beq.n	8009060 <HAL_UART_IRQHandler+0xc8>
 800903c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00b      	beq.n	8009060 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2201      	movs	r2, #1
 800904e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009056:	f043 0201 	orr.w	r2, r3, #1
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009064:	f003 0302 	and.w	r3, r3, #2
 8009068:	2b00      	cmp	r3, #0
 800906a:	d011      	beq.n	8009090 <HAL_UART_IRQHandler+0xf8>
 800906c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00b      	beq.n	8009090 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2202      	movs	r2, #2
 800907e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009086:	f043 0204 	orr.w	r2, r3, #4
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009094:	f003 0304 	and.w	r3, r3, #4
 8009098:	2b00      	cmp	r3, #0
 800909a:	d011      	beq.n	80090c0 <HAL_UART_IRQHandler+0x128>
 800909c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00b      	beq.n	80090c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2204      	movs	r2, #4
 80090ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b6:	f043 0202 	orr.w	r2, r3, #2
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80090c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090c4:	f003 0308 	and.w	r3, r3, #8
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d017      	beq.n	80090fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090d0:	f003 0320 	and.w	r3, r3, #32
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d105      	bne.n	80090e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80090d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80090dc:	4b5f      	ldr	r3, [pc, #380]	@ (800925c <HAL_UART_IRQHandler+0x2c4>)
 80090de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00b      	beq.n	80090fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2208      	movs	r2, #8
 80090ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090f2:	f043 0208 	orr.w	r2, r3, #8
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80090fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009100:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009104:	2b00      	cmp	r3, #0
 8009106:	d012      	beq.n	800912e <HAL_UART_IRQHandler+0x196>
 8009108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800910c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00c      	beq.n	800912e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800911c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009124:	f043 0220 	orr.w	r2, r3, #32
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 8259 	beq.w	80095ec <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800913a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800913e:	f003 0320 	and.w	r3, r3, #32
 8009142:	2b00      	cmp	r3, #0
 8009144:	d013      	beq.n	800916e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800914a:	f003 0320 	and.w	r3, r3, #32
 800914e:	2b00      	cmp	r3, #0
 8009150:	d105      	bne.n	800915e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d007      	beq.n	800916e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009174:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009182:	2b40      	cmp	r3, #64	@ 0x40
 8009184:	d005      	beq.n	8009192 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800918a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800918e:	2b00      	cmp	r3, #0
 8009190:	d058      	beq.n	8009244 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f001 f8e3 	bl	800a35e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a2:	2b40      	cmp	r3, #64	@ 0x40
 80091a4:	d148      	bne.n	8009238 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3308      	adds	r3, #8
 80091ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80091b4:	e853 3f00 	ldrex	r3, [r3]
 80091b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80091bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80091c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3308      	adds	r3, #8
 80091ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80091d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80091d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80091de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80091ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1d9      	bne.n	80091a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d017      	beq.n	800922c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009202:	4a18      	ldr	r2, [pc, #96]	@ (8009264 <HAL_UART_IRQHandler+0x2cc>)
 8009204:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800920c:	4618      	mov	r0, r3
 800920e:	f7fc f8bb 	bl	8005388 <HAL_DMA_Abort_IT>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d01f      	beq.n	8009258 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800921e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009226:	4610      	mov	r0, r2
 8009228:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800922a:	e015      	b.n	8009258 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009236:	e00f      	b.n	8009258 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009242:	e009      	b.n	8009258 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009256:	e1c9      	b.n	80095ec <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009258:	bf00      	nop
    return;
 800925a:	e1c7      	b.n	80095ec <HAL_UART_IRQHandler+0x654>
 800925c:	10000001 	.word	0x10000001
 8009260:	04000120 	.word	0x04000120
 8009264:	0800a629 	.word	0x0800a629

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800926c:	2b01      	cmp	r3, #1
 800926e:	f040 8157 	bne.w	8009520 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009276:	f003 0310 	and.w	r3, r3, #16
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 8150 	beq.w	8009520 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009284:	f003 0310 	and.w	r3, r3, #16
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 8149 	beq.w	8009520 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2210      	movs	r2, #16
 8009294:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a0:	2b40      	cmp	r3, #64	@ 0x40
 80092a2:	f040 80bd 	bne.w	8009420 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 8199 	beq.w	80095f0 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092c8:	429a      	cmp	r2, r3
 80092ca:	f080 8191 	bcs.w	80095f0 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 0320 	and.w	r3, r3, #32
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f040 8087 	bne.w	80093fa <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009300:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009308:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	461a      	mov	r2, r3
 8009312:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009316:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800931a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009322:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800932e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1da      	bne.n	80092ec <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	3308      	adds	r3, #8
 800933c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009340:	e853 3f00 	ldrex	r3, [r3]
 8009344:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009348:	f023 0301 	bic.w	r3, r3, #1
 800934c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3308      	adds	r3, #8
 8009356:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800935a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800935e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009362:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009366:	e841 2300 	strex	r3, r2, [r1]
 800936a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800936c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1e1      	bne.n	8009336 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3308      	adds	r3, #8
 8009378:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800937c:	e853 3f00 	ldrex	r3, [r3]
 8009380:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009382:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009384:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009388:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3308      	adds	r3, #8
 8009392:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009396:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009398:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800939c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800939e:	e841 2300 	strex	r3, r2, [r1]
 80093a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80093a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1e3      	bne.n	8009372 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2220      	movs	r2, #32
 80093ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093c8:	f023 0310 	bic.w	r3, r3, #16
 80093cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	461a      	mov	r2, r3
 80093d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80093e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093e2:	e841 2300 	strex	r3, r2, [r1]
 80093e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80093e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1e4      	bne.n	80093b8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fb ff6e 	bl	80052d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2202      	movs	r2, #2
 80093fe:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009412:	b292      	uxth	r2, r2
 8009414:	1a8a      	subs	r2, r1, r2
 8009416:	b292      	uxth	r2, r2
 8009418:	4611      	mov	r1, r2
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800941e:	e0e7      	b.n	80095f0 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800942c:	b29b      	uxth	r3, r3
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800943a:	b29b      	uxth	r3, r3
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 80d9 	beq.w	80095f4 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8009442:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 80d4 	beq.w	80095f4 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009454:	e853 3f00 	ldrex	r3, [r3]
 8009458:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800945a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800945c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009460:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	461a      	mov	r2, r3
 800946a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800946e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009470:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009474:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800947c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e4      	bne.n	800944c <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3308      	adds	r3, #8
 8009488:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	623b      	str	r3, [r7, #32]
   return(result);
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009498:	f023 0301 	bic.w	r3, r3, #1
 800949c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3308      	adds	r3, #8
 80094a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80094aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80094ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e1      	bne.n	8009482 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2220      	movs	r2, #32
 80094c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	e853 3f00 	ldrex	r3, [r3]
 80094de:	60fb      	str	r3, [r7, #12]
   return(result);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 0310 	bic.w	r3, r3, #16
 80094e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	461a      	mov	r2, r3
 80094f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80094f4:	61fb      	str	r3, [r7, #28]
 80094f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f8:	69b9      	ldr	r1, [r7, #24]
 80094fa:	69fa      	ldr	r2, [r7, #28]
 80094fc:	e841 2300 	strex	r3, r2, [r1]
 8009500:	617b      	str	r3, [r7, #20]
   return(result);
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1e4      	bne.n	80094d2 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2202      	movs	r2, #2
 800950c:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009514:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009518:	4611      	mov	r1, r2
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800951e:	e069      	b.n	80095f4 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009524:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009528:	2b00      	cmp	r3, #0
 800952a:	d010      	beq.n	800954e <HAL_UART_IRQHandler+0x5b6>
 800952c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009530:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00a      	beq.n	800954e <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009540:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800954c:	e055      	b.n	80095fa <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800954e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009556:	2b00      	cmp	r3, #0
 8009558:	d014      	beq.n	8009584 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800955a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800955e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009562:	2b00      	cmp	r3, #0
 8009564:	d105      	bne.n	8009572 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800956a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d008      	beq.n	8009584 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009576:	2b00      	cmp	r3, #0
 8009578:	d03e      	beq.n	80095f8 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	4798      	blx	r3
    }
    return;
 8009582:	e039      	b.n	80095f8 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800958c:	2b00      	cmp	r3, #0
 800958e:	d009      	beq.n	80095a4 <HAL_UART_IRQHandler+0x60c>
 8009590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009598:	2b00      	cmp	r3, #0
 800959a:	d003      	beq.n	80095a4 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f001 f85b 	bl	800a658 <UART_EndTransmit_IT>
    return;
 80095a2:	e02a      	b.n	80095fa <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00b      	beq.n	80095c8 <HAL_UART_IRQHandler+0x630>
 80095b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d005      	beq.n	80095c8 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095c6:	e018      	b.n	80095fa <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80095c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d012      	beq.n	80095fa <HAL_UART_IRQHandler+0x662>
 80095d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	da0e      	bge.n	80095fa <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095e6:	e008      	b.n	80095fa <HAL_UART_IRQHandler+0x662>
      return;
 80095e8:	bf00      	nop
 80095ea:	e006      	b.n	80095fa <HAL_UART_IRQHandler+0x662>
    return;
 80095ec:	bf00      	nop
 80095ee:	e004      	b.n	80095fa <HAL_UART_IRQHandler+0x662>
      return;
 80095f0:	bf00      	nop
 80095f2:	e002      	b.n	80095fa <HAL_UART_IRQHandler+0x662>
      return;
 80095f4:	bf00      	nop
 80095f6:	e000      	b.n	80095fa <HAL_UART_IRQHandler+0x662>
    return;
 80095f8:	bf00      	nop
  }
}
 80095fa:	37e8      	adds	r7, #232	@ 0xe8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	460b      	mov	r3, r1
 80096aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a09      	ldr	r2, [pc, #36]	@ (80096ec <HAL_UART_ReceiverTimeout_Config+0x34>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d009      	beq.n	80096e0 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	430a      	orrs	r2, r1
 80096de:	615a      	str	r2, [r3, #20]
  }
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr
 80096ec:	40008000 	.word	0x40008000

080096f0 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a18      	ldr	r2, [pc, #96]	@ (8009760 <HAL_UART_EnableReceiverTimeout+0x70>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d027      	beq.n	8009752 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009708:	2b20      	cmp	r3, #32
 800970a:	d120      	bne.n	800974e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009712:	2b01      	cmp	r3, #1
 8009714:	d101      	bne.n	800971a <HAL_UART_EnableReceiverTimeout+0x2a>
 8009716:	2302      	movs	r3, #2
 8009718:	e01c      	b.n	8009754 <HAL_UART_EnableReceiverTimeout+0x64>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2224      	movs	r2, #36	@ 0x24
 8009726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	685a      	ldr	r2, [r3, #4]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009738:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2220      	movs	r2, #32
 800973e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	e002      	b.n	8009754 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800974e:	2302      	movs	r3, #2
 8009750:	e000      	b.n	8009754 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
  }
}
 8009754:	4618      	mov	r0, r3
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	40008000 	.word	0x40008000

08009764 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
	...

08009780 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a1a      	ldr	r2, [pc, #104]	@ (80097f4 <UART_InitCallbacksToDefault+0x74>)
 800978c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a19      	ldr	r2, [pc, #100]	@ (80097f8 <UART_InitCallbacksToDefault+0x78>)
 8009794:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a18      	ldr	r2, [pc, #96]	@ (80097fc <UART_InitCallbacksToDefault+0x7c>)
 800979c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a17      	ldr	r2, [pc, #92]	@ (8009800 <UART_InitCallbacksToDefault+0x80>)
 80097a4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a16      	ldr	r2, [pc, #88]	@ (8009804 <UART_InitCallbacksToDefault+0x84>)
 80097ac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a15      	ldr	r2, [pc, #84]	@ (8009808 <UART_InitCallbacksToDefault+0x88>)
 80097b4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a14      	ldr	r2, [pc, #80]	@ (800980c <UART_InitCallbacksToDefault+0x8c>)
 80097bc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a13      	ldr	r2, [pc, #76]	@ (8009810 <UART_InitCallbacksToDefault+0x90>)
 80097c4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a12      	ldr	r2, [pc, #72]	@ (8009814 <UART_InitCallbacksToDefault+0x94>)
 80097cc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a11      	ldr	r2, [pc, #68]	@ (8009818 <UART_InitCallbacksToDefault+0x98>)
 80097d4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a10      	ldr	r2, [pc, #64]	@ (800981c <UART_InitCallbacksToDefault+0x9c>)
 80097dc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a0f      	ldr	r2, [pc, #60]	@ (8009820 <UART_InitCallbacksToDefault+0xa0>)
 80097e4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	08009615 	.word	0x08009615
 80097f8:	08009601 	.word	0x08009601
 80097fc:	0800963d 	.word	0x0800963d
 8009800:	08009629 	.word	0x08009629
 8009804:	08009651 	.word	0x08009651
 8009808:	08009665 	.word	0x08009665
 800980c:	08009679 	.word	0x08009679
 8009810:	0800968d 	.word	0x0800968d
 8009814:	0800a6b3 	.word	0x0800a6b3
 8009818:	0800a6c7 	.word	0x0800a6c7
 800981c:	0800a6db 	.word	0x0800a6db
 8009820:	080096a1 	.word	0x080096a1

08009824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009828:	b08c      	sub	sp, #48	@ 0x30
 800982a:	af00      	add	r7, sp, #0
 800982c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	689a      	ldr	r2, [r3, #8]
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	431a      	orrs	r2, r3
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	431a      	orrs	r2, r3
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	69db      	ldr	r3, [r3, #28]
 8009848:	4313      	orrs	r3, r2
 800984a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	4baa      	ldr	r3, [pc, #680]	@ (8009afc <UART_SetConfig+0x2d8>)
 8009854:	4013      	ands	r3, r2
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	6812      	ldr	r2, [r2, #0]
 800985a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800985c:	430b      	orrs	r3, r1
 800985e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	430a      	orrs	r2, r1
 8009874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a9f      	ldr	r2, [pc, #636]	@ (8009b00 <UART_SetConfig+0x2dc>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d004      	beq.n	8009890 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800988c:	4313      	orrs	r3, r2
 800988e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800989a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	6812      	ldr	r2, [r2, #0]
 80098a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098a4:	430b      	orrs	r3, r1
 80098a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ae:	f023 010f 	bic.w	r1, r3, #15
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a90      	ldr	r2, [pc, #576]	@ (8009b04 <UART_SetConfig+0x2e0>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d125      	bne.n	8009914 <UART_SetConfig+0xf0>
 80098c8:	4b8f      	ldr	r3, [pc, #572]	@ (8009b08 <UART_SetConfig+0x2e4>)
 80098ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098ce:	f003 0303 	and.w	r3, r3, #3
 80098d2:	2b03      	cmp	r3, #3
 80098d4:	d81a      	bhi.n	800990c <UART_SetConfig+0xe8>
 80098d6:	a201      	add	r2, pc, #4	@ (adr r2, 80098dc <UART_SetConfig+0xb8>)
 80098d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098dc:	080098ed 	.word	0x080098ed
 80098e0:	080098fd 	.word	0x080098fd
 80098e4:	080098f5 	.word	0x080098f5
 80098e8:	08009905 	.word	0x08009905
 80098ec:	2301      	movs	r3, #1
 80098ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098f2:	e116      	b.n	8009b22 <UART_SetConfig+0x2fe>
 80098f4:	2302      	movs	r3, #2
 80098f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098fa:	e112      	b.n	8009b22 <UART_SetConfig+0x2fe>
 80098fc:	2304      	movs	r3, #4
 80098fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009902:	e10e      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009904:	2308      	movs	r3, #8
 8009906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800990a:	e10a      	b.n	8009b22 <UART_SetConfig+0x2fe>
 800990c:	2310      	movs	r3, #16
 800990e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009912:	e106      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a7c      	ldr	r2, [pc, #496]	@ (8009b0c <UART_SetConfig+0x2e8>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d138      	bne.n	8009990 <UART_SetConfig+0x16c>
 800991e:	4b7a      	ldr	r3, [pc, #488]	@ (8009b08 <UART_SetConfig+0x2e4>)
 8009920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009924:	f003 030c 	and.w	r3, r3, #12
 8009928:	2b0c      	cmp	r3, #12
 800992a:	d82d      	bhi.n	8009988 <UART_SetConfig+0x164>
 800992c:	a201      	add	r2, pc, #4	@ (adr r2, 8009934 <UART_SetConfig+0x110>)
 800992e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009932:	bf00      	nop
 8009934:	08009969 	.word	0x08009969
 8009938:	08009989 	.word	0x08009989
 800993c:	08009989 	.word	0x08009989
 8009940:	08009989 	.word	0x08009989
 8009944:	08009979 	.word	0x08009979
 8009948:	08009989 	.word	0x08009989
 800994c:	08009989 	.word	0x08009989
 8009950:	08009989 	.word	0x08009989
 8009954:	08009971 	.word	0x08009971
 8009958:	08009989 	.word	0x08009989
 800995c:	08009989 	.word	0x08009989
 8009960:	08009989 	.word	0x08009989
 8009964:	08009981 	.word	0x08009981
 8009968:	2300      	movs	r3, #0
 800996a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800996e:	e0d8      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009970:	2302      	movs	r3, #2
 8009972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009976:	e0d4      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009978:	2304      	movs	r3, #4
 800997a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800997e:	e0d0      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009980:	2308      	movs	r3, #8
 8009982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009986:	e0cc      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009988:	2310      	movs	r3, #16
 800998a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800998e:	e0c8      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a5e      	ldr	r2, [pc, #376]	@ (8009b10 <UART_SetConfig+0x2ec>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d125      	bne.n	80099e6 <UART_SetConfig+0x1c2>
 800999a:	4b5b      	ldr	r3, [pc, #364]	@ (8009b08 <UART_SetConfig+0x2e4>)
 800999c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80099a4:	2b30      	cmp	r3, #48	@ 0x30
 80099a6:	d016      	beq.n	80099d6 <UART_SetConfig+0x1b2>
 80099a8:	2b30      	cmp	r3, #48	@ 0x30
 80099aa:	d818      	bhi.n	80099de <UART_SetConfig+0x1ba>
 80099ac:	2b20      	cmp	r3, #32
 80099ae:	d00a      	beq.n	80099c6 <UART_SetConfig+0x1a2>
 80099b0:	2b20      	cmp	r3, #32
 80099b2:	d814      	bhi.n	80099de <UART_SetConfig+0x1ba>
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <UART_SetConfig+0x19a>
 80099b8:	2b10      	cmp	r3, #16
 80099ba:	d008      	beq.n	80099ce <UART_SetConfig+0x1aa>
 80099bc:	e00f      	b.n	80099de <UART_SetConfig+0x1ba>
 80099be:	2300      	movs	r3, #0
 80099c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099c4:	e0ad      	b.n	8009b22 <UART_SetConfig+0x2fe>
 80099c6:	2302      	movs	r3, #2
 80099c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099cc:	e0a9      	b.n	8009b22 <UART_SetConfig+0x2fe>
 80099ce:	2304      	movs	r3, #4
 80099d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099d4:	e0a5      	b.n	8009b22 <UART_SetConfig+0x2fe>
 80099d6:	2308      	movs	r3, #8
 80099d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099dc:	e0a1      	b.n	8009b22 <UART_SetConfig+0x2fe>
 80099de:	2310      	movs	r3, #16
 80099e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099e4:	e09d      	b.n	8009b22 <UART_SetConfig+0x2fe>
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a4a      	ldr	r2, [pc, #296]	@ (8009b14 <UART_SetConfig+0x2f0>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d125      	bne.n	8009a3c <UART_SetConfig+0x218>
 80099f0:	4b45      	ldr	r3, [pc, #276]	@ (8009b08 <UART_SetConfig+0x2e4>)
 80099f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80099fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80099fc:	d016      	beq.n	8009a2c <UART_SetConfig+0x208>
 80099fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a00:	d818      	bhi.n	8009a34 <UART_SetConfig+0x210>
 8009a02:	2b80      	cmp	r3, #128	@ 0x80
 8009a04:	d00a      	beq.n	8009a1c <UART_SetConfig+0x1f8>
 8009a06:	2b80      	cmp	r3, #128	@ 0x80
 8009a08:	d814      	bhi.n	8009a34 <UART_SetConfig+0x210>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d002      	beq.n	8009a14 <UART_SetConfig+0x1f0>
 8009a0e:	2b40      	cmp	r3, #64	@ 0x40
 8009a10:	d008      	beq.n	8009a24 <UART_SetConfig+0x200>
 8009a12:	e00f      	b.n	8009a34 <UART_SetConfig+0x210>
 8009a14:	2300      	movs	r3, #0
 8009a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a1a:	e082      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a22:	e07e      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009a24:	2304      	movs	r3, #4
 8009a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a2a:	e07a      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009a2c:	2308      	movs	r3, #8
 8009a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a32:	e076      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009a34:	2310      	movs	r3, #16
 8009a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a3a:	e072      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a35      	ldr	r2, [pc, #212]	@ (8009b18 <UART_SetConfig+0x2f4>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d12a      	bne.n	8009a9c <UART_SetConfig+0x278>
 8009a46:	4b30      	ldr	r3, [pc, #192]	@ (8009b08 <UART_SetConfig+0x2e4>)
 8009a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a54:	d01a      	beq.n	8009a8c <UART_SetConfig+0x268>
 8009a56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a5a:	d81b      	bhi.n	8009a94 <UART_SetConfig+0x270>
 8009a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a60:	d00c      	beq.n	8009a7c <UART_SetConfig+0x258>
 8009a62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a66:	d815      	bhi.n	8009a94 <UART_SetConfig+0x270>
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d003      	beq.n	8009a74 <UART_SetConfig+0x250>
 8009a6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a70:	d008      	beq.n	8009a84 <UART_SetConfig+0x260>
 8009a72:	e00f      	b.n	8009a94 <UART_SetConfig+0x270>
 8009a74:	2300      	movs	r3, #0
 8009a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a7a:	e052      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a82:	e04e      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009a84:	2304      	movs	r3, #4
 8009a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a8a:	e04a      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009a8c:	2308      	movs	r3, #8
 8009a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a92:	e046      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009a94:	2310      	movs	r3, #16
 8009a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a9a:	e042      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a17      	ldr	r2, [pc, #92]	@ (8009b00 <UART_SetConfig+0x2dc>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d13a      	bne.n	8009b1c <UART_SetConfig+0x2f8>
 8009aa6:	4b18      	ldr	r3, [pc, #96]	@ (8009b08 <UART_SetConfig+0x2e4>)
 8009aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009ab0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ab4:	d01a      	beq.n	8009aec <UART_SetConfig+0x2c8>
 8009ab6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009aba:	d81b      	bhi.n	8009af4 <UART_SetConfig+0x2d0>
 8009abc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ac0:	d00c      	beq.n	8009adc <UART_SetConfig+0x2b8>
 8009ac2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ac6:	d815      	bhi.n	8009af4 <UART_SetConfig+0x2d0>
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <UART_SetConfig+0x2b0>
 8009acc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ad0:	d008      	beq.n	8009ae4 <UART_SetConfig+0x2c0>
 8009ad2:	e00f      	b.n	8009af4 <UART_SetConfig+0x2d0>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ada:	e022      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009adc:	2302      	movs	r3, #2
 8009ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ae2:	e01e      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009ae4:	2304      	movs	r3, #4
 8009ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aea:	e01a      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009aec:	2308      	movs	r3, #8
 8009aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009af2:	e016      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009af4:	2310      	movs	r3, #16
 8009af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009afa:	e012      	b.n	8009b22 <UART_SetConfig+0x2fe>
 8009afc:	cfff69f3 	.word	0xcfff69f3
 8009b00:	40008000 	.word	0x40008000
 8009b04:	40013800 	.word	0x40013800
 8009b08:	40021000 	.word	0x40021000
 8009b0c:	40004400 	.word	0x40004400
 8009b10:	40004800 	.word	0x40004800
 8009b14:	40004c00 	.word	0x40004c00
 8009b18:	40005000 	.word	0x40005000
 8009b1c:	2310      	movs	r3, #16
 8009b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4aae      	ldr	r2, [pc, #696]	@ (8009de0 <UART_SetConfig+0x5bc>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	f040 8097 	bne.w	8009c5c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b32:	2b08      	cmp	r3, #8
 8009b34:	d823      	bhi.n	8009b7e <UART_SetConfig+0x35a>
 8009b36:	a201      	add	r2, pc, #4	@ (adr r2, 8009b3c <UART_SetConfig+0x318>)
 8009b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3c:	08009b61 	.word	0x08009b61
 8009b40:	08009b7f 	.word	0x08009b7f
 8009b44:	08009b69 	.word	0x08009b69
 8009b48:	08009b7f 	.word	0x08009b7f
 8009b4c:	08009b6f 	.word	0x08009b6f
 8009b50:	08009b7f 	.word	0x08009b7f
 8009b54:	08009b7f 	.word	0x08009b7f
 8009b58:	08009b7f 	.word	0x08009b7f
 8009b5c:	08009b77 	.word	0x08009b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b60:	f7fc fd02 	bl	8006568 <HAL_RCC_GetPCLK1Freq>
 8009b64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b66:	e010      	b.n	8009b8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b68:	4b9e      	ldr	r3, [pc, #632]	@ (8009de4 <UART_SetConfig+0x5c0>)
 8009b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b6c:	e00d      	b.n	8009b8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b6e:	f7fc fc8d 	bl	800648c <HAL_RCC_GetSysClockFreq>
 8009b72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b74:	e009      	b.n	8009b8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b7c:	e005      	b.n	8009b8a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 8130 	beq.w	8009df2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b96:	4a94      	ldr	r2, [pc, #592]	@ (8009de8 <UART_SetConfig+0x5c4>)
 8009b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ba4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	685a      	ldr	r2, [r3, #4]
 8009baa:	4613      	mov	r3, r2
 8009bac:	005b      	lsls	r3, r3, #1
 8009bae:	4413      	add	r3, r2
 8009bb0:	69ba      	ldr	r2, [r7, #24]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d305      	bcc.n	8009bc2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bbc:	69ba      	ldr	r2, [r7, #24]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d903      	bls.n	8009bca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009bc8:	e113      	b.n	8009df2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bcc:	2200      	movs	r2, #0
 8009bce:	60bb      	str	r3, [r7, #8]
 8009bd0:	60fa      	str	r2, [r7, #12]
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd6:	4a84      	ldr	r2, [pc, #528]	@ (8009de8 <UART_SetConfig+0x5c4>)
 8009bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	2200      	movs	r2, #0
 8009be0:	603b      	str	r3, [r7, #0]
 8009be2:	607a      	str	r2, [r7, #4]
 8009be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009be8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009bec:	f7f7 f802 	bl	8000bf4 <__aeabi_uldivmod>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	f04f 0200 	mov.w	r2, #0
 8009bfc:	f04f 0300 	mov.w	r3, #0
 8009c00:	020b      	lsls	r3, r1, #8
 8009c02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c06:	0202      	lsls	r2, r0, #8
 8009c08:	6979      	ldr	r1, [r7, #20]
 8009c0a:	6849      	ldr	r1, [r1, #4]
 8009c0c:	0849      	lsrs	r1, r1, #1
 8009c0e:	2000      	movs	r0, #0
 8009c10:	460c      	mov	r4, r1
 8009c12:	4605      	mov	r5, r0
 8009c14:	eb12 0804 	adds.w	r8, r2, r4
 8009c18:	eb43 0905 	adc.w	r9, r3, r5
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	469a      	mov	sl, r3
 8009c24:	4693      	mov	fp, r2
 8009c26:	4652      	mov	r2, sl
 8009c28:	465b      	mov	r3, fp
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	f7f6 ffe1 	bl	8000bf4 <__aeabi_uldivmod>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	4613      	mov	r3, r2
 8009c38:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c40:	d308      	bcc.n	8009c54 <UART_SetConfig+0x430>
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c48:	d204      	bcs.n	8009c54 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6a3a      	ldr	r2, [r7, #32]
 8009c50:	60da      	str	r2, [r3, #12]
 8009c52:	e0ce      	b.n	8009df2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c5a:	e0ca      	b.n	8009df2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c64:	d166      	bne.n	8009d34 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009c66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c6a:	2b08      	cmp	r3, #8
 8009c6c:	d827      	bhi.n	8009cbe <UART_SetConfig+0x49a>
 8009c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c74 <UART_SetConfig+0x450>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009c99 	.word	0x08009c99
 8009c78:	08009ca1 	.word	0x08009ca1
 8009c7c:	08009ca9 	.word	0x08009ca9
 8009c80:	08009cbf 	.word	0x08009cbf
 8009c84:	08009caf 	.word	0x08009caf
 8009c88:	08009cbf 	.word	0x08009cbf
 8009c8c:	08009cbf 	.word	0x08009cbf
 8009c90:	08009cbf 	.word	0x08009cbf
 8009c94:	08009cb7 	.word	0x08009cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c98:	f7fc fc66 	bl	8006568 <HAL_RCC_GetPCLK1Freq>
 8009c9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c9e:	e014      	b.n	8009cca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ca0:	f7fc fc78 	bl	8006594 <HAL_RCC_GetPCLK2Freq>
 8009ca4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ca6:	e010      	b.n	8009cca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ca8:	4b4e      	ldr	r3, [pc, #312]	@ (8009de4 <UART_SetConfig+0x5c0>)
 8009caa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cac:	e00d      	b.n	8009cca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cae:	f7fc fbed 	bl	800648c <HAL_RCC_GetSysClockFreq>
 8009cb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cb4:	e009      	b.n	8009cca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cbc:	e005      	b.n	8009cca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009cc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f000 8090 	beq.w	8009df2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd6:	4a44      	ldr	r2, [pc, #272]	@ (8009de8 <UART_SetConfig+0x5c4>)
 8009cd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ce4:	005a      	lsls	r2, r3, #1
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	085b      	lsrs	r3, r3, #1
 8009cec:	441a      	add	r2, r3
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	2b0f      	cmp	r3, #15
 8009cfc:	d916      	bls.n	8009d2c <UART_SetConfig+0x508>
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d04:	d212      	bcs.n	8009d2c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	f023 030f 	bic.w	r3, r3, #15
 8009d0e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	085b      	lsrs	r3, r3, #1
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	f003 0307 	and.w	r3, r3, #7
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	8bfb      	ldrh	r3, [r7, #30]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	8bfa      	ldrh	r2, [r7, #30]
 8009d28:	60da      	str	r2, [r3, #12]
 8009d2a:	e062      	b.n	8009df2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d32:	e05e      	b.n	8009df2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d38:	2b08      	cmp	r3, #8
 8009d3a:	d828      	bhi.n	8009d8e <UART_SetConfig+0x56a>
 8009d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d44 <UART_SetConfig+0x520>)
 8009d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d42:	bf00      	nop
 8009d44:	08009d69 	.word	0x08009d69
 8009d48:	08009d71 	.word	0x08009d71
 8009d4c:	08009d79 	.word	0x08009d79
 8009d50:	08009d8f 	.word	0x08009d8f
 8009d54:	08009d7f 	.word	0x08009d7f
 8009d58:	08009d8f 	.word	0x08009d8f
 8009d5c:	08009d8f 	.word	0x08009d8f
 8009d60:	08009d8f 	.word	0x08009d8f
 8009d64:	08009d87 	.word	0x08009d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d68:	f7fc fbfe 	bl	8006568 <HAL_RCC_GetPCLK1Freq>
 8009d6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d6e:	e014      	b.n	8009d9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d70:	f7fc fc10 	bl	8006594 <HAL_RCC_GetPCLK2Freq>
 8009d74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d76:	e010      	b.n	8009d9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d78:	4b1a      	ldr	r3, [pc, #104]	@ (8009de4 <UART_SetConfig+0x5c0>)
 8009d7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d7c:	e00d      	b.n	8009d9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d7e:	f7fc fb85 	bl	800648c <HAL_RCC_GetSysClockFreq>
 8009d82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d84:	e009      	b.n	8009d9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d8c:	e005      	b.n	8009d9a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d98:	bf00      	nop
    }

    if (pclk != 0U)
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d028      	beq.n	8009df2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da4:	4a10      	ldr	r2, [pc, #64]	@ (8009de8 <UART_SetConfig+0x5c4>)
 8009da6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009daa:	461a      	mov	r2, r3
 8009dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dae:	fbb3 f2f2 	udiv	r2, r3, r2
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	085b      	lsrs	r3, r3, #1
 8009db8:	441a      	add	r2, r3
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dc4:	6a3b      	ldr	r3, [r7, #32]
 8009dc6:	2b0f      	cmp	r3, #15
 8009dc8:	d910      	bls.n	8009dec <UART_SetConfig+0x5c8>
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dd0:	d20c      	bcs.n	8009dec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009dd2:	6a3b      	ldr	r3, [r7, #32]
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60da      	str	r2, [r3, #12]
 8009ddc:	e009      	b.n	8009df2 <UART_SetConfig+0x5ce>
 8009dde:	bf00      	nop
 8009de0:	40008000 	.word	0x40008000
 8009de4:	00f42400 	.word	0x00f42400
 8009de8:	0800a9e0 	.word	0x0800a9e0
      }
      else
      {
        ret = HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2200      	movs	r2, #0
 8009e06:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e0e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3730      	adds	r7, #48	@ 0x30
 8009e16:	46bd      	mov	sp, r7
 8009e18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e28:	f003 0308 	and.w	r3, r3, #8
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00a      	beq.n	8009e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	430a      	orrs	r2, r1
 8009e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00a      	beq.n	8009e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e6c:	f003 0302 	and.w	r3, r3, #2
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00a      	beq.n	8009e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	430a      	orrs	r2, r1
 8009e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e8e:	f003 0304 	and.w	r3, r3, #4
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00a      	beq.n	8009eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	430a      	orrs	r2, r1
 8009eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eb0:	f003 0310 	and.w	r3, r3, #16
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00a      	beq.n	8009ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed2:	f003 0320 	and.w	r3, r3, #32
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00a      	beq.n	8009ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	430a      	orrs	r2, r1
 8009eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d01a      	beq.n	8009f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f1a:	d10a      	bne.n	8009f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00a      	beq.n	8009f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	430a      	orrs	r2, r1
 8009f52:	605a      	str	r2, [r3, #4]
  }
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b098      	sub	sp, #96	@ 0x60
 8009f64:	af02      	add	r7, sp, #8
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f70:	f7f9 f950 	bl	8003214 <HAL_GetTick>
 8009f74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0308 	and.w	r3, r3, #8
 8009f80:	2b08      	cmp	r3, #8
 8009f82:	d12f      	bne.n	8009fe4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f88e 	bl	800a0b4 <UART_WaitOnFlagUntilTimeout>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d022      	beq.n	8009fe4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa6:	e853 3f00 	ldrex	r3, [r3]
 8009faa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fbe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fc4:	e841 2300 	strex	r3, r2, [r1]
 8009fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1e6      	bne.n	8009f9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2220      	movs	r2, #32
 8009fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	e063      	b.n	800a0ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0304 	and.w	r3, r3, #4
 8009fee:	2b04      	cmp	r3, #4
 8009ff0:	d149      	bne.n	800a086 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ff2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f857 	bl	800a0b4 <UART_WaitOnFlagUntilTimeout>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d03c      	beq.n	800a086 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	623b      	str	r3, [r7, #32]
   return(result);
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a020:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	461a      	mov	r2, r3
 800a028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a02a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a02c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1e6      	bne.n	800a00c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3308      	adds	r3, #8
 800a044:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	e853 3f00 	ldrex	r3, [r3]
 800a04c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f023 0301 	bic.w	r3, r3, #1
 800a054:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3308      	adds	r3, #8
 800a05c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a05e:	61fa      	str	r2, [r7, #28]
 800a060:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a062:	69b9      	ldr	r1, [r7, #24]
 800a064:	69fa      	ldr	r2, [r7, #28]
 800a066:	e841 2300 	strex	r3, r2, [r1]
 800a06a:	617b      	str	r3, [r7, #20]
   return(result);
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1e5      	bne.n	800a03e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2220      	movs	r2, #32
 800a076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a082:	2303      	movs	r3, #3
 800a084:	e012      	b.n	800a0ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2220      	movs	r2, #32
 800a08a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2220      	movs	r2, #32
 800a092:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3758      	adds	r7, #88	@ 0x58
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	603b      	str	r3, [r7, #0]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0c4:	e04f      	b.n	800a166 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0cc:	d04b      	beq.n	800a166 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0ce:	f7f9 f8a1 	bl	8003214 <HAL_GetTick>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	69ba      	ldr	r2, [r7, #24]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d302      	bcc.n	800a0e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d101      	bne.n	800a0e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e04e      	b.n	800a186 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0304 	and.w	r3, r3, #4
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d037      	beq.n	800a166 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b80      	cmp	r3, #128	@ 0x80
 800a0fa:	d034      	beq.n	800a166 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	2b40      	cmp	r3, #64	@ 0x40
 800a100:	d031      	beq.n	800a166 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	69db      	ldr	r3, [r3, #28]
 800a108:	f003 0308 	and.w	r3, r3, #8
 800a10c:	2b08      	cmp	r3, #8
 800a10e:	d110      	bne.n	800a132 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2208      	movs	r2, #8
 800a116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f000 f920 	bl	800a35e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2208      	movs	r2, #8
 800a122:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e029      	b.n	800a186 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a13c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a140:	d111      	bne.n	800a166 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a14a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f000 f906 	bl	800a35e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2220      	movs	r2, #32
 800a156:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e00f      	b.n	800a186 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	69da      	ldr	r2, [r3, #28]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	4013      	ands	r3, r2
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	429a      	cmp	r2, r3
 800a174:	bf0c      	ite	eq
 800a176:	2301      	moveq	r3, #1
 800a178:	2300      	movne	r3, #0
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	461a      	mov	r2, r3
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	429a      	cmp	r2, r3
 800a182:	d0a0      	beq.n	800a0c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
	...

0800a190 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b096      	sub	sp, #88	@ 0x58
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	4613      	mov	r3, r2
 800a19c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	88fa      	ldrh	r2, [r7, #6]
 800a1a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2222      	movs	r2, #34	@ 0x22
 800a1b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d02d      	beq.n	800a222 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1cc:	4a40      	ldr	r2, [pc, #256]	@ (800a2d0 <UART_Start_Receive_DMA+0x140>)
 800a1ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1d6:	4a3f      	ldr	r2, [pc, #252]	@ (800a2d4 <UART_Start_Receive_DMA+0x144>)
 800a1d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1e0:	4a3d      	ldr	r2, [pc, #244]	@ (800a2d8 <UART_Start_Receive_DMA+0x148>)
 800a1e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	3324      	adds	r3, #36	@ 0x24
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a200:	461a      	mov	r2, r3
 800a202:	88fb      	ldrh	r3, [r7, #6]
 800a204:	f7fa ffec 	bl	80051e0 <HAL_DMA_Start_IT>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d009      	beq.n	800a222 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2210      	movs	r2, #16
 800a212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2220      	movs	r2, #32
 800a21a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e051      	b.n	800a2c6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d018      	beq.n	800a25c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a232:	e853 3f00 	ldrex	r3, [r3]
 800a236:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a23e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	461a      	mov	r2, r3
 800a246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a248:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a24a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a24e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a250:	e841 2300 	strex	r3, r2, [r1]
 800a254:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1e6      	bne.n	800a22a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	3308      	adds	r3, #8
 800a262:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a266:	e853 3f00 	ldrex	r3, [r3]
 800a26a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26e:	f043 0301 	orr.w	r3, r3, #1
 800a272:	653b      	str	r3, [r7, #80]	@ 0x50
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3308      	adds	r3, #8
 800a27a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a27c:	637a      	str	r2, [r7, #52]	@ 0x34
 800a27e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a280:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a282:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a284:	e841 2300 	strex	r3, r2, [r1]
 800a288:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1e5      	bne.n	800a25c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3308      	adds	r3, #8
 800a296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	e853 3f00 	ldrex	r3, [r3]
 800a29e:	613b      	str	r3, [r7, #16]
   return(result);
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	3308      	adds	r3, #8
 800a2ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a2b0:	623a      	str	r2, [r7, #32]
 800a2b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b4:	69f9      	ldr	r1, [r7, #28]
 800a2b6:	6a3a      	ldr	r2, [r7, #32]
 800a2b8:	e841 2300 	strex	r3, r2, [r1]
 800a2bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1e5      	bne.n	800a290 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3758      	adds	r7, #88	@ 0x58
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0800a42b 	.word	0x0800a42b
 800a2d4:	0800a55f 	.word	0x0800a55f
 800a2d8:	0800a5a5 	.word	0x0800a5a5

0800a2dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b08f      	sub	sp, #60	@ 0x3c
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	e853 3f00 	ldrex	r3, [r3]
 800a2f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a2f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a304:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a306:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a30a:	e841 2300 	strex	r3, r2, [r1]
 800a30e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1e6      	bne.n	800a2e4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3308      	adds	r3, #8
 800a31c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	e853 3f00 	ldrex	r3, [r3]
 800a324:	60bb      	str	r3, [r7, #8]
   return(result);
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a32c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3308      	adds	r3, #8
 800a334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a336:	61ba      	str	r2, [r7, #24]
 800a338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33a:	6979      	ldr	r1, [r7, #20]
 800a33c:	69ba      	ldr	r2, [r7, #24]
 800a33e:	e841 2300 	strex	r3, r2, [r1]
 800a342:	613b      	str	r3, [r7, #16]
   return(result);
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1e5      	bne.n	800a316 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2220      	movs	r2, #32
 800a34e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a352:	bf00      	nop
 800a354:	373c      	adds	r7, #60	@ 0x3c
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a35e:	b480      	push	{r7}
 800a360:	b095      	sub	sp, #84	@ 0x54
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a36e:	e853 3f00 	ldrex	r3, [r3]
 800a372:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a376:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a37a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	461a      	mov	r2, r3
 800a382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a384:	643b      	str	r3, [r7, #64]	@ 0x40
 800a386:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a388:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a38a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a38c:	e841 2300 	strex	r3, r2, [r1]
 800a390:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1e6      	bne.n	800a366 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3308      	adds	r3, #8
 800a39e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	e853 3f00 	ldrex	r3, [r3]
 800a3a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3ae:	f023 0301 	bic.w	r3, r3, #1
 800a3b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3c4:	e841 2300 	strex	r3, r2, [r1]
 800a3c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e3      	bne.n	800a398 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d118      	bne.n	800a40a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	e853 3f00 	ldrex	r3, [r3]
 800a3e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	f023 0310 	bic.w	r3, r3, #16
 800a3ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3f6:	61bb      	str	r3, [r7, #24]
 800a3f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fa:	6979      	ldr	r1, [r7, #20]
 800a3fc:	69ba      	ldr	r2, [r7, #24]
 800a3fe:	e841 2300 	strex	r3, r2, [r1]
 800a402:	613b      	str	r3, [r7, #16]
   return(result);
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1e6      	bne.n	800a3d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2220      	movs	r2, #32
 800a40e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a41e:	bf00      	nop
 800a420:	3754      	adds	r7, #84	@ 0x54
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b09c      	sub	sp, #112	@ 0x70
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a436:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 0320 	and.w	r3, r3, #32
 800a442:	2b00      	cmp	r3, #0
 800a444:	d171      	bne.n	800a52a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a448:	2200      	movs	r2, #0
 800a44a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a44e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a456:	e853 3f00 	ldrex	r3, [r3]
 800a45a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a45c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a45e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a462:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	461a      	mov	r2, r3
 800a46a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a46c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a46e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a470:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a472:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a474:	e841 2300 	strex	r3, r2, [r1]
 800a478:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a47a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1e6      	bne.n	800a44e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3308      	adds	r3, #8
 800a486:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48a:	e853 3f00 	ldrex	r3, [r3]
 800a48e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a492:	f023 0301 	bic.w	r3, r3, #1
 800a496:	667b      	str	r3, [r7, #100]	@ 0x64
 800a498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3308      	adds	r3, #8
 800a49e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a4a0:	647a      	str	r2, [r7, #68]	@ 0x44
 800a4a2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4a8:	e841 2300 	strex	r3, r2, [r1]
 800a4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1e5      	bne.n	800a480 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3308      	adds	r3, #8
 800a4ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4be:	e853 3f00 	ldrex	r3, [r3]
 800a4c2:	623b      	str	r3, [r7, #32]
   return(result);
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4ca:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a4d4:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4dc:	e841 2300 	strex	r3, r2, [r1]
 800a4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1e5      	bne.n	800a4b4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a4e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4ea:	2220      	movs	r2, #32
 800a4ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d118      	bne.n	800a52a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	e853 3f00 	ldrex	r3, [r3]
 800a504:	60fb      	str	r3, [r7, #12]
   return(result);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f023 0310 	bic.w	r3, r3, #16
 800a50c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a50e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	461a      	mov	r2, r3
 800a514:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a516:	61fb      	str	r3, [r7, #28]
 800a518:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51a:	69b9      	ldr	r1, [r7, #24]
 800a51c:	69fa      	ldr	r2, [r7, #28]
 800a51e:	e841 2300 	strex	r3, r2, [r1]
 800a522:	617b      	str	r3, [r7, #20]
   return(result);
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1e6      	bne.n	800a4f8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a52a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a52c:	2200      	movs	r2, #0
 800a52e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a534:	2b01      	cmp	r3, #1
 800a536:	d109      	bne.n	800a54c <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a53a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a53e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a540:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a544:	4611      	mov	r1, r2
 800a546:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a548:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a54a:	e004      	b.n	800a556 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a54c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a54e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a552:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a554:	4798      	blx	r3
}
 800a556:	bf00      	nop
 800a558:	3770      	adds	r7, #112	@ 0x70
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b084      	sub	sp, #16
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a56a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2201      	movs	r2, #1
 800a570:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a576:	2b01      	cmp	r3, #1
 800a578:	d10b      	bne.n	800a592 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a586:	0852      	lsrs	r2, r2, #1
 800a588:	b292      	uxth	r2, r2
 800a58a:	4611      	mov	r1, r2
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a590:	e004      	b.n	800a59c <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	4798      	blx	r3
}
 800a59c:	bf00      	nop
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5b8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5c0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5cc:	2b80      	cmp	r3, #128	@ 0x80
 800a5ce:	d109      	bne.n	800a5e4 <UART_DMAError+0x40>
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	2b21      	cmp	r3, #33	@ 0x21
 800a5d4:	d106      	bne.n	800a5e4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a5de:	6978      	ldr	r0, [r7, #20]
 800a5e0:	f7ff fe7c 	bl	800a2dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ee:	2b40      	cmp	r3, #64	@ 0x40
 800a5f0:	d109      	bne.n	800a606 <UART_DMAError+0x62>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2b22      	cmp	r3, #34	@ 0x22
 800a5f6:	d106      	bne.n	800a606 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a600:	6978      	ldr	r0, [r7, #20]
 800a602:	f7ff feac 	bl	800a35e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a60c:	f043 0210 	orr.w	r2, r3, #16
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a61c:	6978      	ldr	r0, [r7, #20]
 800a61e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a620:	bf00      	nop
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a634:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a650:	bf00      	nop
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b088      	sub	sp, #32
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	e853 3f00 	ldrex	r3, [r3]
 800a66c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a674:	61fb      	str	r3, [r7, #28]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	461a      	mov	r2, r3
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	61bb      	str	r3, [r7, #24]
 800a680:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a682:	6979      	ldr	r1, [r7, #20]
 800a684:	69ba      	ldr	r2, [r7, #24]
 800a686:	e841 2300 	strex	r3, r2, [r1]
 800a68a:	613b      	str	r3, [r7, #16]
   return(result);
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1e6      	bne.n	800a660 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2220      	movs	r2, #32
 800a696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6aa:	bf00      	nop
 800a6ac:	3720      	adds	r7, #32
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b083      	sub	sp, #12
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a6ba:	bf00      	nop
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b083      	sub	sp, #12
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a6ce:	bf00      	nop
 800a6d0:	370c      	adds	r7, #12
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b083      	sub	sp, #12
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a6e2:	bf00      	nop
 800a6e4:	370c      	adds	r7, #12
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr

0800a6ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a6ee:	b480      	push	{r7}
 800a6f0:	b085      	sub	sp, #20
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d101      	bne.n	800a704 <HAL_UARTEx_DisableFifoMode+0x16>
 800a700:	2302      	movs	r3, #2
 800a702:	e027      	b.n	800a754 <HAL_UARTEx_DisableFifoMode+0x66>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2224      	movs	r2, #36	@ 0x24
 800a710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 0201 	bic.w	r2, r2, #1
 800a72a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a732:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2220      	movs	r2, #32
 800a746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3714      	adds	r7, #20
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a770:	2b01      	cmp	r3, #1
 800a772:	d101      	bne.n	800a778 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a774:	2302      	movs	r3, #2
 800a776:	e02d      	b.n	800a7d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2224      	movs	r2, #36	@ 0x24
 800a784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f022 0201 	bic.w	r2, r2, #1
 800a79e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	683a      	ldr	r2, [r7, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f84f 	bl	800a858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d101      	bne.n	800a7f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	e02d      	b.n	800a850 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2224      	movs	r2, #36	@ 0x24
 800a800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f022 0201 	bic.w	r2, r2, #1
 800a81a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	430a      	orrs	r2, r1
 800a82e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 f811 	bl	800a858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2220      	movs	r2, #32
 800a842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a864:	2b00      	cmp	r3, #0
 800a866:	d108      	bne.n	800a87a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a878:	e031      	b.n	800a8de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a87a:	2308      	movs	r3, #8
 800a87c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a87e:	2308      	movs	r3, #8
 800a880:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	0e5b      	lsrs	r3, r3, #25
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	f003 0307 	and.w	r3, r3, #7
 800a890:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	0f5b      	lsrs	r3, r3, #29
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	f003 0307 	and.w	r3, r3, #7
 800a8a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8a2:	7bbb      	ldrb	r3, [r7, #14]
 800a8a4:	7b3a      	ldrb	r2, [r7, #12]
 800a8a6:	4911      	ldr	r1, [pc, #68]	@ (800a8ec <UARTEx_SetNbDataToProcess+0x94>)
 800a8a8:	5c8a      	ldrb	r2, [r1, r2]
 800a8aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a8ae:	7b3a      	ldrb	r2, [r7, #12]
 800a8b0:	490f      	ldr	r1, [pc, #60]	@ (800a8f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a8b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8c0:	7bfb      	ldrb	r3, [r7, #15]
 800a8c2:	7b7a      	ldrb	r2, [r7, #13]
 800a8c4:	4909      	ldr	r1, [pc, #36]	@ (800a8ec <UARTEx_SetNbDataToProcess+0x94>)
 800a8c6:	5c8a      	ldrb	r2, [r1, r2]
 800a8c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a8cc:	7b7a      	ldrb	r2, [r7, #13]
 800a8ce:	4908      	ldr	r1, [pc, #32]	@ (800a8f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a8d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a8de:	bf00      	nop
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	0800a9f8 	.word	0x0800a9f8
 800a8f0:	0800aa00 	.word	0x0800aa00

0800a8f4 <memset>:
 800a8f4:	4402      	add	r2, r0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d100      	bne.n	800a8fe <memset+0xa>
 800a8fc:	4770      	bx	lr
 800a8fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a902:	e7f9      	b.n	800a8f8 <memset+0x4>

0800a904 <__libc_init_array>:
 800a904:	b570      	push	{r4, r5, r6, lr}
 800a906:	4d0d      	ldr	r5, [pc, #52]	@ (800a93c <__libc_init_array+0x38>)
 800a908:	4c0d      	ldr	r4, [pc, #52]	@ (800a940 <__libc_init_array+0x3c>)
 800a90a:	1b64      	subs	r4, r4, r5
 800a90c:	10a4      	asrs	r4, r4, #2
 800a90e:	2600      	movs	r6, #0
 800a910:	42a6      	cmp	r6, r4
 800a912:	d109      	bne.n	800a928 <__libc_init_array+0x24>
 800a914:	4d0b      	ldr	r5, [pc, #44]	@ (800a944 <__libc_init_array+0x40>)
 800a916:	4c0c      	ldr	r4, [pc, #48]	@ (800a948 <__libc_init_array+0x44>)
 800a918:	f000 f818 	bl	800a94c <_init>
 800a91c:	1b64      	subs	r4, r4, r5
 800a91e:	10a4      	asrs	r4, r4, #2
 800a920:	2600      	movs	r6, #0
 800a922:	42a6      	cmp	r6, r4
 800a924:	d105      	bne.n	800a932 <__libc_init_array+0x2e>
 800a926:	bd70      	pop	{r4, r5, r6, pc}
 800a928:	f855 3b04 	ldr.w	r3, [r5], #4
 800a92c:	4798      	blx	r3
 800a92e:	3601      	adds	r6, #1
 800a930:	e7ee      	b.n	800a910 <__libc_init_array+0xc>
 800a932:	f855 3b04 	ldr.w	r3, [r5], #4
 800a936:	4798      	blx	r3
 800a938:	3601      	adds	r6, #1
 800a93a:	e7f2      	b.n	800a922 <__libc_init_array+0x1e>
 800a93c:	0800aa10 	.word	0x0800aa10
 800a940:	0800aa10 	.word	0x0800aa10
 800a944:	0800aa10 	.word	0x0800aa10
 800a948:	0800aa14 	.word	0x0800aa14

0800a94c <_init>:
 800a94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94e:	bf00      	nop
 800a950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a952:	bc08      	pop	{r3}
 800a954:	469e      	mov	lr, r3
 800a956:	4770      	bx	lr

0800a958 <_fini>:
 800a958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95a:	bf00      	nop
 800a95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95e:	bc08      	pop	{r3}
 800a960:	469e      	mov	lr, r3
 800a962:	4770      	bx	lr


Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         000094e8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080096c0  080096c0  0000a6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009700  08009700  0000b018  2**0
                  CONTENTS
  4 .ARM          00000008  08009700  08009700  0000a700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009708  08009708  0000b018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009708  08009708  0000a708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800970c  0800970c  0000a70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08009710  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  20000018  08009728  0000b018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  08009728  0000b78c  2**0
=======
  1 .text         0000b3d4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800b5ac  0800b5ac  0000c5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b650  0800b650  0000d280  2**0
                  CONTENTS
  4 .ARM          00000008  0800b650  0800b650  0000c650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b658  0800b658  0000d280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b658  0800b658  0000c658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b65c  0800b65c  0000c65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  0800b660  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ec4  20000280  0800b8e0  0000d280  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001144  0800b8e0  0000e144  2**0
>>>>>>> Stashed changes
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b018  2**0
                  CONTENTS, READONLY
<<<<<<< Updated upstream
 12 .debug_info   0001b9c6  00000000  00000000  0000b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332b  00000000  00000000  00026a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00029d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001117  00000000  00000000  0002b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003667  00000000  00000000  0002c44f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcfd  00000000  00000000  0002fab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114be0  00000000  00000000  0004b7b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160393  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000606c  00000000  00000000  001603d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00166444  2**0
=======
 12 .debug_info   0001ee9b  00000000  00000000  0000d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b21  00000000  00000000  0002c14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  0002fc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d9  00000000  00000000  00031370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029eed  00000000  00000000  00032549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e15f  00000000  00000000  0005c436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011563e  00000000  00000000  0007a595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018fbd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000640c  00000000  00000000  0018fc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00196024  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001f8:	080096a8 	.word	0x080096a8
=======
 80001f8:	0800b594 	.word	0x0800b594
>>>>>>> Stashed changes

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 8000210:	2000001c 	.word	0x2000001c
 8000214:	080096a8 	.word	0x080096a8
=======
 8000210:	20000284 	.word	0x20000284
 8000214:	0800b594 	.word	0x0800b594
>>>>>>> Stashed changes

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b96a 	b.w	8000ee0 <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d14e      	bne.n	8000cce <__udivmoddi4+0xaa>
 8000c30:	4694      	mov	ip, r2
 8000c32:	458c      	cmp	ip, r1
 8000c34:	4686      	mov	lr, r0
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	d962      	bls.n	8000d02 <__udivmoddi4+0xde>
 8000c3c:	b14a      	cbz	r2, 8000c52 <__udivmoddi4+0x2e>
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	4091      	lsls	r1, r2
 8000c44:	fa20 f303 	lsr.w	r3, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c56:	fa1f f68c 	uxth.w	r6, ip
 8000c5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c62:	fb07 1114 	mls	r1, r7, r4, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb04 f106 	mul.w	r1, r4, r6
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x64>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7a:	f080 8112 	bcs.w	8000ea2 <__udivmoddi4+0x27e>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 810f 	bls.w	8000ea2 <__udivmoddi4+0x27e>
 8000c84:	3c02      	subs	r4, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a59      	subs	r1, r3, r1
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c92:	fb07 1110 	mls	r1, r7, r0, r1
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f606 	mul.w	r6, r0, r6
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x94>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000caa:	f080 80fc 	bcs.w	8000ea6 <__udivmoddi4+0x282>
 8000cae:	429e      	cmp	r6, r3
 8000cb0:	f240 80f9 	bls.w	8000ea6 <__udivmoddi4+0x282>
 8000cb4:	4463      	add	r3, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa6>
 8000cc2:	40d3      	lsrs	r3, r2
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xba>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb4>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa6>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x150>
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xcc>
 8000cea:	4290      	cmp	r0, r2
 8000cec:	f0c0 80f0 	bcc.w	8000ed0 <__udivmoddi4+0x2ac>
 8000cf0:	1a86      	subs	r6, r0, r2
 8000cf2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	2d00      	cmp	r5, #0
 8000cfa:	d0e6      	beq.n	8000cca <__udivmoddi4+0xa6>
 8000cfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000d00:	e7e3      	b.n	8000cca <__udivmoddi4+0xa6>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x204>
 8000d08:	eba1 040c 	sub.w	r4, r1, ip
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa1f f78c 	uxth.w	r7, ip
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb07 f006 	mul.w	r0, r7, r6
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x11c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x11a>
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	f200 80cd 	bhi.w	8000ed8 <__udivmoddi4+0x2b4>
 8000d3e:	4626      	mov	r6, r4
 8000d40:	1a1c      	subs	r4, r3, r0
 8000d42:	fa1f f38e 	uxth.w	r3, lr
 8000d46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb00 f707 	mul.w	r7, r0, r7
 8000d56:	429f      	cmp	r7, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x148>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x146>
 8000d64:	429f      	cmp	r7, r3
 8000d66:	f200 80b0 	bhi.w	8000eca <__udivmoddi4+0x2a6>
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	1bdb      	subs	r3, r3, r7
 8000d6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x9c>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d84:	fa04 f301 	lsl.w	r3, r4, r1
 8000d88:	ea43 030c 	orr.w	r3, r3, ip
 8000d8c:	40f4      	lsrs	r4, r6
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	0c38      	lsrs	r0, r7, #16
 8000d94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d98:	fbb4 fef0 	udiv	lr, r4, r0
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	fb00 441e 	mls	r4, r0, lr, r4
 8000da4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da8:	fb0e f90c 	mul.w	r9, lr, ip
 8000dac:	45a1      	cmp	r9, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x1a6>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dba:	f080 8084 	bcs.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	f240 8081 	bls.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	eba4 0409 	sub.w	r4, r4, r9
 8000dce:	fa1f f983 	uxth.w	r9, r3
 8000dd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1d2>
 8000de6:	193c      	adds	r4, r7, r4
 8000de8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dec:	d267      	bcs.n	8000ebe <__udivmoddi4+0x29a>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d965      	bls.n	8000ebe <__udivmoddi4+0x29a>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfe:	eba4 040c 	sub.w	r4, r4, ip
 8000e02:	429c      	cmp	r4, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	469c      	mov	ip, r3
 8000e08:	d351      	bcc.n	8000eae <__udivmoddi4+0x28a>
 8000e0a:	d04e      	beq.n	8000eaa <__udivmoddi4+0x286>
 8000e0c:	b155      	cbz	r5, 8000e24 <__udivmoddi4+0x200>
 8000e0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e12:	eb64 040c 	sbc.w	r4, r4, ip
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	40cb      	lsrs	r3, r1
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	40cc      	lsrs	r4, r1
 8000e20:	e9c5 6400 	strd	r6, r4, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	e750      	b.n	8000cca <__udivmoddi4+0xa6>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa24 f303 	lsr.w	r3, r4, r3
 8000e38:	4094      	lsls	r4, r2
 8000e3a:	430c      	orrs	r4, r1
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e50:	0c23      	lsrs	r3, r4, #16
 8000e52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e56:	fb00 f107 	mul.w	r1, r0, r7
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x24c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e66:	d22c      	bcs.n	8000ec2 <__udivmoddi4+0x29e>
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d92a      	bls.n	8000ec2 <__udivmoddi4+0x29e>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e80:	fb01 f307 	mul.w	r3, r1, r7
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x276>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e90:	d213      	bcs.n	8000eba <__udivmoddi4+0x296>
 8000e92:	42a3      	cmp	r3, r4
 8000e94:	d911      	bls.n	8000eba <__udivmoddi4+0x296>
 8000e96:	3902      	subs	r1, #2
 8000e98:	4464      	add	r4, ip
 8000e9a:	1ae4      	subs	r4, r4, r3
 8000e9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea0:	e739      	b.n	8000d16 <__udivmoddi4+0xf2>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	e6f0      	b.n	8000c88 <__udivmoddi4+0x64>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e706      	b.n	8000cb8 <__udivmoddi4+0x94>
 8000eaa:	45c8      	cmp	r8, r9
 8000eac:	d2ae      	bcs.n	8000e0c <__udivmoddi4+0x1e8>
 8000eae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb6:	3801      	subs	r0, #1
 8000eb8:	e7a8      	b.n	8000e0c <__udivmoddi4+0x1e8>
 8000eba:	4631      	mov	r1, r6
 8000ebc:	e7ed      	b.n	8000e9a <__udivmoddi4+0x276>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e799      	b.n	8000df6 <__udivmoddi4+0x1d2>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e7d4      	b.n	8000e70 <__udivmoddi4+0x24c>
 8000ec6:	46d6      	mov	lr, sl
 8000ec8:	e77f      	b.n	8000dca <__udivmoddi4+0x1a6>
 8000eca:	4463      	add	r3, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e74d      	b.n	8000d6c <__udivmoddi4+0x148>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e70f      	b.n	8000cf8 <__udivmoddi4+0xd4>
 8000ed8:	3e02      	subs	r6, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	e730      	b.n	8000d40 <__udivmoddi4+0x11c>
 8000ede:	bf00      	nop

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

<<<<<<< Updated upstream
08000ee4 <ADC_init>:
=======
08000ee4 <Vacuum_Status>:
//       registerFrame[0x00].U16 = 22881;
//    }
//}


void Vacuum_Status(){
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
    //Vacuum On
    if (registerFrame[0x02].U16 == 1){ // ใช้ == แทน =
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <Vacuum_Status+0x38>)
 8000eea:	889b      	ldrh	r3, [r3, #4]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d108      	bne.n	8000f02 <Vacuum_Status+0x1e>
        strcpy(Vacuum, "On");
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <Vacuum_Status+0x3c>)
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8000f24 <Vacuum_Status+0x40>)
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	8019      	strh	r1, [r3, #0]
 8000efa:	3302      	adds	r3, #2
 8000efc:	0c12      	lsrs	r2, r2, #16
 8000efe:	701a      	strb	r2, [r3, #0]
    }
    //Vacuum Off
    else if (registerFrame[0x02].U16 == 0){ // ใช้ == แทน =
        strcpy(Vacuum, "Off");
    }
}
 8000f00:	e006      	b.n	8000f10 <Vacuum_Status+0x2c>
    else if (registerFrame[0x02].U16 == 0){ // ใช้ == แทน =
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <Vacuum_Status+0x38>)
 8000f04:	889b      	ldrh	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d102      	bne.n	8000f10 <Vacuum_Status+0x2c>
        strcpy(Vacuum, "Off");
 8000f0a:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <Vacuum_Status+0x3c>)
 8000f0c:	4a06      	ldr	r2, [pc, #24]	@ (8000f28 <Vacuum_Status+0x44>)
 8000f0e:	601a      	str	r2, [r3, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000e0c 	.word	0x20000e0c
 8000f20:	20000000 	.word	0x20000000
 8000f24:	0800b5ac 	.word	0x0800b5ac
 8000f28:	0066664f 	.word	0x0066664f

08000f2c <Gripper_Movement_Status>:

void Gripper_Movement_Status(){
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
    //Movement Forward
    if (registerFrame[0x03].U16 == 1){ // ใช้ == แทน =
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <Gripper_Movement_Status+0x38>)
 8000f32:	88db      	ldrh	r3, [r3, #6]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d106      	bne.n	8000f46 <Gripper_Movement_Status+0x1a>
        strcpy(Gripper, "Forward");
 8000f38:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <Gripper_Movement_Status+0x3c>)
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f6c <Gripper_Movement_Status+0x40>)
 8000f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f40:	e883 0003 	stmia.w	r3, {r0, r1}
    }
    //Movement Backward
    else if (registerFrame[0x03].U16 == 0){ // ใช้ == แทน =
        strcpy(Gripper, "Backward");
    }
}
 8000f44:	e008      	b.n	8000f58 <Gripper_Movement_Status+0x2c>
    else if (registerFrame[0x03].U16 == 0){ // ใช้ == แทน =
 8000f46:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <Gripper_Movement_Status+0x38>)
 8000f48:	88db      	ldrh	r3, [r3, #6]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d104      	bne.n	8000f58 <Gripper_Movement_Status+0x2c>
        strcpy(Gripper, "Backward");
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <Gripper_Movement_Status+0x3c>)
 8000f50:	4a07      	ldr	r2, [pc, #28]	@ (8000f70 <Gripper_Movement_Status+0x44>)
 8000f52:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f54:	c303      	stmia	r3!, {r0, r1}
 8000f56:	701a      	strb	r2, [r3, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000e0c 	.word	0x20000e0c
 8000f68:	2000000c 	.word	0x2000000c
 8000f6c:	0800b5b0 	.word	0x0800b5b0
 8000f70:	0800b5b8 	.word	0x0800b5b8

08000f74 <Set_Shelves>:

void Set_Shelves(){
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
    //Set
    if (registerFrame[0x01].U16 == 1){ // ใช้ == แทน =
 8000f78:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <Set_Shelves+0x64>)
 8000f7a:	885b      	ldrh	r3, [r3, #2]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d112      	bne.n	8000fa6 <Set_Shelves+0x32>
    	state = 1;
 8000f80:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <Set_Shelves+0x68>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	801a      	strh	r2, [r3, #0]
        strcpy(Shelves, "SET");
 8000f86:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <Set_Shelves+0x6c>)
 8000f88:	4a16      	ldr	r2, [pc, #88]	@ (8000fe4 <Set_Shelves+0x70>)
 8000f8a:	601a      	str	r2, [r3, #0]
        registerFrame[0x01].U16 = 0;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <Set_Shelves+0x64>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	805a      	strh	r2, [r3, #2]
        registerFrame[0x10].U16 = 1;
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <Set_Shelves+0x64>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	841a      	strh	r2, [r3, #32]

        if(Jogging == 1){
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <Set_Shelves+0x74>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d102      	bne.n	8000fa6 <Set_Shelves+0x32>
            registerFrame[0x10].U16 = 0;
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <Set_Shelves+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	841a      	strh	r2, [r3, #32]
        }
    }

    registerFrame[0x23].U16 = 8;  //1st Shelve Position
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <Set_Shelves+0x64>)
 8000fa8:	2208      	movs	r2, #8
 8000faa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    registerFrame[0x24].U16 = 8;  //2nd Shelve Position
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <Set_Shelves+0x64>)
 8000fb0:	2208      	movs	r2, #8
 8000fb2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    registerFrame[0x25].U16 = 8;  //3rd Shelve Position
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <Set_Shelves+0x64>)
 8000fb8:	2208      	movs	r2, #8
 8000fba:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    registerFrame[0x26].U16 = 8;  //4th Shelve Position
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <Set_Shelves+0x64>)
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    registerFrame[0x27].U16 = 8;  //5th Shelve Position
 8000fc6:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <Set_Shelves+0x64>)
 8000fc8:	2208      	movs	r2, #8
 8000fca:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	20000e0c 	.word	0x20000e0c
 8000fdc:	200002ba 	.word	0x200002ba
 8000fe0:	20000020 	.word	0x20000020
 8000fe4:	00544553 	.word	0x00544553
 8000fe8:	200002b2 	.word	0x200002b2

08000fec <Set_Goal_Point>:


void Set_Goal_Point(){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	if (registerFrame[0x30].U16 != 0){
 8000ff0:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <Set_Goal_Point+0x18>)
 8000ff2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <Set_Goal_Point+0x12>
		Run_Point_Mode();
 8000ffa:	f000 f805 	bl	8001008 <Run_Point_Mode>
	 }
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000e0c 	.word	0x20000e0c

08001008 <Run_Point_Mode>:

void Run_Point_Mode(){
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

	if (registerFrame[0x01].U16 == 8){
 800100c:	4b07      	ldr	r3, [pc, #28]	@ (800102c <Run_Point_Mode+0x24>)
 800100e:	885b      	ldrh	r3, [r3, #2]
 8001010:	2b08      	cmp	r3, #8
 8001012:	d105      	bne.n	8001020 <Run_Point_Mode+0x18>
		registerFrame[0x01].U16 = 0;
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <Run_Point_Mode+0x24>)
 8001016:	2200      	movs	r2, #0
 8001018:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 1 ;
 800101a:	4b04      	ldr	r3, [pc, #16]	@ (800102c <Run_Point_Mode+0x24>)
 800101c:	2201      	movs	r2, #1
 800101e:	841a      	strh	r2, [r3, #32]
	}
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000e0c 	.word	0x20000e0c

08001030 <Set_Home>:

void Set_Home(){
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	state = 2;
 8001034:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <Set_Home+0x40>)
 8001036:	2202      	movs	r2, #2
 8001038:	801a      	strh	r2, [r3, #0]
	registerFrame[0x01].U16 = 2;
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <Set_Home+0x44>)
 800103c:	2202      	movs	r2, #2
 800103e:	805a      	strh	r2, [r3, #2]
	registerFrame[0x01].U16 = 0;
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <Set_Home+0x44>)
 8001042:	2200      	movs	r2, #0
 8001044:	805a      	strh	r2, [r3, #2]
	registerFrame[0x01].U16 = 2;
 8001046:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <Set_Home+0x44>)
 8001048:	2202      	movs	r2, #2
 800104a:	805a      	strh	r2, [r3, #2]
	strcpy(Home, "Homing...");
 800104c:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <Set_Home+0x48>)
 800104e:	4a0b      	ldr	r2, [pc, #44]	@ (800107c <Set_Home+0x4c>)
 8001050:	ca07      	ldmia	r2, {r0, r1, r2}
 8001052:	c303      	stmia	r3!, {r0, r1}
 8001054:	801a      	strh	r2, [r3, #0]
	if (Jogginghome == 1){
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <Set_Home+0x50>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d102      	bne.n	8001064 <Set_Home+0x34>
		registerFrame[0x01].U16 = 0;
 800105e:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <Set_Home+0x44>)
 8001060:	2200      	movs	r2, #0
 8001062:	805a      	strh	r2, [r3, #2]
	}


}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200002ba 	.word	0x200002ba
 8001074:	20000e0c 	.word	0x20000e0c
 8001078:	20000054 	.word	0x20000054
 800107c:	0800b5c4 	.word	0x0800b5c4
 8001080:	200002b4 	.word	0x200002b4

08001084 <SetPick_PlaceOrder>:
void SetPick_PlaceOrder() {
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
    if (registerFrame[0x21].U16 != 00000 && registerFrame[0x22].U16 != 00000 ) {
 8001088:	4bab      	ldr	r3, [pc, #684]	@ (8001338 <SetPick_PlaceOrder+0x2b4>)
 800108a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8176 	beq.w	8001380 <SetPick_PlaceOrder+0x2fc>
 8001094:	4ba8      	ldr	r3, [pc, #672]	@ (8001338 <SetPick_PlaceOrder+0x2b4>)
 8001096:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8170 	beq.w	8001380 <SetPick_PlaceOrder+0x2fc>
    	strcpy(Order, "Pick");
 80010a0:	4ba6      	ldr	r3, [pc, #664]	@ (800133c <SetPick_PlaceOrder+0x2b8>)
 80010a2:	4aa7      	ldr	r2, [pc, #668]	@ (8001340 <SetPick_PlaceOrder+0x2bc>)
 80010a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010a8:	6018      	str	r0, [r3, #0]
 80010aa:	3304      	adds	r3, #4
 80010ac:	7019      	strb	r1, [r3, #0]
    	Pick[0] = registerFrame[0x21].U16/10000;
 80010ae:	4ba2      	ldr	r3, [pc, #648]	@ (8001338 <SetPick_PlaceOrder+0x2b4>)
 80010b0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80010b4:	4aa3      	ldr	r2, [pc, #652]	@ (8001344 <SetPick_PlaceOrder+0x2c0>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	0b5b      	lsrs	r3, r3, #13
 80010bc:	b29a      	uxth	r2, r3
 80010be:	4ba2      	ldr	r3, [pc, #648]	@ (8001348 <SetPick_PlaceOrder+0x2c4>)
 80010c0:	801a      	strh	r2, [r3, #0]
    	countPick += Pick[0]*10000;
 80010c2:	4ba1      	ldr	r3, [pc, #644]	@ (8001348 <SetPick_PlaceOrder+0x2c4>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	0152      	lsls	r2, r2, #5
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	0092      	lsls	r2, r2, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	461a      	mov	r2, r3
 80010d2:	0091      	lsls	r1, r2, #2
 80010d4:	461a      	mov	r2, r3
 80010d6:	460b      	mov	r3, r1
 80010d8:	4413      	add	r3, r2
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b9b      	ldr	r3, [pc, #620]	@ (800134c <SetPick_PlaceOrder+0x2c8>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	4b99      	ldr	r3, [pc, #612]	@ (800134c <SetPick_PlaceOrder+0x2c8>)
 80010e8:	801a      	strh	r2, [r3, #0]
    	strcpy(Order, "Place");
 80010ea:	4b94      	ldr	r3, [pc, #592]	@ (800133c <SetPick_PlaceOrder+0x2b8>)
 80010ec:	4a98      	ldr	r2, [pc, #608]	@ (8001350 <SetPick_PlaceOrder+0x2cc>)
 80010ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010f2:	6018      	str	r0, [r3, #0]
 80010f4:	3304      	adds	r3, #4
 80010f6:	8019      	strh	r1, [r3, #0]
    	Place[0] = registerFrame[0x22].U16/10000;
 80010f8:	4b8f      	ldr	r3, [pc, #572]	@ (8001338 <SetPick_PlaceOrder+0x2b4>)
 80010fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010fe:	4a91      	ldr	r2, [pc, #580]	@ (8001344 <SetPick_PlaceOrder+0x2c0>)
 8001100:	fba2 2303 	umull	r2, r3, r2, r3
 8001104:	0b5b      	lsrs	r3, r3, #13
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b92      	ldr	r3, [pc, #584]	@ (8001354 <SetPick_PlaceOrder+0x2d0>)
 800110a:	801a      	strh	r2, [r3, #0]
    	countPlace +=Place[0]*10000;
 800110c:	4b91      	ldr	r3, [pc, #580]	@ (8001354 <SetPick_PlaceOrder+0x2d0>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	0152      	lsls	r2, r2, #5
 8001114:	1ad2      	subs	r2, r2, r3
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4413      	add	r3, r2
 800111a:	461a      	mov	r2, r3
 800111c:	0091      	lsls	r1, r2, #2
 800111e:	461a      	mov	r2, r3
 8001120:	460b      	mov	r3, r1
 8001122:	4413      	add	r3, r2
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b8b      	ldr	r3, [pc, #556]	@ (8001358 <SetPick_PlaceOrder+0x2d4>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	4413      	add	r3, r2
 800112e:	b29a      	uxth	r2, r3
 8001130:	4b89      	ldr	r3, [pc, #548]	@ (8001358 <SetPick_PlaceOrder+0x2d4>)
 8001132:	801a      	strh	r2, [r3, #0]


    	strcpy(Order, "Pick");
 8001134:	4b81      	ldr	r3, [pc, #516]	@ (800133c <SetPick_PlaceOrder+0x2b8>)
 8001136:	4a82      	ldr	r2, [pc, #520]	@ (8001340 <SetPick_PlaceOrder+0x2bc>)
 8001138:	e892 0003 	ldmia.w	r2, {r0, r1}
 800113c:	6018      	str	r0, [r3, #0]
 800113e:	3304      	adds	r3, #4
 8001140:	7019      	strb	r1, [r3, #0]
    	Pick[1] = (registerFrame[0x21].U16- countPick)/1000;
 8001142:	4b7d      	ldr	r3, [pc, #500]	@ (8001338 <SetPick_PlaceOrder+0x2b4>)
 8001144:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001148:	461a      	mov	r2, r3
 800114a:	4b80      	ldr	r3, [pc, #512]	@ (800134c <SetPick_PlaceOrder+0x2c8>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	4a82      	ldr	r2, [pc, #520]	@ (800135c <SetPick_PlaceOrder+0x2d8>)
 8001152:	fb82 1203 	smull	r1, r2, r2, r3
 8001156:	1192      	asrs	r2, r2, #6
 8001158:	17db      	asrs	r3, r3, #31
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b7a      	ldr	r3, [pc, #488]	@ (8001348 <SetPick_PlaceOrder+0x2c4>)
 8001160:	805a      	strh	r2, [r3, #2]
    	countPick += Pick[1]*1000;
 8001162:	4b79      	ldr	r3, [pc, #484]	@ (8001348 <SetPick_PlaceOrder+0x2c4>)
 8001164:	885b      	ldrh	r3, [r3, #2]
 8001166:	461a      	mov	r2, r3
 8001168:	0152      	lsls	r2, r2, #5
 800116a:	1ad2      	subs	r2, r2, r3
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	4413      	add	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b75      	ldr	r3, [pc, #468]	@ (800134c <SetPick_PlaceOrder+0x2c8>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	4413      	add	r3, r2
 800117a:	b29a      	uxth	r2, r3
 800117c:	4b73      	ldr	r3, [pc, #460]	@ (800134c <SetPick_PlaceOrder+0x2c8>)
 800117e:	801a      	strh	r2, [r3, #0]
    	strcpy(Order, "Place");
 8001180:	4b6e      	ldr	r3, [pc, #440]	@ (800133c <SetPick_PlaceOrder+0x2b8>)
 8001182:	4a73      	ldr	r2, [pc, #460]	@ (8001350 <SetPick_PlaceOrder+0x2cc>)
 8001184:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001188:	6018      	str	r0, [r3, #0]
 800118a:	3304      	adds	r3, #4
 800118c:	8019      	strh	r1, [r3, #0]
    	Place[1] = (registerFrame[0x22].U16- countPlace)/1000;
 800118e:	4b6a      	ldr	r3, [pc, #424]	@ (8001338 <SetPick_PlaceOrder+0x2b4>)
 8001190:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001194:	461a      	mov	r2, r3
 8001196:	4b70      	ldr	r3, [pc, #448]	@ (8001358 <SetPick_PlaceOrder+0x2d4>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	4a6f      	ldr	r2, [pc, #444]	@ (800135c <SetPick_PlaceOrder+0x2d8>)
 800119e:	fb82 1203 	smull	r1, r2, r2, r3
 80011a2:	1192      	asrs	r2, r2, #6
 80011a4:	17db      	asrs	r3, r3, #31
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001354 <SetPick_PlaceOrder+0x2d0>)
 80011ac:	805a      	strh	r2, [r3, #2]
    	countPlace +=Place[1]*1000;
 80011ae:	4b69      	ldr	r3, [pc, #420]	@ (8001354 <SetPick_PlaceOrder+0x2d0>)
 80011b0:	885b      	ldrh	r3, [r3, #2]
 80011b2:	461a      	mov	r2, r3
 80011b4:	0152      	lsls	r2, r2, #5
 80011b6:	1ad2      	subs	r2, r2, r3
 80011b8:	0092      	lsls	r2, r2, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b65      	ldr	r3, [pc, #404]	@ (8001358 <SetPick_PlaceOrder+0x2d4>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b63      	ldr	r3, [pc, #396]	@ (8001358 <SetPick_PlaceOrder+0x2d4>)
 80011ca:	801a      	strh	r2, [r3, #0]


    	strcpy(Order, "Pick");
 80011cc:	4b5b      	ldr	r3, [pc, #364]	@ (800133c <SetPick_PlaceOrder+0x2b8>)
 80011ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001340 <SetPick_PlaceOrder+0x2bc>)
 80011d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d4:	6018      	str	r0, [r3, #0]
 80011d6:	3304      	adds	r3, #4
 80011d8:	7019      	strb	r1, [r3, #0]
		Pick[2] = (registerFrame[0x21].U16 - countPick) / 100;
 80011da:	4b57      	ldr	r3, [pc, #348]	@ (8001338 <SetPick_PlaceOrder+0x2b4>)
 80011dc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b5a      	ldr	r3, [pc, #360]	@ (800134c <SetPick_PlaceOrder+0x2c8>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	4a5d      	ldr	r2, [pc, #372]	@ (8001360 <SetPick_PlaceOrder+0x2dc>)
 80011ea:	fb82 1203 	smull	r1, r2, r2, r3
 80011ee:	1152      	asrs	r2, r2, #5
 80011f0:	17db      	asrs	r3, r3, #31
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b54      	ldr	r3, [pc, #336]	@ (8001348 <SetPick_PlaceOrder+0x2c4>)
 80011f8:	809a      	strh	r2, [r3, #4]
		countPick += Pick[2] * 100;
 80011fa:	4b53      	ldr	r3, [pc, #332]	@ (8001348 <SetPick_PlaceOrder+0x2c4>)
 80011fc:	889b      	ldrh	r3, [r3, #4]
 80011fe:	461a      	mov	r2, r3
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	4413      	add	r3, r2
 8001204:	461a      	mov	r2, r3
 8001206:	0091      	lsls	r1, r2, #2
 8001208:	461a      	mov	r2, r3
 800120a:	460b      	mov	r3, r1
 800120c:	4413      	add	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	b29a      	uxth	r2, r3
 8001212:	4b4e      	ldr	r3, [pc, #312]	@ (800134c <SetPick_PlaceOrder+0x2c8>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	b29a      	uxth	r2, r3
 800121a:	4b4c      	ldr	r3, [pc, #304]	@ (800134c <SetPick_PlaceOrder+0x2c8>)
 800121c:	801a      	strh	r2, [r3, #0]
		strcpy(Order, "Place");
 800121e:	4b47      	ldr	r3, [pc, #284]	@ (800133c <SetPick_PlaceOrder+0x2b8>)
 8001220:	4a4b      	ldr	r2, [pc, #300]	@ (8001350 <SetPick_PlaceOrder+0x2cc>)
 8001222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001226:	6018      	str	r0, [r3, #0]
 8001228:	3304      	adds	r3, #4
 800122a:	8019      	strh	r1, [r3, #0]
		Place[2] = (registerFrame[0x22].U16 - countPlace) / 100;
 800122c:	4b42      	ldr	r3, [pc, #264]	@ (8001338 <SetPick_PlaceOrder+0x2b4>)
 800122e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001232:	461a      	mov	r2, r3
 8001234:	4b48      	ldr	r3, [pc, #288]	@ (8001358 <SetPick_PlaceOrder+0x2d4>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	4a49      	ldr	r2, [pc, #292]	@ (8001360 <SetPick_PlaceOrder+0x2dc>)
 800123c:	fb82 1203 	smull	r1, r2, r2, r3
 8001240:	1152      	asrs	r2, r2, #5
 8001242:	17db      	asrs	r3, r3, #31
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b42      	ldr	r3, [pc, #264]	@ (8001354 <SetPick_PlaceOrder+0x2d0>)
 800124a:	809a      	strh	r2, [r3, #4]
		countPlace += Place[2] * 100;
 800124c:	4b41      	ldr	r3, [pc, #260]	@ (8001354 <SetPick_PlaceOrder+0x2d0>)
 800124e:	889b      	ldrh	r3, [r3, #4]
 8001250:	461a      	mov	r2, r3
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	4413      	add	r3, r2
 8001256:	461a      	mov	r2, r3
 8001258:	0091      	lsls	r1, r2, #2
 800125a:	461a      	mov	r2, r3
 800125c:	460b      	mov	r3, r1
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	b29a      	uxth	r2, r3
 8001264:	4b3c      	ldr	r3, [pc, #240]	@ (8001358 <SetPick_PlaceOrder+0x2d4>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	4413      	add	r3, r2
 800126a:	b29a      	uxth	r2, r3
 800126c:	4b3a      	ldr	r3, [pc, #232]	@ (8001358 <SetPick_PlaceOrder+0x2d4>)
 800126e:	801a      	strh	r2, [r3, #0]


		strcpy(Order, "Pick");
 8001270:	4b32      	ldr	r3, [pc, #200]	@ (800133c <SetPick_PlaceOrder+0x2b8>)
 8001272:	4a33      	ldr	r2, [pc, #204]	@ (8001340 <SetPick_PlaceOrder+0x2bc>)
 8001274:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001278:	6018      	str	r0, [r3, #0]
 800127a:	3304      	adds	r3, #4
 800127c:	7019      	strb	r1, [r3, #0]
		Pick[3] = (registerFrame[0x21].U16 - countPick) / 10;
 800127e:	4b2e      	ldr	r3, [pc, #184]	@ (8001338 <SetPick_PlaceOrder+0x2b4>)
 8001280:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001284:	461a      	mov	r2, r3
 8001286:	4b31      	ldr	r3, [pc, #196]	@ (800134c <SetPick_PlaceOrder+0x2c8>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	4a35      	ldr	r2, [pc, #212]	@ (8001364 <SetPick_PlaceOrder+0x2e0>)
 800128e:	fb82 1203 	smull	r1, r2, r2, r3
 8001292:	1092      	asrs	r2, r2, #2
 8001294:	17db      	asrs	r3, r3, #31
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	b29a      	uxth	r2, r3
 800129a:	4b2b      	ldr	r3, [pc, #172]	@ (8001348 <SetPick_PlaceOrder+0x2c4>)
 800129c:	80da      	strh	r2, [r3, #6]
		countPick += Pick[3] * 10;
 800129e:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <SetPick_PlaceOrder+0x2c4>)
 80012a0:	88db      	ldrh	r3, [r3, #6]
 80012a2:	461a      	mov	r2, r3
 80012a4:	0092      	lsls	r2, r2, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b27      	ldr	r3, [pc, #156]	@ (800134c <SetPick_PlaceOrder+0x2c8>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	4413      	add	r3, r2
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	4b25      	ldr	r3, [pc, #148]	@ (800134c <SetPick_PlaceOrder+0x2c8>)
 80012b6:	801a      	strh	r2, [r3, #0]
		strcpy(Order, "Place");
 80012b8:	4b20      	ldr	r3, [pc, #128]	@ (800133c <SetPick_PlaceOrder+0x2b8>)
 80012ba:	4a25      	ldr	r2, [pc, #148]	@ (8001350 <SetPick_PlaceOrder+0x2cc>)
 80012bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c0:	6018      	str	r0, [r3, #0]
 80012c2:	3304      	adds	r3, #4
 80012c4:	8019      	strh	r1, [r3, #0]
		Place[3] = (registerFrame[0x22].U16 - countPlace) / 10;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <SetPick_PlaceOrder+0x2b4>)
 80012c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b22      	ldr	r3, [pc, #136]	@ (8001358 <SetPick_PlaceOrder+0x2d4>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	4a23      	ldr	r2, [pc, #140]	@ (8001364 <SetPick_PlaceOrder+0x2e0>)
 80012d6:	fb82 1203 	smull	r1, r2, r2, r3
 80012da:	1092      	asrs	r2, r2, #2
 80012dc:	17db      	asrs	r3, r3, #31
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <SetPick_PlaceOrder+0x2d0>)
 80012e4:	80da      	strh	r2, [r3, #6]
		countPlace += Place[3] * 10;
 80012e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <SetPick_PlaceOrder+0x2d0>)
 80012e8:	88db      	ldrh	r3, [r3, #6]
 80012ea:	461a      	mov	r2, r3
 80012ec:	0092      	lsls	r2, r2, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <SetPick_PlaceOrder+0x2d4>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <SetPick_PlaceOrder+0x2d4>)
 80012fe:	801a      	strh	r2, [r3, #0]


		strcpy(Order, "Pick");
 8001300:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <SetPick_PlaceOrder+0x2b8>)
 8001302:	4a0f      	ldr	r2, [pc, #60]	@ (8001340 <SetPick_PlaceOrder+0x2bc>)
 8001304:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001308:	6018      	str	r0, [r3, #0]
 800130a:	3304      	adds	r3, #4
 800130c:	7019      	strb	r1, [r3, #0]
		Pick[4] = (registerFrame[0x21].U16 - countPick);
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <SetPick_PlaceOrder+0x2b4>)
 8001310:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001314:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <SetPick_PlaceOrder+0x2c8>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	b29a      	uxth	r2, r3
 800131c:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <SetPick_PlaceOrder+0x2c4>)
 800131e:	811a      	strh	r2, [r3, #8]
		countPick = 0;
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <SetPick_PlaceOrder+0x2c8>)
 8001322:	2200      	movs	r2, #0
 8001324:	801a      	strh	r2, [r3, #0]
		strcpy(Order, "Place");
 8001326:	4b05      	ldr	r3, [pc, #20]	@ (800133c <SetPick_PlaceOrder+0x2b8>)
 8001328:	4a09      	ldr	r2, [pc, #36]	@ (8001350 <SetPick_PlaceOrder+0x2cc>)
 800132a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800132e:	6018      	str	r0, [r3, #0]
 8001330:	3304      	adds	r3, #4
 8001332:	8019      	strh	r1, [r3, #0]
 8001334:	e018      	b.n	8001368 <SetPick_PlaceOrder+0x2e4>
 8001336:	bf00      	nop
 8001338:	20000e0c 	.word	0x20000e0c
 800133c:	20000034 	.word	0x20000034
 8001340:	0800b5d0 	.word	0x0800b5d0
 8001344:	d1b71759 	.word	0xd1b71759
 8001348:	2000029c 	.word	0x2000029c
 800134c:	200002b6 	.word	0x200002b6
 8001350:	0800b5d8 	.word	0x0800b5d8
 8001354:	200002a8 	.word	0x200002a8
 8001358:	200002b8 	.word	0x200002b8
 800135c:	10624dd3 	.word	0x10624dd3
 8001360:	51eb851f 	.word	0x51eb851f
 8001364:	66666667 	.word	0x66666667
		Place[4] = (registerFrame[0x22].U16 - countPlace);
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <SetPick_PlaceOrder+0x308>)
 800136a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <SetPick_PlaceOrder+0x30c>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	b29a      	uxth	r2, r3
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <SetPick_PlaceOrder+0x310>)
 8001378:	811a      	strh	r2, [r3, #8]
		countPlace = 0;
 800137a:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <SetPick_PlaceOrder+0x30c>)
 800137c:	2200      	movs	r2, #0
 800137e:	801a      	strh	r2, [r3, #0]

    }
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000e0c 	.word	0x20000e0c
 8001390:	200002b8 	.word	0x200002b8
 8001394:	200002a8 	.word	0x200002a8

08001398 <Run_Jog_Mode>:



void Run_Jog_Mode() {
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 4) {
 800139e:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <Run_Jog_Mode+0x80>)
 80013a0:	885b      	ldrh	r3, [r3, #2]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d130      	bne.n	8001408 <Run_Jog_Mode+0x70>
		strcpy(Jogmode, "Run Jog Mode");
 80013a6:	4a1d      	ldr	r2, [pc, #116]	@ (800141c <Run_Jog_Mode+0x84>)
 80013a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <Run_Jog_Mode+0x88>)
 80013aa:	4614      	mov	r4, r2
 80013ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ae:	c407      	stmia	r4!, {r0, r1, r2}
 80013b0:	7023      	strb	r3, [r4, #0]
		registerFrame[0x01].U16 = 0;
 80013b2:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <Run_Jog_Mode+0x80>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	805a      	strh	r2, [r3, #2]
		for (int i = 0; i < 5; i++) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	e021      	b.n	8001402 <Run_Jog_Mode+0x6a>

			state = 4;
 80013be:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <Run_Jog_Mode+0x8c>)
 80013c0:	2204      	movs	r2, #4
 80013c2:	801a      	strh	r2, [r3, #0]
			strcpy(Jogmode, "Go to Pick...");
 80013c4:	4a15      	ldr	r2, [pc, #84]	@ (800141c <Run_Jog_Mode+0x84>)
 80013c6:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <Run_Jog_Mode+0x90>)
 80013c8:	4614      	mov	r4, r2
 80013ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013cc:	c407      	stmia	r4!, {r0, r1, r2}
 80013ce:	8023      	strh	r3, [r4, #0]
			registerFrame[0x10].U16 = 4;
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <Run_Jog_Mode+0x80>)
 80013d2:	2204      	movs	r2, #4
 80013d4:	841a      	strh	r2, [r3, #32]
			SetPick_PlaceOrder(); //แก้ให้เข้ากับซัน
 80013d6:	f7ff fe55 	bl	8001084 <SetPick_PlaceOrder>

			state = 8;
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <Run_Jog_Mode+0x8c>)
 80013dc:	2208      	movs	r2, #8
 80013de:	801a      	strh	r2, [r3, #0]
			strcpy(Jogmode, "Go to Place...");
 80013e0:	4a0e      	ldr	r2, [pc, #56]	@ (800141c <Run_Jog_Mode+0x84>)
 80013e2:	4b12      	ldr	r3, [pc, #72]	@ (800142c <Run_Jog_Mode+0x94>)
 80013e4:	4614      	mov	r4, r2
 80013e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013e8:	c407      	stmia	r4!, {r0, r1, r2}
 80013ea:	8023      	strh	r3, [r4, #0]
 80013ec:	3402      	adds	r4, #2
 80013ee:	0c1b      	lsrs	r3, r3, #16
 80013f0:	7023      	strb	r3, [r4, #0]
			registerFrame[0x10].U16 = 8;
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <Run_Jog_Mode+0x80>)
 80013f4:	2208      	movs	r2, #8
 80013f6:	841a      	strh	r2, [r3, #32]
			SetPick_PlaceOrder(); //แก้ให้เข้ากับซัน
 80013f8:	f7ff fe44 	bl	8001084 <SetPick_PlaceOrder>
		for (int i = 0; i < 5; i++) {
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3301      	adds	r3, #1
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b04      	cmp	r3, #4
 8001406:	ddda      	ble.n	80013be <Run_Jog_Mode+0x26>
		}
	}
	registerFrame[0x10].U16 = 0;
 8001408:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <Run_Jog_Mode+0x80>)
 800140a:	2200      	movs	r2, #0
 800140c:	841a      	strh	r2, [r3, #32]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
 8001416:	bf00      	nop
 8001418:	20000e0c 	.word	0x20000e0c
 800141c:	20000040 	.word	0x20000040
 8001420:	0800b5e0 	.word	0x0800b5e0
 8001424:	200002ba 	.word	0x200002ba
 8001428:	0800b5f0 	.word	0x0800b5f0
 800142c:	0800b600 	.word	0x0800b600

08001430 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001434:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <modbus_1t5_Timeout+0x3c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800143c:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <modbus_1t5_Timeout+0x3c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2200      	movs	r2, #0
 8001446:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <modbus_1t5_Timeout+0x3c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <modbus_1t5_Timeout+0x3c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000794 	.word	0x20000794

08001470 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001478:	4b04      	ldr	r3, [pc, #16]	@ (800148c <modbus_3t5_Timeout+0x1c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2201      	movs	r2, #1
 800147e:	755a      	strb	r2, [r3, #21]

}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	20000794 	.word	0x20000794

08001490 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f008 ff19 	bl	800a2d0 <HAL_UART_GetError>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b20      	cmp	r3, #32
 80014a2:	d101      	bne.n	80014a8 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80014a4:	f7ff ffc4 	bl	8001430 <modbus_1t5_Timeout>

	}
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80014ba:	4a25      	ldr	r2, [pc, #148]	@ (8001550 <Modbus_init+0xa0>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80014c0:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <Modbus_init+0xa0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	4a21      	ldr	r2, [pc, #132]	@ (8001554 <Modbus_init+0xa4>)
 80014ce:	210e      	movs	r1, #14
 80014d0:	4618      	mov	r0, r3
 80014d2:	f007 f941 	bl	8008758 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2110      	movs	r1, #16
 80014dc:	4618      	mov	r0, r3
 80014de:	f008 fea1 	bl	800a224 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f008 feb8 	bl	800a25c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a19      	ldr	r2, [pc, #100]	@ (8001558 <Modbus_init+0xa8>)
 80014f2:	2104      	movs	r1, #4
 80014f4:	4618      	mov	r0, r3
 80014f6:	f008 f97f 	bl	80097f8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <Modbus_init+0xa0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001500:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <Modbus_init+0xa0>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <Modbus_init+0xa0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 800150c:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001510:	4413      	add	r3, r2
 8001512:	3302      	adds	r3, #2
 8001514:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001518:	4619      	mov	r1, r3
 800151a:	f008 faa7 	bl	8009a6c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800151e:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <Modbus_init+0xa0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b01      	cmp	r3, #1
 800152c:	d10c      	bne.n	8001548 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800152e:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <Modbus_init+0xa0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	4618      	mov	r0, r3
 8001536:	f006 f8e1 	bl	80076fc <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800153a:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <Modbus_init+0xa0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f006 fb3a 	bl	8007bbc <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000794 	.word	0x20000794
 8001554:	08001471 	.word	0x08001471
 8001558:	08001491 	.word	0x08001491

0800155c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001568:	23ff      	movs	r3, #255	@ 0xff
 800156a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800156c:	23ff      	movs	r3, #255	@ 0xff
 800156e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001570:	e013      	b.n	800159a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	781a      	ldrb	r2, [r3, #0]
 800157a:	7bbb      	ldrb	r3, [r7, #14]
 800157c:	4053      	eors	r3, r2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001582:	4a0f      	ldr	r2, [pc, #60]	@ (80015c0 <CRC16+0x64>)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4413      	add	r3, r2
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	4053      	eors	r3, r2
 800158e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001590:	4a0c      	ldr	r2, [pc, #48]	@ (80015c4 <CRC16+0x68>)
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	4413      	add	r3, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800159a:	883b      	ldrh	r3, [r7, #0]
 800159c:	1e5a      	subs	r2, r3, #1
 800159e:	803a      	strh	r2, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1e6      	bne.n	8001572 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	7bbb      	ldrb	r3, [r7, #14]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	b29b      	uxth	r3, r3
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	20000168 	.word	0x20000168
 80015c4:	20000068 	.word	0x20000068

080015c8 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80015ce:	4b7e      	ldr	r3, [pc, #504]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	7ddb      	ldrb	r3, [r3, #23]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d80a      	bhi.n	80015f0 <Modbus_Protocal_Worker+0x28>
 80015da:	a201      	add	r2, pc, #4	@ (adr r2, 80015e0 <Modbus_Protocal_Worker+0x18>)
 80015dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e0:	080015fb 	.word	0x080015fb
 80015e4:	0800178f 	.word	0x0800178f
 80015e8:	08001687 	.word	0x08001687
 80015ec:	080016cb 	.word	0x080016cb
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80015f0:	4b75      	ldr	r3, [pc, #468]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2201      	movs	r2, #1
 80015f6:	75da      	strb	r2, [r3, #23]
		break;
 80015f8:	e0e1      	b.n	80017be <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80015fa:	4b73      	ldr	r3, [pc, #460]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001602:	2b00      	cmp	r3, #0
 8001604:	d006      	beq.n	8001614 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8001606:	4b70      	ldr	r3, [pc, #448]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2202      	movs	r2, #2
 800160c:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 800160e:	f000 f9cd 	bl	80019ac <Modbus_Emission>
 8001612:	e018      	b.n	8001646 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001614:	4b6c      	ldr	r3, [pc, #432]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800161e:	4b6a      	ldr	r3, [pc, #424]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001628:	b29b      	uxth	r3, r3
 800162a:	429a      	cmp	r2, r3
 800162c:	d00b      	beq.n	8001646 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800162e:	4b66      	ldr	r3, [pc, #408]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001636:	4b64      	ldr	r3, [pc, #400]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2200      	movs	r2, #0
 800163c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800163e:	4b62      	ldr	r3, [pc, #392]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2203      	movs	r2, #3
 8001644:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001646:	4b60      	ldr	r3, [pc, #384]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001650:	2b20      	cmp	r3, #32
 8001652:	f040 80ad 	bne.w	80017b0 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001656:	4b5c      	ldr	r3, [pc, #368]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2200      	movs	r2, #0
 800165c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001660:	4b59      	ldr	r3, [pc, #356]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001666:	4b58      	ldr	r3, [pc, #352]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b57      	ldr	r3, [pc, #348]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001672:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001676:	4413      	add	r3, r2
 8001678:	3302      	adds	r3, #2
 800167a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800167e:	4619      	mov	r1, r3
 8001680:	f008 f9f4 	bl	8009a6c <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001684:	e094      	b.n	80017b0 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001686:	4b50      	ldr	r3, [pc, #320]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	7d1b      	ldrb	r3, [r3, #20]
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 8091 	beq.w	80017b4 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001692:	4b4d      	ldr	r3, [pc, #308]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	22fe      	movs	r2, #254	@ 0xfe
 8001698:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800169a:	4b4b      	ldr	r3, [pc, #300]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 80016a4:	4b48      	ldr	r3, [pc, #288]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80016b4:	4b44      	ldr	r3, [pc, #272]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 80016b6:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80016b8:	1a8a      	subs	r2, r1, r2
 80016ba:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80016bc:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80016c0:	4b41      	ldr	r3, [pc, #260]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2204      	movs	r2, #4
 80016c6:	75da      	strb	r2, [r3, #23]
		}
		break;
 80016c8:	e074      	b.n	80017b4 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80016ca:	4b3f      	ldr	r3, [pc, #252]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80016d2:	f113 0f02 	cmn.w	r3, #2
 80016d6:	d150      	bne.n	800177a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80016d8:	4b3b      	ldr	r3, [pc, #236]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2200      	movs	r2, #0
 80016de:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80016e0:	4b39      	ldr	r3, [pc, #228]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80016e8:	4b37      	ldr	r3, [pc, #220]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80016f0:	3b02      	subs	r3, #2
 80016f2:	4619      	mov	r1, r3
 80016f4:	4610      	mov	r0, r2
 80016f6:	f7ff ff31 	bl	800155c <CRC16>
 80016fa:	4603      	mov	r3, r0
 80016fc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80016fe:	793a      	ldrb	r2, [r7, #4]
 8001700:	4b31      	ldr	r3, [pc, #196]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001702:	6819      	ldr	r1, [r3, #0]
 8001704:	4b30      	ldr	r3, [pc, #192]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800170c:	3b02      	subs	r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001714:	429a      	cmp	r2, r3
 8001716:	d10c      	bne.n	8001732 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001718:	797a      	ldrb	r2, [r7, #5]
 800171a:	4b2b      	ldr	r3, [pc, #172]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 800171c:	6819      	ldr	r1, [r3, #0]
 800171e:	4b2a      	ldr	r3, [pc, #168]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001726:	3b01      	subs	r3, #1
 8001728:	440b      	add	r3, r1
 800172a:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800172e:	429a      	cmp	r2, r3
 8001730:	d004      	beq.n	800173c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001732:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	22ff      	movs	r2, #255	@ 0xff
 8001738:	759a      	strb	r2, [r3, #22]
				break;
 800173a:	e040      	b.n	80017be <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800173c:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001744:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d113      	bne.n	8001776 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800174e:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001756:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800175e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001760:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001768:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800176a:	461a      	mov	r2, r3
 800176c:	f009 ff04 	bl	800b578 <memcpy>

			//execute command
			Modbus_frame_response();
 8001770:	f000 f904 	bl	800197c <Modbus_frame_response>
 8001774:	e001      	b.n	800177a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001776:	bf00      	nop
					}
		break;


	}
}
 8001778:	e021      	b.n	80017be <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800177a:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	7d5b      	ldrb	r3, [r3, #21]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d019      	beq.n	80017b8 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001784:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2201      	movs	r2, #1
 800178a:	75da      	strb	r2, [r3, #23]
		break;
 800178c:	e014      	b.n	80017b8 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800178e:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001798:	2b20      	cmp	r3, #32
 800179a:	d10f      	bne.n	80017bc <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800179c:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <Modbus_Protocal_Worker+0x200>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2201      	movs	r2, #1
 80017ac:	75da      	strb	r2, [r3, #23]
		break;
 80017ae:	e005      	b.n	80017bc <Modbus_Protocal_Worker+0x1f4>
		break;
 80017b0:	bf00      	nop
 80017b2:	e004      	b.n	80017be <Modbus_Protocal_Worker+0x1f6>
		break;
 80017b4:	bf00      	nop
 80017b6:	e002      	b.n	80017be <Modbus_Protocal_Worker+0x1f6>
		break;
 80017b8:	bf00      	nop
 80017ba:	e000      	b.n	80017be <Modbus_Protocal_Worker+0x1f6>
		break;
 80017bc:	bf00      	nop
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000794 	.word	0x20000794

080017cc <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80017d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <modbusWrite1Register+0x7c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	7e5b      	ldrb	r3, [r3, #25]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b29b      	uxth	r3, r3
 80017dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001848 <modbusWrite1Register+0x7c>)
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	7e92      	ldrb	r2, [r2, #26]
 80017e2:	4413      	add	r3, r2
 80017e4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80017e6:	88fa      	ldrh	r2, [r7, #6]
 80017e8:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <modbusWrite1Register+0x7c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d903      	bls.n	80017fa <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80017f2:	2002      	movs	r0, #2
 80017f4:	f000 f8a0 	bl	8001938 <ModbusErrorReply>
			 return;
 80017f8:	e023      	b.n	8001842 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <modbusWrite1Register+0x7c>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <modbusWrite1Register+0x7c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6859      	ldr	r1, [r3, #4]
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	440b      	add	r3, r1
 800180a:	7ed2      	ldrb	r2, [r2, #27]
 800180c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <modbusWrite1Register+0x7c>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <modbusWrite1Register+0x7c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6859      	ldr	r1, [r3, #4]
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	440b      	add	r3, r1
 800181e:	7f12      	ldrb	r2, [r2, #28]
 8001820:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <modbusWrite1Register+0x7c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800182a:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <modbusWrite1Register+0x7c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001830:	2208      	movs	r2, #8
 8001832:	4619      	mov	r1, r3
 8001834:	f009 fea0 	bl	800b578 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <modbusWrite1Register+0x7c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2205      	movs	r2, #5
 800183e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000794 	.word	0x20000794

0800184c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001852:	4b38      	ldr	r3, [pc, #224]	@ (8001934 <modbusRead1Register+0xe8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	7edb      	ldrb	r3, [r3, #27]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	b29b      	uxth	r3, r3
 800185c:	4a35      	ldr	r2, [pc, #212]	@ (8001934 <modbusRead1Register+0xe8>)
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	7f12      	ldrb	r2, [r2, #28]
 8001862:	4413      	add	r3, r2
 8001864:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001866:	4b33      	ldr	r3, [pc, #204]	@ (8001934 <modbusRead1Register+0xe8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	7e5b      	ldrb	r3, [r3, #25]
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b29b      	uxth	r3, r3
 8001870:	4a30      	ldr	r2, [pc, #192]	@ (8001934 <modbusRead1Register+0xe8>)
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	7e92      	ldrb	r2, [r2, #26]
 8001876:	4413      	add	r3, r2
 8001878:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <modbusRead1Register+0x3a>
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	2b7d      	cmp	r3, #125	@ 0x7d
 8001884:	d903      	bls.n	800188e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001886:	2003      	movs	r0, #3
 8001888:	f000 f856 	bl	8001938 <ModbusErrorReply>
		 return;
 800188c:	e04e      	b.n	800192c <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800188e:	88ba      	ldrh	r2, [r7, #4]
 8001890:	4b28      	ldr	r3, [pc, #160]	@ (8001934 <modbusRead1Register+0xe8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	429a      	cmp	r2, r3
 8001898:	d808      	bhi.n	80018ac <modbusRead1Register+0x60>
 800189a:	88ba      	ldrh	r2, [r7, #4]
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	4413      	add	r3, r2
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b24      	ldr	r3, [pc, #144]	@ (8001934 <modbusRead1Register+0xe8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d903      	bls.n	80018b4 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80018ac:	2002      	movs	r0, #2
 80018ae:	f000 f843 	bl	8001938 <ModbusErrorReply>
		 return;
 80018b2:	e03b      	b.n	800192c <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001934 <modbusRead1Register+0xe8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2203      	movs	r2, #3
 80018ba:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <modbusRead1Register+0xe8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0052      	lsls	r2, r2, #1
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80018ce:	2400      	movs	r4, #0
 80018d0:	e020      	b.n	8001914 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80018d2:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <modbusRead1Register+0xe8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	88bb      	ldrh	r3, [r7, #4]
 80018da:	4423      	add	r3, r4
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	18d1      	adds	r1, r2, r3
 80018e0:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <modbusRead1Register+0xe8>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	1c63      	adds	r3, r4, #1
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	7849      	ldrb	r1, [r1, #1]
 80018ea:	4413      	add	r3, r2
 80018ec:	460a      	mov	r2, r1
 80018ee:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <modbusRead1Register+0xe8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	88bb      	ldrh	r3, [r7, #4]
 80018fa:	4423      	add	r3, r4
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	18d1      	adds	r1, r2, r3
 8001900:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <modbusRead1Register+0xe8>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	0063      	lsls	r3, r4, #1
 8001906:	3303      	adds	r3, #3
 8001908:	7809      	ldrb	r1, [r1, #0]
 800190a:	4413      	add	r3, r2
 800190c:	460a      	mov	r2, r1
 800190e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001912:	3401      	adds	r4, #1
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	429c      	cmp	r4, r3
 8001918:	dbdb      	blt.n	80018d2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	3301      	adds	r3, #1
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <modbusRead1Register+0xe8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0052      	lsls	r2, r2, #1
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bd90      	pop	{r4, r7, pc}
 8001932:	bf00      	nop
 8001934:	20000794 	.word	0x20000794

08001938 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001942:	4b0d      	ldr	r3, [pc, #52]	@ (8001978 <ModbusErrorReply+0x40>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	7e1a      	ldrb	r2, [r3, #24]
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <ModbusErrorReply+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <ModbusErrorReply+0x40>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	79fa      	ldrb	r2, [r7, #7]
 800195c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <ModbusErrorReply+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2202      	movs	r2, #2
 8001966:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000794 	.word	0x20000794

0800197c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001980:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <Modbus_frame_response+0x2c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	7e1b      	ldrb	r3, [r3, #24]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d004      	beq.n	8001994 <Modbus_frame_response+0x18>
 800198a:	2b06      	cmp	r3, #6
 800198c:	d105      	bne.n	800199a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800198e:	f7ff ff1d 	bl	80017cc <modbusWrite1Register>
		break;
 8001992:	e006      	b.n	80019a2 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001994:	f7ff ff5a 	bl	800184c <modbusRead1Register>
		break;
 8001998:	e003      	b.n	80019a2 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800199a:	2001      	movs	r0, #1
 800199c:	f7ff ffcc 	bl	8001938 <ModbusErrorReply>
		break;
 80019a0:	bf00      	nop

	}
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000794 	.word	0x20000794

080019ac <Modbus_Emission>:

void Modbus_Emission()
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80019b2:	4b38      	ldr	r3, [pc, #224]	@ (8001a94 <Modbus_Emission+0xe8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019bc:	2b20      	cmp	r3, #32
 80019be:	d15d      	bne.n	8001a7c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80019c0:	4b34      	ldr	r3, [pc, #208]	@ (8001a94 <Modbus_Emission+0xe8>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b33      	ldr	r3, [pc, #204]	@ (8001a94 <Modbus_Emission+0xe8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	7812      	ldrb	r2, [r2, #0]
 80019ca:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80019ce:	4b31      	ldr	r3, [pc, #196]	@ (8001a94 <Modbus_Emission+0xe8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80019d6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80019d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a94 <Modbus_Emission+0xe8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80019e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <Modbus_Emission+0xe8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80019e8:	461a      	mov	r2, r3
 80019ea:	f009 fdc5 	bl	800b578 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80019ee:	4b29      	ldr	r3, [pc, #164]	@ (8001a94 <Modbus_Emission+0xe8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80019f6:	461a      	mov	r2, r3
 80019f8:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <Modbus_Emission+0xe8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	3203      	adds	r2, #3
 80019fe:	b292      	uxth	r2, r2
 8001a00:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001a04:	4b23      	ldr	r3, [pc, #140]	@ (8001a94 <Modbus_Emission+0xe8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001a0c:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <Modbus_Emission+0xe8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001a14:	3b02      	subs	r3, #2
 8001a16:	4619      	mov	r1, r3
 8001a18:	4610      	mov	r0, r2
 8001a1a:	f7ff fd9f 	bl	800155c <CRC16>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001a22:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <Modbus_Emission+0xe8>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <Modbus_Emission+0xe8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a2e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001a30:	7939      	ldrb	r1, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	460a      	mov	r2, r1
 8001a36:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001a3a:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <Modbus_Emission+0xe8>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <Modbus_Emission+0xe8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a46:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001a48:	7979      	ldrb	r1, [r7, #5]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <Modbus_Emission+0xe8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	d10d      	bne.n	8001a7c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001a60:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <Modbus_Emission+0xe8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001a66:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <Modbus_Emission+0xe8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <Modbus_Emission+0xe8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001a72:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a76:	461a      	mov	r2, r3
 8001a78:	f007 ff78 	bl	800996c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <Modbus_Emission+0xe8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2200      	movs	r2, #0
 8001a82:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001a84:	4b03      	ldr	r3, [pc, #12]	@ (8001a94 <Modbus_Emission+0xe8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	755a      	strb	r2, [r3, #21]

}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000794 	.word	0x20000794

08001a98 <ADC_init>:
>>>>>>> Stashed changes
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
<<<<<<< Updated upstream
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2232      	movs	r2, #50	@ 0x32
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f002 f981 	bl	80031fc <HAL_ADC_Start_DMA>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <Update_joy>:
=======
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2232      	movs	r2, #50	@ 0x32
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f002 fcf1 	bl	8004490 <HAL_ADC_Start_DMA>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <Update_adc>:

uint32_t Update_adc(ADC* adc){
 8001ab6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	uint64_t sum_adc = 0;
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	e011      	b.n	8001af6 <Update_adc+0x40>
		sum_adc += adc -> adc_buffer[i];
 8001ad2:	7bfa      	ldrb	r2, [r7, #15]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ada:	2200      	movs	r2, #0
 8001adc:	461c      	mov	r4, r3
 8001ade:	4615      	mov	r5, r2
 8001ae0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ae4:	eb12 0804 	adds.w	r8, r2, r4
 8001ae8:	eb43 0905 	adc.w	r9, r3, r5
 8001aec:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	3301      	adds	r3, #1
 8001af4:	73fb      	strb	r3, [r7, #15]
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	2b31      	cmp	r3, #49	@ 0x31
 8001afa:	d9ea      	bls.n	8001ad2 <Update_adc+0x1c>
	}
	return adc -> adc_avg = sum_adc / 50;
 8001afc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b00:	f04f 0232 	mov.w	r2, #50	@ 0x32
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	f7ff f874 	bl	8000bf4 <__aeabi_uldivmod>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001b26 <Update_endeffector_status>:
 */
#include "eff.h"

void Update_endeffector_status(EFF* eff, GPIO_TypeDef* GPIO_Pull,uint16_t GPIO_Pin_Pull,/* Reed switch pull */
		GPIO_TypeDef* GPIO_Push,uint16_t GPIO_Pin_Push /* Reed switch push*/)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	4613      	mov	r3, r2
 8001b34:	80fb      	strh	r3, [r7, #6]
	if((HAL_GPIO_ReadPin(GPIO_Pull, GPIO_Pin_Pull) == 1)
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	68b8      	ldr	r0, [r7, #8]
 8001b3c:	f004 fc92 	bl	8006464 <HAL_GPIO_ReadPin>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d10b      	bne.n	8001b5e <Update_endeffector_status+0x38>
			&& (HAL_GPIO_ReadPin(GPIO_Push, GPIO_Pin_Push) == 0))
 8001b46:	8b3b      	ldrh	r3, [r7, #24]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6838      	ldr	r0, [r7, #0]
 8001b4c:	f004 fc8a 	bl	8006464 <HAL_GPIO_ReadPin>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d103      	bne.n	8001b5e <Update_endeffector_status+0x38>
	{
		// Pull Reed switch was detect
		eff -> gripper_actual_status = 0b0001;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	801a      	strh	r2, [r3, #0]
 8001b5c:	e017      	b.n	8001b8e <Update_endeffector_status+0x68>
	}
	else if((HAL_GPIO_ReadPin(GPIO_Pull, GPIO_Pin_Pull) == 0)
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	4619      	mov	r1, r3
 8001b62:	68b8      	ldr	r0, [r7, #8]
 8001b64:	f004 fc7e 	bl	8006464 <HAL_GPIO_ReadPin>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10b      	bne.n	8001b86 <Update_endeffector_status+0x60>
			&& (HAL_GPIO_ReadPin(GPIO_Push, GPIO_Pin_Push) == 1))
 8001b6e:	8b3b      	ldrh	r3, [r7, #24]
 8001b70:	4619      	mov	r1, r3
 8001b72:	6838      	ldr	r0, [r7, #0]
 8001b74:	f004 fc76 	bl	8006464 <HAL_GPIO_ReadPin>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d103      	bne.n	8001b86 <Update_endeffector_status+0x60>
	{
		// Push Reed switch was detect
		eff -> gripper_actual_status = 0b0010;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2202      	movs	r2, #2
 8001b82:	801a      	strh	r2, [r3, #0]
 8001b84:	e003      	b.n	8001b8e <Update_endeffector_status+0x68>
	}
	else
	{
		eff -> gripper_actual_status = 0b0000;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	801a      	strh	r2, [r3, #0]
	}
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <Update_joy>:
>>>>>>> Stashed changes
 *      Author: naker
 */

#include "joy.h"

void Update_joy(JOY *joy){
<<<<<<< Updated upstream
 8000f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
	uint8_t s_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000f0e:	2120      	movs	r1, #32
 8000f10:	4835      	ldr	r0, [pc, #212]	@ (8000fe8 <Update_joy+0xe4>)
 8000f12:	f004 f95d 	bl	80051d0 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]
	uint8_t s_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000f1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f22:	f004 f955 	bl	80051d0 <HAL_GPIO_ReadPin>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73bb      	strb	r3, [r7, #14]
	uint8_t s_3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 8000f2a:	2110      	movs	r1, #16
 8000f2c:	482f      	ldr	r0, [pc, #188]	@ (8000fec <Update_joy+0xe8>)
 8000f2e:	f004 f94f 	bl	80051d0 <HAL_GPIO_ReadPin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	737b      	strb	r3, [r7, #13]
	uint8_t s_4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8000f36:	2120      	movs	r1, #32
 8000f38:	482c      	ldr	r0, [pc, #176]	@ (8000fec <Update_joy+0xe8>)
 8000f3a:	f004 f949 	bl	80051d0 <HAL_GPIO_ReadPin>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	733b      	strb	r3, [r7, #12]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d008      	beq.n	8000f5a <Update_joy+0x56>
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d005      	beq.n	8000f5a <Update_joy+0x56>
 8000f4e:	7b7b      	ldrb	r3, [r7, #13]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d002      	beq.n	8000f5a <Update_joy+0x56>
 8000f54:	7b3b      	ldrb	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d133      	bne.n	8000fc2 <Update_joy+0xbe>
		static uint8_t is_first = 1;
		static uint64_t timestamp = 0;
		if(is_first){
 8000f5a:	4b25      	ldr	r3, [pc, #148]	@ (8000ff0 <Update_joy+0xec>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00c      	beq.n	8000f7c <Update_joy+0x78>
			timestamp = HAL_GetTick() + 50;
 8000f62:	f001 fd43 	bl	80029ec <HAL_GetTick>
 8000f66:	4603      	mov	r3, r0
 8000f68:	3332      	adds	r3, #50	@ 0x32
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	469a      	mov	sl, r3
 8000f6e:	4693      	mov	fp, r2
 8000f70:	4b20      	ldr	r3, [pc, #128]	@ (8000ff4 <Update_joy+0xf0>)
 8000f72:	e9c3 ab00 	strd	sl, fp, [r3]
			is_first = 0;
 8000f76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <Update_joy+0xec>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() > timestamp){
 8000f7c:	f001 fd36 	bl	80029ec <HAL_GetTick>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2200      	movs	r2, #0
 8000f84:	461c      	mov	r4, r3
 8000f86:	4615      	mov	r5, r2
 8000f88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <Update_joy+0xf0>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	42a2      	cmp	r2, r4
 8000f90:	41ab      	sbcs	r3, r5
 8000f92:	d223      	bcs.n	8000fdc <Update_joy+0xd8>
			timestamp = HAL_GetTick() + 50;
 8000f94:	f001 fd2a 	bl	80029ec <HAL_GetTick>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	3332      	adds	r3, #50	@ 0x32
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	4698      	mov	r8, r3
 8000fa0:	4691      	mov	r9, r2
 8000fa2:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <Update_joy+0xf0>)
 8000fa4:	e9c3 8900 	strd	r8, r9, [r3]
			joy -> s_1 = s_1;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7bfa      	ldrb	r2, [r7, #15]
 8000fac:	701a      	strb	r2, [r3, #0]
			joy -> s_2 = s_2;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7bba      	ldrb	r2, [r7, #14]
 8000fb2:	705a      	strb	r2, [r3, #1]
			joy -> s_3 = s_3;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7b7a      	ldrb	r2, [r7, #13]
 8000fb8:	709a      	strb	r2, [r3, #2]
			joy -> s_4 = s_4;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	7b3a      	ldrb	r2, [r7, #12]
 8000fbe:	70da      	strb	r2, [r3, #3]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8000fc0:	e00c      	b.n	8000fdc <Update_joy+0xd8>
		}
	}else{
		joy -> s_1 = 1;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
		joy -> s_2 = 1;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	705a      	strb	r2, [r3, #1]
		joy -> s_3 = 1;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	709a      	strb	r2, [r3, #2]
		joy -> s_4 = 1;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	70da      	strb	r2, [r3, #3]
	}
}
 8000fda:	e000      	b.n	8000fde <Update_joy+0xda>
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8000fdc:	bf00      	nop
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000fe8:	48000400 	.word	0x48000400
 8000fec:	48000800 	.word	0x48000800
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000038 	.word	0x20000038

08000ff8 <main>:
=======
 8001b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
	uint8_t s_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001ba2:	2120      	movs	r1, #32
 8001ba4:	4835      	ldr	r0, [pc, #212]	@ (8001c7c <Update_joy+0xe4>)
 8001ba6:	f004 fc5d 	bl	8006464 <HAL_GPIO_ReadPin>
 8001baa:	4603      	mov	r3, r0
 8001bac:	73fb      	strb	r3, [r7, #15]
	uint8_t s_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001bae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb6:	f004 fc55 	bl	8006464 <HAL_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	73bb      	strb	r3, [r7, #14]
	uint8_t s_3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 8001bbe:	2110      	movs	r1, #16
 8001bc0:	482f      	ldr	r0, [pc, #188]	@ (8001c80 <Update_joy+0xe8>)
 8001bc2:	f004 fc4f 	bl	8006464 <HAL_GPIO_ReadPin>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	737b      	strb	r3, [r7, #13]
	uint8_t s_4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8001bca:	2120      	movs	r1, #32
 8001bcc:	482c      	ldr	r0, [pc, #176]	@ (8001c80 <Update_joy+0xe8>)
 8001bce:	f004 fc49 	bl	8006464 <HAL_GPIO_ReadPin>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	733b      	strb	r3, [r7, #12]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <Update_joy+0x56>
 8001bdc:	7bbb      	ldrb	r3, [r7, #14]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <Update_joy+0x56>
 8001be2:	7b7b      	ldrb	r3, [r7, #13]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <Update_joy+0x56>
 8001be8:	7b3b      	ldrb	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d133      	bne.n	8001c56 <Update_joy+0xbe>
		static uint8_t is_first = 1;
		static uint64_t timestamp = 0;
		if(is_first){
 8001bee:	4b25      	ldr	r3, [pc, #148]	@ (8001c84 <Update_joy+0xec>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00c      	beq.n	8001c10 <Update_joy+0x78>
			timestamp = HAL_GetTick() + 50;
 8001bf6:	f002 f843 	bl	8003c80 <HAL_GetTick>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	3332      	adds	r3, #50	@ 0x32
 8001bfe:	2200      	movs	r2, #0
 8001c00:	469a      	mov	sl, r3
 8001c02:	4693      	mov	fp, r2
 8001c04:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <Update_joy+0xf0>)
 8001c06:	e9c3 ab00 	strd	sl, fp, [r3]
			is_first = 0;
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c84 <Update_joy+0xec>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() > timestamp){
 8001c10:	f002 f836 	bl	8003c80 <HAL_GetTick>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2200      	movs	r2, #0
 8001c18:	461c      	mov	r4, r3
 8001c1a:	4615      	mov	r5, r2
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c88 <Update_joy+0xf0>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	42a2      	cmp	r2, r4
 8001c24:	41ab      	sbcs	r3, r5
 8001c26:	d223      	bcs.n	8001c70 <Update_joy+0xd8>
			timestamp = HAL_GetTick() + 50;
 8001c28:	f002 f82a 	bl	8003c80 <HAL_GetTick>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	3332      	adds	r3, #50	@ 0x32
 8001c30:	2200      	movs	r2, #0
 8001c32:	4698      	mov	r8, r3
 8001c34:	4691      	mov	r9, r2
 8001c36:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <Update_joy+0xf0>)
 8001c38:	e9c3 8900 	strd	r8, r9, [r3]
			joy -> s_1 = s_1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7bfa      	ldrb	r2, [r7, #15]
 8001c40:	701a      	strb	r2, [r3, #0]
			joy -> s_2 = s_2;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7bba      	ldrb	r2, [r7, #14]
 8001c46:	705a      	strb	r2, [r3, #1]
			joy -> s_3 = s_3;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7b7a      	ldrb	r2, [r7, #13]
 8001c4c:	709a      	strb	r2, [r3, #2]
			joy -> s_4 = s_4;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7b3a      	ldrb	r2, [r7, #12]
 8001c52:	70da      	strb	r2, [r3, #3]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8001c54:	e00c      	b.n	8001c70 <Update_joy+0xd8>
		}
	}else{
		joy -> s_1 = 1;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
		joy -> s_2 = 1;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	705a      	strb	r2, [r3, #1]
		joy -> s_3 = 1;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	709a      	strb	r2, [r3, #2]
		joy -> s_4 = 1;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	70da      	strb	r2, [r3, #3]
	}
}
 8001c6e:	e000      	b.n	8001c72 <Update_joy+0xda>
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8001c70:	bf00      	nop
}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c7c:	48000400 	.word	0x48000400
 8001c80:	48000800 	.word	0x48000800
 8001c84:	20000268 	.word	0x20000268
 8001c88:	20000798 	.word	0x20000798

08001c8c <main>:
>>>>>>> Stashed changes
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< Updated upstream
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
=======
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 8000ffc:	f001 fc91 	bl	8002922 <HAL_Init>
=======
 8001c90:	f001 ff91 	bl	8003bb6 <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 8001000:	f000 f8cc 	bl	800119c <SystemClock_Config>
=======
 8001c94:	f000 f8ec 	bl	8001e70 <SystemClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 8001004:	f000 fb98 	bl	8001738 <MX_GPIO_Init>
  MX_DMA_Init();
 8001008:	f000 fb5c 	bl	80016c4 <MX_DMA_Init>
  MX_TIM1_Init();
 800100c:	f000 f988 	bl	8001320 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001010:	f000 fa36 	bl	8001480 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001014:	f000 fa82 	bl	800151c <MX_TIM4_Init>
  MX_ADC1_Init();
 8001018:	f000 f90a 	bl	8001230 <MX_ADC1_Init>
  MX_TIM16_Init();
 800101c:	f000 fad4 	bl	80015c8 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001020:	f000 fb02 	bl	8001628 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Update command timer
  HAL_TIM_Base_Start_IT(&htim3);
 8001024:	484a      	ldr	r0, [pc, #296]	@ (8001150 <main+0x158>)
 8001026:	f005 fa1f 	bl	8006468 <HAL_TIM_Base_Start_IT>

  //PWM generator
  HAL_TIM_Base_Start(&htim1);
 800102a:	484a      	ldr	r0, [pc, #296]	@ (8001154 <main+0x15c>)
 800102c:	f005 f9ac 	bl	8006388 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001030:	2100      	movs	r1, #0
 8001032:	4848      	ldr	r0, [pc, #288]	@ (8001154 <main+0x15c>)
 8001034:	f005 fafe 	bl	8006634 <HAL_TIM_PWM_Start>

  //Encoder reader
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001038:	213c      	movs	r1, #60	@ 0x3c
 800103a:	4847      	ldr	r0, [pc, #284]	@ (8001158 <main+0x160>)
 800103c:	f005 fd28 	bl	8006a90 <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, 8192, 8000, 65536);
 8001040:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001044:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001048:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800104c:	4843      	ldr	r0, [pc, #268]	@ (800115c <main+0x164>)
 800104e:	f001 f8c8 	bl	80021e2 <QEI_init>

  //Current reader
  ADC_init(&hadc1, &current_sensor);
 8001052:	4943      	ldr	r1, [pc, #268]	@ (8001160 <main+0x168>)
 8001054:	4843      	ldr	r0, [pc, #268]	@ (8001164 <main+0x16c>)
 8001056:	f7ff ff45 	bl	8000ee4 <ADC_init>

  //Position PID
  PID_init(&p_pid, p_kp, p_ki, p_kd, 0.001);
 800105a:	4b43      	ldr	r3, [pc, #268]	@ (8001168 <main+0x170>)
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	4b42      	ldr	r3, [pc, #264]	@ (800116c <main+0x174>)
 8001062:	ed93 7a00 	vldr	s14, [r3]
 8001066:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <main+0x178>)
 8001068:	edd3 6a00 	vldr	s13, [r3]
 800106c:	eddf 1a41 	vldr	s3, [pc, #260]	@ 8001174 <main+0x17c>
 8001070:	eeb0 1a66 	vmov.f32	s2, s13
 8001074:	eef0 0a47 	vmov.f32	s1, s14
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	483e      	ldr	r0, [pc, #248]	@ (8001178 <main+0x180>)
 800107e:	f000 feab 	bl	8001dd8 <PID_init>
  PID_init(&v_pid, v_kp, v_ki, v_kd, 0.000125);
 8001082:	4b3e      	ldr	r3, [pc, #248]	@ (800117c <main+0x184>)
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	4b3d      	ldr	r3, [pc, #244]	@ (8001180 <main+0x188>)
 800108a:	ed93 7a00 	vldr	s14, [r3]
 800108e:	4b3d      	ldr	r3, [pc, #244]	@ (8001184 <main+0x18c>)
 8001090:	edd3 6a00 	vldr	s13, [r3]
 8001094:	eddf 1a3c 	vldr	s3, [pc, #240]	@ 8001188 <main+0x190>
 8001098:	eeb0 1a66 	vmov.f32	s2, s13
 800109c:	eef0 0a47 	vmov.f32	s1, s14
 80010a0:	eeb0 0a67 	vmov.f32	s0, s15
 80010a4:	4839      	ldr	r0, [pc, #228]	@ (800118c <main+0x194>)
 80010a6:	f000 fe97 	bl	8001dd8 <PID_init>
=======
 8001c98:	f000 fc06 	bl	80024a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c9c:	f000 fbca 	bl	8002434 <MX_DMA_Init>
  MX_TIM1_Init();
 8001ca0:	f000 f9a8 	bl	8001ff4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001ca4:	f000 fa56 	bl	8002154 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001ca8:	f000 faa2 	bl	80021f0 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001cac:	f000 f92a 	bl	8001f04 <MX_ADC1_Init>
  MX_TIM5_Init();
 8001cb0:	f000 faf4 	bl	800229c <MX_TIM5_Init>
  MX_TIM16_Init();
 8001cb4:	f000 fb40 	bl	8002338 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001cb8:	f000 fb6e 	bl	8002398 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Modbus setting
  hmodbus.huart = &huart2;
 8001cbc:	4b54      	ldr	r3, [pc, #336]	@ (8001e10 <main+0x184>)
 8001cbe:	4a55      	ldr	r2, [pc, #340]	@ (8001e14 <main+0x188>)
 8001cc0:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8001cc2:	4b53      	ldr	r3, [pc, #332]	@ (8001e10 <main+0x184>)
 8001cc4:	4a54      	ldr	r2, [pc, #336]	@ (8001e18 <main+0x18c>)
 8001cc6:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8001cc8:	4b51      	ldr	r3, [pc, #324]	@ (8001e10 <main+0x184>)
 8001cca:	2215      	movs	r2, #21
 8001ccc:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8001cce:	4b50      	ldr	r3, [pc, #320]	@ (8001e10 <main+0x184>)
 8001cd0:	22c8      	movs	r2, #200	@ 0xc8
 8001cd2:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001cd4:	4951      	ldr	r1, [pc, #324]	@ (8001e1c <main+0x190>)
 8001cd6:	484e      	ldr	r0, [pc, #312]	@ (8001e10 <main+0x184>)
 8001cd8:	f7ff fbea 	bl	80014b0 <Modbus_init>

  //Update MODBUS timer
  HAL_TIM_Base_Start_IT(&htim5);
 8001cdc:	4850      	ldr	r0, [pc, #320]	@ (8001e20 <main+0x194>)
 8001cde:	f005 fd0d 	bl	80076fc <HAL_TIM_Base_Start_IT>

  //Update command timer
  HAL_TIM_Base_Start_IT(&htim3);
 8001ce2:	4850      	ldr	r0, [pc, #320]	@ (8001e24 <main+0x198>)
 8001ce4:	f005 fd0a 	bl	80076fc <HAL_TIM_Base_Start_IT>

  //PWM generator
  HAL_TIM_Base_Start(&htim1);
 8001ce8:	484f      	ldr	r0, [pc, #316]	@ (8001e28 <main+0x19c>)
 8001cea:	f005 fc97 	bl	800761c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001cee:	2100      	movs	r1, #0
 8001cf0:	484d      	ldr	r0, [pc, #308]	@ (8001e28 <main+0x19c>)
 8001cf2:	f005 fde9 	bl	80078c8 <HAL_TIM_PWM_Start>

  //Encoder reader
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001cf6:	213c      	movs	r1, #60	@ 0x3c
 8001cf8:	484c      	ldr	r0, [pc, #304]	@ (8001e2c <main+0x1a0>)
 8001cfa:	f006 f8a1 	bl	8007e40 <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, 8192, 8000, 65536);
 8001cfe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d02:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001d06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d0a:	4849      	ldr	r0, [pc, #292]	@ (8001e30 <main+0x1a4>)
 8001d0c:	f001 f953 	bl	8002fb6 <QEI_init>

  //Current reader
  ADC_init(&hadc1, &current_sensor);
 8001d10:	4948      	ldr	r1, [pc, #288]	@ (8001e34 <main+0x1a8>)
 8001d12:	4849      	ldr	r0, [pc, #292]	@ (8001e38 <main+0x1ac>)
 8001d14:	f7ff fec0 	bl	8001a98 <ADC_init>

  //Position PID
  PID_init(&p_pid, p_kp, p_ki, p_kd, 0.001);
 8001d18:	4b48      	ldr	r3, [pc, #288]	@ (8001e3c <main+0x1b0>)
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	4b48      	ldr	r3, [pc, #288]	@ (8001e40 <main+0x1b4>)
 8001d20:	ed93 7a00 	vldr	s14, [r3]
 8001d24:	4b47      	ldr	r3, [pc, #284]	@ (8001e44 <main+0x1b8>)
 8001d26:	edd3 6a00 	vldr	s13, [r3]
 8001d2a:	eddf 1a47 	vldr	s3, [pc, #284]	@ 8001e48 <main+0x1bc>
 8001d2e:	eeb0 1a66 	vmov.f32	s2, s13
 8001d32:	eef0 0a47 	vmov.f32	s1, s14
 8001d36:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3a:	4844      	ldr	r0, [pc, #272]	@ (8001e4c <main+0x1c0>)
 8001d3c:	f000 ff36 	bl	8002bac <PID_init>
  PID_init(&v_pid, v_kp, v_ki, v_kd, 0.000125);
 8001d40:	4b43      	ldr	r3, [pc, #268]	@ (8001e50 <main+0x1c4>)
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	4b43      	ldr	r3, [pc, #268]	@ (8001e54 <main+0x1c8>)
 8001d48:	ed93 7a00 	vldr	s14, [r3]
 8001d4c:	4b42      	ldr	r3, [pc, #264]	@ (8001e58 <main+0x1cc>)
 8001d4e:	edd3 6a00 	vldr	s13, [r3]
 8001d52:	eddf 1a42 	vldr	s3, [pc, #264]	@ 8001e5c <main+0x1d0>
 8001d56:	eeb0 1a66 	vmov.f32	s2, s13
 8001d5a:	eef0 0a47 	vmov.f32	s1, s14
 8001d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d62:	483f      	ldr	r0, [pc, #252]	@ (8001e60 <main+0x1d4>)
 8001d64:	f000 ff22 	bl	8002bac <PID_init>
  while (1)
>>>>>>> Stashed changes
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
<<<<<<< Updated upstream

	  if(mode == 1){
 80010aa:	4b39      	ldr	r3, [pc, #228]	@ (8001190 <main+0x198>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d1fb      	bne.n	80010aa <main+0xb2>
		  Update_joy(&joy);
 80010b2:	4838      	ldr	r0, [pc, #224]	@ (8001194 <main+0x19c>)
 80010b4:	f7ff ff26 	bl	8000f04 <Update_joy>
		  if (!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 80010b8:	4b36      	ldr	r3, [pc, #216]	@ (8001194 <main+0x19c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d111      	bne.n	80010e4 <main+0xec>
 80010c0:	4b34      	ldr	r3, [pc, #208]	@ (8001194 <main+0x19c>)
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00d      	beq.n	80010e4 <main+0xec>
 80010c8:	4b32      	ldr	r3, [pc, #200]	@ (8001194 <main+0x19c>)
 80010ca:	789b      	ldrb	r3, [r3, #2]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d009      	beq.n	80010e4 <main+0xec>
 80010d0:	4b30      	ldr	r3, [pc, #192]	@ (8001194 <main+0x19c>)
 80010d2:	78db      	ldrb	r3, [r3, #3]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <main+0xec>
			  // switch 1 has pushed
			  jog += 20; // Move up 20 mm.
 80010d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001198 <main+0x1a0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3314      	adds	r3, #20
 80010de:	4a2e      	ldr	r2, [pc, #184]	@ (8001198 <main+0x1a0>)
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e034      	b.n	800114e <main+0x156>
		  }else if (joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 80010e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001194 <main+0x19c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d011      	beq.n	8001110 <main+0x118>
 80010ec:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <main+0x19c>)
 80010ee:	785b      	ldrb	r3, [r3, #1]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10d      	bne.n	8001110 <main+0x118>
 80010f4:	4b27      	ldr	r3, [pc, #156]	@ (8001194 <main+0x19c>)
 80010f6:	789b      	ldrb	r3, [r3, #2]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d009      	beq.n	8001110 <main+0x118>
 80010fc:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <main+0x19c>)
 80010fe:	78db      	ldrb	r3, [r3, #3]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <main+0x118>
			  // switch 2 has pushed
			  jog -= 20; // Move down 20 mm.
 8001104:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <main+0x1a0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3b14      	subs	r3, #20
 800110a:	4a23      	ldr	r2, [pc, #140]	@ (8001198 <main+0x1a0>)
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e01e      	b.n	800114e <main+0x156>
		  }else if (joy.s_1 && joy.s_2 && !joy.s_3 && joy.s_4){
 8001110:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <main+0x19c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0c8      	beq.n	80010aa <main+0xb2>
 8001118:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <main+0x19c>)
 800111a:	785b      	ldrb	r3, [r3, #1]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0c4      	beq.n	80010aa <main+0xb2>
 8001120:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <main+0x19c>)
 8001122:	789b      	ldrb	r3, [r3, #2]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1c0      	bne.n	80010aa <main+0xb2>
 8001128:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <main+0x19c>)
 800112a:	78db      	ldrb	r3, [r3, #3]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <main+0x140>
			  // switch 3 has pushed
			  mode = 0; // Change mode to Automatic
 8001130:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <main+0x198>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	e7b8      	b.n	80010aa <main+0xb2>
		  }else if (joy.s_1 && joy.s_2 && joy.s_3 && !joy.s_4){
 8001138:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <main+0x19c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0b4      	beq.n	80010aa <main+0xb2>
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <main+0x19c>)
 8001142:	785b      	ldrb	r3, [r3, #1]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0b0      	beq.n	80010aa <main+0xb2>
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <main+0x19c>)
 800114a:	789b      	ldrb	r3, [r3, #2]
 800114c:	2b00      	cmp	r3, #0
	  if(mode == 1){
 800114e:	e7ac      	b.n	80010aa <main+0xb2>
 8001150:	200001d8 	.word	0x200001d8
 8001154:	2000010c 	.word	0x2000010c
 8001158:	200002a4 	.word	0x200002a4
 800115c:	200006e8 	.word	0x200006e8
 8001160:	2000061c 	.word	0x2000061c
 8001164:	20000040 	.word	0x20000040
 8001168:	20000008 	.word	0x20000008
 800116c:	20000770 	.word	0x20000770
 8001170:	20000774 	.word	0x20000774
 8001174:	3a83126f 	.word	0x3a83126f
 8001178:	20000758 	.word	0x20000758
 800117c:	20000004 	.word	0x20000004
 8001180:	20000748 	.word	0x20000748
 8001184:	2000074c 	.word	0x2000074c
 8001188:	3903126f 	.word	0x3903126f
 800118c:	20000730 	.word	0x20000730
 8001190:	20000002 	.word	0x20000002
 8001194:	20000604 	.word	0x20000604
 8001198:	20000608 	.word	0x20000608

0800119c <SystemClock_Config>:
=======
	  if(mode == 1){
 8001d68:	4b3e      	ldr	r3, [pc, #248]	@ (8001e64 <main+0x1d8>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d1fb      	bne.n	8001d68 <main+0xdc>
		  Update_joy(&joy);
 8001d70:	483d      	ldr	r0, [pc, #244]	@ (8001e68 <main+0x1dc>)
 8001d72:	f7ff ff11 	bl	8001b98 <Update_joy>
		  if (!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 8001d76:	4b3c      	ldr	r3, [pc, #240]	@ (8001e68 <main+0x1dc>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d111      	bne.n	8001da2 <main+0x116>
 8001d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e68 <main+0x1dc>)
 8001d80:	785b      	ldrb	r3, [r3, #1]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00d      	beq.n	8001da2 <main+0x116>
 8001d86:	4b38      	ldr	r3, [pc, #224]	@ (8001e68 <main+0x1dc>)
 8001d88:	789b      	ldrb	r3, [r3, #2]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <main+0x116>
 8001d8e:	4b36      	ldr	r3, [pc, #216]	@ (8001e68 <main+0x1dc>)
 8001d90:	78db      	ldrb	r3, [r3, #3]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <main+0x116>
			  // switch 1 has pushed
			  jog += 10; // Move up 10 mm.
 8001d96:	4b35      	ldr	r3, [pc, #212]	@ (8001e6c <main+0x1e0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	330a      	adds	r3, #10
 8001d9c:	4a33      	ldr	r2, [pc, #204]	@ (8001e6c <main+0x1e0>)
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	e034      	b.n	8001e0c <main+0x180>
		  }else if (joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 8001da2:	4b31      	ldr	r3, [pc, #196]	@ (8001e68 <main+0x1dc>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d011      	beq.n	8001dce <main+0x142>
 8001daa:	4b2f      	ldr	r3, [pc, #188]	@ (8001e68 <main+0x1dc>)
 8001dac:	785b      	ldrb	r3, [r3, #1]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10d      	bne.n	8001dce <main+0x142>
 8001db2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e68 <main+0x1dc>)
 8001db4:	789b      	ldrb	r3, [r3, #2]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <main+0x142>
 8001dba:	4b2b      	ldr	r3, [pc, #172]	@ (8001e68 <main+0x1dc>)
 8001dbc:	78db      	ldrb	r3, [r3, #3]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <main+0x142>
			  // switch 2 has pushed
			  jog -= 10; // Move down 10 mm.
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e6c <main+0x1e0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3b0a      	subs	r3, #10
 8001dc8:	4a28      	ldr	r2, [pc, #160]	@ (8001e6c <main+0x1e0>)
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	e01e      	b.n	8001e0c <main+0x180>
		  }else if (joy.s_1 && joy.s_2 && !joy.s_3 && joy.s_4){
 8001dce:	4b26      	ldr	r3, [pc, #152]	@ (8001e68 <main+0x1dc>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0c8      	beq.n	8001d68 <main+0xdc>
 8001dd6:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <main+0x1dc>)
 8001dd8:	785b      	ldrb	r3, [r3, #1]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0c4      	beq.n	8001d68 <main+0xdc>
 8001dde:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <main+0x1dc>)
 8001de0:	789b      	ldrb	r3, [r3, #2]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1c0      	bne.n	8001d68 <main+0xdc>
 8001de6:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <main+0x1dc>)
 8001de8:	78db      	ldrb	r3, [r3, #3]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <main+0x16a>
			  // switch 3 has pushed
			  mode = 0; // Change mode to Automatic
 8001dee:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <main+0x1d8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	e7b8      	b.n	8001d68 <main+0xdc>
		  }else if (joy.s_1 && joy.s_2 && joy.s_3 && !joy.s_4){
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <main+0x1dc>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0b4      	beq.n	8001d68 <main+0xdc>
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <main+0x1dc>)
 8001e00:	785b      	ldrb	r3, [r3, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0b0      	beq.n	8001d68 <main+0xdc>
 8001e06:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <main+0x1dc>)
 8001e08:	789b      	ldrb	r3, [r3, #2]
 8001e0a:	2b00      	cmp	r3, #0
	  if(mode == 1){
 8001e0c:	e7ac      	b.n	8001d68 <main+0xdc>
 8001e0e:	bf00      	nop
 8001e10:	200002bc 	.word	0x200002bc
 8001e14:	20000c68 	.word	0x20000c68
 8001e18:	20000b9c 	.word	0x20000b9c
 8001e1c:	20000e0c 	.word	0x20000e0c
 8001e20:	20000ad0 	.word	0x20000ad0
 8001e24:	20000938 	.word	0x20000938
 8001e28:	2000086c 	.word	0x2000086c
 8001e2c:	20000a04 	.word	0x20000a04
 8001e30:	20001088 	.word	0x20001088
 8001e34:	20000fb8 	.word	0x20000fb8
 8001e38:	200007a0 	.word	0x200007a0
 8001e3c:	20000270 	.word	0x20000270
 8001e40:	20001120 	.word	0x20001120
 8001e44:	20001124 	.word	0x20001124
 8001e48:	3a83126f 	.word	0x3a83126f
 8001e4c:	20001108 	.word	0x20001108
 8001e50:	2000026c 	.word	0x2000026c
 8001e54:	200010f8 	.word	0x200010f8
 8001e58:	200010fc 	.word	0x200010fc
 8001e5c:	3903126f 	.word	0x3903126f
 8001e60:	200010e0 	.word	0x200010e0
 8001e64:	20000fb4 	.word	0x20000fb4
 8001e68:	20000f9c 	.word	0x20000f9c
 8001e6c:	20000fa0 	.word	0x20000fa0

08001e70 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 800119c:	b580      	push	{r7, lr}
 800119e:	b094      	sub	sp, #80	@ 0x50
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	2238      	movs	r2, #56	@ 0x38
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f008 fa50 	bl	8009650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]
=======
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b094      	sub	sp, #80	@ 0x50
 8001e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e76:	f107 0318 	add.w	r3, r7, #24
 8001e7a:	2238      	movs	r2, #56	@ 0x38
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f009 fb4e 	bl	800b520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
<<<<<<< Updated upstream
 80011be:	2000      	movs	r0, #0
 80011c0:	f004 f84e 	bl	8005260 <HAL_PWREx_ControlVoltageScaling>
=======
 8001e92:	2000      	movs	r0, #0
 8001e94:	f004 fb2e 	bl	80064f4 <HAL_PWREx_ControlVoltageScaling>
>>>>>>> Stashed changes

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< Updated upstream
 80011c4:	2301      	movs	r3, #1
 80011c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011cc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ce:	2302      	movs	r3, #2
 80011d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d2:	2303      	movs	r3, #3
 80011d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80011d6:	2306      	movs	r3, #6
 80011d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011da:	2355      	movs	r3, #85	@ 0x55
 80011dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011de:	2302      	movs	r3, #2
 80011e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	4618      	mov	r0, r3
 80011f0:	f004 f8ea 	bl	80053c8 <HAL_RCC_OscConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x62>
  {
    Error_Handler();
 80011fa:	f000 fde7 	bl	8001dcc <Error_Handler>
=======
 8001e98:	2301      	movs	r3, #1
 8001e9a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ea0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001eaa:	2306      	movs	r3, #6
 8001eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001eae:	2355      	movs	r3, #85	@ 0x55
 8001eb0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ebe:	f107 0318 	add.w	r3, r7, #24
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f004 fbca 	bl	800665c <HAL_RCC_OscConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001ece:	f000 fe67 	bl	8002ba0 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
 80011fe:	230f      	movs	r3, #15
 8001200:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001202:	2303      	movs	r3, #3
 8001204:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2104      	movs	r1, #4
 8001216:	4618      	mov	r0, r3
 8001218:	f004 fbe8 	bl	80059ec <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001222:	f000 fdd3 	bl	8001dcc <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3750      	adds	r7, #80	@ 0x50
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <MX_ADC1_Init>:
=======
 8001ed2:	230f      	movs	r3, #15
 8001ed4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	2104      	movs	r1, #4
 8001eea:	4618      	mov	r0, r3
 8001eec:	f004 fec8 	bl	8006c80 <HAL_RCC_ClockConfig>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001ef6:	f000 fe53 	bl	8002ba0 <Error_Handler>
  }
}
 8001efa:	bf00      	nop
 8001efc:	3750      	adds	r7, #80	@ 0x50
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <MX_ADC1_Init>:
>>>>>>> Stashed changes
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
<<<<<<< Updated upstream
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	@ 0x30
 8001234:	af00      	add	r7, sp, #0
=======
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	@ 0x30
 8001f08:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
<<<<<<< Updated upstream
 8001236:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2220      	movs	r2, #32
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f008 fa01 	bl	8009650 <memset>
=======
 8001f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2220      	movs	r2, #32
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f009 faff 	bl	800b520 <memset>
>>>>>>> Stashed changes

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
<<<<<<< Updated upstream
 800124e:	4b32      	ldr	r3, [pc, #200]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001250:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001254:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001256:	4b30      	ldr	r3, [pc, #192]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001258:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800125c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800125e:	4b2e      	ldr	r3, [pc, #184]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001264:	4b2c      	ldr	r3, [pc, #176]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800126a:	4b2b      	ldr	r3, [pc, #172]	@ (8001318 <MX_ADC1_Init+0xe8>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001270:	4b29      	ldr	r3, [pc, #164]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001276:	4b28      	ldr	r3, [pc, #160]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001278:	2204      	movs	r2, #4
 800127a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800127c:	4b26      	ldr	r3, [pc, #152]	@ (8001318 <MX_ADC1_Init+0xe8>)
 800127e:	2200      	movs	r2, #0
 8001280:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001282:	4b25      	ldr	r3, [pc, #148]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001284:	2201      	movs	r2, #1
 8001286:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001288:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <MX_ADC1_Init+0xe8>)
 800128a:	2201      	movs	r2, #1
 800128c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128e:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001298:	2200      	movs	r2, #0
 800129a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800129c:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <MX_ADC1_Init+0xe8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <MX_ADC1_Init+0xe8>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <MX_ADC1_Init+0xe8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <MX_ADC1_Init+0xe8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b8:	4817      	ldr	r0, [pc, #92]	@ (8001318 <MX_ADC1_Init+0xe8>)
 80012ba:	f001 fde3 	bl	8002e84 <HAL_ADC_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80012c4:	f000 fd82 	bl	8001dcc <Error_Handler>
=======
 8001f22:	4b32      	ldr	r3, [pc, #200]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f24:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001f28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f2a:	4b30      	ldr	r3, [pc, #192]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f2c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001f30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f32:	4b2e      	ldr	r3, [pc, #184]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f38:	4b2c      	ldr	r3, [pc, #176]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f44:	4b29      	ldr	r3, [pc, #164]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f4a:	4b28      	ldr	r3, [pc, #160]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f50:	4b26      	ldr	r3, [pc, #152]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f56:	4b25      	ldr	r3, [pc, #148]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001f5c:	4b23      	ldr	r3, [pc, #140]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f62:	4b22      	ldr	r3, [pc, #136]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f6a:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f70:	4b1e      	ldr	r3, [pc, #120]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f76:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001f84:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f8c:	4817      	ldr	r0, [pc, #92]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001f8e:	f002 f8c3 	bl	8004118 <HAL_ADC_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001f98:	f000 fe02 	bl	8002ba0 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
<<<<<<< Updated upstream
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	4811      	ldr	r0, [pc, #68]	@ (8001318 <MX_ADC1_Init+0xe8>)
 80012d4:	f003 f8b0 	bl	8004438 <HAL_ADCEx_MultiModeConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80012de:	f000 fd75 	bl	8001dcc <Error_Handler>
=======
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001fa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4811      	ldr	r0, [pc, #68]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001fa8:	f003 fb90 	bl	80056cc <HAL_ADCEx_MultiModeConfigChannel>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001fb2:	f000 fdf5 	bl	8002ba0 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
<<<<<<< Updated upstream
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <MX_ADC1_Init+0xec>)
 80012e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e6:	2306      	movs	r3, #6
 80012e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012ee:	237f      	movs	r3, #127	@ 0x7f
 80012f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012f2:	2304      	movs	r3, #4
 80012f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	4619      	mov	r1, r3
 80012fe:	4806      	ldr	r0, [pc, #24]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001300:	f002 fad8 	bl	80038b4 <HAL_ADC_ConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800130a:	f000 fd5f 	bl	8001dcc <Error_Handler>
=======
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <MX_ADC1_Init+0xec>)
 8001fb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fba:	2306      	movs	r3, #6
 8001fbc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001fc2:	237f      	movs	r3, #127	@ 0x7f
 8001fc4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4806      	ldr	r0, [pc, #24]	@ (8001fec <MX_ADC1_Init+0xe8>)
 8001fd4:	f002 fdb8 	bl	8004b48 <HAL_ADC_ConfigChannel>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001fde:	f000 fddf 	bl	8002ba0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< Updated upstream
 800130e:	bf00      	nop
 8001310:	3730      	adds	r7, #48	@ 0x30
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000040 	.word	0x20000040
 800131c:	04300002 	.word	0x04300002

08001320 <MX_TIM1_Init>:
=======
 8001fe2:	bf00      	nop
 8001fe4:	3730      	adds	r7, #48	@ 0x30
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200007a0 	.word	0x200007a0
 8001ff0:	04300002 	.word	0x04300002

08001ff4 <MX_TIM1_Init>:
>>>>>>> Stashed changes
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
<<<<<<< Updated upstream
 8001320:	b580      	push	{r7, lr}
 8001322:	b09c      	sub	sp, #112	@ 0x70
 8001324:	af00      	add	r7, sp, #0
=======
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b09c      	sub	sp, #112	@ 0x70
 8001ff8:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< Updated upstream
 8001326:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001340:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
 8001350:	615a      	str	r2, [r3, #20]
 8001352:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2234      	movs	r2, #52	@ 0x34
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f008 f978 	bl	8009650 <memset>
=======
 8001ffa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002008:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002014:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
 8002024:	615a      	str	r2, [r3, #20]
 8002026:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	2234      	movs	r2, #52	@ 0x34
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f009 fa76 	bl	800b520 <memset>
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< Updated upstream
 8001360:	4b45      	ldr	r3, [pc, #276]	@ (8001478 <MX_TIM1_Init+0x158>)
 8001362:	4a46      	ldr	r2, [pc, #280]	@ (800147c <MX_TIM1_Init+0x15c>)
 8001364:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001366:	4b44      	ldr	r3, [pc, #272]	@ (8001478 <MX_TIM1_Init+0x158>)
 8001368:	22a9      	movs	r2, #169	@ 0xa9
 800136a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b42      	ldr	r3, [pc, #264]	@ (8001478 <MX_TIM1_Init+0x158>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001372:	4b41      	ldr	r3, [pc, #260]	@ (8001478 <MX_TIM1_Init+0x158>)
 8001374:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001378:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b3f      	ldr	r3, [pc, #252]	@ (8001478 <MX_TIM1_Init+0x158>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001380:	4b3d      	ldr	r3, [pc, #244]	@ (8001478 <MX_TIM1_Init+0x158>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b3c      	ldr	r3, [pc, #240]	@ (8001478 <MX_TIM1_Init+0x158>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800138c:	483a      	ldr	r0, [pc, #232]	@ (8001478 <MX_TIM1_Init+0x158>)
 800138e:	f004 ff97 	bl	80062c0 <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001398:	f000 fd18 	bl	8001dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013a6:	4619      	mov	r1, r3
 80013a8:	4833      	ldr	r0, [pc, #204]	@ (8001478 <MX_TIM1_Init+0x158>)
 80013aa:	f005 fe8d 	bl	80070c8 <HAL_TIM_ConfigClockSource>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013b4:	f000 fd0a 	bl	8001dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013b8:	482f      	ldr	r0, [pc, #188]	@ (8001478 <MX_TIM1_Init+0x158>)
 80013ba:	f005 f8cd 	bl	8006558 <HAL_TIM_PWM_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013c4:	f000 fd02 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013d8:	4619      	mov	r1, r3
 80013da:	4827      	ldr	r0, [pc, #156]	@ (8001478 <MX_TIM1_Init+0x158>)
 80013dc:	f006 fcfa 	bl	8007dd4 <HAL_TIMEx_MasterConfigSynchronization>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013e6:	f000 fcf1 	bl	8001dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ea:	2360      	movs	r3, #96	@ 0x60
 80013ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f2:	2300      	movs	r3, #0
 80013f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013f6:	2300      	movs	r3, #0
 80013f8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013fa:	2304      	movs	r3, #4
 80013fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001406:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800140a:	2200      	movs	r2, #0
 800140c:	4619      	mov	r1, r3
 800140e:	481a      	ldr	r0, [pc, #104]	@ (8001478 <MX_TIM1_Init+0x158>)
 8001410:	f005 fd46 	bl	8006ea0 <HAL_TIM_PWM_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800141a:	f000 fcd7 	bl	8001dcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001432:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001436:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001444:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001448:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4619      	mov	r1, r3
 800145a:	4807      	ldr	r0, [pc, #28]	@ (8001478 <MX_TIM1_Init+0x158>)
 800145c:	f006 fd50 	bl	8007f00 <HAL_TIMEx_ConfigBreakDeadTime>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001466:	f000 fcb1 	bl	8001dcc <Error_Handler>
=======
 8002034:	4b45      	ldr	r3, [pc, #276]	@ (800214c <MX_TIM1_Init+0x158>)
 8002036:	4a46      	ldr	r2, [pc, #280]	@ (8002150 <MX_TIM1_Init+0x15c>)
 8002038:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800203a:	4b44      	ldr	r3, [pc, #272]	@ (800214c <MX_TIM1_Init+0x158>)
 800203c:	22a9      	movs	r2, #169	@ 0xa9
 800203e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002040:	4b42      	ldr	r3, [pc, #264]	@ (800214c <MX_TIM1_Init+0x158>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002046:	4b41      	ldr	r3, [pc, #260]	@ (800214c <MX_TIM1_Init+0x158>)
 8002048:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800204c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204e:	4b3f      	ldr	r3, [pc, #252]	@ (800214c <MX_TIM1_Init+0x158>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002054:	4b3d      	ldr	r3, [pc, #244]	@ (800214c <MX_TIM1_Init+0x158>)
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205a:	4b3c      	ldr	r3, [pc, #240]	@ (800214c <MX_TIM1_Init+0x158>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002060:	483a      	ldr	r0, [pc, #232]	@ (800214c <MX_TIM1_Init+0x158>)
 8002062:	f005 fa77 	bl	8007554 <HAL_TIM_Base_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800206c:	f000 fd98 	bl	8002ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002070:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002074:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002076:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800207a:	4619      	mov	r1, r3
 800207c:	4833      	ldr	r0, [pc, #204]	@ (800214c <MX_TIM1_Init+0x158>)
 800207e:	f006 f9fb 	bl	8008478 <HAL_TIM_ConfigClockSource>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002088:	f000 fd8a 	bl	8002ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800208c:	482f      	ldr	r0, [pc, #188]	@ (800214c <MX_TIM1_Init+0x158>)
 800208e:	f005 fbad 	bl	80077ec <HAL_TIM_PWM_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002098:	f000 fd82 	bl	8002ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020ac:	4619      	mov	r1, r3
 80020ae:	4827      	ldr	r0, [pc, #156]	@ (800214c <MX_TIM1_Init+0x158>)
 80020b0:	f007 f9c8 	bl	8009444 <HAL_TIMEx_MasterConfigSynchronization>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80020ba:	f000 fd71 	bl	8002ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020be:	2360      	movs	r3, #96	@ 0x60
 80020c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020c6:	2300      	movs	r3, #0
 80020c8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020ca:	2300      	movs	r3, #0
 80020cc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80020ce:	2304      	movs	r3, #4
 80020d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020de:	2200      	movs	r2, #0
 80020e0:	4619      	mov	r1, r3
 80020e2:	481a      	ldr	r0, [pc, #104]	@ (800214c <MX_TIM1_Init+0x158>)
 80020e4:	f006 f8b4 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80020ee:	f000 fd57 	bl	8002ba0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002106:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800210a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002110:	2300      	movs	r3, #0
 8002112:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002118:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800211c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002122:	2300      	movs	r3, #0
 8002124:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	4619      	mov	r1, r3
 800212e:	4807      	ldr	r0, [pc, #28]	@ (800214c <MX_TIM1_Init+0x158>)
 8002130:	f007 fa1e 	bl	8009570 <HAL_TIMEx_ConfigBreakDeadTime>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800213a:	f000 fd31 	bl	8002ba0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
<<<<<<< Updated upstream
 800146a:	4803      	ldr	r0, [pc, #12]	@ (8001478 <MX_TIM1_Init+0x158>)
 800146c:	f001 f896 	bl	800259c <HAL_TIM_MspPostInit>

}
 8001470:	bf00      	nop
 8001472:	3770      	adds	r7, #112	@ 0x70
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	2000010c 	.word	0x2000010c
 800147c:	40012c00 	.word	0x40012c00

08001480 <MX_TIM3_Init>:
=======
 800213e:	4803      	ldr	r0, [pc, #12]	@ (800214c <MX_TIM1_Init+0x158>)
 8002140:	f001 fb6c 	bl	800381c <HAL_TIM_MspPostInit>

}
 8002144:	bf00      	nop
 8002146:	3770      	adds	r7, #112	@ 0x70
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	2000086c 	.word	0x2000086c
 8002150:	40012c00 	.word	0x40012c00

08002154 <MX_TIM3_Init>:
>>>>>>> Stashed changes
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
<<<<<<< Updated upstream
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
=======
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< Updated upstream
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
=======
 800215a:	f107 0310 	add.w	r3, r7, #16
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< Updated upstream
 800149e:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001518 <MX_TIM3_Init+0x98>)
 80014a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014a6:	22a9      	movs	r2, #169	@ 0xa9
 80014a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80014b0:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014b2:	2263      	movs	r2, #99	@ 0x63
 80014b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014c2:	4814      	ldr	r0, [pc, #80]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014c4:	f004 fefc 	bl	80062c0 <HAL_TIM_Base_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014ce:	f000 fc7d 	bl	8001dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4619      	mov	r1, r3
 80014de:	480d      	ldr	r0, [pc, #52]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014e0:	f005 fdf2 	bl	80070c8 <HAL_TIM_ConfigClockSource>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f000 fc6f 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014fc:	f006 fc6a 	bl	8007dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001506:	f000 fc61 	bl	8001dcc <Error_Handler>
=======
 8002172:	4b1d      	ldr	r3, [pc, #116]	@ (80021e8 <MX_TIM3_Init+0x94>)
 8002174:	4a1d      	ldr	r2, [pc, #116]	@ (80021ec <MX_TIM3_Init+0x98>)
 8002176:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8002178:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <MX_TIM3_Init+0x94>)
 800217a:	22a9      	movs	r2, #169	@ 0xa9
 800217c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217e:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <MX_TIM3_Init+0x94>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002184:	4b18      	ldr	r3, [pc, #96]	@ (80021e8 <MX_TIM3_Init+0x94>)
 8002186:	2263      	movs	r2, #99	@ 0x63
 8002188:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218a:	4b17      	ldr	r3, [pc, #92]	@ (80021e8 <MX_TIM3_Init+0x94>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002190:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <MX_TIM3_Init+0x94>)
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002196:	4814      	ldr	r0, [pc, #80]	@ (80021e8 <MX_TIM3_Init+0x94>)
 8002198:	f005 f9dc 	bl	8007554 <HAL_TIM_Base_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80021a2:	f000 fcfd 	bl	8002ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021ac:	f107 0310 	add.w	r3, r7, #16
 80021b0:	4619      	mov	r1, r3
 80021b2:	480d      	ldr	r0, [pc, #52]	@ (80021e8 <MX_TIM3_Init+0x94>)
 80021b4:	f006 f960 	bl	8008478 <HAL_TIM_ConfigClockSource>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80021be:	f000 fcef 	bl	8002ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4806      	ldr	r0, [pc, #24]	@ (80021e8 <MX_TIM3_Init+0x94>)
 80021d0:	f007 f938 	bl	8009444 <HAL_TIMEx_MasterConfigSynchronization>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80021da:	f000 fce1 	bl	8002ba0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
<<<<<<< Updated upstream
 800150a:	bf00      	nop
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200001d8 	.word	0x200001d8
 8001518:	40000400 	.word	0x40000400

0800151c <MX_TIM4_Init>:
=======
 80021de:	bf00      	nop
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000938 	.word	0x20000938
 80021ec:	40000400 	.word	0x40000400

080021f0 <MX_TIM4_Init>:
>>>>>>> Stashed changes
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
<<<<<<< Updated upstream
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	@ 0x30
 8001520:	af00      	add	r7, sp, #0
=======
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08c      	sub	sp, #48	@ 0x30
 80021f4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
<<<<<<< Updated upstream
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2224      	movs	r2, #36	@ 0x24
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f008 f890 	bl	8009650 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	463b      	mov	r3, r7
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
=======
 80021f6:	f107 030c 	add.w	r3, r7, #12
 80021fa:	2224      	movs	r2, #36	@ 0x24
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f009 f98e 	bl	800b520 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002204:	463b      	mov	r3, r7
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
<<<<<<< Updated upstream
 800153a:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 800153c:	4a21      	ldr	r2, [pc, #132]	@ (80015c4 <MX_TIM4_Init+0xa8>)
 800153e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001540:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800154c:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 800154e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001552:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001560:	2303      	movs	r3, #3
 8001562:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001568:	2301      	movs	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001578:	2301      	movs	r3, #1
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	4619      	mov	r1, r3
 800158a:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 800158c:	f005 f9cc 	bl	8006928 <HAL_TIM_Encoder_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001596:	f000 fc19 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015a2:	463b      	mov	r3, r7
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 80015a8:	f006 fc14 	bl	8007dd4 <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80015b2:	f000 fc0b 	bl	8001dcc <Error_Handler>
=======
 800220e:	4b21      	ldr	r3, [pc, #132]	@ (8002294 <MX_TIM4_Init+0xa4>)
 8002210:	4a21      	ldr	r2, [pc, #132]	@ (8002298 <MX_TIM4_Init+0xa8>)
 8002212:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002214:	4b1f      	ldr	r3, [pc, #124]	@ (8002294 <MX_TIM4_Init+0xa4>)
 8002216:	2200      	movs	r2, #0
 8002218:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221a:	4b1e      	ldr	r3, [pc, #120]	@ (8002294 <MX_TIM4_Init+0xa4>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002220:	4b1c      	ldr	r3, [pc, #112]	@ (8002294 <MX_TIM4_Init+0xa4>)
 8002222:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002226:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002228:	4b1a      	ldr	r3, [pc, #104]	@ (8002294 <MX_TIM4_Init+0xa4>)
 800222a:	2200      	movs	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222e:	4b19      	ldr	r3, [pc, #100]	@ (8002294 <MX_TIM4_Init+0xa4>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002234:	2303      	movs	r3, #3
 8002236:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800223c:	2301      	movs	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800224c:	2301      	movs	r3, #1
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002250:	2300      	movs	r3, #0
 8002252:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	4619      	mov	r1, r3
 800225e:	480d      	ldr	r0, [pc, #52]	@ (8002294 <MX_TIM4_Init+0xa4>)
 8002260:	f005 fd3a 	bl	8007cd8 <HAL_TIM_Encoder_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800226a:	f000 fc99 	bl	8002ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002276:	463b      	mov	r3, r7
 8002278:	4619      	mov	r1, r3
 800227a:	4806      	ldr	r0, [pc, #24]	@ (8002294 <MX_TIM4_Init+0xa4>)
 800227c:	f007 f8e2 	bl	8009444 <HAL_TIMEx_MasterConfigSynchronization>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002286:	f000 fc8b 	bl	8002ba0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
<<<<<<< Updated upstream
 80015b6:	bf00      	nop
 80015b8:	3730      	adds	r7, #48	@ 0x30
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200002a4 	.word	0x200002a4
 80015c4:	40000800 	.word	0x40000800

080015c8 <MX_TIM16_Init>:
=======
 800228a:	bf00      	nop
 800228c:	3730      	adds	r7, #48	@ 0x30
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000a04 	.word	0x20000a04
 8002298:	40000800 	.word	0x40000800

0800229c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a2:	f107 0310 	add.w	r3, r7, #16
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002330 <MX_TIM5_Init+0x94>)
 80022bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002334 <MX_TIM5_Init+0x98>)
 80022be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <MX_TIM5_Init+0x94>)
 80022c2:	22a9      	movs	r2, #169	@ 0xa9
 80022c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002330 <MX_TIM5_Init+0x94>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 80022cc:	4b18      	ldr	r3, [pc, #96]	@ (8002330 <MX_TIM5_Init+0x94>)
 80022ce:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80022d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d4:	4b16      	ldr	r3, [pc, #88]	@ (8002330 <MX_TIM5_Init+0x94>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022da:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <MX_TIM5_Init+0x94>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022e0:	4813      	ldr	r0, [pc, #76]	@ (8002330 <MX_TIM5_Init+0x94>)
 80022e2:	f005 f937 	bl	8007554 <HAL_TIM_Base_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80022ec:	f000 fc58 	bl	8002ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022f6:	f107 0310 	add.w	r3, r7, #16
 80022fa:	4619      	mov	r1, r3
 80022fc:	480c      	ldr	r0, [pc, #48]	@ (8002330 <MX_TIM5_Init+0x94>)
 80022fe:	f006 f8bb 	bl	8008478 <HAL_TIM_ConfigClockSource>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002308:	f000 fc4a 	bl	8002ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230c:	2300      	movs	r3, #0
 800230e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	4619      	mov	r1, r3
 8002318:	4805      	ldr	r0, [pc, #20]	@ (8002330 <MX_TIM5_Init+0x94>)
 800231a:	f007 f893 	bl	8009444 <HAL_TIMEx_MasterConfigSynchronization>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002324:	f000 fc3c 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002328:	bf00      	nop
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000ad0 	.word	0x20000ad0
 8002334:	40000c00 	.word	0x40000c00

08002338 <MX_TIM16_Init>:
>>>>>>> Stashed changes
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
<<<<<<< Updated upstream
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
=======
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
<<<<<<< Updated upstream
 80015cc:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015ce:	4a15      	ldr	r2, [pc, #84]	@ (8001624 <MX_TIM16_Init+0x5c>)
 80015d0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80015d2:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015d4:	22a9      	movs	r2, #169	@ 0xa9
 80015d6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015e0:	f240 4279 	movw	r2, #1145	@ 0x479
 80015e4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80015f8:	4809      	ldr	r0, [pc, #36]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015fa:	f004 fe61 	bl	80062c0 <HAL_TIM_Base_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001604:	f000 fbe2 	bl	8001dcc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001608:	2108      	movs	r1, #8
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_TIM16_Init+0x58>)
 800160c:	f005 f924 	bl	8006858 <HAL_TIM_OnePulse_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001616:	f000 fbd9 	bl	8001dcc <Error_Handler>
=======
 800233c:	4b14      	ldr	r3, [pc, #80]	@ (8002390 <MX_TIM16_Init+0x58>)
 800233e:	4a15      	ldr	r2, [pc, #84]	@ (8002394 <MX_TIM16_Init+0x5c>)
 8002340:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002342:	4b13      	ldr	r3, [pc, #76]	@ (8002390 <MX_TIM16_Init+0x58>)
 8002344:	22a9      	movs	r2, #169	@ 0xa9
 8002346:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002348:	4b11      	ldr	r3, [pc, #68]	@ (8002390 <MX_TIM16_Init+0x58>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800234e:	4b10      	ldr	r3, [pc, #64]	@ (8002390 <MX_TIM16_Init+0x58>)
 8002350:	f240 4279 	movw	r2, #1145	@ 0x479
 8002354:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002356:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <MX_TIM16_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800235c:	4b0c      	ldr	r3, [pc, #48]	@ (8002390 <MX_TIM16_Init+0x58>)
 800235e:	2200      	movs	r2, #0
 8002360:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002362:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <MX_TIM16_Init+0x58>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002368:	4809      	ldr	r0, [pc, #36]	@ (8002390 <MX_TIM16_Init+0x58>)
 800236a:	f005 f8f3 	bl	8007554 <HAL_TIM_Base_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002374:	f000 fc14 	bl	8002ba0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002378:	2108      	movs	r1, #8
 800237a:	4805      	ldr	r0, [pc, #20]	@ (8002390 <MX_TIM16_Init+0x58>)
 800237c:	f005 fbb6 	bl	8007aec <HAL_TIM_OnePulse_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002386:	f000 fc0b 	bl	8002ba0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
<<<<<<< Updated upstream
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000370 	.word	0x20000370
 8001624:	40014400 	.word	0x40014400

08001628 <MX_USART2_UART_Init>:
=======
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000b9c 	.word	0x20000b9c
 8002394:	40014400 	.word	0x40014400

08002398 <MX_USART2_UART_Init>:
>>>>>>> Stashed changes
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
<<<<<<< Updated upstream
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
=======
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< Updated upstream
 800162c:	4b23      	ldr	r3, [pc, #140]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 800162e:	4a24      	ldr	r2, [pc, #144]	@ (80016c0 <MX_USART2_UART_Init+0x98>)
 8001630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001632:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001634:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800163a:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 800163c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001640:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001642:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001648:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 800164a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800164e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001668:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166e:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001670:	2200      	movs	r2, #0
 8001672:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001674:	4811      	ldr	r0, [pc, #68]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001676:	f006 fd27 	bl	80080c8 <HAL_UART_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001680:	f000 fba4 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001684:	2100      	movs	r1, #0
 8001686:	480d      	ldr	r0, [pc, #52]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001688:	f007 ff17 	bl	80094ba <HAL_UARTEx_SetTxFifoThreshold>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001692:	f000 fb9b 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001696:	2100      	movs	r1, #0
 8001698:	4808      	ldr	r0, [pc, #32]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 800169a:	f007 ff4c 	bl	8009536 <HAL_UARTEx_SetRxFifoThreshold>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80016a4:	f000 fb92 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 80016aa:	f007 fecd 	bl	8009448 <HAL_UARTEx_DisableFifoMode>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80016b4:	f000 fb8a 	bl	8001dcc <Error_Handler>
=======
 800239c:	4b23      	ldr	r3, [pc, #140]	@ (800242c <MX_USART2_UART_Init+0x94>)
 800239e:	4a24      	ldr	r2, [pc, #144]	@ (8002430 <MX_USART2_UART_Init+0x98>)
 80023a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80023a2:	4b22      	ldr	r3, [pc, #136]	@ (800242c <MX_USART2_UART_Init+0x94>)
 80023a4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80023a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80023aa:	4b20      	ldr	r3, [pc, #128]	@ (800242c <MX_USART2_UART_Init+0x94>)
 80023ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023b0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023b2:	4b1e      	ldr	r3, [pc, #120]	@ (800242c <MX_USART2_UART_Init+0x94>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80023b8:	4b1c      	ldr	r3, [pc, #112]	@ (800242c <MX_USART2_UART_Init+0x94>)
 80023ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023c0:	4b1a      	ldr	r3, [pc, #104]	@ (800242c <MX_USART2_UART_Init+0x94>)
 80023c2:	220c      	movs	r2, #12
 80023c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c6:	4b19      	ldr	r3, [pc, #100]	@ (800242c <MX_USART2_UART_Init+0x94>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023cc:	4b17      	ldr	r3, [pc, #92]	@ (800242c <MX_USART2_UART_Init+0x94>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023d2:	4b16      	ldr	r3, [pc, #88]	@ (800242c <MX_USART2_UART_Init+0x94>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023d8:	4b14      	ldr	r3, [pc, #80]	@ (800242c <MX_USART2_UART_Init+0x94>)
 80023da:	2200      	movs	r2, #0
 80023dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023de:	4b13      	ldr	r3, [pc, #76]	@ (800242c <MX_USART2_UART_Init+0x94>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023e4:	4811      	ldr	r0, [pc, #68]	@ (800242c <MX_USART2_UART_Init+0x94>)
 80023e6:	f007 f9a7 	bl	8009738 <HAL_UART_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80023f0:	f000 fbd6 	bl	8002ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023f4:	2100      	movs	r1, #0
 80023f6:	480d      	ldr	r0, [pc, #52]	@ (800242c <MX_USART2_UART_Init+0x94>)
 80023f8:	f008 ffc7 	bl	800b38a <HAL_UARTEx_SetTxFifoThreshold>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002402:	f000 fbcd 	bl	8002ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002406:	2100      	movs	r1, #0
 8002408:	4808      	ldr	r0, [pc, #32]	@ (800242c <MX_USART2_UART_Init+0x94>)
 800240a:	f008 fffc 	bl	800b406 <HAL_UARTEx_SetRxFifoThreshold>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002414:	f000 fbc4 	bl	8002ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002418:	4804      	ldr	r0, [pc, #16]	@ (800242c <MX_USART2_UART_Init+0x94>)
 800241a:	f008 ff7d 	bl	800b318 <HAL_UARTEx_DisableFifoMode>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002424:	f000 fbbc 	bl	8002ba0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< Updated upstream
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2000043c 	.word	0x2000043c
 80016c0:	40004400 	.word	0x40004400

080016c4 <MX_DMA_Init>:
=======
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000c68 	.word	0x20000c68
 8002430:	40004400 	.word	0x40004400

08002434 <MX_DMA_Init>:
>>>>>>> Stashed changes

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
<<<<<<< Updated upstream
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <MX_DMA_Init+0x70>)
 80016cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ce:	4a19      	ldr	r2, [pc, #100]	@ (8001734 <MX_DMA_Init+0x70>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <MX_DMA_Init+0x70>)
 80016d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016e2:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <MX_DMA_Init+0x70>)
 80016e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e6:	4a13      	ldr	r2, [pc, #76]	@ (8001734 <MX_DMA_Init+0x70>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <MX_DMA_Init+0x70>)
 80016f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
=======
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800243a:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <MX_DMA_Init+0x70>)
 800243c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243e:	4a19      	ldr	r2, [pc, #100]	@ (80024a4 <MX_DMA_Init+0x70>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	6493      	str	r3, [r2, #72]	@ 0x48
 8002446:	4b17      	ldr	r3, [pc, #92]	@ (80024a4 <MX_DMA_Init+0x70>)
 8002448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002452:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <MX_DMA_Init+0x70>)
 8002454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002456:	4a13      	ldr	r2, [pc, #76]	@ (80024a4 <MX_DMA_Init+0x70>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6493      	str	r3, [r2, #72]	@ 0x48
 800245e:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <MX_DMA_Init+0x70>)
 8002460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
<<<<<<< Updated upstream
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	200b      	movs	r0, #11
 8001700:	f003 f87d 	bl	80047fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001704:	200b      	movs	r0, #11
 8001706:	f003 f894 	bl	8004832 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	200c      	movs	r0, #12
 8001710:	f003 f875 	bl	80047fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001714:	200c      	movs	r0, #12
 8001716:	f003 f88c 	bl	8004832 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	200d      	movs	r0, #13
 8001720:	f003 f86d 	bl	80047fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001724:	200d      	movs	r0, #13
 8001726:	f003 f884 	bl	8004832 <HAL_NVIC_EnableIRQ>

}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <MX_GPIO_Init>:
=======
 800246a:	2200      	movs	r2, #0
 800246c:	2100      	movs	r1, #0
 800246e:	200b      	movs	r0, #11
 8002470:	f003 fb0f 	bl	8005a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002474:	200b      	movs	r0, #11
 8002476:	f003 fb26 	bl	8005ac6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	200c      	movs	r0, #12
 8002480:	f003 fb07 	bl	8005a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002484:	200c      	movs	r0, #12
 8002486:	f003 fb1e 	bl	8005ac6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800248a:	2200      	movs	r2, #0
 800248c:	2100      	movs	r1, #0
 800248e:	200d      	movs	r0, #13
 8002490:	f003 faff 	bl	8005a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002494:	200d      	movs	r0, #13
 8002496:	f003 fb16 	bl	8005ac6 <HAL_NVIC_EnableIRQ>

}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000

080024a8 <MX_GPIO_Init>:
>>>>>>> Stashed changes
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	@ 0x28
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
=======
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	@ 0x28
 80024ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
 80024bc:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< Updated upstream
 800174e:	4b66      	ldr	r3, [pc, #408]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	4a65      	ldr	r2, [pc, #404]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175a:	4b63      	ldr	r3, [pc, #396]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001766:	4b60      	ldr	r3, [pc, #384]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	4a5f      	ldr	r2, [pc, #380]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 800176c:	f043 0320 	orr.w	r3, r3, #32
 8001770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001772:	4b5d      	ldr	r3, [pc, #372]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	f003 0320 	and.w	r3, r3, #32
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b5a      	ldr	r3, [pc, #360]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	4a59      	ldr	r2, [pc, #356]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178a:	4b57      	ldr	r3, [pc, #348]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	4b54      	ldr	r3, [pc, #336]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	4a53      	ldr	r2, [pc, #332]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a2:	4b51      	ldr	r3, [pc, #324]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80017b4:	484d      	ldr	r0, [pc, #308]	@ (80018ec <MX_GPIO_Init+0x1b4>)
 80017b6:	f003 fd23 	bl	8005200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c4:	f003 fd1c 	bl	8005200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f240 4116 	movw	r1, #1046	@ 0x416
 80017ce:	4848      	ldr	r0, [pc, #288]	@ (80018f0 <MX_GPIO_Init+0x1b8>)
 80017d0:	f003 fd16 	bl	8005200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4840      	ldr	r0, [pc, #256]	@ (80018ec <MX_GPIO_Init+0x1b4>)
 80017ec:	f003 fb6e 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 80017f0:	2302      	movs	r3, #2
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4839      	ldr	r0, [pc, #228]	@ (80018ec <MX_GPIO_Init+0x1b4>)
 8001808:	f003 fb60 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 800180c:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001828:	f003 fb50 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 800182c:	23f0      	movs	r3, #240	@ 0xf0
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	482b      	ldr	r0, [pc, #172]	@ (80018ec <MX_GPIO_Init+0x1b4>)
 8001840:	f003 fb44 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 8001844:	f240 4316 	movw	r3, #1046	@ 0x416
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4824      	ldr	r0, [pc, #144]	@ (80018f0 <MX_GPIO_Init+0x1b8>)
 800185e:	f003 fb35 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|Emergency_switch_Pin;
 8001862:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001868:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800186c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	481d      	ldr	r0, [pc, #116]	@ (80018f0 <MX_GPIO_Init+0x1b8>)
 800187a:	f003 fb27 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 800187e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	4815      	ldr	r0, [pc, #84]	@ (80018ec <MX_GPIO_Init+0x1b4>)
 8001898:	f003 fb18 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 800189c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b4:	f003 fb0a 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : joy_switch_1_Pin */
  GPIO_InitStruct.Pin = joy_switch_1_Pin;
 80018b8:	2320      	movs	r3, #32
 80018ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(joy_switch_1_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4809      	ldr	r0, [pc, #36]	@ (80018f0 <MX_GPIO_Init+0x1b8>)
 80018cc:	f003 fafe 	bl	8004ecc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2100      	movs	r1, #0
 80018d4:	2028      	movs	r0, #40	@ 0x28
 80018d6:	f002 ff92 	bl	80047fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018da:	2028      	movs	r0, #40	@ 0x28
 80018dc:	f002 ffa9 	bl	8004832 <HAL_NVIC_EnableIRQ>
=======
 80024be:	4b66      	ldr	r3, [pc, #408]	@ (8002658 <MX_GPIO_Init+0x1b0>)
 80024c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c2:	4a65      	ldr	r2, [pc, #404]	@ (8002658 <MX_GPIO_Init+0x1b0>)
 80024c4:	f043 0304 	orr.w	r3, r3, #4
 80024c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ca:	4b63      	ldr	r3, [pc, #396]	@ (8002658 <MX_GPIO_Init+0x1b0>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024d6:	4b60      	ldr	r3, [pc, #384]	@ (8002658 <MX_GPIO_Init+0x1b0>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024da:	4a5f      	ldr	r2, [pc, #380]	@ (8002658 <MX_GPIO_Init+0x1b0>)
 80024dc:	f043 0320 	orr.w	r3, r3, #32
 80024e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002658 <MX_GPIO_Init+0x1b0>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002658 <MX_GPIO_Init+0x1b0>)
 80024f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f2:	4a59      	ldr	r2, [pc, #356]	@ (8002658 <MX_GPIO_Init+0x1b0>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024fa:	4b57      	ldr	r3, [pc, #348]	@ (8002658 <MX_GPIO_Init+0x1b0>)
 80024fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002506:	4b54      	ldr	r3, [pc, #336]	@ (8002658 <MX_GPIO_Init+0x1b0>)
 8002508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250a:	4a53      	ldr	r2, [pc, #332]	@ (8002658 <MX_GPIO_Init+0x1b0>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002512:	4b51      	ldr	r3, [pc, #324]	@ (8002658 <MX_GPIO_Init+0x1b0>)
 8002514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 800251e:	2200      	movs	r2, #0
 8002520:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002524:	484d      	ldr	r0, [pc, #308]	@ (800265c <MX_GPIO_Init+0x1b4>)
 8002526:	f003 ffb5 	bl	8006494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 800252a:	2200      	movs	r2, #0
 800252c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002534:	f003 ffae 	bl	8006494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 8002538:	2200      	movs	r2, #0
 800253a:	f240 4116 	movw	r1, #1046	@ 0x416
 800253e:	4848      	ldr	r0, [pc, #288]	@ (8002660 <MX_GPIO_Init+0x1b8>)
 8002540:	f003 ffa8 	bl	8006494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002544:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800254a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800254e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4619      	mov	r1, r3
 800255a:	4840      	ldr	r0, [pc, #256]	@ (800265c <MX_GPIO_Init+0x1b4>)
 800255c:	f003 fe00 	bl	8006160 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 8002560:	2302      	movs	r3, #2
 8002562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002564:	2301      	movs	r3, #1
 8002566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256c:	2303      	movs	r3, #3
 800256e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	4619      	mov	r1, r3
 8002576:	4839      	ldr	r0, [pc, #228]	@ (800265c <MX_GPIO_Init+0x1b4>)
 8002578:	f003 fdf2 	bl	8006160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 800257c:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8002580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002582:	2301      	movs	r3, #1
 8002584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002598:	f003 fde2 	bl	8006160 <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 800259c:	23f0      	movs	r3, #240	@ 0xf0
 800259e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	4619      	mov	r1, r3
 80025ae:	482b      	ldr	r0, [pc, #172]	@ (800265c <MX_GPIO_Init+0x1b4>)
 80025b0:	f003 fdd6 	bl	8006160 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 80025b4:	f240 4316 	movw	r3, #1046	@ 0x416
 80025b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ba:	2301      	movs	r3, #1
 80025bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	2300      	movs	r3, #0
 80025c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	4824      	ldr	r0, [pc, #144]	@ (8002660 <MX_GPIO_Init+0x1b8>)
 80025ce:	f003 fdc7 	bl	8006160 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|Emergency_switch_Pin;
 80025d2:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80025d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025d8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80025dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e2:	f107 0314 	add.w	r3, r7, #20
 80025e6:	4619      	mov	r1, r3
 80025e8:	481d      	ldr	r0, [pc, #116]	@ (8002660 <MX_GPIO_Init+0x1b8>)
 80025ea:	f003 fdb9 	bl	8006160 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 80025ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f4:	2301      	movs	r3, #1
 80025f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	2300      	movs	r3, #0
 80025fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4619      	mov	r1, r3
 8002606:	4815      	ldr	r0, [pc, #84]	@ (800265c <MX_GPIO_Init+0x1b4>)
 8002608:	f003 fdaa 	bl	8006160 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 800260c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	4619      	mov	r1, r3
 8002620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002624:	f003 fd9c 	bl	8006160 <HAL_GPIO_Init>

  /*Configure GPIO pin : joy_switch_1_Pin */
  GPIO_InitStruct.Pin = joy_switch_1_Pin;
 8002628:	2320      	movs	r3, #32
 800262a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262c:	2300      	movs	r3, #0
 800262e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(joy_switch_1_GPIO_Port, &GPIO_InitStruct);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4619      	mov	r1, r3
 800263a:	4809      	ldr	r0, [pc, #36]	@ (8002660 <MX_GPIO_Init+0x1b8>)
 800263c:	f003 fd90 	bl	8006160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	2100      	movs	r1, #0
 8002644:	2028      	movs	r0, #40	@ 0x28
 8002646:	f003 fa24 	bl	8005a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800264a:	2028      	movs	r0, #40	@ 0x28
 800264c:	f003 fa3b 	bl	8005ac6 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< Updated upstream
 80018e0:	bf00      	nop
 80018e2:	3728      	adds	r7, #40	@ 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40021000 	.word	0x40021000
 80018ec:	48000800 	.word	0x48000800
 80018f0:	48000400 	.word	0x48000400

080018f4 <HAL_TIM_PeriodElapsedCallback>:
=======
 8002650:	bf00      	nop
 8002652:	3728      	adds	r7, #40	@ 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	48000800 	.word	0x48000800
 8002660:	48000400 	.word	0x48000400

08002664 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> Stashed changes

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
<<<<<<< Updated upstream
 80018f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f8:	b08e      	sub	sp, #56	@ 0x38
 80018fa:	af02      	add	r7, sp, #8
 80018fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if(htim == &htim3){
 80018fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001900:	4ba8      	ldr	r3, [pc, #672]	@ (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001902:	429a      	cmp	r2, r3
 8001904:	f040 81a2 	bne.w	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
//		Update_qei(&encoder, &htim4);
//		Update_adc(&current_sensor);
		if(mode == 3){
 8001908:	4ba7      	ldr	r3, [pc, #668]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d138      	bne.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x8e>
			sensor_test[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // Proximity
 8001910:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001914:	48a5      	ldr	r0, [pc, #660]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001916:	f003 fc5b 	bl	80051d0 <HAL_GPIO_ReadPin>
 800191a:	4603      	mov	r3, r0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2200      	movs	r2, #0
 8001920:	623b      	str	r3, [r7, #32]
 8001922:	627a      	str	r2, [r7, #36]	@ 0x24
 8001924:	4ba2      	ldr	r3, [pc, #648]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001926:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800192a:	e9c3 1200 	strd	r1, r2, [r3]
			sensor_test[1] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7); // Reed switch 1
 800192e:	2180      	movs	r1, #128	@ 0x80
 8001930:	48a0      	ldr	r0, [pc, #640]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001932:	f003 fc4d 	bl	80051d0 <HAL_GPIO_ReadPin>
 8001936:	4603      	mov	r3, r0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2200      	movs	r2, #0
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	61fa      	str	r2, [r7, #28]
 8001940:	4b9b      	ldr	r3, [pc, #620]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001942:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001946:	e9c3 1202 	strd	r1, r2, [r3, #8]
			sensor_test[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9); // Reed switch 2
 800194a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800194e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001952:	f003 fc3d 	bl	80051d0 <HAL_GPIO_ReadPin>
 8001956:	4603      	mov	r3, r0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2200      	movs	r2, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	617a      	str	r2, [r7, #20]
 8001960:	4b93      	ldr	r3, [pc, #588]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001962:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001966:	e9c3 1204 	strd	r1, r2, [r3, #16]
			sensor_test[3] = __HAL_TIM_GET_COUNTER(&htim4); // Encoder
 800196a:	4b93      	ldr	r3, [pc, #588]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	2200      	movs	r2, #0
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	60fa      	str	r2, [r7, #12]
 8001976:	4b8e      	ldr	r3, [pc, #568]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001978:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800197c:	e9c3 1206 	strd	r1, r2, [r3, #24]
=======
 8002664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af02      	add	r7, sp, #8
 800266c:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a9a      	ldr	r2, [pc, #616]	@ (80028dc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d162      	bne.n	800273c <HAL_TIM_PeriodElapsedCallback+0xd8>
		//Update modbus
		Modbus_Protocal_Worker();
 8002676:	f7fe ffa7 	bl	80015c8 <Modbus_Protocal_Worker>
		Set_Shelves();
 800267a:	f7fe fc7b 	bl	8000f74 <Set_Shelves>
		Gripper_Movement_Status();
 800267e:	f7fe fc55 	bl	8000f2c <Gripper_Movement_Status>
		Vacuum_Status();
 8002682:	f7fe fc2f 	bl	8000ee4 <Vacuum_Status>
		Run_Jog_Mode();
 8002686:	f7fe fe87 	bl	8001398 <Run_Jog_Mode>
		SetPick_PlaceOrder();
 800268a:	f7fe fcfb 	bl	8001084 <SetPick_PlaceOrder>
		Set_Home();
 800268e:	f7fe fccf 	bl	8001030 <Set_Home>
		Set_Goal_Point();
 8002692:	f7fe fcab 	bl	8000fec <Set_Goal_Point>
		static uint8_t hb_status = 0;
		registerFrame[0x00].U16 = 22881;
 8002696:	4b92      	ldr	r3, [pc, #584]	@ (80028e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002698:	f645 1261 	movw	r2, #22881	@ 0x5961
 800269c:	801a      	strh	r2, [r3, #0]
		if(registerFrame[0x00].U16 == 18537 && hb_status == 0){
 800269e:	4b90      	ldr	r3, [pc, #576]	@ (80028e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	f644 0269 	movw	r2, #18537	@ 0x4869
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d10b      	bne.n	80026c2 <HAL_TIM_PeriodElapsedCallback+0x5e>
 80026aa:	4b8e      	ldr	r3, [pc, #568]	@ (80028e4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d107      	bne.n	80026c2 <HAL_TIM_PeriodElapsedCallback+0x5e>
			registerFrame[0x00].U16 = 22881;
 80026b2:	4b8b      	ldr	r3, [pc, #556]	@ (80028e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80026b4:	f645 1261 	movw	r2, #22881	@ 0x5961
 80026b8:	801a      	strh	r2, [r3, #0]
			hb_status = 1;
 80026ba:	4b8a      	ldr	r3, [pc, #552]	@ (80028e4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80026bc:	2201      	movs	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]
 80026c0:	e03c      	b.n	800273c <HAL_TIM_PeriodElapsedCallback+0xd8>
		}
		else if(registerFrame[0x00].U16 == 22881 && hb_status == 1){
 80026c2:	4b87      	ldr	r3, [pc, #540]	@ (80028e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	f645 1261 	movw	r2, #22881	@ 0x5961
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d136      	bne.n	800273c <HAL_TIM_PeriodElapsedCallback+0xd8>
 80026ce:	4b85      	ldr	r3, [pc, #532]	@ (80028e4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d132      	bne.n	800273c <HAL_TIM_PeriodElapsedCallback+0xd8>
			Update_endeffector_status(&eff, GPIOC, GPIO_PIN_7, GPIOA, GPIO_PIN_9); // Update eff status
 80026d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026e0:	2280      	movs	r2, #128	@ 0x80
 80026e2:	4981      	ldr	r1, [pc, #516]	@ (80028e8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80026e4:	4881      	ldr	r0, [pc, #516]	@ (80028ec <HAL_TIM_PeriodElapsedCallback+0x288>)
 80026e6:	f7ff fa1e 	bl	8001b26 <Update_endeffector_status>
			registerFrame[0x04].U16 = eff.gripper_actual_status; //Gripper Movement Actual status(0x04)
 80026ea:	4b80      	ldr	r3, [pc, #512]	@ (80028ec <HAL_TIM_PeriodElapsedCallback+0x288>)
 80026ec:	881a      	ldrh	r2, [r3, #0]
 80026ee:	4b7c      	ldr	r3, [pc, #496]	@ (80028e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80026f0:	811a      	strh	r2, [r3, #8]
			registerFrame[0x10].U16 = state;  //Z-axis Moving Status(0x10)
 80026f2:	4b7f      	ldr	r3, [pc, #508]	@ (80028f0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80026f4:	881a      	ldrh	r2, [r3, #0]
 80026f6:	4b7a      	ldr	r3, [pc, #488]	@ (80028e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80026f8:	841a      	strh	r2, [r3, #32]
			registerFrame[0x11].U16 = encoder.mm;	//Z-axis Actual Position(0x11)
 80026fa:	4b7e      	ldr	r3, [pc, #504]	@ (80028f4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80026fc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002704:	ee17 3a90 	vmov	r3, s15
 8002708:	b29a      	uxth	r2, r3
 800270a:	4b75      	ldr	r3, [pc, #468]	@ (80028e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800270c:	845a      	strh	r2, [r3, #34]	@ 0x22
			registerFrame[0x12].U16 = encoder.mmps;  //Z-axis Actual Speed (0x12)
 800270e:	4b79      	ldr	r3, [pc, #484]	@ (80028f4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002710:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002718:	ee17 3a90 	vmov	r3, s15
 800271c:	b29a      	uxth	r2, r3
 800271e:	4b70      	ldr	r3, [pc, #448]	@ (80028e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002720:	849a      	strh	r2, [r3, #36]	@ 0x24
			registerFrame[0x13].U16 = encoder.mmpss;  //Z-axis Acceleration(0x13)    //////ความเร่งต้องเปลี่ยน/////
 8002722:	4b74      	ldr	r3, [pc, #464]	@ (80028f4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002724:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800272c:	ee17 3a90 	vmov	r3, s15
 8002730:	b29a      	uxth	r2, r3
 8002732:	4b6b      	ldr	r3, [pc, #428]	@ (80028e0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002734:	84da      	strh	r2, [r3, #38]	@ 0x26
//			registerFrame[0x40].U16 = encoder.rpm;  //X-axis Actual Position(0x40)
			hb_status = 0;
 8002736:	4b6b      	ldr	r3, [pc, #428]	@ (80028e4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
		}
	}
	if(htim == &htim3){
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a6e      	ldr	r2, [pc, #440]	@ (80028f8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002740:	4293      	cmp	r3, r2
 8002742:	f040 816a 	bne.w	8002a1a <HAL_TIM_PeriodElapsedCallback+0x3b6>
		//Update main
		Update_qei(&encoder, &htim4);
 8002746:	496d      	ldr	r1, [pc, #436]	@ (80028fc <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002748:	486a      	ldr	r0, [pc, #424]	@ (80028f4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800274a:	f000 fc91 	bl	8003070 <Update_qei>
		Update_adc(&current_sensor);
 800274e:	486c      	ldr	r0, [pc, #432]	@ (8002900 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002750:	f7ff f9b1 	bl	8001ab6 <Update_adc>
		if((homing == 0) && (encoder.mm > 500 || encoder.mm < 0)){
 8002754:	4b6b      	ldr	r3, [pc, #428]	@ (8002904 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d11a      	bne.n	8002792 <HAL_TIM_PeriodElapsedCallback+0x12e>
 800275c:	4b65      	ldr	r3, [pc, #404]	@ (80028f4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800275e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002762:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002908 <HAL_TIM_PeriodElapsedCallback+0x2a4>
 8002766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276e:	dc07      	bgt.n	8002780 <HAL_TIM_PeriodElapsedCallback+0x11c>
 8002770:	4b60      	ldr	r3, [pc, #384]	@ (80028f4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002772:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277e:	d508      	bpl.n	8002792 <HAL_TIM_PeriodElapsedCallback+0x12e>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8002780:	2300      	movs	r3, #0
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2302      	movs	r3, #2
 8002786:	4a58      	ldr	r2, [pc, #352]	@ (80028e8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002788:	2100      	movs	r1, #0
 800278a:	4860      	ldr	r0, [pc, #384]	@ (800290c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800278c:	f000 fb7c 	bl	8002e88 <Update_pwm>
 8002790:	e143      	b.n	8002a1a <HAL_TIM_PeriodElapsedCallback+0x3b6>
		}
		else if(mode == 0 || mode == 1){
 8002792:	4b5f      	ldr	r3, [pc, #380]	@ (8002910 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_TIM_PeriodElapsedCallback+0x13e>
 800279a:	4b5d      	ldr	r3, [pc, #372]	@ (8002910 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d141      	bne.n	8002826 <HAL_TIM_PeriodElapsedCallback+0x1c2>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, v_output);
 80027a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002914 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	2302      	movs	r3, #2
 80027aa:	4a4f      	ldr	r2, [pc, #316]	@ (80028e8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80027ac:	2100      	movs	r1, #0
 80027ae:	4857      	ldr	r0, [pc, #348]	@ (800290c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80027b0:	f000 fb6a 	bl	8002e88 <Update_pwm>
			if(mode == 0){ setpoint = 0;} // If mode == 0 : set point from base system
 80027b4:	4b56      	ldr	r3, [pc, #344]	@ (8002910 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d104      	bne.n	80027c6 <HAL_TIM_PeriodElapsedCallback+0x162>
 80027bc:	4b56      	ldr	r3, [pc, #344]	@ (8002918 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e00c      	b.n	80027e0 <HAL_TIM_PeriodElapsedCallback+0x17c>
			else if(mode == 1){ setpoint = jog; } // If mode == 1 : set point from joy
 80027c6:	4b52      	ldr	r3, [pc, #328]	@ (8002910 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d108      	bne.n	80027e0 <HAL_TIM_PeriodElapsedCallback+0x17c>
 80027ce:	4b53      	ldr	r3, [pc, #332]	@ (800291c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027da:	4b4f      	ldr	r3, [pc, #316]	@ (8002918 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80027dc:	edc3 7a00 	vstr	s15, [r3]
			Update_velocity_control(test);
 80027e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002920 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	ee07 3a90 	vmov	s15, r3
 80027e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ec:	eeb0 0a67 	vmov.f32	s0, s15
 80027f0:	f000 f9a6 	bl	8002b40 <Update_velocity_control>
			static uint64_t timestamp = 0;
			if (timestamp == 8){
 80027f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002924 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	f1a2 0108 	sub.w	r1, r2, #8
 80027fe:	430b      	orrs	r3, r1
 8002800:	d106      	bne.n	8002810 <HAL_TIM_PeriodElapsedCallback+0x1ac>
//				Update_position_control(test);
				timestamp = 0;
 8002802:	4948      	ldr	r1, [pc, #288]	@ (8002924 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9c1 2300 	strd	r2, r3, [r1]
			}
			timestamp++;
 8002810:	4b44      	ldr	r3, [pc, #272]	@ (8002924 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002816:	f112 0a01 	adds.w	sl, r2, #1
 800281a:	f143 0b00 	adc.w	fp, r3, #0
 800281e:	4b41      	ldr	r3, [pc, #260]	@ (8002924 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002820:	e9c3 ab00 	strd	sl, fp, [r3]
		else if(mode == 0 || mode == 1){
 8002824:	e0f9      	b.n	8002a1a <HAL_TIM_PeriodElapsedCallback+0x3b6>
		}
		else{
//			repeat_cheack++;
			// Stop motor if emergency
			if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8002826:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800282a:	483f      	ldr	r0, [pc, #252]	@ (8002928 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800282c:	f003 fe1a 	bl	8006464 <HAL_GPIO_ReadPin>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d112      	bne.n	800285c <HAL_TIM_PeriodElapsedCallback+0x1f8>
				repeat_cheack++;
 8002836:	4b3d      	ldr	r3, [pc, #244]	@ (800292c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283c:	f112 0801 	adds.w	r8, r2, #1
 8002840:	f143 0900 	adc.w	r9, r3, #0
 8002844:	4b39      	ldr	r3, [pc, #228]	@ (800292c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002846:	e9c3 8900 	strd	r8, r9, [r3]
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 800284a:	2300      	movs	r3, #0
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	2302      	movs	r3, #2
 8002850:	4a25      	ldr	r2, [pc, #148]	@ (80028e8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002852:	2100      	movs	r1, #0
 8002854:	482d      	ldr	r0, [pc, #180]	@ (800290c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002856:	f000 fb17 	bl	8002e88 <Update_pwm>
>>>>>>> Stashed changes
					homing_ts++;
				}
			}
		}
	}
}
<<<<<<< Updated upstream
 8001980:	e164      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
		else if((homing == 0) && (encoder.mm > 500 || encoder.mm < 0)){
 8001982:	4b8e      	ldr	r3, [pc, #568]	@ (8001bbc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d11a      	bne.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0xcc>
 800198a:	4b8d      	ldr	r3, [pc, #564]	@ (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800198c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001990:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8001bc4 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 8001994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	dc07      	bgt.n	80019ae <HAL_TIM_PeriodElapsedCallback+0xba>
 800199e:	4b88      	ldr	r3, [pc, #544]	@ (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019a0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80019a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ac:	d508      	bpl.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0xcc>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2302      	movs	r3, #2
 80019b4:	4a7f      	ldr	r2, [pc, #508]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80019b6:	2100      	movs	r1, #0
 80019b8:	4883      	ldr	r0, [pc, #524]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80019ba:	f000 fb7b 	bl	80020b4 <Update_pwm>
 80019be:	e145      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
		else if(mode == 0 || mode == 1){
 80019c0:	4b79      	ldr	r3, [pc, #484]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_TIM_PeriodElapsedCallback+0xdc>
 80019c8:	4b77      	ldr	r3, [pc, #476]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d13f      	bne.n	8001a50 <HAL_TIM_PeriodElapsedCallback+0x15c>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, v_output);
 80019d0:	4b7e      	ldr	r3, [pc, #504]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2302      	movs	r3, #2
 80019d8:	4a76      	ldr	r2, [pc, #472]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80019da:	2100      	movs	r1, #0
 80019dc:	487a      	ldr	r0, [pc, #488]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80019de:	f000 fb69 	bl	80020b4 <Update_pwm>
			if(mode == 0){ setpoint = 0;} // If mode == 0 : set point from base system
 80019e2:	4b71      	ldr	r3, [pc, #452]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d104      	bne.n	80019f4 <HAL_TIM_PeriodElapsedCallback+0x100>
 80019ea:	4b79      	ldr	r3, [pc, #484]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e007      	b.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x110>
			else if(mode == 1){setpoint = 1;} // If mode == 1 : set point from joy
 80019f4:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d103      	bne.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x110>
 80019fc:	4b74      	ldr	r3, [pc, #464]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80019fe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a02:	601a      	str	r2, [r3, #0]
			Update_velocity_control(test);
 8001a04:	4b73      	ldr	r3, [pc, #460]	@ (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a10:	eeb0 0a67 	vmov.f32	s0, s15
 8001a14:	f000 f9aa 	bl	8001d6c <Update_velocity_control>
			if (timestamp == 8){
 8001a18:	4b6f      	ldr	r3, [pc, #444]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f1a2 0108 	sub.w	r1, r2, #8
 8001a22:	430b      	orrs	r3, r1
 8001a24:	d106      	bne.n	8001a34 <HAL_TIM_PeriodElapsedCallback+0x140>
				timestamp = 0;
 8001a26:	496c      	ldr	r1, [pc, #432]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	e9c1 2300 	strd	r2, r3, [r1]
			timestamp++;
 8001a34:	4b68      	ldr	r3, [pc, #416]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3a:	1c51      	adds	r1, r2, #1
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	f143 0300 	adc.w	r3, r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	4b64      	ldr	r3, [pc, #400]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001a46:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001a4a:	e9c3 1200 	strd	r1, r2, [r3]
		else if(mode == 0 || mode == 1){
 8001a4e:	e0fd      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
			repeat_cheack++;
 8001a50:	4b62      	ldr	r3, [pc, #392]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f112 0a01 	adds.w	sl, r2, #1
 8001a5a:	f143 0b00 	adc.w	fp, r3, #0
 8001a5e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001a60:	e9c3 ab00 	strd	sl, fp, [r3]
			if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8001a64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a68:	4850      	ldr	r0, [pc, #320]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001a6a:	f003 fbb1 	bl	80051d0 <HAL_GPIO_ReadPin>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d112      	bne.n	8001a9a <HAL_TIM_PeriodElapsedCallback+0x1a6>
				repeat_cheack++;
 8001a74:	4b59      	ldr	r3, [pc, #356]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f112 0801 	adds.w	r8, r2, #1
 8001a7e:	f143 0900 	adc.w	r9, r3, #0
 8001a82:	4b56      	ldr	r3, [pc, #344]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001a84:	e9c3 8900 	strd	r8, r9, [r3]
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	4a49      	ldr	r2, [pc, #292]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001a90:	2100      	movs	r1, #0
 8001a92:	484d      	ldr	r0, [pc, #308]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001a94:	f000 fb0e 	bl	80020b4 <Update_pwm>
}
 8001a98:	e0d8      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
			else if(wait_command){
 8001a9a:	4b51      	ldr	r3, [pc, #324]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d03a      	beq.n	8001b18 <HAL_TIM_PeriodElapsedCallback+0x224>
				Update_joy(&joy);
 8001aa2:	4850      	ldr	r0, [pc, #320]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001aa4:	f7ff fa2e 	bl	8000f04 <Update_joy>
				if(!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 8001aa8:	4b4e      	ldr	r3, [pc, #312]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d115      	bne.n	8001adc <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8001ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ab2:	785b      	ldrb	r3, [r3, #1]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d011      	beq.n	8001adc <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8001ab8:	4b4a      	ldr	r3, [pc, #296]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001aba:	789b      	ldrb	r3, [r3, #2]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00d      	beq.n	8001adc <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8001ac0:	4b48      	ldr	r3, [pc, #288]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ac2:	78db      	ldrb	r3, [r3, #3]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d009      	beq.n	8001adc <HAL_TIM_PeriodElapsedCallback+0x1e8>
					mode = 0;
 8001ac8:	4b37      	ldr	r3, [pc, #220]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
					is_home = 0;
 8001ace:	4b46      	ldr	r3, [pc, #280]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
					wait_command = 0;
 8001ad4:	4b42      	ldr	r3, [pc, #264]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	e0b7      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
				else if(joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 8001adc:	4b41      	ldr	r3, [pc, #260]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80b3 	beq.w	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ae8:	785b      	ldrb	r3, [r3, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 80ae 	bne.w	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
 8001af0:	4b3c      	ldr	r3, [pc, #240]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001af2:	789b      	ldrb	r3, [r3, #2]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80a9 	beq.w	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
 8001afa:	4b3a      	ldr	r3, [pc, #232]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001afc:	78db      	ldrb	r3, [r3, #3]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80a4 	beq.w	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
					mode = 1;
 8001b04:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
					is_home = 0;
 8001b0a:	4b37      	ldr	r3, [pc, #220]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
					wait_command = 0;
 8001b10:	4b33      	ldr	r3, [pc, #204]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
}
 8001b16:	e099      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8001b18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b1c:	4823      	ldr	r0, [pc, #140]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001b1e:	f003 fb57 	bl	80051d0 <HAL_GPIO_ReadPin>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 8091 	beq.w	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2302      	movs	r3, #2
 8001b30:	4a20      	ldr	r2, [pc, #128]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b32:	2100      	movs	r1, #0
 8001b34:	4824      	ldr	r0, [pc, #144]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b36:	f000 fabd 	bl	80020b4 <Update_pwm>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b40:	481c      	ldr	r0, [pc, #112]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b42:	f003 fb5d 	bl	8005200 <HAL_GPIO_WritePin>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6)){
 8001b46:	2140      	movs	r1, #64	@ 0x40
 8001b48:	481a      	ldr	r0, [pc, #104]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b4a:	f003 fb41 	bl	80051d0 <HAL_GPIO_ReadPin>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d010      	beq.n	8001b76 <HAL_TIM_PeriodElapsedCallback+0x282>
					if(homing_first == 1){
 8001b54:	4b25      	ldr	r3, [pc, #148]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d177      	bne.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
						homing = 1;
 8001b5c:	4b17      	ldr	r3, [pc, #92]	@ (8001bbc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -100);
 8001b62:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2302      	movs	r3, #2
 8001b6a:	4a12      	ldr	r2, [pc, #72]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4816      	ldr	r0, [pc, #88]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b70:	f000 faa0 	bl	80020b4 <Update_pwm>
}
 8001b74:	e06a      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
				else if(homing_first == 0){
 8001b76:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d166      	bne.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
					if (homing_ts == 8000){
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f5a2 51fa 	sub.w	r1, r2, #8000	@ 0x1f40
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	d135      	bne.n	8001bf8 <HAL_TIM_PeriodElapsedCallback+0x304>
						homing_second = 1;
 8001b8c:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	701a      	strb	r2, [r3, #0]
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001b92:	2300      	movs	r3, #0
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2302      	movs	r3, #2
 8001b98:	4a06      	ldr	r2, [pc, #24]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	480a      	ldr	r0, [pc, #40]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b9e:	f000 fa89 	bl	80020b4 <Update_pwm>
 8001ba2:	e049      	b.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x344>
 8001ba4:	200001d8 	.word	0x200001d8
 8001ba8:	20000002 	.word	0x20000002
 8001bac:	48000400 	.word	0x48000400
 8001bb0:	200005d8 	.word	0x200005d8
 8001bb4:	48000800 	.word	0x48000800
 8001bb8:	200002a4 	.word	0x200002a4
 8001bbc:	20000619 	.word	0x20000619
 8001bc0:	200006e8 	.word	0x200006e8
 8001bc4:	43fa0000 	.word	0x43fa0000
 8001bc8:	2000010c 	.word	0x2000010c
 8001bcc:	20000754 	.word	0x20000754
 8001bd0:	20000600 	.word	0x20000600
 8001bd4:	200005d4 	.word	0x200005d4
 8001bd8:	20000778 	.word	0x20000778
 8001bdc:	200005c8 	.word	0x200005c8
 8001be0:	2000061b 	.word	0x2000061b
 8001be4:	20000604 	.word	0x20000604
 8001be8:	2000061a 	.word	0x2000061a
 8001bec:	20000001 	.word	0x20000001
 8001bf0:	20000610 	.word	0x20000610
 8001bf4:	20000618 	.word	0x20000618
					}else if(homing_ts == 18000){
 8001bf8:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	4917      	ldr	r1, [pc, #92]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001c00:	4411      	add	r1, r2
 8001c02:	430b      	orrs	r3, r1
 8001c04:	d109      	bne.n	8001c1a <HAL_TIM_PeriodElapsedCallback+0x326>
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -80);
 8001c06:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	4a14      	ldr	r2, [pc, #80]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001c10:	2100      	movs	r1, #0
 8001c12:	4814      	ldr	r0, [pc, #80]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001c14:	f000 fa4e 	bl	80020b4 <Update_pwm>
 8001c18:	e00e      	b.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x344>
					}else if(homing_ts == 4000){
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f5a2 617a 	sub.w	r1, r2, #4000	@ 0xfa0
 8001c24:	430b      	orrs	r3, r1
 8001c26:	d107      	bne.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x344>
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 200);
 8001c28:	23c8      	movs	r3, #200	@ 0xc8
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001c30:	2100      	movs	r1, #0
 8001c32:	480c      	ldr	r0, [pc, #48]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001c34:	f000 fa3e 	bl	80020b4 <Update_pwm>
					homing_ts++;
 8001c38:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	1c54      	adds	r4, r2, #1
 8001c40:	f143 0500 	adc.w	r5, r3, #0
 8001c44:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001c46:	e9c3 4500 	strd	r4, r5, [r3]
}
 8001c4a:	e7ff      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
 8001c4c:	bf00      	nop
 8001c4e:	3730      	adds	r7, #48	@ 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c56:	bf00      	nop
 8001c58:	20000610 	.word	0x20000610
 8001c5c:	ffffb9b0 	.word	0xffffb9b0
 8001c60:	48000800 	.word	0x48000800
 8001c64:	2000010c 	.word	0x2000010c

08001c68 <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15){
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c78:	d10d      	bne.n	8001c96 <HAL_GPIO_EXTI_Callback+0x2e>
		// Emergency switch interrupted
		// Stop motor
		Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2302      	movs	r3, #2
 8001c80:	4a2f      	ldr	r2, [pc, #188]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c82:	2100      	movs	r1, #0
 8001c84:	482f      	ldr	r0, [pc, #188]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001c86:	f000 fa15 	bl	80020b4 <Update_pwm>
		// Emergency light enable
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c90:	482b      	ldr	r0, [pc, #172]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c92:	f003 fab5 	bl	8005200 <HAL_GPIO_WritePin>
//		mode = 2;
	}
	if(GPIO_Pin == GPIO_PIN_12){
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c9c:	d14d      	bne.n	8001d3a <HAL_GPIO_EXTI_Callback+0xd2>
		// Proximity interrupted
		limitswitch_test++;
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d48 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	4a28      	ldr	r2, [pc, #160]	@ (8001d48 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001ca6:	6013      	str	r3, [r2, #0]
		if(homing == 1){
 8001ca8:	4b28      	ldr	r3, [pc, #160]	@ (8001d4c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d135      	bne.n	8001d1c <HAL_GPIO_EXTI_Callback+0xb4>
			// If homing
			if(homing_first == 1){
 8001cb0:	4b27      	ldr	r3, [pc, #156]	@ (8001d50 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_GPIO_EXTI_Callback+0x68>
				// First time stop
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	4a20      	ldr	r2, [pc, #128]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4820      	ldr	r0, [pc, #128]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001cc4:	f000 f9f6 	bl	80020b4 <Update_pwm>
				homing_first = 0;
 8001cc8:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
				return;
 8001cce:	e034      	b.n	8001d3a <HAL_GPIO_EXTI_Callback+0xd2>
			}
			else if(homing_second == 1){
 8001cd0:	4b20      	ldr	r3, [pc, #128]	@ (8001d54 <HAL_GPIO_EXTI_Callback+0xec>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d130      	bne.n	8001d3a <HAL_GPIO_EXTI_Callback+0xd2>
				// Second time stop and reset variables.
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	4a18      	ldr	r2, [pc, #96]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4818      	ldr	r0, [pc, #96]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001ce4:	f000 f9e6 	bl	80020b4 <Update_pwm>
				homing_ts = 0;
 8001ce8:	491b      	ldr	r1, [pc, #108]	@ (8001d58 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	e9c1 2300 	strd	r2, r3, [r1]
				is_home = 1;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
				homing_second = 0;
 8001cfc:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <HAL_GPIO_EXTI_Callback+0xec>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
				homing_first = 1;
 8001d02:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
				homing = 0;
 8001d08:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
				wait_command = 1;
 8001d0e:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
				Reset_qei(&encoder);
 8001d14:	4813      	ldr	r0, [pc, #76]	@ (8001d64 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d16:	f000 faa9 	bl	800226c <Reset_qei>
 8001d1a:	e00e      	b.n	8001d3a <HAL_GPIO_EXTI_Callback+0xd2>
=======
 800285a:	e0de      	b.n	8002a1a <HAL_TIM_PeriodElapsedCallback+0x3b6>
			else if(wait_command){
 800285c:	4b34      	ldr	r3, [pc, #208]	@ (8002930 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d06b      	beq.n	800293c <HAL_TIM_PeriodElapsedCallback+0x2d8>
				Update_joy(&joy);
 8002864:	4833      	ldr	r0, [pc, #204]	@ (8002934 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002866:	f7ff f997 	bl	8001b98 <Update_joy>
				if(!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 800286a:	4b32      	ldr	r3, [pc, #200]	@ (8002934 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d115      	bne.n	800289e <HAL_TIM_PeriodElapsedCallback+0x23a>
 8002872:	4b30      	ldr	r3, [pc, #192]	@ (8002934 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002874:	785b      	ldrb	r3, [r3, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d011      	beq.n	800289e <HAL_TIM_PeriodElapsedCallback+0x23a>
 800287a:	4b2e      	ldr	r3, [pc, #184]	@ (8002934 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800287c:	789b      	ldrb	r3, [r3, #2]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00d      	beq.n	800289e <HAL_TIM_PeriodElapsedCallback+0x23a>
 8002882:	4b2c      	ldr	r3, [pc, #176]	@ (8002934 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002884:	78db      	ldrb	r3, [r3, #3]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <HAL_TIM_PeriodElapsedCallback+0x23a>
					mode = 0;
 800288a:	4b21      	ldr	r3, [pc, #132]	@ (8002910 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
					is_home = 0;
 8002890:	4b29      	ldr	r3, [pc, #164]	@ (8002938 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
					wait_command = 0;
 8002896:	4b26      	ldr	r3, [pc, #152]	@ (8002930 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	e0bd      	b.n	8002a1a <HAL_TIM_PeriodElapsedCallback+0x3b6>
				else if(joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 800289e:	4b25      	ldr	r3, [pc, #148]	@ (8002934 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80b9 	beq.w	8002a1a <HAL_TIM_PeriodElapsedCallback+0x3b6>
 80028a8:	4b22      	ldr	r3, [pc, #136]	@ (8002934 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80028aa:	785b      	ldrb	r3, [r3, #1]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f040 80b4 	bne.w	8002a1a <HAL_TIM_PeriodElapsedCallback+0x3b6>
 80028b2:	4b20      	ldr	r3, [pc, #128]	@ (8002934 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80028b4:	789b      	ldrb	r3, [r3, #2]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80af 	beq.w	8002a1a <HAL_TIM_PeriodElapsedCallback+0x3b6>
 80028bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002934 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80028be:	78db      	ldrb	r3, [r3, #3]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80aa 	beq.w	8002a1a <HAL_TIM_PeriodElapsedCallback+0x3b6>
					mode = 1;
 80028c6:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
					is_home = 0;
 80028cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002938 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
					wait_command = 0;
 80028d2:	4b17      	ldr	r3, [pc, #92]	@ (8002930 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
}
 80028d8:	e09f      	b.n	8002a1a <HAL_TIM_PeriodElapsedCallback+0x3b6>
 80028da:	bf00      	nop
 80028dc:	20000ad0 	.word	0x20000ad0
 80028e0:	20000e0c 	.word	0x20000e0c
 80028e4:	20001128 	.word	0x20001128
 80028e8:	48000800 	.word	0x48000800
 80028ec:	20000e08 	.word	0x20000e08
 80028f0:	200002ba 	.word	0x200002ba
 80028f4:	20001088 	.word	0x20001088
 80028f8:	20000938 	.word	0x20000938
 80028fc:	20000a04 	.word	0x20000a04
 8002900:	20000fb8 	.word	0x20000fb8
 8002904:	20000fb1 	.word	0x20000fb1
 8002908:	43fa0000 	.word	0x43fa0000
 800290c:	2000086c 	.word	0x2000086c
 8002910:	20000fb4 	.word	0x20000fb4
 8002914:	20001104 	.word	0x20001104
 8002918:	20000e04 	.word	0x20000e04
 800291c:	20000fa0 	.word	0x20000fa0
 8002920:	20000e00 	.word	0x20000e00
 8002924:	20001130 	.word	0x20001130
 8002928:	48000400 	.word	0x48000400
 800292c:	20000df8 	.word	0x20000df8
 8002930:	20000fb3 	.word	0x20000fb3
 8002934:	20000f9c 	.word	0x20000f9c
 8002938:	20000fb2 	.word	0x20000fb2
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 800293c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002940:	4838      	ldr	r0, [pc, #224]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002942:	f003 fd8f 	bl	8006464 <HAL_GPIO_ReadPin>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d066      	beq.n	8002a1a <HAL_TIM_PeriodElapsedCallback+0x3b6>
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 800294c:	2300      	movs	r3, #0
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2302      	movs	r3, #2
 8002952:	4a35      	ldr	r2, [pc, #212]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002954:	2100      	movs	r1, #0
 8002956:	4835      	ldr	r0, [pc, #212]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8002958:	f000 fa96 	bl	8002e88 <Update_pwm>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 800295c:	2200      	movs	r2, #0
 800295e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002962:	4831      	ldr	r0, [pc, #196]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002964:	f003 fd96 	bl	8006494 <HAL_GPIO_WritePin>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6)){
 8002968:	2140      	movs	r1, #64	@ 0x40
 800296a:	482f      	ldr	r0, [pc, #188]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 800296c:	f003 fd7a 	bl	8006464 <HAL_GPIO_ReadPin>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_TIM_PeriodElapsedCallback+0x334>
					if(homing_first == 1){
 8002976:	4b2e      	ldr	r3, [pc, #184]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d14d      	bne.n	8002a1a <HAL_TIM_PeriodElapsedCallback+0x3b6>
						homing = 1;
 800297e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a34 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -100);
 8002984:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	2302      	movs	r3, #2
 800298c:	4a26      	ldr	r2, [pc, #152]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 800298e:	2100      	movs	r1, #0
 8002990:	4826      	ldr	r0, [pc, #152]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8002992:	f000 fa79 	bl	8002e88 <Update_pwm>
}
 8002996:	e040      	b.n	8002a1a <HAL_TIM_PeriodElapsedCallback+0x3b6>
				else if(homing_first == 0){
 8002998:	4b25      	ldr	r3, [pc, #148]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d13c      	bne.n	8002a1a <HAL_TIM_PeriodElapsedCallback+0x3b6>
					if (homing_ts == 8000){
 80029a0:	4b25      	ldr	r3, [pc, #148]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 80029a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a6:	f5a2 51fa 	sub.w	r1, r2, #8000	@ 0x1f40
 80029aa:	430b      	orrs	r3, r1
 80029ac:	d10b      	bne.n	80029c6 <HAL_TIM_PeriodElapsedCallback+0x362>
						homing_second = 1;
 80029ae:	4b23      	ldr	r3, [pc, #140]	@ (8002a3c <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 80029b4:	2300      	movs	r3, #0
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2302      	movs	r3, #2
 80029ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80029bc:	2100      	movs	r1, #0
 80029be:	481b      	ldr	r0, [pc, #108]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 80029c0:	f000 fa62 	bl	8002e88 <Update_pwm>
 80029c4:	e01f      	b.n	8002a06 <HAL_TIM_PeriodElapsedCallback+0x3a2>
					}else if(homing_ts == 18000){
 80029c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	491c      	ldr	r1, [pc, #112]	@ (8002a40 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 80029ce:	4411      	add	r1, r2
 80029d0:	430b      	orrs	r3, r1
 80029d2:	d109      	bne.n	80029e8 <HAL_TIM_PeriodElapsedCallback+0x384>
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -80);
 80029d4:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	2302      	movs	r3, #2
 80029dc:	4a12      	ldr	r2, [pc, #72]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80029de:	2100      	movs	r1, #0
 80029e0:	4812      	ldr	r0, [pc, #72]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 80029e2:	f000 fa51 	bl	8002e88 <Update_pwm>
 80029e6:	e00e      	b.n	8002a06 <HAL_TIM_PeriodElapsedCallback+0x3a2>
					}else if(homing_ts == 4000){
 80029e8:	4b13      	ldr	r3, [pc, #76]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 80029ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ee:	f5a2 617a 	sub.w	r1, r2, #4000	@ 0xfa0
 80029f2:	430b      	orrs	r3, r1
 80029f4:	d107      	bne.n	8002a06 <HAL_TIM_PeriodElapsedCallback+0x3a2>
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 200);
 80029f6:	23c8      	movs	r3, #200	@ 0xc8
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2302      	movs	r3, #2
 80029fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80029fe:	2100      	movs	r1, #0
 8002a00:	480a      	ldr	r0, [pc, #40]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8002a02:	f000 fa41 	bl	8002e88 <Update_pwm>
					homing_ts++;
 8002a06:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	1c54      	adds	r4, r2, #1
 8002a0e:	f143 0500 	adc.w	r5, r3, #0
 8002a12:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8002a14:	e9c3 4500 	strd	r4, r5, [r3]
}
 8002a18:	e7ff      	b.n	8002a1a <HAL_TIM_PeriodElapsedCallback+0x3b6>
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a24:	48000400 	.word	0x48000400
 8002a28:	48000800 	.word	0x48000800
 8002a2c:	2000086c 	.word	0x2000086c
 8002a30:	20000269 	.word	0x20000269
 8002a34:	20000fb1 	.word	0x20000fb1
 8002a38:	20000fa8 	.word	0x20000fa8
 8002a3c:	20000fb0 	.word	0x20000fb0
 8002a40:	ffffb9b0 	.word	0xffffb9b0

08002a44 <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15){
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a54:	d110      	bne.n	8002a78 <HAL_GPIO_EXTI_Callback+0x34>
		// Emergency switch interrupted
		// Stop motor
		Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8002a56:	2300      	movs	r3, #0
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002b18 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002a5e:	2100      	movs	r1, #0
 8002a60:	482e      	ldr	r0, [pc, #184]	@ (8002b1c <HAL_GPIO_EXTI_Callback+0xd8>)
 8002a62:	f000 fa11 	bl	8002e88 <Update_pwm>
		// Emergency light enable
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8002a66:	2201      	movs	r2, #1
 8002a68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a6c:	482a      	ldr	r0, [pc, #168]	@ (8002b18 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002a6e:	f003 fd11 	bl	8006494 <HAL_GPIO_WritePin>
		mode = 2;
 8002a72:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002a74:	2202      	movs	r2, #2
 8002a76:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_12){
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a7e:	d148      	bne.n	8002b12 <HAL_GPIO_EXTI_Callback+0xce>
		// Proximity interrupted
//		limitswitch_test++;
		if(homing == 1){
 8002a80:	4b28      	ldr	r3, [pc, #160]	@ (8002b24 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d135      	bne.n	8002af4 <HAL_GPIO_EXTI_Callback+0xb0>
			// If homing
			if(homing_first == 1){
 8002a88:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_GPIO_EXTI_Callback+0x64>
				// First time stop
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8002a90:	2300      	movs	r3, #0
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2302      	movs	r3, #2
 8002a96:	4a20      	ldr	r2, [pc, #128]	@ (8002b18 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4820      	ldr	r0, [pc, #128]	@ (8002b1c <HAL_GPIO_EXTI_Callback+0xd8>)
 8002a9c:	f000 f9f4 	bl	8002e88 <Update_pwm>
				homing_first = 0;
 8002aa0:	4b21      	ldr	r3, [pc, #132]	@ (8002b28 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
				return;
 8002aa6:	e034      	b.n	8002b12 <HAL_GPIO_EXTI_Callback+0xce>
			}
			else if(homing_second == 1){
 8002aa8:	4b20      	ldr	r3, [pc, #128]	@ (8002b2c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d130      	bne.n	8002b12 <HAL_GPIO_EXTI_Callback+0xce>
				// Second time stop and reset variables.
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	4a18      	ldr	r2, [pc, #96]	@ (8002b18 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4818      	ldr	r0, [pc, #96]	@ (8002b1c <HAL_GPIO_EXTI_Callback+0xd8>)
 8002abc:	f000 f9e4 	bl	8002e88 <Update_pwm>
				homing_ts = 0;
 8002ac0:	491b      	ldr	r1, [pc, #108]	@ (8002b30 <HAL_GPIO_EXTI_Callback+0xec>)
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	e9c1 2300 	strd	r2, r3, [r1]
				is_home = 1;
 8002ace:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]
				homing_second = 0;
 8002ad4:	4b15      	ldr	r3, [pc, #84]	@ (8002b2c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
				homing_first = 1;
 8002ada:	4b13      	ldr	r3, [pc, #76]	@ (8002b28 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
				homing = 0;
 8002ae0:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
				wait_command = 1;
 8002ae6:	4b14      	ldr	r3, [pc, #80]	@ (8002b38 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	701a      	strb	r2, [r3, #0]
				Reset_qei(&encoder);
 8002aec:	4813      	ldr	r0, [pc, #76]	@ (8002b3c <HAL_GPIO_EXTI_Callback+0xf8>)
 8002aee:	f000 fccf 	bl	8003490 <Reset_qei>
 8002af2:	e00e      	b.n	8002b12 <HAL_GPIO_EXTI_Callback+0xce>
>>>>>>> Stashed changes
			}
		}
		else{
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
<<<<<<< Updated upstream
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2302      	movs	r3, #2
 8001d22:	4a07      	ldr	r2, [pc, #28]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001d24:	2100      	movs	r1, #0
 8001d26:	4807      	ldr	r0, [pc, #28]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001d28:	f000 f9c4 	bl	80020b4 <Update_pwm>
			mode = 2;
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <HAL_GPIO_EXTI_Callback+0x100>)
 8001d2e:	2202      	movs	r2, #2
 8001d30:	701a      	strb	r2, [r3, #0]
			homing_first = 0;
 8001d32:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
			return;
 8001d38:	bf00      	nop
		}
	}
}
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	48000800 	.word	0x48000800
 8001d44:	2000010c 	.word	0x2000010c
 8001d48:	200005d0 	.word	0x200005d0
 8001d4c:	20000619 	.word	0x20000619
 8001d50:	20000001 	.word	0x20000001
 8001d54:	20000618 	.word	0x20000618
 8001d58:	20000610 	.word	0x20000610
 8001d5c:	2000061a 	.word	0x2000061a
 8001d60:	2000061b 	.word	0x2000061b
 8001d64:	200006e8 	.word	0x200006e8
 8001d68:	20000002 	.word	0x20000002

08001d6c <Update_velocity_control>:
=======
 8002af4:	2300      	movs	r3, #0
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2302      	movs	r3, #2
 8002afa:	4a07      	ldr	r2, [pc, #28]	@ (8002b18 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002afc:	2100      	movs	r1, #0
 8002afe:	4807      	ldr	r0, [pc, #28]	@ (8002b1c <HAL_GPIO_EXTI_Callback+0xd8>)
 8002b00:	f000 f9c2 	bl	8002e88 <Update_pwm>
			mode = 2;
 8002b04:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002b06:	2202      	movs	r2, #2
 8002b08:	701a      	strb	r2, [r3, #0]
			homing_first = 0;
 8002b0a:	4b07      	ldr	r3, [pc, #28]	@ (8002b28 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
			return;
 8002b10:	bf00      	nop
		}
	}
}
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	48000800 	.word	0x48000800
 8002b1c:	2000086c 	.word	0x2000086c
 8002b20:	20000fb4 	.word	0x20000fb4
 8002b24:	20000fb1 	.word	0x20000fb1
 8002b28:	20000269 	.word	0x20000269
 8002b2c:	20000fb0 	.word	0x20000fb0
 8002b30:	20000fa8 	.word	0x20000fa8
 8002b34:	20000fb2 	.word	0x20000fb2
 8002b38:	20000fb3 	.word	0x20000fb3
 8002b3c:	20001088 	.word	0x20001088

08002b40 <Update_velocity_control>:
>>>>>>> Stashed changes
// Torque control update
void Update_torque_control(float32_t s){

}
// Velocity control update
void Update_velocity_control(float32_t s){
<<<<<<< Updated upstream
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	ed87 0a01 	vstr	s0, [r7, #4]
	//input is pulse unit
	v_e = s - Get_mmps(&encoder);
 8001d76:	480f      	ldr	r0, [pc, #60]	@ (8001db4 <Update_velocity_control+0x48>)
 8001d78:	f000 faa9 	bl	80022ce <Get_mmps>
 8001d7c:	eeb0 7a40 	vmov.f32	s14, s0
 8001d80:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <Update_velocity_control+0x4c>)
 8001d8a:	edc3 7a00 	vstr	s15, [r3]
	v_output = Update_pid(&v_pid, v_e, 900.0, 1000.0);
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <Update_velocity_control+0x4c>)
 8001d90:	edd3 7a00 	vldr	s15, [r3]
 8001d94:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8001dbc <Update_velocity_control+0x50>
 8001d98:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001dc0 <Update_velocity_control+0x54>
 8001d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001da0:	4808      	ldr	r0, [pc, #32]	@ (8001dc4 <Update_velocity_control+0x58>)
 8001da2:	f000 f83f 	bl	8001e24 <Update_pid>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4a07      	ldr	r2, [pc, #28]	@ (8001dc8 <Update_velocity_control+0x5c>)
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200006e8 	.word	0x200006e8
 8001db8:	20000750 	.word	0x20000750
 8001dbc:	447a0000 	.word	0x447a0000
 8001dc0:	44610000 	.word	0x44610000
 8001dc4:	20000730 	.word	0x20000730
 8001dc8:	20000754 	.word	0x20000754

08001dcc <Error_Handler>:
=======
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	ed87 0a01 	vstr	s0, [r7, #4]
	//input is pulse unit
	v_e = s - Get_mmps(&encoder);
 8002b4a:	480f      	ldr	r0, [pc, #60]	@ (8002b88 <Update_velocity_control+0x48>)
 8002b4c:	f000 fce2 	bl	8003514 <Get_mmps>
 8002b50:	eeb0 7a40 	vmov.f32	s14, s0
 8002b54:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <Update_velocity_control+0x4c>)
 8002b5e:	edc3 7a00 	vstr	s15, [r3]
	v_output = Update_pid(&v_pid, v_e, 900.0, 1000.0);
 8002b62:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <Update_velocity_control+0x4c>)
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8002b90 <Update_velocity_control+0x50>
 8002b6c:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8002b94 <Update_velocity_control+0x54>
 8002b70:	eeb0 0a67 	vmov.f32	s0, s15
 8002b74:	4808      	ldr	r0, [pc, #32]	@ (8002b98 <Update_velocity_control+0x58>)
 8002b76:	f000 f83f 	bl	8002bf8 <Update_pid>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4a07      	ldr	r2, [pc, #28]	@ (8002b9c <Update_velocity_control+0x5c>)
 8002b7e:	6013      	str	r3, [r2, #0]
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20001088 	.word	0x20001088
 8002b8c:	20001100 	.word	0x20001100
 8002b90:	447a0000 	.word	0x447a0000
 8002b94:	44610000 	.word	0x44610000
 8002b98:	200010e0 	.word	0x200010e0
 8002b9c:	20001104 	.word	0x20001104

08002ba0 <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
=======
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
=======
 8002ba4:	b672      	cpsid	i
}
 8002ba6:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <Error_Handler+0x8>

08001dd8 <PID_init>:
=======
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <Error_Handler+0x8>

08002bac <PID_init>:
>>>>>>> Stashed changes
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
<<<<<<< Updated upstream
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6178      	str	r0, [r7, #20]
 8001de0:	ed87 0a04 	vstr	s0, [r7, #16]
 8001de4:	edc7 0a03 	vstr	s1, [r7, #12]
 8001de8:	ed87 1a02 	vstr	s2, [r7, #8]
 8001dec:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 8001e08:	6979      	ldr	r1, [r7, #20]
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001e16:	bf00      	nop
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 8001e24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e28:	b08a      	sub	sp, #40	@ 0x28
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e32:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e36:	ed87 1a00 	vstr	s2, [r7]
//	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4c:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 8001e50:	4b96      	ldr	r3, [pc, #600]	@ (80020ac <Update_pid+0x288>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e64:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e72:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt / 2.0)*(e_n + e_n_1)) + y_n_1;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e86:	ee17 0a90 	vmov	r0, s15
 8001e8a:	f7fe fb29 	bl	80004e0 <__aeabi_f2d>
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e96:	f7fe fca5 	bl	80007e4 <__aeabi_ddiv>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4690      	mov	r8, r2
 8001ea0:	4699      	mov	r9, r3
 8001ea2:	4b82      	ldr	r3, [pc, #520]	@ (80020ac <Update_pid+0x288>)
 8001ea4:	ed93 7a00 	vldr	s14, [r3]
 8001ea8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb0:	ee17 0a90 	vmov	r0, s15
 8001eb4:	f7fe fb14 	bl	80004e0 <__aeabi_f2d>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4640      	mov	r0, r8
 8001ebe:	4649      	mov	r1, r9
 8001ec0:	f7fe fb66 	bl	8000590 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4690      	mov	r8, r2
 8001eca:	4699      	mov	r9, r3
 8001ecc:	4b78      	ldr	r3, [pc, #480]	@ (80020b0 <Update_pid+0x28c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb05 	bl	80004e0 <__aeabi_f2d>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4640      	mov	r0, r8
 8001edc:	4649      	mov	r1, r9
 8001ede:	f7fe f9a1 	bl	8000224 <__adddf3>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f7fe fe33 	bl	8000b54 <__aeabi_d2f>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	623b      	str	r3, [r7, #32]

	if(pid -> ki == 0){
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ef8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f00:	d102      	bne.n	8001f08 <Update_pid+0xe4>
		i_term = 0;
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	d102      	bne.n	8001f1e <Update_pid+0xfa>
		d_term = 0;
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 8001f1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f22:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f32:	ee17 0a90 	vmov	r0, s15
 8001f36:	f7fe fad3 	bl	80004e0 <__aeabi_f2d>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t is_sat = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fac6 	bl	80004e0 <__aeabi_f2d>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4640      	mov	r0, r8
 8001f5a:	4649      	mov	r1, r9
 8001f5c:	f7fe fda8 	bl	8000ab0 <__aeabi_dcmpgt>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <Update_pid+0x148>
		is_sat = 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	77fb      	strb	r3, [r7, #31]
 8001f6a:	e016      	b.n	8001f9a <Update_pid+0x176>
	}
	else if(pid -> y_n < -(pid_sat)){
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f76:	eef1 7a67 	vneg.f32	s15, s15
 8001f7a:	ee17 3a90 	vmov	r3, s15
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe faae 	bl	80004e0 <__aeabi_f2d>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4640      	mov	r0, r8
 8001f8a:	4649      	mov	r1, r9
 8001f8c:	f7fe fd72 	bl	8000a74 <__aeabi_dcmplt>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <Update_pid+0x176>
		is_sat = 1;
 8001f96:	2301      	movs	r3, #1
 8001f98:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 8001f9a:	69b8      	ldr	r0, [r7, #24]
 8001f9c:	f7fe faa0 	bl	80004e0 <__aeabi_f2d>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fa6:	f7fe faf3 	bl	8000590 <__aeabi_dmul>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4690      	mov	r8, r2
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	69b8      	ldr	r0, [r7, #24]
 8001fb4:	f7fe fa94 	bl	80004e0 <__aeabi_f2d>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fbe:	f7fe fae7 	bl	8000590 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4614      	mov	r4, r2
 8001fc8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001fcc:	4622      	mov	r2, r4
 8001fce:	462b      	mov	r3, r5
 8001fd0:	4640      	mov	r0, r8
 8001fd2:	4649      	mov	r1, r9
 8001fd4:	f7fe fd44 	bl	8000a60 <__aeabi_dcmpeq>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d011      	beq.n	8002002 <Update_pid+0x1de>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 8001fde:	7ffb      	ldrb	r3, [r7, #31]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d10e      	bne.n	8002002 <Update_pid+0x1de>
			pid -> y_n = p_term + d_term;
 8001fe4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fe8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff0:	ee17 0a90 	vmov	r0, s15
 8001ff4:	f7fe fa74 	bl	80004e0 <__aeabi_f2d>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	68f9      	ldr	r1, [r7, #12]
 8001ffe:	e9c1 2304 	strd	r2, r3, [r1, #16]
=======
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6178      	str	r0, [r7, #20]
 8002bb4:	ed87 0a04 	vstr	s0, [r7, #16]
 8002bb8:	edc7 0a03 	vstr	s1, [r7, #12]
 8002bbc:	ed87 1a02 	vstr	s2, [r7, #8]
 8002bc0:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 8002bdc:	6979      	ldr	r1, [r7, #20]
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 8002bf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bfc:	b08a      	sub	sp, #40	@ 0x28
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c06:	edc7 0a01 	vstr	s1, [r7, #4]
 8002c0a:	ed87 1a00 	vstr	s2, [r7]
//	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	edd3 7a00 	vldr	s15, [r3]
 8002c18:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c20:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 8002c24:	4b96      	ldr	r3, [pc, #600]	@ (8002e80 <Update_pid+0x288>)
 8002c26:	edd3 7a00 	vldr	s15, [r3]
 8002c2a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c38:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c46:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt / 2.0)*(e_n + e_n_1)) + y_n_1;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5a:	ee17 0a90 	vmov	r0, s15
 8002c5e:	f7fd fc3f 	bl	80004e0 <__aeabi_f2d>
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c6a:	f7fd fdbb 	bl	80007e4 <__aeabi_ddiv>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4690      	mov	r8, r2
 8002c74:	4699      	mov	r9, r3
 8002c76:	4b82      	ldr	r3, [pc, #520]	@ (8002e80 <Update_pid+0x288>)
 8002c78:	ed93 7a00 	vldr	s14, [r3]
 8002c7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c84:	ee17 0a90 	vmov	r0, s15
 8002c88:	f7fd fc2a 	bl	80004e0 <__aeabi_f2d>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4640      	mov	r0, r8
 8002c92:	4649      	mov	r1, r9
 8002c94:	f7fd fc7c 	bl	8000590 <__aeabi_dmul>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4690      	mov	r8, r2
 8002c9e:	4699      	mov	r9, r3
 8002ca0:	4b78      	ldr	r3, [pc, #480]	@ (8002e84 <Update_pid+0x28c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fc1b 	bl	80004e0 <__aeabi_f2d>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4640      	mov	r0, r8
 8002cb0:	4649      	mov	r1, r9
 8002cb2:	f7fd fab7 	bl	8000224 <__adddf3>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f7fd ff49 	bl	8000b54 <__aeabi_d2f>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	623b      	str	r3, [r7, #32]

	if(pid -> ki == 0){
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ccc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd4:	d102      	bne.n	8002cdc <Update_pid+0xe4>
		i_term = 0;
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ce2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cea:	d102      	bne.n	8002cf2 <Update_pid+0xfa>
		d_term = 0;
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 8002cf2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cf6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002cfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d06:	ee17 0a90 	vmov	r0, s15
 8002d0a:	f7fd fbe9 	bl	80004e0 <__aeabi_f2d>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	68f9      	ldr	r1, [r7, #12]
 8002d14:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t is_sat = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd fbdc 	bl	80004e0 <__aeabi_f2d>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4640      	mov	r0, r8
 8002d2e:	4649      	mov	r1, r9
 8002d30:	f7fd febe 	bl	8000ab0 <__aeabi_dcmpgt>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <Update_pid+0x148>
		is_sat = 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	77fb      	strb	r3, [r7, #31]
 8002d3e:	e016      	b.n	8002d6e <Update_pid+0x176>
	}
	else if(pid -> y_n < -(pid_sat)){
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8002d46:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d4a:	eef1 7a67 	vneg.f32	s15, s15
 8002d4e:	ee17 3a90 	vmov	r3, s15
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd fbc4 	bl	80004e0 <__aeabi_f2d>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4640      	mov	r0, r8
 8002d5e:	4649      	mov	r1, r9
 8002d60:	f7fd fe88 	bl	8000a74 <__aeabi_dcmplt>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <Update_pid+0x176>
		is_sat = 1;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 8002d6e:	69b8      	ldr	r0, [r7, #24]
 8002d70:	f7fd fbb6 	bl	80004e0 <__aeabi_f2d>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d7a:	f7fd fc09 	bl	8000590 <__aeabi_dmul>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4690      	mov	r8, r2
 8002d84:	4699      	mov	r9, r3
 8002d86:	69b8      	ldr	r0, [r7, #24]
 8002d88:	f7fd fbaa 	bl	80004e0 <__aeabi_f2d>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d92:	f7fd fbfd 	bl	8000590 <__aeabi_dmul>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4614      	mov	r4, r2
 8002d9c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002da0:	4622      	mov	r2, r4
 8002da2:	462b      	mov	r3, r5
 8002da4:	4640      	mov	r0, r8
 8002da6:	4649      	mov	r1, r9
 8002da8:	f7fd fe5a 	bl	8000a60 <__aeabi_dcmpeq>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d011      	beq.n	8002dd6 <Update_pid+0x1de>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d10e      	bne.n	8002dd6 <Update_pid+0x1de>
			pid -> y_n = p_term + d_term;
 8002db8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dbc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002dc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc4:	ee17 0a90 	vmov	r0, s15
 8002dc8:	f7fd fb8a 	bl	80004e0 <__aeabi_f2d>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	68f9      	ldr	r1, [r7, #12]
 8002dd2:	e9c1 2304 	strd	r2, r3, [r1, #16]
>>>>>>> Stashed changes
		}
	}
	// Plant saturation
	if(pid -> y_n > plant_sat){
<<<<<<< Updated upstream
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002008:	6838      	ldr	r0, [r7, #0]
 800200a:	f7fe fa69 	bl	80004e0 <__aeabi_f2d>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4620      	mov	r0, r4
 8002014:	4629      	mov	r1, r5
 8002016:	f7fe fd4b 	bl	8000ab0 <__aeabi_dcmpgt>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <Update_pid+0x20e>
		pid -> y_n = plant_sat;
 8002020:	6838      	ldr	r0, [r7, #0]
 8002022:	f7fe fa5d 	bl	80004e0 <__aeabi_f2d>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	68f9      	ldr	r1, [r7, #12]
 800202c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002030:	e022      	b.n	8002078 <Update_pid+0x254>
	}
	else if(pid -> y_n < -(plant_sat)){
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002038:	edd7 7a00 	vldr	s15, [r7]
 800203c:	eef1 7a67 	vneg.f32	s15, s15
 8002040:	ee17 3a90 	vmov	r3, s15
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fa4b 	bl	80004e0 <__aeabi_f2d>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4620      	mov	r0, r4
 8002050:	4629      	mov	r1, r5
 8002052:	f7fe fd0f 	bl	8000a74 <__aeabi_dcmplt>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00d      	beq.n	8002078 <Update_pid+0x254>
		pid -> y_n = (-(plant_sat));
 800205c:	edd7 7a00 	vldr	s15, [r7]
 8002060:	eef1 7a67 	vneg.f32	s15, s15
 8002064:	ee17 3a90 	vmov	r3, s15
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fa39 	bl	80004e0 <__aeabi_f2d>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	68f9      	ldr	r1, [r7, #12]
 8002074:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	f7fe fd67 	bl	8000b54 <__aeabi_d2f>
 8002086:	4603      	mov	r3, r0
 8002088:	4a09      	ldr	r2, [pc, #36]	@ (80020b0 <Update_pid+0x28c>)
 800208a:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 800208c:	4a07      	ldr	r2, [pc, #28]	@ (80020ac <Update_pid+0x288>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	6013      	str	r3, [r2, #0]
	return pid -> y_n;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fd12 	bl	8000ac4 <__aeabi_d2iz>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3728      	adds	r7, #40	@ 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020ac:	20000780 	.word	0x20000780
 80020b0:	20000784 	.word	0x20000784

080020b4 <Update_pwm>:
=======
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002ddc:	6838      	ldr	r0, [r7, #0]
 8002dde:	f7fd fb7f 	bl	80004e0 <__aeabi_f2d>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4620      	mov	r0, r4
 8002de8:	4629      	mov	r1, r5
 8002dea:	f7fd fe61 	bl	8000ab0 <__aeabi_dcmpgt>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <Update_pid+0x20e>
		pid -> y_n = plant_sat;
 8002df4:	6838      	ldr	r0, [r7, #0]
 8002df6:	f7fd fb73 	bl	80004e0 <__aeabi_f2d>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002e04:	e022      	b.n	8002e4c <Update_pid+0x254>
	}
	else if(pid -> y_n < -(plant_sat)){
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002e0c:	edd7 7a00 	vldr	s15, [r7]
 8002e10:	eef1 7a67 	vneg.f32	s15, s15
 8002e14:	ee17 3a90 	vmov	r3, s15
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fd fb61 	bl	80004e0 <__aeabi_f2d>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4620      	mov	r0, r4
 8002e24:	4629      	mov	r1, r5
 8002e26:	f7fd fe25 	bl	8000a74 <__aeabi_dcmplt>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00d      	beq.n	8002e4c <Update_pid+0x254>
		pid -> y_n = (-(plant_sat));
 8002e30:	edd7 7a00 	vldr	s15, [r7]
 8002e34:	eef1 7a67 	vneg.f32	s15, s15
 8002e38:	ee17 3a90 	vmov	r3, s15
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fd fb4f 	bl	80004e0 <__aeabi_f2d>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	68f9      	ldr	r1, [r7, #12]
 8002e48:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	f7fd fe7d 	bl	8000b54 <__aeabi_d2f>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4a09      	ldr	r2, [pc, #36]	@ (8002e84 <Update_pid+0x28c>)
 8002e5e:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 8002e60:	4a07      	ldr	r2, [pc, #28]	@ (8002e80 <Update_pid+0x288>)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	6013      	str	r3, [r2, #0]
	return pid -> y_n;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f7fd fe28 	bl	8000ac4 <__aeabi_d2iz>
 8002e74:	4603      	mov	r3, r0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3728      	adds	r7, #40	@ 0x28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e80:	20001138 	.word	0x20001138
 8002e84:	2000113c 	.word	0x2000113c

08002e88 <Update_pwm>:
>>>>>>> Stashed changes
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
<<<<<<< Updated upstream
 80020b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020b8:	b08b      	sub	sp, #44	@ 0x2c
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80020be:	61fa      	str	r2, [r7, #28]
 80020c0:	461a      	mov	r2, r3
 80020c2:	460b      	mov	r3, r1
 80020c4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80020c6:	4613      	mov	r3, r2
 80020c8:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 80020ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d111      	bne.n	80020f4 <Update_pwm+0x40>
 80020d0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020d2:	f7fe f9f3 	bl	80004bc <__aeabi_i2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	613a      	str	r2, [r7, #16]
 80020dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	681c      	ldr	r4, [r3, #0]
 80020e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020ea:	f7fe fd13 	bl	8000b14 <__aeabi_d2uiz>
 80020ee:	4603      	mov	r3, r0
 80020f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80020f2:	e061      	b.n	80021b8 <Update_pwm+0x104>
 80020f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d111      	bne.n	800211e <Update_pwm+0x6a>
 80020fa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020fc:	f7fe f9de 	bl	80004bc <__aeabi_i2d>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	60ba      	str	r2, [r7, #8]
 8002106:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	681c      	ldr	r4, [r3, #0]
 8002110:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002114:	f7fe fcfe 	bl	8000b14 <__aeabi_d2uiz>
 8002118:	4603      	mov	r3, r0
 800211a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800211c:	e04c      	b.n	80021b8 <Update_pwm+0x104>
 800211e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002120:	2b08      	cmp	r3, #8
 8002122:	d111      	bne.n	8002148 <Update_pwm+0x94>
 8002124:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002126:	f7fe f9c9 	bl	80004bc <__aeabi_i2d>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	603a      	str	r2, [r7, #0]
 8002130:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	681c      	ldr	r4, [r3, #0]
 800213a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800213e:	f7fe fce9 	bl	8000b14 <__aeabi_d2uiz>
 8002142:	4603      	mov	r3, r0
 8002144:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002146:	e037      	b.n	80021b8 <Update_pwm+0x104>
 8002148:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d110      	bne.n	8002170 <Update_pwm+0xbc>
 800214e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002150:	f7fe f9b4 	bl	80004bc <__aeabi_i2d>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4615      	mov	r5, r2
 800215a:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	681c      	ldr	r4, [r3, #0]
 8002162:	4628      	mov	r0, r5
 8002164:	4631      	mov	r1, r6
 8002166:	f7fe fcd5 	bl	8000b14 <__aeabi_d2uiz>
 800216a:	4603      	mov	r3, r0
 800216c:	6423      	str	r3, [r4, #64]	@ 0x40
 800216e:	e023      	b.n	80021b8 <Update_pwm+0x104>
 8002170:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002172:	2b10      	cmp	r3, #16
 8002174:	d110      	bne.n	8002198 <Update_pwm+0xe4>
 8002176:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002178:	f7fe f9a0 	bl	80004bc <__aeabi_i2d>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4692      	mov	sl, r2
 8002182:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	681c      	ldr	r4, [r3, #0]
 800218a:	4650      	mov	r0, sl
 800218c:	4659      	mov	r1, fp
 800218e:	f7fe fcc1 	bl	8000b14 <__aeabi_d2uiz>
 8002192:	4603      	mov	r3, r0
 8002194:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002196:	e00f      	b.n	80021b8 <Update_pwm+0x104>
 8002198:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800219a:	f7fe f98f 	bl	80004bc <__aeabi_i2d>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4690      	mov	r8, r2
 80021a4:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	681c      	ldr	r4, [r3, #0]
 80021ac:	4640      	mov	r0, r8
 80021ae:	4649      	mov	r1, r9
 80021b0:	f7fe fcb0 	bl	8000b14 <__aeabi_d2uiz>
 80021b4:	4603      	mov	r3, r0
 80021b6:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 80021b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	da06      	bge.n	80021cc <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 80021be:	8c3b      	ldrh	r3, [r7, #32]
 80021c0:	2200      	movs	r2, #0
 80021c2:	4619      	mov	r1, r3
 80021c4:	69f8      	ldr	r0, [r7, #28]
 80021c6:	f003 f81b 	bl	8005200 <HAL_GPIO_WritePin>
=======
 8002e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e8c:	b08b      	sub	sp, #44	@ 0x2c
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6278      	str	r0, [r7, #36]	@ 0x24
 8002e92:	61fa      	str	r2, [r7, #28]
 8002e94:	461a      	mov	r2, r3
 8002e96:	460b      	mov	r3, r1
 8002e98:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 8002e9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d111      	bne.n	8002ec8 <Update_pwm+0x40>
 8002ea4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002ea6:	f7fd fb09 	bl	80004bc <__aeabi_i2d>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	613a      	str	r2, [r7, #16]
 8002eb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	681c      	ldr	r4, [r3, #0]
 8002eba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ebe:	f7fd fe29 	bl	8000b14 <__aeabi_d2uiz>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ec6:	e061      	b.n	8002f8c <Update_pwm+0x104>
 8002ec8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d111      	bne.n	8002ef2 <Update_pwm+0x6a>
 8002ece:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002ed0:	f7fd faf4 	bl	80004bc <__aeabi_i2d>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	60ba      	str	r2, [r7, #8]
 8002eda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee2:	681c      	ldr	r4, [r3, #0]
 8002ee4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ee8:	f7fd fe14 	bl	8000b14 <__aeabi_d2uiz>
 8002eec:	4603      	mov	r3, r0
 8002eee:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002ef0:	e04c      	b.n	8002f8c <Update_pwm+0x104>
 8002ef2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d111      	bne.n	8002f1c <Update_pwm+0x94>
 8002ef8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002efa:	f7fd fadf 	bl	80004bc <__aeabi_i2d>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	603a      	str	r2, [r7, #0]
 8002f04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	681c      	ldr	r4, [r3, #0]
 8002f0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f12:	f7fd fdff 	bl	8000b14 <__aeabi_d2uiz>
 8002f16:	4603      	mov	r3, r0
 8002f18:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002f1a:	e037      	b.n	8002f8c <Update_pwm+0x104>
 8002f1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	d110      	bne.n	8002f44 <Update_pwm+0xbc>
 8002f22:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002f24:	f7fd faca 	bl	80004bc <__aeabi_i2d>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4615      	mov	r5, r2
 8002f2e:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f34:	681c      	ldr	r4, [r3, #0]
 8002f36:	4628      	mov	r0, r5
 8002f38:	4631      	mov	r1, r6
 8002f3a:	f7fd fdeb 	bl	8000b14 <__aeabi_d2uiz>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	6423      	str	r3, [r4, #64]	@ 0x40
 8002f42:	e023      	b.n	8002f8c <Update_pwm+0x104>
 8002f44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d110      	bne.n	8002f6c <Update_pwm+0xe4>
 8002f4a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002f4c:	f7fd fab6 	bl	80004bc <__aeabi_i2d>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4692      	mov	sl, r2
 8002f56:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	681c      	ldr	r4, [r3, #0]
 8002f5e:	4650      	mov	r0, sl
 8002f60:	4659      	mov	r1, fp
 8002f62:	f7fd fdd7 	bl	8000b14 <__aeabi_d2uiz>
 8002f66:	4603      	mov	r3, r0
 8002f68:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002f6a:	e00f      	b.n	8002f8c <Update_pwm+0x104>
 8002f6c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002f6e:	f7fd faa5 	bl	80004bc <__aeabi_i2d>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4690      	mov	r8, r2
 8002f78:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	681c      	ldr	r4, [r3, #0]
 8002f80:	4640      	mov	r0, r8
 8002f82:	4649      	mov	r1, r9
 8002f84:	f7fd fdc6 	bl	8000b14 <__aeabi_d2uiz>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 8002f8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	da06      	bge.n	8002fa0 <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 8002f92:	8c3b      	ldrh	r3, [r7, #32]
 8002f94:	2200      	movs	r2, #0
 8002f96:	4619      	mov	r1, r3
 8002f98:	69f8      	ldr	r0, [r7, #28]
 8002f9a:	f003 fa7b 	bl	8006494 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
<<<<<<< Updated upstream
 80021ca:	e005      	b.n	80021d8 <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 80021cc:	8c3b      	ldrh	r3, [r7, #32]
 80021ce:	2201      	movs	r2, #1
 80021d0:	4619      	mov	r1, r3
 80021d2:	69f8      	ldr	r0, [r7, #28]
 80021d4:	f003 f814 	bl	8005200 <HAL_GPIO_WritePin>
}
 80021d8:	bf00      	nop
 80021da:	372c      	adds	r7, #44	@ 0x2c
 80021dc:	46bd      	mov	sp, r7
 80021de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080021e2 <QEI_init>:
=======
 8002f9e:	e005      	b.n	8002fac <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 8002fa0:	8c3b      	ldrh	r3, [r7, #32]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	69f8      	ldr	r0, [r7, #28]
 8002fa8:	f003 fa74 	bl	8006494 <HAL_GPIO_WritePin>
}
 8002fac:	bf00      	nop
 8002fae:	372c      	adds	r7, #44	@ 0x2c
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002fb6 <QEI_init>:
>>>>>>> Stashed changes
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
<<<<<<< Updated upstream
 80021e2:	b480      	push	{r7}
 80021e4:	b085      	sub	sp, #20
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8002214:	68f9      	ldr	r1, [r7, #12]
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 800223a:	68f9      	ldr	r1, [r7, #12]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0.0;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps = 0.0;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> mmps = 0.0;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
=======
 8002fb6:	b480      	push	{r7}
 8002fb8:	b085      	sub	sp, #20
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8002fe8:	68f9      	ldr	r1, [r7, #12]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei -> rpm = 0.0;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	@ 0x30
	qei -> radps = 0.0;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	635a      	str	r2, [r3, #52]	@ 0x34
	qei -> mmps = 0.0;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radpss = 0.0;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	651a      	str	r2, [r3, #80]	@ 0x50
	qei -> rpms = 0.0;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	64da      	str	r2, [r3, #76]	@ 0x4c
	qei -> velocity_value[NEW] = 0;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> velocity_value[OLD] = 0;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40
	qei -> ppss = 0.0;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	649a      	str	r2, [r3, #72]	@ 0x48
	qei -> mmpss = 0.0;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	655a      	str	r2, [r3, #84]	@ 0x54


}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	0000      	movs	r0, r0
 800306c:	0000      	movs	r0, r0
	...

08003070 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 8003070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	461a      	mov	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	0fd9      	lsrs	r1, r3, #31
 80030a0:	440b      	add	r3, r1
 80030a2:	105b      	asrs	r3, r3, #1
 80030a4:	429a      	cmp	r2, r3
 80030a6:	dd06      	ble.n	80030b6 <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	1ad2      	subs	r2, r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	425b      	negs	r3, r3
 80030c0:	0fd9      	lsrs	r1, r3, #31
 80030c2:	440b      	add	r3, r1
 80030c4:	105b      	asrs	r3, r3, #1
 80030c6:	429a      	cmp	r2, r3
 80030c8:	da06      	bge.n	80030d8 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	441a      	add	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	615a      	str	r2, [r3, #20]
	}
	// Update velocity at difference unit
	qei -> pps = (float)qei -> diff_counter_value * (float)(qei -> freq); // Difference counter * frequency
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	ee07 3a90 	vmov	s15, r3
 80030ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	qei -> radps = qei -> pps * 2.0 * M_PI / (float)(qei -> ppr);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd f9ee 	bl	80004e0 <__aeabi_f2d>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	f7fd f88c 	bl	8000224 <__adddf3>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4610      	mov	r0, r2
 8003112:	4619      	mov	r1, r3
 8003114:	a3da      	add	r3, pc, #872	@ (adr r3, 8003480 <Update_qei+0x410>)
 8003116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311a:	f7fd fa39 	bl	8000590 <__aeabi_dmul>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4692      	mov	sl, r2
 8003124:	469b      	mov	fp, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003132:	ee17 0a90 	vmov	r0, s15
 8003136:	f7fd f9d3 	bl	80004e0 <__aeabi_f2d>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4650      	mov	r0, sl
 8003140:	4659      	mov	r1, fp
 8003142:	f7fd fb4f 	bl	80007e4 <__aeabi_ddiv>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4610      	mov	r0, r2
 800314c:	4619      	mov	r1, r3
 800314e:	f7fd fd01 	bl	8000b54 <__aeabi_d2f>
 8003152:	4602      	mov	r2, r0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	635a      	str	r2, [r3, #52]	@ 0x34
	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd f9bf 	bl	80004e0 <__aeabi_f2d>
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	4bc8      	ldr	r3, [pc, #800]	@ (8003488 <Update_qei+0x418>)
 8003168:	f7fd fa12 	bl	8000590 <__aeabi_dmul>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4692      	mov	sl, r2
 8003172:	469b      	mov	fp, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	ee07 3a90 	vmov	s15, r3
 800317c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003180:	ee17 0a90 	vmov	r0, s15
 8003184:	f7fd f9ac 	bl	80004e0 <__aeabi_f2d>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4650      	mov	r0, sl
 800318e:	4659      	mov	r1, fp
 8003190:	f7fd fb28 	bl	80007e4 <__aeabi_ddiv>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4610      	mov	r0, r2
 800319a:	4619      	mov	r1, r3
 800319c:	f7fd fcda 	bl	8000b54 <__aeabi_d2f>
 80031a0:	4602      	mov	r2, r0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	631a      	str	r2, [r3, #48]	@ 0x30
	qei -> mmps = qei -> pps * 16.0 / (float)(qei -> ppr);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd f998 	bl	80004e0 <__aeabi_f2d>
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	4bb5      	ldr	r3, [pc, #724]	@ (800348c <Update_qei+0x41c>)
 80031b6:	f7fd f9eb 	bl	8000590 <__aeabi_dmul>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4692      	mov	sl, r2
 80031c0:	469b      	mov	fp, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ce:	ee17 0a90 	vmov	r0, s15
 80031d2:	f7fd f985 	bl	80004e0 <__aeabi_f2d>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4650      	mov	r0, sl
 80031dc:	4659      	mov	r1, fp
 80031de:	f7fd fb01 	bl	80007e4 <__aeabi_ddiv>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4610      	mov	r0, r2
 80031e8:	4619      	mov	r1, r3
 80031ea:	f7fd fcb3 	bl	8000b54 <__aeabi_d2f>
 80031ee:	4602      	mov	r2, r0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	639a      	str	r2, [r3, #56]	@ 0x38

	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	6949      	ldr	r1, [r1, #20]
 80031fe:	17c8      	asrs	r0, r1, #31
 8003200:	460c      	mov	r4, r1
 8003202:	4605      	mov	r5, r0
 8003204:	eb12 0804 	adds.w	r8, r2, r4
 8003208:	eb43 0905 	adc.w	r9, r3, r5
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	e9c3 8906 	strd	r8, r9, [r3, #24]
	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f962 	bl	80004e0 <__aeabi_f2d>
 800321c:	4604      	mov	r4, r0
 800321e:	460d      	mov	r5, r1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	ee07 3a90 	vmov	s15, r3
 8003228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800322c:	ee17 0a90 	vmov	r0, s15
 8003230:	f7fd f956 	bl	80004e0 <__aeabi_f2d>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	f7fc fff4 	bl	8000224 <__adddf3>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	a38e      	add	r3, pc, #568	@ (adr r3, 8003480 <Update_qei+0x410>)
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	f7fd f9a1 	bl	8000590 <__aeabi_dmul>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4690      	mov	r8, r2
 8003254:	4699      	mov	r9, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003262:	ee17 0a90 	vmov	r0, s15
 8003266:	f7fd f93b 	bl	80004e0 <__aeabi_f2d>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4640      	mov	r0, r8
 8003270:	4649      	mov	r1, r9
 8003272:	f7fd fab7 	bl	80007e4 <__aeabi_ddiv>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4620      	mov	r0, r4
 800327c:	4629      	mov	r1, r5
 800327e:	f7fc ffd1 	bl	8000224 <__adddf3>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4610      	mov	r0, r2
 8003288:	4619      	mov	r1, r3
 800328a:	f7fd fc63 	bl	8000b54 <__aeabi_d2f>
 800328e:	4602      	mov	r2, r0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	ed93 7a08 	vldr	s14, [r3, #32]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80032b2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80032b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	edc3 7a08 	vstr	s15, [r3, #32]
	qei -> mm += (float)qei -> diff_counter_value * 16.0 / (float)(qei -> ppr); // for lead 16 mm.
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd f90b 	bl	80004e0 <__aeabi_f2d>
 80032ca:	4604      	mov	r4, r0
 80032cc:	460d      	mov	r5, r1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032da:	ee17 0a90 	vmov	r0, s15
 80032de:	f7fd f8ff 	bl	80004e0 <__aeabi_f2d>
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	4b69      	ldr	r3, [pc, #420]	@ (800348c <Update_qei+0x41c>)
 80032e8:	f7fd f952 	bl	8000590 <__aeabi_dmul>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4690      	mov	r8, r2
 80032f2:	4699      	mov	r9, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003300:	ee17 0a90 	vmov	r0, s15
 8003304:	f7fd f8ec 	bl	80004e0 <__aeabi_f2d>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4640      	mov	r0, r8
 800330e:	4649      	mov	r1, r9
 8003310:	f7fd fa68 	bl	80007e4 <__aeabi_ddiv>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4620      	mov	r0, r4
 800331a:	4629      	mov	r1, r5
 800331c:	f7fc ff82 	bl	8000224 <__adddf3>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4610      	mov	r0, r2
 8003326:	4619      	mov	r1, r3
 8003328:	f7fd fc14 	bl	8000b54 <__aeabi_d2f>
 800332c:	4602      	mov	r2, r0
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	629a      	str	r2, [r3, #40]	@ 0x28

	// Update acceleration at difference unit
	qei -> velocity_value[NEW] = qei -> pps;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> diff_velocity_value = qei -> velocity_value[NEW] - qei -> velocity_value[OLD];
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	qei -> ppss = qei -> diff_velocity_value * (float)(qei -> freq); // Difference of velocity * frequency
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	ee07 3a90 	vmov	s15, r3
 800335e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	qei -> radpss = qei -> ppss * 2.0 * M_PI / (float)(qei -> ppr);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd f8b5 	bl	80004e0 <__aeabi_f2d>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	f7fc ff53 	bl	8000224 <__adddf3>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	a33e      	add	r3, pc, #248	@ (adr r3, 8003480 <Update_qei+0x410>)
 8003388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338c:	f7fd f900 	bl	8000590 <__aeabi_dmul>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4614      	mov	r4, r2
 8003396:	461d      	mov	r5, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	ee07 3a90 	vmov	s15, r3
 80033a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033a4:	ee17 0a90 	vmov	r0, s15
 80033a8:	f7fd f89a 	bl	80004e0 <__aeabi_f2d>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4620      	mov	r0, r4
 80033b2:	4629      	mov	r1, r5
 80033b4:	f7fd fa16 	bl	80007e4 <__aeabi_ddiv>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	f7fd fbc8 	bl	8000b54 <__aeabi_d2f>
 80033c4:	4602      	mov	r2, r0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	651a      	str	r2, [r3, #80]	@ 0x50
	qei -> rpms = qei -> ppss * 60.0 / (float)(qei -> ppr);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fd f886 	bl	80004e0 <__aeabi_f2d>
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003488 <Update_qei+0x418>)
 80033da:	f7fd f8d9 	bl	8000590 <__aeabi_dmul>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4614      	mov	r4, r2
 80033e4:	461d      	mov	r5, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033f2:	ee17 0a90 	vmov	r0, s15
 80033f6:	f7fd f873 	bl	80004e0 <__aeabi_f2d>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4620      	mov	r0, r4
 8003400:	4629      	mov	r1, r5
 8003402:	f7fd f9ef 	bl	80007e4 <__aeabi_ddiv>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4610      	mov	r0, r2
 800340c:	4619      	mov	r1, r3
 800340e:	f7fd fba1 	bl	8000b54 <__aeabi_d2f>
 8003412:	4602      	mov	r2, r0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	64da      	str	r2, [r3, #76]	@ 0x4c
	qei -> mmpss = qei -> ppss * 16.0 / (float)(qei -> ppr); // Acceleration in mm/s^2
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd f85f 	bl	80004e0 <__aeabi_f2d>
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	4b19      	ldr	r3, [pc, #100]	@ (800348c <Update_qei+0x41c>)
 8003428:	f7fd f8b2 	bl	8000590 <__aeabi_dmul>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4614      	mov	r4, r2
 8003432:	461d      	mov	r5, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	ee07 3a90 	vmov	s15, r3
 800343c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003440:	ee17 0a90 	vmov	r0, s15
 8003444:	f7fd f84c 	bl	80004e0 <__aeabi_f2d>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4620      	mov	r0, r4
 800344e:	4629      	mov	r1, r5
 8003450:	f7fd f9c8 	bl	80007e4 <__aeabi_ddiv>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	f7fd fb7a 	bl	8000b54 <__aeabi_d2f>
 8003460:	4602      	mov	r2, r0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> Stashed changes

0800226c <Reset_qei>:
	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
<<<<<<< Updated upstream

}

void Reset_qei(QEI* qei){
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	qei -> counter_value[NEW] = 0;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	621a      	str	r2, [r3, #32]
	qei -> pps = 0;
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps =0;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <Get_mmps>:

float32_t Get_mmps(QEI* qei){
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
	return qei -> mmps;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	ee07 3a90 	vmov	s15, r3
}
 80022de:	eeb0 0a67 	vmov.f32	s0, s15
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_MspInit>:
=======
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	611a      	str	r2, [r3, #16]
	qei -> velocity_value[OLD] = qei -> velocity_value[NEW];
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003480:	54442d18 	.word	0x54442d18
 8003484:	400921fb 	.word	0x400921fb
 8003488:	404e0000 	.word	0x404e0000
 800348c:	40300000 	.word	0x40300000

08003490 <Reset_qei>:

void Reset_qei(QEI* qei){
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	qei -> counter_value[NEW] = 0;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei -> rpm = 0.0;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	@ 0x30
	qei -> radps = 0.0;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	635a      	str	r2, [r3, #52]	@ 0x34
	qei -> mmps = 0.0;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radpss = 0.0;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	651a      	str	r2, [r3, #80]	@ 0x50
	qei -> rpms = 0.0;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	64da      	str	r2, [r3, #76]	@ 0x4c
	qei -> mmpss = 0.0;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <Get_mmps>:
float32_t Get_mmpss(QEI* qei){
	return qei -> mmpss;
}

float32_t Get_mmps(QEI* qei){
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	return qei -> mmps;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003520:	ee07 3a90 	vmov	s15, r3
}
 8003524:	eeb0 0a67 	vmov.f32	s0, s15
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <HAL_MspInit>:
>>>>>>> Stashed changes
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
=======
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 80022f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002330 <HAL_MspInit+0x44>)
 80022f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002330 <HAL_MspInit+0x44>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80022fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <HAL_MspInit+0x44>)
 8002300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <HAL_MspInit+0x44>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230e:	4a08      	ldr	r2, [pc, #32]	@ (8002330 <HAL_MspInit+0x44>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002314:	6593      	str	r3, [r2, #88]	@ 0x58
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_MspInit+0x44>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
=======
 800353a:	4b0f      	ldr	r3, [pc, #60]	@ (8003578 <HAL_MspInit+0x44>)
 800353c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353e:	4a0e      	ldr	r2, [pc, #56]	@ (8003578 <HAL_MspInit+0x44>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6613      	str	r3, [r2, #96]	@ 0x60
 8003546:	4b0c      	ldr	r3, [pc, #48]	@ (8003578 <HAL_MspInit+0x44>)
 8003548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	4b09      	ldr	r3, [pc, #36]	@ (8003578 <HAL_MspInit+0x44>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003556:	4a08      	ldr	r2, [pc, #32]	@ (8003578 <HAL_MspInit+0x44>)
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800355c:	6593      	str	r3, [r2, #88]	@ 0x58
 800355e:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <HAL_MspInit+0x44>)
 8003560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
<<<<<<< Updated upstream
 8002322:	f003 f841 	bl	80053a8 <HAL_PWREx_DisableUCPDDeadBattery>
=======
 800356a:	f003 f867 	bl	800663c <HAL_PWREx_DisableUCPDDeadBattery>
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000

08002334 <HAL_ADC_MspInit>:
=======
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000

0800357c <HAL_ADC_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< Updated upstream
 8002334:	b580      	push	{r7, lr}
 8002336:	b09e      	sub	sp, #120	@ 0x78
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800234c:	f107 0310 	add.w	r3, r7, #16
 8002350:	2254      	movs	r2, #84	@ 0x54
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f007 f97b 	bl	8009650 <memset>
  if(hadc->Instance==ADC1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002362:	d167      	bne.n	8002434 <HAL_ADC_MspInit+0x100>
=======
 800357c:	b580      	push	{r7, lr}
 800357e:	b09e      	sub	sp, #120	@ 0x78
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003594:	f107 0310 	add.w	r3, r7, #16
 8003598:	2254      	movs	r2, #84	@ 0x54
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f007 ffbf 	bl	800b520 <memset>
  if(hadc->Instance==ADC1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035aa:	d167      	bne.n	800367c <HAL_ADC_MspInit+0x100>
>>>>>>> Stashed changes

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
<<<<<<< Updated upstream
 8002364:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002368:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800236a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800236e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002370:	f107 0310 	add.w	r3, r7, #16
 8002374:	4618      	mov	r0, r3
 8002376:	f003 fd55 	bl	8005e24 <HAL_RCCEx_PeriphCLKConfig>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002380:	f7ff fd24 	bl	8001dcc <Error_Handler>
=======
 80035ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80035b2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80035b6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035b8:	f107 0310 	add.w	r3, r7, #16
 80035bc:	4618      	mov	r0, r3
 80035be:	f003 fd7b 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80035c8:	f7ff faea 	bl	8002ba0 <Error_Handler>
>>>>>>> Stashed changes
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
<<<<<<< Updated upstream
 8002384:	4b2d      	ldr	r3, [pc, #180]	@ (800243c <HAL_ADC_MspInit+0x108>)
 8002386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002388:	4a2c      	ldr	r2, [pc, #176]	@ (800243c <HAL_ADC_MspInit+0x108>)
 800238a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800238e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002390:	4b2a      	ldr	r3, [pc, #168]	@ (800243c <HAL_ADC_MspInit+0x108>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002394:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239c:	4b27      	ldr	r3, [pc, #156]	@ (800243c <HAL_ADC_MspInit+0x108>)
 800239e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a0:	4a26      	ldr	r2, [pc, #152]	@ (800243c <HAL_ADC_MspInit+0x108>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023a8:	4b24      	ldr	r3, [pc, #144]	@ (800243c <HAL_ADC_MspInit+0x108>)
 80023aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
=======
 80035cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003684 <HAL_ADC_MspInit+0x108>)
 80035ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003684 <HAL_ADC_MspInit+0x108>)
 80035d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80035d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003684 <HAL_ADC_MspInit+0x108>)
 80035da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e4:	4b27      	ldr	r3, [pc, #156]	@ (8003684 <HAL_ADC_MspInit+0x108>)
 80035e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e8:	4a26      	ldr	r2, [pc, #152]	@ (8003684 <HAL_ADC_MspInit+0x108>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035f0:	4b24      	ldr	r3, [pc, #144]	@ (8003684 <HAL_ADC_MspInit+0x108>)
 80035f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
<<<<<<< Updated upstream
 80023b4:	2301      	movs	r3, #1
 80023b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b8:	2303      	movs	r3, #3
 80023ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 80023c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023c4:	4619      	mov	r1, r3
 80023c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ca:	f002 fd7f 	bl	8004ecc <HAL_GPIO_Init>
=======
 80035fc:	2301      	movs	r3, #1
 80035fe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003600:	2303      	movs	r3, #3
 8003602:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	2300      	movs	r3, #0
 8003606:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8003608:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800360c:	4619      	mov	r1, r3
 800360e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003612:	f002 fda5 	bl	8006160 <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
<<<<<<< Updated upstream
 80023ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002444 <HAL_ADC_MspInit+0x110>)
 80023d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80023d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023d6:	2205      	movs	r2, #5
 80023d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023da:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e0:	4b17      	ldr	r3, [pc, #92]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023e6:	4b16      	ldr	r3, [pc, #88]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023e8:	2280      	movs	r2, #128	@ 0x80
 80023ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023ec:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023f4:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023fc:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023fe:	2220      	movs	r2, #32
 8002400:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002402:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 8002404:	2200      	movs	r2, #0
 8002406:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002408:	480d      	ldr	r0, [pc, #52]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 800240a:	f002 fa2d 	bl	8004868 <HAL_DMA_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002414:	f7ff fcda 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a09      	ldr	r2, [pc, #36]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 800241c:	655a      	str	r2, [r3, #84]	@ 0x54
 800241e:	4a08      	ldr	r2, [pc, #32]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2100      	movs	r1, #0
 8002428:	2012      	movs	r0, #18
 800242a:	f002 f9e8 	bl	80047fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800242e:	2012      	movs	r0, #18
 8002430:	f002 f9ff 	bl	8004832 <HAL_NVIC_EnableIRQ>
=======
 8003616:	4b1c      	ldr	r3, [pc, #112]	@ (8003688 <HAL_ADC_MspInit+0x10c>)
 8003618:	4a1c      	ldr	r2, [pc, #112]	@ (800368c <HAL_ADC_MspInit+0x110>)
 800361a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800361c:	4b1a      	ldr	r3, [pc, #104]	@ (8003688 <HAL_ADC_MspInit+0x10c>)
 800361e:	2205      	movs	r2, #5
 8003620:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003622:	4b19      	ldr	r3, [pc, #100]	@ (8003688 <HAL_ADC_MspInit+0x10c>)
 8003624:	2200      	movs	r2, #0
 8003626:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003628:	4b17      	ldr	r3, [pc, #92]	@ (8003688 <HAL_ADC_MspInit+0x10c>)
 800362a:	2200      	movs	r2, #0
 800362c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800362e:	4b16      	ldr	r3, [pc, #88]	@ (8003688 <HAL_ADC_MspInit+0x10c>)
 8003630:	2280      	movs	r2, #128	@ 0x80
 8003632:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003634:	4b14      	ldr	r3, [pc, #80]	@ (8003688 <HAL_ADC_MspInit+0x10c>)
 8003636:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800363a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800363c:	4b12      	ldr	r3, [pc, #72]	@ (8003688 <HAL_ADC_MspInit+0x10c>)
 800363e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003642:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003644:	4b10      	ldr	r3, [pc, #64]	@ (8003688 <HAL_ADC_MspInit+0x10c>)
 8003646:	2220      	movs	r2, #32
 8003648:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800364a:	4b0f      	ldr	r3, [pc, #60]	@ (8003688 <HAL_ADC_MspInit+0x10c>)
 800364c:	2200      	movs	r2, #0
 800364e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003650:	480d      	ldr	r0, [pc, #52]	@ (8003688 <HAL_ADC_MspInit+0x10c>)
 8003652:	f002 fa53 	bl	8005afc <HAL_DMA_Init>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800365c:	f7ff faa0 	bl	8002ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a09      	ldr	r2, [pc, #36]	@ (8003688 <HAL_ADC_MspInit+0x10c>)
 8003664:	655a      	str	r2, [r3, #84]	@ 0x54
 8003666:	4a08      	ldr	r2, [pc, #32]	@ (8003688 <HAL_ADC_MspInit+0x10c>)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800366c:	2200      	movs	r2, #0
 800366e:	2100      	movs	r1, #0
 8003670:	2012      	movs	r0, #18
 8003672:	f002 fa0e 	bl	8005a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003676:	2012      	movs	r0, #18
 8003678:	f002 fa25 	bl	8005ac6 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8002434:	bf00      	nop
 8002436:	3778      	adds	r7, #120	@ 0x78
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	200000ac 	.word	0x200000ac
 8002444:	40020008 	.word	0x40020008

08002448 <HAL_TIM_Base_MspInit>:
=======
 800367c:	bf00      	nop
 800367e:	3778      	adds	r7, #120	@ 0x78
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	2000080c 	.word	0x2000080c
 800368c:	40020008 	.word	0x40020008

08003690 <HAL_TIM_Base_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< Updated upstream
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a27      	ldr	r2, [pc, #156]	@ (80024f4 <HAL_TIM_Base_MspInit+0xac>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d114      	bne.n	8002484 <HAL_TIM_Base_MspInit+0x3c>
=======
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a34      	ldr	r2, [pc, #208]	@ (8003770 <HAL_TIM_Base_MspInit+0xe0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d114      	bne.n	80036cc <HAL_TIM_Base_MspInit+0x3c>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< Updated upstream
 800245a:	4b27      	ldr	r3, [pc, #156]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 800245c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800245e:	4a26      	ldr	r2, [pc, #152]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 8002460:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002464:	6613      	str	r3, [r2, #96]	@ 0x60
 8002466:	4b24      	ldr	r3, [pc, #144]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 8002468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800246a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	2019      	movs	r0, #25
 8002478:	f002 f9c1 	bl	80047fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800247c:	2019      	movs	r0, #25
 800247e:	f002 f9d8 	bl	8004832 <HAL_NVIC_EnableIRQ>
=======
 80036a2:	4b34      	ldr	r3, [pc, #208]	@ (8003774 <HAL_TIM_Base_MspInit+0xe4>)
 80036a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a6:	4a33      	ldr	r2, [pc, #204]	@ (8003774 <HAL_TIM_Base_MspInit+0xe4>)
 80036a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80036ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80036ae:	4b31      	ldr	r3, [pc, #196]	@ (8003774 <HAL_TIM_Base_MspInit+0xe4>)
 80036b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80036ba:	2200      	movs	r2, #0
 80036bc:	2100      	movs	r1, #0
 80036be:	2019      	movs	r0, #25
 80036c0:	f002 f9e7 	bl	8005a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80036c4:	2019      	movs	r0, #25
 80036c6:	f002 f9fe 	bl	8005ac6 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8002482:	e032      	b.n	80024ea <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1c      	ldr	r2, [pc, #112]	@ (80024fc <HAL_TIM_Base_MspInit+0xb4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d114      	bne.n	80024b8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800248e:	4b1a      	ldr	r3, [pc, #104]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	4a19      	ldr	r2, [pc, #100]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	6593      	str	r3, [r2, #88]	@ 0x58
 800249a:	4b17      	ldr	r3, [pc, #92]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	201d      	movs	r0, #29
 80024ac:	f002 f9a7 	bl	80047fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024b0:	201d      	movs	r0, #29
 80024b2:	f002 f9be 	bl	8004832 <HAL_NVIC_EnableIRQ>
}
 80024b6:	e018      	b.n	80024ea <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a10      	ldr	r2, [pc, #64]	@ (8002500 <HAL_TIM_Base_MspInit+0xb8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d113      	bne.n	80024ea <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024c2:	4b0d      	ldr	r3, [pc, #52]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 80024c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c6:	4a0c      	ldr	r2, [pc, #48]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80024ce:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 80024d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	2019      	movs	r0, #25
 80024e0:	f002 f98d 	bl	80047fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80024e4:	2019      	movs	r0, #25
 80024e6:	f002 f9a4 	bl	8004832 <HAL_NVIC_EnableIRQ>
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40000400 	.word	0x40000400
 8002500:	40014400 	.word	0x40014400

08002504 <HAL_TIM_Encoder_MspInit>:
=======
 80036ca:	e04c      	b.n	8003766 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a29      	ldr	r2, [pc, #164]	@ (8003778 <HAL_TIM_Base_MspInit+0xe8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d114      	bne.n	8003700 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036d6:	4b27      	ldr	r3, [pc, #156]	@ (8003774 <HAL_TIM_Base_MspInit+0xe4>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036da:	4a26      	ldr	r2, [pc, #152]	@ (8003774 <HAL_TIM_Base_MspInit+0xe4>)
 80036dc:	f043 0302 	orr.w	r3, r3, #2
 80036e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80036e2:	4b24      	ldr	r3, [pc, #144]	@ (8003774 <HAL_TIM_Base_MspInit+0xe4>)
 80036e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80036ee:	2200      	movs	r2, #0
 80036f0:	2100      	movs	r1, #0
 80036f2:	201d      	movs	r0, #29
 80036f4:	f002 f9cd 	bl	8005a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80036f8:	201d      	movs	r0, #29
 80036fa:	f002 f9e4 	bl	8005ac6 <HAL_NVIC_EnableIRQ>
}
 80036fe:	e032      	b.n	8003766 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1d      	ldr	r2, [pc, #116]	@ (800377c <HAL_TIM_Base_MspInit+0xec>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d114      	bne.n	8003734 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800370a:	4b1a      	ldr	r3, [pc, #104]	@ (8003774 <HAL_TIM_Base_MspInit+0xe4>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	4a19      	ldr	r2, [pc, #100]	@ (8003774 <HAL_TIM_Base_MspInit+0xe4>)
 8003710:	f043 0308 	orr.w	r3, r3, #8
 8003714:	6593      	str	r3, [r2, #88]	@ 0x58
 8003716:	4b17      	ldr	r3, [pc, #92]	@ (8003774 <HAL_TIM_Base_MspInit+0xe4>)
 8003718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	2032      	movs	r0, #50	@ 0x32
 8003728:	f002 f9b3 	bl	8005a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800372c:	2032      	movs	r0, #50	@ 0x32
 800372e:	f002 f9ca 	bl	8005ac6 <HAL_NVIC_EnableIRQ>
}
 8003732:	e018      	b.n	8003766 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a11      	ldr	r2, [pc, #68]	@ (8003780 <HAL_TIM_Base_MspInit+0xf0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d113      	bne.n	8003766 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800373e:	4b0d      	ldr	r3, [pc, #52]	@ (8003774 <HAL_TIM_Base_MspInit+0xe4>)
 8003740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003742:	4a0c      	ldr	r2, [pc, #48]	@ (8003774 <HAL_TIM_Base_MspInit+0xe4>)
 8003744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003748:	6613      	str	r3, [r2, #96]	@ 0x60
 800374a:	4b0a      	ldr	r3, [pc, #40]	@ (8003774 <HAL_TIM_Base_MspInit+0xe4>)
 800374c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003756:	2200      	movs	r2, #0
 8003758:	2100      	movs	r1, #0
 800375a:	2019      	movs	r0, #25
 800375c:	f002 f999 	bl	8005a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003760:	2019      	movs	r0, #25
 8003762:	f002 f9b0 	bl	8005ac6 <HAL_NVIC_EnableIRQ>
}
 8003766:	bf00      	nop
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40021000 	.word	0x40021000
 8003778:	40000400 	.word	0x40000400
 800377c:	40000c00 	.word	0x40000c00
 8003780:	40014400 	.word	0x40014400

08003784 <HAL_TIM_Encoder_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
<<<<<<< Updated upstream
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	@ 0x28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1c      	ldr	r2, [pc, #112]	@ (8002594 <HAL_TIM_Encoder_MspInit+0x90>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d131      	bne.n	800258a <HAL_TIM_Encoder_MspInit+0x86>
=======
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	@ 0x28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003814 <HAL_TIM_Encoder_MspInit+0x90>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d131      	bne.n	800380a <HAL_TIM_Encoder_MspInit+0x86>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
<<<<<<< Updated upstream
 8002526:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <HAL_TIM_Encoder_MspInit+0x94>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	4a1b      	ldr	r2, [pc, #108]	@ (8002598 <HAL_TIM_Encoder_MspInit+0x94>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	6593      	str	r3, [r2, #88]	@ 0x58
 8002532:	4b19      	ldr	r3, [pc, #100]	@ (8002598 <HAL_TIM_Encoder_MspInit+0x94>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	4b16      	ldr	r3, [pc, #88]	@ (8002598 <HAL_TIM_Encoder_MspInit+0x94>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002542:	4a15      	ldr	r2, [pc, #84]	@ (8002598 <HAL_TIM_Encoder_MspInit+0x94>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800254a:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <HAL_TIM_Encoder_MspInit+0x94>)
 800254c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
=======
 80037a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x94>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x94>)
 80037ac:	f043 0304 	orr.w	r3, r3, #4
 80037b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80037b2:	4b19      	ldr	r3, [pc, #100]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x94>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037be:	4b16      	ldr	r3, [pc, #88]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x94>)
 80037c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c2:	4a15      	ldr	r2, [pc, #84]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x94>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037ca:	4b13      	ldr	r3, [pc, #76]	@ (8003818 <HAL_TIM_Encoder_MspInit+0x94>)
 80037cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
<<<<<<< Updated upstream
 8002556:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800255a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2300      	movs	r3, #0
 8002566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002568:	230a      	movs	r3, #10
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4619      	mov	r1, r3
 8002572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002576:	f002 fca9 	bl	8004ecc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	201e      	movs	r0, #30
 8002580:	f002 f93d 	bl	80047fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002584:	201e      	movs	r0, #30
 8002586:	f002 f954 	bl	8004832 <HAL_NVIC_EnableIRQ>
=======
 80037d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80037da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037dc:	2302      	movs	r3, #2
 80037de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e4:	2300      	movs	r3, #0
 80037e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80037e8:	230a      	movs	r3, #10
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ec:	f107 0314 	add.w	r3, r7, #20
 80037f0:	4619      	mov	r1, r3
 80037f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037f6:	f002 fcb3 	bl	8006160 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80037fa:	2200      	movs	r2, #0
 80037fc:	2100      	movs	r1, #0
 80037fe:	201e      	movs	r0, #30
 8003800:	f002 f947 	bl	8005a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003804:	201e      	movs	r0, #30
 8003806:	f002 f95e 	bl	8005ac6 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 800258a:	bf00      	nop
 800258c:	3728      	adds	r7, #40	@ 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40000800 	.word	0x40000800
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a11      	ldr	r2, [pc, #68]	@ (8002600 <HAL_TIM_MspPostInit+0x64>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d11b      	bne.n	80025f6 <HAL_TIM_MspPostInit+0x5a>
=======
 800380a:	bf00      	nop
 800380c:	3728      	adds	r7, #40	@ 0x28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40000800 	.word	0x40000800
 8003818:	40021000 	.word	0x40021000

0800381c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003824:	f107 030c 	add.w	r3, r7, #12
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a11      	ldr	r2, [pc, #68]	@ (8003880 <HAL_TIM_MspPostInit+0x64>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d11b      	bne.n	8003876 <HAL_TIM_MspPostInit+0x5a>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< Updated upstream
 80025be:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <HAL_TIM_MspPostInit+0x68>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c2:	4a10      	ldr	r2, [pc, #64]	@ (8002604 <HAL_TIM_MspPostInit+0x68>)
 80025c4:	f043 0304 	orr.w	r3, r3, #4
 80025c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002604 <HAL_TIM_MspPostInit+0x68>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
=======
 800383e:	4b11      	ldr	r3, [pc, #68]	@ (8003884 <HAL_TIM_MspPostInit+0x68>)
 8003840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003842:	4a10      	ldr	r2, [pc, #64]	@ (8003884 <HAL_TIM_MspPostInit+0x68>)
 8003844:	f043 0304 	orr.w	r3, r3, #4
 8003848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800384a:	4b0e      	ldr	r3, [pc, #56]	@ (8003884 <HAL_TIM_MspPostInit+0x68>)
 800384c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
<<<<<<< Updated upstream
 80025d6:	2301      	movs	r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80025e6:	2302      	movs	r3, #2
 80025e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	4619      	mov	r1, r3
 80025f0:	4805      	ldr	r0, [pc, #20]	@ (8002608 <HAL_TIM_MspPostInit+0x6c>)
 80025f2:	f002 fc6b 	bl	8004ecc <HAL_GPIO_Init>
=======
 8003856:	2301      	movs	r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385a:	2302      	movs	r3, #2
 800385c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003866:	2302      	movs	r3, #2
 8003868:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 800386a:	f107 030c 	add.w	r3, r7, #12
 800386e:	4619      	mov	r1, r3
 8003870:	4805      	ldr	r0, [pc, #20]	@ (8003888 <HAL_TIM_MspPostInit+0x6c>)
 8003872:	f002 fc75 	bl	8006160 <HAL_GPIO_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
<<<<<<< Updated upstream
 80025f6:	bf00      	nop
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40012c00 	.word	0x40012c00
 8002604:	40021000 	.word	0x40021000
 8002608:	48000800 	.word	0x48000800

0800260c <HAL_UART_MspInit>:
=======
 8003876:	bf00      	nop
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40012c00 	.word	0x40012c00
 8003884:	40021000 	.word	0x40021000
 8003888:	48000800 	.word	0x48000800

0800388c <HAL_UART_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< Updated upstream
 800260c:	b580      	push	{r7, lr}
 800260e:	b09e      	sub	sp, #120	@ 0x78
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002624:	f107 0310 	add.w	r3, r7, #16
 8002628:	2254      	movs	r2, #84	@ 0x54
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f007 f80f 	bl	8009650 <memset>
  if(huart->Instance==USART2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a4d      	ldr	r2, [pc, #308]	@ (800276c <HAL_UART_MspInit+0x160>)
 8002638:	4293      	cmp	r3, r2
 800263a:	f040 8092 	bne.w	8002762 <HAL_UART_MspInit+0x156>
=======
 800388c:	b580      	push	{r7, lr}
 800388e:	b09e      	sub	sp, #120	@ 0x78
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003894:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	60da      	str	r2, [r3, #12]
 80038a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038a4:	f107 0310 	add.w	r3, r7, #16
 80038a8:	2254      	movs	r2, #84	@ 0x54
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f007 fe37 	bl	800b520 <memset>
  if(huart->Instance==USART2)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a4d      	ldr	r2, [pc, #308]	@ (80039ec <HAL_UART_MspInit+0x160>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	f040 8092 	bne.w	80039e2 <HAL_UART_MspInit+0x156>
>>>>>>> Stashed changes

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
<<<<<<< Updated upstream
 800263e:	2302      	movs	r3, #2
 8002640:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002646:	f107 0310 	add.w	r3, r7, #16
 800264a:	4618      	mov	r0, r3
 800264c:	f003 fbea 	bl	8005e24 <HAL_RCCEx_PeriphCLKConfig>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002656:	f7ff fbb9 	bl	8001dcc <Error_Handler>
=======
 80038be:	2302      	movs	r3, #2
 80038c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038c6:	f107 0310 	add.w	r3, r7, #16
 80038ca:	4618      	mov	r0, r3
 80038cc:	f003 fbf4 	bl	80070b8 <HAL_RCCEx_PeriphCLKConfig>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80038d6:	f7ff f963 	bl	8002ba0 <Error_Handler>
>>>>>>> Stashed changes
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< Updated upstream
 800265a:	4b45      	ldr	r3, [pc, #276]	@ (8002770 <HAL_UART_MspInit+0x164>)
 800265c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265e:	4a44      	ldr	r2, [pc, #272]	@ (8002770 <HAL_UART_MspInit+0x164>)
 8002660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002664:	6593      	str	r3, [r2, #88]	@ 0x58
 8002666:	4b42      	ldr	r3, [pc, #264]	@ (8002770 <HAL_UART_MspInit+0x164>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	4b3f      	ldr	r3, [pc, #252]	@ (8002770 <HAL_UART_MspInit+0x164>)
 8002674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002676:	4a3e      	ldr	r2, [pc, #248]	@ (8002770 <HAL_UART_MspInit+0x164>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800267e:	4b3c      	ldr	r3, [pc, #240]	@ (8002770 <HAL_UART_MspInit+0x164>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
=======
 80038da:	4b45      	ldr	r3, [pc, #276]	@ (80039f0 <HAL_UART_MspInit+0x164>)
 80038dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038de:	4a44      	ldr	r2, [pc, #272]	@ (80039f0 <HAL_UART_MspInit+0x164>)
 80038e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80038e6:	4b42      	ldr	r3, [pc, #264]	@ (80039f0 <HAL_UART_MspInit+0x164>)
 80038e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f2:	4b3f      	ldr	r3, [pc, #252]	@ (80039f0 <HAL_UART_MspInit+0x164>)
 80038f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f6:	4a3e      	ldr	r2, [pc, #248]	@ (80039f0 <HAL_UART_MspInit+0x164>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038fe:	4b3c      	ldr	r3, [pc, #240]	@ (80039f0 <HAL_UART_MspInit+0x164>)
 8003900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
<<<<<<< Updated upstream
 800268a:	230c      	movs	r3, #12
 800268c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800269a:	2307      	movs	r3, #7
 800269c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026a2:	4619      	mov	r1, r3
 80026a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026a8:	f002 fc10 	bl	8004ecc <HAL_GPIO_Init>
=======
 800390a:	230c      	movs	r3, #12
 800390c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390e:	2302      	movs	r3, #2
 8003910:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003916:	2300      	movs	r3, #0
 8003918:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800391a:	2307      	movs	r3, #7
 800391c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800391e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003922:	4619      	mov	r1, r3
 8003924:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003928:	f002 fc1a 	bl	8006160 <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
<<<<<<< Updated upstream
 80026ac:	4b31      	ldr	r3, [pc, #196]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026ae:	4a32      	ldr	r2, [pc, #200]	@ (8002778 <HAL_UART_MspInit+0x16c>)
 80026b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80026b2:	4b30      	ldr	r3, [pc, #192]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026b4:	221a      	movs	r2, #26
 80026b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026be:	4b2d      	ldr	r3, [pc, #180]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026c6:	2280      	movs	r2, #128	@ 0x80
 80026c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026d0:	4b28      	ldr	r3, [pc, #160]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80026d6:	4b27      	ldr	r3, [pc, #156]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026d8:	2200      	movs	r2, #0
 80026da:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026dc:	4b25      	ldr	r3, [pc, #148]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026de:	2200      	movs	r2, #0
 80026e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026e2:	4824      	ldr	r0, [pc, #144]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026e4:	f002 f8c0 	bl	8004868 <HAL_DMA_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80026ee:	f7ff fb6d 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80026fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8002700:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <HAL_UART_MspInit+0x170>)
 8002702:	4a1f      	ldr	r2, [pc, #124]	@ (8002780 <HAL_UART_MspInit+0x174>)
 8002704:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002706:	4b1d      	ldr	r3, [pc, #116]	@ (800277c <HAL_UART_MspInit+0x170>)
 8002708:	221b      	movs	r2, #27
 800270a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800270c:	4b1b      	ldr	r3, [pc, #108]	@ (800277c <HAL_UART_MspInit+0x170>)
 800270e:	2210      	movs	r2, #16
 8002710:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002712:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <HAL_UART_MspInit+0x170>)
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002718:	4b18      	ldr	r3, [pc, #96]	@ (800277c <HAL_UART_MspInit+0x170>)
 800271a:	2280      	movs	r2, #128	@ 0x80
 800271c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800271e:	4b17      	ldr	r3, [pc, #92]	@ (800277c <HAL_UART_MspInit+0x170>)
 8002720:	2200      	movs	r2, #0
 8002722:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002724:	4b15      	ldr	r3, [pc, #84]	@ (800277c <HAL_UART_MspInit+0x170>)
 8002726:	2200      	movs	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800272a:	4b14      	ldr	r3, [pc, #80]	@ (800277c <HAL_UART_MspInit+0x170>)
 800272c:	2200      	movs	r2, #0
 800272e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002730:	4b12      	ldr	r3, [pc, #72]	@ (800277c <HAL_UART_MspInit+0x170>)
 8002732:	2200      	movs	r2, #0
 8002734:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002736:	4811      	ldr	r0, [pc, #68]	@ (800277c <HAL_UART_MspInit+0x170>)
 8002738:	f002 f896 	bl	8004868 <HAL_DMA_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002742:	f7ff fb43 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a0c      	ldr	r2, [pc, #48]	@ (800277c <HAL_UART_MspInit+0x170>)
 800274a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800274c:	4a0b      	ldr	r2, [pc, #44]	@ (800277c <HAL_UART_MspInit+0x170>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2100      	movs	r1, #0
 8002756:	2026      	movs	r0, #38	@ 0x26
 8002758:	f002 f851 	bl	80047fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800275c:	2026      	movs	r0, #38	@ 0x26
 800275e:	f002 f868 	bl	8004832 <HAL_NVIC_EnableIRQ>
=======
 800392c:	4b31      	ldr	r3, [pc, #196]	@ (80039f4 <HAL_UART_MspInit+0x168>)
 800392e:	4a32      	ldr	r2, [pc, #200]	@ (80039f8 <HAL_UART_MspInit+0x16c>)
 8003930:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003932:	4b30      	ldr	r3, [pc, #192]	@ (80039f4 <HAL_UART_MspInit+0x168>)
 8003934:	221a      	movs	r2, #26
 8003936:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003938:	4b2e      	ldr	r3, [pc, #184]	@ (80039f4 <HAL_UART_MspInit+0x168>)
 800393a:	2200      	movs	r2, #0
 800393c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800393e:	4b2d      	ldr	r3, [pc, #180]	@ (80039f4 <HAL_UART_MspInit+0x168>)
 8003940:	2200      	movs	r2, #0
 8003942:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003944:	4b2b      	ldr	r3, [pc, #172]	@ (80039f4 <HAL_UART_MspInit+0x168>)
 8003946:	2280      	movs	r2, #128	@ 0x80
 8003948:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800394a:	4b2a      	ldr	r3, [pc, #168]	@ (80039f4 <HAL_UART_MspInit+0x168>)
 800394c:	2200      	movs	r2, #0
 800394e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003950:	4b28      	ldr	r3, [pc, #160]	@ (80039f4 <HAL_UART_MspInit+0x168>)
 8003952:	2200      	movs	r2, #0
 8003954:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003956:	4b27      	ldr	r3, [pc, #156]	@ (80039f4 <HAL_UART_MspInit+0x168>)
 8003958:	2200      	movs	r2, #0
 800395a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800395c:	4b25      	ldr	r3, [pc, #148]	@ (80039f4 <HAL_UART_MspInit+0x168>)
 800395e:	2200      	movs	r2, #0
 8003960:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003962:	4824      	ldr	r0, [pc, #144]	@ (80039f4 <HAL_UART_MspInit+0x168>)
 8003964:	f002 f8ca 	bl	8005afc <HAL_DMA_Init>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800396e:	f7ff f917 	bl	8002ba0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a1f      	ldr	r2, [pc, #124]	@ (80039f4 <HAL_UART_MspInit+0x168>)
 8003976:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800397a:	4a1e      	ldr	r2, [pc, #120]	@ (80039f4 <HAL_UART_MspInit+0x168>)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8003980:	4b1e      	ldr	r3, [pc, #120]	@ (80039fc <HAL_UART_MspInit+0x170>)
 8003982:	4a1f      	ldr	r2, [pc, #124]	@ (8003a00 <HAL_UART_MspInit+0x174>)
 8003984:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003986:	4b1d      	ldr	r3, [pc, #116]	@ (80039fc <HAL_UART_MspInit+0x170>)
 8003988:	221b      	movs	r2, #27
 800398a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800398c:	4b1b      	ldr	r3, [pc, #108]	@ (80039fc <HAL_UART_MspInit+0x170>)
 800398e:	2210      	movs	r2, #16
 8003990:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003992:	4b1a      	ldr	r3, [pc, #104]	@ (80039fc <HAL_UART_MspInit+0x170>)
 8003994:	2200      	movs	r2, #0
 8003996:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003998:	4b18      	ldr	r3, [pc, #96]	@ (80039fc <HAL_UART_MspInit+0x170>)
 800399a:	2280      	movs	r2, #128	@ 0x80
 800399c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800399e:	4b17      	ldr	r3, [pc, #92]	@ (80039fc <HAL_UART_MspInit+0x170>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039a4:	4b15      	ldr	r3, [pc, #84]	@ (80039fc <HAL_UART_MspInit+0x170>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80039aa:	4b14      	ldr	r3, [pc, #80]	@ (80039fc <HAL_UART_MspInit+0x170>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039b0:	4b12      	ldr	r3, [pc, #72]	@ (80039fc <HAL_UART_MspInit+0x170>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80039b6:	4811      	ldr	r0, [pc, #68]	@ (80039fc <HAL_UART_MspInit+0x170>)
 80039b8:	f002 f8a0 	bl	8005afc <HAL_DMA_Init>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80039c2:	f7ff f8ed 	bl	8002ba0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a0c      	ldr	r2, [pc, #48]	@ (80039fc <HAL_UART_MspInit+0x170>)
 80039ca:	67da      	str	r2, [r3, #124]	@ 0x7c
 80039cc:	4a0b      	ldr	r2, [pc, #44]	@ (80039fc <HAL_UART_MspInit+0x170>)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80039d2:	2200      	movs	r2, #0
 80039d4:	2100      	movs	r1, #0
 80039d6:	2026      	movs	r0, #38	@ 0x26
 80039d8:	f002 f85b 	bl	8005a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039dc:	2026      	movs	r0, #38	@ 0x26
 80039de:	f002 f872 	bl	8005ac6 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8002762:	bf00      	nop
 8002764:	3778      	adds	r7, #120	@ 0x78
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40004400 	.word	0x40004400
 8002770:	40021000 	.word	0x40021000
 8002774:	20000508 	.word	0x20000508
 8002778:	4002001c 	.word	0x4002001c
 800277c:	20000568 	.word	0x20000568
 8002780:	40020030 	.word	0x40020030

08002784 <NMI_Handler>:
=======
 80039e2:	bf00      	nop
 80039e4:	3778      	adds	r7, #120	@ 0x78
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40004400 	.word	0x40004400
 80039f0:	40021000 	.word	0x40021000
 80039f4:	20000d34 	.word	0x20000d34
 80039f8:	4002001c 	.word	0x4002001c
 80039fc:	20000d94 	.word	0x20000d94
 8003a00:	40020030 	.word	0x40020030

08003a04 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
=======
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< Updated upstream
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <NMI_Handler+0x4>

0800278c <HardFault_Handler>:
=======
 8003a08:	bf00      	nop
 8003a0a:	e7fd      	b.n	8003a08 <NMI_Handler+0x4>

08003a0c <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
=======
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8002790:	bf00      	nop
 8002792:	e7fd      	b.n	8002790 <HardFault_Handler+0x4>

08002794 <MemManage_Handler>:
=======
 8003a10:	bf00      	nop
 8003a12:	e7fd      	b.n	8003a10 <HardFault_Handler+0x4>

08003a14 <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
=======
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <MemManage_Handler+0x4>

0800279c <BusFault_Handler>:
=======
 8003a18:	bf00      	nop
 8003a1a:	e7fd      	b.n	8003a18 <MemManage_Handler+0x4>

08003a1c <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
=======
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <BusFault_Handler+0x4>

080027a4 <UsageFault_Handler>:
=======
 8003a20:	bf00      	nop
 8003a22:	e7fd      	b.n	8003a20 <BusFault_Handler+0x4>

08003a24 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
=======
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <UsageFault_Handler+0x4>

080027ac <SVC_Handler>:
=======
 8003a28:	bf00      	nop
 8003a2a:	e7fd      	b.n	8003a28 <UsageFault_Handler+0x4>

08003a2c <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
=======
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <DebugMon_Handler>:
=======
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
=======
 8003a3a:	b480      	push	{r7}
 8003a3c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <PendSV_Handler>:
=======
 8003a3e:	bf00      	nop
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
=======
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <SysTick_Handler>:
=======
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
 80027d6:	b580      	push	{r7, lr}
 80027d8:	af00      	add	r7, sp, #0
=======
 8003a56:	b580      	push	{r7, lr}
 8003a58:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 80027da:	f000 f8f5 	bl	80029c8 <HAL_IncTick>
=======
 8003a5a:	f000 f8ff 	bl	8003c5c <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <DMA1_Channel1_IRQHandler>:
=======
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <DMA1_Channel1_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
<<<<<<< Updated upstream
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
=======
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< Updated upstream
 80027e8:	4802      	ldr	r0, [pc, #8]	@ (80027f4 <DMA1_Channel1_IRQHandler+0x10>)
 80027ea:	f002 fa20 	bl	8004c2e <HAL_DMA_IRQHandler>
=======
 8003a68:	4802      	ldr	r0, [pc, #8]	@ (8003a74 <DMA1_Channel1_IRQHandler+0x10>)
 8003a6a:	f002 fa2a 	bl	8005ec2 <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
<<<<<<< Updated upstream
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200000ac 	.word	0x200000ac

080027f8 <DMA1_Channel2_IRQHandler>:
=======
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	2000080c 	.word	0x2000080c

08003a78 <DMA1_Channel2_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
<<<<<<< Updated upstream
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
=======
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
<<<<<<< Updated upstream
 80027fc:	4802      	ldr	r0, [pc, #8]	@ (8002808 <DMA1_Channel2_IRQHandler+0x10>)
 80027fe:	f002 fa16 	bl	8004c2e <HAL_DMA_IRQHandler>
=======
 8003a7c:	4802      	ldr	r0, [pc, #8]	@ (8003a88 <DMA1_Channel2_IRQHandler+0x10>)
 8003a7e:	f002 fa20 	bl	8005ec2 <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
<<<<<<< Updated upstream
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000508 	.word	0x20000508

0800280c <DMA1_Channel3_IRQHandler>:
=======
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000d34 	.word	0x20000d34

08003a8c <DMA1_Channel3_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
<<<<<<< Updated upstream
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
=======
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
<<<<<<< Updated upstream
 8002810:	4802      	ldr	r0, [pc, #8]	@ (800281c <DMA1_Channel3_IRQHandler+0x10>)
 8002812:	f002 fa0c 	bl	8004c2e <HAL_DMA_IRQHandler>
=======
 8003a90:	4802      	ldr	r0, [pc, #8]	@ (8003a9c <DMA1_Channel3_IRQHandler+0x10>)
 8003a92:	f002 fa16 	bl	8005ec2 <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
<<<<<<< Updated upstream
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000568 	.word	0x20000568

08002820 <ADC1_2_IRQHandler>:
=======
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000d94 	.word	0x20000d94

08003aa0 <ADC1_2_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
<<<<<<< Updated upstream
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
=======
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
<<<<<<< Updated upstream
 8002824:	4802      	ldr	r0, [pc, #8]	@ (8002830 <ADC1_2_IRQHandler+0x10>)
 8002826:	f000 fdbd 	bl	80033a4 <HAL_ADC_IRQHandler>
=======
 8003aa4:	4802      	ldr	r0, [pc, #8]	@ (8003ab0 <ADC1_2_IRQHandler+0x10>)
 8003aa6:	f000 fdc7 	bl	8004638 <HAL_ADC_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
<<<<<<< Updated upstream
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000040 	.word	0x20000040

08002834 <TIM1_UP_TIM16_IRQHandler>:
=======
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	200007a0 	.word	0x200007a0

08003ab4 <TIM1_UP_TIM16_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
<<<<<<< Updated upstream
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
=======
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< Updated upstream
 8002838:	4803      	ldr	r0, [pc, #12]	@ (8002848 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800283a:	f004 f9b7 	bl	8006bac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800283e:	4803      	ldr	r0, [pc, #12]	@ (800284c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002840:	f004 f9b4 	bl	8006bac <HAL_TIM_IRQHandler>
=======
 8003ab8:	4803      	ldr	r0, [pc, #12]	@ (8003ac8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003aba:	f004 fa4f 	bl	8007f5c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003abe:	4803      	ldr	r0, [pc, #12]	@ (8003acc <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003ac0:	f004 fa4c 	bl	8007f5c <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
<<<<<<< Updated upstream
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}
 8002848:	2000010c 	.word	0x2000010c
 800284c:	20000370 	.word	0x20000370

08002850 <TIM3_IRQHandler>:
=======
 8003ac4:	bf00      	nop
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	2000086c 	.word	0x2000086c
 8003acc:	20000b9c 	.word	0x20000b9c

08003ad0 <TIM3_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
<<<<<<< Updated upstream
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
=======
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
<<<<<<< Updated upstream
 8002854:	4802      	ldr	r0, [pc, #8]	@ (8002860 <TIM3_IRQHandler+0x10>)
 8002856:	f004 f9a9 	bl	8006bac <HAL_TIM_IRQHandler>
=======
 8003ad4:	4802      	ldr	r0, [pc, #8]	@ (8003ae0 <TIM3_IRQHandler+0x10>)
 8003ad6:	f004 fa41 	bl	8007f5c <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
<<<<<<< Updated upstream
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	200001d8 	.word	0x200001d8

08002864 <TIM4_IRQHandler>:
=======
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000938 	.word	0x20000938

08003ae4 <TIM4_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
<<<<<<< Updated upstream
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
=======
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
<<<<<<< Updated upstream
 8002868:	4802      	ldr	r0, [pc, #8]	@ (8002874 <TIM4_IRQHandler+0x10>)
 800286a:	f004 f99f 	bl	8006bac <HAL_TIM_IRQHandler>
=======
 8003ae8:	4802      	ldr	r0, [pc, #8]	@ (8003af4 <TIM4_IRQHandler+0x10>)
 8003aea:	f004 fa37 	bl	8007f5c <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
<<<<<<< Updated upstream
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200002a4 	.word	0x200002a4

08002878 <USART2_IRQHandler>:
=======
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000a04 	.word	0x20000a04

08003af8 <USART2_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
<<<<<<< Updated upstream
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
=======
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< Updated upstream
 800287c:	4802      	ldr	r0, [pc, #8]	@ (8002888 <USART2_IRQHandler+0x10>)
 800287e:	f005 fc83 	bl	8008188 <HAL_UART_IRQHandler>
=======
 8003afc:	4802      	ldr	r0, [pc, #8]	@ (8003b08 <USART2_IRQHandler+0x10>)
 8003afe:	f006 f801 	bl	8009b04 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
<<<<<<< Updated upstream
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	2000043c 	.word	0x2000043c

0800288c <EXTI15_10_IRQHandler>:
=======
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000c68 	.word	0x20000c68

08003b0c <EXTI15_10_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
<<<<<<< Updated upstream
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
=======
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_Pin);
<<<<<<< Updated upstream
 8002890:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002894:	f002 fccc 	bl	8005230 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002898:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800289c:	f002 fcc8 	bl	8005230 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 80028a0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80028a4:	f002 fcc4 	bl	8005230 <HAL_GPIO_EXTI_IRQHandler>
=======
 8003b10:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003b14:	f002 fcd6 	bl	80064c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003b18:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003b1c:	f002 fcd2 	bl	80064c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 8003b20:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003b24:	f002 fcce 	bl	80064c4 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
<<<<<<< Updated upstream
 80028a8:	bf00      	nop
 80028aa:	bd80      	pop	{r7, pc}

080028ac <SystemInit>:
=======
 8003b28:	bf00      	nop
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003b30:	4802      	ldr	r0, [pc, #8]	@ (8003b3c <TIM5_IRQHandler+0x10>)
 8003b32:	f004 fa13 	bl	8007f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000ad0 	.word	0x20000ad0

08003b40 <SystemInit>:
>>>>>>> Stashed changes
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
<<<<<<< Updated upstream
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028b0:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <SystemInit+0x20>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b6:	4a05      	ldr	r2, [pc, #20]	@ (80028cc <SystemInit+0x20>)
 80028b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b44:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <SystemInit+0x20>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4a:	4a05      	ldr	r2, [pc, #20]	@ (8003b60 <SystemInit+0x20>)
 8003b4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< Updated upstream
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <Reset_Handler>:
=======
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	e000ed00 	.word	0xe000ed00

08003b64 <Reset_Handler>:
>>>>>>> Stashed changes

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
<<<<<<< Updated upstream
 80028d0:	480d      	ldr	r0, [pc, #52]	@ (8002908 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028d4:	f7ff ffea 	bl	80028ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028d8:	480c      	ldr	r0, [pc, #48]	@ (800290c <LoopForever+0x6>)
  ldr r1, =_edata
 80028da:	490d      	ldr	r1, [pc, #52]	@ (8002910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002914 <LoopForever+0xe>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f0:	4c0a      	ldr	r4, [pc, #40]	@ (800291c <LoopForever+0x16>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028fe:	f006 feaf 	bl	8009660 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002902:	f7fe fb79 	bl	8000ff8 <main>

08002906 <LoopForever>:

LoopForever:
    b LoopForever
 8002906:	e7fe      	b.n	8002906 <LoopForever>
  ldr   r0, =_estack
 8002908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800290c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002910:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002914:	08009710 	.word	0x08009710
  ldr r2, =_sbss
 8002918:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800291c:	2000078c 	.word	0x2000078c

08002920 <ADC3_IRQHandler>:
=======
 8003b64:	480d      	ldr	r0, [pc, #52]	@ (8003b9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b68:	f7ff ffea 	bl	8003b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b6c:	480c      	ldr	r0, [pc, #48]	@ (8003ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b6e:	490d      	ldr	r1, [pc, #52]	@ (8003ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b70:	4a0d      	ldr	r2, [pc, #52]	@ (8003ba8 <LoopForever+0xe>)
  movs r3, #0
 8003b72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003b74:	e002      	b.n	8003b7c <LoopCopyDataInit>

08003b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b7a:	3304      	adds	r3, #4

08003b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b80:	d3f9      	bcc.n	8003b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b82:	4a0a      	ldr	r2, [pc, #40]	@ (8003bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b84:	4c0a      	ldr	r4, [pc, #40]	@ (8003bb0 <LoopForever+0x16>)
  movs r3, #0
 8003b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b88:	e001      	b.n	8003b8e <LoopFillZerobss>

08003b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b8c:	3204      	adds	r2, #4

08003b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b90:	d3fb      	bcc.n	8003b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b92:	f007 fccd 	bl	800b530 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b96:	f7fe f879 	bl	8001c8c <main>

08003b9a <LoopForever>:

LoopForever:
    b LoopForever
 8003b9a:	e7fe      	b.n	8003b9a <LoopForever>
  ldr   r0, =_estack
 8003b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ba4:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8003ba8:	0800b660 	.word	0x0800b660
  ldr r2, =_sbss
 8003bac:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8003bb0:	20001144 	.word	0x20001144

08003bb4 <ADC3_IRQHandler>:
>>>>>>> Stashed changes
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< Updated upstream
 8002920:	e7fe      	b.n	8002920 <ADC3_IRQHandler>

08002922 <HAL_Init>:
=======
 8003bb4:	e7fe      	b.n	8003bb4 <ADC3_IRQHandler>

08003bb6 <HAL_Init>:
>>>>>>> Stashed changes
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	71fb      	strb	r3, [r7, #7]
=======
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 800292c:	2003      	movs	r0, #3
 800292e:	f001 ff5b 	bl	80047e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002932:	2000      	movs	r0, #0
 8002934:	f000 f80e 	bl	8002954 <HAL_InitTick>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	71fb      	strb	r3, [r7, #7]
 8002942:	e001      	b.n	8002948 <HAL_Init+0x26>
=======
 8003bc0:	2003      	movs	r0, #3
 8003bc2:	f001 ff5b 	bl	8005a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	f000 f80e 	bl	8003be8 <HAL_InitTick>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	71fb      	strb	r3, [r7, #7]
 8003bd6:	e001      	b.n	8003bdc <HAL_Init+0x26>
>>>>>>> Stashed changes
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< Updated upstream
 8002944:	f7ff fcd2 	bl	80022ec <HAL_MspInit>
=======
 8003bd8:	f7ff fcac 	bl	8003534 <HAL_MspInit>
>>>>>>> Stashed changes
  }

  /* Return function status */
  return status;
<<<<<<< Updated upstream
 8002948:	79fb      	ldrb	r3, [r7, #7]

}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_InitTick>:
=======
 8003bdc:	79fb      	ldrb	r3, [r7, #7]

}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002960:	4b16      	ldr	r3, [pc, #88]	@ (80029bc <HAL_InitTick+0x68>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d022      	beq.n	80029ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002968:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <HAL_InitTick+0x6c>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b13      	ldr	r3, [pc, #76]	@ (80029bc <HAL_InitTick+0x68>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002974:	fbb1 f3f3 	udiv	r3, r1, r3
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	4618      	mov	r0, r3
 800297e:	f001 ff66 	bl	800484e <HAL_SYSTICK_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10f      	bne.n	80029a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	d809      	bhi.n	80029a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298e:	2200      	movs	r2, #0
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	f04f 30ff 	mov.w	r0, #4294967295
 8002996:	f001 ff32 	bl	80047fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800299a:	4a0a      	ldr	r2, [pc, #40]	@ (80029c4 <HAL_InitTick+0x70>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	e007      	b.n	80029b2 <HAL_InitTick+0x5e>
=======
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003bf4:	4b16      	ldr	r3, [pc, #88]	@ (8003c50 <HAL_InitTick+0x68>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d022      	beq.n	8003c42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003bfc:	4b15      	ldr	r3, [pc, #84]	@ (8003c54 <HAL_InitTick+0x6c>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b13      	ldr	r3, [pc, #76]	@ (8003c50 <HAL_InitTick+0x68>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 ff66 	bl	8005ae2 <HAL_SYSTICK_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10f      	bne.n	8003c3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b0f      	cmp	r3, #15
 8003c20:	d809      	bhi.n	8003c36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c22:	2200      	movs	r2, #0
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2a:	f001 ff32 	bl	8005a92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c58 <HAL_InitTick+0x70>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	e007      	b.n	8003c46 <HAL_InitTick+0x5e>
>>>>>>> Stashed changes
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< Updated upstream
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	e004      	b.n	80029b2 <HAL_InitTick+0x5e>
=======
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
 8003c3a:	e004      	b.n	8003c46 <HAL_InitTick+0x5e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      status = HAL_ERROR;
<<<<<<< Updated upstream
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	e001      	b.n	80029b2 <HAL_InitTick+0x5e>
=======
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	e001      	b.n	8003c46 <HAL_InitTick+0x5e>
>>>>>>> Stashed changes
    }
  }
  else
  {
    status = HAL_ERROR;
<<<<<<< Updated upstream
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
=======
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  }

  /* Return function status */
  return status;
<<<<<<< Updated upstream
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000014 	.word	0x20000014
 80029c0:	2000000c 	.word	0x2000000c
 80029c4:	20000010 	.word	0x20000010

080029c8 <HAL_IncTick>:
=======
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	2000027c 	.word	0x2000027c
 8003c54:	20000274 	.word	0x20000274
 8003c58:	20000278 	.word	0x20000278

08003c5c <HAL_IncTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029cc:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <HAL_IncTick+0x1c>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <HAL_IncTick+0x20>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4413      	add	r3, r2
 80029d6:	4a03      	ldr	r2, [pc, #12]	@ (80029e4 <HAL_IncTick+0x1c>)
 80029d8:	6013      	str	r3, [r2, #0]
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	20000788 	.word	0x20000788
 80029e8:	20000014 	.word	0x20000014

080029ec <HAL_GetTick>:
=======
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c60:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_IncTick+0x1c>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b05      	ldr	r3, [pc, #20]	@ (8003c7c <HAL_IncTick+0x20>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4413      	add	r3, r2
 8003c6a:	4a03      	ldr	r2, [pc, #12]	@ (8003c78 <HAL_IncTick+0x1c>)
 8003c6c:	6013      	str	r3, [r2, #0]
}
 8003c6e:	bf00      	nop
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	20001140 	.word	0x20001140
 8003c7c:	2000027c 	.word	0x2000027c

08003c80 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return uwTick;
 80029f0:	4b03      	ldr	r3, [pc, #12]	@ (8002a00 <HAL_GetTick+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000788 	.word	0x20000788

08002a04 <LL_ADC_SetCommonClock>:
=======
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return uwTick;
 8003c84:	4b03      	ldr	r3, [pc, #12]	@ (8003c94 <HAL_GetTick+0x14>)
 8003c86:	681b      	ldr	r3, [r3, #0]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20001140 	.word	0x20001140

08003c98 <LL_ADC_SetCommonClock>:
>>>>>>> Stashed changes
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
<<<<<<< Updated upstream
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LL_ADC_SetCommonPathInternalCh>:
=======
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	609a      	str	r2, [r3, #8]
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <LL_ADC_SetCommonPathInternalCh>:
>>>>>>> Stashed changes
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
<<<<<<< Updated upstream
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	609a      	str	r2, [r3, #8]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_ADC_GetCommonPathInternalCh>:
=======
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	609a      	str	r2, [r3, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <LL_ADC_GetCommonPathInternalCh>:
>>>>>>> Stashed changes
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
<<<<<<< Updated upstream
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_SetOffset>:
=======
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <LL_ADC_SetOffset>:
>>>>>>> Stashed changes
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
<<<<<<< Updated upstream
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3360      	adds	r3, #96	@ 0x60
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b08      	ldr	r3, [pc, #32]	@ (8002ab0 <LL_ADC_SetOffset+0x44>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	03fff000 	.word	0x03fff000

08002ab4 <LL_ADC_GetOffsetChannel>:
=======
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3360      	adds	r3, #96	@ 0x60
 8003d12:	461a      	mov	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b08      	ldr	r3, [pc, #32]	@ (8003d44 <LL_ADC_SetOffset+0x44>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	03fff000 	.word	0x03fff000

08003d48 <LL_ADC_GetOffsetChannel>:
>>>>>>> Stashed changes
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
<<<<<<< Updated upstream
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3360      	adds	r3, #96	@ 0x60
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_SetOffsetState>:
=======
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3360      	adds	r3, #96	@ 0x60
 8003d56:	461a      	mov	r2, r3
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <LL_ADC_SetOffsetState>:
>>>>>>> Stashed changes
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
<<<<<<< Updated upstream
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3360      	adds	r3, #96	@ 0x60
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <LL_ADC_SetOffsetSign>:
=======
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3360      	adds	r3, #96	@ 0x60
 8003d84:	461a      	mov	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <LL_ADC_SetOffsetSign>:
>>>>>>> Stashed changes
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
<<<<<<< Updated upstream
 8002b16:	b480      	push	{r7}
 8002b18:	b087      	sub	sp, #28
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	3360      	adds	r3, #96	@ 0x60
 8002b26:	461a      	mov	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_SetOffsetSaturation>:
=======
 8003daa:	b480      	push	{r7}
 8003dac:	b087      	sub	sp, #28
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3360      	adds	r3, #96	@ 0x60
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003dd4:	bf00      	nop
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <LL_ADC_SetOffsetSaturation>:
>>>>>>> Stashed changes
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
<<<<<<< Updated upstream
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3360      	adds	r3, #96	@ 0x60
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_ADC_SetSamplingTimeCommonConfig>:
=======
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3360      	adds	r3, #96	@ 0x60
 8003df0:	461a      	mov	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003e0a:	bf00      	nop
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <LL_ADC_SetSamplingTimeCommonConfig>:
>>>>>>> Stashed changes
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
<<<<<<< Updated upstream
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	615a      	str	r2, [r3, #20]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_REG_IsTriggerSourceSWStart>:
=======
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	615a      	str	r2, [r3, #20]
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <LL_ADC_REG_IsTriggerSourceSWStart>:
>>>>>>> Stashed changes
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
<<<<<<< Updated upstream
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_ADC_REG_SetSequencerRanks>:
=======
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <LL_ADC_REG_SetSequencerRanks>:
>>>>>>> Stashed changes
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
<<<<<<< Updated upstream
 8002bce:	b480      	push	{r7}
 8002bd0:	b087      	sub	sp, #28
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
=======
 8003e62:	b480      	push	{r7}
 8003e64:	b087      	sub	sp, #28
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
<<<<<<< Updated upstream
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3330      	adds	r3, #48	@ 0x30
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	4413      	add	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	211f      	movs	r1, #31
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	401a      	ands	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0e9b      	lsrs	r3, r3, #26
 8002c06:	f003 011f 	and.w	r1, r3, #31
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	431a      	orrs	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	601a      	str	r2, [r3, #0]
=======
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3330      	adds	r3, #48	@ 0x30
 8003e72:	461a      	mov	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	0a1b      	lsrs	r3, r3, #8
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	f003 030c 	and.w	r3, r3, #12
 8003e7e:	4413      	add	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	211f      	movs	r1, #31
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	401a      	ands	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	0e9b      	lsrs	r3, r3, #26
 8003e9a:	f003 011f 	and.w	r1, r3, #31
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
<<<<<<< Updated upstream
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <LL_ADC_INJ_IsTriggerSourceSWStart>:
=======
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <LL_ADC_INJ_IsTriggerSourceSWStart>:
>>>>>>> Stashed changes
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
<<<<<<< Updated upstream
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c32:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_SetChannelSamplingTime>:
=======
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <LL_ADC_SetChannelSamplingTime>:
>>>>>>> Stashed changes
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
<<<<<<< Updated upstream
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
=======
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
<<<<<<< Updated upstream
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	3314      	adds	r3, #20
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	0e5b      	lsrs	r3, r3, #25
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	4413      	add	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	0d1b      	lsrs	r3, r3, #20
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	2107      	movs	r1, #7
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	401a      	ands	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	0d1b      	lsrs	r3, r3, #20
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	431a      	orrs	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <LL_ADC_SetChannelSingleDiff>:
=======
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3314      	adds	r3, #20
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	0e5b      	lsrs	r3, r3, #25
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	4413      	add	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	0d1b      	lsrs	r3, r3, #20
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	2107      	movs	r1, #7
 8003f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	401a      	ands	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	0d1b      	lsrs	r3, r3, #20
 8003f1a:	f003 031f 	and.w	r3, r3, #31
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	fa01 f303 	lsl.w	r3, r1, r3
 8003f24:	431a      	orrs	r2, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <LL_ADC_SetChannelSingleDiff>:
>>>>>>> Stashed changes
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
<<<<<<< Updated upstream
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
=======
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
<<<<<<< Updated upstream
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f003 0318 	and.w	r3, r3, #24
 8002cc6:	4908      	ldr	r1, [pc, #32]	@ (8002ce8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cc8:	40d9      	lsrs	r1, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	400b      	ands	r3, r1
 8002cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
=======
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f50:	43db      	mvns	r3, r3
 8003f52:	401a      	ands	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f003 0318 	and.w	r3, r3, #24
 8003f5a:	4908      	ldr	r1, [pc, #32]	@ (8003f7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f5c:	40d9      	lsrs	r1, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	400b      	ands	r3, r1
 8003f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f66:	431a      	orrs	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
>>>>>>> Stashed changes
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
<<<<<<< Updated upstream
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	0007ffff 	.word	0x0007ffff

08002cec <LL_ADC_GetMultimode>:
=======
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	0007ffff 	.word	0x0007ffff

08003f80 <LL_ADC_GetMultimode>:
>>>>>>> Stashed changes
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
<<<<<<< Updated upstream
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_GetMultiDMATransfer>:
=======
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 031f 	and.w	r3, r3, #31
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_ADC_GetMultiDMATransfer>:
>>>>>>> Stashed changes
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
<<<<<<< Updated upstream
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_ADC_DisableDeepPowerDown>:
=======
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <LL_ADC_DisableDeepPowerDown>:
>>>>>>> Stashed changes
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
<<<<<<< Updated upstream
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
=======
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
<<<<<<< Updated upstream
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6093      	str	r3, [r2, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_ADC_IsDeepPowerDownEnabled>:
=======
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003fc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6093      	str	r3, [r2, #8]
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_ADC_IsDeepPowerDownEnabled>:
>>>>>>> Stashed changes
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
<<<<<<< Updated upstream
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d5c:	d101      	bne.n	8002d62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_ADC_EnableInternalRegulator>:
=======
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ff0:	d101      	bne.n	8003ff6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <LL_ADC_EnableInternalRegulator>:
>>>>>>> Stashed changes
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
<<<<<<< Updated upstream
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
=======
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< Updated upstream
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_IsInternalRegulatorEnabled>:
=======
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004014:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004018:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <LL_ADC_IsInternalRegulatorEnabled>:
>>>>>>> Stashed changes
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
<<<<<<< Updated upstream
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dac:	d101      	bne.n	8002db2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_Enable>:
=======
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004040:	d101      	bne.n	8004046 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_ADC_Enable>:
>>>>>>> Stashed changes
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
<<<<<<< Updated upstream
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
=======
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< Updated upstream
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dd4:	f043 0201 	orr.w	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_ADC_IsEnabled>:
=======
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004064:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004068:	f043 0201 	orr.w	r2, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_ADC_IsEnabled>:
>>>>>>> Stashed changes
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
<<<<<<< Updated upstream
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <LL_ADC_IsEnabled+0x18>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <LL_ADC_IsEnabled+0x1a>
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <LL_ADC_REG_StartConversion>:
=======
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <LL_ADC_IsEnabled+0x18>
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <LL_ADC_IsEnabled+0x1a>
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <LL_ADC_REG_StartConversion>:
>>>>>>> Stashed changes
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
<<<<<<< Updated upstream
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
=======
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< Updated upstream
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e22:	f043 0204 	orr.w	r2, r3, #4
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_ADC_REG_IsConversionOngoing>:
=======
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80040b6:	f043 0204 	orr.w	r2, r3, #4
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <LL_ADC_REG_IsConversionOngoing>:
>>>>>>> Stashed changes
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
<<<<<<< Updated upstream
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d101      	bne.n	8002e4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_INJ_IsConversionOngoing>:
=======
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d101      	bne.n	80040e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_ADC_INJ_IsConversionOngoing>:
>>>>>>> Stashed changes
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
<<<<<<< Updated upstream
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d101      	bne.n	8002e74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_ADC_Init>:
=======
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b08      	cmp	r3, #8
 8004102:	d101      	bne.n	8004108 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_ADC_Init>:
>>>>>>> Stashed changes
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b089      	sub	sp, #36	@ 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	77fb      	strb	r3, [r7, #31]
=======
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b089      	sub	sp, #36	@ 0x24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
<<<<<<< Updated upstream
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e1a9      	b.n	80031f2 <HAL_ADC_Init+0x36e>
=======
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e1a9      	b.n	8004486 <HAL_ADC_Init+0x36e>
>>>>>>> Stashed changes
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
<<<<<<< Updated upstream
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	2b00      	cmp	r3, #0
=======
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b00      	cmp	r3, #0
>>>>>>> Stashed changes
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< Updated upstream
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <HAL_ADC_Init+0x3c>
=======
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413c:	2b00      	cmp	r3, #0
 800413e:	d109      	bne.n	8004154 <HAL_ADC_Init+0x3c>
>>>>>>> Stashed changes

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< Updated upstream
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff fa41 	bl	8002334 <HAL_ADC_MspInit>
=======
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff fa1b 	bl	800357c <HAL_ADC_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< Updated upstream
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
=======
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
>>>>>>> Stashed changes
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
<<<<<<< Updated upstream
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff3f 	bl	8002d48 <LL_ADC_IsDeepPowerDownEnabled>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d004      	beq.n	8002eda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff25 	bl	8002d24 <LL_ADC_DisableDeepPowerDown>
=======
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff ff3f 	bl	8003fdc <LL_ADC_IsDeepPowerDownEnabled>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff ff25 	bl	8003fb8 <LL_ADC_DisableDeepPowerDown>
>>>>>>> Stashed changes
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< Updated upstream
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ff5a 	bl	8002d98 <LL_ADC_IsInternalRegulatorEnabled>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d115      	bne.n	8002f16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff ff3e 	bl	8002d70 <LL_ADC_EnableInternalRegulator>
=======
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff ff5a 	bl	800402c <LL_ADC_IsInternalRegulatorEnabled>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d115      	bne.n	80041aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff ff3e 	bl	8004004 <LL_ADC_EnableInternalRegulator>
>>>>>>> Stashed changes

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< Updated upstream
 8002ef4:	4b9c      	ldr	r3, [pc, #624]	@ (8003168 <HAL_ADC_Init+0x2e4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	4a9c      	ldr	r2, [pc, #624]	@ (800316c <HAL_ADC_Init+0x2e8>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	3301      	adds	r3, #1
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f08:	e002      	b.n	8002f10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f9      	bne.n	8002f0a <HAL_ADC_Init+0x86>
=======
 8004188:	4b9c      	ldr	r3, [pc, #624]	@ (80043fc <HAL_ADC_Init+0x2e4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	099b      	lsrs	r3, r3, #6
 800418e:	4a9c      	ldr	r2, [pc, #624]	@ (8004400 <HAL_ADC_Init+0x2e8>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	099b      	lsrs	r3, r3, #6
 8004196:	3301      	adds	r3, #1
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800419c:	e002      	b.n	80041a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f9      	bne.n	800419e <HAL_ADC_Init+0x86>
>>>>>>> Stashed changes
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< Updated upstream
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff ff3c 	bl	8002d98 <LL_ADC_IsInternalRegulatorEnabled>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2a:	f043 0210 	orr.w	r2, r3, #16
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f36:	f043 0201 	orr.w	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	77fb      	strb	r3, [r7, #31]
=======
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff ff3c 	bl	800402c <LL_ADC_IsInternalRegulatorEnabled>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10d      	bne.n	80041d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041be:	f043 0210 	orr.w	r2, r3, #16
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ca:	f043 0201 	orr.w	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< Updated upstream
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff ff75 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 8002f4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f040 8142 	bne.w	80031e0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f040 813e 	bne.w	80031e0 <HAL_ADC_Init+0x35c>
=======
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff ff75 	bl	80040ca <LL_ADC_REG_IsConversionOngoing>
 80041e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e6:	f003 0310 	and.w	r3, r3, #16
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f040 8142 	bne.w	8004474 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f040 813e 	bne.w	8004474 <HAL_ADC_Init+0x35c>
>>>>>>> Stashed changes
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< Updated upstream
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f68:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f6c:	f043 0202 	orr.w	r2, r3, #2
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004200:	f043 0202 	orr.w	r2, r3, #2
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> Stashed changes
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< Updated upstream
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff35 	bl	8002de8 <LL_ADC_IsEnabled>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d141      	bne.n	8003008 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f8c:	d004      	beq.n	8002f98 <HAL_ADC_Init+0x114>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a77      	ldr	r2, [pc, #476]	@ (8003170 <HAL_ADC_Init+0x2ec>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d10f      	bne.n	8002fb8 <HAL_ADC_Init+0x134>
 8002f98:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f9c:	f7ff ff24 	bl	8002de8 <LL_ADC_IsEnabled>
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	4873      	ldr	r0, [pc, #460]	@ (8003170 <HAL_ADC_Init+0x2ec>)
 8002fa4:	f7ff ff20 	bl	8002de8 <LL_ADC_IsEnabled>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4323      	orrs	r3, r4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e012      	b.n	8002fde <HAL_ADC_Init+0x15a>
 8002fb8:	486e      	ldr	r0, [pc, #440]	@ (8003174 <HAL_ADC_Init+0x2f0>)
 8002fba:	f7ff ff15 	bl	8002de8 <LL_ADC_IsEnabled>
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	486d      	ldr	r0, [pc, #436]	@ (8003178 <HAL_ADC_Init+0x2f4>)
 8002fc2:	f7ff ff11 	bl	8002de8 <LL_ADC_IsEnabled>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	431c      	orrs	r4, r3
 8002fca:	486c      	ldr	r0, [pc, #432]	@ (800317c <HAL_ADC_Init+0x2f8>)
 8002fcc:	f7ff ff0c 	bl	8002de8 <LL_ADC_IsEnabled>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	4323      	orrs	r3, r4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d012      	beq.n	8003008 <HAL_ADC_Init+0x184>
=======
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff ff35 	bl	800407c <LL_ADC_IsEnabled>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d141      	bne.n	800429c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004220:	d004      	beq.n	800422c <HAL_ADC_Init+0x114>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a77      	ldr	r2, [pc, #476]	@ (8004404 <HAL_ADC_Init+0x2ec>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d10f      	bne.n	800424c <HAL_ADC_Init+0x134>
 800422c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004230:	f7ff ff24 	bl	800407c <LL_ADC_IsEnabled>
 8004234:	4604      	mov	r4, r0
 8004236:	4873      	ldr	r0, [pc, #460]	@ (8004404 <HAL_ADC_Init+0x2ec>)
 8004238:	f7ff ff20 	bl	800407c <LL_ADC_IsEnabled>
 800423c:	4603      	mov	r3, r0
 800423e:	4323      	orrs	r3, r4
 8004240:	2b00      	cmp	r3, #0
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	e012      	b.n	8004272 <HAL_ADC_Init+0x15a>
 800424c:	486e      	ldr	r0, [pc, #440]	@ (8004408 <HAL_ADC_Init+0x2f0>)
 800424e:	f7ff ff15 	bl	800407c <LL_ADC_IsEnabled>
 8004252:	4604      	mov	r4, r0
 8004254:	486d      	ldr	r0, [pc, #436]	@ (800440c <HAL_ADC_Init+0x2f4>)
 8004256:	f7ff ff11 	bl	800407c <LL_ADC_IsEnabled>
 800425a:	4603      	mov	r3, r0
 800425c:	431c      	orrs	r4, r3
 800425e:	486c      	ldr	r0, [pc, #432]	@ (8004410 <HAL_ADC_Init+0x2f8>)
 8004260:	f7ff ff0c 	bl	800407c <LL_ADC_IsEnabled>
 8004264:	4603      	mov	r3, r0
 8004266:	4323      	orrs	r3, r4
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d012      	beq.n	800429c <HAL_ADC_Init+0x184>
>>>>>>> Stashed changes
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
<<<<<<< Updated upstream
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fea:	d004      	beq.n	8002ff6 <HAL_ADC_Init+0x172>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a5f      	ldr	r2, [pc, #380]	@ (8003170 <HAL_ADC_Init+0x2ec>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_Init+0x176>
 8002ff6:	4a62      	ldr	r2, [pc, #392]	@ (8003180 <HAL_ADC_Init+0x2fc>)
 8002ff8:	e000      	b.n	8002ffc <HAL_ADC_Init+0x178>
 8002ffa:	4a62      	ldr	r2, [pc, #392]	@ (8003184 <HAL_ADC_Init+0x300>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f7ff fcfe 	bl	8002a04 <LL_ADC_SetCommonClock>
=======
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800427e:	d004      	beq.n	800428a <HAL_ADC_Init+0x172>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a5f      	ldr	r2, [pc, #380]	@ (8004404 <HAL_ADC_Init+0x2ec>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d101      	bne.n	800428e <HAL_ADC_Init+0x176>
 800428a:	4a62      	ldr	r2, [pc, #392]	@ (8004414 <HAL_ADC_Init+0x2fc>)
 800428c:	e000      	b.n	8004290 <HAL_ADC_Init+0x178>
 800428e:	4a62      	ldr	r2, [pc, #392]	@ (8004418 <HAL_ADC_Init+0x300>)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f7ff fcfe 	bl	8003c98 <LL_ADC_SetCommonClock>
>>>>>>> Stashed changes
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
<<<<<<< Updated upstream
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	7f5b      	ldrb	r3, [r3, #29]
 800300c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003012:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003018:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800301e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003026:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003032:	2b01      	cmp	r3, #1
 8003034:	d106      	bne.n	8003044 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303a:	3b01      	subs	r3, #1
 800303c:	045b      	lsls	r3, r3, #17
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
=======
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	7f5b      	ldrb	r3, [r3, #29]
 80042a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80042ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80042b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d106      	bne.n	80042d8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ce:	3b01      	subs	r3, #1
 80042d0:	045b      	lsls	r3, r3, #17
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< Updated upstream
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d009      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003058:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
=======
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d009      	beq.n	80042f4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
<<<<<<< Updated upstream
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	4b48      	ldr	r3, [pc, #288]	@ (8003188 <HAL_ADC_Init+0x304>)
 8003068:	4013      	ands	r3, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	69b9      	ldr	r1, [r7, #24]
 8003070:	430b      	orrs	r3, r1
 8003072:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	611a      	str	r2, [r3, #16]
=======
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	4b48      	ldr	r3, [pc, #288]	@ (800441c <HAL_ADC_Init+0x304>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	69b9      	ldr	r1, [r7, #24]
 8004304:	430b      	orrs	r3, r1
 8004306:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
<<<<<<< Updated upstream
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fee4 	bl	8002e5c <LL_ADC_INJ_IsConversionOngoing>
 8003094:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d17f      	bne.n	800319c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d17c      	bne.n	800319c <HAL_ADC_Init+0x318>
=======
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fee4 	bl	80040f0 <LL_ADC_INJ_IsConversionOngoing>
 8004328:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d17f      	bne.n	8004430 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d17c      	bne.n	8004430 <HAL_ADC_Init+0x318>
>>>>>>> Stashed changes
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
<<<<<<< Updated upstream
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80030a6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030ae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030be:	f023 0302 	bic.w	r3, r3, #2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	69b9      	ldr	r1, [r7, #24]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d017      	beq.n	8003104 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030ec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6911      	ldr	r1, [r2, #16]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	430b      	orrs	r3, r1
 80030fe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003102:	e013      	b.n	800312c <HAL_ADC_Init+0x2a8>
=======
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800433a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004342:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004344:	4313      	orrs	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004352:	f023 0302 	bic.w	r3, r3, #2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	69b9      	ldr	r1, [r7, #24]
 800435c:	430b      	orrs	r3, r1
 800435e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d017      	beq.n	8004398 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004376:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004380:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004384:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6911      	ldr	r1, [r2, #16]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	430b      	orrs	r3, r1
 8004392:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004396:	e013      	b.n	80043c0 <HAL_ADC_Init+0x2a8>
>>>>>>> Stashed changes
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
<<<<<<< Updated upstream
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003112:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003124:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003128:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003132:	2b01      	cmp	r3, #1
 8003134:	d12a      	bne.n	800318c <HAL_ADC_Init+0x308>
=======
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80043a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80043b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043bc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d12a      	bne.n	8004420 <HAL_ADC_Init+0x308>
>>>>>>> Stashed changes
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
<<<<<<< Updated upstream
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003140:	f023 0304 	bic.w	r3, r3, #4
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800314c:	4311      	orrs	r1, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003152:	4311      	orrs	r1, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003158:	430a      	orrs	r2, r1
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0201 	orr.w	r2, r2, #1
 8003164:	611a      	str	r2, [r3, #16]
 8003166:	e019      	b.n	800319c <HAL_ADC_Init+0x318>
 8003168:	2000000c 	.word	0x2000000c
 800316c:	053e2d63 	.word	0x053e2d63
 8003170:	50000100 	.word	0x50000100
 8003174:	50000400 	.word	0x50000400
 8003178:	50000500 	.word	0x50000500
 800317c:	50000600 	.word	0x50000600
 8003180:	50000300 	.word	0x50000300
 8003184:	50000700 	.word	0x50000700
 8003188:	fff04007 	.word	0xfff04007
=======
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80043d4:	f023 0304 	bic.w	r3, r3, #4
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80043e0:	4311      	orrs	r1, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80043e6:	4311      	orrs	r1, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043ec:	430a      	orrs	r2, r1
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	611a      	str	r2, [r3, #16]
 80043fa:	e019      	b.n	8004430 <HAL_ADC_Init+0x318>
 80043fc:	20000274 	.word	0x20000274
 8004400:	053e2d63 	.word	0x053e2d63
 8004404:	50000100 	.word	0x50000100
 8004408:	50000400 	.word	0x50000400
 800440c:	50000500 	.word	0x50000500
 8004410:	50000600 	.word	0x50000600
 8004414:	50000300 	.word	0x50000300
 8004418:	50000700 	.word	0x50000700
 800441c:	fff04007 	.word	0xfff04007
>>>>>>> Stashed changes
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
<<<<<<< Updated upstream
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	611a      	str	r2, [r3, #16]
=======
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
<<<<<<< Updated upstream
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d10c      	bne.n	80031be <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	f023 010f 	bic.w	r1, r3, #15
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	1e5a      	subs	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80031bc:	e007      	b.n	80031ce <HAL_ADC_Init+0x34a>
=======
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d10c      	bne.n	8004452 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443e:	f023 010f 	bic.w	r1, r3, #15
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	1e5a      	subs	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004450:	e007      	b.n	8004462 <HAL_ADC_Init+0x34a>
>>>>>>> Stashed changes
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
<<<<<<< Updated upstream
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 020f 	bic.w	r2, r2, #15
 80031cc:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 020f 	bic.w	r2, r2, #15
 8004460:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> Stashed changes
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
<<<<<<< Updated upstream
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d2:	f023 0303 	bic.w	r3, r3, #3
 80031d6:	f043 0201 	orr.w	r2, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031de:	e007      	b.n	80031f0 <HAL_ADC_Init+0x36c>
=======
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004466:	f023 0303 	bic.w	r3, r3, #3
 800446a:	f043 0201 	orr.w	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004472:	e007      	b.n	8004484 <HAL_ADC_Init+0x36c>
>>>>>>> Stashed changes
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< Updated upstream
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e4:	f043 0210 	orr.w	r2, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	77fb      	strb	r3, [r7, #31]
=======
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004478:	f043 0210 	orr.w	r2, r3, #16
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< Updated upstream
 80031f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3724      	adds	r7, #36	@ 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd90      	pop	{r4, r7, pc}
 80031fa:	bf00      	nop

080031fc <HAL_ADC_Start_DMA>:
=======
 8004484:	7ffb      	ldrb	r3, [r7, #31]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3724      	adds	r7, #36	@ 0x24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd90      	pop	{r4, r7, pc}
 800448e:	bf00      	nop

08004490 <HAL_ADC_Start_DMA>:
>>>>>>> Stashed changes
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
<<<<<<< Updated upstream
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003210:	d004      	beq.n	800321c <HAL_ADC_Start_DMA+0x20>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a5a      	ldr	r2, [pc, #360]	@ (8003380 <HAL_ADC_Start_DMA+0x184>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d101      	bne.n	8003220 <HAL_ADC_Start_DMA+0x24>
 800321c:	4b59      	ldr	r3, [pc, #356]	@ (8003384 <HAL_ADC_Start_DMA+0x188>)
 800321e:	e000      	b.n	8003222 <HAL_ADC_Start_DMA+0x26>
 8003220:	4b59      	ldr	r3, [pc, #356]	@ (8003388 <HAL_ADC_Start_DMA+0x18c>)
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fd62 	bl	8002cec <LL_ADC_GetMultimode>
 8003228:	6138      	str	r0, [r7, #16]
=======
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044a4:	d004      	beq.n	80044b0 <HAL_ADC_Start_DMA+0x20>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a5a      	ldr	r2, [pc, #360]	@ (8004614 <HAL_ADC_Start_DMA+0x184>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d101      	bne.n	80044b4 <HAL_ADC_Start_DMA+0x24>
 80044b0:	4b59      	ldr	r3, [pc, #356]	@ (8004618 <HAL_ADC_Start_DMA+0x188>)
 80044b2:	e000      	b.n	80044b6 <HAL_ADC_Start_DMA+0x26>
 80044b4:	4b59      	ldr	r3, [pc, #356]	@ (800461c <HAL_ADC_Start_DMA+0x18c>)
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fd62 	bl	8003f80 <LL_ADC_GetMultimode>
 80044bc:	6138      	str	r0, [r7, #16]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< Updated upstream
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fe01 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	f040 809b 	bne.w	8003372 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_ADC_Start_DMA+0x4e>
 8003246:	2302      	movs	r3, #2
 8003248:	e096      	b.n	8003378 <HAL_ADC_Start_DMA+0x17c>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
=======
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fe01 	bl	80040ca <LL_ADC_REG_IsConversionOngoing>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f040 809b 	bne.w	8004606 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_ADC_Start_DMA+0x4e>
 80044da:	2302      	movs	r3, #2
 80044dc:	e096      	b.n	800460c <HAL_ADC_Start_DMA+0x17c>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
>>>>>>> Stashed changes

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
<<<<<<< Updated upstream
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a4d      	ldr	r2, [pc, #308]	@ (800338c <HAL_ADC_Start_DMA+0x190>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d008      	beq.n	800326e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b05      	cmp	r3, #5
 8003266:	d002      	beq.n	800326e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b09      	cmp	r3, #9
 800326c:	d17a      	bne.n	8003364 <HAL_ADC_Start_DMA+0x168>
=======
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a4d      	ldr	r2, [pc, #308]	@ (8004620 <HAL_ADC_Start_DMA+0x190>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d008      	beq.n	8004502 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b05      	cmp	r3, #5
 80044fa:	d002      	beq.n	8004502 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	2b09      	cmp	r3, #9
 8004500:	d17a      	bne.n	80045f8 <HAL_ADC_Start_DMA+0x168>
>>>>>>> Stashed changes
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
<<<<<<< Updated upstream
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 ff60 	bl	8004134 <ADC_Enable>
 8003274:	4603      	mov	r3, r0
 8003276:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003278:	7dfb      	ldrb	r3, [r7, #23]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d16d      	bne.n	800335a <HAL_ADC_Start_DMA+0x15e>
=======
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 ff60 	bl	80053c8 <ADC_Enable>
 8004508:	4603      	mov	r3, r0
 800450a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d16d      	bne.n	80045ee <HAL_ADC_Start_DMA+0x15e>
>>>>>>> Stashed changes
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
<<<<<<< Updated upstream
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003282:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004516:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> Stashed changes

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
<<<<<<< Updated upstream
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a3a      	ldr	r2, [pc, #232]	@ (8003380 <HAL_ADC_Start_DMA+0x184>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d009      	beq.n	80032b0 <HAL_ADC_Start_DMA+0xb4>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003390 <HAL_ADC_Start_DMA+0x194>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d002      	beq.n	80032ac <HAL_ADC_Start_DMA+0xb0>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	e003      	b.n	80032b4 <HAL_ADC_Start_DMA+0xb8>
 80032ac:	4b39      	ldr	r3, [pc, #228]	@ (8003394 <HAL_ADC_Start_DMA+0x198>)
 80032ae:	e001      	b.n	80032b4 <HAL_ADC_Start_DMA+0xb8>
 80032b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d002      	beq.n	80032c2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d105      	bne.n	80032ce <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a3a      	ldr	r2, [pc, #232]	@ (8004614 <HAL_ADC_Start_DMA+0x184>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d009      	beq.n	8004544 <HAL_ADC_Start_DMA+0xb4>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a3b      	ldr	r2, [pc, #236]	@ (8004624 <HAL_ADC_Start_DMA+0x194>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d002      	beq.n	8004540 <HAL_ADC_Start_DMA+0xb0>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	e003      	b.n	8004548 <HAL_ADC_Start_DMA+0xb8>
 8004540:	4b39      	ldr	r3, [pc, #228]	@ (8004628 <HAL_ADC_Start_DMA+0x198>)
 8004542:	e001      	b.n	8004548 <HAL_ADC_Start_DMA+0xb8>
 8004544:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	4293      	cmp	r3, r2
 800454e:	d002      	beq.n	8004556 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d105      	bne.n	8004562 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800455a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> Stashed changes
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
<<<<<<< Updated upstream
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d006      	beq.n	80032e8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032de:	f023 0206 	bic.w	r2, r3, #6
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80032e6:	e002      	b.n	80032ee <HAL_ADC_Start_DMA+0xf2>
=======
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004566:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d006      	beq.n	800457c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004572:	f023 0206 	bic.w	r2, r3, #6
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	661a      	str	r2, [r3, #96]	@ 0x60
 800457a:	e002      	b.n	8004582 <HAL_ADC_Start_DMA+0xf2>
>>>>>>> Stashed changes
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< Updated upstream
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> Stashed changes
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
<<<<<<< Updated upstream
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f2:	4a29      	ldr	r2, [pc, #164]	@ (8003398 <HAL_ADC_Start_DMA+0x19c>)
 80032f4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fa:	4a28      	ldr	r2, [pc, #160]	@ (800339c <HAL_ADC_Start_DMA+0x1a0>)
 80032fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003302:	4a27      	ldr	r2, [pc, #156]	@ (80033a0 <HAL_ADC_Start_DMA+0x1a4>)
 8003304:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004586:	4a29      	ldr	r2, [pc, #164]	@ (800462c <HAL_ADC_Start_DMA+0x19c>)
 8004588:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458e:	4a28      	ldr	r2, [pc, #160]	@ (8004630 <HAL_ADC_Start_DMA+0x1a0>)
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004596:	4a27      	ldr	r2, [pc, #156]	@ (8004634 <HAL_ADC_Start_DMA+0x1a4>)
 8004598:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> Stashed changes
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
<<<<<<< Updated upstream
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	221c      	movs	r2, #28
 800330c:	601a      	str	r2, [r3, #0]
=======
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	221c      	movs	r2, #28
 80045a0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
=======
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
>>>>>>> Stashed changes

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
<<<<<<< Updated upstream
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0210 	orr.w	r2, r2, #16
 8003324:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3340      	adds	r3, #64	@ 0x40
 8003340:	4619      	mov	r1, r3
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f001 fb37 	bl	80049b8 <HAL_DMA_Start_IT>
 800334a:	4603      	mov	r3, r0
 800334c:	75fb      	strb	r3, [r7, #23]
=======
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0210 	orr.w	r2, r2, #16
 80045b8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3340      	adds	r3, #64	@ 0x40
 80045d4:	4619      	mov	r1, r3
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f001 fb37 	bl	8005c4c <HAL_DMA_Start_IT>
 80045de:	4603      	mov	r3, r0
 80045e0:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
<<<<<<< Updated upstream
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fd5b 	bl	8002e0e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003358:	e00d      	b.n	8003376 <HAL_ADC_Start_DMA+0x17a>
=======
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff fd5b 	bl	80040a2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80045ec:	e00d      	b.n	800460a <HAL_ADC_Start_DMA+0x17a>
>>>>>>> Stashed changes
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003362:	e008      	b.n	8003376 <HAL_ADC_Start_DMA+0x17a>
=======
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80045f6:	e008      	b.n	800460a <HAL_ADC_Start_DMA+0x17a>
>>>>>>> Stashed changes

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
<<<<<<< Updated upstream
 8003364:	2301      	movs	r3, #1
 8003366:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003370:	e001      	b.n	8003376 <HAL_ADC_Start_DMA+0x17a>
=======
 80045f8:	2301      	movs	r3, #1
 80045fa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004604:	e001      	b.n	800460a <HAL_ADC_Start_DMA+0x17a>
>>>>>>> Stashed changes
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
<<<<<<< Updated upstream
 8003372:	2302      	movs	r3, #2
 8003374:	75fb      	strb	r3, [r7, #23]
=======
 8004606:	2302      	movs	r3, #2
 8004608:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< Updated upstream
 8003376:	7dfb      	ldrb	r3, [r7, #23]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	50000100 	.word	0x50000100
 8003384:	50000300 	.word	0x50000300
 8003388:	50000700 	.word	0x50000700
 800338c:	50000600 	.word	0x50000600
 8003390:	50000500 	.word	0x50000500
 8003394:	50000400 	.word	0x50000400
 8003398:	08004261 	.word	0x08004261
 800339c:	08004339 	.word	0x08004339
 80033a0:	08004355 	.word	0x08004355

080033a4 <HAL_ADC_IRQHandler>:
=======
 800460a:	7dfb      	ldrb	r3, [r7, #23]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	50000100 	.word	0x50000100
 8004618:	50000300 	.word	0x50000300
 800461c:	50000700 	.word	0x50000700
 8004620:	50000600 	.word	0x50000600
 8004624:	50000500 	.word	0x50000500
 8004628:	50000400 	.word	0x50000400
 800462c:	080054f5 	.word	0x080054f5
 8004630:	080055cd 	.word	0x080055cd
 8004634:	080055e9 	.word	0x080055e9

08004638 <HAL_ADC_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	@ 0x28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80033ac:	2300      	movs	r3, #0
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	61bb      	str	r3, [r7, #24]
=======
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	@ 0x28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004640:	2300      	movs	r3, #0
 8004642:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
<<<<<<< Updated upstream
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033c8:	d004      	beq.n	80033d4 <HAL_ADC_IRQHandler+0x30>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a8e      	ldr	r2, [pc, #568]	@ (8003608 <HAL_ADC_IRQHandler+0x264>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d101      	bne.n	80033d8 <HAL_ADC_IRQHandler+0x34>
 80033d4:	4b8d      	ldr	r3, [pc, #564]	@ (800360c <HAL_ADC_IRQHandler+0x268>)
 80033d6:	e000      	b.n	80033da <HAL_ADC_IRQHandler+0x36>
 80033d8:	4b8d      	ldr	r3, [pc, #564]	@ (8003610 <HAL_ADC_IRQHandler+0x26c>)
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fc86 	bl	8002cec <LL_ADC_GetMultimode>
 80033e0:	6178      	str	r0, [r7, #20]
=======
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800465c:	d004      	beq.n	8004668 <HAL_ADC_IRQHandler+0x30>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a8e      	ldr	r2, [pc, #568]	@ (800489c <HAL_ADC_IRQHandler+0x264>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d101      	bne.n	800466c <HAL_ADC_IRQHandler+0x34>
 8004668:	4b8d      	ldr	r3, [pc, #564]	@ (80048a0 <HAL_ADC_IRQHandler+0x268>)
 800466a:	e000      	b.n	800466e <HAL_ADC_IRQHandler+0x36>
 800466c:	4b8d      	ldr	r3, [pc, #564]	@ (80048a4 <HAL_ADC_IRQHandler+0x26c>)
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff fc86 	bl	8003f80 <LL_ADC_GetMultimode>
 8004674:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
<<<<<<< Updated upstream
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d017      	beq.n	800341c <HAL_ADC_IRQHandler+0x78>
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d012      	beq.n	800341c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d105      	bne.n	800340e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003406:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d017      	beq.n	80046b0 <HAL_ADC_IRQHandler+0x78>
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d012      	beq.n	80046b0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	2b00      	cmp	r3, #0
 8004694:	d105      	bne.n	80046a2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800469a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> Stashed changes

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
<<<<<<< Updated upstream
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f001 f808 	bl	8004424 <HAL_ADCEx_EndOfSamplingCallback>
=======
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f001 f808 	bl	80056b8 <HAL_ADCEx_EndOfSamplingCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
<<<<<<< Updated upstream
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2202      	movs	r2, #2
 800341a:	601a      	str	r2, [r3, #0]
=======
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2202      	movs	r2, #2
 80046ae:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
<<<<<<< Updated upstream
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d004      	beq.n	8003430 <HAL_ADC_IRQHandler+0x8c>
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10b      	bne.n	8003448 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8094 	beq.w	8003564 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 808e 	beq.w	8003564 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d004      	beq.n	80046c4 <HAL_ADC_IRQHandler+0x8c>
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8094 	beq.w	80047f8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 808e 	beq.w	80047f8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d105      	bne.n	80046f4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> Stashed changes
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
<<<<<<< Updated upstream
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fb9f 	bl	8002ba8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d072      	beq.n	8003556 <HAL_ADC_IRQHandler+0x1b2>
=======
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fb9f 	bl	8003e3c <LL_ADC_REG_IsTriggerSourceSWStart>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d072      	beq.n	80047ea <HAL_ADC_IRQHandler+0x1b2>
>>>>>>> Stashed changes
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
<<<<<<< Updated upstream
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a64      	ldr	r2, [pc, #400]	@ (8003608 <HAL_ADC_IRQHandler+0x264>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d009      	beq.n	800348e <HAL_ADC_IRQHandler+0xea>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a65      	ldr	r2, [pc, #404]	@ (8003614 <HAL_ADC_IRQHandler+0x270>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d002      	beq.n	800348a <HAL_ADC_IRQHandler+0xe6>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	e003      	b.n	8003492 <HAL_ADC_IRQHandler+0xee>
 800348a:	4b63      	ldr	r3, [pc, #396]	@ (8003618 <HAL_ADC_IRQHandler+0x274>)
 800348c:	e001      	b.n	8003492 <HAL_ADC_IRQHandler+0xee>
 800348e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	4293      	cmp	r3, r2
 8003498:	d008      	beq.n	80034ac <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d002      	beq.n	80034ac <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b09      	cmp	r3, #9
 80034aa:	d104      	bne.n	80034b6 <HAL_ADC_IRQHandler+0x112>
=======
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a64      	ldr	r2, [pc, #400]	@ (800489c <HAL_ADC_IRQHandler+0x264>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d009      	beq.n	8004722 <HAL_ADC_IRQHandler+0xea>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a65      	ldr	r2, [pc, #404]	@ (80048a8 <HAL_ADC_IRQHandler+0x270>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d002      	beq.n	800471e <HAL_ADC_IRQHandler+0xe6>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	e003      	b.n	8004726 <HAL_ADC_IRQHandler+0xee>
 800471e:	4b63      	ldr	r3, [pc, #396]	@ (80048ac <HAL_ADC_IRQHandler+0x274>)
 8004720:	e001      	b.n	8004726 <HAL_ADC_IRQHandler+0xee>
 8004722:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	4293      	cmp	r3, r2
 800472c:	d008      	beq.n	8004740 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b05      	cmp	r3, #5
 8004738:	d002      	beq.n	8004740 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b09      	cmp	r3, #9
 800473e:	d104      	bne.n	800474a <HAL_ADC_IRQHandler+0x112>
>>>>>>> Stashed changes
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
<<<<<<< Updated upstream
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	623b      	str	r3, [r7, #32]
 80034b4:	e014      	b.n	80034e0 <HAL_ADC_IRQHandler+0x13c>
=======
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	623b      	str	r3, [r7, #32]
 8004748:	e014      	b.n	8004774 <HAL_ADC_IRQHandler+0x13c>
>>>>>>> Stashed changes
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
<<<<<<< Updated upstream
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a53      	ldr	r2, [pc, #332]	@ (8003608 <HAL_ADC_IRQHandler+0x264>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_ADC_IRQHandler+0x130>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a53      	ldr	r2, [pc, #332]	@ (8003614 <HAL_ADC_IRQHandler+0x270>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d002      	beq.n	80034d0 <HAL_ADC_IRQHandler+0x12c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	e003      	b.n	80034d8 <HAL_ADC_IRQHandler+0x134>
 80034d0:	4b51      	ldr	r3, [pc, #324]	@ (8003618 <HAL_ADC_IRQHandler+0x274>)
 80034d2:	e001      	b.n	80034d8 <HAL_ADC_IRQHandler+0x134>
 80034d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80034d8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	623b      	str	r3, [r7, #32]
=======
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a53      	ldr	r2, [pc, #332]	@ (800489c <HAL_ADC_IRQHandler+0x264>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_ADC_IRQHandler+0x130>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a53      	ldr	r2, [pc, #332]	@ (80048a8 <HAL_ADC_IRQHandler+0x270>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d002      	beq.n	8004764 <HAL_ADC_IRQHandler+0x12c>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	e003      	b.n	800476c <HAL_ADC_IRQHandler+0x134>
 8004764:	4b51      	ldr	r3, [pc, #324]	@ (80048ac <HAL_ADC_IRQHandler+0x274>)
 8004766:	e001      	b.n	800476c <HAL_ADC_IRQHandler+0x134>
 8004768:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800476c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	623b      	str	r3, [r7, #32]
>>>>>>> Stashed changes
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
<<<<<<< Updated upstream
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d135      	bne.n	8003556 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d12e      	bne.n	8003556 <HAL_ADC_IRQHandler+0x1b2>
=======
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d135      	bne.n	80047ea <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b08      	cmp	r3, #8
 800478a:	d12e      	bne.n	80047ea <HAL_ADC_IRQHandler+0x1b2>
>>>>>>> Stashed changes
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< Updated upstream
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fc9a 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d11a      	bne.n	800353e <HAL_ADC_IRQHandler+0x19a>
=======
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff fc9a 	bl	80040ca <LL_ADC_REG_IsConversionOngoing>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d11a      	bne.n	80047d2 <HAL_ADC_IRQHandler+0x19a>
>>>>>>> Stashed changes
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
<<<<<<< Updated upstream
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 020c 	bic.w	r2, r2, #12
 8003516:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d112      	bne.n	8003556 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003534:	f043 0201 	orr.w	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800353c:	e00b      	b.n	8003556 <HAL_ADC_IRQHandler+0x1b2>
=======
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 020c 	bic.w	r2, r2, #12
 80047aa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d112      	bne.n	80047ea <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c8:	f043 0201 	orr.w	r2, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047d0:	e00b      	b.n	80047ea <HAL_ADC_IRQHandler+0x1b2>
>>>>>>> Stashed changes
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< Updated upstream
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003542:	f043 0210 	orr.w	r2, r3, #16
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354e:	f043 0201 	orr.w	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d6:	f043 0210 	orr.w	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e2:	f043 0201 	orr.w	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> Stashed changes
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< Updated upstream
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f984 	bl	8003864 <HAL_ADC_ConvCpltCallback>
=======
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f984 	bl	8004af8 <HAL_ADC_ConvCpltCallback>
>>>>>>> Stashed changes
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
<<<<<<< Updated upstream
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	220c      	movs	r2, #12
 8003562:	601a      	str	r2, [r3, #0]
=======
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	220c      	movs	r2, #12
 80047f6:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
<<<<<<< Updated upstream
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d004      	beq.n	8003578 <HAL_ADC_IRQHandler+0x1d4>
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 80b3 	beq.w	80036ea <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 80ad 	beq.w	80036ea <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d004      	beq.n	800480c <HAL_ADC_IRQHandler+0x1d4>
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10b      	bne.n	8004824 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 80b3 	beq.w	800497e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 80ad 	beq.w	800497e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004828:	f003 0310 	and.w	r3, r3, #16
 800482c:	2b00      	cmp	r3, #0
 800482e:	d105      	bne.n	800483c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004834:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> Stashed changes
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
<<<<<<< Updated upstream
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fb3a 	bl	8002c26 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80035b2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff faf5 	bl	8002ba8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035be:	60b8      	str	r0, [r7, #8]
=======
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff fb3a 	bl	8003eba <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004846:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff faf5 	bl	8003e3c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004852:	60b8      	str	r0, [r7, #8]
>>>>>>> Stashed changes
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
<<<<<<< Updated upstream
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a10      	ldr	r2, [pc, #64]	@ (8003608 <HAL_ADC_IRQHandler+0x264>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d009      	beq.n	80035de <HAL_ADC_IRQHandler+0x23a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a11      	ldr	r2, [pc, #68]	@ (8003614 <HAL_ADC_IRQHandler+0x270>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d002      	beq.n	80035da <HAL_ADC_IRQHandler+0x236>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	e003      	b.n	80035e2 <HAL_ADC_IRQHandler+0x23e>
 80035da:	4b0f      	ldr	r3, [pc, #60]	@ (8003618 <HAL_ADC_IRQHandler+0x274>)
 80035dc:	e001      	b.n	80035e2 <HAL_ADC_IRQHandler+0x23e>
 80035de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d008      	beq.n	80035fc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2b06      	cmp	r3, #6
 80035f4:	d002      	beq.n	80035fc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b07      	cmp	r3, #7
 80035fa:	d10f      	bne.n	800361c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	623b      	str	r3, [r7, #32]
 8003604:	e01f      	b.n	8003646 <HAL_ADC_IRQHandler+0x2a2>
 8003606:	bf00      	nop
 8003608:	50000100 	.word	0x50000100
 800360c:	50000300 	.word	0x50000300
 8003610:	50000700 	.word	0x50000700
 8003614:	50000500 	.word	0x50000500
 8003618:	50000400 	.word	0x50000400
=======
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a10      	ldr	r2, [pc, #64]	@ (800489c <HAL_ADC_IRQHandler+0x264>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d009      	beq.n	8004872 <HAL_ADC_IRQHandler+0x23a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a11      	ldr	r2, [pc, #68]	@ (80048a8 <HAL_ADC_IRQHandler+0x270>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d002      	beq.n	800486e <HAL_ADC_IRQHandler+0x236>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	e003      	b.n	8004876 <HAL_ADC_IRQHandler+0x23e>
 800486e:	4b0f      	ldr	r3, [pc, #60]	@ (80048ac <HAL_ADC_IRQHandler+0x274>)
 8004870:	e001      	b.n	8004876 <HAL_ADC_IRQHandler+0x23e>
 8004872:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6812      	ldr	r2, [r2, #0]
 800487a:	4293      	cmp	r3, r2
 800487c:	d008      	beq.n	8004890 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2b06      	cmp	r3, #6
 8004888:	d002      	beq.n	8004890 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b07      	cmp	r3, #7
 800488e:	d10f      	bne.n	80048b0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	623b      	str	r3, [r7, #32]
 8004898:	e01f      	b.n	80048da <HAL_ADC_IRQHandler+0x2a2>
 800489a:	bf00      	nop
 800489c:	50000100 	.word	0x50000100
 80048a0:	50000300 	.word	0x50000300
 80048a4:	50000700 	.word	0x50000700
 80048a8:	50000500 	.word	0x50000500
 80048ac:	50000400 	.word	0x50000400
>>>>>>> Stashed changes
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
<<<<<<< Updated upstream
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a8b      	ldr	r2, [pc, #556]	@ (8003850 <HAL_ADC_IRQHandler+0x4ac>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d009      	beq.n	800363a <HAL_ADC_IRQHandler+0x296>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a8a      	ldr	r2, [pc, #552]	@ (8003854 <HAL_ADC_IRQHandler+0x4b0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d002      	beq.n	8003636 <HAL_ADC_IRQHandler+0x292>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	e003      	b.n	800363e <HAL_ADC_IRQHandler+0x29a>
 8003636:	4b88      	ldr	r3, [pc, #544]	@ (8003858 <HAL_ADC_IRQHandler+0x4b4>)
 8003638:	e001      	b.n	800363e <HAL_ADC_IRQHandler+0x29a>
 800363a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800363e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	623b      	str	r3, [r7, #32]
=======
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a8b      	ldr	r2, [pc, #556]	@ (8004ae4 <HAL_ADC_IRQHandler+0x4ac>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_ADC_IRQHandler+0x296>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a8a      	ldr	r2, [pc, #552]	@ (8004ae8 <HAL_ADC_IRQHandler+0x4b0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d002      	beq.n	80048ca <HAL_ADC_IRQHandler+0x292>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	e003      	b.n	80048d2 <HAL_ADC_IRQHandler+0x29a>
 80048ca:	4b88      	ldr	r3, [pc, #544]	@ (8004aec <HAL_ADC_IRQHandler+0x4b4>)
 80048cc:	e001      	b.n	80048d2 <HAL_ADC_IRQHandler+0x29a>
 80048ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80048d2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	623b      	str	r3, [r7, #32]
>>>>>>> Stashed changes
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
<<<<<<< Updated upstream
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d047      	beq.n	80036dc <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <HAL_ADC_IRQHandler+0x2c2>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d03f      	beq.n	80036dc <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003662:	2b00      	cmp	r3, #0
 8003664:	d13a      	bne.n	80036dc <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003670:	2b40      	cmp	r3, #64	@ 0x40
 8003672:	d133      	bne.n	80036dc <HAL_ADC_IRQHandler+0x338>
=======
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d047      	beq.n	8004970 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <HAL_ADC_IRQHandler+0x2c2>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d03f      	beq.n	8004970 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d13a      	bne.n	8004970 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004904:	2b40      	cmp	r3, #64	@ 0x40
 8004906:	d133      	bne.n	8004970 <HAL_ADC_IRQHandler+0x338>
>>>>>>> Stashed changes
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
<<<<<<< Updated upstream
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d12e      	bne.n	80036dc <HAL_ADC_IRQHandler+0x338>
=======
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d12e      	bne.n	8004970 <HAL_ADC_IRQHandler+0x338>
>>>>>>> Stashed changes
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< Updated upstream
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fbea 	bl	8002e5c <LL_ADC_INJ_IsConversionOngoing>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d11a      	bne.n	80036c4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800369c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d112      	bne.n	80036dc <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036c2:	e00b      	b.n	80036dc <HAL_ADC_IRQHandler+0x338>
=======
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fbea 	bl	80040f0 <LL_ADC_INJ_IsConversionOngoing>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d11a      	bne.n	8004958 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004930:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004936:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d112      	bne.n	8004970 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800494e:	f043 0201 	orr.w	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004956:	e00b      	b.n	8004970 <HAL_ADC_IRQHandler+0x338>
>>>>>>> Stashed changes
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< Updated upstream
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c8:	f043 0210 	orr.w	r2, r3, #16
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d4:	f043 0201 	orr.w	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800495c:	f043 0210 	orr.w	r2, r3, #16
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004968:	f043 0201 	orr.w	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> Stashed changes
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
<<<<<<< Updated upstream
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fe79 	bl	80043d4 <HAL_ADCEx_InjectedConvCpltCallback>
=======
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fe79 	bl	8005668 <HAL_ADCEx_InjectedConvCpltCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
<<<<<<< Updated upstream
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2260      	movs	r2, #96	@ 0x60
 80036e8:	601a      	str	r2, [r3, #0]
=======
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2260      	movs	r2, #96	@ 0x60
 800497c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
<<<<<<< Updated upstream
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d011      	beq.n	8003718 <HAL_ADC_IRQHandler+0x374>
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00c      	beq.n	8003718 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003702:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004984:	2b00      	cmp	r3, #0
 8004986:	d011      	beq.n	80049ac <HAL_ADC_IRQHandler+0x374>
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00c      	beq.n	80049ac <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004996:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> Stashed changes

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
<<<<<<< Updated upstream
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f8be 	bl	800388c <HAL_ADC_LevelOutOfWindowCallback>
=======
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f8be 	bl	8004b20 <HAL_ADC_LevelOutOfWindowCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
<<<<<<< Updated upstream
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2280      	movs	r2, #128	@ 0x80
 8003716:	601a      	str	r2, [r3, #0]
=======
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2280      	movs	r2, #128	@ 0x80
 80049aa:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
<<<<<<< Updated upstream
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d012      	beq.n	8003748 <HAL_ADC_IRQHandler+0x3a4>
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00d      	beq.n	8003748 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003730:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d012      	beq.n	80049dc <HAL_ADC_IRQHandler+0x3a4>
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00d      	beq.n	80049dc <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> Stashed changes

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
<<<<<<< Updated upstream
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fe5f 	bl	80043fc <HAL_ADCEx_LevelOutOfWindow2Callback>
=======
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fe5f 	bl	8005690 <HAL_ADCEx_LevelOutOfWindow2Callback>
>>>>>>> Stashed changes
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
<<<<<<< Updated upstream
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003746:	601a      	str	r2, [r3, #0]
=======
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049da:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
<<<<<<< Updated upstream
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800374e:	2b00      	cmp	r3, #0
 8003750:	d012      	beq.n	8003778 <HAL_ADC_IRQHandler+0x3d4>
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00d      	beq.n	8003778 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003760:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d012      	beq.n	8004a0c <HAL_ADC_IRQHandler+0x3d4>
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00d      	beq.n	8004a0c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> Stashed changes

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
<<<<<<< Updated upstream
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fe51 	bl	8004410 <HAL_ADCEx_LevelOutOfWindow3Callback>
=======
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fe51 	bl	80056a4 <HAL_ADCEx_LevelOutOfWindow3Callback>
>>>>>>> Stashed changes
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
<<<<<<< Updated upstream
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003776:	601a      	str	r2, [r3, #0]
=======
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a0a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
<<<<<<< Updated upstream
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b00      	cmp	r3, #0
 8003780:	d043      	beq.n	800380a <HAL_ADC_IRQHandler+0x466>
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	d03e      	beq.n	800380a <HAL_ADC_IRQHandler+0x466>
=======
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f003 0310 	and.w	r3, r3, #16
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d043      	beq.n	8004a9e <HAL_ADC_IRQHandler+0x466>
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d03e      	beq.n	8004a9e <HAL_ADC_IRQHandler+0x466>
>>>>>>> Stashed changes
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
<<<<<<< Updated upstream
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003794:	2301      	movs	r3, #1
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
 8003798:	e021      	b.n	80037de <HAL_ADC_IRQHandler+0x43a>
=======
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a2c:	e021      	b.n	8004a72 <HAL_ADC_IRQHandler+0x43a>
>>>>>>> Stashed changes
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
<<<<<<< Updated upstream
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d015      	beq.n	80037cc <HAL_ADC_IRQHandler+0x428>
=======
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d015      	beq.n	8004a60 <HAL_ADC_IRQHandler+0x428>
>>>>>>> Stashed changes
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
<<<<<<< Updated upstream
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037a8:	d004      	beq.n	80037b4 <HAL_ADC_IRQHandler+0x410>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a28      	ldr	r2, [pc, #160]	@ (8003850 <HAL_ADC_IRQHandler+0x4ac>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d101      	bne.n	80037b8 <HAL_ADC_IRQHandler+0x414>
 80037b4:	4b29      	ldr	r3, [pc, #164]	@ (800385c <HAL_ADC_IRQHandler+0x4b8>)
 80037b6:	e000      	b.n	80037ba <HAL_ADC_IRQHandler+0x416>
 80037b8:	4b29      	ldr	r3, [pc, #164]	@ (8003860 <HAL_ADC_IRQHandler+0x4bc>)
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff faa4 	bl	8002d08 <LL_ADC_GetMultiDMATransfer>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80037c6:	2301      	movs	r3, #1
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ca:	e008      	b.n	80037de <HAL_ADC_IRQHandler+0x43a>
=======
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a3c:	d004      	beq.n	8004a48 <HAL_ADC_IRQHandler+0x410>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a28      	ldr	r2, [pc, #160]	@ (8004ae4 <HAL_ADC_IRQHandler+0x4ac>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d101      	bne.n	8004a4c <HAL_ADC_IRQHandler+0x414>
 8004a48:	4b29      	ldr	r3, [pc, #164]	@ (8004af0 <HAL_ADC_IRQHandler+0x4b8>)
 8004a4a:	e000      	b.n	8004a4e <HAL_ADC_IRQHandler+0x416>
 8004a4c:	4b29      	ldr	r3, [pc, #164]	@ (8004af4 <HAL_ADC_IRQHandler+0x4bc>)
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff faa4 	bl	8003f9c <LL_ADC_GetMultiDMATransfer>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00b      	beq.n	8004a72 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a5e:	e008      	b.n	8004a72 <HAL_ADC_IRQHandler+0x43a>
>>>>>>> Stashed changes
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
<<<<<<< Updated upstream
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80037da:	2301      	movs	r3, #1
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> Stashed changes
        }
      }
    }

    if (overrun_error == 1UL)
<<<<<<< Updated upstream
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d10e      	bne.n	8003802 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f4:	f043 0202 	orr.w	r2, r3, #2
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d10e      	bne.n	8004a96 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a88:	f043 0202 	orr.w	r2, r3, #2
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> Stashed changes
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
<<<<<<< Updated upstream
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f84f 	bl	80038a0 <HAL_ADC_ErrorCallback>
=======
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f84f 	bl	8004b34 <HAL_ADC_ErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
<<<<<<< Updated upstream
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2210      	movs	r2, #16
 8003808:	601a      	str	r2, [r3, #0]
=======
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2210      	movs	r2, #16
 8004a9c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
<<<<<<< Updated upstream
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003810:	2b00      	cmp	r3, #0
 8003812:	d018      	beq.n	8003846 <HAL_ADC_IRQHandler+0x4a2>
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381a:	2b00      	cmp	r3, #0
 800381c:	d013      	beq.n	8003846 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382e:	f043 0208 	orr.w	r2, r3, #8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800383e:	601a      	str	r2, [r3, #0]
=======
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d018      	beq.n	8004ada <HAL_ADC_IRQHandler+0x4a2>
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d013      	beq.n	8004ada <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac2:	f043 0208 	orr.w	r2, r3, #8
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ad2:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
<<<<<<< Updated upstream
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fdd1 	bl	80043e8 <HAL_ADCEx_InjectedQueueOverflowCallback>
=======
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fdd1 	bl	800567c <HAL_ADCEx_InjectedQueueOverflowCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
<<<<<<< Updated upstream
 8003846:	bf00      	nop
 8003848:	3728      	adds	r7, #40	@ 0x28
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	50000100 	.word	0x50000100
 8003854:	50000500 	.word	0x50000500
 8003858:	50000400 	.word	0x50000400
 800385c:	50000300 	.word	0x50000300
 8003860:	50000700 	.word	0x50000700

08003864 <HAL_ADC_ConvCpltCallback>:
=======
 8004ada:	bf00      	nop
 8004adc:	3728      	adds	r7, #40	@ 0x28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	50000100 	.word	0x50000100
 8004ae8:	50000500 	.word	0x50000500
 8004aec:	50000400 	.word	0x50000400
 8004af0:	50000300 	.word	0x50000300
 8004af4:	50000700 	.word	0x50000700

08004af8 <HAL_ADC_ConvCpltCallback>:
>>>>>>> Stashed changes
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
=======
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_ADC_ConvHalfCpltCallback>:
=======
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_ADC_ConvHalfCpltCallback>:
>>>>>>> Stashed changes
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
=======
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
<<<<<<< Updated upstream
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_ADC_LevelOutOfWindowCallback>:
=======
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_ADC_LevelOutOfWindowCallback>:
>>>>>>> Stashed changes
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
=======
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
<<<<<<< Updated upstream
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_ADC_ErrorCallback>:
=======
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_ADC_ErrorCallback>:
>>>>>>> Stashed changes
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
=======
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
<<<<<<< Updated upstream
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_ADC_ConfigChannel>:
=======
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_ADC_ConfigChannel>:
>>>>>>> Stashed changes
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
<<<<<<< Updated upstream
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b0b6      	sub	sp, #216	@ 0xd8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
=======
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b0b6      	sub	sp, #216	@ 0xd8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< Updated upstream
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d102      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x24>
 80038d2:	2302      	movs	r3, #2
 80038d4:	f000 bc13 	b.w	80040fe <HAL_ADC_ConfigChannel+0x84a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
=======
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d102      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x24>
 8004b66:	2302      	movs	r3, #2
 8004b68:	f000 bc13 	b.w	8005392 <HAL_ADC_ConfigChannel+0x84a>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
>>>>>>> Stashed changes
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< Updated upstream
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff faa6 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f040 83f3 	bne.w	80040d8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6859      	ldr	r1, [r3, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	f7ff f965 	bl	8002bce <LL_ADC_REG_SetSequencerRanks>
=======
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff faa6 	bl	80040ca <LL_ADC_REG_IsConversionOngoing>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f040 83f3 	bne.w	800536c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6859      	ldr	r1, [r3, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f7ff f965 	bl	8003e62 <LL_ADC_REG_SetSequencerRanks>
>>>>>>> Stashed changes
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< Updated upstream
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fa94 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 800390e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff faa0 	bl	8002e5c <LL_ADC_INJ_IsConversionOngoing>
 800391c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003920:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003924:	2b00      	cmp	r3, #0
 8003926:	f040 81d9 	bne.w	8003cdc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800392a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800392e:	2b00      	cmp	r3, #0
 8003930:	f040 81d4 	bne.w	8003cdc <HAL_ADC_ConfigChannel+0x428>
=======
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fa94 	bl	80040ca <LL_ADC_REG_IsConversionOngoing>
 8004ba2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff faa0 	bl	80040f0 <LL_ADC_INJ_IsConversionOngoing>
 8004bb0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bb4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f040 81d9 	bne.w	8004f70 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f040 81d4 	bne.w	8004f70 <HAL_ADC_ConfigChannel+0x428>
>>>>>>> Stashed changes
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
<<<<<<< Updated upstream
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800393c:	d10f      	bne.n	800395e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2200      	movs	r2, #0
 8003948:	4619      	mov	r1, r3
 800394a:	f7ff f97f 	bl	8002c4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff f913 	bl	8002b82 <LL_ADC_SetSamplingTimeCommonConfig>
 800395c:	e00e      	b.n	800397c <HAL_ADC_ConfigChannel+0xc8>
=======
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	4619      	mov	r1, r3
 8004bde:	f7ff f97f 	bl	8003ee0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff f913 	bl	8003e16 <LL_ADC_SetSamplingTimeCommonConfig>
 8004bf0:	e00e      	b.n	8004c10 <HAL_ADC_ConfigChannel+0xc8>
>>>>>>> Stashed changes
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
<<<<<<< Updated upstream
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	461a      	mov	r2, r3
 800396c:	f7ff f96e 	bl	8002c4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff f903 	bl	8002b82 <LL_ADC_SetSamplingTimeCommonConfig>
=======
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6819      	ldr	r1, [r3, #0]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f7ff f96e 	bl	8003ee0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff f903 	bl	8003e16 <LL_ADC_SetSamplingTimeCommonConfig>
>>>>>>> Stashed changes

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
<<<<<<< Updated upstream
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	08db      	lsrs	r3, r3, #3
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b04      	cmp	r3, #4
 800399c:	d022      	beq.n	80039e4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6919      	ldr	r1, [r3, #16]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039ae:	f7ff f85d 	bl	8002a6c <LL_ADC_SetOffset>
=======
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	695a      	ldr	r2, [r3, #20]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	08db      	lsrs	r3, r3, #3
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d022      	beq.n	8004c78 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6919      	ldr	r1, [r3, #16]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c42:	f7ff f85d 	bl	8003d00 <LL_ADC_SetOffset>
>>>>>>> Stashed changes

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
<<<<<<< Updated upstream
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6919      	ldr	r1, [r3, #16]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	461a      	mov	r2, r3
 80039c0:	f7ff f8a9 	bl	8002b16 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d102      	bne.n	80039da <HAL_ADC_ConfigChannel+0x126>
 80039d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039d8:	e000      	b.n	80039dc <HAL_ADC_ConfigChannel+0x128>
 80039da:	2300      	movs	r3, #0
 80039dc:	461a      	mov	r2, r3
 80039de:	f7ff f8b5 	bl	8002b4c <LL_ADC_SetOffsetSaturation>
 80039e2:	e17b      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x428>
=======
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6919      	ldr	r1, [r3, #16]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f7ff f8a9 	bl	8003daa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d102      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x126>
 8004c68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c6c:	e000      	b.n	8004c70 <HAL_ADC_ConfigChannel+0x128>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	461a      	mov	r2, r3
 8004c72:	f7ff f8b5 	bl	8003de0 <LL_ADC_SetOffsetSaturation>
 8004c76:	e17b      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x428>
>>>>>>> Stashed changes
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
<<<<<<< Updated upstream
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2100      	movs	r1, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff f862 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10a      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x15c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff f857 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003a06:	4603      	mov	r3, r0
 8003a08:	0e9b      	lsrs	r3, r3, #26
 8003a0a:	f003 021f 	and.w	r2, r3, #31
 8003a0e:	e01e      	b.n	8003a4e <HAL_ADC_ConfigChannel+0x19a>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff f84c 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
=======
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff f862 	bl	8003d48 <LL_ADC_GetOffsetChannel>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x15c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2100      	movs	r1, #0
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff f857 	bl	8003d48 <LL_ADC_GetOffsetChannel>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	0e9b      	lsrs	r3, r3, #26
 8004c9e:	f003 021f 	and.w	r2, r3, #31
 8004ca2:	e01e      	b.n	8004ce2 <HAL_ADC_ConfigChannel+0x19a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff f84c 	bl	8003d48 <LL_ADC_GetOffsetChannel>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
>>>>>>> Stashed changes
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
<<<<<<< Updated upstream
 8003a22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a26:	fa93 f3a3 	rbit	r3, r3
 8003a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
=======
 8004cb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004cba:	fa93 f3a3 	rbit	r3, r3
 8004cbe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
>>>>>>> Stashed changes
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
<<<<<<< Updated upstream
 8003a2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
=======
 8004cc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
>>>>>>> Stashed changes
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
<<<<<<< Updated upstream
 8003a36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003a3e:	2320      	movs	r3, #32
 8003a40:	e004      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003a42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a46:	fab3 f383 	clz	r3, r3
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x1b2>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	0e9b      	lsrs	r3, r3, #26
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	e018      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x1e4>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a72:	fa93 f3a3 	rbit	r3, r3
 8003a76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003a82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	e004      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003a8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a92:	fab3 f383 	clz	r3, r3
 8003a96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d106      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff f81b 	bl	8002ae0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe ffff 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x222>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fff4 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003acc:	4603      	mov	r3, r0
 8003ace:	0e9b      	lsrs	r3, r3, #26
 8003ad0:	f003 021f 	and.w	r2, r3, #31
 8003ad4:	e01e      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x260>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2101      	movs	r1, #1
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe ffe9 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003aec:	fa93 f3a3 	rbit	r3, r3
 8003af0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003af4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003af8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003b04:	2320      	movs	r3, #32
 8003b06:	e004      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003b08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x278>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	0e9b      	lsrs	r3, r3, #26
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	e018      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x2aa>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003b40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003b50:	2320      	movs	r3, #32
 8003b52:	e004      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b58:	fab3 f383 	clz	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d106      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2200      	movs	r2, #0
 8003b68:	2101      	movs	r1, #1
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fe ffb8 	bl	8002ae0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2102      	movs	r1, #2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe ff9c 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x2e8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe ff91 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003b92:	4603      	mov	r3, r0
 8003b94:	0e9b      	lsrs	r3, r3, #26
 8003b96:	f003 021f 	and.w	r2, r3, #31
 8003b9a:	e01e      	b.n	8003bda <HAL_ADC_ConfigChannel+0x326>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2102      	movs	r1, #2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe ff86 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003bba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003bca:	2320      	movs	r3, #32
 8003bcc:	e004      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003bce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d105      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x33e>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	0e9b      	lsrs	r3, r3, #26
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	e016      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x36c>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003c04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003c12:	2320      	movs	r3, #32
 8003c14:	e004      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003c16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d106      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe ff57 	bl	8002ae0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2103      	movs	r1, #3
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe ff3b 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x3aa>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2103      	movs	r1, #3
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe ff30 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003c54:	4603      	mov	r3, r0
 8003c56:	0e9b      	lsrs	r3, r3, #26
 8003c58:	f003 021f 	and.w	r2, r3, #31
 8003c5c:	e017      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x3da>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2103      	movs	r1, #3
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe ff25 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003c76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c78:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003c7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003c80:	2320      	movs	r3, #32
 8003c82:	e003      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003c84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c86:	fab3 f383 	clz	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d105      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x3f2>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	0e9b      	lsrs	r3, r3, #26
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	e011      	b.n	8003cca <HAL_ADC_ConfigChannel+0x416>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003cbe:	2320      	movs	r3, #32
 8003cc0:	e003      	b.n	8003cca <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003cc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cc4:	fab3 f383 	clz	r3, r3
 8003cc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d106      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2103      	movs	r1, #3
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe ff02 	bl	8002ae0 <LL_ADC_SetOffsetState>
=======
 8004cca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004cd2:	2320      	movs	r3, #32
 8004cd4:	e004      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004cd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004cda:	fab3 f383 	clz	r3, r3
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d105      	bne.n	8004cfa <HAL_ADC_ConfigChannel+0x1b2>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	0e9b      	lsrs	r3, r3, #26
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	e018      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x1e4>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004d06:	fa93 f3a3 	rbit	r3, r3
 8004d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004d16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004d1e:	2320      	movs	r3, #32
 8004d20:	e004      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004d22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d26:	fab3 f383 	clz	r3, r3
 8004d2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d106      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2200      	movs	r2, #0
 8004d36:	2100      	movs	r1, #0
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff f81b 	bl	8003d74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2101      	movs	r1, #1
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fe ffff 	bl	8003d48 <LL_ADC_GetOffsetChannel>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x222>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2101      	movs	r1, #1
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fe fff4 	bl	8003d48 <LL_ADC_GetOffsetChannel>
 8004d60:	4603      	mov	r3, r0
 8004d62:	0e9b      	lsrs	r3, r3, #26
 8004d64:	f003 021f 	and.w	r2, r3, #31
 8004d68:	e01e      	b.n	8004da8 <HAL_ADC_ConfigChannel+0x260>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2101      	movs	r1, #1
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fe ffe9 	bl	8003d48 <LL_ADC_GetOffsetChannel>
 8004d76:	4603      	mov	r3, r0
 8004d78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d80:	fa93 f3a3 	rbit	r3, r3
 8004d84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004d88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004d90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004d98:	2320      	movs	r3, #32
 8004d9a:	e004      	b.n	8004da6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004d9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004da0:	fab3 f383 	clz	r3, r3
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x278>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	0e9b      	lsrs	r3, r3, #26
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	e018      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x2aa>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dcc:	fa93 f3a3 	rbit	r3, r3
 8004dd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004dd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004dd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004de4:	2320      	movs	r3, #32
 8004de6:	e004      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dec:	fab3 f383 	clz	r3, r3
 8004df0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d106      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fe ffb8 	bl	8003d74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2102      	movs	r1, #2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe ff9c 	bl	8003d48 <LL_ADC_GetOffsetChannel>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10a      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x2e8>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2102      	movs	r1, #2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe ff91 	bl	8003d48 <LL_ADC_GetOffsetChannel>
 8004e26:	4603      	mov	r3, r0
 8004e28:	0e9b      	lsrs	r3, r3, #26
 8004e2a:	f003 021f 	and.w	r2, r3, #31
 8004e2e:	e01e      	b.n	8004e6e <HAL_ADC_ConfigChannel+0x326>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2102      	movs	r1, #2
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fe ff86 	bl	8003d48 <LL_ADC_GetOffsetChannel>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e46:	fa93 f3a3 	rbit	r3, r3
 8004e4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004e4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004e5e:	2320      	movs	r3, #32
 8004e60:	e004      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004e62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d105      	bne.n	8004e86 <HAL_ADC_ConfigChannel+0x33e>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	0e9b      	lsrs	r3, r3, #26
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	e016      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x36c>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e92:	fa93 f3a3 	rbit	r3, r3
 8004e96:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004e98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004ea6:	2320      	movs	r3, #32
 8004ea8:	e004      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004eae:	fab3 f383 	clz	r3, r3
 8004eb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d106      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fe ff57 	bl	8003d74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2103      	movs	r1, #3
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fe ff3b 	bl	8003d48 <LL_ADC_GetOffsetChannel>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <HAL_ADC_ConfigChannel+0x3aa>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2103      	movs	r1, #3
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe ff30 	bl	8003d48 <LL_ADC_GetOffsetChannel>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	0e9b      	lsrs	r3, r3, #26
 8004eec:	f003 021f 	and.w	r2, r3, #31
 8004ef0:	e017      	b.n	8004f22 <HAL_ADC_ConfigChannel+0x3da>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2103      	movs	r1, #3
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fe ff25 	bl	8003d48 <LL_ADC_GetOffsetChannel>
 8004efe:	4603      	mov	r3, r0
 8004f00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f04:	fa93 f3a3 	rbit	r3, r3
 8004f08:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004f0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f0c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004f0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004f14:	2320      	movs	r3, #32
 8004f16:	e003      	b.n	8004f20 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004f18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f1a:	fab3 f383 	clz	r3, r3
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d105      	bne.n	8004f3a <HAL_ADC_ConfigChannel+0x3f2>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	0e9b      	lsrs	r3, r3, #26
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	e011      	b.n	8004f5e <HAL_ADC_ConfigChannel+0x416>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f42:	fa93 f3a3 	rbit	r3, r3
 8004f46:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004f48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004f52:	2320      	movs	r3, #32
 8004f54:	e003      	b.n	8004f5e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004f56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f58:	fab3 f383 	clz	r3, r3
 8004f5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d106      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2200      	movs	r2, #0
 8004f68:	2103      	movs	r1, #3
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe ff02 	bl	8003d74 <LL_ADC_SetOffsetState>
>>>>>>> Stashed changes
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< Updated upstream
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff f881 	bl	8002de8 <LL_ADC_IsEnabled>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f040 813d 	bne.w	8003f68 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6819      	ldr	r1, [r3, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f7fe ffd2 	bl	8002ca4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	4aa2      	ldr	r2, [pc, #648]	@ (8003f90 <HAL_ADC_ConfigChannel+0x6dc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	f040 812e 	bne.w	8003f68 <HAL_ADC_ConfigChannel+0x6b4>
=======
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff f881 	bl	800407c <LL_ADC_IsEnabled>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f040 813d 	bne.w	80051fc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f7fe ffd2 	bl	8003f38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	4aa2      	ldr	r2, [pc, #648]	@ (8005224 <HAL_ADC_ConfigChannel+0x6dc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	f040 812e 	bne.w	80051fc <HAL_ADC_ConfigChannel+0x6b4>
>>>>>>> Stashed changes
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
<<<<<<< Updated upstream
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10b      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x480>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	0e9b      	lsrs	r3, r3, #26
 8003d22:	3301      	adds	r3, #1
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	2b09      	cmp	r3, #9
 8003d2a:	bf94      	ite	ls
 8003d2c:	2301      	movls	r3, #1
 8003d2e:	2300      	movhi	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e019      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x4b4>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003d42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d44:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003d46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003d4c:	2320      	movs	r3, #32
 8003d4e:	e003      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003d50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d52:	fab3 f383 	clz	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	2b09      	cmp	r3, #9
 8003d60:	bf94      	ite	ls
 8003d62:	2301      	movls	r3, #1
 8003d64:	2300      	movhi	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d079      	beq.n	8003e60 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d107      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x4d4>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	0e9b      	lsrs	r3, r3, #26
 8003d7e:	3301      	adds	r3, #1
 8003d80:	069b      	lsls	r3, r3, #26
 8003d82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d86:	e015      	b.n	8003db4 <HAL_ADC_ConfigChannel+0x500>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d90:	fa93 f3a3 	rbit	r3, r3
 8003d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d98:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003da0:	2320      	movs	r3, #32
 8003da2:	e003      	b.n	8003dac <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	3301      	adds	r3, #1
 8003dae:	069b      	lsls	r3, r3, #26
 8003db0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d109      	bne.n	8003dd4 <HAL_ADC_ConfigChannel+0x520>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	0e9b      	lsrs	r3, r3, #26
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2101      	movs	r1, #1
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	e017      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x550>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ddc:	fa93 f3a3 	rbit	r3, r3
 8003de0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003de4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003dec:	2320      	movs	r3, #32
 8003dee:	e003      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003df0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003df2:	fab3 f383 	clz	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f003 031f 	and.w	r3, r3, #31
 8003dfe:	2101      	movs	r1, #1
 8003e00:	fa01 f303 	lsl.w	r3, r1, r3
 8003e04:	ea42 0103 	orr.w	r1, r2, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <HAL_ADC_ConfigChannel+0x576>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	0e9b      	lsrs	r3, r3, #26
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	f003 021f 	and.w	r2, r3, #31
 8003e20:	4613      	mov	r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	051b      	lsls	r3, r3, #20
 8003e28:	e018      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x5a8>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e32:	fa93 f3a3 	rbit	r3, r3
 8003e36:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003e42:	2320      	movs	r3, #32
 8003e44:	e003      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e48:	fab3 f383 	clz	r3, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	f003 021f 	and.w	r2, r3, #31
 8003e54:	4613      	mov	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	4413      	add	r3, r2
 8003e5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	e07e      	b.n	8003f5e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d107      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x5c8>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	0e9b      	lsrs	r3, r3, #26
 8003e72:	3301      	adds	r3, #1
 8003e74:	069b      	lsls	r3, r3, #26
 8003e76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e7a:	e015      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x5f4>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003e94:	2320      	movs	r3, #32
 8003e96:	e003      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	069b      	lsls	r3, r3, #26
 8003ea4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d109      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x614>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	0e9b      	lsrs	r3, r3, #26
 8003eba:	3301      	adds	r3, #1
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	e017      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x644>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	fa93 f3a3 	rbit	r3, r3
 8003ed4:	61fb      	str	r3, [r7, #28]
  return result;
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003ee0:	2320      	movs	r3, #32
 8003ee2:	e003      	b.n	8003eec <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	fab3 f383 	clz	r3, r3
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	3301      	adds	r3, #1
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef8:	ea42 0103 	orr.w	r1, r2, r3
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10d      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x670>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	0e9b      	lsrs	r3, r3, #26
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f003 021f 	and.w	r2, r3, #31
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	3b1e      	subs	r3, #30
 8003f1c:	051b      	lsls	r3, r3, #20
 8003f1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f22:	e01b      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x6a8>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	fa93 f3a3 	rbit	r3, r3
 8003f30:	613b      	str	r3, [r7, #16]
  return result;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003f3c:	2320      	movs	r3, #32
 8003f3e:	e003      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	3301      	adds	r3, #1
 8003f4a:	f003 021f 	and.w	r2, r3, #31
 8003f4e:	4613      	mov	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4413      	add	r3, r2
 8003f54:	3b1e      	subs	r3, #30
 8003f56:	051b      	lsls	r3, r3, #20
 8003f58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f5c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f62:	4619      	mov	r1, r3
 8003f64:	f7fe fe72 	bl	8002c4c <LL_ADC_SetChannelSamplingTime>
=======
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x480>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	0e9b      	lsrs	r3, r3, #26
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	2b09      	cmp	r3, #9
 8004fbe:	bf94      	ite	ls
 8004fc0:	2301      	movls	r3, #1
 8004fc2:	2300      	movhi	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	e019      	b.n	8004ffc <HAL_ADC_ConfigChannel+0x4b4>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fd0:	fa93 f3a3 	rbit	r3, r3
 8004fd4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004fd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fd8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004fda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004fe0:	2320      	movs	r3, #32
 8004fe2:	e003      	b.n	8004fec <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004fe4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fe6:	fab3 f383 	clz	r3, r3
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	3301      	adds	r3, #1
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	2b09      	cmp	r3, #9
 8004ff4:	bf94      	ite	ls
 8004ff6:	2301      	movls	r3, #1
 8004ff8:	2300      	movhi	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d079      	beq.n	80050f4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005008:	2b00      	cmp	r3, #0
 800500a:	d107      	bne.n	800501c <HAL_ADC_ConfigChannel+0x4d4>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	0e9b      	lsrs	r3, r3, #26
 8005012:	3301      	adds	r3, #1
 8005014:	069b      	lsls	r3, r3, #26
 8005016:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800501a:	e015      	b.n	8005048 <HAL_ADC_ConfigChannel+0x500>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005024:	fa93 f3a3 	rbit	r3, r3
 8005028:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800502a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800502c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800502e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005034:	2320      	movs	r3, #32
 8005036:	e003      	b.n	8005040 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800503a:	fab3 f383 	clz	r3, r3
 800503e:	b2db      	uxtb	r3, r3
 8005040:	3301      	adds	r3, #1
 8005042:	069b      	lsls	r3, r3, #26
 8005044:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005050:	2b00      	cmp	r3, #0
 8005052:	d109      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x520>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	0e9b      	lsrs	r3, r3, #26
 800505a:	3301      	adds	r3, #1
 800505c:	f003 031f 	and.w	r3, r3, #31
 8005060:	2101      	movs	r1, #1
 8005062:	fa01 f303 	lsl.w	r3, r1, r3
 8005066:	e017      	b.n	8005098 <HAL_ADC_ConfigChannel+0x550>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005070:	fa93 f3a3 	rbit	r3, r3
 8005074:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005078:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800507a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005080:	2320      	movs	r3, #32
 8005082:	e003      	b.n	800508c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005086:	fab3 f383 	clz	r3, r3
 800508a:	b2db      	uxtb	r3, r3
 800508c:	3301      	adds	r3, #1
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	2101      	movs	r1, #1
 8005094:	fa01 f303 	lsl.w	r3, r1, r3
 8005098:	ea42 0103 	orr.w	r1, r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <HAL_ADC_ConfigChannel+0x576>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	0e9b      	lsrs	r3, r3, #26
 80050ae:	3301      	adds	r3, #1
 80050b0:	f003 021f 	and.w	r2, r3, #31
 80050b4:	4613      	mov	r3, r2
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4413      	add	r3, r2
 80050ba:	051b      	lsls	r3, r3, #20
 80050bc:	e018      	b.n	80050f0 <HAL_ADC_ConfigChannel+0x5a8>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c6:	fa93 f3a3 	rbit	r3, r3
 80050ca:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80050cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80050d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80050d6:	2320      	movs	r3, #32
 80050d8:	e003      	b.n	80050e2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80050da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050dc:	fab3 f383 	clz	r3, r3
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	3301      	adds	r3, #1
 80050e4:	f003 021f 	and.w	r2, r3, #31
 80050e8:	4613      	mov	r3, r2
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4413      	add	r3, r2
 80050ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050f0:	430b      	orrs	r3, r1
 80050f2:	e07e      	b.n	80051f2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d107      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x5c8>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	0e9b      	lsrs	r3, r3, #26
 8005106:	3301      	adds	r3, #1
 8005108:	069b      	lsls	r3, r3, #26
 800510a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800510e:	e015      	b.n	800513c <HAL_ADC_ConfigChannel+0x5f4>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005118:	fa93 f3a3 	rbit	r3, r3
 800511c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800511e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005120:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005128:	2320      	movs	r3, #32
 800512a:	e003      	b.n	8005134 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800512c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512e:	fab3 f383 	clz	r3, r3
 8005132:	b2db      	uxtb	r3, r3
 8005134:	3301      	adds	r3, #1
 8005136:	069b      	lsls	r3, r3, #26
 8005138:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005144:	2b00      	cmp	r3, #0
 8005146:	d109      	bne.n	800515c <HAL_ADC_ConfigChannel+0x614>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	0e9b      	lsrs	r3, r3, #26
 800514e:	3301      	adds	r3, #1
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	2101      	movs	r1, #1
 8005156:	fa01 f303 	lsl.w	r3, r1, r3
 800515a:	e017      	b.n	800518c <HAL_ADC_ConfigChannel+0x644>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	fa93 f3a3 	rbit	r3, r3
 8005168:	61fb      	str	r3, [r7, #28]
  return result;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005174:	2320      	movs	r3, #32
 8005176:	e003      	b.n	8005180 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	fab3 f383 	clz	r3, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	3301      	adds	r3, #1
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	2101      	movs	r1, #1
 8005188:	fa01 f303 	lsl.w	r3, r1, r3
 800518c:	ea42 0103 	orr.w	r1, r2, r3
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10d      	bne.n	80051b8 <HAL_ADC_ConfigChannel+0x670>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	0e9b      	lsrs	r3, r3, #26
 80051a2:	3301      	adds	r3, #1
 80051a4:	f003 021f 	and.w	r2, r3, #31
 80051a8:	4613      	mov	r3, r2
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	4413      	add	r3, r2
 80051ae:	3b1e      	subs	r3, #30
 80051b0:	051b      	lsls	r3, r3, #20
 80051b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80051b6:	e01b      	b.n	80051f0 <HAL_ADC_ConfigChannel+0x6a8>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	fa93 f3a3 	rbit	r3, r3
 80051c4:	613b      	str	r3, [r7, #16]
  return result;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80051d0:	2320      	movs	r3, #32
 80051d2:	e003      	b.n	80051dc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	fab3 f383 	clz	r3, r3
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	3301      	adds	r3, #1
 80051de:	f003 021f 	and.w	r2, r3, #31
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	3b1e      	subs	r3, #30
 80051ea:	051b      	lsls	r3, r3, #20
 80051ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051f0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051f6:	4619      	mov	r1, r3
 80051f8:	f7fe fe72 	bl	8003ee0 <LL_ADC_SetChannelSamplingTime>
>>>>>>> Stashed changes
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
<<<<<<< Updated upstream
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b09      	ldr	r3, [pc, #36]	@ (8003f94 <HAL_ADC_ConfigChannel+0x6e0>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80be 	beq.w	80040f2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f7e:	d004      	beq.n	8003f8a <HAL_ADC_ConfigChannel+0x6d6>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a04      	ldr	r2, [pc, #16]	@ (8003f98 <HAL_ADC_ConfigChannel+0x6e4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d10a      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x6ec>
 8003f8a:	4b04      	ldr	r3, [pc, #16]	@ (8003f9c <HAL_ADC_ConfigChannel+0x6e8>)
 8003f8c:	e009      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x6ee>
 8003f8e:	bf00      	nop
 8003f90:	407f0000 	.word	0x407f0000
 8003f94:	80080000 	.word	0x80080000
 8003f98:	50000100 	.word	0x50000100
 8003f9c:	50000300 	.word	0x50000300
 8003fa0:	4b59      	ldr	r3, [pc, #356]	@ (8004108 <HAL_ADC_ConfigChannel+0x854>)
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe fd54 	bl	8002a50 <LL_ADC_GetCommonPathInternalCh>
 8003fa8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
=======
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4b09      	ldr	r3, [pc, #36]	@ (8005228 <HAL_ADC_ConfigChannel+0x6e0>)
 8005202:	4013      	ands	r3, r2
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80be 	beq.w	8005386 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005212:	d004      	beq.n	800521e <HAL_ADC_ConfigChannel+0x6d6>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a04      	ldr	r2, [pc, #16]	@ (800522c <HAL_ADC_ConfigChannel+0x6e4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d10a      	bne.n	8005234 <HAL_ADC_ConfigChannel+0x6ec>
 800521e:	4b04      	ldr	r3, [pc, #16]	@ (8005230 <HAL_ADC_ConfigChannel+0x6e8>)
 8005220:	e009      	b.n	8005236 <HAL_ADC_ConfigChannel+0x6ee>
 8005222:	bf00      	nop
 8005224:	407f0000 	.word	0x407f0000
 8005228:	80080000 	.word	0x80080000
 800522c:	50000100 	.word	0x50000100
 8005230:	50000300 	.word	0x50000300
 8005234:	4b59      	ldr	r3, [pc, #356]	@ (800539c <HAL_ADC_ConfigChannel+0x854>)
 8005236:	4618      	mov	r0, r3
 8005238:	f7fe fd54 	bl	8003ce4 <LL_ADC_GetCommonPathInternalCh>
 800523c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
>>>>>>> Stashed changes

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
<<<<<<< Updated upstream
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a56      	ldr	r2, [pc, #344]	@ (800410c <HAL_ADC_ConfigChannel+0x858>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d004      	beq.n	8003fc0 <HAL_ADC_ConfigChannel+0x70c>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a55      	ldr	r2, [pc, #340]	@ (8004110 <HAL_ADC_ConfigChannel+0x85c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d13a      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d134      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fd4:	d005      	beq.n	8003fe2 <HAL_ADC_ConfigChannel+0x72e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a4e      	ldr	r2, [pc, #312]	@ (8004114 <HAL_ADC_ConfigChannel+0x860>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	f040 8085 	bne.w	80040ec <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fea:	d004      	beq.n	8003ff6 <HAL_ADC_ConfigChannel+0x742>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a49      	ldr	r2, [pc, #292]	@ (8004118 <HAL_ADC_ConfigChannel+0x864>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d101      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x746>
 8003ff6:	4a49      	ldr	r2, [pc, #292]	@ (800411c <HAL_ADC_ConfigChannel+0x868>)
 8003ff8:	e000      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x748>
 8003ffa:	4a43      	ldr	r2, [pc, #268]	@ (8004108 <HAL_ADC_ConfigChannel+0x854>)
 8003ffc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004000:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f7fe fd0f 	bl	8002a2a <LL_ADC_SetCommonPathInternalCh>
=======
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a56      	ldr	r2, [pc, #344]	@ (80053a0 <HAL_ADC_ConfigChannel+0x858>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_ADC_ConfigChannel+0x70c>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a55      	ldr	r2, [pc, #340]	@ (80053a4 <HAL_ADC_ConfigChannel+0x85c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d13a      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005258:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d134      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005268:	d005      	beq.n	8005276 <HAL_ADC_ConfigChannel+0x72e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a4e      	ldr	r2, [pc, #312]	@ (80053a8 <HAL_ADC_ConfigChannel+0x860>)
 8005270:	4293      	cmp	r3, r2
 8005272:	f040 8085 	bne.w	8005380 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800527e:	d004      	beq.n	800528a <HAL_ADC_ConfigChannel+0x742>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a49      	ldr	r2, [pc, #292]	@ (80053ac <HAL_ADC_ConfigChannel+0x864>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d101      	bne.n	800528e <HAL_ADC_ConfigChannel+0x746>
 800528a:	4a49      	ldr	r2, [pc, #292]	@ (80053b0 <HAL_ADC_ConfigChannel+0x868>)
 800528c:	e000      	b.n	8005290 <HAL_ADC_ConfigChannel+0x748>
 800528e:	4a43      	ldr	r2, [pc, #268]	@ (800539c <HAL_ADC_ConfigChannel+0x854>)
 8005290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005294:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005298:	4619      	mov	r1, r3
 800529a:	4610      	mov	r0, r2
 800529c:	f7fe fd0f 	bl	8003cbe <LL_ADC_SetCommonPathInternalCh>
>>>>>>> Stashed changes
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< Updated upstream
 800400c:	4b44      	ldr	r3, [pc, #272]	@ (8004120 <HAL_ADC_ConfigChannel+0x86c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	099b      	lsrs	r3, r3, #6
 8004012:	4a44      	ldr	r2, [pc, #272]	@ (8004124 <HAL_ADC_ConfigChannel+0x870>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	099b      	lsrs	r3, r3, #6
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	4613      	mov	r3, r2
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004026:	e002      	b.n	800402e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3b01      	subs	r3, #1
 800402c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f9      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004034:	e05a      	b.n	80040ec <HAL_ADC_ConfigChannel+0x838>
=======
 80052a0:	4b44      	ldr	r3, [pc, #272]	@ (80053b4 <HAL_ADC_ConfigChannel+0x86c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	099b      	lsrs	r3, r3, #6
 80052a6:	4a44      	ldr	r2, [pc, #272]	@ (80053b8 <HAL_ADC_ConfigChannel+0x870>)
 80052a8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ac:	099b      	lsrs	r3, r3, #6
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	4613      	mov	r3, r2
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052ba:	e002      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3b01      	subs	r3, #1
 80052c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f9      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052c8:	e05a      	b.n	8005380 <HAL_ADC_ConfigChannel+0x838>
>>>>>>> Stashed changes
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
<<<<<<< Updated upstream
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a3b      	ldr	r2, [pc, #236]	@ (8004128 <HAL_ADC_ConfigChannel+0x874>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d125      	bne.n	800408c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d11f      	bne.n	800408c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a31      	ldr	r2, [pc, #196]	@ (8004118 <HAL_ADC_ConfigChannel+0x864>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d104      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x7ac>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a34      	ldr	r2, [pc, #208]	@ (800412c <HAL_ADC_ConfigChannel+0x878>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d047      	beq.n	80040f0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004068:	d004      	beq.n	8004074 <HAL_ADC_ConfigChannel+0x7c0>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2a      	ldr	r2, [pc, #168]	@ (8004118 <HAL_ADC_ConfigChannel+0x864>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x7c4>
 8004074:	4a29      	ldr	r2, [pc, #164]	@ (800411c <HAL_ADC_ConfigChannel+0x868>)
 8004076:	e000      	b.n	800407a <HAL_ADC_ConfigChannel+0x7c6>
 8004078:	4a23      	ldr	r2, [pc, #140]	@ (8004108 <HAL_ADC_ConfigChannel+0x854>)
 800407a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800407e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f7fe fcd0 	bl	8002a2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800408a:	e031      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x83c>
=======
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a3b      	ldr	r2, [pc, #236]	@ (80053bc <HAL_ADC_ConfigChannel+0x874>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d125      	bne.n	8005320 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d11f      	bne.n	8005320 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a31      	ldr	r2, [pc, #196]	@ (80053ac <HAL_ADC_ConfigChannel+0x864>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d104      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0x7ac>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a34      	ldr	r2, [pc, #208]	@ (80053c0 <HAL_ADC_ConfigChannel+0x878>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d047      	beq.n	8005384 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052fc:	d004      	beq.n	8005308 <HAL_ADC_ConfigChannel+0x7c0>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a2a      	ldr	r2, [pc, #168]	@ (80053ac <HAL_ADC_ConfigChannel+0x864>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d101      	bne.n	800530c <HAL_ADC_ConfigChannel+0x7c4>
 8005308:	4a29      	ldr	r2, [pc, #164]	@ (80053b0 <HAL_ADC_ConfigChannel+0x868>)
 800530a:	e000      	b.n	800530e <HAL_ADC_ConfigChannel+0x7c6>
 800530c:	4a23      	ldr	r2, [pc, #140]	@ (800539c <HAL_ADC_ConfigChannel+0x854>)
 800530e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f7fe fcd0 	bl	8003cbe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800531e:	e031      	b.n	8005384 <HAL_ADC_ConfigChannel+0x83c>
>>>>>>> Stashed changes
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
<<<<<<< Updated upstream
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a27      	ldr	r2, [pc, #156]	@ (8004130 <HAL_ADC_ConfigChannel+0x87c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d12d      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800409a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d127      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004118 <HAL_ADC_ConfigChannel+0x864>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d022      	beq.n	80040f2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040b4:	d004      	beq.n	80040c0 <HAL_ADC_ConfigChannel+0x80c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a17      	ldr	r2, [pc, #92]	@ (8004118 <HAL_ADC_ConfigChannel+0x864>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d101      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x810>
 80040c0:	4a16      	ldr	r2, [pc, #88]	@ (800411c <HAL_ADC_ConfigChannel+0x868>)
 80040c2:	e000      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x812>
 80040c4:	4a10      	ldr	r2, [pc, #64]	@ (8004108 <HAL_ADC_ConfigChannel+0x854>)
 80040c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040ce:	4619      	mov	r1, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	f7fe fcaa 	bl	8002a2a <LL_ADC_SetCommonPathInternalCh>
 80040d6:	e00c      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x83e>
=======
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a27      	ldr	r2, [pc, #156]	@ (80053c4 <HAL_ADC_ConfigChannel+0x87c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d12d      	bne.n	8005386 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800532a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800532e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d127      	bne.n	8005386 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a1c      	ldr	r2, [pc, #112]	@ (80053ac <HAL_ADC_ConfigChannel+0x864>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d022      	beq.n	8005386 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005348:	d004      	beq.n	8005354 <HAL_ADC_ConfigChannel+0x80c>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a17      	ldr	r2, [pc, #92]	@ (80053ac <HAL_ADC_ConfigChannel+0x864>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d101      	bne.n	8005358 <HAL_ADC_ConfigChannel+0x810>
 8005354:	4a16      	ldr	r2, [pc, #88]	@ (80053b0 <HAL_ADC_ConfigChannel+0x868>)
 8005356:	e000      	b.n	800535a <HAL_ADC_ConfigChannel+0x812>
 8005358:	4a10      	ldr	r2, [pc, #64]	@ (800539c <HAL_ADC_ConfigChannel+0x854>)
 800535a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800535e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f7fe fcaa 	bl	8003cbe <LL_ADC_SetCommonPathInternalCh>
 800536a:	e00c      	b.n	8005386 <HAL_ADC_ConfigChannel+0x83e>
>>>>>>> Stashed changes
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< Updated upstream
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80040ea:	e002      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040ec:	bf00      	nop
 80040ee:	e000      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040f0:	bf00      	nop
=======
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005370:	f043 0220 	orr.w	r2, r3, #32
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800537e:	e002      	b.n	8005386 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005380:	bf00      	nop
 8005382:	e000      	b.n	8005386 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005384:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80040fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80040fe:	4618      	mov	r0, r3
 8004100:	37d8      	adds	r7, #216	@ 0xd8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	50000700 	.word	0x50000700
 800410c:	c3210000 	.word	0xc3210000
 8004110:	90c00010 	.word	0x90c00010
 8004114:	50000600 	.word	0x50000600
 8004118:	50000100 	.word	0x50000100
 800411c:	50000300 	.word	0x50000300
 8004120:	2000000c 	.word	0x2000000c
 8004124:	053e2d63 	.word	0x053e2d63
 8004128:	c7520000 	.word	0xc7520000
 800412c:	50000500 	.word	0x50000500
 8004130:	cb840000 	.word	0xcb840000

08004134 <ADC_Enable>:
=======
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800538e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005392:	4618      	mov	r0, r3
 8005394:	37d8      	adds	r7, #216	@ 0xd8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	50000700 	.word	0x50000700
 80053a0:	c3210000 	.word	0xc3210000
 80053a4:	90c00010 	.word	0x90c00010
 80053a8:	50000600 	.word	0x50000600
 80053ac:	50000100 	.word	0x50000100
 80053b0:	50000300 	.word	0x50000300
 80053b4:	20000274 	.word	0x20000274
 80053b8:	053e2d63 	.word	0x053e2d63
 80053bc:	c7520000 	.word	0xc7520000
 80053c0:	50000500 	.word	0x50000500
 80053c4:	cb840000 	.word	0xcb840000

080053c8 <ADC_Enable>:
>>>>>>> Stashed changes
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800413c:	2300      	movs	r3, #0
 800413e:	60bb      	str	r3, [r7, #8]
=======
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< Updated upstream
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe fe4f 	bl	8002de8 <LL_ADC_IsEnabled>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d176      	bne.n	800423e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	4b3c      	ldr	r3, [pc, #240]	@ (8004248 <ADC_Enable+0x114>)
 8004158:	4013      	ands	r3, r2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00d      	beq.n	800417a <ADC_Enable+0x46>
=======
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fe fe4f 	bl	800407c <LL_ADC_IsEnabled>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d176      	bne.n	80054d2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	4b3c      	ldr	r3, [pc, #240]	@ (80054dc <ADC_Enable+0x114>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00d      	beq.n	800540e <ADC_Enable+0x46>
>>>>>>> Stashed changes
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< Updated upstream
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004162:	f043 0210 	orr.w	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800416e:	f043 0201 	orr.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e062      	b.n	8004240 <ADC_Enable+0x10c>
=======
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f6:	f043 0210 	orr.w	r2, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005402:	f043 0201 	orr.w	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e062      	b.n	80054d4 <ADC_Enable+0x10c>
>>>>>>> Stashed changes
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
<<<<<<< Updated upstream
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe fe1e 	bl	8002dc0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800418c:	d004      	beq.n	8004198 <ADC_Enable+0x64>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2e      	ldr	r2, [pc, #184]	@ (800424c <ADC_Enable+0x118>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d101      	bne.n	800419c <ADC_Enable+0x68>
 8004198:	4b2d      	ldr	r3, [pc, #180]	@ (8004250 <ADC_Enable+0x11c>)
 800419a:	e000      	b.n	800419e <ADC_Enable+0x6a>
 800419c:	4b2d      	ldr	r3, [pc, #180]	@ (8004254 <ADC_Enable+0x120>)
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fc56 	bl	8002a50 <LL_ADC_GetCommonPathInternalCh>
 80041a4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80041a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d013      	beq.n	80041d6 <ADC_Enable+0xa2>
=======
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe fe1e 	bl	8004054 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005420:	d004      	beq.n	800542c <ADC_Enable+0x64>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a2e      	ldr	r2, [pc, #184]	@ (80054e0 <ADC_Enable+0x118>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d101      	bne.n	8005430 <ADC_Enable+0x68>
 800542c:	4b2d      	ldr	r3, [pc, #180]	@ (80054e4 <ADC_Enable+0x11c>)
 800542e:	e000      	b.n	8005432 <ADC_Enable+0x6a>
 8005430:	4b2d      	ldr	r3, [pc, #180]	@ (80054e8 <ADC_Enable+0x120>)
 8005432:	4618      	mov	r0, r3
 8005434:	f7fe fc56 	bl	8003ce4 <LL_ADC_GetCommonPathInternalCh>
 8005438:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800543a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800543e:	2b00      	cmp	r3, #0
 8005440:	d013      	beq.n	800546a <ADC_Enable+0xa2>
>>>>>>> Stashed changes

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< Updated upstream
 80041ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004258 <ADC_Enable+0x124>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	099b      	lsrs	r3, r3, #6
 80041b4:	4a29      	ldr	r2, [pc, #164]	@ (800425c <ADC_Enable+0x128>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	099b      	lsrs	r3, r3, #6
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	4613      	mov	r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80041c8:	e002      	b.n	80041d0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f9      	bne.n	80041ca <ADC_Enable+0x96>
=======
 8005442:	4b2a      	ldr	r3, [pc, #168]	@ (80054ec <ADC_Enable+0x124>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	099b      	lsrs	r3, r3, #6
 8005448:	4a29      	ldr	r2, [pc, #164]	@ (80054f0 <ADC_Enable+0x128>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	099b      	lsrs	r3, r3, #6
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	4613      	mov	r3, r2
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800545c:	e002      	b.n	8005464 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	3b01      	subs	r3, #1
 8005462:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f9      	bne.n	800545e <ADC_Enable+0x96>
>>>>>>> Stashed changes
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80041d6:	f7fe fc09 	bl	80029ec <HAL_GetTick>
 80041da:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041dc:	e028      	b.n	8004230 <ADC_Enable+0xfc>
=======
 800546a:	f7fe fc09 	bl	8003c80 <HAL_GetTick>
 800546e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005470:	e028      	b.n	80054c4 <ADC_Enable+0xfc>
>>>>>>> Stashed changes
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< Updated upstream
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe fe00 	bl	8002de8 <LL_ADC_IsEnabled>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d104      	bne.n	80041f8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe fde4 	bl	8002dc0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041f8:	f7fe fbf8 	bl	80029ec <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d914      	bls.n	8004230 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d00d      	beq.n	8004230 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004218:	f043 0210 	orr.w	r2, r3, #16
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004224:	f043 0201 	orr.w	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e007      	b.n	8004240 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b01      	cmp	r3, #1
 800423c:	d1cf      	bne.n	80041de <ADC_Enable+0xaa>
=======
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fe00 	bl	800407c <LL_ADC_IsEnabled>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d104      	bne.n	800548c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f7fe fde4 	bl	8004054 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800548c:	f7fe fbf8 	bl	8003c80 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d914      	bls.n	80054c4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d00d      	beq.n	80054c4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ac:	f043 0210 	orr.w	r2, r3, #16
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054b8:	f043 0201 	orr.w	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e007      	b.n	80054d4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d1cf      	bne.n	8005472 <ADC_Enable+0xaa>
>>>>>>> Stashed changes
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
<<<<<<< Updated upstream
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	8000003f 	.word	0x8000003f
 800424c:	50000100 	.word	0x50000100
 8004250:	50000300 	.word	0x50000300
 8004254:	50000700 	.word	0x50000700
 8004258:	2000000c 	.word	0x2000000c
 800425c:	053e2d63 	.word	0x053e2d63

08004260 <ADC_DMAConvCplt>:
=======
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	8000003f 	.word	0x8000003f
 80054e0:	50000100 	.word	0x50000100
 80054e4:	50000300 	.word	0x50000300
 80054e8:	50000700 	.word	0x50000700
 80054ec:	20000274 	.word	0x20000274
 80054f0:	053e2d63 	.word	0x053e2d63

080054f4 <ADC_DMAConvCplt>:
>>>>>>> Stashed changes
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004272:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004276:	2b00      	cmp	r3, #0
 8004278:	d14b      	bne.n	8004312 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005506:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800550a:	2b00      	cmp	r3, #0
 800550c:	d14b      	bne.n	80055a6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005512:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> Stashed changes

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
<<<<<<< Updated upstream
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d021      	beq.n	80042d8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f7fe fc85 	bl	8002ba8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d032      	beq.n	800430a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d12b      	bne.n	800430a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d11f      	bne.n	800430a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ce:	f043 0201 	orr.w	r2, r3, #1
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042d6:	e018      	b.n	800430a <ADC_DMAConvCplt+0xaa>
=======
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d021      	beq.n	800556c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4618      	mov	r0, r3
 800552e:	f7fe fc85 	bl	8003e3c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d032      	beq.n	800559e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d12b      	bne.n	800559e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800554a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005556:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d11f      	bne.n	800559e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005562:	f043 0201 	orr.w	r2, r3, #1
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	65da      	str	r2, [r3, #92]	@ 0x5c
 800556a:	e018      	b.n	800559e <ADC_DMAConvCplt+0xaa>
>>>>>>> Stashed changes
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
<<<<<<< Updated upstream
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d111      	bne.n	800430a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d105      	bne.n	800430a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004302:	f043 0201 	orr.w	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d111      	bne.n	800559e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800557e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d105      	bne.n	800559e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005596:	f043 0201 	orr.w	r2, r3, #1
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> Stashed changes

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< Updated upstream
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f7ff faaa 	bl	8003864 <HAL_ADC_ConvCpltCallback>
=======
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f7ff faaa 	bl	8004af8 <HAL_ADC_ConvCpltCallback>
>>>>>>> Stashed changes
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
<<<<<<< Updated upstream
 8004310:	e00e      	b.n	8004330 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f7ff fabe 	bl	80038a0 <HAL_ADC_ErrorCallback>
}
 8004324:	e004      	b.n	8004330 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	4798      	blx	r3
}
 8004330:	bf00      	nop
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <ADC_DMAHalfConvCplt>:
=======
 80055a4:	e00e      	b.n	80055c4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f7ff fabe 	bl	8004b34 <HAL_ADC_ErrorCallback>
}
 80055b8:	e004      	b.n	80055c4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	4798      	blx	r3
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <ADC_DMAHalfConvCplt>:
>>>>>>> Stashed changes
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004344:	60fb      	str	r3, [r7, #12]
=======
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d8:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
<<<<<<< Updated upstream
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f7ff fa96 	bl	8003878 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <ADC_DMAError>:
=======
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f7ff fa96 	bl	8004b0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <ADC_DMAError>:
>>>>>>> Stashed changes
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004360:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004366:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004372:	f043 0204 	orr.w	r2, r3, #4
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005606:	f043 0204 	orr.w	r2, r3, #4
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> Stashed changes

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
<<<<<<< Updated upstream
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f7ff fa90 	bl	80038a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <LL_ADC_IsEnabled>:
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <LL_ADC_IsEnabled+0x18>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <LL_ADC_IsEnabled+0x1a>
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <LL_ADC_REG_IsConversionOngoing>:
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d101      	bne.n	80043c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_ADCEx_InjectedConvCpltCallback>:
=======
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f7ff fa90 	bl	8004b34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <LL_ADC_IsEnabled>:
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <LL_ADC_IsEnabled+0x18>
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <LL_ADC_IsEnabled+0x1a>
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <LL_ADC_REG_IsConversionOngoing>:
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b04      	cmp	r3, #4
 8005654:	d101      	bne.n	800565a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_ADCEx_InjectedConvCpltCallback>:
>>>>>>> Stashed changes
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
=======
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
<<<<<<< Updated upstream
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
=======
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_ADCEx_InjectedQueueOverflowCallback>:
>>>>>>> Stashed changes
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
=======
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
<<<<<<< Updated upstream
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_ADCEx_LevelOutOfWindow2Callback>:
=======
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_ADCEx_LevelOutOfWindow2Callback>:
>>>>>>> Stashed changes
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
=======
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
<<<<<<< Updated upstream
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_ADCEx_LevelOutOfWindow3Callback>:
=======
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
>>>>>>> Stashed changes
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
=======
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
<<<<<<< Updated upstream
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_ADCEx_EndOfSamplingCallback>:
=======
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_ADCEx_EndOfSamplingCallback>:
>>>>>>> Stashed changes
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
=======
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
<<<<<<< Updated upstream
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_ADCEx_MultiModeConfigChannel>:
=======
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_ADCEx_MultiModeConfigChannel>:
>>>>>>> Stashed changes
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
<<<<<<< Updated upstream
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b0a1      	sub	sp, #132	@ 0x84
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
=======
 80056cc:	b590      	push	{r4, r7, lr}
 80056ce:	b0a1      	sub	sp, #132	@ 0x84
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
>>>>>>> Stashed changes
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< Updated upstream
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004452:	2302      	movs	r3, #2
 8004454:	e0e7      	b.n	8004626 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800445e:	2300      	movs	r3, #0
 8004460:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004462:	2300      	movs	r3, #0
 8004464:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800446e:	d102      	bne.n	8004476 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004470:	4b6f      	ldr	r3, [pc, #444]	@ (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	e009      	b.n	800448a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a6e      	ldr	r2, [pc, #440]	@ (8004634 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d102      	bne.n	8004486 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004480:	4b6d      	ldr	r3, [pc, #436]	@ (8004638 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	e001      	b.n	800448a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10b      	bne.n	80044a8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0be      	b.n	8004626 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
=======
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e0e7      	b.n	80058ba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80056f2:	2300      	movs	r3, #0
 80056f4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80056f6:	2300      	movs	r3, #0
 80056f8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005702:	d102      	bne.n	800570a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005704:	4b6f      	ldr	r3, [pc, #444]	@ (80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005706:	60bb      	str	r3, [r7, #8]
 8005708:	e009      	b.n	800571e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a6e      	ldr	r2, [pc, #440]	@ (80058c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d102      	bne.n	800571a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005714:	4b6d      	ldr	r3, [pc, #436]	@ (80058cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005716:	60bb      	str	r3, [r7, #8]
 8005718:	e001      	b.n	800571e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800571a:	2300      	movs	r3, #0
 800571c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10b      	bne.n	800573c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005728:	f043 0220 	orr.w	r2, r3, #32
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0be      	b.n	80058ba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
>>>>>>> Stashed changes
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
<<<<<<< Updated upstream
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff ff7f 	bl	80043ae <LL_ADC_REG_IsConversionOngoing>
 80044b0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff ff79 	bl	80043ae <LL_ADC_REG_IsConversionOngoing>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f040 80a0 	bne.w	8004604 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80044c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f040 809c 	bne.w	8004604 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044d4:	d004      	beq.n	80044e0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a55      	ldr	r2, [pc, #340]	@ (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d101      	bne.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80044e0:	4b56      	ldr	r3, [pc, #344]	@ (800463c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80044e2:	e000      	b.n	80044e6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80044e4:	4b56      	ldr	r3, [pc, #344]	@ (8004640 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80044e6:	677b      	str	r3, [r7, #116]	@ 0x74
=======
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff ff7f 	bl	8005642 <LL_ADC_REG_IsConversionOngoing>
 8005744:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff ff79 	bl	8005642 <LL_ADC_REG_IsConversionOngoing>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	f040 80a0 	bne.w	8005898 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005758:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800575a:	2b00      	cmp	r3, #0
 800575c:	f040 809c 	bne.w	8005898 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005768:	d004      	beq.n	8005774 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a55      	ldr	r2, [pc, #340]	@ (80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d101      	bne.n	8005778 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005774:	4b56      	ldr	r3, [pc, #344]	@ (80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005776:	e000      	b.n	800577a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005778:	4b56      	ldr	r3, [pc, #344]	@ (80058d4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800577a:	677b      	str	r3, [r7, #116]	@ 0x74
>>>>>>> Stashed changes

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
<<<<<<< Updated upstream
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d04b      	beq.n	8004588 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80044f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	6859      	ldr	r1, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004502:	035b      	lsls	r3, r3, #13
 8004504:	430b      	orrs	r3, r1
 8004506:	431a      	orrs	r2, r3
 8004508:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800450a:	609a      	str	r2, [r3, #8]
=======
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d04b      	beq.n	800581c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005784:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	6859      	ldr	r1, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005796:	035b      	lsls	r3, r3, #13
 8005798:	430b      	orrs	r3, r1
 800579a:	431a      	orrs	r2, r3
 800579c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800579e:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< Updated upstream
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004514:	d004      	beq.n	8004520 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a45      	ldr	r2, [pc, #276]	@ (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d10f      	bne.n	8004540 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004520:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004524:	f7ff ff30 	bl	8004388 <LL_ADC_IsEnabled>
 8004528:	4604      	mov	r4, r0
 800452a:	4841      	ldr	r0, [pc, #260]	@ (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800452c:	f7ff ff2c 	bl	8004388 <LL_ADC_IsEnabled>
 8004530:	4603      	mov	r3, r0
 8004532:	4323      	orrs	r3, r4
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	e012      	b.n	8004566 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004540:	483c      	ldr	r0, [pc, #240]	@ (8004634 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004542:	f7ff ff21 	bl	8004388 <LL_ADC_IsEnabled>
 8004546:	4604      	mov	r4, r0
 8004548:	483b      	ldr	r0, [pc, #236]	@ (8004638 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800454a:	f7ff ff1d 	bl	8004388 <LL_ADC_IsEnabled>
 800454e:	4603      	mov	r3, r0
 8004550:	431c      	orrs	r4, r3
 8004552:	483c      	ldr	r0, [pc, #240]	@ (8004644 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004554:	f7ff ff18 	bl	8004388 <LL_ADC_IsEnabled>
 8004558:	4603      	mov	r3, r0
 800455a:	4323      	orrs	r3, r4
 800455c:	2b00      	cmp	r3, #0
 800455e:	bf0c      	ite	eq
 8004560:	2301      	moveq	r3, #1
 8004562:	2300      	movne	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d056      	beq.n	8004618 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800456a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004572:	f023 030f 	bic.w	r3, r3, #15
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	6811      	ldr	r1, [r2, #0]
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	6892      	ldr	r2, [r2, #8]
 800457e:	430a      	orrs	r2, r1
 8004580:	431a      	orrs	r2, r3
 8004582:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004584:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004586:	e047      	b.n	8004618 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
=======
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057a8:	d004      	beq.n	80057b4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a45      	ldr	r2, [pc, #276]	@ (80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d10f      	bne.n	80057d4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80057b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80057b8:	f7ff ff30 	bl	800561c <LL_ADC_IsEnabled>
 80057bc:	4604      	mov	r4, r0
 80057be:	4841      	ldr	r0, [pc, #260]	@ (80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80057c0:	f7ff ff2c 	bl	800561c <LL_ADC_IsEnabled>
 80057c4:	4603      	mov	r3, r0
 80057c6:	4323      	orrs	r3, r4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	bf0c      	ite	eq
 80057cc:	2301      	moveq	r3, #1
 80057ce:	2300      	movne	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	e012      	b.n	80057fa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80057d4:	483c      	ldr	r0, [pc, #240]	@ (80058c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80057d6:	f7ff ff21 	bl	800561c <LL_ADC_IsEnabled>
 80057da:	4604      	mov	r4, r0
 80057dc:	483b      	ldr	r0, [pc, #236]	@ (80058cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80057de:	f7ff ff1d 	bl	800561c <LL_ADC_IsEnabled>
 80057e2:	4603      	mov	r3, r0
 80057e4:	431c      	orrs	r4, r3
 80057e6:	483c      	ldr	r0, [pc, #240]	@ (80058d8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80057e8:	f7ff ff18 	bl	800561c <LL_ADC_IsEnabled>
 80057ec:	4603      	mov	r3, r0
 80057ee:	4323      	orrs	r3, r4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	bf0c      	ite	eq
 80057f4:	2301      	moveq	r3, #1
 80057f6:	2300      	movne	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d056      	beq.n	80058ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80057fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005806:	f023 030f 	bic.w	r3, r3, #15
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	6811      	ldr	r1, [r2, #0]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	6892      	ldr	r2, [r2, #8]
 8005812:	430a      	orrs	r2, r1
 8005814:	431a      	orrs	r2, r3
 8005816:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005818:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800581a:	e047      	b.n	80058ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
>>>>>>> Stashed changes
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
<<<<<<< Updated upstream
 8004588:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004590:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004592:	609a      	str	r2, [r3, #8]
=======
 800581c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005824:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005826:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< Updated upstream
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800459c:	d004      	beq.n	80045a8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a23      	ldr	r2, [pc, #140]	@ (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d10f      	bne.n	80045c8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80045a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80045ac:	f7ff feec 	bl	8004388 <LL_ADC_IsEnabled>
 80045b0:	4604      	mov	r4, r0
 80045b2:	481f      	ldr	r0, [pc, #124]	@ (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045b4:	f7ff fee8 	bl	8004388 <LL_ADC_IsEnabled>
 80045b8:	4603      	mov	r3, r0
 80045ba:	4323      	orrs	r3, r4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	e012      	b.n	80045ee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80045c8:	481a      	ldr	r0, [pc, #104]	@ (8004634 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045ca:	f7ff fedd 	bl	8004388 <LL_ADC_IsEnabled>
 80045ce:	4604      	mov	r4, r0
 80045d0:	4819      	ldr	r0, [pc, #100]	@ (8004638 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045d2:	f7ff fed9 	bl	8004388 <LL_ADC_IsEnabled>
 80045d6:	4603      	mov	r3, r0
 80045d8:	431c      	orrs	r4, r3
 80045da:	481a      	ldr	r0, [pc, #104]	@ (8004644 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80045dc:	f7ff fed4 	bl	8004388 <LL_ADC_IsEnabled>
 80045e0:	4603      	mov	r3, r0
 80045e2:	4323      	orrs	r3, r4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d012      	beq.n	8004618 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80045f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80045fa:	f023 030f 	bic.w	r3, r3, #15
 80045fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004600:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004602:	e009      	b.n	8004618 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
=======
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005830:	d004      	beq.n	800583c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a23      	ldr	r2, [pc, #140]	@ (80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d10f      	bne.n	800585c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800583c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005840:	f7ff feec 	bl	800561c <LL_ADC_IsEnabled>
 8005844:	4604      	mov	r4, r0
 8005846:	481f      	ldr	r0, [pc, #124]	@ (80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005848:	f7ff fee8 	bl	800561c <LL_ADC_IsEnabled>
 800584c:	4603      	mov	r3, r0
 800584e:	4323      	orrs	r3, r4
 8005850:	2b00      	cmp	r3, #0
 8005852:	bf0c      	ite	eq
 8005854:	2301      	moveq	r3, #1
 8005856:	2300      	movne	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	e012      	b.n	8005882 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800585c:	481a      	ldr	r0, [pc, #104]	@ (80058c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800585e:	f7ff fedd 	bl	800561c <LL_ADC_IsEnabled>
 8005862:	4604      	mov	r4, r0
 8005864:	4819      	ldr	r0, [pc, #100]	@ (80058cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005866:	f7ff fed9 	bl	800561c <LL_ADC_IsEnabled>
 800586a:	4603      	mov	r3, r0
 800586c:	431c      	orrs	r4, r3
 800586e:	481a      	ldr	r0, [pc, #104]	@ (80058d8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005870:	f7ff fed4 	bl	800561c <LL_ADC_IsEnabled>
 8005874:	4603      	mov	r3, r0
 8005876:	4323      	orrs	r3, r4
 8005878:	2b00      	cmp	r3, #0
 800587a:	bf0c      	ite	eq
 800587c:	2301      	moveq	r3, #1
 800587e:	2300      	movne	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d012      	beq.n	80058ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800588e:	f023 030f 	bic.w	r3, r3, #15
 8005892:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005894:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005896:	e009      	b.n	80058ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
>>>>>>> Stashed changes
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< Updated upstream
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004608:	f043 0220 	orr.w	r2, r3, #32
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004616:	e000      	b.n	800461a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004618:	bf00      	nop
=======
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800589c:	f043 0220 	orr.w	r2, r3, #32
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80058aa:	e000      	b.n	80058ae <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80058ac:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004622:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004626:	4618      	mov	r0, r3
 8004628:	3784      	adds	r7, #132	@ 0x84
 800462a:	46bd      	mov	sp, r7
 800462c:	bd90      	pop	{r4, r7, pc}
 800462e:	bf00      	nop
 8004630:	50000100 	.word	0x50000100
 8004634:	50000400 	.word	0x50000400
 8004638:	50000500 	.word	0x50000500
 800463c:	50000300 	.word	0x50000300
 8004640:	50000700 	.word	0x50000700
 8004644:	50000600 	.word	0x50000600

08004648 <__NVIC_SetPriorityGrouping>:
=======
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80058b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3784      	adds	r7, #132	@ 0x84
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd90      	pop	{r4, r7, pc}
 80058c2:	bf00      	nop
 80058c4:	50000100 	.word	0x50000100
 80058c8:	50000400 	.word	0x50000400
 80058cc:	50000500 	.word	0x50000500
 80058d0:	50000300 	.word	0x50000300
 80058d4:	50000700 	.word	0x50000700
 80058d8:	50000600 	.word	0x50000600

080058dc <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004658:	4b0c      	ldr	r3, [pc, #48]	@ (800468c <__NVIC_SetPriorityGrouping+0x44>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004664:	4013      	ands	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004670:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800467a:	4a04      	ldr	r2, [pc, #16]	@ (800468c <__NVIC_SetPriorityGrouping+0x44>)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	60d3      	str	r3, [r2, #12]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <__NVIC_GetPriorityGrouping>:
=======
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005920 <__NVIC_SetPriorityGrouping+0x44>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80058f8:	4013      	ands	r3, r2
 80058fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800590c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800590e:	4a04      	ldr	r2, [pc, #16]	@ (8005920 <__NVIC_SetPriorityGrouping+0x44>)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	60d3      	str	r3, [r2, #12]
}
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	e000ed00 	.word	0xe000ed00

08005924 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004694:	4b04      	ldr	r3, [pc, #16]	@ (80046a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	0a1b      	lsrs	r3, r3, #8
 800469a:	f003 0307 	and.w	r3, r3, #7
}
 800469e:	4618      	mov	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	e000ed00 	.word	0xe000ed00

080046ac <__NVIC_EnableIRQ>:
=======
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005928:	4b04      	ldr	r3, [pc, #16]	@ (800593c <__NVIC_GetPriorityGrouping+0x18>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	0a1b      	lsrs	r3, r3, #8
 800592e:	f003 0307 	and.w	r3, r3, #7
}
 8005932:	4618      	mov	r0, r3
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	e000ed00 	.word	0xe000ed00

08005940 <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	db0b      	blt.n	80046d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	f003 021f 	and.w	r2, r3, #31
 80046c4:	4907      	ldr	r1, [pc, #28]	@ (80046e4 <__NVIC_EnableIRQ+0x38>)
 80046c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	2001      	movs	r0, #1
 80046ce:	fa00 f202 	lsl.w	r2, r0, r2
 80046d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	e000e100 	.word	0xe000e100

080046e8 <__NVIC_SetPriority>:
=======
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	4603      	mov	r3, r0
 8005948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800594a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800594e:	2b00      	cmp	r3, #0
 8005950:	db0b      	blt.n	800596a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005952:	79fb      	ldrb	r3, [r7, #7]
 8005954:	f003 021f 	and.w	r2, r3, #31
 8005958:	4907      	ldr	r1, [pc, #28]	@ (8005978 <__NVIC_EnableIRQ+0x38>)
 800595a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800595e:	095b      	lsrs	r3, r3, #5
 8005960:	2001      	movs	r0, #1
 8005962:	fa00 f202 	lsl.w	r2, r0, r2
 8005966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	e000e100 	.word	0xe000e100

0800597c <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	6039      	str	r1, [r7, #0]
 80046f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	db0a      	blt.n	8004712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	490c      	ldr	r1, [pc, #48]	@ (8004734 <__NVIC_SetPriority+0x4c>)
 8004702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004706:	0112      	lsls	r2, r2, #4
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	440b      	add	r3, r1
 800470c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	4603      	mov	r3, r0
 8005984:	6039      	str	r1, [r7, #0]
 8005986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800598c:	2b00      	cmp	r3, #0
 800598e:	db0a      	blt.n	80059a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	b2da      	uxtb	r2, r3
 8005994:	490c      	ldr	r1, [pc, #48]	@ (80059c8 <__NVIC_SetPriority+0x4c>)
 8005996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800599a:	0112      	lsls	r2, r2, #4
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	440b      	add	r3, r1
 80059a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 8004710:	e00a      	b.n	8004728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	4908      	ldr	r1, [pc, #32]	@ (8004738 <__NVIC_SetPriority+0x50>)
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	3b04      	subs	r3, #4
 8004720:	0112      	lsls	r2, r2, #4
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	440b      	add	r3, r1
 8004726:	761a      	strb	r2, [r3, #24]
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	e000e100 	.word	0xe000e100
 8004738:	e000ed00 	.word	0xe000ed00

0800473c <NVIC_EncodePriority>:
=======
 80059a4:	e00a      	b.n	80059bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	4908      	ldr	r1, [pc, #32]	@ (80059cc <__NVIC_SetPriority+0x50>)
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	3b04      	subs	r3, #4
 80059b4:	0112      	lsls	r2, r2, #4
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	440b      	add	r3, r1
 80059ba:	761a      	strb	r2, [r3, #24]
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	e000e100 	.word	0xe000e100
 80059cc:	e000ed00 	.word	0xe000ed00

080059d0 <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 800473c:	b480      	push	{r7}
 800473e:	b089      	sub	sp, #36	@ 0x24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	61fb      	str	r3, [r7, #28]
=======
 80059d0:	b480      	push	{r7}
 80059d2:	b089      	sub	sp, #36	@ 0x24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f1c3 0307 	rsb	r3, r3, #7
 8004756:	2b04      	cmp	r3, #4
 8004758:	bf28      	it	cs
 800475a:	2304      	movcs	r3, #4
 800475c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	3304      	adds	r3, #4
 8004762:	2b06      	cmp	r3, #6
 8004764:	d902      	bls.n	800476c <NVIC_EncodePriority+0x30>
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3b03      	subs	r3, #3
 800476a:	e000      	b.n	800476e <NVIC_EncodePriority+0x32>
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004770:	f04f 32ff 	mov.w	r2, #4294967295
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43da      	mvns	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	401a      	ands	r2, r3
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004784:	f04f 31ff 	mov.w	r1, #4294967295
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	fa01 f303 	lsl.w	r3, r1, r3
 800478e:	43d9      	mvns	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004794:	4313      	orrs	r3, r2
         );
}
 8004796:	4618      	mov	r0, r3
 8004798:	3724      	adds	r7, #36	@ 0x24
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <SysTick_Config>:
=======
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	f1c3 0307 	rsb	r3, r3, #7
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	bf28      	it	cs
 80059ee:	2304      	movcs	r3, #4
 80059f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	3304      	adds	r3, #4
 80059f6:	2b06      	cmp	r3, #6
 80059f8:	d902      	bls.n	8005a00 <NVIC_EncodePriority+0x30>
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	3b03      	subs	r3, #3
 80059fe:	e000      	b.n	8005a02 <NVIC_EncodePriority+0x32>
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a04:	f04f 32ff 	mov.w	r2, #4294967295
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	43da      	mvns	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	401a      	ands	r2, r3
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a18:	f04f 31ff 	mov.w	r1, #4294967295
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a22:	43d9      	mvns	r1, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a28:	4313      	orrs	r3, r2
         );
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3724      	adds	r7, #36	@ 0x24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
	...

08005a38 <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047b4:	d301      	bcc.n	80047ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047b6:	2301      	movs	r3, #1
 80047b8:	e00f      	b.n	80047da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ba:	4a0a      	ldr	r2, [pc, #40]	@ (80047e4 <SysTick_Config+0x40>)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3b01      	subs	r3, #1
 80047c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047c2:	210f      	movs	r1, #15
 80047c4:	f04f 30ff 	mov.w	r0, #4294967295
 80047c8:	f7ff ff8e 	bl	80046e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047cc:	4b05      	ldr	r3, [pc, #20]	@ (80047e4 <SysTick_Config+0x40>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047d2:	4b04      	ldr	r3, [pc, #16]	@ (80047e4 <SysTick_Config+0x40>)
 80047d4:	2207      	movs	r2, #7
 80047d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	e000e010 	.word	0xe000e010

080047e8 <HAL_NVIC_SetPriorityGrouping>:
=======
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a48:	d301      	bcc.n	8005a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e00f      	b.n	8005a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a78 <SysTick_Config+0x40>)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a56:	210f      	movs	r1, #15
 8005a58:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5c:	f7ff ff8e 	bl	800597c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a60:	4b05      	ldr	r3, [pc, #20]	@ (8005a78 <SysTick_Config+0x40>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a66:	4b04      	ldr	r3, [pc, #16]	@ (8005a78 <SysTick_Config+0x40>)
 8005a68:	2207      	movs	r2, #7
 8005a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	e000e010 	.word	0xe000e010

08005a7c <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
=======
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff ff29 	bl	8004648 <__NVIC_SetPriorityGrouping>
}
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_SetPriority>:
=======
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff ff29 	bl	80058dc <__NVIC_SetPriorityGrouping>
}
 8005a8a:	bf00      	nop
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 80047fe:	b580      	push	{r7, lr}
 8004800:	b086      	sub	sp, #24
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	607a      	str	r2, [r7, #4]
 800480a:	73fb      	strb	r3, [r7, #15]
=======
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b086      	sub	sp, #24
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	4603      	mov	r3, r0
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	607a      	str	r2, [r7, #4]
 8005a9e:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 800480c:	f7ff ff40 	bl	8004690 <__NVIC_GetPriorityGrouping>
 8004810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	6978      	ldr	r0, [r7, #20]
 8004818:	f7ff ff90 	bl	800473c <NVIC_EncodePriority>
 800481c:	4602      	mov	r2, r0
 800481e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004822:	4611      	mov	r1, r2
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff ff5f 	bl	80046e8 <__NVIC_SetPriority>
}
 800482a:	bf00      	nop
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_NVIC_EnableIRQ>:
=======
 8005aa0:	f7ff ff40 	bl	8005924 <__NVIC_GetPriorityGrouping>
 8005aa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	6978      	ldr	r0, [r7, #20]
 8005aac:	f7ff ff90 	bl	80059d0 <NVIC_EncodePriority>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff ff5f 	bl	800597c <__NVIC_SetPriority>
}
 8005abe:	bf00      	nop
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	4603      	mov	r3, r0
 800483a:	71fb      	strb	r3, [r7, #7]
=======
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b082      	sub	sp, #8
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	4603      	mov	r3, r0
 8005ace:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 800483c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff ff33 	bl	80046ac <__NVIC_EnableIRQ>
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_SYSTICK_Config>:
=======
 8005ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff ff33 	bl	8005940 <__NVIC_EnableIRQ>
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff ffa4 	bl	80047a4 <SysTick_Config>
 800485c:	4603      	mov	r3, r0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_DMA_Init>:
=======
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff ffa4 	bl	8005a38 <SysTick_Config>
 8005af0:	4603      	mov	r3, r0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <HAL_DMA_Init>:
>>>>>>> Stashed changes
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
=======
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
<<<<<<< Updated upstream
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e08d      	b.n	8004996 <HAL_DMA_Init+0x12e>
=======
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e08d      	b.n	8005c2a <HAL_DMA_Init+0x12e>
>>>>>>> Stashed changes
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
<<<<<<< Updated upstream
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	4b47      	ldr	r3, [pc, #284]	@ (80049a0 <HAL_DMA_Init+0x138>)
 8004882:	429a      	cmp	r2, r3
 8004884:	d80f      	bhi.n	80048a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	4b45      	ldr	r3, [pc, #276]	@ (80049a4 <HAL_DMA_Init+0x13c>)
 800488e:	4413      	add	r3, r2
 8004890:	4a45      	ldr	r2, [pc, #276]	@ (80049a8 <HAL_DMA_Init+0x140>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	091b      	lsrs	r3, r3, #4
 8004898:	009a      	lsls	r2, r3, #2
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a42      	ldr	r2, [pc, #264]	@ (80049ac <HAL_DMA_Init+0x144>)
 80048a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80048a4:	e00e      	b.n	80048c4 <HAL_DMA_Init+0x5c>
=======
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	461a      	mov	r2, r3
 8005b14:	4b47      	ldr	r3, [pc, #284]	@ (8005c34 <HAL_DMA_Init+0x138>)
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d80f      	bhi.n	8005b3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	4b45      	ldr	r3, [pc, #276]	@ (8005c38 <HAL_DMA_Init+0x13c>)
 8005b22:	4413      	add	r3, r2
 8005b24:	4a45      	ldr	r2, [pc, #276]	@ (8005c3c <HAL_DMA_Init+0x140>)
 8005b26:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2a:	091b      	lsrs	r3, r3, #4
 8005b2c:	009a      	lsls	r2, r3, #2
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a42      	ldr	r2, [pc, #264]	@ (8005c40 <HAL_DMA_Init+0x144>)
 8005b36:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b38:	e00e      	b.n	8005b58 <HAL_DMA_Init+0x5c>
>>>>>>> Stashed changes
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
<<<<<<< Updated upstream
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	4b40      	ldr	r3, [pc, #256]	@ (80049b0 <HAL_DMA_Init+0x148>)
 80048ae:	4413      	add	r3, r2
 80048b0:	4a3d      	ldr	r2, [pc, #244]	@ (80049a8 <HAL_DMA_Init+0x140>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	091b      	lsrs	r3, r3, #4
 80048b8:	009a      	lsls	r2, r3, #2
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a3c      	ldr	r2, [pc, #240]	@ (80049b4 <HAL_DMA_Init+0x14c>)
 80048c2:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	4b40      	ldr	r3, [pc, #256]	@ (8005c44 <HAL_DMA_Init+0x148>)
 8005b42:	4413      	add	r3, r2
 8005b44:	4a3d      	ldr	r2, [pc, #244]	@ (8005c3c <HAL_DMA_Init+0x140>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	091b      	lsrs	r3, r3, #4
 8005b4c:	009a      	lsls	r2, r3, #2
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a3c      	ldr	r2, [pc, #240]	@ (8005c48 <HAL_DMA_Init+0x14c>)
 8005b56:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> Stashed changes
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< Updated upstream
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80048da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048de:	60fb      	str	r3, [r7, #12]
=======
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b72:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
<<<<<<< Updated upstream
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80048e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	601a      	str	r2, [r3, #0]
=======
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
<<<<<<< Updated upstream
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fa76 	bl	8004e08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004924:	d102      	bne.n	800492c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	605a      	str	r2, [r3, #4]
=======
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa76 	bl	800609c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bb8:	d102      	bne.n	8005bc0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
<<<<<<< Updated upstream
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004940:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d010      	beq.n	800496c <HAL_DMA_Init+0x104>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b04      	cmp	r3, #4
 8004950:	d80c      	bhi.n	800496c <HAL_DMA_Init+0x104>
=======
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005bd4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d010      	beq.n	8005c00 <HAL_DMA_Init+0x104>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d80c      	bhi.n	8005c00 <HAL_DMA_Init+0x104>
>>>>>>> Stashed changes
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
<<<<<<< Updated upstream
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa96 	bl	8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004968:	605a      	str	r2, [r3, #4]
 800496a:	e008      	b.n	800497e <HAL_DMA_Init+0x116>
=======
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fa96 	bl	8006118 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005bfc:	605a      	str	r2, [r3, #4]
 8005bfe:	e008      	b.n	8005c12 <HAL_DMA_Init+0x116>
>>>>>>> Stashed changes
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
<<<<<<< Updated upstream
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> Stashed changes
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
<<<<<<< Updated upstream
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40020407 	.word	0x40020407
 80049a4:	bffdfff8 	.word	0xbffdfff8
 80049a8:	cccccccd 	.word	0xcccccccd
 80049ac:	40020000 	.word	0x40020000
 80049b0:	bffdfbf8 	.word	0xbffdfbf8
 80049b4:	40020400 	.word	0x40020400

080049b8 <HAL_DMA_Start_IT>:
=======
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	40020407 	.word	0x40020407
 8005c38:	bffdfff8 	.word	0xbffdfff8
 8005c3c:	cccccccd 	.word	0xcccccccd
 8005c40:	40020000 	.word	0x40020000
 8005c44:	bffdfbf8 	.word	0xbffdfbf8
 8005c48:	40020400 	.word	0x40020400

08005c4c <HAL_DMA_Start_IT>:
>>>>>>> Stashed changes
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
<<<<<<< Updated upstream
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	75fb      	strb	r3, [r7, #23]
=======
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< Updated upstream
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_DMA_Start_IT+0x20>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e066      	b.n	8004aa6 <HAL_DMA_Start_IT+0xee>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d155      	bne.n	8004a98 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f9bb 	bl	8004d8c <DMA_SetConfig>
=======
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_DMA_Start_IT+0x20>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e066      	b.n	8005d3a <HAL_DMA_Start_IT+0xee>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d155      	bne.n	8005d2c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0201 	bic.w	r2, r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f9bb 	bl	8006020 <DMA_SetConfig>
>>>>>>> Stashed changes

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
<<<<<<< Updated upstream
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 020e 	orr.w	r2, r2, #14
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	e00f      	b.n	8004a50 <HAL_DMA_Start_IT+0x98>
=======
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d008      	beq.n	8005cc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 020e 	orr.w	r2, r2, #14
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	e00f      	b.n	8005ce4 <HAL_DMA_Start_IT+0x98>
>>>>>>> Stashed changes
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
<<<<<<< Updated upstream
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0204 	bic.w	r2, r2, #4
 8004a3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 020a 	orr.w	r2, r2, #10
 8004a4e:	601a      	str	r2, [r3, #0]
=======
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0204 	bic.w	r2, r2, #4
 8005cd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 020a 	orr.w	r2, r2, #10
 8005ce2:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
<<<<<<< Updated upstream
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d007      	beq.n	8004a6e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a6c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d007      	beq.n	8004a86 <HAL_DMA_Start_IT+0xce>
=======
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d007      	beq.n	8005d02 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d00:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <HAL_DMA_Start_IT+0xce>
>>>>>>> Stashed changes
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
<<<<<<< Updated upstream
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a84:	601a      	str	r2, [r3, #0]
=======
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d18:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< Updated upstream
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	e005      	b.n	8004aa4 <HAL_DMA_Start_IT+0xec>
=======
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0201 	orr.w	r2, r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	e005      	b.n	8005d38 <HAL_DMA_Start_IT+0xec>
>>>>>>> Stashed changes
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
<<<<<<< Updated upstream
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_DMA_Abort>:
=======
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d34:	2302      	movs	r3, #2
 8005d36:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_DMA_Abort>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8004aae:	b480      	push	{r7}
 8004ab0:	b085      	sub	sp, #20
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d005      	beq.n	8004ad2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2204      	movs	r2, #4
 8004aca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
 8004ad0:	e037      	b.n	8004b42 <HAL_DMA_Abort+0x94>
=======
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d005      	beq.n	8005d66 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
 8005d64:	e037      	b.n	8005dd6 <HAL_DMA_Abort+0x94>
>>>>>>> Stashed changes
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< Updated upstream
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 020e 	bic.w	r2, r2, #14
 8004ae0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004af0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0201 	bic.w	r2, r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b06:	f003 021f 	and.w	r2, r3, #31
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0e:	2101      	movs	r1, #1
 8004b10:	fa01 f202 	lsl.w	r2, r1, r2
 8004b14:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b1e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00c      	beq.n	8004b42 <HAL_DMA_Abort+0x94>
=======
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 020e 	bic.w	r2, r2, #14
 8005d74:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d84:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0201 	bic.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9a:	f003 021f 	and.w	r2, r3, #31
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da2:	2101      	movs	r1, #1
 8005da4:	fa01 f202 	lsl.w	r2, r1, r2
 8005da8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005db2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00c      	beq.n	8005dd6 <HAL_DMA_Abort+0x94>
>>>>>>> Stashed changes
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< Updated upstream
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b36:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b40:	605a      	str	r2, [r3, #4]
=======
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005dd4:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
<<<<<<< Updated upstream
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_DMA_Abort_IT>:
=======
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_DMA_Abort_IT>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d00d      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2204      	movs	r2, #4
 8004b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
 8004b92:	e047      	b.n	8004c24 <HAL_DMA_Abort_IT+0xc4>
=======
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d00d      	beq.n	8005e28 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2204      	movs	r2, #4
 8005e10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	73fb      	strb	r3, [r7, #15]
 8005e26:	e047      	b.n	8005eb8 <HAL_DMA_Abort_IT+0xc4>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< Updated upstream
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 020e 	bic.w	r2, r2, #14
 8004ba2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc8:	f003 021f 	and.w	r2, r3, #31
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004be0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00c      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xa4>
=======
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 020e 	bic.w	r2, r2, #14
 8005e36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0201 	bic.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5c:	f003 021f 	and.w	r2, r3, #31
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e64:	2101      	movs	r1, #1
 8005e66:	fa01 f202 	lsl.w	r2, r1, r2
 8005e6a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00c      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xa4>
>>>>>>> Stashed changes
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< Updated upstream
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bf8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c02:	605a      	str	r2, [r3, #4]
=======
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e96:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< Updated upstream
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	4798      	blx	r3
    }
  }
  return status;
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_DMA_IRQHandler>:
=======
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	4798      	blx	r3
    }
  }
  return status;
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_DMA_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	2204      	movs	r2, #4
 8004c50:	409a      	lsls	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d026      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x7a>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d021      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d107      	bne.n	8004c82 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0204 	bic.w	r2, r2, #4
 8004c80:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c86:	f003 021f 	and.w	r2, r3, #31
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	2104      	movs	r1, #4
 8004c90:	fa01 f202 	lsl.w	r2, r1, r2
 8004c94:	605a      	str	r2, [r3, #4]
=======
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ede:	f003 031f 	and.w	r3, r3, #31
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	409a      	lsls	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d026      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x7a>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d021      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d107      	bne.n	8005f16 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0204 	bic.w	r2, r2, #4
 8005f14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1a:	f003 021f 	and.w	r2, r3, #31
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f22:	2104      	movs	r1, #4
 8005f24:	fa01 f202 	lsl.w	r2, r1, r2
 8005f28:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
<<<<<<< Updated upstream
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d071      	beq.n	8004d82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004ca6:	e06c      	b.n	8004d82 <HAL_DMA_IRQHandler+0x154>
=======
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d071      	beq.n	8006016 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005f3a:	e06c      	b.n	8006016 <HAL_DMA_IRQHandler+0x154>
>>>>>>> Stashed changes
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
<<<<<<< Updated upstream
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	409a      	lsls	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d02e      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d029      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 020a 	bic.w	r2, r2, #10
 8004ce2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf0:	f003 021f 	and.w	r2, r3, #31
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf8:	2102      	movs	r1, #2
 8004cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8004cfe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d038      	beq.n	8004d82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004d18:	e033      	b.n	8004d82 <HAL_DMA_IRQHandler+0x154>
=======
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	2202      	movs	r2, #2
 8005f46:	409a      	lsls	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d02e      	beq.n	8005fae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d029      	beq.n	8005fae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10b      	bne.n	8005f80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 020a 	bic.w	r2, r2, #10
 8005f76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f84:	f003 021f 	and.w	r2, r3, #31
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8c:	2102      	movs	r1, #2
 8005f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d038      	beq.n	8006016 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005fac:	e033      	b.n	8006016 <HAL_DMA_IRQHandler+0x154>
>>>>>>> Stashed changes
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
<<<<<<< Updated upstream
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	2208      	movs	r2, #8
 8004d24:	409a      	lsls	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d02a      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d025      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x156>
=======
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb2:	f003 031f 	and.w	r3, r3, #31
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	409a      	lsls	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d02a      	beq.n	8006018 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d025      	beq.n	8006018 <HAL_DMA_IRQHandler+0x156>
>>>>>>> Stashed changes
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< Updated upstream
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 020e 	bic.w	r2, r2, #14
 8004d46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4c:	f003 021f 	and.w	r2, r3, #31
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	2101      	movs	r1, #1
 8004d56:	fa01 f202 	lsl.w	r2, r1, r2
 8004d5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d004      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	4798      	blx	r3
=======
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 020e 	bic.w	r2, r2, #14
 8005fda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe0:	f003 021f 	and.w	r2, r3, #31
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe8:	2101      	movs	r1, #1
 8005fea:	fa01 f202 	lsl.w	r2, r1, r2
 8005fee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600a:	2b00      	cmp	r3, #0
 800600c:	d004      	beq.n	8006018 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	4798      	blx	r3
>>>>>>> Stashed changes
  }
  else
  {
    /* Nothing To Do */
  }
  return;
<<<<<<< Updated upstream
 8004d82:	bf00      	nop
 8004d84:	bf00      	nop
}
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <DMA_SetConfig>:
=======
 8006016:	bf00      	nop
 8006018:	bf00      	nop
}
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <DMA_SetConfig>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004da2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d004      	beq.n	8004db6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004db4:	605a      	str	r2, [r3, #4]
=======
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006036:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603c:	2b00      	cmp	r3, #0
 800603e:	d004      	beq.n	800604a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006048:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
<<<<<<< Updated upstream
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dba:	f003 021f 	and.w	r2, r3, #31
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b10      	cmp	r3, #16
 8004dd8:	d108      	bne.n	8004dec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	60da      	str	r2, [r3, #12]
=======
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604e:	f003 021f 	and.w	r2, r3, #31
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006056:	2101      	movs	r1, #1
 8006058:	fa01 f202 	lsl.w	r2, r1, r2
 800605c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	2b10      	cmp	r3, #16
 800606c:	d108      	bne.n	8006080 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
<<<<<<< Updated upstream
 8004dea:	e007      	b.n	8004dfc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	60da      	str	r2, [r3, #12]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <DMA_CalcDMAMUXChannelBaseAndMask>:
=======
 800607e:	e007      	b.n	8006090 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	60da      	str	r2, [r3, #12]
}
 8006090:	bf00      	nop
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <DMA_CalcDMAMUXChannelBaseAndMask>:
>>>>>>> Stashed changes
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
=======
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
<<<<<<< Updated upstream
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b16      	ldr	r3, [pc, #88]	@ (8004e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d802      	bhi.n	8004e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004e1c:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	e001      	b.n	8004e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
=======
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	4b16      	ldr	r3, [pc, #88]	@ (8006104 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d802      	bhi.n	80060b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80060b0:	4b15      	ldr	r3, [pc, #84]	@ (8006108 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	e001      	b.n	80060ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
>>>>>>> Stashed changes
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
<<<<<<< Updated upstream
 8004e22:	4b15      	ldr	r3, [pc, #84]	@ (8004e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004e24:	617b      	str	r3, [r7, #20]
=======
 80060b6:	4b15      	ldr	r3, [pc, #84]	@ (800610c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80060b8:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
<<<<<<< Updated upstream
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	3b08      	subs	r3, #8
 8004e32:	4a12      	ldr	r2, [pc, #72]	@ (8004e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	091b      	lsrs	r3, r3, #4
 8004e3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e40:	089b      	lsrs	r3, r3, #2
 8004e42:	009a      	lsls	r2, r3, #2
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4413      	add	r3, r2
 8004e48:	461a      	mov	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a0b      	ldr	r2, [pc, #44]	@ (8004e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004e52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004e62:	bf00      	nop
 8004e64:	371c      	adds	r7, #28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40020407 	.word	0x40020407
 8004e74:	40020800 	.word	0x40020800
 8004e78:	40020820 	.word	0x40020820
 8004e7c:	cccccccd 	.word	0xcccccccd
 8004e80:	40020880 	.word	0x40020880

08004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
=======
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	3b08      	subs	r3, #8
 80060c6:	4a12      	ldr	r2, [pc, #72]	@ (8006110 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80060c8:	fba2 2303 	umull	r2, r3, r2, r3
 80060cc:	091b      	lsrs	r3, r3, #4
 80060ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d4:	089b      	lsrs	r3, r3, #2
 80060d6:	009a      	lsls	r2, r3, #2
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4413      	add	r3, r2
 80060dc:	461a      	mov	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a0b      	ldr	r2, [pc, #44]	@ (8006114 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80060e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 031f 	and.w	r3, r3, #31
 80060ee:	2201      	movs	r2, #1
 80060f0:	409a      	lsls	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40020407 	.word	0x40020407
 8006108:	40020800 	.word	0x40020800
 800610c:	40020820 	.word	0x40020820
 8006110:	cccccccd 	.word	0xcccccccd
 8006114:	40020880 	.word	0x40020880

08006118 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
>>>>>>> Stashed changes
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a08      	ldr	r2, [pc, #32]	@ (8004ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ea6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	1000823f 	.word	0x1000823f
 8004ec8:	40020940 	.word	0x40020940

08004ecc <HAL_GPIO_Init>:
=======
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4b0b      	ldr	r3, [pc, #44]	@ (8006158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	461a      	mov	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a08      	ldr	r2, [pc, #32]	@ (800615c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800613a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3b01      	subs	r3, #1
 8006140:	f003 031f 	and.w	r3, r3, #31
 8006144:	2201      	movs	r2, #1
 8006146:	409a      	lsls	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800614c:	bf00      	nop
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	1000823f 	.word	0x1000823f
 800615c:	40020940 	.word	0x40020940

08006160 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
=======
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
<<<<<<< Updated upstream
 8004eda:	e15a      	b.n	8005192 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 814c 	beq.w	800518c <HAL_GPIO_Init+0x2c0>
=======
 800616e:	e15a      	b.n	8006426 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	2101      	movs	r1, #1
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	fa01 f303 	lsl.w	r3, r1, r3
 800617c:	4013      	ands	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 814c 	beq.w	8006420 <HAL_GPIO_Init+0x2c0>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
<<<<<<< Updated upstream
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f003 0303 	and.w	r3, r3, #3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d005      	beq.n	8004f0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d130      	bne.n	8004f6e <HAL_GPIO_Init+0xa2>
=======
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	2b01      	cmp	r3, #1
 8006192:	d005      	beq.n	80061a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800619c:	2b02      	cmp	r3, #2
 800619e:	d130      	bne.n	8006202 <HAL_GPIO_Init+0xa2>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< Updated upstream
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	2203      	movs	r2, #3
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4013      	ands	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f42:	2201      	movs	r2, #1
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	091b      	lsrs	r3, r3, #4
 8004f58:	f003 0201 	and.w	r2, r3, #1
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d017      	beq.n	8004faa <HAL_GPIO_Init+0xde>
=======
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	2203      	movs	r2, #3
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	43db      	mvns	r3, r3
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4013      	ands	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061d6:	2201      	movs	r2, #1
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	43db      	mvns	r3, r3
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4013      	ands	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	091b      	lsrs	r3, r3, #4
 80061ec:	f003 0201 	and.w	r2, r3, #1
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	2b03      	cmp	r3, #3
 800620c:	d017      	beq.n	800623e <HAL_GPIO_Init+0xde>
>>>>>>> Stashed changes
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	2203      	movs	r2, #3
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	60da      	str	r2, [r3, #12]
=======
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	2203      	movs	r2, #3
 800621a:	fa02 f303 	lsl.w	r3, r2, r3
 800621e:	43db      	mvns	r3, r3
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4013      	ands	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	fa02 f303 	lsl.w	r3, r2, r3
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d123      	bne.n	8004ffe <HAL_GPIO_Init+0x132>
=======
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	2b02      	cmp	r3, #2
 8006248:	d123      	bne.n	8006292 <HAL_GPIO_Init+0x132>
>>>>>>> Stashed changes
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< Updated upstream
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	08da      	lsrs	r2, r3, #3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3208      	adds	r2, #8
 8004fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	220f      	movs	r2, #15
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	08da      	lsrs	r2, r3, #3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3208      	adds	r2, #8
 8004ff8:	6939      	ldr	r1, [r7, #16]
 8004ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	08da      	lsrs	r2, r3, #3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3208      	adds	r2, #8
 8006252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006256:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	220f      	movs	r2, #15
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	43db      	mvns	r3, r3
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4013      	ands	r3, r2
 800626c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	691a      	ldr	r2, [r3, #16]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	fa02 f303 	lsl.w	r3, r2, r3
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	08da      	lsrs	r2, r3, #3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3208      	adds	r2, #8
 800628c:	6939      	ldr	r1, [r7, #16]
 800628e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	2203      	movs	r2, #3
 800500a:	fa02 f303 	lsl.w	r3, r2, r3
 800500e:	43db      	mvns	r3, r3
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4013      	ands	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f003 0203 	and.w	r2, r3, #3
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	601a      	str	r2, [r3, #0]
=======
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	2203      	movs	r2, #3
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	43db      	mvns	r3, r3
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4013      	ands	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f003 0203 	and.w	r2, r3, #3
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4313      	orrs	r3, r2
 80062be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< Updated upstream
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 80a6 	beq.w	800518c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005040:	4b5b      	ldr	r3, [pc, #364]	@ (80051b0 <HAL_GPIO_Init+0x2e4>)
 8005042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005044:	4a5a      	ldr	r2, [pc, #360]	@ (80051b0 <HAL_GPIO_Init+0x2e4>)
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	6613      	str	r3, [r2, #96]	@ 0x60
 800504c:	4b58      	ldr	r3, [pc, #352]	@ (80051b0 <HAL_GPIO_Init+0x2e4>)
 800504e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005058:	4a56      	ldr	r2, [pc, #344]	@ (80051b4 <HAL_GPIO_Init+0x2e8>)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	089b      	lsrs	r3, r3, #2
 800505e:	3302      	adds	r3, #2
 8005060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	220f      	movs	r2, #15
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	43db      	mvns	r3, r3
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4013      	ands	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005082:	d01f      	beq.n	80050c4 <HAL_GPIO_Init+0x1f8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a4c      	ldr	r2, [pc, #304]	@ (80051b8 <HAL_GPIO_Init+0x2ec>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d019      	beq.n	80050c0 <HAL_GPIO_Init+0x1f4>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a4b      	ldr	r2, [pc, #300]	@ (80051bc <HAL_GPIO_Init+0x2f0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <HAL_GPIO_Init+0x1f0>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a4a      	ldr	r2, [pc, #296]	@ (80051c0 <HAL_GPIO_Init+0x2f4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00d      	beq.n	80050b8 <HAL_GPIO_Init+0x1ec>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a49      	ldr	r2, [pc, #292]	@ (80051c4 <HAL_GPIO_Init+0x2f8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d007      	beq.n	80050b4 <HAL_GPIO_Init+0x1e8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a48      	ldr	r2, [pc, #288]	@ (80051c8 <HAL_GPIO_Init+0x2fc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d101      	bne.n	80050b0 <HAL_GPIO_Init+0x1e4>
 80050ac:	2305      	movs	r3, #5
 80050ae:	e00a      	b.n	80050c6 <HAL_GPIO_Init+0x1fa>
 80050b0:	2306      	movs	r3, #6
 80050b2:	e008      	b.n	80050c6 <HAL_GPIO_Init+0x1fa>
 80050b4:	2304      	movs	r3, #4
 80050b6:	e006      	b.n	80050c6 <HAL_GPIO_Init+0x1fa>
 80050b8:	2303      	movs	r3, #3
 80050ba:	e004      	b.n	80050c6 <HAL_GPIO_Init+0x1fa>
 80050bc:	2302      	movs	r3, #2
 80050be:	e002      	b.n	80050c6 <HAL_GPIO_Init+0x1fa>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <HAL_GPIO_Init+0x1fa>
 80050c4:	2300      	movs	r3, #0
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	f002 0203 	and.w	r2, r2, #3
 80050cc:	0092      	lsls	r2, r2, #2
 80050ce:	4093      	lsls	r3, r2
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050d6:	4937      	ldr	r1, [pc, #220]	@ (80051b4 <HAL_GPIO_Init+0x2e8>)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	3302      	adds	r3, #2
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050e4:	4b39      	ldr	r3, [pc, #228]	@ (80051cc <HAL_GPIO_Init+0x300>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4013      	ands	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005108:	4a30      	ldr	r2, [pc, #192]	@ (80051cc <HAL_GPIO_Init+0x300>)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800510e:	4b2f      	ldr	r3, [pc, #188]	@ (80051cc <HAL_GPIO_Init+0x300>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	43db      	mvns	r3, r3
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4013      	ands	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005132:	4a26      	ldr	r2, [pc, #152]	@ (80051cc <HAL_GPIO_Init+0x300>)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005138:	4b24      	ldr	r3, [pc, #144]	@ (80051cc <HAL_GPIO_Init+0x300>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	43db      	mvns	r3, r3
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4013      	ands	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800515c:	4a1b      	ldr	r2, [pc, #108]	@ (80051cc <HAL_GPIO_Init+0x300>)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005162:	4b1a      	ldr	r3, [pc, #104]	@ (80051cc <HAL_GPIO_Init+0x300>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	43db      	mvns	r3, r3
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4013      	ands	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005186:	4a11      	ldr	r2, [pc, #68]	@ (80051cc <HAL_GPIO_Init+0x300>)
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	6013      	str	r3, [r2, #0]
=======
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80a6 	beq.w	8006420 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062d4:	4b5b      	ldr	r3, [pc, #364]	@ (8006444 <HAL_GPIO_Init+0x2e4>)
 80062d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062d8:	4a5a      	ldr	r2, [pc, #360]	@ (8006444 <HAL_GPIO_Init+0x2e4>)
 80062da:	f043 0301 	orr.w	r3, r3, #1
 80062de:	6613      	str	r3, [r2, #96]	@ 0x60
 80062e0:	4b58      	ldr	r3, [pc, #352]	@ (8006444 <HAL_GPIO_Init+0x2e4>)
 80062e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	60bb      	str	r3, [r7, #8]
 80062ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062ec:	4a56      	ldr	r2, [pc, #344]	@ (8006448 <HAL_GPIO_Init+0x2e8>)
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	089b      	lsrs	r3, r3, #2
 80062f2:	3302      	adds	r3, #2
 80062f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	220f      	movs	r2, #15
 8006304:	fa02 f303 	lsl.w	r3, r2, r3
 8006308:	43db      	mvns	r3, r3
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4013      	ands	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006316:	d01f      	beq.n	8006358 <HAL_GPIO_Init+0x1f8>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a4c      	ldr	r2, [pc, #304]	@ (800644c <HAL_GPIO_Init+0x2ec>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d019      	beq.n	8006354 <HAL_GPIO_Init+0x1f4>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a4b      	ldr	r2, [pc, #300]	@ (8006450 <HAL_GPIO_Init+0x2f0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d013      	beq.n	8006350 <HAL_GPIO_Init+0x1f0>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a4a      	ldr	r2, [pc, #296]	@ (8006454 <HAL_GPIO_Init+0x2f4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00d      	beq.n	800634c <HAL_GPIO_Init+0x1ec>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a49      	ldr	r2, [pc, #292]	@ (8006458 <HAL_GPIO_Init+0x2f8>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d007      	beq.n	8006348 <HAL_GPIO_Init+0x1e8>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a48      	ldr	r2, [pc, #288]	@ (800645c <HAL_GPIO_Init+0x2fc>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d101      	bne.n	8006344 <HAL_GPIO_Init+0x1e4>
 8006340:	2305      	movs	r3, #5
 8006342:	e00a      	b.n	800635a <HAL_GPIO_Init+0x1fa>
 8006344:	2306      	movs	r3, #6
 8006346:	e008      	b.n	800635a <HAL_GPIO_Init+0x1fa>
 8006348:	2304      	movs	r3, #4
 800634a:	e006      	b.n	800635a <HAL_GPIO_Init+0x1fa>
 800634c:	2303      	movs	r3, #3
 800634e:	e004      	b.n	800635a <HAL_GPIO_Init+0x1fa>
 8006350:	2302      	movs	r3, #2
 8006352:	e002      	b.n	800635a <HAL_GPIO_Init+0x1fa>
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <HAL_GPIO_Init+0x1fa>
 8006358:	2300      	movs	r3, #0
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	f002 0203 	and.w	r2, r2, #3
 8006360:	0092      	lsls	r2, r2, #2
 8006362:	4093      	lsls	r3, r2
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800636a:	4937      	ldr	r1, [pc, #220]	@ (8006448 <HAL_GPIO_Init+0x2e8>)
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	089b      	lsrs	r3, r3, #2
 8006370:	3302      	adds	r3, #2
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006378:	4b39      	ldr	r3, [pc, #228]	@ (8006460 <HAL_GPIO_Init+0x300>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	43db      	mvns	r3, r3
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4013      	ands	r3, r2
 8006386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d003      	beq.n	800639c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800639c:	4a30      	ldr	r2, [pc, #192]	@ (8006460 <HAL_GPIO_Init+0x300>)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80063a2:	4b2f      	ldr	r3, [pc, #188]	@ (8006460 <HAL_GPIO_Init+0x300>)
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	43db      	mvns	r3, r3
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4013      	ands	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80063c6:	4a26      	ldr	r2, [pc, #152]	@ (8006460 <HAL_GPIO_Init+0x300>)
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80063cc:	4b24      	ldr	r3, [pc, #144]	@ (8006460 <HAL_GPIO_Init+0x300>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	43db      	mvns	r3, r3
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4013      	ands	r3, r2
 80063da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80063f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006460 <HAL_GPIO_Init+0x300>)
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80063f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006460 <HAL_GPIO_Init+0x300>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	43db      	mvns	r3, r3
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4013      	ands	r3, r2
 8006404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800641a:	4a11      	ldr	r2, [pc, #68]	@ (8006460 <HAL_GPIO_Init+0x300>)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
      }
    }

    position++;
<<<<<<< Updated upstream
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	3301      	adds	r3, #1
 8005190:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	f47f ae9d 	bne.w	8004edc <HAL_GPIO_Init+0x10>
  }
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40021000 	.word	0x40021000
 80051b4:	40010000 	.word	0x40010000
 80051b8:	48000400 	.word	0x48000400
 80051bc:	48000800 	.word	0x48000800
 80051c0:	48000c00 	.word	0x48000c00
 80051c4:	48001000 	.word	0x48001000
 80051c8:	48001400 	.word	0x48001400
 80051cc:	40010400 	.word	0x40010400

080051d0 <HAL_GPIO_ReadPin>:
=======
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	3301      	adds	r3, #1
 8006424:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	fa22 f303 	lsr.w	r3, r2, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	f47f ae9d 	bne.w	8006170 <HAL_GPIO_Init+0x10>
  }
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	40021000 	.word	0x40021000
 8006448:	40010000 	.word	0x40010000
 800644c:	48000400 	.word	0x48000400
 8006450:	48000800 	.word	0x48000800
 8006454:	48000c00 	.word	0x48000c00
 8006458:	48001000 	.word	0x48001000
 800645c:	48001400 	.word	0x48001400
 8006460:	40010400 	.word	0x40010400

08006464 <HAL_GPIO_ReadPin>:
>>>>>>> Stashed changes
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	807b      	strh	r3, [r7, #2]
=======
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
<<<<<<< Updated upstream
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691a      	ldr	r2, [r3, #16]
 80051e0:	887b      	ldrh	r3, [r7, #2]
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
 80051ec:	e001      	b.n	80051f2 <HAL_GPIO_ReadPin+0x22>
=======
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	887b      	ldrh	r3, [r7, #2]
 8006476:	4013      	ands	r3, r2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800647c:	2301      	movs	r3, #1
 800647e:	73fb      	strb	r3, [r7, #15]
 8006480:	e001      	b.n	8006486 <HAL_GPIO_ReadPin+0x22>
>>>>>>> Stashed changes
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< Updated upstream
 80051ee:	2300      	movs	r3, #0
 80051f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_GPIO_WritePin>:
=======
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006486:	7bfb      	ldrb	r3, [r7, #15]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	807b      	strh	r3, [r7, #2]
 800520c:	4613      	mov	r3, r2
 800520e:	707b      	strb	r3, [r7, #1]
=======
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	807b      	strh	r3, [r7, #2]
 80064a0:	4613      	mov	r3, r2
 80064a2:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 8005210:	787b      	ldrb	r3, [r7, #1]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005216:	887a      	ldrh	r2, [r7, #2]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	619a      	str	r2, [r3, #24]
=======
 80064a4:	787b      	ldrb	r3, [r7, #1]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064aa:	887a      	ldrh	r2, [r7, #2]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< Updated upstream
 800521c:	e002      	b.n	8005224 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800521e:	887a      	ldrh	r2, [r7, #2]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_GPIO_EXTI_IRQHandler>:
=======
 80064b0:	e002      	b.n	80064b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064b2:	887a      	ldrh	r2, [r7, #2]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800523a:	4b08      	ldr	r3, [pc, #32]	@ (800525c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800523c:	695a      	ldr	r2, [r3, #20]
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	4013      	ands	r3, r2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d006      	beq.n	8005254 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005246:	4a05      	ldr	r2, [pc, #20]	@ (800525c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005248:	88fb      	ldrh	r3, [r7, #6]
 800524a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	4618      	mov	r0, r3
 8005250:	f7fc fd0a 	bl	8001c68 <HAL_GPIO_EXTI_Callback>
  }
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40010400 	.word	0x40010400

08005260 <HAL_PWREx_ControlVoltageScaling>:
=======
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4603      	mov	r3, r0
 80064cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064ce:	4b08      	ldr	r3, [pc, #32]	@ (80064f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064d0:	695a      	ldr	r2, [r3, #20]
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	4013      	ands	r3, r2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d006      	beq.n	80064e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064da:	4a05      	ldr	r2, [pc, #20]	@ (80064f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fc faae 	bl	8002a44 <HAL_GPIO_EXTI_Callback>
  }
}
 80064e8:	bf00      	nop
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	40010400 	.word	0x40010400

080064f4 <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> Stashed changes
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< Updated upstream
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
=======
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
<<<<<<< Updated upstream
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d141      	bne.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800526e:	4b4b      	ldr	r3, [pc, #300]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800527a:	d131      	bne.n	80052e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800527c:	4b47      	ldr	r3, [pc, #284]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800527e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005282:	4a46      	ldr	r2, [pc, #280]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005288:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800528c:	4b43      	ldr	r3, [pc, #268]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005294:	4a41      	ldr	r2, [pc, #260]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005296:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800529a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800529c:	4b40      	ldr	r3, [pc, #256]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2232      	movs	r2, #50	@ 0x32
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
 80052a6:	4a3f      	ldr	r2, [pc, #252]	@ (80053a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052a8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ac:	0c9b      	lsrs	r3, r3, #18
 80052ae:	3301      	adds	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052b2:	e002      	b.n	80052ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052ba:	4b38      	ldr	r3, [pc, #224]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052c6:	d102      	bne.n	80052ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f2      	bne.n	80052b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052ce:	4b33      	ldr	r3, [pc, #204]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052da:	d158      	bne.n	800538e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e057      	b.n	8005390 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d141      	bne.n	8006586 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006502:	4b4b      	ldr	r3, [pc, #300]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800650a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800650e:	d131      	bne.n	8006574 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006510:	4b47      	ldr	r3, [pc, #284]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006516:	4a46      	ldr	r2, [pc, #280]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800651c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006520:	4b43      	ldr	r3, [pc, #268]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006528:	4a41      	ldr	r2, [pc, #260]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800652a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800652e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006530:	4b40      	ldr	r3, [pc, #256]	@ (8006634 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2232      	movs	r2, #50	@ 0x32
 8006536:	fb02 f303 	mul.w	r3, r2, r3
 800653a:	4a3f      	ldr	r2, [pc, #252]	@ (8006638 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800653c:	fba2 2303 	umull	r2, r3, r2, r3
 8006540:	0c9b      	lsrs	r3, r3, #18
 8006542:	3301      	adds	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006546:	e002      	b.n	800654e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3b01      	subs	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800654e:	4b38      	ldr	r3, [pc, #224]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800655a:	d102      	bne.n	8006562 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f2      	bne.n	8006548 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006562:	4b33      	ldr	r3, [pc, #204]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800656a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800656e:	d158      	bne.n	8006622 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e057      	b.n	8006624 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> Stashed changes
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< Updated upstream
 80052e0:	4b2e      	ldr	r3, [pc, #184]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e6:	4a2d      	ldr	r2, [pc, #180]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052f0:	e04d      	b.n	800538e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052f8:	d141      	bne.n	800537e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052fa:	4b28      	ldr	r3, [pc, #160]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005306:	d131      	bne.n	800536c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005308:	4b24      	ldr	r3, [pc, #144]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800530a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800530e:	4a23      	ldr	r2, [pc, #140]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005314:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005318:	4b20      	ldr	r3, [pc, #128]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005320:	4a1e      	ldr	r2, [pc, #120]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005322:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005326:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005328:	4b1d      	ldr	r3, [pc, #116]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2232      	movs	r2, #50	@ 0x32
 800532e:	fb02 f303 	mul.w	r3, r2, r3
 8005332:	4a1c      	ldr	r2, [pc, #112]	@ (80053a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005334:	fba2 2303 	umull	r2, r3, r2, r3
 8005338:	0c9b      	lsrs	r3, r3, #18
 800533a:	3301      	adds	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800533e:	e002      	b.n	8005346 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3b01      	subs	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005346:	4b15      	ldr	r3, [pc, #84]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800534e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005352:	d102      	bne.n	800535a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f2      	bne.n	8005340 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800535a:	4b10      	ldr	r3, [pc, #64]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005366:	d112      	bne.n	800538e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e011      	b.n	8005390 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 8006574:	4b2e      	ldr	r3, [pc, #184]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800657a:	4a2d      	ldr	r2, [pc, #180]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800657c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006580:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006584:	e04d      	b.n	8006622 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800658c:	d141      	bne.n	8006612 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800658e:	4b28      	ldr	r3, [pc, #160]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800659a:	d131      	bne.n	8006600 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800659c:	4b24      	ldr	r3, [pc, #144]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800659e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065a2:	4a23      	ldr	r2, [pc, #140]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065ac:	4b20      	ldr	r3, [pc, #128]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80065b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006634 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2232      	movs	r2, #50	@ 0x32
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
 80065c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006638 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80065c8:	fba2 2303 	umull	r2, r3, r2, r3
 80065cc:	0c9b      	lsrs	r3, r3, #18
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065d2:	e002      	b.n	80065da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065da:	4b15      	ldr	r3, [pc, #84]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065e6:	d102      	bne.n	80065ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1f2      	bne.n	80065d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80065ee:	4b10      	ldr	r3, [pc, #64]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065fa:	d112      	bne.n	8006622 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e011      	b.n	8006624 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> Stashed changes
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< Updated upstream
 800536c:	4b0b      	ldr	r3, [pc, #44]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800536e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005372:	4a0a      	ldr	r2, [pc, #40]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005378:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800537c:	e007      	b.n	800538e <HAL_PWREx_ControlVoltageScaling+0x12e>
=======
 8006600:	4b0b      	ldr	r3, [pc, #44]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006606:	4a0a      	ldr	r2, [pc, #40]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800660c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006610:	e007      	b.n	8006622 <HAL_PWREx_ControlVoltageScaling+0x12e>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
<<<<<<< Updated upstream
 800537e:	4b07      	ldr	r3, [pc, #28]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005386:	4a05      	ldr	r2, [pc, #20]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005388:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800538c:	6013      	str	r3, [r2, #0]
=======
 8006612:	4b07      	ldr	r3, [pc, #28]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800661a:	4a05      	ldr	r2, [pc, #20]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800661c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006620:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
<<<<<<< Updated upstream
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	40007000 	.word	0x40007000
 80053a0:	2000000c 	.word	0x2000000c
 80053a4:	431bde83 	.word	0x431bde83

080053a8 <HAL_PWREx_DisableUCPDDeadBattery>:
=======
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	40007000 	.word	0x40007000
 8006634:	20000274 	.word	0x20000274
 8006638:	431bde83 	.word	0x431bde83

0800663c <HAL_PWREx_DisableUCPDDeadBattery>:
>>>>>>> Stashed changes
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
<<<<<<< Updated upstream
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80053ac:	4b05      	ldr	r3, [pc, #20]	@ (80053c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	4a04      	ldr	r2, [pc, #16]	@ (80053c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80053b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053b6:	6093      	str	r3, [r2, #8]
}
 80053b8:	bf00      	nop
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40007000 	.word	0x40007000

080053c8 <HAL_RCC_OscConfig>:
=======
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006640:	4b05      	ldr	r3, [pc, #20]	@ (8006658 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	4a04      	ldr	r2, [pc, #16]	@ (8006658 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800664a:	6093      	str	r3, [r2, #8]
}
 800664c:	bf00      	nop
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	40007000 	.word	0x40007000

0800665c <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
=======
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e2fe      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
=======
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e2fe      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d075      	beq.n	80054d2 <HAL_RCC_OscConfig+0x10a>
=======
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d075      	beq.n	8006766 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 80053e6:	4b97      	ldr	r3, [pc, #604]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 030c 	and.w	r3, r3, #12
 80053ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053f0:	4b94      	ldr	r3, [pc, #592]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	2b0c      	cmp	r3, #12
 80053fe:	d102      	bne.n	8005406 <HAL_RCC_OscConfig+0x3e>
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b03      	cmp	r3, #3
 8005404:	d002      	beq.n	800540c <HAL_RCC_OscConfig+0x44>
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b08      	cmp	r3, #8
 800540a:	d10b      	bne.n	8005424 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800540c:	4b8d      	ldr	r3, [pc, #564]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d05b      	beq.n	80054d0 <HAL_RCC_OscConfig+0x108>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d157      	bne.n	80054d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e2d9      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
=======
 800667a:	4b97      	ldr	r3, [pc, #604]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 030c 	and.w	r3, r3, #12
 8006682:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006684:	4b94      	ldr	r3, [pc, #592]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b0c      	cmp	r3, #12
 8006692:	d102      	bne.n	800669a <HAL_RCC_OscConfig+0x3e>
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2b03      	cmp	r3, #3
 8006698:	d002      	beq.n	80066a0 <HAL_RCC_OscConfig+0x44>
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2b08      	cmp	r3, #8
 800669e:	d10b      	bne.n	80066b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a0:	4b8d      	ldr	r3, [pc, #564]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d05b      	beq.n	8006764 <HAL_RCC_OscConfig+0x108>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d157      	bne.n	8006764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e2d9      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800542c:	d106      	bne.n	800543c <HAL_RCC_OscConfig+0x74>
 800542e:	4b85      	ldr	r3, [pc, #532]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a84      	ldr	r2, [pc, #528]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e01d      	b.n	8005478 <HAL_RCC_OscConfig+0xb0>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005444:	d10c      	bne.n	8005460 <HAL_RCC_OscConfig+0x98>
 8005446:	4b7f      	ldr	r3, [pc, #508]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a7e      	ldr	r2, [pc, #504]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800544c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	4b7c      	ldr	r3, [pc, #496]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a7b      	ldr	r2, [pc, #492]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e00b      	b.n	8005478 <HAL_RCC_OscConfig+0xb0>
 8005460:	4b78      	ldr	r3, [pc, #480]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a77      	ldr	r2, [pc, #476]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	4b75      	ldr	r3, [pc, #468]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a74      	ldr	r2, [pc, #464]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005472:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d013      	beq.n	80054a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fd fab4 	bl	80029ec <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005488:	f7fd fab0 	bl	80029ec <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b64      	cmp	r3, #100	@ 0x64
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e29e      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800549a:	4b6a      	ldr	r3, [pc, #424]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0xc0>
 80054a6:	e014      	b.n	80054d2 <HAL_RCC_OscConfig+0x10a>
=======
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066c0:	d106      	bne.n	80066d0 <HAL_RCC_OscConfig+0x74>
 80066c2:	4b85      	ldr	r3, [pc, #532]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a84      	ldr	r2, [pc, #528]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80066c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	e01d      	b.n	800670c <HAL_RCC_OscConfig+0xb0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066d8:	d10c      	bne.n	80066f4 <HAL_RCC_OscConfig+0x98>
 80066da:	4b7f      	ldr	r3, [pc, #508]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a7e      	ldr	r2, [pc, #504]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80066e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	4b7c      	ldr	r3, [pc, #496]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a7b      	ldr	r2, [pc, #492]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80066ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	e00b      	b.n	800670c <HAL_RCC_OscConfig+0xb0>
 80066f4:	4b78      	ldr	r3, [pc, #480]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a77      	ldr	r2, [pc, #476]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80066fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	4b75      	ldr	r3, [pc, #468]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a74      	ldr	r2, [pc, #464]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 8006706:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800670a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d013      	beq.n	800673c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006714:	f7fd fab4 	bl	8003c80 <HAL_GetTick>
 8006718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800671a:	e008      	b.n	800672e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800671c:	f7fd fab0 	bl	8003c80 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b64      	cmp	r3, #100	@ 0x64
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e29e      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800672e:	4b6a      	ldr	r3, [pc, #424]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0f0      	beq.n	800671c <HAL_RCC_OscConfig+0xc0>
 800673a:	e014      	b.n	8006766 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80054a8:	f7fd faa0 	bl	80029ec <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fd fa9c 	bl	80029ec <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	@ 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e28a      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054c2:	4b60      	ldr	r3, [pc, #384]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0xe8>
 80054ce:	e000      	b.n	80054d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d0:	bf00      	nop
=======
 800673c:	f7fd faa0 	bl	8003c80 <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006744:	f7fd fa9c 	bl	8003c80 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b64      	cmp	r3, #100	@ 0x64
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e28a      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006756:	4b60      	ldr	r3, [pc, #384]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f0      	bne.n	8006744 <HAL_RCC_OscConfig+0xe8>
 8006762:	e000      	b.n	8006766 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006764:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d075      	beq.n	80055ca <HAL_RCC_OscConfig+0x202>
=======
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d075      	beq.n	800685e <HAL_RCC_OscConfig+0x202>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 80054de:	4b59      	ldr	r3, [pc, #356]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
 80054e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054e8:	4b56      	ldr	r3, [pc, #344]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	d102      	bne.n	80054fe <HAL_RCC_OscConfig+0x136>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d002      	beq.n	8005504 <HAL_RCC_OscConfig+0x13c>
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b04      	cmp	r3, #4
 8005502:	d11f      	bne.n	8005544 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005504:	4b4f      	ldr	r3, [pc, #316]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_RCC_OscConfig+0x154>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e25d      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
=======
 8006772:	4b59      	ldr	r3, [pc, #356]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 030c 	and.w	r3, r3, #12
 800677a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800677c:	4b56      	ldr	r3, [pc, #344]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f003 0303 	and.w	r3, r3, #3
 8006784:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2b0c      	cmp	r3, #12
 800678a:	d102      	bne.n	8006792 <HAL_RCC_OscConfig+0x136>
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d002      	beq.n	8006798 <HAL_RCC_OscConfig+0x13c>
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	2b04      	cmp	r3, #4
 8006796:	d11f      	bne.n	80067d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006798:	4b4f      	ldr	r3, [pc, #316]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <HAL_RCC_OscConfig+0x154>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e25d      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 800551c:	4b49      	ldr	r3, [pc, #292]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	061b      	lsls	r3, r3, #24
 800552a:	4946      	ldr	r1, [pc, #280]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800552c:	4313      	orrs	r3, r2
 800552e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005530:	4b45      	ldr	r3, [pc, #276]	@ (8005648 <HAL_RCC_OscConfig+0x280>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	f7fd fa0d 	bl	8002954 <HAL_InitTick>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d043      	beq.n	80055c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e249      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
=======
 80067b0:	4b49      	ldr	r3, [pc, #292]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	061b      	lsls	r3, r3, #24
 80067be:	4946      	ldr	r1, [pc, #280]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80067c4:	4b45      	ldr	r3, [pc, #276]	@ (80068dc <HAL_RCC_OscConfig+0x280>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fd fa0d 	bl	8003be8 <HAL_InitTick>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d043      	beq.n	800685c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e249      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< Updated upstream
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d023      	beq.n	8005594 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800554c:	4b3d      	ldr	r3, [pc, #244]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a3c      	ldr	r2, [pc, #240]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005558:	f7fd fa48 	bl	80029ec <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005560:	f7fd fa44 	bl	80029ec <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e232      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005572:	4b34      	ldr	r3, [pc, #208]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f0      	beq.n	8005560 <HAL_RCC_OscConfig+0x198>
=======
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d023      	beq.n	8006828 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067e0:	4b3d      	ldr	r3, [pc, #244]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a3c      	ldr	r2, [pc, #240]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80067e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ec:	f7fd fa48 	bl	8003c80 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067f4:	f7fd fa44 	bl	8003c80 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e232      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006806:	4b34      	ldr	r3, [pc, #208]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0f0      	beq.n	80067f4 <HAL_RCC_OscConfig+0x198>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 800557e:	4b31      	ldr	r3, [pc, #196]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	061b      	lsls	r3, r3, #24
 800558c:	492d      	ldr	r1, [pc, #180]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800558e:	4313      	orrs	r3, r2
 8005590:	604b      	str	r3, [r1, #4]
 8005592:	e01a      	b.n	80055ca <HAL_RCC_OscConfig+0x202>
=======
 8006812:	4b31      	ldr	r3, [pc, #196]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	061b      	lsls	r3, r3, #24
 8006820:	492d      	ldr	r1, [pc, #180]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 8006822:	4313      	orrs	r3, r2
 8006824:	604b      	str	r3, [r1, #4]
 8006826:	e01a      	b.n	800685e <HAL_RCC_OscConfig+0x202>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 8005594:	4b2b      	ldr	r3, [pc, #172]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a2a      	ldr	r2, [pc, #168]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800559a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800559e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fd fa24 	bl	80029ec <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055a8:	f7fd fa20 	bl	80029ec <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e20e      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055ba:	4b22      	ldr	r3, [pc, #136]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f0      	bne.n	80055a8 <HAL_RCC_OscConfig+0x1e0>
 80055c6:	e000      	b.n	80055ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055c8:	bf00      	nop
=======
 8006828:	4b2b      	ldr	r3, [pc, #172]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a2a      	ldr	r2, [pc, #168]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 800682e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006834:	f7fd fa24 	bl	8003c80 <HAL_GetTick>
 8006838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800683c:	f7fd fa20 	bl	8003c80 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e20e      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800684e:	4b22      	ldr	r3, [pc, #136]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1f0      	bne.n	800683c <HAL_RCC_OscConfig+0x1e0>
 800685a:	e000      	b.n	800685e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800685c:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d041      	beq.n	800565a <HAL_RCC_OscConfig+0x292>
=======
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d041      	beq.n	80068ee <HAL_RCC_OscConfig+0x292>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< Updated upstream
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d01c      	beq.n	8005618 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055de:	4b19      	ldr	r3, [pc, #100]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80055e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055e4:	4a17      	ldr	r2, [pc, #92]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80055e6:	f043 0301 	orr.w	r3, r3, #1
 80055ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ee:	f7fd f9fd 	bl	80029ec <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f6:	f7fd f9f9 	bl	80029ec <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e1e7      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005608:	4b0e      	ldr	r3, [pc, #56]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800560a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0ef      	beq.n	80055f6 <HAL_RCC_OscConfig+0x22e>
 8005616:	e020      	b.n	800565a <HAL_RCC_OscConfig+0x292>
=======
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d01c      	beq.n	80068ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006872:	4b19      	ldr	r3, [pc, #100]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 8006874:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006878:	4a17      	ldr	r2, [pc, #92]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 800687a:	f043 0301 	orr.w	r3, r3, #1
 800687e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006882:	f7fd f9fd 	bl	8003c80 <HAL_GetTick>
 8006886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006888:	e008      	b.n	800689c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800688a:	f7fd f9f9 	bl	8003c80 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d901      	bls.n	800689c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e1e7      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800689c:	4b0e      	ldr	r3, [pc, #56]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 800689e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0ef      	beq.n	800688a <HAL_RCC_OscConfig+0x22e>
 80068aa:	e020      	b.n	80068ee <HAL_RCC_OscConfig+0x292>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 8005618:	4b0a      	ldr	r3, [pc, #40]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800561a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800561e:	4a09      	ldr	r2, [pc, #36]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005628:	f7fd f9e0 	bl	80029ec <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800562e:	e00d      	b.n	800564c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005630:	f7fd f9dc 	bl	80029ec <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d906      	bls.n	800564c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e1ca      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
 8005642:	bf00      	nop
 8005644:	40021000 	.word	0x40021000
 8005648:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800564c:	4b8c      	ldr	r3, [pc, #560]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 800564e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1ea      	bne.n	8005630 <HAL_RCC_OscConfig+0x268>
=======
 80068ac:	4b0a      	ldr	r3, [pc, #40]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80068ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068b2:	4a09      	ldr	r2, [pc, #36]	@ (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80068b4:	f023 0301 	bic.w	r3, r3, #1
 80068b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068bc:	f7fd f9e0 	bl	8003c80 <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068c2:	e00d      	b.n	80068e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068c4:	f7fd f9dc 	bl	8003c80 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d906      	bls.n	80068e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e1ca      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
 80068d6:	bf00      	nop
 80068d8:	40021000 	.word	0x40021000
 80068dc:	20000278 	.word	0x20000278
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068e0:	4b8c      	ldr	r3, [pc, #560]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 80068e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1ea      	bne.n	80068c4 <HAL_RCC_OscConfig+0x268>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80a6 	beq.w	80057b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005668:	2300      	movs	r3, #0
 800566a:	77fb      	strb	r3, [r7, #31]
=======
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0304 	and.w	r3, r3, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 80a6 	beq.w	8006a48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068fc:	2300      	movs	r3, #0
 80068fe:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
<<<<<<< Updated upstream
 800566c:	4b84      	ldr	r3, [pc, #528]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 800566e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_RCC_OscConfig+0x2b4>
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <HAL_RCC_OscConfig+0x2b6>
 800567c:	2300      	movs	r3, #0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00d      	beq.n	800569e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005682:	4b7f      	ldr	r3, [pc, #508]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005686:	4a7e      	ldr	r2, [pc, #504]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800568c:	6593      	str	r3, [r2, #88]	@ 0x58
 800568e:	4b7c      	ldr	r3, [pc, #496]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800569a:	2301      	movs	r3, #1
 800569c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800569e:	4b79      	ldr	r3, [pc, #484]	@ (8005884 <HAL_RCC_OscConfig+0x4bc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d118      	bne.n	80056dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056aa:	4b76      	ldr	r3, [pc, #472]	@ (8005884 <HAL_RCC_OscConfig+0x4bc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a75      	ldr	r2, [pc, #468]	@ (8005884 <HAL_RCC_OscConfig+0x4bc>)
 80056b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056b6:	f7fd f999 	bl	80029ec <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056be:	f7fd f995 	bl	80029ec <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e183      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056d0:	4b6c      	ldr	r3, [pc, #432]	@ (8005884 <HAL_RCC_OscConfig+0x4bc>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0f0      	beq.n	80056be <HAL_RCC_OscConfig+0x2f6>
=======
 8006900:	4b84      	ldr	r3, [pc, #528]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <HAL_RCC_OscConfig+0x2b4>
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <HAL_RCC_OscConfig+0x2b6>
 8006910:	2300      	movs	r3, #0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00d      	beq.n	8006932 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006916:	4b7f      	ldr	r3, [pc, #508]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800691a:	4a7e      	ldr	r2, [pc, #504]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 800691c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006920:	6593      	str	r3, [r2, #88]	@ 0x58
 8006922:	4b7c      	ldr	r3, [pc, #496]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800692e:	2301      	movs	r3, #1
 8006930:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006932:	4b79      	ldr	r3, [pc, #484]	@ (8006b18 <HAL_RCC_OscConfig+0x4bc>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800693a:	2b00      	cmp	r3, #0
 800693c:	d118      	bne.n	8006970 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800693e:	4b76      	ldr	r3, [pc, #472]	@ (8006b18 <HAL_RCC_OscConfig+0x4bc>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a75      	ldr	r2, [pc, #468]	@ (8006b18 <HAL_RCC_OscConfig+0x4bc>)
 8006944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800694a:	f7fd f999 	bl	8003c80 <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006952:	f7fd f995 	bl	8003c80 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e183      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006964:	4b6c      	ldr	r3, [pc, #432]	@ (8006b18 <HAL_RCC_OscConfig+0x4bc>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0f0      	beq.n	8006952 <HAL_RCC_OscConfig+0x2f6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d108      	bne.n	80056f6 <HAL_RCC_OscConfig+0x32e>
 80056e4:	4b66      	ldr	r3, [pc, #408]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ea:	4a65      	ldr	r2, [pc, #404]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056f4:	e024      	b.n	8005740 <HAL_RCC_OscConfig+0x378>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	d110      	bne.n	8005720 <HAL_RCC_OscConfig+0x358>
 80056fe:	4b60      	ldr	r3, [pc, #384]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005704:	4a5e      	ldr	r2, [pc, #376]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005706:	f043 0304 	orr.w	r3, r3, #4
 800570a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800570e:	4b5c      	ldr	r3, [pc, #368]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005714:	4a5a      	ldr	r2, [pc, #360]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800571e:	e00f      	b.n	8005740 <HAL_RCC_OscConfig+0x378>
 8005720:	4b57      	ldr	r3, [pc, #348]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005726:	4a56      	ldr	r2, [pc, #344]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005728:	f023 0301 	bic.w	r3, r3, #1
 800572c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005730:	4b53      	ldr	r3, [pc, #332]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005736:	4a52      	ldr	r2, [pc, #328]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005738:	f023 0304 	bic.w	r3, r3, #4
 800573c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d016      	beq.n	8005776 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005748:	f7fd f950 	bl	80029ec <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800574e:	e00a      	b.n	8005766 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005750:	f7fd f94c 	bl	80029ec <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e138      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005766:	4b46      	ldr	r3, [pc, #280]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0ed      	beq.n	8005750 <HAL_RCC_OscConfig+0x388>
 8005774:	e015      	b.n	80057a2 <HAL_RCC_OscConfig+0x3da>
=======
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d108      	bne.n	800698a <HAL_RCC_OscConfig+0x32e>
 8006978:	4b66      	ldr	r3, [pc, #408]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 800697a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800697e:	4a65      	ldr	r2, [pc, #404]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006980:	f043 0301 	orr.w	r3, r3, #1
 8006984:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006988:	e024      	b.n	80069d4 <HAL_RCC_OscConfig+0x378>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	2b05      	cmp	r3, #5
 8006990:	d110      	bne.n	80069b4 <HAL_RCC_OscConfig+0x358>
 8006992:	4b60      	ldr	r3, [pc, #384]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006998:	4a5e      	ldr	r2, [pc, #376]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 800699a:	f043 0304 	orr.w	r3, r3, #4
 800699e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069a2:	4b5c      	ldr	r3, [pc, #368]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 80069a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a8:	4a5a      	ldr	r2, [pc, #360]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069b2:	e00f      	b.n	80069d4 <HAL_RCC_OscConfig+0x378>
 80069b4:	4b57      	ldr	r3, [pc, #348]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 80069b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ba:	4a56      	ldr	r2, [pc, #344]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 80069bc:	f023 0301 	bic.w	r3, r3, #1
 80069c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069c4:	4b53      	ldr	r3, [pc, #332]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 80069c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ca:	4a52      	ldr	r2, [pc, #328]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 80069cc:	f023 0304 	bic.w	r3, r3, #4
 80069d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d016      	beq.n	8006a0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069dc:	f7fd f950 	bl	8003c80 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069e2:	e00a      	b.n	80069fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e4:	f7fd f94c 	bl	8003c80 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e138      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069fa:	4b46      	ldr	r3, [pc, #280]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 80069fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0ed      	beq.n	80069e4 <HAL_RCC_OscConfig+0x388>
 8006a08:	e015      	b.n	8006a36 <HAL_RCC_OscConfig+0x3da>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8005776:	f7fd f939 	bl	80029ec <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800577c:	e00a      	b.n	8005794 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577e:	f7fd f935 	bl	80029ec <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800578c:	4293      	cmp	r3, r2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e121      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005794:	4b3a      	ldr	r3, [pc, #232]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1ed      	bne.n	800577e <HAL_RCC_OscConfig+0x3b6>
=======
 8006a0a:	f7fd f939 	bl	8003c80 <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a10:	e00a      	b.n	8006a28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a12:	f7fd f935 	bl	8003c80 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d901      	bls.n	8006a28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e121      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a28:	4b3a      	ldr	r3, [pc, #232]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1ed      	bne.n	8006a12 <HAL_RCC_OscConfig+0x3b6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< Updated upstream
 80057a2:	7ffb      	ldrb	r3, [r7, #31]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d105      	bne.n	80057b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a8:	4b35      	ldr	r3, [pc, #212]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 80057aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ac:	4a34      	ldr	r2, [pc, #208]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 80057ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057b2:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 8006a36:	7ffb      	ldrb	r3, [r7, #31]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d105      	bne.n	8006a48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a3c:	4b35      	ldr	r3, [pc, #212]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a40:	4a34      	ldr	r2, [pc, #208]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006a42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a46:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> Stashed changes
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< Updated upstream
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d03c      	beq.n	800583a <HAL_RCC_OscConfig+0x472>
=======
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d03c      	beq.n	8006ace <HAL_RCC_OscConfig+0x472>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< Updated upstream
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01c      	beq.n	8005802 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 80057ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d8:	f7fd f908 	bl	80029ec <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057e0:	f7fd f904 	bl	80029ec <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e0f2      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057f2:	4b23      	ldr	r3, [pc, #140]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 80057f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0ef      	beq.n	80057e0 <HAL_RCC_OscConfig+0x418>
 8005800:	e01b      	b.n	800583a <HAL_RCC_OscConfig+0x472>
=======
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01c      	beq.n	8006a96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006a5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a62:	4a2c      	ldr	r2, [pc, #176]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006a64:	f043 0301 	orr.w	r3, r3, #1
 8006a68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a6c:	f7fd f908 	bl	8003c80 <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a72:	e008      	b.n	8006a86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a74:	f7fd f904 	bl	8003c80 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e0f2      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a86:	4b23      	ldr	r3, [pc, #140]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0ef      	beq.n	8006a74 <HAL_RCC_OscConfig+0x418>
 8006a94:	e01b      	b.n	8006ace <HAL_RCC_OscConfig+0x472>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< Updated upstream
 8005802:	4b1f      	ldr	r3, [pc, #124]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005804:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005808:	4a1d      	ldr	r2, [pc, #116]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005812:	f7fd f8eb 	bl	80029ec <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800581a:	f7fd f8e7 	bl	80029ec <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e0d5      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800582c:	4b14      	ldr	r3, [pc, #80]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 800582e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1ef      	bne.n	800581a <HAL_RCC_OscConfig+0x452>
=======
 8006a96:	4b1f      	ldr	r3, [pc, #124]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006a9e:	f023 0301 	bic.w	r3, r3, #1
 8006aa2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa6:	f7fd f8eb 	bl	8003c80 <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006aae:	f7fd f8e7 	bl	8003c80 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e0d5      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ac0:	4b14      	ldr	r3, [pc, #80]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1ef      	bne.n	8006aae <HAL_RCC_OscConfig+0x452>
>>>>>>> Stashed changes

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< Updated upstream
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 80c9 	beq.w	80059d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005844:	4b0e      	ldr	r3, [pc, #56]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 030c 	and.w	r3, r3, #12
 800584c:	2b0c      	cmp	r3, #12
 800584e:	f000 8083 	beq.w	8005958 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d15e      	bne.n	8005918 <HAL_RCC_OscConfig+0x550>
=======
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 80c9 	beq.w	8006c6a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 030c 	and.w	r3, r3, #12
 8006ae0:	2b0c      	cmp	r3, #12
 8006ae2:	f000 8083 	beq.w	8006bec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d15e      	bne.n	8006bac <HAL_RCC_OscConfig+0x550>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 800585a:	4b09      	ldr	r3, [pc, #36]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a08      	ldr	r2, [pc, #32]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005860:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005866:	f7fd f8c1 	bl	80029ec <HAL_GetTick>
 800586a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800586c:	e00c      	b.n	8005888 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800586e:	f7fd f8bd 	bl	80029ec <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d905      	bls.n	8005888 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e0ab      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
 8005880:	40021000 	.word	0x40021000
 8005884:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005888:	4b55      	ldr	r3, [pc, #340]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ec      	bne.n	800586e <HAL_RCC_OscConfig+0x4a6>
=======
 8006aee:	4b09      	ldr	r3, [pc, #36]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a08      	ldr	r2, [pc, #32]	@ (8006b14 <HAL_RCC_OscConfig+0x4b8>)
 8006af4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afa:	f7fd f8c1 	bl	8003c80 <HAL_GetTick>
 8006afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b00:	e00c      	b.n	8006b1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b02:	f7fd f8bd 	bl	8003c80 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d905      	bls.n	8006b1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e0ab      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
 8006b14:	40021000 	.word	0x40021000
 8006b18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b1c:	4b55      	ldr	r3, [pc, #340]	@ (8006c74 <HAL_RCC_OscConfig+0x618>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1ec      	bne.n	8006b02 <HAL_RCC_OscConfig+0x4a6>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
 8005894:	4b52      	ldr	r3, [pc, #328]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	4b52      	ldr	r3, [pc, #328]	@ (80059e4 <HAL_RCC_OscConfig+0x61c>)
 800589a:	4013      	ands	r3, r2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6a11      	ldr	r1, [r2, #32]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058a4:	3a01      	subs	r2, #1
 80058a6:	0112      	lsls	r2, r2, #4
 80058a8:	4311      	orrs	r1, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80058ae:	0212      	lsls	r2, r2, #8
 80058b0:	4311      	orrs	r1, r2
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80058b6:	0852      	lsrs	r2, r2, #1
 80058b8:	3a01      	subs	r2, #1
 80058ba:	0552      	lsls	r2, r2, #21
 80058bc:	4311      	orrs	r1, r2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058c2:	0852      	lsrs	r2, r2, #1
 80058c4:	3a01      	subs	r2, #1
 80058c6:	0652      	lsls	r2, r2, #25
 80058c8:	4311      	orrs	r1, r2
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058ce:	06d2      	lsls	r2, r2, #27
 80058d0:	430a      	orrs	r2, r1
 80058d2:	4943      	ldr	r1, [pc, #268]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60cb      	str	r3, [r1, #12]
=======
 8006b28:	4b52      	ldr	r3, [pc, #328]	@ (8006c74 <HAL_RCC_OscConfig+0x618>)
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	4b52      	ldr	r3, [pc, #328]	@ (8006c78 <HAL_RCC_OscConfig+0x61c>)
 8006b2e:	4013      	ands	r3, r2
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6a11      	ldr	r1, [r2, #32]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b38:	3a01      	subs	r2, #1
 8006b3a:	0112      	lsls	r2, r2, #4
 8006b3c:	4311      	orrs	r1, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006b42:	0212      	lsls	r2, r2, #8
 8006b44:	4311      	orrs	r1, r2
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b4a:	0852      	lsrs	r2, r2, #1
 8006b4c:	3a01      	subs	r2, #1
 8006b4e:	0552      	lsls	r2, r2, #21
 8006b50:	4311      	orrs	r1, r2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b56:	0852      	lsrs	r2, r2, #1
 8006b58:	3a01      	subs	r2, #1
 8006b5a:	0652      	lsls	r2, r2, #25
 8006b5c:	4311      	orrs	r1, r2
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006b62:	06d2      	lsls	r2, r2, #27
 8006b64:	430a      	orrs	r2, r1
 8006b66:	4943      	ldr	r1, [pc, #268]	@ (8006c74 <HAL_RCC_OscConfig+0x618>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60cb      	str	r3, [r1, #12]
>>>>>>> Stashed changes
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 80058d8:	4b41      	ldr	r3, [pc, #260]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a40      	ldr	r2, [pc, #256]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 80058de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058e4:	4b3e      	ldr	r3, [pc, #248]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	4a3d      	ldr	r2, [pc, #244]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 80058ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fd f87c 	bl	80029ec <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f8:	f7fd f878 	bl	80029ec <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e066      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800590a:	4b35      	ldr	r3, [pc, #212]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0x530>
 8005916:	e05e      	b.n	80059d6 <HAL_RCC_OscConfig+0x60e>
=======
 8006b6c:	4b41      	ldr	r3, [pc, #260]	@ (8006c74 <HAL_RCC_OscConfig+0x618>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a40      	ldr	r2, [pc, #256]	@ (8006c74 <HAL_RCC_OscConfig+0x618>)
 8006b72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b78:	4b3e      	ldr	r3, [pc, #248]	@ (8006c74 <HAL_RCC_OscConfig+0x618>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	4a3d      	ldr	r2, [pc, #244]	@ (8006c74 <HAL_RCC_OscConfig+0x618>)
 8006b7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b84:	f7fd f87c 	bl	8003c80 <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b8c:	f7fd f878 	bl	8003c80 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e066      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b9e:	4b35      	ldr	r3, [pc, #212]	@ (8006c74 <HAL_RCC_OscConfig+0x618>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0f0      	beq.n	8006b8c <HAL_RCC_OscConfig+0x530>
 8006baa:	e05e      	b.n	8006c6a <HAL_RCC_OscConfig+0x60e>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8005918:	4b31      	ldr	r3, [pc, #196]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a30      	ldr	r2, [pc, #192]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 800591e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fd f862 	bl	80029ec <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800592c:	f7fd f85e 	bl	80029ec <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e04c      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800593e:	4b28      	ldr	r3, [pc, #160]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCC_OscConfig+0x564>
=======
 8006bac:	4b31      	ldr	r3, [pc, #196]	@ (8006c74 <HAL_RCC_OscConfig+0x618>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a30      	ldr	r2, [pc, #192]	@ (8006c74 <HAL_RCC_OscConfig+0x618>)
 8006bb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb8:	f7fd f862 	bl	8003c80 <HAL_GetTick>
 8006bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc0:	f7fd f85e 	bl	8003c80 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e04c      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bd2:	4b28      	ldr	r3, [pc, #160]	@ (8006c74 <HAL_RCC_OscConfig+0x618>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1f0      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x564>
>>>>>>> Stashed changes
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
<<<<<<< Updated upstream
 800594a:	4b25      	ldr	r3, [pc, #148]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	4924      	ldr	r1, [pc, #144]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 8005950:	4b25      	ldr	r3, [pc, #148]	@ (80059e8 <HAL_RCC_OscConfig+0x620>)
 8005952:	4013      	ands	r3, r2
 8005954:	60cb      	str	r3, [r1, #12]
 8005956:	e03e      	b.n	80059d6 <HAL_RCC_OscConfig+0x60e>
=======
 8006bde:	4b25      	ldr	r3, [pc, #148]	@ (8006c74 <HAL_RCC_OscConfig+0x618>)
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	4924      	ldr	r1, [pc, #144]	@ (8006c74 <HAL_RCC_OscConfig+0x618>)
 8006be4:	4b25      	ldr	r3, [pc, #148]	@ (8006c7c <HAL_RCC_OscConfig+0x620>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	60cb      	str	r3, [r1, #12]
 8006bea:	e03e      	b.n	8006c6a <HAL_RCC_OscConfig+0x60e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< Updated upstream
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e039      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
=======
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e039      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
<<<<<<< Updated upstream
 8005964:	4b1e      	ldr	r3, [pc, #120]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f003 0203 	and.w	r2, r3, #3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	429a      	cmp	r2, r3
 8005976:	d12c      	bne.n	80059d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005982:	3b01      	subs	r3, #1
 8005984:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005986:	429a      	cmp	r2, r3
 8005988:	d123      	bne.n	80059d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005994:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005996:	429a      	cmp	r2, r3
 8005998:	d11b      	bne.n	80059d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d113      	bne.n	80059d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b4:	085b      	lsrs	r3, r3, #1
 80059b6:	3b01      	subs	r3, #1
 80059b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d109      	bne.n	80059d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	3b01      	subs	r3, #1
 80059cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d001      	beq.n	80059d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
=======
 8006bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8006c74 <HAL_RCC_OscConfig+0x618>)
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f003 0203 	and.w	r2, r3, #3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d12c      	bne.n	8006c66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c16:	3b01      	subs	r3, #1
 8006c18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d123      	bne.n	8006c66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d11b      	bne.n	8006c66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d113      	bne.n	8006c66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c48:	085b      	lsrs	r3, r3, #1
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d109      	bne.n	8006c66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c5c:	085b      	lsrs	r3, r3, #1
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d001      	beq.n	8006c6a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
    }
  }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3720      	adds	r7, #32
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40021000 	.word	0x40021000
 80059e4:	019f800c 	.word	0x019f800c
 80059e8:	feeefffc 	.word	0xfeeefffc

080059ec <HAL_RCC_ClockConfig>:
=======
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3720      	adds	r7, #32
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40021000 	.word	0x40021000
 8006c78:	019f800c 	.word	0x019f800c
 8006c7c:	feeefffc 	.word	0xfeeefffc

08006c80 <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059f6:	2300      	movs	r3, #0
 80059f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e11e      	b.n	8005c42 <HAL_RCC_ClockConfig+0x256>
=======
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e11e      	b.n	8006ed6 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8005a04:	4b91      	ldr	r3, [pc, #580]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d910      	bls.n	8005a34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a12:	4b8e      	ldr	r3, [pc, #568]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f023 020f 	bic.w	r2, r3, #15
 8005a1a:	498c      	ldr	r1, [pc, #560]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	600b      	str	r3, [r1, #0]
=======
 8006c98:	4b91      	ldr	r3, [pc, #580]	@ (8006ee0 <HAL_RCC_ClockConfig+0x260>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 030f 	and.w	r3, r3, #15
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d910      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ca6:	4b8e      	ldr	r3, [pc, #568]	@ (8006ee0 <HAL_RCC_ClockConfig+0x260>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f023 020f 	bic.w	r2, r3, #15
 8006cae:	498c      	ldr	r1, [pc, #560]	@ (8006ee0 <HAL_RCC_ClockConfig+0x260>)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8005a22:	4b8a      	ldr	r3, [pc, #552]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d001      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e106      	b.n	8005c42 <HAL_RCC_ClockConfig+0x256>
=======
 8006cb6:	4b8a      	ldr	r3, [pc, #552]	@ (8006ee0 <HAL_RCC_ClockConfig+0x260>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 030f 	and.w	r3, r3, #15
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d001      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e106      	b.n	8006ed6 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d073      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x13c>
=======
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d073      	beq.n	8006dbc <HAL_RCC_ClockConfig+0x13c>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< Updated upstream
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d129      	bne.n	8005a9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a48:	4b81      	ldr	r3, [pc, #516]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0f4      	b.n	8005c42 <HAL_RCC_ClockConfig+0x256>
=======
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d129      	bne.n	8006d30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cdc:	4b81      	ldr	r3, [pc, #516]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e0f4      	b.n	8006ed6 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
<<<<<<< Updated upstream
 8005a58:	f000 f99e 	bl	8005d98 <RCC_GetSysClockFreqFromPLLSource>
 8005a5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	4a7c      	ldr	r2, [pc, #496]	@ (8005c54 <HAL_RCC_ClockConfig+0x268>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d93f      	bls.n	8005ae6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a66:	4b7a      	ldr	r3, [pc, #488]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d009      	beq.n	8005a86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d033      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d12f      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a86:	4b72      	ldr	r3, [pc, #456]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a8e:	4a70      	ldr	r2, [pc, #448]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a96:	2380      	movs	r3, #128	@ 0x80
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e024      	b.n	8005ae6 <HAL_RCC_ClockConfig+0xfa>
=======
 8006cec:	f000 f99e 	bl	800702c <RCC_GetSysClockFreqFromPLLSource>
 8006cf0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	4a7c      	ldr	r2, [pc, #496]	@ (8006ee8 <HAL_RCC_ClockConfig+0x268>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d93f      	bls.n	8006d7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006cfa:	4b7a      	ldr	r3, [pc, #488]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d009      	beq.n	8006d1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d033      	beq.n	8006d7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d12f      	bne.n	8006d7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d1a:	4b72      	ldr	r3, [pc, #456]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d22:	4a70      	ldr	r2, [pc, #448]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006d2a:	2380      	movs	r3, #128	@ 0x80
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	e024      	b.n	8006d7a <HAL_RCC_ClockConfig+0xfa>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d107      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d109      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0c6      	b.n	8005c42 <HAL_RCC_ClockConfig+0x256>
=======
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d107      	bne.n	8006d48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d38:	4b6a      	ldr	r3, [pc, #424]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d109      	bne.n	8006d58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e0c6      	b.n	8006ed6 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< Updated upstream
 8005ab4:	4b66      	ldr	r3, [pc, #408]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e0be      	b.n	8005c42 <HAL_RCC_ClockConfig+0x256>
=======
 8006d48:	4b66      	ldr	r3, [pc, #408]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e0be      	b.n	8006ed6 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
<<<<<<< Updated upstream
 8005ac4:	f000 f8ce 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8005ac8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	4a61      	ldr	r2, [pc, #388]	@ (8005c54 <HAL_RCC_ClockConfig+0x268>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d909      	bls.n	8005ae6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ad2:	4b5f      	ldr	r3, [pc, #380]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ada:	4a5d      	ldr	r2, [pc, #372]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ae2:	2380      	movs	r3, #128	@ 0x80
 8005ae4:	617b      	str	r3, [r7, #20]
=======
 8006d58:	f000 f8ce 	bl	8006ef8 <HAL_RCC_GetSysClockFreq>
 8006d5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	4a61      	ldr	r2, [pc, #388]	@ (8006ee8 <HAL_RCC_ClockConfig+0x268>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d909      	bls.n	8006d7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d66:	4b5f      	ldr	r3, [pc, #380]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d6e:	4a5d      	ldr	r2, [pc, #372]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006d76:	2380      	movs	r3, #128	@ 0x80
 8006d78:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 8005ae6:	4b5a      	ldr	r3, [pc, #360]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f023 0203 	bic.w	r2, r3, #3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4957      	ldr	r1, [pc, #348]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af8:	f7fc ff78 	bl	80029ec <HAL_GetTick>
 8005afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b00:	f7fc ff74 	bl	80029ec <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e095      	b.n	8005c42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b16:	4b4e      	ldr	r3, [pc, #312]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 020c 	and.w	r2, r3, #12
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d1eb      	bne.n	8005b00 <HAL_RCC_ClockConfig+0x114>
=======
 8006d7a:	4b5a      	ldr	r3, [pc, #360]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f023 0203 	bic.w	r2, r3, #3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	4957      	ldr	r1, [pc, #348]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d8c:	f7fc ff78 	bl	8003c80 <HAL_GetTick>
 8006d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d92:	e00a      	b.n	8006daa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d94:	f7fc ff74 	bl	8003c80 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e095      	b.n	8006ed6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006daa:	4b4e      	ldr	r3, [pc, #312]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 020c 	and.w	r2, r3, #12
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d1eb      	bne.n	8006d94 <HAL_RCC_ClockConfig+0x114>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d023      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x190>
=======
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d023      	beq.n	8006e10 <HAL_RCC_ClockConfig+0x190>
>>>>>>> Stashed changes
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b40:	4b43      	ldr	r3, [pc, #268]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	4a42      	ldr	r2, [pc, #264]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b58:	4b3d      	ldr	r3, [pc, #244]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b60:	4a3b      	ldr	r2, [pc, #236]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b66:	6093      	str	r3, [r2, #8]
=======
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d005      	beq.n	8006de0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dd4:	4b43      	ldr	r3, [pc, #268]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	4a42      	ldr	r2, [pc, #264]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006dda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006dde:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d007      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006dec:	4b3d      	ldr	r3, [pc, #244]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006df4:	4a3b      	ldr	r2, [pc, #236]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006df6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006dfa:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8005b68:	4b39      	ldr	r3, [pc, #228]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	4936      	ldr	r1, [pc, #216]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	608b      	str	r3, [r1, #8]
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1a2>
=======
 8006dfc:	4b39      	ldr	r3, [pc, #228]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	4936      	ldr	r1, [pc, #216]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	608b      	str	r3, [r1, #8]
 8006e0e:	e008      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1a2>
>>>>>>> Stashed changes
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
<<<<<<< Updated upstream
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2b80      	cmp	r3, #128	@ 0x80
 8005b80:	d105      	bne.n	8005b8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b82:	4b33      	ldr	r3, [pc, #204]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	4a32      	ldr	r2, [pc, #200]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b8c:	6093      	str	r3, [r2, #8]
=======
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2b80      	cmp	r3, #128	@ 0x80
 8006e14:	d105      	bne.n	8006e22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006e16:	4b33      	ldr	r3, [pc, #204]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	4a32      	ldr	r2, [pc, #200]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006e1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e20:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8005b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d21d      	bcs.n	8005bd8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f023 020f 	bic.w	r2, r3, #15
 8005ba4:	4929      	ldr	r1, [pc, #164]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	600b      	str	r3, [r1, #0]
=======
 8006e22:	4b2f      	ldr	r3, [pc, #188]	@ (8006ee0 <HAL_RCC_ClockConfig+0x260>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 030f 	and.w	r3, r3, #15
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d21d      	bcs.n	8006e6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e30:	4b2b      	ldr	r3, [pc, #172]	@ (8006ee0 <HAL_RCC_ClockConfig+0x260>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f023 020f 	bic.w	r2, r3, #15
 8006e38:	4929      	ldr	r1, [pc, #164]	@ (8006ee0 <HAL_RCC_ClockConfig+0x260>)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8005bac:	f7fc ff1e 	bl	80029ec <HAL_GetTick>
 8005bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb2:	e00a      	b.n	8005bca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb4:	f7fc ff1a 	bl	80029ec <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e03b      	b.n	8005c42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bca:	4b20      	ldr	r3, [pc, #128]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d1ed      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x1c8>
=======
 8006e40:	f7fc ff1e 	bl	8003c80 <HAL_GetTick>
 8006e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e46:	e00a      	b.n	8006e5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e48:	f7fc ff1a 	bl	8003c80 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d901      	bls.n	8006e5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e03b      	b.n	8006ed6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e5e:	4b20      	ldr	r3, [pc, #128]	@ (8006ee0 <HAL_RCC_ClockConfig+0x260>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d1ed      	bne.n	8006e48 <HAL_RCC_ClockConfig+0x1c8>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d008      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005be4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	4917      	ldr	r1, [pc, #92]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	608b      	str	r3, [r1, #8]
=======
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d008      	beq.n	8006e8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e78:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	4917      	ldr	r1, [pc, #92]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c02:	4b13      	ldr	r3, [pc, #76]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	490f      	ldr	r1, [pc, #60]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	608b      	str	r3, [r1, #8]
=======
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d009      	beq.n	8006eaa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e96:	4b13      	ldr	r3, [pc, #76]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	490f      	ldr	r1, [pc, #60]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< Updated upstream
 8005c16:	f000 f825 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	091b      	lsrs	r3, r3, #4
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	490c      	ldr	r1, [pc, #48]	@ (8005c58 <HAL_RCC_ClockConfig+0x26c>)
 8005c28:	5ccb      	ldrb	r3, [r1, r3]
 8005c2a:	f003 031f 	and.w	r3, r3, #31
 8005c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c32:	4a0a      	ldr	r2, [pc, #40]	@ (8005c5c <HAL_RCC_ClockConfig+0x270>)
 8005c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c36:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <HAL_RCC_ClockConfig+0x274>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fc fe8a 	bl	8002954 <HAL_InitTick>
 8005c40:	4603      	mov	r3, r0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	40022000 	.word	0x40022000
 8005c50:	40021000 	.word	0x40021000
 8005c54:	04c4b400 	.word	0x04c4b400
 8005c58:	080096c0 	.word	0x080096c0
 8005c5c:	2000000c 	.word	0x2000000c
 8005c60:	20000010 	.word	0x20000010

08005c64 <HAL_RCC_GetSysClockFreq>:
=======
 8006eaa:	f000 f825 	bl	8006ef8 <HAL_RCC_GetSysClockFreq>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee4 <HAL_RCC_ClockConfig+0x264>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	091b      	lsrs	r3, r3, #4
 8006eb6:	f003 030f 	and.w	r3, r3, #15
 8006eba:	490c      	ldr	r1, [pc, #48]	@ (8006eec <HAL_RCC_ClockConfig+0x26c>)
 8006ebc:	5ccb      	ldrb	r3, [r1, r3]
 8006ebe:	f003 031f 	and.w	r3, r3, #31
 8006ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8006ef0 <HAL_RCC_ClockConfig+0x270>)
 8006ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006eca:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef4 <HAL_RCC_ClockConfig+0x274>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fc fe8a 	bl	8003be8 <HAL_InitTick>
 8006ed4:	4603      	mov	r3, r0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	40022000 	.word	0x40022000
 8006ee4:	40021000 	.word	0x40021000
 8006ee8:	04c4b400 	.word	0x04c4b400
 8006eec:	0800b610 	.word	0x0800b610
 8006ef0:	20000274 	.word	0x20000274
 8006ef4:	20000278 	.word	0x20000278

08006ef8 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
=======
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
<<<<<<< Updated upstream
 8005c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 030c 	and.w	r3, r3, #12
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d102      	bne.n	8005c7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c76:	4b2a      	ldr	r3, [pc, #168]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	e047      	b.n	8005d0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c7c:	4b27      	ldr	r3, [pc, #156]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 030c 	and.w	r3, r3, #12
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d102      	bne.n	8005c8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c88:	4b26      	ldr	r3, [pc, #152]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c8a:	613b      	str	r3, [r7, #16]
 8005c8c:	e03e      	b.n	8005d0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c8e:	4b23      	ldr	r3, [pc, #140]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 030c 	and.w	r3, r3, #12
 8005c96:	2b0c      	cmp	r3, #12
 8005c98:	d136      	bne.n	8005d08 <HAL_RCC_GetSysClockFreq+0xa4>
=======
 8006efe:	4b2c      	ldr	r3, [pc, #176]	@ (8006fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f003 030c 	and.w	r3, r3, #12
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d102      	bne.n	8006f10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8006fb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f0c:	613b      	str	r3, [r7, #16]
 8006f0e:	e047      	b.n	8006fa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006f10:	4b27      	ldr	r3, [pc, #156]	@ (8006fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f003 030c 	and.w	r3, r3, #12
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d102      	bne.n	8006f22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f1c:	4b26      	ldr	r3, [pc, #152]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	e03e      	b.n	8006fa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006f22:	4b23      	ldr	r3, [pc, #140]	@ (8006fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f003 030c 	and.w	r3, r3, #12
 8006f2a:	2b0c      	cmp	r3, #12
 8006f2c:	d136      	bne.n	8006f9c <HAL_RCC_GetSysClockFreq+0xa4>
>>>>>>> Stashed changes
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< Updated upstream
 8005c9a:	4b20      	ldr	r3, [pc, #128]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	091b      	lsrs	r3, r3, #4
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	3301      	adds	r3, #1
 8005cb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d10c      	bne.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc0:	4a16      	ldr	r2, [pc, #88]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cc2:	68d2      	ldr	r2, [r2, #12]
 8005cc4:	0a12      	lsrs	r2, r2, #8
 8005cc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	617b      	str	r3, [r7, #20]
      break;
 8005cd0:	e00c      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x88>
=======
 8006f2e:	4b20      	ldr	r3, [pc, #128]	@ (8006fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f38:	4b1d      	ldr	r3, [pc, #116]	@ (8006fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	091b      	lsrs	r3, r3, #4
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	3301      	adds	r3, #1
 8006f44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d10c      	bne.n	8006f66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f54:	4a16      	ldr	r2, [pc, #88]	@ (8006fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f56:	68d2      	ldr	r2, [r2, #12]
 8006f58:	0a12      	lsrs	r2, r2, #8
 8006f5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f5e:	fb02 f303 	mul.w	r3, r2, r3
 8006f62:	617b      	str	r3, [r7, #20]
      break;
 8006f64:	e00c      	b.n	8006f80 <HAL_RCC_GetSysClockFreq+0x88>
>>>>>>> Stashed changes

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
<<<<<<< Updated upstream
 8005cd2:	4a13      	ldr	r2, [pc, #76]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cda:	4a10      	ldr	r2, [pc, #64]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cdc:	68d2      	ldr	r2, [r2, #12]
 8005cde:	0a12      	lsrs	r2, r2, #8
 8005ce0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ce4:	fb02 f303 	mul.w	r3, r2, r3
 8005ce8:	617b      	str	r3, [r7, #20]
      break;
 8005cea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cec:	4b0b      	ldr	r3, [pc, #44]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	0e5b      	lsrs	r3, r3, #25
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	e001      	b.n	8005d0c <HAL_RCC_GetSysClockFreq+0xa8>
=======
 8006f66:	4a13      	ldr	r2, [pc, #76]	@ (8006fb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6e:	4a10      	ldr	r2, [pc, #64]	@ (8006fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f70:	68d2      	ldr	r2, [r2, #12]
 8006f72:	0a12      	lsrs	r2, r2, #8
 8006f74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f78:	fb02 f303 	mul.w	r3, r2, r3
 8006f7c:	617b      	str	r3, [r7, #20]
      break;
 8006f7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f80:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	0e5b      	lsrs	r3, r3, #25
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f98:	613b      	str	r3, [r7, #16]
 8006f9a:	e001      	b.n	8006fa0 <HAL_RCC_GetSysClockFreq+0xa8>
>>>>>>> Stashed changes
  }
  else
  {
    sysclockfreq = 0U;
<<<<<<< Updated upstream
 8005d08:	2300      	movs	r3, #0
 8005d0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005d0c:	693b      	ldr	r3, [r7, #16]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40021000 	.word	0x40021000
 8005d20:	00f42400 	.word	0x00f42400
 8005d24:	016e3600 	.word	0x016e3600

08005d28 <HAL_RCC_GetHCLKFreq>:
=======
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006fa0:	693b      	ldr	r3, [r7, #16]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	00f42400 	.word	0x00f42400
 8006fb8:	016e3600 	.word	0x016e3600

08006fbc <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d2c:	4b03      	ldr	r3, [pc, #12]	@ (8005d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	2000000c 	.word	0x2000000c

08005d40 <HAL_RCC_GetPCLK1Freq>:
=======
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fc0:	4b03      	ldr	r3, [pc, #12]	@ (8006fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	20000274 	.word	0x20000274

08006fd4 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d44:	f7ff fff0 	bl	8005d28 <HAL_RCC_GetHCLKFreq>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	4b06      	ldr	r3, [pc, #24]	@ (8005d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	0a1b      	lsrs	r3, r3, #8
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	4904      	ldr	r1, [pc, #16]	@ (8005d68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d56:	5ccb      	ldrb	r3, [r1, r3]
 8005d58:	f003 031f 	and.w	r3, r3, #31
 8005d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40021000 	.word	0x40021000
 8005d68:	080096d0 	.word	0x080096d0

08005d6c <HAL_RCC_GetPCLK2Freq>:
=======
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006fd8:	f7ff fff0 	bl	8006fbc <HAL_RCC_GetHCLKFreq>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	4b06      	ldr	r3, [pc, #24]	@ (8006ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	0a1b      	lsrs	r3, r3, #8
 8006fe4:	f003 0307 	and.w	r3, r3, #7
 8006fe8:	4904      	ldr	r1, [pc, #16]	@ (8006ffc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006fea:	5ccb      	ldrb	r3, [r1, r3]
 8006fec:	f003 031f 	and.w	r3, r3, #31
 8006ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	40021000 	.word	0x40021000
 8006ffc:	0800b620 	.word	0x0800b620

08007000 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d70:	f7ff ffda 	bl	8005d28 <HAL_RCC_GetHCLKFreq>
 8005d74:	4602      	mov	r2, r0
 8005d76:	4b06      	ldr	r3, [pc, #24]	@ (8005d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	0adb      	lsrs	r3, r3, #11
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	4904      	ldr	r1, [pc, #16]	@ (8005d94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d82:	5ccb      	ldrb	r3, [r1, r3]
 8005d84:	f003 031f 	and.w	r3, r3, #31
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40021000 	.word	0x40021000
 8005d94:	080096d0 	.word	0x080096d0

08005d98 <RCC_GetSysClockFreqFromPLLSource>:
=======
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007004:	f7ff ffda 	bl	8006fbc <HAL_RCC_GetHCLKFreq>
 8007008:	4602      	mov	r2, r0
 800700a:	4b06      	ldr	r3, [pc, #24]	@ (8007024 <HAL_RCC_GetPCLK2Freq+0x24>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	0adb      	lsrs	r3, r3, #11
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	4904      	ldr	r1, [pc, #16]	@ (8007028 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007016:	5ccb      	ldrb	r3, [r1, r3]
 8007018:	f003 031f 	and.w	r3, r3, #31
 800701c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007020:	4618      	mov	r0, r3
 8007022:	bd80      	pop	{r7, pc}
 8007024:	40021000 	.word	0x40021000
 8007028:	0800b620 	.word	0x0800b620

0800702c <RCC_GetSysClockFreqFromPLLSource>:
>>>>>>> Stashed changes
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
<<<<<<< Updated upstream
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
=======
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< Updated upstream
 8005d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005e18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005da8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	091b      	lsrs	r3, r3, #4
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d10c      	bne.n	8005dd6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dbc:	4a17      	ldr	r2, [pc, #92]	@ (8005e1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	4a14      	ldr	r2, [pc, #80]	@ (8005e18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dc6:	68d2      	ldr	r2, [r2, #12]
 8005dc8:	0a12      	lsrs	r2, r2, #8
 8005dca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005dce:	fb02 f303 	mul.w	r3, r2, r3
 8005dd2:	617b      	str	r3, [r7, #20]
    break;
 8005dd4:	e00c      	b.n	8005df0 <RCC_GetSysClockFreqFromPLLSource+0x58>
=======
 8007032:	4b1e      	ldr	r3, [pc, #120]	@ (80070ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800703c:	4b1b      	ldr	r3, [pc, #108]	@ (80070ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	091b      	lsrs	r3, r3, #4
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	3301      	adds	r3, #1
 8007048:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b03      	cmp	r3, #3
 800704e:	d10c      	bne.n	800706a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007050:	4a17      	ldr	r2, [pc, #92]	@ (80070b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	fbb2 f3f3 	udiv	r3, r2, r3
 8007058:	4a14      	ldr	r2, [pc, #80]	@ (80070ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800705a:	68d2      	ldr	r2, [r2, #12]
 800705c:	0a12      	lsrs	r2, r2, #8
 800705e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007062:	fb02 f303 	mul.w	r3, r2, r3
 8007066:	617b      	str	r3, [r7, #20]
    break;
 8007068:	e00c      	b.n	8007084 <RCC_GetSysClockFreqFromPLLSource+0x58>
>>>>>>> Stashed changes

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
<<<<<<< Updated upstream
 8005dd6:	4a12      	ldr	r2, [pc, #72]	@ (8005e20 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dde:	4a0e      	ldr	r2, [pc, #56]	@ (8005e18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005de0:	68d2      	ldr	r2, [r2, #12]
 8005de2:	0a12      	lsrs	r2, r2, #8
 8005de4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005de8:	fb02 f303 	mul.w	r3, r2, r3
 8005dec:	617b      	str	r3, [r7, #20]
    break;
 8005dee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005df0:	4b09      	ldr	r3, [pc, #36]	@ (8005e18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	0e5b      	lsrs	r3, r3, #25
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005e0a:	687b      	ldr	r3, [r7, #4]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	016e3600 	.word	0x016e3600
 8005e20:	00f42400 	.word	0x00f42400

08005e24 <HAL_RCCEx_PeriphCLKConfig>:
=======
 800706a:	4a12      	ldr	r2, [pc, #72]	@ (80070b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007072:	4a0e      	ldr	r2, [pc, #56]	@ (80070ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007074:	68d2      	ldr	r2, [r2, #12]
 8007076:	0a12      	lsrs	r2, r2, #8
 8007078:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800707c:	fb02 f303 	mul.w	r3, r2, r3
 8007080:	617b      	str	r3, [r7, #20]
    break;
 8007082:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007084:	4b09      	ldr	r3, [pc, #36]	@ (80070ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	0e5b      	lsrs	r3, r3, #25
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	3301      	adds	r3, #1
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	fbb2 f3f3 	udiv	r3, r2, r3
 800709c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800709e:	687b      	ldr	r3, [r7, #4]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	371c      	adds	r7, #28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	40021000 	.word	0x40021000
 80070b0:	016e3600 	.word	0x016e3600
 80070b4:	00f42400 	.word	0x00f42400

080070b8 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< Updated upstream
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e30:	2300      	movs	r3, #0
 8005e32:	74bb      	strb	r3, [r7, #18]
=======
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070c0:	2300      	movs	r3, #0
 80070c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070c4:	2300      	movs	r3, #0
 80070c6:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< Updated upstream
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8098 	beq.w	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e42:	2300      	movs	r3, #0
 8005e44:	747b      	strb	r3, [r7, #17]
=======
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8098 	beq.w	8007206 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070d6:	2300      	movs	r3, #0
 80070d8:	747b      	strb	r3, [r7, #17]
>>>>>>> Stashed changes
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 8005e46:	4b43      	ldr	r3, [pc, #268]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10d      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e52:	4b40      	ldr	r3, [pc, #256]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e56:	4a3f      	ldr	r2, [pc, #252]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e66:	60bb      	str	r3, [r7, #8]
 8005e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	747b      	strb	r3, [r7, #17]
=======
 80070da:	4b43      	ldr	r3, [pc, #268]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10d      	bne.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070e6:	4b40      	ldr	r3, [pc, #256]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ea:	4a3f      	ldr	r2, [pc, #252]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80070f2:	4b3d      	ldr	r3, [pc, #244]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070fa:	60bb      	str	r3, [r7, #8]
 80070fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070fe:	2301      	movs	r3, #1
 8007100:	747b      	strb	r3, [r7, #17]
>>>>>>> Stashed changes
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< Updated upstream
 8005e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a39      	ldr	r2, [pc, #228]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e7a:	f7fc fdb7 	bl	80029ec <HAL_GetTick>
 8005e7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e80:	e009      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e82:	f7fc fdb3 	bl	80029ec <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d902      	bls.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	74fb      	strb	r3, [r7, #19]
        break;
 8005e94:	e005      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e96:	4b30      	ldr	r3, [pc, #192]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0ef      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
=======
 8007102:	4b3a      	ldr	r3, [pc, #232]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a39      	ldr	r2, [pc, #228]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800710c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800710e:	f7fc fdb7 	bl	8003c80 <HAL_GetTick>
 8007112:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007114:	e009      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007116:	f7fc fdb3 	bl	8003c80 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	2b02      	cmp	r3, #2
 8007122:	d902      	bls.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	74fb      	strb	r3, [r7, #19]
        break;
 8007128:	e005      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800712a:	4b30      	ldr	r3, [pc, #192]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0ef      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x5e>
>>>>>>> Stashed changes
      }
    }

    if(ret == HAL_OK)
<<<<<<< Updated upstream
 8005ea2:	7cfb      	ldrb	r3, [r7, #19]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d159      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eb2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d01e      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d019      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ec4:	4b23      	ldr	r3, [pc, #140]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ece:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ed0:	4b20      	ldr	r3, [pc, #128]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ee8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ef0:	4a18      	ldr	r2, [pc, #96]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
=======
 8007136:	7cfb      	ldrb	r3, [r7, #19]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d159      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800713c:	4b2a      	ldr	r3, [pc, #168]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800713e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007146:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d01e      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	429a      	cmp	r2, r3
 8007156:	d019      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007158:	4b23      	ldr	r3, [pc, #140]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800715a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800715e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007162:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007164:	4b20      	ldr	r3, [pc, #128]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800716a:	4a1f      	ldr	r2, [pc, #124]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800716c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007174:	4b1c      	ldr	r3, [pc, #112]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800717a:	4a1b      	ldr	r2, [pc, #108]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800717c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007184:	4a18      	ldr	r2, [pc, #96]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
>>>>>>> Stashed changes
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< Updated upstream
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d016      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f02:	f7fc fd73 	bl	80029ec <HAL_GetTick>
 8005f06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f08:	e00b      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f0a:	f7fc fd6f 	bl	80029ec <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d902      	bls.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	74fb      	strb	r3, [r7, #19]
            break;
 8005f20:	e006      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f22:	4b0c      	ldr	r3, [pc, #48]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0ec      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
=======
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d016      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007196:	f7fc fd73 	bl	8003c80 <HAL_GetTick>
 800719a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800719c:	e00b      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800719e:	f7fc fd6f 	bl	8003c80 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d902      	bls.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	74fb      	strb	r3, [r7, #19]
            break;
 80071b4:	e006      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071b6:	4b0c      	ldr	r3, [pc, #48]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071bc:	f003 0302 	and.w	r3, r3, #2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d0ec      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xe6>
>>>>>>> Stashed changes
          }
        }
      }
      
      if(ret == HAL_OK)
<<<<<<< Updated upstream
 8005f30:	7cfb      	ldrb	r3, [r7, #19]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10b      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f36:	4b07      	ldr	r3, [pc, #28]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f44:	4903      	ldr	r1, [pc, #12]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005f4c:	e008      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
=======
 80071c4:	7cfb      	ldrb	r3, [r7, #19]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10b      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071ca:	4b07      	ldr	r3, [pc, #28]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071d8:	4903      	ldr	r1, [pc, #12]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80071e0:	e008      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
>>>>>>> Stashed changes
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< Updated upstream
 8005f4e:	7cfb      	ldrb	r3, [r7, #19]
 8005f50:	74bb      	strb	r3, [r7, #18]
 8005f52:	e005      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005f54:	40021000 	.word	0x40021000
 8005f58:	40007000 	.word	0x40007000
=======
 80071e2:	7cfb      	ldrb	r3, [r7, #19]
 80071e4:	74bb      	strb	r3, [r7, #18]
 80071e6:	e005      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80071e8:	40021000 	.word	0x40021000
 80071ec:	40007000 	.word	0x40007000
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8005f5c:	7cfb      	ldrb	r3, [r7, #19]
 8005f5e:	74bb      	strb	r3, [r7, #18]
=======
 80071f0:	7cfb      	ldrb	r3, [r7, #19]
 80071f2:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 8005f60:	7c7b      	ldrb	r3, [r7, #17]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d105      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f66:	4ba7      	ldr	r3, [pc, #668]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6a:	4aa6      	ldr	r2, [pc, #664]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f70:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 80071f4:	7c7b      	ldrb	r3, [r7, #17]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d105      	bne.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071fa:	4ba7      	ldr	r3, [pc, #668]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071fe:	4aa6      	ldr	r2, [pc, #664]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007200:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007204:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< Updated upstream
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x170>
=======
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x170>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< Updated upstream
 8005f7e:	4ba1      	ldr	r3, [pc, #644]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f84:	f023 0203 	bic.w	r2, r3, #3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	499d      	ldr	r1, [pc, #628]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8007212:	4ba1      	ldr	r3, [pc, #644]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007218:	f023 0203 	bic.w	r2, r3, #3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	499d      	ldr	r1, [pc, #628]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007222:	4313      	orrs	r3, r2
 8007224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< Updated upstream
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00a      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
=======
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x192>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< Updated upstream
 8005fa0:	4b98      	ldr	r3, [pc, #608]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa6:	f023 020c 	bic.w	r2, r3, #12
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	4995      	ldr	r1, [pc, #596]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8007234:	4b98      	ldr	r3, [pc, #608]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800723a:	f023 020c 	bic.w	r2, r3, #12
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	4995      	ldr	r1, [pc, #596]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007244:	4313      	orrs	r3, r2
 8007246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< Updated upstream
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
=======
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0304 	and.w	r3, r3, #4
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< Updated upstream
 8005fc2:	4b90      	ldr	r3, [pc, #576]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	498c      	ldr	r1, [pc, #560]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8007256:	4b90      	ldr	r3, [pc, #576]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	498c      	ldr	r1, [pc, #560]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007266:	4313      	orrs	r3, r2
 8007268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< Updated upstream
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00a      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
=======
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0308 	and.w	r3, r3, #8
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00a      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< Updated upstream
 8005fe4:	4b87      	ldr	r3, [pc, #540]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	4984      	ldr	r1, [pc, #528]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8007278:	4b87      	ldr	r3, [pc, #540]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800727a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800727e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	4984      	ldr	r1, [pc, #528]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007288:	4313      	orrs	r3, r2
 800728a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< Updated upstream
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
=======
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0310 	and.w	r3, r3, #16
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< Updated upstream
 8006006:	4b7f      	ldr	r3, [pc, #508]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	497b      	ldr	r1, [pc, #492]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006016:	4313      	orrs	r3, r2
 8006018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800729a:	4b7f      	ldr	r3, [pc, #508]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800729c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	497b      	ldr	r1, [pc, #492]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< Updated upstream
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00a      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x21a>
=======
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0320 	and.w	r3, r3, #32
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00a      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< Updated upstream
 8006028:	4b76      	ldr	r3, [pc, #472]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	4973      	ldr	r1, [pc, #460]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80072bc:	4b76      	ldr	r3, [pc, #472]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	4973      	ldr	r1, [pc, #460]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< Updated upstream
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x23c>
=======
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< Updated upstream
 800604a:	4b6e      	ldr	r3, [pc, #440]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006050:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	496a      	ldr	r1, [pc, #424]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605a:	4313      	orrs	r3, r2
 800605c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80072de:	4b6e      	ldr	r3, [pc, #440]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	496a      	ldr	r1, [pc, #424]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< Updated upstream
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x25e>
=======
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00a      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x25e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< Updated upstream
 800606c:	4b65      	ldr	r3, [pc, #404]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006072:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	4962      	ldr	r1, [pc, #392]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800607c:	4313      	orrs	r3, r2
 800607e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8007300:	4b65      	ldr	r3, [pc, #404]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007306:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	4962      	ldr	r1, [pc, #392]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007310:	4313      	orrs	r3, r2
 8007312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< Updated upstream
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
=======
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x280>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< Updated upstream
 800608e:	4b5d      	ldr	r3, [pc, #372]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006094:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609c:	4959      	ldr	r1, [pc, #356]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8007322:	4b5d      	ldr	r3, [pc, #372]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007328:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007330:	4959      	ldr	r1, [pc, #356]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007332:	4313      	orrs	r3, r2
 8007334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< Updated upstream
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
=======
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00a      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< Updated upstream
 80060b0:	4b54      	ldr	r3, [pc, #336]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060b6:	f023 0203 	bic.w	r2, r3, #3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060be:	4951      	ldr	r1, [pc, #324]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
=======
 8007344:	4b54      	ldr	r3, [pc, #336]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007346:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800734a:	f023 0203 	bic.w	r2, r3, #3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007352:	4951      	ldr	r1, [pc, #324]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007354:	4313      	orrs	r3, r2
 8007356:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
>>>>>>> Stashed changes
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
<<<<<<< Updated upstream
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
=======
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00a      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
<<<<<<< Updated upstream
 80060d2:	4b4c      	ldr	r3, [pc, #304]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e0:	4948      	ldr	r1, [pc, #288]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8007366:	4b4c      	ldr	r3, [pc, #304]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800736c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007374:	4948      	ldr	r1, [pc, #288]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007376:	4313      	orrs	r3, r2
 8007378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
<<<<<<< Updated upstream
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d015      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
=======
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007384:	2b00      	cmp	r3, #0
 8007386:	d015      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
<<<<<<< Updated upstream
 80060f4:	4b43      	ldr	r3, [pc, #268]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006102:	4940      	ldr	r1, [pc, #256]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006112:	d105      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006114:	4b3b      	ldr	r3, [pc, #236]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4a3a      	ldr	r2, [pc, #232]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800611a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800611e:	60d3      	str	r3, [r2, #12]
=======
 8007388:	4b43      	ldr	r3, [pc, #268]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800738a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007396:	4940      	ldr	r1, [pc, #256]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007398:	4313      	orrs	r3, r2
 800739a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073a6:	d105      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073a8:	4b3b      	ldr	r3, [pc, #236]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	4a3a      	ldr	r2, [pc, #232]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073b2:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
<<<<<<< Updated upstream
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006128:	2b00      	cmp	r3, #0
 800612a:	d015      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x334>
=======
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d015      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x334>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
<<<<<<< Updated upstream
 800612c:	4b35      	ldr	r3, [pc, #212]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006132:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613a:	4932      	ldr	r1, [pc, #200]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006146:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800614a:	d105      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800614c:	4b2d      	ldr	r3, [pc, #180]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	4a2c      	ldr	r2, [pc, #176]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006152:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006156:	60d3      	str	r3, [r2, #12]
=======
 80073c0:	4b35      	ldr	r3, [pc, #212]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ce:	4932      	ldr	r1, [pc, #200]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073de:	d105      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073e0:	4b2d      	ldr	r3, [pc, #180]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	4a2c      	ldr	r2, [pc, #176]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073ea:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
<<<<<<< Updated upstream
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d015      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x36c>
=======
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d015      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x36c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
<<<<<<< Updated upstream
 8006164:	4b27      	ldr	r3, [pc, #156]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800616a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006172:	4924      	ldr	r1, [pc, #144]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006182:	d105      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006184:	4b1f      	ldr	r3, [pc, #124]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	4a1e      	ldr	r2, [pc, #120]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800618a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800618e:	60d3      	str	r3, [r2, #12]
=======
 80073f8:	4b27      	ldr	r3, [pc, #156]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007406:	4924      	ldr	r1, [pc, #144]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007408:	4313      	orrs	r3, r2
 800740a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007412:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007416:	d105      	bne.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007418:	4b1f      	ldr	r3, [pc, #124]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	4a1e      	ldr	r2, [pc, #120]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800741e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007422:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< Updated upstream
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d015      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800619c:	4b19      	ldr	r3, [pc, #100]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800619e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061aa:	4916      	ldr	r1, [pc, #88]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061ba:	d105      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061bc:	4b11      	ldr	r3, [pc, #68]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	4a10      	ldr	r2, [pc, #64]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061c6:	60d3      	str	r3, [r2, #12]
=======
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d015      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007430:	4b19      	ldr	r3, [pc, #100]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007436:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800743e:	4916      	ldr	r1, [pc, #88]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007440:	4313      	orrs	r3, r2
 8007442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800744a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800744e:	d105      	bne.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007450:	4b11      	ldr	r3, [pc, #68]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	4a10      	ldr	r2, [pc, #64]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800745a:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< Updated upstream
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d019      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e2:	4908      	ldr	r1, [pc, #32]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061f2:	d109      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061f4:	4b03      	ldr	r3, [pc, #12]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	4a02      	ldr	r2, [pc, #8]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061fe:	60d3      	str	r3, [r2, #12]
 8006200:	e002      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006202:	bf00      	nop
 8006204:	40021000 	.word	0x40021000
=======
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d019      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007468:	4b0b      	ldr	r3, [pc, #44]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800746a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800746e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007476:	4908      	ldr	r1, [pc, #32]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007478:	4313      	orrs	r3, r2
 800747a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007486:	d109      	bne.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007488:	4b03      	ldr	r3, [pc, #12]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	4a02      	ldr	r2, [pc, #8]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800748e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007492:	60d3      	str	r3, [r2, #12]
 8007494:	e002      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007496:	bf00      	nop
 8007498:	40021000 	.word	0x40021000
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
<<<<<<< Updated upstream
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d015      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x41c>
=======
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d015      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
<<<<<<< Updated upstream
 8006214:	4b29      	ldr	r3, [pc, #164]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006222:	4926      	ldr	r1, [pc, #152]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006224:	4313      	orrs	r3, r2
 8006226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006232:	d105      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006234:	4b21      	ldr	r3, [pc, #132]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	4a20      	ldr	r2, [pc, #128]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800623a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800623e:	60d3      	str	r3, [r2, #12]
=======
 80074a8:	4b29      	ldr	r3, [pc, #164]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074b6:	4926      	ldr	r1, [pc, #152]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074c6:	d105      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80074c8:	4b21      	ldr	r3, [pc, #132]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	4a20      	ldr	r2, [pc, #128]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074d2:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
<<<<<<< Updated upstream
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d015      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x454>
=======
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d015      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x454>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
<<<<<<< Updated upstream
 800624c:	4b1b      	ldr	r3, [pc, #108]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006252:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800625a:	4918      	ldr	r1, [pc, #96]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800625c:	4313      	orrs	r3, r2
 800625e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626a:	d105      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800626c:	4b13      	ldr	r3, [pc, #76]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	4a12      	ldr	r2, [pc, #72]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006276:	60d3      	str	r3, [r2, #12]
=======
 80074e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074ee:	4918      	ldr	r1, [pc, #96]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074fe:	d105      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007500:	4b13      	ldr	r3, [pc, #76]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	4a12      	ldr	r2, [pc, #72]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800750a:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
<<<<<<< Updated upstream
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d015      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
=======
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d015      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x48c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
<<<<<<< Updated upstream
 8006284:	4b0d      	ldr	r3, [pc, #52]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006286:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800628a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006292:	490a      	ldr	r1, [pc, #40]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800629e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062a2:	d105      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062a4:	4b05      	ldr	r3, [pc, #20]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	4a04      	ldr	r2, [pc, #16]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ae:	60d3      	str	r3, [r2, #12]
=======
 8007518:	4b0d      	ldr	r3, [pc, #52]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800751a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800751e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007526:	490a      	ldr	r1, [pc, #40]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007528:	4313      	orrs	r3, r2
 800752a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007532:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007536:	d105      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007538:	4b05      	ldr	r3, [pc, #20]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	4a04      	ldr	r2, [pc, #16]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800753e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007542:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }
  }

#endif /* QUADSPI */

  return status;
<<<<<<< Updated upstream
 80062b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40021000 	.word	0x40021000

080062c0 <HAL_TIM_Base_Init>:
=======
 8007544:	7cbb      	ldrb	r3, [r7, #18]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	40021000 	.word	0x40021000

08007554 <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e054      	b.n	800637c <HAL_TIM_Base_Init+0xbc>
=======
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e054      	b.n	8007610 <HAL_TIM_Base_Init+0xbc>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d111      	bne.n	8006302 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d111      	bne.n	8007596 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
<<<<<<< Updated upstream
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 fcfe 	bl	8007ce8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a23      	ldr	r2, [pc, #140]	@ (8006384 <HAL_TIM_Base_Init+0xc4>)
 80062f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
=======
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 feec 	bl	8009358 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a23      	ldr	r2, [pc, #140]	@ (8007618 <HAL_TIM_Base_Init+0xc4>)
 800758c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	4798      	blx	r3
>>>>>>> Stashed changes
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2202      	movs	r2, #2
 8006306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3304      	adds	r3, #4
 8006312:	4619      	mov	r1, r3
 8006314:	4610      	mov	r0, r2
 8006316:	f001 f847 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	08002449 	.word	0x08002449

08006388 <HAL_TIM_Base_Start>:
=======
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2202      	movs	r2, #2
 800759a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	3304      	adds	r3, #4
 80075a6:	4619      	mov	r1, r3
 80075a8:	4610      	mov	r0, r2
 80075aa:	f001 fa35 	bl	8008a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	08003691 	.word	0x08003691

0800761c <HAL_TIM_Base_Start>:
>>>>>>> Stashed changes
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
=======
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< Updated upstream
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b01      	cmp	r3, #1
 800639a:	d001      	beq.n	80063a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e04c      	b.n	800643a <HAL_TIM_Base_Start+0xb2>
=======
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b01      	cmp	r3, #1
 800762e:	d001      	beq.n	8007634 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e04c      	b.n	80076ce <HAL_TIM_Base_Start+0xb2>
>>>>>>> Stashed changes
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a26      	ldr	r2, [pc, #152]	@ (8006448 <HAL_TIM_Base_Start+0xc0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d022      	beq.n	80063f8 <HAL_TIM_Base_Start+0x70>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ba:	d01d      	beq.n	80063f8 <HAL_TIM_Base_Start+0x70>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a22      	ldr	r2, [pc, #136]	@ (800644c <HAL_TIM_Base_Start+0xc4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d018      	beq.n	80063f8 <HAL_TIM_Base_Start+0x70>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a21      	ldr	r2, [pc, #132]	@ (8006450 <HAL_TIM_Base_Start+0xc8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d013      	beq.n	80063f8 <HAL_TIM_Base_Start+0x70>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006454 <HAL_TIM_Base_Start+0xcc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00e      	beq.n	80063f8 <HAL_TIM_Base_Start+0x70>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a1e      	ldr	r2, [pc, #120]	@ (8006458 <HAL_TIM_Base_Start+0xd0>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d009      	beq.n	80063f8 <HAL_TIM_Base_Start+0x70>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a1c      	ldr	r2, [pc, #112]	@ (800645c <HAL_TIM_Base_Start+0xd4>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d004      	beq.n	80063f8 <HAL_TIM_Base_Start+0x70>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006460 <HAL_TIM_Base_Start+0xd8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d115      	bne.n	8006424 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	4b19      	ldr	r3, [pc, #100]	@ (8006464 <HAL_TIM_Base_Start+0xdc>)
 8006400:	4013      	ands	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b06      	cmp	r3, #6
 8006408:	d015      	beq.n	8006436 <HAL_TIM_Base_Start+0xae>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006410:	d011      	beq.n	8006436 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f042 0201 	orr.w	r2, r2, #1
 8006420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006422:	e008      	b.n	8006436 <HAL_TIM_Base_Start+0xae>
=======
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a26      	ldr	r2, [pc, #152]	@ (80076dc <HAL_TIM_Base_Start+0xc0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d022      	beq.n	800768c <HAL_TIM_Base_Start+0x70>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800764e:	d01d      	beq.n	800768c <HAL_TIM_Base_Start+0x70>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a22      	ldr	r2, [pc, #136]	@ (80076e0 <HAL_TIM_Base_Start+0xc4>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d018      	beq.n	800768c <HAL_TIM_Base_Start+0x70>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a21      	ldr	r2, [pc, #132]	@ (80076e4 <HAL_TIM_Base_Start+0xc8>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d013      	beq.n	800768c <HAL_TIM_Base_Start+0x70>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a1f      	ldr	r2, [pc, #124]	@ (80076e8 <HAL_TIM_Base_Start+0xcc>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d00e      	beq.n	800768c <HAL_TIM_Base_Start+0x70>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a1e      	ldr	r2, [pc, #120]	@ (80076ec <HAL_TIM_Base_Start+0xd0>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d009      	beq.n	800768c <HAL_TIM_Base_Start+0x70>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a1c      	ldr	r2, [pc, #112]	@ (80076f0 <HAL_TIM_Base_Start+0xd4>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d004      	beq.n	800768c <HAL_TIM_Base_Start+0x70>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a1b      	ldr	r2, [pc, #108]	@ (80076f4 <HAL_TIM_Base_Start+0xd8>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d115      	bne.n	80076b8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689a      	ldr	r2, [r3, #8]
 8007692:	4b19      	ldr	r3, [pc, #100]	@ (80076f8 <HAL_TIM_Base_Start+0xdc>)
 8007694:	4013      	ands	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b06      	cmp	r3, #6
 800769c:	d015      	beq.n	80076ca <HAL_TIM_Base_Start+0xae>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076a4:	d011      	beq.n	80076ca <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f042 0201 	orr.w	r2, r2, #1
 80076b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b6:	e008      	b.n	80076ca <HAL_TIM_Base_Start+0xae>
>>>>>>> Stashed changes
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	e000      	b.n	8006438 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006436:	bf00      	nop
=======
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0201 	orr.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	e000      	b.n	80076cc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ca:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40012c00 	.word	0x40012c00
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00
 8006458:	40013400 	.word	0x40013400
 800645c:	40014000 	.word	0x40014000
 8006460:	40015000 	.word	0x40015000
 8006464:	00010007 	.word	0x00010007

08006468 <HAL_TIM_Base_Start_IT>:
=======
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	40012c00 	.word	0x40012c00
 80076e0:	40000400 	.word	0x40000400
 80076e4:	40000800 	.word	0x40000800
 80076e8:	40000c00 	.word	0x40000c00
 80076ec:	40013400 	.word	0x40013400
 80076f0:	40014000 	.word	0x40014000
 80076f4:	40015000 	.word	0x40015000
 80076f8:	00010007 	.word	0x00010007

080076fc <HAL_TIM_Base_Start_IT>:
>>>>>>> Stashed changes
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
=======
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< Updated upstream
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b01      	cmp	r3, #1
 800647a:	d001      	beq.n	8006480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e054      	b.n	800652a <HAL_TIM_Base_Start_IT+0xc2>
=======
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b01      	cmp	r3, #1
 800770e:	d001      	beq.n	8007714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e054      	b.n	80077be <HAL_TIM_Base_Start_IT+0xc2>
>>>>>>> Stashed changes
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a26      	ldr	r2, [pc, #152]	@ (8006538 <HAL_TIM_Base_Start_IT+0xd0>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d022      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064aa:	d01d      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a22      	ldr	r2, [pc, #136]	@ (800653c <HAL_TIM_Base_Start_IT+0xd4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d018      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a21      	ldr	r2, [pc, #132]	@ (8006540 <HAL_TIM_Base_Start_IT+0xd8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d013      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006544 <HAL_TIM_Base_Start_IT+0xdc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00e      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006548 <HAL_TIM_Base_Start_IT+0xe0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d009      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1c      	ldr	r2, [pc, #112]	@ (800654c <HAL_TIM_Base_Start_IT+0xe4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d004      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006550 <HAL_TIM_Base_Start_IT+0xe8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d115      	bne.n	8006514 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689a      	ldr	r2, [r3, #8]
 80064ee:	4b19      	ldr	r3, [pc, #100]	@ (8006554 <HAL_TIM_Base_Start_IT+0xec>)
 80064f0:	4013      	ands	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b06      	cmp	r3, #6
 80064f8:	d015      	beq.n	8006526 <HAL_TIM_Base_Start_IT+0xbe>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006500:	d011      	beq.n	8006526 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0201 	orr.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006512:	e008      	b.n	8006526 <HAL_TIM_Base_Start_IT+0xbe>
=======
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f042 0201 	orr.w	r2, r2, #1
 800772a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a26      	ldr	r2, [pc, #152]	@ (80077cc <HAL_TIM_Base_Start_IT+0xd0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d022      	beq.n	800777c <HAL_TIM_Base_Start_IT+0x80>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800773e:	d01d      	beq.n	800777c <HAL_TIM_Base_Start_IT+0x80>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a22      	ldr	r2, [pc, #136]	@ (80077d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d018      	beq.n	800777c <HAL_TIM_Base_Start_IT+0x80>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a21      	ldr	r2, [pc, #132]	@ (80077d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d013      	beq.n	800777c <HAL_TIM_Base_Start_IT+0x80>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a1f      	ldr	r2, [pc, #124]	@ (80077d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d00e      	beq.n	800777c <HAL_TIM_Base_Start_IT+0x80>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a1e      	ldr	r2, [pc, #120]	@ (80077dc <HAL_TIM_Base_Start_IT+0xe0>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d009      	beq.n	800777c <HAL_TIM_Base_Start_IT+0x80>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a1c      	ldr	r2, [pc, #112]	@ (80077e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d004      	beq.n	800777c <HAL_TIM_Base_Start_IT+0x80>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a1b      	ldr	r2, [pc, #108]	@ (80077e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d115      	bne.n	80077a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689a      	ldr	r2, [r3, #8]
 8007782:	4b19      	ldr	r3, [pc, #100]	@ (80077e8 <HAL_TIM_Base_Start_IT+0xec>)
 8007784:	4013      	ands	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b06      	cmp	r3, #6
 800778c:	d015      	beq.n	80077ba <HAL_TIM_Base_Start_IT+0xbe>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007794:	d011      	beq.n	80077ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0201 	orr.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a6:	e008      	b.n	80077ba <HAL_TIM_Base_Start_IT+0xbe>
>>>>>>> Stashed changes
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	e000      	b.n	8006528 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006526:	bf00      	nop
=======
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0201 	orr.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]
 80077b8:	e000      	b.n	80077bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ba:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40012c00 	.word	0x40012c00
 800653c:	40000400 	.word	0x40000400
 8006540:	40000800 	.word	0x40000800
 8006544:	40000c00 	.word	0x40000c00
 8006548:	40013400 	.word	0x40013400
 800654c:	40014000 	.word	0x40014000
 8006550:	40015000 	.word	0x40015000
 8006554:	00010007 	.word	0x00010007

08006558 <HAL_TIM_PWM_Init>:
=======
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40012c00 	.word	0x40012c00
 80077d0:	40000400 	.word	0x40000400
 80077d4:	40000800 	.word	0x40000800
 80077d8:	40000c00 	.word	0x40000c00
 80077dc:	40013400 	.word	0x40013400
 80077e0:	40014000 	.word	0x40014000
 80077e4:	40015000 	.word	0x40015000
 80077e8:	00010007 	.word	0x00010007

080077ec <HAL_TIM_PWM_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e054      	b.n	8006614 <HAL_TIM_PWM_Init+0xbc>
=======
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e054      	b.n	80078a8 <HAL_TIM_PWM_Init+0xbc>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d111      	bne.n	800659a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d111      	bne.n	800782e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
<<<<<<< Updated upstream
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f001 fbb2 	bl	8007ce8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006588:	2b00      	cmp	r3, #0
 800658a:	d102      	bne.n	8006592 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a23      	ldr	r2, [pc, #140]	@ (800661c <HAL_TIM_PWM_Init+0xc4>)
 8006590:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
=======
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f001 fda0 	bl	8009358 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800781c:	2b00      	cmp	r3, #0
 800781e:	d102      	bne.n	8007826 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a23      	ldr	r2, [pc, #140]	@ (80078b0 <HAL_TIM_PWM_Init+0xc4>)
 8007824:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
>>>>>>> Stashed changes
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2202      	movs	r2, #2
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3304      	adds	r3, #4
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f000 fefb 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	08006621 	.word	0x08006621

08006620 <HAL_TIM_PWM_MspInit>:
=======
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2202      	movs	r2, #2
 8007832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3304      	adds	r3, #4
 800783e:	4619      	mov	r1, r3
 8007840:	4610      	mov	r0, r2
 8007842:	f001 f8e9 	bl	8008a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	080078b5 	.word	0x080078b5

080078b4 <HAL_TIM_PWM_MspInit>:
>>>>>>> Stashed changes
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
=======
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_TIM_PWM_Start>:
=======
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_TIM_PWM_Start>:
>>>>>>> Stashed changes
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< Updated upstream
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
=======
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< Updated upstream
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d109      	bne.n	8006658 <HAL_TIM_PWM_Start+0x24>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b01      	cmp	r3, #1
 800664e:	bf14      	ite	ne
 8006650:	2301      	movne	r3, #1
 8006652:	2300      	moveq	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	e03c      	b.n	80066d2 <HAL_TIM_PWM_Start+0x9e>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b04      	cmp	r3, #4
 800665c:	d109      	bne.n	8006672 <HAL_TIM_PWM_Start+0x3e>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b01      	cmp	r3, #1
 8006668:	bf14      	ite	ne
 800666a:	2301      	movne	r3, #1
 800666c:	2300      	moveq	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	e02f      	b.n	80066d2 <HAL_TIM_PWM_Start+0x9e>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b08      	cmp	r3, #8
 8006676:	d109      	bne.n	800668c <HAL_TIM_PWM_Start+0x58>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b01      	cmp	r3, #1
 8006682:	bf14      	ite	ne
 8006684:	2301      	movne	r3, #1
 8006686:	2300      	moveq	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	e022      	b.n	80066d2 <HAL_TIM_PWM_Start+0x9e>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b0c      	cmp	r3, #12
 8006690:	d109      	bne.n	80066a6 <HAL_TIM_PWM_Start+0x72>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b01      	cmp	r3, #1
 800669c:	bf14      	ite	ne
 800669e:	2301      	movne	r3, #1
 80066a0:	2300      	moveq	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	e015      	b.n	80066d2 <HAL_TIM_PWM_Start+0x9e>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b10      	cmp	r3, #16
 80066aa:	d109      	bne.n	80066c0 <HAL_TIM_PWM_Start+0x8c>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	bf14      	ite	ne
 80066b8:	2301      	movne	r3, #1
 80066ba:	2300      	moveq	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	e008      	b.n	80066d2 <HAL_TIM_PWM_Start+0x9e>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	bf14      	ite	ne
 80066cc:	2301      	movne	r3, #1
 80066ce:	2300      	moveq	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e0a6      	b.n	8006828 <HAL_TIM_PWM_Start+0x1f4>
=======
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d109      	bne.n	80078ec <HAL_TIM_PWM_Start+0x24>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	bf14      	ite	ne
 80078e4:	2301      	movne	r3, #1
 80078e6:	2300      	moveq	r3, #0
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	e03c      	b.n	8007966 <HAL_TIM_PWM_Start+0x9e>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d109      	bne.n	8007906 <HAL_TIM_PWM_Start+0x3e>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	bf14      	ite	ne
 80078fe:	2301      	movne	r3, #1
 8007900:	2300      	moveq	r3, #0
 8007902:	b2db      	uxtb	r3, r3
 8007904:	e02f      	b.n	8007966 <HAL_TIM_PWM_Start+0x9e>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b08      	cmp	r3, #8
 800790a:	d109      	bne.n	8007920 <HAL_TIM_PWM_Start+0x58>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b01      	cmp	r3, #1
 8007916:	bf14      	ite	ne
 8007918:	2301      	movne	r3, #1
 800791a:	2300      	moveq	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	e022      	b.n	8007966 <HAL_TIM_PWM_Start+0x9e>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b0c      	cmp	r3, #12
 8007924:	d109      	bne.n	800793a <HAL_TIM_PWM_Start+0x72>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b01      	cmp	r3, #1
 8007930:	bf14      	ite	ne
 8007932:	2301      	movne	r3, #1
 8007934:	2300      	moveq	r3, #0
 8007936:	b2db      	uxtb	r3, r3
 8007938:	e015      	b.n	8007966 <HAL_TIM_PWM_Start+0x9e>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b10      	cmp	r3, #16
 800793e:	d109      	bne.n	8007954 <HAL_TIM_PWM_Start+0x8c>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b01      	cmp	r3, #1
 800794a:	bf14      	ite	ne
 800794c:	2301      	movne	r3, #1
 800794e:	2300      	moveq	r3, #0
 8007950:	b2db      	uxtb	r3, r3
 8007952:	e008      	b.n	8007966 <HAL_TIM_PWM_Start+0x9e>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b01      	cmp	r3, #1
 800795e:	bf14      	ite	ne
 8007960:	2301      	movne	r3, #1
 8007962:	2300      	moveq	r3, #0
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e0a6      	b.n	8007abc <HAL_TIM_PWM_Start+0x1f4>
>>>>>>> Stashed changes
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< Updated upstream
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d104      	bne.n	80066ea <HAL_TIM_PWM_Start+0xb6>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066e8:	e023      	b.n	8006732 <HAL_TIM_PWM_Start+0xfe>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d104      	bne.n	80066fa <HAL_TIM_PWM_Start+0xc6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066f8:	e01b      	b.n	8006732 <HAL_TIM_PWM_Start+0xfe>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d104      	bne.n	800670a <HAL_TIM_PWM_Start+0xd6>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006708:	e013      	b.n	8006732 <HAL_TIM_PWM_Start+0xfe>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b0c      	cmp	r3, #12
 800670e:	d104      	bne.n	800671a <HAL_TIM_PWM_Start+0xe6>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006718:	e00b      	b.n	8006732 <HAL_TIM_PWM_Start+0xfe>
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b10      	cmp	r3, #16
 800671e:	d104      	bne.n	800672a <HAL_TIM_PWM_Start+0xf6>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006728:	e003      	b.n	8006732 <HAL_TIM_PWM_Start+0xfe>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2202      	movs	r2, #2
 800672e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2201      	movs	r2, #1
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f001 faae 	bl	8007c9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a3a      	ldr	r2, [pc, #232]	@ (8006830 <HAL_TIM_PWM_Start+0x1fc>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d018      	beq.n	800677c <HAL_TIM_PWM_Start+0x148>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a39      	ldr	r2, [pc, #228]	@ (8006834 <HAL_TIM_PWM_Start+0x200>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d013      	beq.n	800677c <HAL_TIM_PWM_Start+0x148>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a37      	ldr	r2, [pc, #220]	@ (8006838 <HAL_TIM_PWM_Start+0x204>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00e      	beq.n	800677c <HAL_TIM_PWM_Start+0x148>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a36      	ldr	r2, [pc, #216]	@ (800683c <HAL_TIM_PWM_Start+0x208>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d009      	beq.n	800677c <HAL_TIM_PWM_Start+0x148>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a34      	ldr	r2, [pc, #208]	@ (8006840 <HAL_TIM_PWM_Start+0x20c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d004      	beq.n	800677c <HAL_TIM_PWM_Start+0x148>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a33      	ldr	r2, [pc, #204]	@ (8006844 <HAL_TIM_PWM_Start+0x210>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d101      	bne.n	8006780 <HAL_TIM_PWM_Start+0x14c>
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <HAL_TIM_PWM_Start+0x14e>
 8006780:	2300      	movs	r3, #0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d007      	beq.n	8006796 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006794:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d104      	bne.n	800797e <HAL_TIM_PWM_Start+0xb6>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800797c:	e023      	b.n	80079c6 <HAL_TIM_PWM_Start+0xfe>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b04      	cmp	r3, #4
 8007982:	d104      	bne.n	800798e <HAL_TIM_PWM_Start+0xc6>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2202      	movs	r2, #2
 8007988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800798c:	e01b      	b.n	80079c6 <HAL_TIM_PWM_Start+0xfe>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b08      	cmp	r3, #8
 8007992:	d104      	bne.n	800799e <HAL_TIM_PWM_Start+0xd6>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800799c:	e013      	b.n	80079c6 <HAL_TIM_PWM_Start+0xfe>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b0c      	cmp	r3, #12
 80079a2:	d104      	bne.n	80079ae <HAL_TIM_PWM_Start+0xe6>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079ac:	e00b      	b.n	80079c6 <HAL_TIM_PWM_Start+0xfe>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b10      	cmp	r3, #16
 80079b2:	d104      	bne.n	80079be <HAL_TIM_PWM_Start+0xf6>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079bc:	e003      	b.n	80079c6 <HAL_TIM_PWM_Start+0xfe>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2202      	movs	r2, #2
 80079c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2201      	movs	r2, #1
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 fc9c 	bl	800930c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a3a      	ldr	r2, [pc, #232]	@ (8007ac4 <HAL_TIM_PWM_Start+0x1fc>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d018      	beq.n	8007a10 <HAL_TIM_PWM_Start+0x148>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a39      	ldr	r2, [pc, #228]	@ (8007ac8 <HAL_TIM_PWM_Start+0x200>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d013      	beq.n	8007a10 <HAL_TIM_PWM_Start+0x148>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a37      	ldr	r2, [pc, #220]	@ (8007acc <HAL_TIM_PWM_Start+0x204>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00e      	beq.n	8007a10 <HAL_TIM_PWM_Start+0x148>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a36      	ldr	r2, [pc, #216]	@ (8007ad0 <HAL_TIM_PWM_Start+0x208>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d009      	beq.n	8007a10 <HAL_TIM_PWM_Start+0x148>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a34      	ldr	r2, [pc, #208]	@ (8007ad4 <HAL_TIM_PWM_Start+0x20c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d004      	beq.n	8007a10 <HAL_TIM_PWM_Start+0x148>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a33      	ldr	r2, [pc, #204]	@ (8007ad8 <HAL_TIM_PWM_Start+0x210>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d101      	bne.n	8007a14 <HAL_TIM_PWM_Start+0x14c>
 8007a10:	2301      	movs	r3, #1
 8007a12:	e000      	b.n	8007a16 <HAL_TIM_PWM_Start+0x14e>
 8007a14:	2300      	movs	r3, #0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d007      	beq.n	8007a2a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a28:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< Updated upstream
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a25      	ldr	r2, [pc, #148]	@ (8006830 <HAL_TIM_PWM_Start+0x1fc>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d022      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x1b2>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067a8:	d01d      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x1b2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a26      	ldr	r2, [pc, #152]	@ (8006848 <HAL_TIM_PWM_Start+0x214>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d018      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x1b2>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a24      	ldr	r2, [pc, #144]	@ (800684c <HAL_TIM_PWM_Start+0x218>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x1b2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a23      	ldr	r2, [pc, #140]	@ (8006850 <HAL_TIM_PWM_Start+0x21c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00e      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x1b2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a19      	ldr	r2, [pc, #100]	@ (8006834 <HAL_TIM_PWM_Start+0x200>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d009      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x1b2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a18      	ldr	r2, [pc, #96]	@ (8006838 <HAL_TIM_PWM_Start+0x204>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d004      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x1b2>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a18      	ldr	r2, [pc, #96]	@ (8006844 <HAL_TIM_PWM_Start+0x210>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d115      	bne.n	8006812 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	4b19      	ldr	r3, [pc, #100]	@ (8006854 <HAL_TIM_PWM_Start+0x220>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b06      	cmp	r3, #6
 80067f6:	d015      	beq.n	8006824 <HAL_TIM_PWM_Start+0x1f0>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067fe:	d011      	beq.n	8006824 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0201 	orr.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006810:	e008      	b.n	8006824 <HAL_TIM_PWM_Start+0x1f0>
=======
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a25      	ldr	r2, [pc, #148]	@ (8007ac4 <HAL_TIM_PWM_Start+0x1fc>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d022      	beq.n	8007a7a <HAL_TIM_PWM_Start+0x1b2>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a3c:	d01d      	beq.n	8007a7a <HAL_TIM_PWM_Start+0x1b2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a26      	ldr	r2, [pc, #152]	@ (8007adc <HAL_TIM_PWM_Start+0x214>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d018      	beq.n	8007a7a <HAL_TIM_PWM_Start+0x1b2>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a24      	ldr	r2, [pc, #144]	@ (8007ae0 <HAL_TIM_PWM_Start+0x218>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d013      	beq.n	8007a7a <HAL_TIM_PWM_Start+0x1b2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a23      	ldr	r2, [pc, #140]	@ (8007ae4 <HAL_TIM_PWM_Start+0x21c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d00e      	beq.n	8007a7a <HAL_TIM_PWM_Start+0x1b2>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a19      	ldr	r2, [pc, #100]	@ (8007ac8 <HAL_TIM_PWM_Start+0x200>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d009      	beq.n	8007a7a <HAL_TIM_PWM_Start+0x1b2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a18      	ldr	r2, [pc, #96]	@ (8007acc <HAL_TIM_PWM_Start+0x204>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d004      	beq.n	8007a7a <HAL_TIM_PWM_Start+0x1b2>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a18      	ldr	r2, [pc, #96]	@ (8007ad8 <HAL_TIM_PWM_Start+0x210>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d115      	bne.n	8007aa6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	4b19      	ldr	r3, [pc, #100]	@ (8007ae8 <HAL_TIM_PWM_Start+0x220>)
 8007a82:	4013      	ands	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b06      	cmp	r3, #6
 8007a8a:	d015      	beq.n	8007ab8 <HAL_TIM_PWM_Start+0x1f0>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a92:	d011      	beq.n	8007ab8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0201 	orr.w	r2, r2, #1
 8007aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aa4:	e008      	b.n	8007ab8 <HAL_TIM_PWM_Start+0x1f0>
>>>>>>> Stashed changes
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0201 	orr.w	r2, r2, #1
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	e000      	b.n	8006826 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006824:	bf00      	nop
=======
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f042 0201 	orr.w	r2, r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	e000      	b.n	8007aba <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab8:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40013400 	.word	0x40013400
 8006838:	40014000 	.word	0x40014000
 800683c:	40014400 	.word	0x40014400
 8006840:	40014800 	.word	0x40014800
 8006844:	40015000 	.word	0x40015000
 8006848:	40000400 	.word	0x40000400
 800684c:	40000800 	.word	0x40000800
 8006850:	40000c00 	.word	0x40000c00
 8006854:	00010007 	.word	0x00010007

08006858 <HAL_TIM_OnePulse_Init>:
=======
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	40012c00 	.word	0x40012c00
 8007ac8:	40013400 	.word	0x40013400
 8007acc:	40014000 	.word	0x40014000
 8007ad0:	40014400 	.word	0x40014400
 8007ad4:	40014800 	.word	0x40014800
 8007ad8:	40015000 	.word	0x40015000
 8007adc:	40000400 	.word	0x40000400
 8007ae0:	40000800 	.word	0x40000800
 8007ae4:	40000c00 	.word	0x40000c00
 8007ae8:	00010007 	.word	0x00010007

08007aec <HAL_TIM_OnePulse_Init>:
>>>>>>> Stashed changes
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
<<<<<<< Updated upstream
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e04c      	b.n	8006906 <HAL_TIM_OnePulse_Init+0xae>
=======
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e04c      	b.n	8007b9a <HAL_TIM_OnePulse_Init+0xae>
>>>>>>> Stashed changes
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d111      	bne.n	800689c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d111      	bne.n	8007b30 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
<<<<<<< Updated upstream
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 fa31 	bl	8007ce8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d102      	bne.n	8006894 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a1f      	ldr	r2, [pc, #124]	@ (8006910 <HAL_TIM_OnePulse_Init+0xb8>)
 8006892:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	4798      	blx	r3
=======
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 fc1f 	bl	8009358 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d102      	bne.n	8007b28 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a1f      	ldr	r2, [pc, #124]	@ (8007ba4 <HAL_TIM_OnePulse_Init+0xb8>)
 8007b26:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	4798      	blx	r3
>>>>>>> Stashed changes
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f000 fd7a 	bl	80073a8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0208 	bic.w	r2, r2, #8
 80068c2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6819      	ldr	r1, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	08006915 	.word	0x08006915

08006914 <HAL_TIM_OnePulse_MspInit>:
=======
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	4619      	mov	r1, r3
 8007b42:	4610      	mov	r0, r2
 8007b44:	f000 ff68 	bl	8008a18 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0208 	bic.w	r2, r2, #8
 8007b56:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6819      	ldr	r1, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	08007ba9 	.word	0x08007ba9

08007ba8 <HAL_TIM_OnePulse_MspInit>:
>>>>>>> Stashed changes
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
=======
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_TIM_Encoder_Init>:
=======
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bcc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007bd4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bdc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007be4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d108      	bne.n	8007bfe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d105      	bne.n	8007bfe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bf2:	7b7b      	ldrb	r3, [r7, #13]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d102      	bne.n	8007bfe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007bf8:	7b3b      	ldrb	r3, [r7, #12]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d001      	beq.n	8007c02 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e059      	b.n	8007cb6 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2202      	movs	r2, #2
 8007c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2202      	movs	r2, #2
 8007c16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f042 0202 	orr.w	r2, r2, #2
 8007c30:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0204 	orr.w	r2, r2, #4
 8007c40:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2201      	movs	r2, #1
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f001 fb5e 	bl	800930c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2201      	movs	r2, #1
 8007c56:	2104      	movs	r1, #4
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 fb57 	bl	800930c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a17      	ldr	r2, [pc, #92]	@ (8007cc0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d018      	beq.n	8007c9a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a15      	ldr	r2, [pc, #84]	@ (8007cc4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d013      	beq.n	8007c9a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a14      	ldr	r2, [pc, #80]	@ (8007cc8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d00e      	beq.n	8007c9a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a12      	ldr	r2, [pc, #72]	@ (8007ccc <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d009      	beq.n	8007c9a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a11      	ldr	r2, [pc, #68]	@ (8007cd0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d004      	beq.n	8007c9a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a0f      	ldr	r2, [pc, #60]	@ (8007cd4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d101      	bne.n	8007c9e <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e000      	b.n	8007ca0 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d007      	beq.n	8007cb4 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cb2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	40012c00 	.word	0x40012c00
 8007cc4:	40013400 	.word	0x40013400
 8007cc8:	40014000 	.word	0x40014000
 8007ccc:	40014400 	.word	0x40014400
 8007cd0:	40014800 	.word	0x40014800
 8007cd4:	40015000 	.word	0x40015000

08007cd8 <HAL_TIM_Encoder_Init>:
>>>>>>> Stashed changes
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
<<<<<<< Updated upstream
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
=======
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
<<<<<<< Updated upstream
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e0a2      	b.n	8006a82 <HAL_TIM_Encoder_Init+0x15a>
=======
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d101      	bne.n	8007cec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e0a2      	b.n	8007e32 <HAL_TIM_Encoder_Init+0x15a>
>>>>>>> Stashed changes
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d111      	bne.n	800696c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d111      	bne.n	8007d1c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
<<<<<<< Updated upstream
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 f9c9 	bl	8007ce8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800695a:	2b00      	cmp	r3, #0
 800695c:	d102      	bne.n	8006964 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a4a      	ldr	r2, [pc, #296]	@ (8006a8c <HAL_TIM_Encoder_Init+0x164>)
 8006962:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
=======
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 fb29 	bl	8009358 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d102      	bne.n	8007d14 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a4a      	ldr	r2, [pc, #296]	@ (8007e3c <HAL_TIM_Encoder_Init+0x164>)
 8007d12:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	4798      	blx	r3
>>>>>>> Stashed changes
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6812      	ldr	r2, [r2, #0]
 800697e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006982:	f023 0307 	bic.w	r3, r3, #7
 8006986:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3304      	adds	r3, #4
 8006990:	4619      	mov	r1, r3
 8006992:	4610      	mov	r0, r2
 8006994:	f000 fd08 	bl	80073a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069c0:	f023 0303 	bic.w	r3, r3, #3
 80069c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	021b      	lsls	r3, r3, #8
 80069d0:	4313      	orrs	r3, r2
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80069de:	f023 030c 	bic.w	r3, r3, #12
 80069e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	4313      	orrs	r3, r2
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	011a      	lsls	r2, r3, #4
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	031b      	lsls	r3, r3, #12
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006a1c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006a24:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	011b      	lsls	r3, r3, #4
 8006a30:	4313      	orrs	r3, r2
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	08002505 	.word	0x08002505

08006a90 <HAL_TIM_Encoder_Start>:
=======
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	6812      	ldr	r2, [r2, #0]
 8007d2e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007d32:	f023 0307 	bic.w	r3, r3, #7
 8007d36:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4619      	mov	r1, r3
 8007d42:	4610      	mov	r0, r2
 8007d44:	f000 fe68 	bl	8008a18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d70:	f023 0303 	bic.w	r3, r3, #3
 8007d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	4313      	orrs	r3, r2
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007d8e:	f023 030c 	bic.w	r3, r3, #12
 8007d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68da      	ldr	r2, [r3, #12]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	021b      	lsls	r3, r3, #8
 8007daa:	4313      	orrs	r3, r2
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	011a      	lsls	r2, r3, #4
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	031b      	lsls	r3, r3, #12
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007dcc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007dd4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	4313      	orrs	r3, r2
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	08003785 	.word	0x08003785

08007e40 <HAL_TIM_Encoder_Start>:
>>>>>>> Stashed changes
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< Updated upstream
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006aa0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006aa8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ab0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ab8:	733b      	strb	r3, [r7, #12]
=======
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e68:	733b      	strb	r3, [r7, #12]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
<<<<<<< Updated upstream
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d110      	bne.n	8006ae2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d102      	bne.n	8006acc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ac6:	7b7b      	ldrb	r3, [r7, #13]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d001      	beq.n	8006ad0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e069      	b.n	8006ba4 <HAL_TIM_Encoder_Start+0x114>
=======
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d110      	bne.n	8007e92 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d102      	bne.n	8007e7c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e76:	7b7b      	ldrb	r3, [r7, #13]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d001      	beq.n	8007e80 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e069      	b.n	8007f54 <HAL_TIM_Encoder_Start+0x114>
>>>>>>> Stashed changes
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< Updated upstream
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ae0:	e031      	b.n	8006b46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d110      	bne.n	8006b0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d102      	bne.n	8006af4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006aee:	7b3b      	ldrb	r3, [r7, #12]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d001      	beq.n	8006af8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e055      	b.n	8006ba4 <HAL_TIM_Encoder_Start+0x114>
=======
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e90:	e031      	b.n	8007ef6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b04      	cmp	r3, #4
 8007e96:	d110      	bne.n	8007eba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d102      	bne.n	8007ea4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e9e:	7b3b      	ldrb	r3, [r7, #12]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d001      	beq.n	8007ea8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e055      	b.n	8007f54 <HAL_TIM_Encoder_Start+0x114>
>>>>>>> Stashed changes
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< Updated upstream
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b08:	e01d      	b.n	8006b46 <HAL_TIM_Encoder_Start+0xb6>
=======
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007eb8:	e01d      	b.n	8007ef6 <HAL_TIM_Encoder_Start+0xb6>
>>>>>>> Stashed changes
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< Updated upstream
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d108      	bne.n	8006b22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d105      	bne.n	8006b22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b16:	7b7b      	ldrb	r3, [r7, #13]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d102      	bne.n	8006b22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b1c:	7b3b      	ldrb	r3, [r7, #12]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d001      	beq.n	8006b26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e03e      	b.n	8006ba4 <HAL_TIM_Encoder_Start+0x114>
=======
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d108      	bne.n	8007ed2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d105      	bne.n	8007ed2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ec6:	7b7b      	ldrb	r3, [r7, #13]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d102      	bne.n	8007ed2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ecc:	7b3b      	ldrb	r3, [r7, #12]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d001      	beq.n	8007ed6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e03e      	b.n	8007f54 <HAL_TIM_Encoder_Start+0x114>
>>>>>>> Stashed changes
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< Updated upstream
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2202      	movs	r2, #2
 8006b32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2202      	movs	r2, #2
 8006b42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
=======
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
>>>>>>> Stashed changes
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
<<<<<<< Updated upstream
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <HAL_TIM_Encoder_Start+0xc4>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d008      	beq.n	8006b64 <HAL_TIM_Encoder_Start+0xd4>
 8006b52:	e00f      	b.n	8006b74 <HAL_TIM_Encoder_Start+0xe4>
=======
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <HAL_TIM_Encoder_Start+0xc4>
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	d008      	beq.n	8007f14 <HAL_TIM_Encoder_Start+0xd4>
 8007f02:	e00f      	b.n	8007f24 <HAL_TIM_Encoder_Start+0xe4>
>>>>>>> Stashed changes
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< Updated upstream
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 f89d 	bl	8007c9c <TIM_CCxChannelCmd>
      break;
 8006b62:	e016      	b.n	8006b92 <HAL_TIM_Encoder_Start+0x102>
=======
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f001 f9fd 	bl	800930c <TIM_CCxChannelCmd>
      break;
 8007f12:	e016      	b.n	8007f42 <HAL_TIM_Encoder_Start+0x102>
>>>>>>> Stashed changes
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
<<<<<<< Updated upstream
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	2104      	movs	r1, #4
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f001 f895 	bl	8007c9c <TIM_CCxChannelCmd>
      break;
 8006b72:	e00e      	b.n	8006b92 <HAL_TIM_Encoder_Start+0x102>
=======
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	2104      	movs	r1, #4
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 f9f5 	bl	800930c <TIM_CCxChannelCmd>
      break;
 8007f22:	e00e      	b.n	8007f42 <HAL_TIM_Encoder_Start+0x102>
>>>>>>> Stashed changes
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< Updated upstream
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f001 f88d 	bl	8007c9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2201      	movs	r2, #1
 8006b88:	2104      	movs	r1, #4
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f001 f886 	bl	8007c9c <TIM_CCxChannelCmd>
      break;
 8006b90:	bf00      	nop
=======
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 f9ed 	bl	800930c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2201      	movs	r2, #1
 8007f38:	2104      	movs	r1, #4
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f001 f9e6 	bl	800930c <TIM_CCxChannelCmd>
      break;
 8007f40:	bf00      	nop
>>>>>>> Stashed changes
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0201 	orr.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_TIM_IRQHandler>:
=======
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f042 0201 	orr.w	r2, r2, #1
 8007f50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_TIM_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d026      	beq.n	8006c1c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d021      	beq.n	8006c1c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0202 	mvn.w	r2, #2
 8006be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d005      	beq.n	8006c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	4798      	blx	r3
 8006c00:	e009      	b.n	8006c16 <HAL_TIM_IRQHandler+0x6a>
=======
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d026      	beq.n	8007fcc <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f003 0302 	and.w	r3, r3, #2
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d021      	beq.n	8007fcc <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f06f 0202 	mvn.w	r2, #2
 8007f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	f003 0303 	and.w	r3, r3, #3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d005      	beq.n	8007fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	4798      	blx	r3
 8007fb0:	e009      	b.n	8007fc6 <HAL_TIM_IRQHandler+0x6a>
>>>>>>> Stashed changes
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	4798      	blx	r3
=======
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	4798      	blx	r3
>>>>>>> Stashed changes
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< Updated upstream
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	771a      	strb	r2, [r3, #28]
=======
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< Updated upstream
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f003 0304 	and.w	r3, r3, #4
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d026      	beq.n	8006c74 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d021      	beq.n	8006c74 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0204 	mvn.w	r2, #4
 8006c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	4798      	blx	r3
 8006c58:	e009      	b.n	8006c6e <HAL_TIM_IRQHandler+0xc2>
=======
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f003 0304 	and.w	r3, r3, #4
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d026      	beq.n	8008024 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f003 0304 	and.w	r3, r3, #4
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d021      	beq.n	8008024 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f06f 0204 	mvn.w	r2, #4
 8007fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2202      	movs	r2, #2
 8007fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d005      	beq.n	800800a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	4798      	blx	r3
 8008008:	e009      	b.n	800801e <HAL_TIM_IRQHandler+0xc2>
>>>>>>> Stashed changes
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4798      	blx	r3
=======
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
>>>>>>> Stashed changes
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< Updated upstream
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	771a      	strb	r2, [r3, #28]
=======
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< Updated upstream
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f003 0308 	and.w	r3, r3, #8
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d026      	beq.n	8006ccc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f003 0308 	and.w	r3, r3, #8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d021      	beq.n	8006ccc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f06f 0208 	mvn.w	r2, #8
 8006c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2204      	movs	r2, #4
 8006c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	f003 0303 	and.w	r3, r3, #3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	4798      	blx	r3
 8006cb0:	e009      	b.n	8006cc6 <HAL_TIM_IRQHandler+0x11a>
=======
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f003 0308 	and.w	r3, r3, #8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d026      	beq.n	800807c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f003 0308 	and.w	r3, r3, #8
 8008034:	2b00      	cmp	r3, #0
 8008036:	d021      	beq.n	800807c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f06f 0208 	mvn.w	r2, #8
 8008040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2204      	movs	r2, #4
 8008046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d005      	beq.n	8008062 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	4798      	blx	r3
 8008060:	e009      	b.n	8008076 <HAL_TIM_IRQHandler+0x11a>
>>>>>>> Stashed changes
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	4798      	blx	r3
=======
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	4798      	blx	r3
>>>>>>> Stashed changes
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< Updated upstream
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	771a      	strb	r2, [r3, #28]
=======
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< Updated upstream
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f003 0310 	and.w	r3, r3, #16
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d026      	beq.n	8006d24 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d021      	beq.n	8006d24 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0210 	mvn.w	r2, #16
 8006ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2208      	movs	r2, #8
 8006cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d005      	beq.n	8006d0a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	4798      	blx	r3
 8006d08:	e009      	b.n	8006d1e <HAL_TIM_IRQHandler+0x172>
=======
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f003 0310 	and.w	r3, r3, #16
 8008082:	2b00      	cmp	r3, #0
 8008084:	d026      	beq.n	80080d4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f003 0310 	and.w	r3, r3, #16
 800808c:	2b00      	cmp	r3, #0
 800808e:	d021      	beq.n	80080d4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f06f 0210 	mvn.w	r2, #16
 8008098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2208      	movs	r2, #8
 800809e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d005      	beq.n	80080ba <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	4798      	blx	r3
 80080b8:	e009      	b.n	80080ce <HAL_TIM_IRQHandler+0x172>
>>>>>>> Stashed changes
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	4798      	blx	r3
=======
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	4798      	blx	r3
>>>>>>> Stashed changes
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< Updated upstream
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	771a      	strb	r2, [r3, #28]
=======
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< Updated upstream
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00e      	beq.n	8006d4c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d009      	beq.n	8006d4c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f06f 0201 	mvn.w	r2, #1
 8006d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
=======
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00e      	beq.n	80080fc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d009      	beq.n	80080fc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0201 	mvn.w	r2, #1
 80080f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	4798      	blx	r3
>>>>>>> Stashed changes
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
<<<<<<< Updated upstream
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d104      	bne.n	8006d60 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00e      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d009      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	4798      	blx	r3
=======
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008102:	2b00      	cmp	r3, #0
 8008104:	d104      	bne.n	8008110 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00e      	beq.n	800812e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008116:	2b00      	cmp	r3, #0
 8008118:	d009      	beq.n	800812e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	4798      	blx	r3
>>>>>>> Stashed changes
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
<<<<<<< Updated upstream
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00e      	beq.n	8006da6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d009      	beq.n	8006da6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	4798      	blx	r3
=======
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00e      	beq.n	8008156 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800813e:	2b00      	cmp	r3, #0
 8008140:	d009      	beq.n	8008156 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800814a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	4798      	blx	r3
>>>>>>> Stashed changes
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< Updated upstream
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00e      	beq.n	8006dce <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d009      	beq.n	8006dce <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	4798      	blx	r3
=======
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00e      	beq.n	800817e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	4798      	blx	r3
>>>>>>> Stashed changes
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< Updated upstream
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00e      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d009      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f06f 0220 	mvn.w	r2, #32
 8006dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	4798      	blx	r3
=======
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00e      	beq.n	80081a6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b00      	cmp	r3, #0
 8008190:	d009      	beq.n	80081a6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f06f 0220 	mvn.w	r2, #32
 800819a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	4798      	blx	r3
>>>>>>> Stashed changes
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
<<<<<<< Updated upstream
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00e      	beq.n	8006e1e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d009      	beq.n	8006e1e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	4798      	blx	r3
=======
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00e      	beq.n	80081ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d009      	beq.n	80081ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80081c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	4798      	blx	r3
>>>>>>> Stashed changes
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
<<<<<<< Updated upstream
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00e      	beq.n	8006e46 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d009      	beq.n	8006e46 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	4798      	blx	r3
=======
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00e      	beq.n	80081f6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d009      	beq.n	80081f6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80081ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
>>>>>>> Stashed changes
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
<<<<<<< Updated upstream
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00e      	beq.n	8006e6e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d009      	beq.n	8006e6e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	4798      	blx	r3
=======
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00e      	beq.n	800821e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d009      	beq.n	800821e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	4798      	blx	r3
>>>>>>> Stashed changes
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
<<<<<<< Updated upstream
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00e      	beq.n	8006e96 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d009      	beq.n	8006e96 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
=======
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00e      	beq.n	8008246 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d009      	beq.n	8008246 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800823a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	4798      	blx	r3
>>>>>>> Stashed changes
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <HAL_TIM_PWM_ConfigChannel>:
=======
 8008246:	bf00      	nop
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> Stashed changes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< Updated upstream
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	75fb      	strb	r3, [r7, #23]
=======
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e0ff      	b.n	80070be <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b14      	cmp	r3, #20
 8006eca:	f200 80f0 	bhi.w	80070ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006ece:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed4:	08006f29 	.word	0x08006f29
 8006ed8:	080070af 	.word	0x080070af
 8006edc:	080070af 	.word	0x080070af
 8006ee0:	080070af 	.word	0x080070af
 8006ee4:	08006f69 	.word	0x08006f69
 8006ee8:	080070af 	.word	0x080070af
 8006eec:	080070af 	.word	0x080070af
 8006ef0:	080070af 	.word	0x080070af
 8006ef4:	08006fab 	.word	0x08006fab
 8006ef8:	080070af 	.word	0x080070af
 8006efc:	080070af 	.word	0x080070af
 8006f00:	080070af 	.word	0x080070af
 8006f04:	08006feb 	.word	0x08006feb
 8006f08:	080070af 	.word	0x080070af
 8006f0c:	080070af 	.word	0x080070af
 8006f10:	080070af 	.word	0x080070af
 8006f14:	0800702d 	.word	0x0800702d
 8006f18:	080070af 	.word	0x080070af
 8006f1c:	080070af 	.word	0x080070af
 8006f20:	080070af 	.word	0x080070af
 8006f24:	0800706d 	.word	0x0800706d
=======
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800826a:	2302      	movs	r3, #2
 800826c:	e0ff      	b.n	800846e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b14      	cmp	r3, #20
 800827a:	f200 80f0 	bhi.w	800845e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800827e:	a201      	add	r2, pc, #4	@ (adr r2, 8008284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	080082d9 	.word	0x080082d9
 8008288:	0800845f 	.word	0x0800845f
 800828c:	0800845f 	.word	0x0800845f
 8008290:	0800845f 	.word	0x0800845f
 8008294:	08008319 	.word	0x08008319
 8008298:	0800845f 	.word	0x0800845f
 800829c:	0800845f 	.word	0x0800845f
 80082a0:	0800845f 	.word	0x0800845f
 80082a4:	0800835b 	.word	0x0800835b
 80082a8:	0800845f 	.word	0x0800845f
 80082ac:	0800845f 	.word	0x0800845f
 80082b0:	0800845f 	.word	0x0800845f
 80082b4:	0800839b 	.word	0x0800839b
 80082b8:	0800845f 	.word	0x0800845f
 80082bc:	0800845f 	.word	0x0800845f
 80082c0:	0800845f 	.word	0x0800845f
 80082c4:	080083dd 	.word	0x080083dd
 80082c8:	0800845f 	.word	0x0800845f
 80082cc:	0800845f 	.word	0x0800845f
 80082d0:	0800845f 	.word	0x0800845f
 80082d4:	0800841d 	.word	0x0800841d
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 faee 	bl	8007510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699a      	ldr	r2, [r3, #24]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0208 	orr.w	r2, r2, #8
 8006f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 0204 	bic.w	r2, r2, #4
 8006f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6999      	ldr	r1, [r3, #24]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	691a      	ldr	r2, [r3, #16]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	619a      	str	r2, [r3, #24]
      break;
 8006f66:	e0a5      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68b9      	ldr	r1, [r7, #8]
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 fc4e 	bl	8008b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699a      	ldr	r2, [r3, #24]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0208 	orr.w	r2, r2, #8
 80082f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	699a      	ldr	r2, [r3, #24]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0204 	bic.w	r2, r2, #4
 8008302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6999      	ldr	r1, [r3, #24]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	691a      	ldr	r2, [r3, #16]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	619a      	str	r2, [r3, #24]
      break;
 8008316:	e0a5      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68b9      	ldr	r1, [r7, #8]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fb68 	bl	8007644 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699a      	ldr	r2, [r3, #24]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	699a      	ldr	r2, [r3, #24]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6999      	ldr	r1, [r3, #24]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	021a      	lsls	r2, r3, #8
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	619a      	str	r2, [r3, #24]
      break;
 8006fa8:	e084      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68b9      	ldr	r1, [r7, #8]
 800831e:	4618      	mov	r0, r3
 8008320:	f000 fcc8 	bl	8008cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	699a      	ldr	r2, [r3, #24]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699a      	ldr	r2, [r3, #24]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6999      	ldr	r1, [r3, #24]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	021a      	lsls	r2, r3, #8
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	619a      	str	r2, [r3, #24]
      break;
 8008358:	e084      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fbdb 	bl	800776c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69da      	ldr	r2, [r3, #28]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f042 0208 	orr.w	r2, r2, #8
 8006fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69da      	ldr	r2, [r3, #28]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0204 	bic.w	r2, r2, #4
 8006fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69d9      	ldr	r1, [r3, #28]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	61da      	str	r2, [r3, #28]
      break;
 8006fe8:	e064      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68b9      	ldr	r1, [r7, #8]
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fd3b 	bl	8008ddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	69da      	ldr	r2, [r3, #28]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f042 0208 	orr.w	r2, r2, #8
 8008374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69da      	ldr	r2, [r3, #28]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 0204 	bic.w	r2, r2, #4
 8008384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69d9      	ldr	r1, [r3, #28]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	691a      	ldr	r2, [r3, #16]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	61da      	str	r2, [r3, #28]
      break;
 8008398:	e064      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 fc4d 	bl	8007890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69da      	ldr	r2, [r3, #28]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69da      	ldr	r2, [r3, #28]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69d9      	ldr	r1, [r3, #28]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	021a      	lsls	r2, r3, #8
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	61da      	str	r2, [r3, #28]
      break;
 800702a:	e043      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f000 fdad 	bl	8008f00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69da      	ldr	r2, [r3, #28]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	69da      	ldr	r2, [r3, #28]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69d9      	ldr	r1, [r3, #28]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	021a      	lsls	r2, r3, #8
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	61da      	str	r2, [r3, #28]
      break;
 80083da:	e043      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68b9      	ldr	r1, [r7, #8]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 fcc0 	bl	80079b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0208 	orr.w	r2, r2, #8
 8007046:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0204 	bic.w	r2, r2, #4
 8007056:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	691a      	ldr	r2, [r3, #16]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800706a:	e023      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68b9      	ldr	r1, [r7, #8]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 fe20 	bl	8009028 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0208 	orr.w	r2, r2, #8
 80083f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f022 0204 	bic.w	r2, r2, #4
 8008406:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	691a      	ldr	r2, [r3, #16]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800841a:	e023      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68b9      	ldr	r1, [r7, #8]
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fd0a 	bl	8007a8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007086:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007096:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	021a      	lsls	r2, r3, #8
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80070ac:	e002      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68b9      	ldr	r1, [r7, #8]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fe6a 	bl	80090fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008436:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008446:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	021a      	lsls	r2, r3, #8
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800845c:	e002      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    }

    default:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 80070ae:	2301      	movs	r3, #1
 80070b0:	75fb      	strb	r3, [r7, #23]
      break;
 80070b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop

080070c8 <HAL_TIM_ConfigClockSource>:
=======
 800845e:	2301      	movs	r3, #1
 8008460:	75fb      	strb	r3, [r7, #23]
      break;
 8008462:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800846c:	7dfb      	ldrb	r3, [r7, #23]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop

08008478 <HAL_TIM_ConfigClockSource>:
>>>>>>> Stashed changes
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< Updated upstream
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]
=======
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <HAL_TIM_ConfigClockSource+0x1c>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e0f6      	b.n	80072d2 <HAL_TIM_ConfigClockSource+0x20a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800848c:	2b01      	cmp	r3, #1
 800848e:	d101      	bne.n	8008494 <HAL_TIM_ConfigClockSource+0x1c>
 8008490:	2302      	movs	r3, #2
 8008492:	e0f6      	b.n	8008682 <HAL_TIM_ConfigClockSource+0x20a>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< Updated upstream
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007102:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800710e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a6f      	ldr	r2, [pc, #444]	@ (80072dc <HAL_TIM_ConfigClockSource+0x214>)
 800711e:	4293      	cmp	r3, r2
 8007120:	f000 80c1 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007124:	4a6d      	ldr	r2, [pc, #436]	@ (80072dc <HAL_TIM_ConfigClockSource+0x214>)
 8007126:	4293      	cmp	r3, r2
 8007128:	f200 80c6 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800712c:	4a6c      	ldr	r2, [pc, #432]	@ (80072e0 <HAL_TIM_ConfigClockSource+0x218>)
 800712e:	4293      	cmp	r3, r2
 8007130:	f000 80b9 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007134:	4a6a      	ldr	r2, [pc, #424]	@ (80072e0 <HAL_TIM_ConfigClockSource+0x218>)
 8007136:	4293      	cmp	r3, r2
 8007138:	f200 80be 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800713c:	4a69      	ldr	r2, [pc, #420]	@ (80072e4 <HAL_TIM_ConfigClockSource+0x21c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	f000 80b1 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007144:	4a67      	ldr	r2, [pc, #412]	@ (80072e4 <HAL_TIM_ConfigClockSource+0x21c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	f200 80b6 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800714c:	4a66      	ldr	r2, [pc, #408]	@ (80072e8 <HAL_TIM_ConfigClockSource+0x220>)
 800714e:	4293      	cmp	r3, r2
 8007150:	f000 80a9 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007154:	4a64      	ldr	r2, [pc, #400]	@ (80072e8 <HAL_TIM_ConfigClockSource+0x220>)
 8007156:	4293      	cmp	r3, r2
 8007158:	f200 80ae 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800715c:	4a63      	ldr	r2, [pc, #396]	@ (80072ec <HAL_TIM_ConfigClockSource+0x224>)
 800715e:	4293      	cmp	r3, r2
 8007160:	f000 80a1 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007164:	4a61      	ldr	r2, [pc, #388]	@ (80072ec <HAL_TIM_ConfigClockSource+0x224>)
 8007166:	4293      	cmp	r3, r2
 8007168:	f200 80a6 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800716c:	4a60      	ldr	r2, [pc, #384]	@ (80072f0 <HAL_TIM_ConfigClockSource+0x228>)
 800716e:	4293      	cmp	r3, r2
 8007170:	f000 8099 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007174:	4a5e      	ldr	r2, [pc, #376]	@ (80072f0 <HAL_TIM_ConfigClockSource+0x228>)
 8007176:	4293      	cmp	r3, r2
 8007178:	f200 809e 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800717c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007180:	f000 8091 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007184:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007188:	f200 8096 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800718c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007190:	f000 8089 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007194:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007198:	f200 808e 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800719c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071a0:	d03e      	beq.n	8007220 <HAL_TIM_ConfigClockSource+0x158>
 80071a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071a6:	f200 8087 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ae:	f000 8086 	beq.w	80072be <HAL_TIM_ConfigClockSource+0x1f6>
 80071b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071b6:	d87f      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071b8:	2b70      	cmp	r3, #112	@ 0x70
 80071ba:	d01a      	beq.n	80071f2 <HAL_TIM_ConfigClockSource+0x12a>
 80071bc:	2b70      	cmp	r3, #112	@ 0x70
 80071be:	d87b      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071c0:	2b60      	cmp	r3, #96	@ 0x60
 80071c2:	d050      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x19e>
 80071c4:	2b60      	cmp	r3, #96	@ 0x60
 80071c6:	d877      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071c8:	2b50      	cmp	r3, #80	@ 0x50
 80071ca:	d03c      	beq.n	8007246 <HAL_TIM_ConfigClockSource+0x17e>
 80071cc:	2b50      	cmp	r3, #80	@ 0x50
 80071ce:	d873      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071d0:	2b40      	cmp	r3, #64	@ 0x40
 80071d2:	d058      	beq.n	8007286 <HAL_TIM_ConfigClockSource+0x1be>
 80071d4:	2b40      	cmp	r3, #64	@ 0x40
 80071d6:	d86f      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071d8:	2b30      	cmp	r3, #48	@ 0x30
 80071da:	d064      	beq.n	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 80071dc:	2b30      	cmp	r3, #48	@ 0x30
 80071de:	d86b      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071e0:	2b20      	cmp	r3, #32
 80071e2:	d060      	beq.n	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	d867      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d05c      	beq.n	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 80071ec:	2b10      	cmp	r3, #16
 80071ee:	d05a      	beq.n	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 80071f0:	e062      	b.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
=======
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80084b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80084b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a6f      	ldr	r2, [pc, #444]	@ (800868c <HAL_TIM_ConfigClockSource+0x214>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	f000 80c1 	beq.w	8008656 <HAL_TIM_ConfigClockSource+0x1de>
 80084d4:	4a6d      	ldr	r2, [pc, #436]	@ (800868c <HAL_TIM_ConfigClockSource+0x214>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	f200 80c6 	bhi.w	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 80084dc:	4a6c      	ldr	r2, [pc, #432]	@ (8008690 <HAL_TIM_ConfigClockSource+0x218>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	f000 80b9 	beq.w	8008656 <HAL_TIM_ConfigClockSource+0x1de>
 80084e4:	4a6a      	ldr	r2, [pc, #424]	@ (8008690 <HAL_TIM_ConfigClockSource+0x218>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	f200 80be 	bhi.w	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 80084ec:	4a69      	ldr	r2, [pc, #420]	@ (8008694 <HAL_TIM_ConfigClockSource+0x21c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	f000 80b1 	beq.w	8008656 <HAL_TIM_ConfigClockSource+0x1de>
 80084f4:	4a67      	ldr	r2, [pc, #412]	@ (8008694 <HAL_TIM_ConfigClockSource+0x21c>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	f200 80b6 	bhi.w	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 80084fc:	4a66      	ldr	r2, [pc, #408]	@ (8008698 <HAL_TIM_ConfigClockSource+0x220>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	f000 80a9 	beq.w	8008656 <HAL_TIM_ConfigClockSource+0x1de>
 8008504:	4a64      	ldr	r2, [pc, #400]	@ (8008698 <HAL_TIM_ConfigClockSource+0x220>)
 8008506:	4293      	cmp	r3, r2
 8008508:	f200 80ae 	bhi.w	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 800850c:	4a63      	ldr	r2, [pc, #396]	@ (800869c <HAL_TIM_ConfigClockSource+0x224>)
 800850e:	4293      	cmp	r3, r2
 8008510:	f000 80a1 	beq.w	8008656 <HAL_TIM_ConfigClockSource+0x1de>
 8008514:	4a61      	ldr	r2, [pc, #388]	@ (800869c <HAL_TIM_ConfigClockSource+0x224>)
 8008516:	4293      	cmp	r3, r2
 8008518:	f200 80a6 	bhi.w	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 800851c:	4a60      	ldr	r2, [pc, #384]	@ (80086a0 <HAL_TIM_ConfigClockSource+0x228>)
 800851e:	4293      	cmp	r3, r2
 8008520:	f000 8099 	beq.w	8008656 <HAL_TIM_ConfigClockSource+0x1de>
 8008524:	4a5e      	ldr	r2, [pc, #376]	@ (80086a0 <HAL_TIM_ConfigClockSource+0x228>)
 8008526:	4293      	cmp	r3, r2
 8008528:	f200 809e 	bhi.w	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 800852c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008530:	f000 8091 	beq.w	8008656 <HAL_TIM_ConfigClockSource+0x1de>
 8008534:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008538:	f200 8096 	bhi.w	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 800853c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008540:	f000 8089 	beq.w	8008656 <HAL_TIM_ConfigClockSource+0x1de>
 8008544:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008548:	f200 808e 	bhi.w	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 800854c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008550:	d03e      	beq.n	80085d0 <HAL_TIM_ConfigClockSource+0x158>
 8008552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008556:	f200 8087 	bhi.w	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 800855a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800855e:	f000 8086 	beq.w	800866e <HAL_TIM_ConfigClockSource+0x1f6>
 8008562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008566:	d87f      	bhi.n	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 8008568:	2b70      	cmp	r3, #112	@ 0x70
 800856a:	d01a      	beq.n	80085a2 <HAL_TIM_ConfigClockSource+0x12a>
 800856c:	2b70      	cmp	r3, #112	@ 0x70
 800856e:	d87b      	bhi.n	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 8008570:	2b60      	cmp	r3, #96	@ 0x60
 8008572:	d050      	beq.n	8008616 <HAL_TIM_ConfigClockSource+0x19e>
 8008574:	2b60      	cmp	r3, #96	@ 0x60
 8008576:	d877      	bhi.n	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 8008578:	2b50      	cmp	r3, #80	@ 0x50
 800857a:	d03c      	beq.n	80085f6 <HAL_TIM_ConfigClockSource+0x17e>
 800857c:	2b50      	cmp	r3, #80	@ 0x50
 800857e:	d873      	bhi.n	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 8008580:	2b40      	cmp	r3, #64	@ 0x40
 8008582:	d058      	beq.n	8008636 <HAL_TIM_ConfigClockSource+0x1be>
 8008584:	2b40      	cmp	r3, #64	@ 0x40
 8008586:	d86f      	bhi.n	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 8008588:	2b30      	cmp	r3, #48	@ 0x30
 800858a:	d064      	beq.n	8008656 <HAL_TIM_ConfigClockSource+0x1de>
 800858c:	2b30      	cmp	r3, #48	@ 0x30
 800858e:	d86b      	bhi.n	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 8008590:	2b20      	cmp	r3, #32
 8008592:	d060      	beq.n	8008656 <HAL_TIM_ConfigClockSource+0x1de>
 8008594:	2b20      	cmp	r3, #32
 8008596:	d867      	bhi.n	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
 8008598:	2b00      	cmp	r3, #0
 800859a:	d05c      	beq.n	8008656 <HAL_TIM_ConfigClockSource+0x1de>
 800859c:	2b10      	cmp	r3, #16
 800859e:	d05a      	beq.n	8008656 <HAL_TIM_ConfigClockSource+0x1de>
 80085a0:	e062      	b.n	8008668 <HAL_TIM_ConfigClockSource+0x1f0>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007202:	f000 fd2b 	bl	8007c5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	609a      	str	r2, [r3, #8]
      break;
 800721e:	e04f      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1f8>
=======
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085b2:	f000 fe8b 	bl	80092cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80085c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	609a      	str	r2, [r3, #8]
      break;
 80085ce:	e04f      	b.n	8008670 <HAL_TIM_ConfigClockSource+0x1f8>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007230:	f000 fd14 	bl	8007c5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007242:	609a      	str	r2, [r3, #8]
      break;
 8007244:	e03c      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1f8>
=======
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085e0:	f000 fe74 	bl	80092cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689a      	ldr	r2, [r3, #8]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085f2:	609a      	str	r2, [r3, #8]
      break;
 80085f4:	e03c      	b.n	8008670 <HAL_TIM_ConfigClockSource+0x1f8>
>>>>>>> Stashed changes

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007252:	461a      	mov	r2, r3
 8007254:	f000 fc86 	bl	8007b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2150      	movs	r1, #80	@ 0x50
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fcdf 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 8007264:	e02c      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1f8>
=======
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008602:	461a      	mov	r2, r3
 8008604:	f000 fde6 	bl	80091d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2150      	movs	r1, #80	@ 0x50
 800860e:	4618      	mov	r0, r3
 8008610:	f000 fe3f 	bl	8009292 <TIM_ITRx_SetConfig>
      break;
 8008614:	e02c      	b.n	8008670 <HAL_TIM_ConfigClockSource+0x1f8>
>>>>>>> Stashed changes

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007272:	461a      	mov	r2, r3
 8007274:	f000 fca5 	bl	8007bc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2160      	movs	r1, #96	@ 0x60
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fccf 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 8007284:	e01c      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1f8>
=======
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008622:	461a      	mov	r2, r3
 8008624:	f000 fe05 	bl	8009232 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2160      	movs	r1, #96	@ 0x60
 800862e:	4618      	mov	r0, r3
 8008630:	f000 fe2f 	bl	8009292 <TIM_ITRx_SetConfig>
      break;
 8008634:	e01c      	b.n	8008670 <HAL_TIM_ConfigClockSource+0x1f8>
>>>>>>> Stashed changes

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007292:	461a      	mov	r2, r3
 8007294:	f000 fc66 	bl	8007b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2140      	movs	r1, #64	@ 0x40
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 fcbf 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 80072a4:	e00c      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1f8>
=======
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008642:	461a      	mov	r2, r3
 8008644:	f000 fdc6 	bl	80091d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2140      	movs	r1, #64	@ 0x40
 800864e:	4618      	mov	r0, r3
 8008650:	f000 fe1f 	bl	8009292 <TIM_ITRx_SetConfig>
      break;
 8008654:	e00c      	b.n	8008670 <HAL_TIM_ConfigClockSource+0x1f8>
>>>>>>> Stashed changes
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< Updated upstream
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4619      	mov	r1, r3
 80072b0:	4610      	mov	r0, r2
 80072b2:	f000 fcb6 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 80072b6:	e003      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1f8>
=======
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4619      	mov	r1, r3
 8008660:	4610      	mov	r0, r2
 8008662:	f000 fe16 	bl	8009292 <TIM_ITRx_SetConfig>
      break;
 8008666:	e003      	b.n	8008670 <HAL_TIM_ConfigClockSource+0x1f8>
>>>>>>> Stashed changes
    }

    default:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 80072b8:	2301      	movs	r3, #1
 80072ba:	73fb      	strb	r3, [r7, #15]
      break;
 80072bc:	e000      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80072be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	00100070 	.word	0x00100070
 80072e0:	00100060 	.word	0x00100060
 80072e4:	00100050 	.word	0x00100050
 80072e8:	00100040 	.word	0x00100040
 80072ec:	00100030 	.word	0x00100030
 80072f0:	00100020 	.word	0x00100020

080072f4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
=======
 8008668:	2301      	movs	r3, #1
 800866a:	73fb      	strb	r3, [r7, #15]
      break;
 800866c:	e000      	b.n	8008670 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800866e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008680:	7bfb      	ldrb	r3, [r7, #15]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	00100070 	.word	0x00100070
 8008690:	00100060 	.word	0x00100060
 8008694:	00100050 	.word	0x00100050
 8008698:	00100040 	.word	0x00100040
 800869c:	00100030 	.word	0x00100030
 80086a0:	00100020 	.word	0x00100020

080086a4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
>>>>>>> Stashed changes
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
=======
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
=======
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_TIM_IC_CaptureCallback>:
=======
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Stashed changes
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
=======
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_TIM_IC_CaptureHalfCpltCallback>:
=======
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
>>>>>>> Stashed changes
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
=======
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> Stashed changes
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
=======
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
=======
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
>>>>>>> Stashed changes
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
=======
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_TIM_TriggerCallback>:
=======
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <HAL_TIM_TriggerCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
=======
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_TIM_TriggerHalfCpltCallback>:
=======
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <HAL_TIM_TriggerHalfCpltCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
=======
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_TIM_ErrorCallback>:
=======
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <HAL_TIM_ErrorCallback>:
>>>>>>> Stashed changes
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
=======
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <TIM_Base_SetConfig>:
=======
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	460b      	mov	r3, r1
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e14a      	b.n	8008a0a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b01      	cmp	r3, #1
 800877e:	f040 80dd 	bne.w	800893c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008782:	7afb      	ldrb	r3, [r7, #11]
 8008784:	2b1f      	cmp	r3, #31
 8008786:	f200 80d6 	bhi.w	8008936 <HAL_TIM_RegisterCallback+0x1de>
 800878a:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <HAL_TIM_RegisterCallback+0x38>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	08008811 	.word	0x08008811
 8008794:	08008819 	.word	0x08008819
 8008798:	08008821 	.word	0x08008821
 800879c:	08008829 	.word	0x08008829
 80087a0:	08008831 	.word	0x08008831
 80087a4:	08008839 	.word	0x08008839
 80087a8:	08008841 	.word	0x08008841
 80087ac:	08008849 	.word	0x08008849
 80087b0:	08008851 	.word	0x08008851
 80087b4:	08008859 	.word	0x08008859
 80087b8:	08008861 	.word	0x08008861
 80087bc:	08008869 	.word	0x08008869
 80087c0:	08008871 	.word	0x08008871
 80087c4:	08008879 	.word	0x08008879
 80087c8:	08008883 	.word	0x08008883
 80087cc:	0800888d 	.word	0x0800888d
 80087d0:	08008897 	.word	0x08008897
 80087d4:	080088a1 	.word	0x080088a1
 80087d8:	080088ab 	.word	0x080088ab
 80087dc:	080088b5 	.word	0x080088b5
 80087e0:	080088bf 	.word	0x080088bf
 80087e4:	080088c9 	.word	0x080088c9
 80087e8:	080088d3 	.word	0x080088d3
 80087ec:	080088dd 	.word	0x080088dd
 80087f0:	080088e7 	.word	0x080088e7
 80087f4:	080088f1 	.word	0x080088f1
 80087f8:	080088fb 	.word	0x080088fb
 80087fc:	08008905 	.word	0x08008905
 8008800:	0800890f 	.word	0x0800890f
 8008804:	08008919 	.word	0x08008919
 8008808:	08008923 	.word	0x08008923
 800880c:	0800892d 	.word	0x0800892d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008816:	e0f7      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800881e:	e0f3      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008826:	e0ef      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800882e:	e0eb      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008836:	e0e7      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800883e:	e0e3      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008846:	e0df      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800884e:	e0db      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008856:	e0d7      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800885e:	e0d3      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008866:	e0cf      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800886e:	e0cb      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008876:	e0c7      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008880:	e0c2      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800888a:	e0bd      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008894:	e0b8      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800889e:	e0b3      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80088a8:	e0ae      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80088b2:	e0a9      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80088bc:	e0a4      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80088c6:	e09f      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80088d0:	e09a      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80088da:	e095      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80088e4:	e090      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80088ee:	e08b      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80088f8:	e086      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008902:	e081      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800890c:	e07c      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008916:	e077      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008920:	e072      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800892a:	e06d      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008934:	e068      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	75fb      	strb	r3, [r7, #23]
        break;
 800893a:	e065      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b00      	cmp	r3, #0
 8008946:	d15d      	bne.n	8008a04 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008948:	7afb      	ldrb	r3, [r7, #11]
 800894a:	2b0d      	cmp	r3, #13
 800894c:	d857      	bhi.n	80089fe <HAL_TIM_RegisterCallback+0x2a6>
 800894e:	a201      	add	r2, pc, #4	@ (adr r2, 8008954 <HAL_TIM_RegisterCallback+0x1fc>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	0800898d 	.word	0x0800898d
 8008958:	08008995 	.word	0x08008995
 800895c:	0800899d 	.word	0x0800899d
 8008960:	080089a5 	.word	0x080089a5
 8008964:	080089ad 	.word	0x080089ad
 8008968:	080089b5 	.word	0x080089b5
 800896c:	080089bd 	.word	0x080089bd
 8008970:	080089c5 	.word	0x080089c5
 8008974:	080089cd 	.word	0x080089cd
 8008978:	080089d5 	.word	0x080089d5
 800897c:	080089dd 	.word	0x080089dd
 8008980:	080089e5 	.word	0x080089e5
 8008984:	080089ed 	.word	0x080089ed
 8008988:	080089f5 	.word	0x080089f5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008992:	e039      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800899a:	e035      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80089a2:	e031      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80089aa:	e02d      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80089b2:	e029      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80089ba:	e025      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80089c2:	e021      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80089ca:	e01d      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80089d2:	e019      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80089da:	e015      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80089e2:	e011      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80089ea:	e00d      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80089f2:	e009      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80089fc:	e004      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	75fb      	strb	r3, [r7, #23]
        break;
 8008a02:	e001      	b.n	8008a08 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	371c      	adds	r7, #28
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a4c      	ldr	r2, [pc, #304]	@ (80074ec <TIM_Base_SetConfig+0x144>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d017      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c6:	d013      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a49      	ldr	r2, [pc, #292]	@ (80074f0 <TIM_Base_SetConfig+0x148>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00f      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a48      	ldr	r2, [pc, #288]	@ (80074f4 <TIM_Base_SetConfig+0x14c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00b      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a47      	ldr	r2, [pc, #284]	@ (80074f8 <TIM_Base_SetConfig+0x150>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d007      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a46      	ldr	r2, [pc, #280]	@ (80074fc <TIM_Base_SetConfig+0x154>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d003      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a45      	ldr	r2, [pc, #276]	@ (8007500 <TIM_Base_SetConfig+0x158>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d108      	bne.n	8007402 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a39      	ldr	r2, [pc, #228]	@ (80074ec <TIM_Base_SetConfig+0x144>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d023      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007410:	d01f      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a36      	ldr	r2, [pc, #216]	@ (80074f0 <TIM_Base_SetConfig+0x148>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d01b      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a35      	ldr	r2, [pc, #212]	@ (80074f4 <TIM_Base_SetConfig+0x14c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d017      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a34      	ldr	r2, [pc, #208]	@ (80074f8 <TIM_Base_SetConfig+0x150>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d013      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a33      	ldr	r2, [pc, #204]	@ (80074fc <TIM_Base_SetConfig+0x154>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d00f      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a33      	ldr	r2, [pc, #204]	@ (8007504 <TIM_Base_SetConfig+0x15c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00b      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a32      	ldr	r2, [pc, #200]	@ (8007508 <TIM_Base_SetConfig+0x160>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d007      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a31      	ldr	r2, [pc, #196]	@ (800750c <TIM_Base_SetConfig+0x164>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d003      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a2c      	ldr	r2, [pc, #176]	@ (8007500 <TIM_Base_SetConfig+0x158>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d108      	bne.n	8007464 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	4313      	orrs	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]
=======
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a4c      	ldr	r2, [pc, #304]	@ (8008b5c <TIM_Base_SetConfig+0x144>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d017      	beq.n	8008a60 <TIM_Base_SetConfig+0x48>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a36:	d013      	beq.n	8008a60 <TIM_Base_SetConfig+0x48>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a49      	ldr	r2, [pc, #292]	@ (8008b60 <TIM_Base_SetConfig+0x148>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d00f      	beq.n	8008a60 <TIM_Base_SetConfig+0x48>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a48      	ldr	r2, [pc, #288]	@ (8008b64 <TIM_Base_SetConfig+0x14c>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d00b      	beq.n	8008a60 <TIM_Base_SetConfig+0x48>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a47      	ldr	r2, [pc, #284]	@ (8008b68 <TIM_Base_SetConfig+0x150>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d007      	beq.n	8008a60 <TIM_Base_SetConfig+0x48>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a46      	ldr	r2, [pc, #280]	@ (8008b6c <TIM_Base_SetConfig+0x154>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d003      	beq.n	8008a60 <TIM_Base_SetConfig+0x48>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a45      	ldr	r2, [pc, #276]	@ (8008b70 <TIM_Base_SetConfig+0x158>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d108      	bne.n	8008a72 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a39      	ldr	r2, [pc, #228]	@ (8008b5c <TIM_Base_SetConfig+0x144>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d023      	beq.n	8008ac2 <TIM_Base_SetConfig+0xaa>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a80:	d01f      	beq.n	8008ac2 <TIM_Base_SetConfig+0xaa>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a36      	ldr	r2, [pc, #216]	@ (8008b60 <TIM_Base_SetConfig+0x148>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d01b      	beq.n	8008ac2 <TIM_Base_SetConfig+0xaa>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a35      	ldr	r2, [pc, #212]	@ (8008b64 <TIM_Base_SetConfig+0x14c>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d017      	beq.n	8008ac2 <TIM_Base_SetConfig+0xaa>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a34      	ldr	r2, [pc, #208]	@ (8008b68 <TIM_Base_SetConfig+0x150>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d013      	beq.n	8008ac2 <TIM_Base_SetConfig+0xaa>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a33      	ldr	r2, [pc, #204]	@ (8008b6c <TIM_Base_SetConfig+0x154>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d00f      	beq.n	8008ac2 <TIM_Base_SetConfig+0xaa>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a33      	ldr	r2, [pc, #204]	@ (8008b74 <TIM_Base_SetConfig+0x15c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d00b      	beq.n	8008ac2 <TIM_Base_SetConfig+0xaa>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a32      	ldr	r2, [pc, #200]	@ (8008b78 <TIM_Base_SetConfig+0x160>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d007      	beq.n	8008ac2 <TIM_Base_SetConfig+0xaa>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a31      	ldr	r2, [pc, #196]	@ (8008b7c <TIM_Base_SetConfig+0x164>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d003      	beq.n	8008ac2 <TIM_Base_SetConfig+0xaa>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a2c      	ldr	r2, [pc, #176]	@ (8008b70 <TIM_Base_SetConfig+0x158>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d108      	bne.n	8008ad4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a18      	ldr	r2, [pc, #96]	@ (80074ec <TIM_Base_SetConfig+0x144>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d013      	beq.n	80074b8 <TIM_Base_SetConfig+0x110>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a1a      	ldr	r2, [pc, #104]	@ (80074fc <TIM_Base_SetConfig+0x154>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00f      	beq.n	80074b8 <TIM_Base_SetConfig+0x110>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a1a      	ldr	r2, [pc, #104]	@ (8007504 <TIM_Base_SetConfig+0x15c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d00b      	beq.n	80074b8 <TIM_Base_SetConfig+0x110>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a19      	ldr	r2, [pc, #100]	@ (8007508 <TIM_Base_SetConfig+0x160>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d007      	beq.n	80074b8 <TIM_Base_SetConfig+0x110>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a18      	ldr	r2, [pc, #96]	@ (800750c <TIM_Base_SetConfig+0x164>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d003      	beq.n	80074b8 <TIM_Base_SetConfig+0x110>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a13      	ldr	r2, [pc, #76]	@ (8007500 <TIM_Base_SetConfig+0x158>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d103      	bne.n	80074c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	689a      	ldr	r2, [r3, #8]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a18      	ldr	r2, [pc, #96]	@ (8008b5c <TIM_Base_SetConfig+0x144>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d013      	beq.n	8008b28 <TIM_Base_SetConfig+0x110>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a1a      	ldr	r2, [pc, #104]	@ (8008b6c <TIM_Base_SetConfig+0x154>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00f      	beq.n	8008b28 <TIM_Base_SetConfig+0x110>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8008b74 <TIM_Base_SetConfig+0x15c>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00b      	beq.n	8008b28 <TIM_Base_SetConfig+0x110>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a19      	ldr	r2, [pc, #100]	@ (8008b78 <TIM_Base_SetConfig+0x160>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d007      	beq.n	8008b28 <TIM_Base_SetConfig+0x110>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a18      	ldr	r2, [pc, #96]	@ (8008b7c <TIM_Base_SetConfig+0x164>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d003      	beq.n	8008b28 <TIM_Base_SetConfig+0x110>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a13      	ldr	r2, [pc, #76]	@ (8008b70 <TIM_Base_SetConfig+0x158>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d103      	bne.n	8008b30 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	691a      	ldr	r2, [r3, #16]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d105      	bne.n	80074de <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f023 0201 	bic.w	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	611a      	str	r2, [r3, #16]
  }
}
 80074de:	bf00      	nop
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	40012c00 	.word	0x40012c00
 80074f0:	40000400 	.word	0x40000400
 80074f4:	40000800 	.word	0x40000800
 80074f8:	40000c00 	.word	0x40000c00
 80074fc:	40013400 	.word	0x40013400
 8007500:	40015000 	.word	0x40015000
 8007504:	40014000 	.word	0x40014000
 8007508:	40014400 	.word	0x40014400
 800750c:	40014800 	.word	0x40014800

08007510 <TIM_OC1_SetConfig>:
=======
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	f003 0301 	and.w	r3, r3, #1
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d105      	bne.n	8008b4e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	f023 0201 	bic.w	r2, r3, #1
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	611a      	str	r2, [r3, #16]
  }
}
 8008b4e:	bf00      	nop
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	40012c00 	.word	0x40012c00
 8008b60:	40000400 	.word	0x40000400
 8008b64:	40000800 	.word	0x40000800
 8008b68:	40000c00 	.word	0x40000c00
 8008b6c:	40013400 	.word	0x40013400
 8008b70:	40015000 	.word	0x40015000
 8008b74:	40014000 	.word	0x40014000
 8008b78:	40014400 	.word	0x40014400
 8008b7c:	40014800 	.word	0x40014800

08008b80 <TIM_OC1_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
=======
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	f023 0201 	bic.w	r2, r3, #1
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800753e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0303 	bic.w	r3, r3, #3
 800754a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f023 0302 	bic.w	r3, r3, #2
 800755c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	4313      	orrs	r3, r2
 8007566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a30      	ldr	r2, [pc, #192]	@ (800762c <TIM_OC1_SetConfig+0x11c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d013      	beq.n	8007598 <TIM_OC1_SetConfig+0x88>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a2f      	ldr	r2, [pc, #188]	@ (8007630 <TIM_OC1_SetConfig+0x120>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00f      	beq.n	8007598 <TIM_OC1_SetConfig+0x88>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a2e      	ldr	r2, [pc, #184]	@ (8007634 <TIM_OC1_SetConfig+0x124>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00b      	beq.n	8007598 <TIM_OC1_SetConfig+0x88>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a2d      	ldr	r2, [pc, #180]	@ (8007638 <TIM_OC1_SetConfig+0x128>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d007      	beq.n	8007598 <TIM_OC1_SetConfig+0x88>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a2c      	ldr	r2, [pc, #176]	@ (800763c <TIM_OC1_SetConfig+0x12c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <TIM_OC1_SetConfig+0x88>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a2b      	ldr	r2, [pc, #172]	@ (8007640 <TIM_OC1_SetConfig+0x130>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d10c      	bne.n	80075b2 <TIM_OC1_SetConfig+0xa2>
=======
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	f023 0201 	bic.w	r2, r3, #1
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0303 	bic.w	r3, r3, #3
 8008bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f023 0302 	bic.w	r3, r3, #2
 8008bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a30      	ldr	r2, [pc, #192]	@ (8008c9c <TIM_OC1_SetConfig+0x11c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d013      	beq.n	8008c08 <TIM_OC1_SetConfig+0x88>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a2f      	ldr	r2, [pc, #188]	@ (8008ca0 <TIM_OC1_SetConfig+0x120>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d00f      	beq.n	8008c08 <TIM_OC1_SetConfig+0x88>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a2e      	ldr	r2, [pc, #184]	@ (8008ca4 <TIM_OC1_SetConfig+0x124>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d00b      	beq.n	8008c08 <TIM_OC1_SetConfig+0x88>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a2d      	ldr	r2, [pc, #180]	@ (8008ca8 <TIM_OC1_SetConfig+0x128>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d007      	beq.n	8008c08 <TIM_OC1_SetConfig+0x88>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a2c      	ldr	r2, [pc, #176]	@ (8008cac <TIM_OC1_SetConfig+0x12c>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d003      	beq.n	8008c08 <TIM_OC1_SetConfig+0x88>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a2b      	ldr	r2, [pc, #172]	@ (8008cb0 <TIM_OC1_SetConfig+0x130>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d10c      	bne.n	8008c22 <TIM_OC1_SetConfig+0xa2>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< Updated upstream
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f023 0308 	bic.w	r3, r3, #8
 800759e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f023 0304 	bic.w	r3, r3, #4
 80075b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a1d      	ldr	r2, [pc, #116]	@ (800762c <TIM_OC1_SetConfig+0x11c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d013      	beq.n	80075e2 <TIM_OC1_SetConfig+0xd2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a1c      	ldr	r2, [pc, #112]	@ (8007630 <TIM_OC1_SetConfig+0x120>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00f      	beq.n	80075e2 <TIM_OC1_SetConfig+0xd2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007634 <TIM_OC1_SetConfig+0x124>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00b      	beq.n	80075e2 <TIM_OC1_SetConfig+0xd2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a1a      	ldr	r2, [pc, #104]	@ (8007638 <TIM_OC1_SetConfig+0x128>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d007      	beq.n	80075e2 <TIM_OC1_SetConfig+0xd2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a19      	ldr	r2, [pc, #100]	@ (800763c <TIM_OC1_SetConfig+0x12c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d003      	beq.n	80075e2 <TIM_OC1_SetConfig+0xd2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a18      	ldr	r2, [pc, #96]	@ (8007640 <TIM_OC1_SetConfig+0x130>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d111      	bne.n	8007606 <TIM_OC1_SetConfig+0xf6>
=======
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f023 0308 	bic.w	r3, r3, #8
 8008c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f023 0304 	bic.w	r3, r3, #4
 8008c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a1d      	ldr	r2, [pc, #116]	@ (8008c9c <TIM_OC1_SetConfig+0x11c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d013      	beq.n	8008c52 <TIM_OC1_SetConfig+0xd2>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8008ca0 <TIM_OC1_SetConfig+0x120>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d00f      	beq.n	8008c52 <TIM_OC1_SetConfig+0xd2>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a1b      	ldr	r2, [pc, #108]	@ (8008ca4 <TIM_OC1_SetConfig+0x124>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d00b      	beq.n	8008c52 <TIM_OC1_SetConfig+0xd2>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a1a      	ldr	r2, [pc, #104]	@ (8008ca8 <TIM_OC1_SetConfig+0x128>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d007      	beq.n	8008c52 <TIM_OC1_SetConfig+0xd2>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a19      	ldr	r2, [pc, #100]	@ (8008cac <TIM_OC1_SetConfig+0x12c>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d003      	beq.n	8008c52 <TIM_OC1_SetConfig+0xd2>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a18      	ldr	r2, [pc, #96]	@ (8008cb0 <TIM_OC1_SetConfig+0x130>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d111      	bne.n	8008c76 <TIM_OC1_SetConfig+0xf6>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< Updated upstream
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	613b      	str	r3, [r7, #16]
=======
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	621a      	str	r2, [r3, #32]
}
 8007620:	bf00      	nop
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	40012c00 	.word	0x40012c00
 8007630:	40013400 	.word	0x40013400
 8007634:	40014000 	.word	0x40014000
 8007638:	40014400 	.word	0x40014400
 800763c:	40014800 	.word	0x40014800
 8007640:	40015000 	.word	0x40015000

08007644 <TIM_OC2_SetConfig>:
=======
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	621a      	str	r2, [r3, #32]
}
 8008c90:	bf00      	nop
 8008c92:	371c      	adds	r7, #28
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	40012c00 	.word	0x40012c00
 8008ca0:	40013400 	.word	0x40013400
 8008ca4:	40014000 	.word	0x40014000
 8008ca8:	40014400 	.word	0x40014400
 8008cac:	40014800 	.word	0x40014800
 8008cb0:	40015000 	.word	0x40015000

08008cb4 <TIM_OC2_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
=======
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	f023 0210 	bic.w	r2, r3, #16
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800767e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f023 0320 	bic.w	r3, r3, #32
 8007692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a2c      	ldr	r2, [pc, #176]	@ (8007754 <TIM_OC2_SetConfig+0x110>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d007      	beq.n	80076b8 <TIM_OC2_SetConfig+0x74>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a2b      	ldr	r2, [pc, #172]	@ (8007758 <TIM_OC2_SetConfig+0x114>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d003      	beq.n	80076b8 <TIM_OC2_SetConfig+0x74>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a2a      	ldr	r2, [pc, #168]	@ (800775c <TIM_OC2_SetConfig+0x118>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d10d      	bne.n	80076d4 <TIM_OC2_SetConfig+0x90>
=======
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	f023 0210 	bic.w	r2, r3, #16
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	021b      	lsls	r3, r3, #8
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f023 0320 	bic.w	r3, r3, #32
 8008d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	011b      	lsls	r3, r3, #4
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a2c      	ldr	r2, [pc, #176]	@ (8008dc4 <TIM_OC2_SetConfig+0x110>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d007      	beq.n	8008d28 <TIM_OC2_SetConfig+0x74>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a2b      	ldr	r2, [pc, #172]	@ (8008dc8 <TIM_OC2_SetConfig+0x114>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d003      	beq.n	8008d28 <TIM_OC2_SetConfig+0x74>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a2a      	ldr	r2, [pc, #168]	@ (8008dcc <TIM_OC2_SetConfig+0x118>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d10d      	bne.n	8008d44 <TIM_OC2_SetConfig+0x90>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< Updated upstream
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007754 <TIM_OC2_SetConfig+0x110>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d013      	beq.n	8007704 <TIM_OC2_SetConfig+0xc0>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a1e      	ldr	r2, [pc, #120]	@ (8007758 <TIM_OC2_SetConfig+0x114>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d00f      	beq.n	8007704 <TIM_OC2_SetConfig+0xc0>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007760 <TIM_OC2_SetConfig+0x11c>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00b      	beq.n	8007704 <TIM_OC2_SetConfig+0xc0>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a1d      	ldr	r2, [pc, #116]	@ (8007764 <TIM_OC2_SetConfig+0x120>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d007      	beq.n	8007704 <TIM_OC2_SetConfig+0xc0>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a1c      	ldr	r2, [pc, #112]	@ (8007768 <TIM_OC2_SetConfig+0x124>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d003      	beq.n	8007704 <TIM_OC2_SetConfig+0xc0>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a17      	ldr	r2, [pc, #92]	@ (800775c <TIM_OC2_SetConfig+0x118>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d113      	bne.n	800772c <TIM_OC2_SetConfig+0xe8>
=======
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	011b      	lsls	r3, r3, #4
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a1f      	ldr	r2, [pc, #124]	@ (8008dc4 <TIM_OC2_SetConfig+0x110>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d013      	beq.n	8008d74 <TIM_OC2_SetConfig+0xc0>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8008dc8 <TIM_OC2_SetConfig+0x114>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d00f      	beq.n	8008d74 <TIM_OC2_SetConfig+0xc0>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a1e      	ldr	r2, [pc, #120]	@ (8008dd0 <TIM_OC2_SetConfig+0x11c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d00b      	beq.n	8008d74 <TIM_OC2_SetConfig+0xc0>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8008dd4 <TIM_OC2_SetConfig+0x120>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d007      	beq.n	8008d74 <TIM_OC2_SetConfig+0xc0>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a1c      	ldr	r2, [pc, #112]	@ (8008dd8 <TIM_OC2_SetConfig+0x124>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d003      	beq.n	8008d74 <TIM_OC2_SetConfig+0xc0>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a17      	ldr	r2, [pc, #92]	@ (8008dcc <TIM_OC2_SetConfig+0x118>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d113      	bne.n	8008d9c <TIM_OC2_SetConfig+0xe8>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< Updated upstream
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800770a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	4313      	orrs	r3, r2
 800771e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	4313      	orrs	r3, r2
 800772a:	613b      	str	r3, [r7, #16]
=======
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	695b      	ldr	r3, [r3, #20]
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	621a      	str	r2, [r3, #32]
}
 8007746:	bf00      	nop
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	40012c00 	.word	0x40012c00
 8007758:	40013400 	.word	0x40013400
 800775c:	40015000 	.word	0x40015000
 8007760:	40014000 	.word	0x40014000
 8007764:	40014400 	.word	0x40014400
 8007768:	40014800 	.word	0x40014800

0800776c <TIM_OC3_SetConfig>:
=======
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	693a      	ldr	r2, [r7, #16]
 8008da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	621a      	str	r2, [r3, #32]
}
 8008db6:	bf00      	nop
 8008db8:	371c      	adds	r7, #28
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	40012c00 	.word	0x40012c00
 8008dc8:	40013400 	.word	0x40013400
 8008dcc:	40015000 	.word	0x40015000
 8008dd0:	40014000 	.word	0x40014000
 8008dd4:	40014400 	.word	0x40014400
 8008dd8:	40014800 	.word	0x40014800

08008ddc <TIM_OC3_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
=======
 8008ddc:	b480      	push	{r7}
 8008dde:	b087      	sub	sp, #28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800779a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800779e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 0303 	bic.w	r3, r3, #3
 80077a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	021b      	lsls	r3, r3, #8
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a2b      	ldr	r2, [pc, #172]	@ (8007878 <TIM_OC3_SetConfig+0x10c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d007      	beq.n	80077de <TIM_OC3_SetConfig+0x72>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a2a      	ldr	r2, [pc, #168]	@ (800787c <TIM_OC3_SetConfig+0x110>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d003      	beq.n	80077de <TIM_OC3_SetConfig+0x72>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a29      	ldr	r2, [pc, #164]	@ (8007880 <TIM_OC3_SetConfig+0x114>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d10d      	bne.n	80077fa <TIM_OC3_SetConfig+0x8e>
=======
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 0303 	bic.w	r3, r3, #3
 8008e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	021b      	lsls	r3, r3, #8
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a2b      	ldr	r2, [pc, #172]	@ (8008ee8 <TIM_OC3_SetConfig+0x10c>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d007      	beq.n	8008e4e <TIM_OC3_SetConfig+0x72>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a2a      	ldr	r2, [pc, #168]	@ (8008eec <TIM_OC3_SetConfig+0x110>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d003      	beq.n	8008e4e <TIM_OC3_SetConfig+0x72>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a29      	ldr	r2, [pc, #164]	@ (8008ef0 <TIM_OC3_SetConfig+0x114>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d10d      	bne.n	8008e6a <TIM_OC3_SetConfig+0x8e>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< Updated upstream
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	021b      	lsls	r3, r3, #8
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a1e      	ldr	r2, [pc, #120]	@ (8007878 <TIM_OC3_SetConfig+0x10c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <TIM_OC3_SetConfig+0xbe>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a1d      	ldr	r2, [pc, #116]	@ (800787c <TIM_OC3_SetConfig+0x110>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00f      	beq.n	800782a <TIM_OC3_SetConfig+0xbe>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a1d      	ldr	r2, [pc, #116]	@ (8007884 <TIM_OC3_SetConfig+0x118>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00b      	beq.n	800782a <TIM_OC3_SetConfig+0xbe>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a1c      	ldr	r2, [pc, #112]	@ (8007888 <TIM_OC3_SetConfig+0x11c>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d007      	beq.n	800782a <TIM_OC3_SetConfig+0xbe>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a1b      	ldr	r2, [pc, #108]	@ (800788c <TIM_OC3_SetConfig+0x120>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d003      	beq.n	800782a <TIM_OC3_SetConfig+0xbe>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a16      	ldr	r2, [pc, #88]	@ (8007880 <TIM_OC3_SetConfig+0x114>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d113      	bne.n	8007852 <TIM_OC3_SetConfig+0xe6>
=======
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	021b      	lsls	r3, r3, #8
 8008e5c:	697a      	ldr	r2, [r7, #20]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8008ee8 <TIM_OC3_SetConfig+0x10c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d013      	beq.n	8008e9a <TIM_OC3_SetConfig+0xbe>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a1d      	ldr	r2, [pc, #116]	@ (8008eec <TIM_OC3_SetConfig+0x110>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d00f      	beq.n	8008e9a <TIM_OC3_SetConfig+0xbe>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ef4 <TIM_OC3_SetConfig+0x118>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d00b      	beq.n	8008e9a <TIM_OC3_SetConfig+0xbe>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a1c      	ldr	r2, [pc, #112]	@ (8008ef8 <TIM_OC3_SetConfig+0x11c>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d007      	beq.n	8008e9a <TIM_OC3_SetConfig+0xbe>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8008efc <TIM_OC3_SetConfig+0x120>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d003      	beq.n	8008e9a <TIM_OC3_SetConfig+0xbe>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a16      	ldr	r2, [pc, #88]	@ (8008ef0 <TIM_OC3_SetConfig+0x114>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d113      	bne.n	8008ec2 <TIM_OC3_SetConfig+0xe6>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< Updated upstream
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]
=======
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	011b      	lsls	r3, r3, #4
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	011b      	lsls	r3, r3, #4
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	621a      	str	r2, [r3, #32]
}
 800786c:	bf00      	nop
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	40012c00 	.word	0x40012c00
 800787c:	40013400 	.word	0x40013400
 8007880:	40015000 	.word	0x40015000
 8007884:	40014000 	.word	0x40014000
 8007888:	40014400 	.word	0x40014400
 800788c:	40014800 	.word	0x40014800

08007890 <TIM_OC4_SetConfig>:
=======
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	621a      	str	r2, [r3, #32]
}
 8008edc:	bf00      	nop
 8008ede:	371c      	adds	r7, #28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	40012c00 	.word	0x40012c00
 8008eec:	40013400 	.word	0x40013400
 8008ef0:	40015000 	.word	0x40015000
 8008ef4:	40014000 	.word	0x40014000
 8008ef8:	40014400 	.word	0x40014400
 8008efc:	40014800 	.word	0x40014800

08008f00 <TIM_OC4_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
=======
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	021b      	lsls	r3, r3, #8
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	031b      	lsls	r3, r3, #12
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a2c      	ldr	r2, [pc, #176]	@ (80079a0 <TIM_OC4_SetConfig+0x110>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d007      	beq.n	8007904 <TIM_OC4_SetConfig+0x74>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a2b      	ldr	r2, [pc, #172]	@ (80079a4 <TIM_OC4_SetConfig+0x114>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d003      	beq.n	8007904 <TIM_OC4_SetConfig+0x74>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a2a      	ldr	r2, [pc, #168]	@ (80079a8 <TIM_OC4_SetConfig+0x118>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d10d      	bne.n	8007920 <TIM_OC4_SetConfig+0x90>
=======
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a1b      	ldr	r3, [r3, #32]
 8008f14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	021b      	lsls	r3, r3, #8
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	031b      	lsls	r3, r3, #12
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8009010 <TIM_OC4_SetConfig+0x110>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d007      	beq.n	8008f74 <TIM_OC4_SetConfig+0x74>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a2b      	ldr	r2, [pc, #172]	@ (8009014 <TIM_OC4_SetConfig+0x114>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d003      	beq.n	8008f74 <TIM_OC4_SetConfig+0x74>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8009018 <TIM_OC4_SetConfig+0x118>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d10d      	bne.n	8008f90 <TIM_OC4_SetConfig+0x90>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
<<<<<<< Updated upstream
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800790a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	031b      	lsls	r3, r3, #12
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	4313      	orrs	r3, r2
 8007916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800791e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a1f      	ldr	r2, [pc, #124]	@ (80079a0 <TIM_OC4_SetConfig+0x110>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d013      	beq.n	8007950 <TIM_OC4_SetConfig+0xc0>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a1e      	ldr	r2, [pc, #120]	@ (80079a4 <TIM_OC4_SetConfig+0x114>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00f      	beq.n	8007950 <TIM_OC4_SetConfig+0xc0>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a1e      	ldr	r2, [pc, #120]	@ (80079ac <TIM_OC4_SetConfig+0x11c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00b      	beq.n	8007950 <TIM_OC4_SetConfig+0xc0>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a1d      	ldr	r2, [pc, #116]	@ (80079b0 <TIM_OC4_SetConfig+0x120>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d007      	beq.n	8007950 <TIM_OC4_SetConfig+0xc0>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a1c      	ldr	r2, [pc, #112]	@ (80079b4 <TIM_OC4_SetConfig+0x124>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d003      	beq.n	8007950 <TIM_OC4_SetConfig+0xc0>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a17      	ldr	r2, [pc, #92]	@ (80079a8 <TIM_OC4_SetConfig+0x118>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d113      	bne.n	8007978 <TIM_OC4_SetConfig+0xe8>
=======
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	031b      	lsls	r3, r3, #12
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a1f      	ldr	r2, [pc, #124]	@ (8009010 <TIM_OC4_SetConfig+0x110>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d013      	beq.n	8008fc0 <TIM_OC4_SetConfig+0xc0>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8009014 <TIM_OC4_SetConfig+0x114>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d00f      	beq.n	8008fc0 <TIM_OC4_SetConfig+0xc0>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800901c <TIM_OC4_SetConfig+0x11c>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d00b      	beq.n	8008fc0 <TIM_OC4_SetConfig+0xc0>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a1d      	ldr	r2, [pc, #116]	@ (8009020 <TIM_OC4_SetConfig+0x120>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d007      	beq.n	8008fc0 <TIM_OC4_SetConfig+0xc0>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8009024 <TIM_OC4_SetConfig+0x124>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d003      	beq.n	8008fc0 <TIM_OC4_SetConfig+0xc0>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a17      	ldr	r2, [pc, #92]	@ (8009018 <TIM_OC4_SetConfig+0x118>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d113      	bne.n	8008fe8 <TIM_OC4_SetConfig+0xe8>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< Updated upstream
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007956:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800795e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	019b      	lsls	r3, r3, #6
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	4313      	orrs	r3, r2
 800796a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	019b      	lsls	r3, r3, #6
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	4313      	orrs	r3, r2
 8007976:	613b      	str	r3, [r7, #16]
=======
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fc6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008fce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	019b      	lsls	r3, r3, #6
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	019b      	lsls	r3, r3, #6
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	621a      	str	r2, [r3, #32]
}
 8007992:	bf00      	nop
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	40012c00 	.word	0x40012c00
 80079a4:	40013400 	.word	0x40013400
 80079a8:	40015000 	.word	0x40015000
 80079ac:	40014000 	.word	0x40014000
 80079b0:	40014400 	.word	0x40014400
 80079b4:	40014800 	.word	0x40014800

080079b8 <TIM_OC5_SetConfig>:
=======
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	621a      	str	r2, [r3, #32]
}
 8009002:	bf00      	nop
 8009004:	371c      	adds	r7, #28
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	40012c00 	.word	0x40012c00
 8009014:	40013400 	.word	0x40013400
 8009018:	40015000 	.word	0x40015000
 800901c:	40014000 	.word	0x40014000
 8009020:	40014400 	.word	0x40014400
 8009024:	40014800 	.word	0x40014800

08009028 <TIM_OC5_SetConfig>:
>>>>>>> Stashed changes
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
=======
 8009028:	b480      	push	{r7}
 800902a:	b087      	sub	sp, #28
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80079fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	041b      	lsls	r3, r3, #16
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a19      	ldr	r2, [pc, #100]	@ (8007a74 <TIM_OC5_SetConfig+0xbc>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d013      	beq.n	8007a3a <TIM_OC5_SetConfig+0x82>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a18      	ldr	r2, [pc, #96]	@ (8007a78 <TIM_OC5_SetConfig+0xc0>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d00f      	beq.n	8007a3a <TIM_OC5_SetConfig+0x82>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a17      	ldr	r2, [pc, #92]	@ (8007a7c <TIM_OC5_SetConfig+0xc4>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d00b      	beq.n	8007a3a <TIM_OC5_SetConfig+0x82>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a16      	ldr	r2, [pc, #88]	@ (8007a80 <TIM_OC5_SetConfig+0xc8>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d007      	beq.n	8007a3a <TIM_OC5_SetConfig+0x82>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a15      	ldr	r2, [pc, #84]	@ (8007a84 <TIM_OC5_SetConfig+0xcc>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d003      	beq.n	8007a3a <TIM_OC5_SetConfig+0x82>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a14      	ldr	r2, [pc, #80]	@ (8007a88 <TIM_OC5_SetConfig+0xd0>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d109      	bne.n	8007a4e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	021b      	lsls	r3, r3, #8
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	621a      	str	r2, [r3, #32]
}
 8007a68:	bf00      	nop
 8007a6a:	371c      	adds	r7, #28
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	40012c00 	.word	0x40012c00
 8007a78:	40013400 	.word	0x40013400
 8007a7c:	40014000 	.word	0x40014000
 8007a80:	40014400 	.word	0x40014400
 8007a84:	40014800 	.word	0x40014800
 8007a88:	40015000 	.word	0x40015000

08007a8c <TIM_OC6_SetConfig>:
=======
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a1b      	ldr	r3, [r3, #32]
 8009036:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800904e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800905a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800906c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	041b      	lsls	r3, r3, #16
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	4313      	orrs	r3, r2
 8009078:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a19      	ldr	r2, [pc, #100]	@ (80090e4 <TIM_OC5_SetConfig+0xbc>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d013      	beq.n	80090aa <TIM_OC5_SetConfig+0x82>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a18      	ldr	r2, [pc, #96]	@ (80090e8 <TIM_OC5_SetConfig+0xc0>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d00f      	beq.n	80090aa <TIM_OC5_SetConfig+0x82>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a17      	ldr	r2, [pc, #92]	@ (80090ec <TIM_OC5_SetConfig+0xc4>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d00b      	beq.n	80090aa <TIM_OC5_SetConfig+0x82>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a16      	ldr	r2, [pc, #88]	@ (80090f0 <TIM_OC5_SetConfig+0xc8>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d007      	beq.n	80090aa <TIM_OC5_SetConfig+0x82>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a15      	ldr	r2, [pc, #84]	@ (80090f4 <TIM_OC5_SetConfig+0xcc>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d003      	beq.n	80090aa <TIM_OC5_SetConfig+0x82>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a14      	ldr	r2, [pc, #80]	@ (80090f8 <TIM_OC5_SetConfig+0xd0>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d109      	bne.n	80090be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	021b      	lsls	r3, r3, #8
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	621a      	str	r2, [r3, #32]
}
 80090d8:	bf00      	nop
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	40012c00 	.word	0x40012c00
 80090e8:	40013400 	.word	0x40013400
 80090ec:	40014000 	.word	0x40014000
 80090f0:	40014400 	.word	0x40014400
 80090f4:	40014800 	.word	0x40014800
 80090f8:	40015000 	.word	0x40015000

080090fc <TIM_OC6_SetConfig>:
>>>>>>> Stashed changes
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
=======
 80090fc:	b480      	push	{r7}
 80090fe:	b087      	sub	sp, #28
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007aba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	051b      	lsls	r3, r3, #20
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8007b4c <TIM_OC6_SetConfig+0xc0>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d013      	beq.n	8007b10 <TIM_OC6_SetConfig+0x84>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a19      	ldr	r2, [pc, #100]	@ (8007b50 <TIM_OC6_SetConfig+0xc4>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00f      	beq.n	8007b10 <TIM_OC6_SetConfig+0x84>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a18      	ldr	r2, [pc, #96]	@ (8007b54 <TIM_OC6_SetConfig+0xc8>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00b      	beq.n	8007b10 <TIM_OC6_SetConfig+0x84>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a17      	ldr	r2, [pc, #92]	@ (8007b58 <TIM_OC6_SetConfig+0xcc>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d007      	beq.n	8007b10 <TIM_OC6_SetConfig+0x84>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a16      	ldr	r2, [pc, #88]	@ (8007b5c <TIM_OC6_SetConfig+0xd0>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d003      	beq.n	8007b10 <TIM_OC6_SetConfig+0x84>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a15      	ldr	r2, [pc, #84]	@ (8007b60 <TIM_OC6_SetConfig+0xd4>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d109      	bne.n	8007b24 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	029b      	lsls	r3, r3, #10
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]
=======
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a1b      	ldr	r3, [r3, #32]
 8009110:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800912a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800912e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	021b      	lsls	r3, r3, #8
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	4313      	orrs	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	051b      	lsls	r3, r3, #20
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	4313      	orrs	r3, r2
 800914e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a1a      	ldr	r2, [pc, #104]	@ (80091bc <TIM_OC6_SetConfig+0xc0>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d013      	beq.n	8009180 <TIM_OC6_SetConfig+0x84>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a19      	ldr	r2, [pc, #100]	@ (80091c0 <TIM_OC6_SetConfig+0xc4>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d00f      	beq.n	8009180 <TIM_OC6_SetConfig+0x84>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a18      	ldr	r2, [pc, #96]	@ (80091c4 <TIM_OC6_SetConfig+0xc8>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d00b      	beq.n	8009180 <TIM_OC6_SetConfig+0x84>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a17      	ldr	r2, [pc, #92]	@ (80091c8 <TIM_OC6_SetConfig+0xcc>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d007      	beq.n	8009180 <TIM_OC6_SetConfig+0x84>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a16      	ldr	r2, [pc, #88]	@ (80091cc <TIM_OC6_SetConfig+0xd0>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d003      	beq.n	8009180 <TIM_OC6_SetConfig+0x84>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a15      	ldr	r2, [pc, #84]	@ (80091d0 <TIM_OC6_SetConfig+0xd4>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d109      	bne.n	8009194 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009186:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	029b      	lsls	r3, r3, #10
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	4313      	orrs	r3, r2
 8009192:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	621a      	str	r2, [r3, #32]
}
 8007b3e:	bf00      	nop
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	40012c00 	.word	0x40012c00
 8007b50:	40013400 	.word	0x40013400
 8007b54:	40014000 	.word	0x40014000
 8007b58:	40014400 	.word	0x40014400
 8007b5c:	40014800 	.word	0x40014800
 8007b60:	40015000 	.word	0x40015000

08007b64 <TIM_TI1_ConfigInputStage>:
=======
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	621a      	str	r2, [r3, #32]
}
 80091ae:	bf00      	nop
 80091b0:	371c      	adds	r7, #28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	40012c00 	.word	0x40012c00
 80091c0:	40013400 	.word	0x40013400
 80091c4:	40014000 	.word	0x40014000
 80091c8:	40014400 	.word	0x40014400
 80091cc:	40014800 	.word	0x40014800
 80091d0:	40015000 	.word	0x40015000

080091d4 <TIM_TI1_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
=======
 80091d4:	b480      	push	{r7}
 80091d6:	b087      	sub	sp, #28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	f023 0201 	bic.w	r2, r3, #1
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	011b      	lsls	r3, r3, #4
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f023 030a 	bic.w	r3, r3, #10
 8007ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	621a      	str	r2, [r3, #32]
}
 8007bb6:	bf00      	nop
 8007bb8:	371c      	adds	r7, #28
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <TIM_TI2_ConfigInputStage>:
=======
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	f023 0201 	bic.w	r2, r3, #1
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	011b      	lsls	r3, r3, #4
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	4313      	orrs	r3, r2
 8009208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f023 030a 	bic.w	r3, r3, #10
 8009210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	4313      	orrs	r3, r2
 8009218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	621a      	str	r2, [r3, #32]
}
 8009226:	bf00      	nop
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <TIM_TI2_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8007bc2:	b480      	push	{r7}
 8007bc4:	b087      	sub	sp, #28
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
=======
 8009232:	b480      	push	{r7}
 8009234:	b087      	sub	sp, #28
 8009236:	af00      	add	r7, sp, #0
 8009238:	60f8      	str	r0, [r7, #12]
 800923a:	60b9      	str	r1, [r7, #8]
 800923c:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	f023 0210 	bic.w	r2, r3, #16
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	031b      	lsls	r3, r3, #12
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007bfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	621a      	str	r2, [r3, #32]
}
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <TIM_ITRx_SetConfig>:
=======
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6a1b      	ldr	r3, [r3, #32]
 8009248:	f023 0210 	bic.w	r2, r3, #16
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800925c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	031b      	lsls	r3, r3, #12
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	4313      	orrs	r3, r2
 8009266:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800926e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	011b      	lsls	r3, r3, #4
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	4313      	orrs	r3, r2
 8009278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	621a      	str	r2, [r3, #32]
}
 8009286:	bf00      	nop
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <TIM_ITRx_SetConfig>:
>>>>>>> Stashed changes
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< Updated upstream
 8007c22:	b480      	push	{r7}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	6039      	str	r1, [r7, #0]
=======
 8009292:	b480      	push	{r7}
 8009294:	b085      	sub	sp, #20
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< Updated upstream
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	f043 0307 	orr.w	r3, r3, #7
 8007c48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	609a      	str	r2, [r3, #8]
}
 8007c50:	bf00      	nop
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <TIM_ETR_SetConfig>:
=======
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80092a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	f043 0307 	orr.w	r3, r3, #7
 80092b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	609a      	str	r2, [r3, #8]
}
 80092c0:	bf00      	nop
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <TIM_ETR_SetConfig>:
>>>>>>> Stashed changes
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< Updated upstream
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	021a      	lsls	r2, r3, #8
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	609a      	str	r2, [r3, #8]
}
 8007c90:	bf00      	nop
 8007c92:	371c      	adds	r7, #28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <TIM_CCxChannelCmd>:
=======
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
 80092d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	021a      	lsls	r2, r3, #8
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	431a      	orrs	r2, r3
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	609a      	str	r2, [r3, #8]
}
 8009300:	bf00      	nop
 8009302:	371c      	adds	r7, #28
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <TIM_CCxChannelCmd>:
>>>>>>> Stashed changes
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< Updated upstream
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
=======
 800930c:	b480      	push	{r7}
 800930e:	b087      	sub	sp, #28
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< Updated upstream
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	f003 031f 	and.w	r3, r3, #31
 8007cae:	2201      	movs	r2, #1
 8007cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a1a      	ldr	r2, [r3, #32]
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	401a      	ands	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6a1a      	ldr	r2, [r3, #32]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	f003 031f 	and.w	r3, r3, #31
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	621a      	str	r2, [r3, #32]
}
 8007cda:	bf00      	nop
 8007cdc:	371c      	adds	r7, #28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
	...

08007ce8 <TIM_ResetCallback>:
=======
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	f003 031f 	and.w	r3, r3, #31
 800931e:	2201      	movs	r2, #1
 8009320:	fa02 f303 	lsl.w	r3, r2, r3
 8009324:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6a1a      	ldr	r2, [r3, #32]
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	43db      	mvns	r3, r3
 800932e:	401a      	ands	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6a1a      	ldr	r2, [r3, #32]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	f003 031f 	and.w	r3, r3, #31
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	fa01 f303 	lsl.w	r3, r1, r3
 8009344:	431a      	orrs	r2, r3
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	621a      	str	r2, [r3, #32]
}
 800934a:	bf00      	nop
 800934c:	371c      	adds	r7, #28
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
	...

08009358 <TIM_ResetCallback>:
>>>>>>> Stashed changes
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a26      	ldr	r2, [pc, #152]	@ (8007d8c <TIM_ResetCallback+0xa4>)
 8007cf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a25      	ldr	r2, [pc, #148]	@ (8007d90 <TIM_ResetCallback+0xa8>)
 8007cfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a24      	ldr	r2, [pc, #144]	@ (8007d94 <TIM_ResetCallback+0xac>)
 8007d04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a23      	ldr	r2, [pc, #140]	@ (8007d98 <TIM_ResetCallback+0xb0>)
 8007d0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a22      	ldr	r2, [pc, #136]	@ (8007d9c <TIM_ResetCallback+0xb4>)
 8007d14:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a21      	ldr	r2, [pc, #132]	@ (8007da0 <TIM_ResetCallback+0xb8>)
 8007d1c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a20      	ldr	r2, [pc, #128]	@ (8007da4 <TIM_ResetCallback+0xbc>)
 8007d24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8007da8 <TIM_ResetCallback+0xc0>)
 8007d2c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a1e      	ldr	r2, [pc, #120]	@ (8007dac <TIM_ResetCallback+0xc4>)
 8007d34:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8007db0 <TIM_ResetCallback+0xc8>)
 8007d3c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a1c      	ldr	r2, [pc, #112]	@ (8007db4 <TIM_ResetCallback+0xcc>)
 8007d44:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007db8 <TIM_ResetCallback+0xd0>)
 8007d4c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a1a      	ldr	r2, [pc, #104]	@ (8007dbc <TIM_ResetCallback+0xd4>)
 8007d54:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a19      	ldr	r2, [pc, #100]	@ (8007dc0 <TIM_ResetCallback+0xd8>)
 8007d5c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a18      	ldr	r2, [pc, #96]	@ (8007dc4 <TIM_ResetCallback+0xdc>)
 8007d64:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a17      	ldr	r2, [pc, #92]	@ (8007dc8 <TIM_ResetCallback+0xe0>)
 8007d6c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a16      	ldr	r2, [pc, #88]	@ (8007dcc <TIM_ResetCallback+0xe4>)
 8007d74:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a15      	ldr	r2, [pc, #84]	@ (8007dd0 <TIM_ResetCallback+0xe8>)
 8007d7c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	080018f5 	.word	0x080018f5
 8007d90:	080072f5 	.word	0x080072f5
 8007d94:	0800736d 	.word	0x0800736d
 8007d98:	08007381 	.word	0x08007381
 8007d9c:	0800731d 	.word	0x0800731d
 8007da0:	08007331 	.word	0x08007331
 8007da4:	08007309 	.word	0x08007309
 8007da8:	08007345 	.word	0x08007345
 8007dac:	08007359 	.word	0x08007359
 8007db0:	08007395 	.word	0x08007395
 8007db4:	08008029 	.word	0x08008029
 8007db8:	0800803d 	.word	0x0800803d
 8007dbc:	08008051 	.word	0x08008051
 8007dc0:	08008065 	.word	0x08008065
 8007dc4:	08008079 	.word	0x08008079
 8007dc8:	0800808d 	.word	0x0800808d
 8007dcc:	080080a1 	.word	0x080080a1
 8007dd0:	080080b5 	.word	0x080080b5

08007dd4 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a26      	ldr	r2, [pc, #152]	@ (80093fc <TIM_ResetCallback+0xa4>)
 8009364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a25      	ldr	r2, [pc, #148]	@ (8009400 <TIM_ResetCallback+0xa8>)
 800936c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a24      	ldr	r2, [pc, #144]	@ (8009404 <TIM_ResetCallback+0xac>)
 8009374:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a23      	ldr	r2, [pc, #140]	@ (8009408 <TIM_ResetCallback+0xb0>)
 800937c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a22      	ldr	r2, [pc, #136]	@ (800940c <TIM_ResetCallback+0xb4>)
 8009384:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a21      	ldr	r2, [pc, #132]	@ (8009410 <TIM_ResetCallback+0xb8>)
 800938c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a20      	ldr	r2, [pc, #128]	@ (8009414 <TIM_ResetCallback+0xbc>)
 8009394:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a1f      	ldr	r2, [pc, #124]	@ (8009418 <TIM_ResetCallback+0xc0>)
 800939c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a1e      	ldr	r2, [pc, #120]	@ (800941c <TIM_ResetCallback+0xc4>)
 80093a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a1d      	ldr	r2, [pc, #116]	@ (8009420 <TIM_ResetCallback+0xc8>)
 80093ac:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009424 <TIM_ResetCallback+0xcc>)
 80093b4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a1b      	ldr	r2, [pc, #108]	@ (8009428 <TIM_ResetCallback+0xd0>)
 80093bc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a1a      	ldr	r2, [pc, #104]	@ (800942c <TIM_ResetCallback+0xd4>)
 80093c4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a19      	ldr	r2, [pc, #100]	@ (8009430 <TIM_ResetCallback+0xd8>)
 80093cc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a18      	ldr	r2, [pc, #96]	@ (8009434 <TIM_ResetCallback+0xdc>)
 80093d4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a17      	ldr	r2, [pc, #92]	@ (8009438 <TIM_ResetCallback+0xe0>)
 80093dc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a16      	ldr	r2, [pc, #88]	@ (800943c <TIM_ResetCallback+0xe4>)
 80093e4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a15      	ldr	r2, [pc, #84]	@ (8009440 <TIM_ResetCallback+0xe8>)
 80093ec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr
 80093fc:	08002665 	.word	0x08002665
 8009400:	080086a5 	.word	0x080086a5
 8009404:	0800871d 	.word	0x0800871d
 8009408:	08008731 	.word	0x08008731
 800940c:	080086cd 	.word	0x080086cd
 8009410:	080086e1 	.word	0x080086e1
 8009414:	080086b9 	.word	0x080086b9
 8009418:	080086f5 	.word	0x080086f5
 800941c:	08008709 	.word	0x08008709
 8009420:	08008745 	.word	0x08008745
 8009424:	08009699 	.word	0x08009699
 8009428:	080096ad 	.word	0x080096ad
 800942c:	080096c1 	.word	0x080096c1
 8009430:	080096d5 	.word	0x080096d5
 8009434:	080096e9 	.word	0x080096e9
 8009438:	080096fd 	.word	0x080096fd
 800943c:	08009711 	.word	0x08009711
 8009440:	08009725 	.word	0x08009725

08009444 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> Stashed changes
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< Updated upstream
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
=======
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d101      	bne.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007de8:	2302      	movs	r3, #2
 8007dea:	e074      	b.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a34      	ldr	r2, [pc, #208]	@ (8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d009      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a33      	ldr	r2, [pc, #204]	@ (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d004      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a31      	ldr	r2, [pc, #196]	@ (8007eec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d108      	bne.n	8007e3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
=======
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009454:	2b01      	cmp	r3, #1
 8009456:	d101      	bne.n	800945c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009458:	2302      	movs	r3, #2
 800945a:	e074      	b.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2202      	movs	r2, #2
 8009468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a34      	ldr	r2, [pc, #208]	@ (8009554 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d009      	beq.n	800949a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a33      	ldr	r2, [pc, #204]	@ (8009558 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d004      	beq.n	800949a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a31      	ldr	r2, [pc, #196]	@ (800955c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d108      	bne.n	80094ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< Updated upstream
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007e30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
=======
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80094a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< Updated upstream
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a21      	ldr	r2, [pc, #132]	@ (8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d022      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e6c:	d01d      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a1f      	ldr	r2, [pc, #124]	@ (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d018      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d013      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a1c      	ldr	r2, [pc, #112]	@ (8007ef8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d00e      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a15      	ldr	r2, [pc, #84]	@ (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d009      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a18      	ldr	r2, [pc, #96]	@ (8007efc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d004      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a11      	ldr	r2, [pc, #68]	@ (8007eec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d10c      	bne.n	8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	609a      	str	r2, [r3, #8]
=======
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80094b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	4313      	orrs	r3, r2
 80094c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a21      	ldr	r2, [pc, #132]	@ (8009554 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d022      	beq.n	800951a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094dc:	d01d      	beq.n	800951a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a1f      	ldr	r2, [pc, #124]	@ (8009560 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d018      	beq.n	800951a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a1d      	ldr	r2, [pc, #116]	@ (8009564 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d013      	beq.n	800951a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a1c      	ldr	r2, [pc, #112]	@ (8009568 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d00e      	beq.n	800951a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a15      	ldr	r2, [pc, #84]	@ (8009558 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d009      	beq.n	800951a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a18      	ldr	r2, [pc, #96]	@ (800956c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d004      	beq.n	800951a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a11      	ldr	r2, [pc, #68]	@ (800955c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d10c      	bne.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009520:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	4313      	orrs	r3, r2
 800952a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< Updated upstream
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	40012c00 	.word	0x40012c00
 8007ee8:	40013400 	.word	0x40013400
 8007eec:	40015000 	.word	0x40015000
 8007ef0:	40000400 	.word	0x40000400
 8007ef4:	40000800 	.word	0x40000800
 8007ef8:	40000c00 	.word	0x40000c00
 8007efc:	40014000 	.word	0x40014000

08007f00 <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3714      	adds	r7, #20
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	40012c00 	.word	0x40012c00
 8009558:	40013400 	.word	0x40013400
 800955c:	40015000 	.word	0x40015000
 8009560:	40000400 	.word	0x40000400
 8009564:	40000800 	.word	0x40000800
 8009568:	40000c00 	.word	0x40000c00
 800956c:	40014000 	.word	0x40014000

08009570 <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> Stashed changes
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
<<<<<<< Updated upstream
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60fb      	str	r3, [r7, #12]
=======
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800957a:	2300      	movs	r3, #0
 800957c:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d101      	bne.n	8007f1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	e078      	b.n	800800e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009584:	2b01      	cmp	r3, #1
 8009586:	d101      	bne.n	800958c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009588:	2302      	movs	r3, #2
 800958a:	e078      	b.n	800967e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< Updated upstream
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	041b      	lsls	r3, r3, #16
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800801c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d009      	beq.n	8007fc2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8008020 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d004      	beq.n	8007fc2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a19      	ldr	r2, [pc, #100]	@ (8008024 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d11c      	bne.n	8007ffc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
=======
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	4313      	orrs	r3, r2
 80095a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	695b      	ldr	r3, [r3, #20]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095f2:	4313      	orrs	r3, r2
 80095f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	041b      	lsls	r3, r3, #16
 8009602:	4313      	orrs	r3, r2
 8009604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	69db      	ldr	r3, [r3, #28]
 8009610:	4313      	orrs	r3, r2
 8009612:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a1c      	ldr	r2, [pc, #112]	@ (800968c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d009      	beq.n	8009632 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a1b      	ldr	r2, [pc, #108]	@ (8009690 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d004      	beq.n	8009632 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a19      	ldr	r2, [pc, #100]	@ (8009694 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d11c      	bne.n	800966c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
>>>>>>> Stashed changes
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
<<<<<<< Updated upstream
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fcc:	051b      	lsls	r3, r3, #20
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60fb      	str	r3, [r7, #12]
=======
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800963c:	051b      	lsls	r3, r3, #20
 800963e:	4313      	orrs	r3, r2
 8009640:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	6a1b      	ldr	r3, [r3, #32]
 800964c:	4313      	orrs	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800965a:	4313      	orrs	r3, r2
 800965c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009668:	4313      	orrs	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< Updated upstream
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	40012c00 	.word	0x40012c00
 8008020:	40013400 	.word	0x40013400
 8008024:	40015000 	.word	0x40015000

08008028 <HAL_TIMEx_CommutCallback>:
=======
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	40012c00 	.word	0x40012c00
 8009690:	40013400 	.word	0x40013400
 8009694:	40015000 	.word	0x40015000

08009698 <HAL_TIMEx_CommutCallback>:
>>>>>>> Stashed changes
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
=======
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <HAL_TIMEx_CommutHalfCpltCallback>:
=======
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <HAL_TIMEx_CommutHalfCpltCallback>:
>>>>>>> Stashed changes
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
=======
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_TIMEx_BreakCallback>:
=======
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <HAL_TIMEx_BreakCallback>:
>>>>>>> Stashed changes
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
=======
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_TIMEx_Break2Callback>:
=======
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <HAL_TIMEx_Break2Callback>:
>>>>>>> Stashed changes
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
=======
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_TIMEx_EncoderIndexCallback>:
=======
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_TIMEx_EncoderIndexCallback>:
>>>>>>> Stashed changes
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
=======
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_TIMEx_DirectionChangeCallback>:
=======
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <HAL_TIMEx_DirectionChangeCallback>:
>>>>>>> Stashed changes
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
=======
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_TIMEx_IndexErrorCallback>:
=======
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <HAL_TIMEx_IndexErrorCallback>:
>>>>>>> Stashed changes
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
=======
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_TIMEx_TransitionErrorCallback>:
=======
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_TIMEx_TransitionErrorCallback>:
>>>>>>> Stashed changes
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
=======
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_UART_Init>:
=======
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <HAL_UART_Init>:
>>>>>>> Stashed changes
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e050      	b.n	800817c <HAL_UART_Init+0xb4>
=======
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e050      	b.n	80097ec <HAL_UART_Init+0xb4>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d114      	bne.n	800810e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fbdb 	bl	80088a8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d103      	bne.n	8008104 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a21      	ldr	r2, [pc, #132]	@ (8008184 <HAL_UART_Init+0xbc>)
 8008100:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
=======
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009750:	2b00      	cmp	r3, #0
 8009752:	d114      	bne.n	800977e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fdc5 	bl	800a2ec <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009768:	2b00      	cmp	r3, #0
 800976a:	d103      	bne.n	8009774 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a21      	ldr	r2, [pc, #132]	@ (80097f4 <HAL_UART_Init+0xbc>)
 8009770:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
>>>>>>> Stashed changes
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
<<<<<<< Updated upstream
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	4798      	blx	r3
=======
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	4798      	blx	r3
>>>>>>> Stashed changes
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2224      	movs	r2, #36	@ 0x24
 8008112:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 0201 	bic.w	r2, r2, #1
 8008124:	601a      	str	r2, [r3, #0]
=======
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2224      	movs	r2, #36	@ 0x24
 8009782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f022 0201 	bic.w	r2, r2, #1
 8009794:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< Updated upstream
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 ff08 	bl	8008f44 <UART_AdvFeatureConfig>
=======
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800979a:	2b00      	cmp	r3, #0
 800979c:	d002      	beq.n	80097a4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f001 f8f2 	bl	800a988 <UART_AdvFeatureConfig>
>>>>>>> Stashed changes
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< Updated upstream
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fc09 	bl	800894c <UART_SetConfig>
 800813a:	4603      	mov	r3, r0
 800813c:	2b01      	cmp	r3, #1
 800813e:	d101      	bne.n	8008144 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e01b      	b.n	800817c <HAL_UART_Init+0xb4>
=======
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fdf3 	bl	800a390 <UART_SetConfig>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d101      	bne.n	80097b4 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e01b      	b.n	80097ec <HAL_UART_Init+0xb4>
>>>>>>> Stashed changes
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008152:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689a      	ldr	r2, [r3, #8]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008162:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f042 0201 	orr.w	r2, r2, #1
 8008172:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 ff87 	bl	8009088 <UART_CheckIdleState>
 800817a:	4603      	mov	r3, r0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	0800260d 	.word	0x0800260d

08008188 <HAL_UART_IRQHandler>:
=======
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80097c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689a      	ldr	r2, [r3, #8]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80097d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f042 0201 	orr.w	r2, r2, #1
 80097e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 f971 	bl	800aacc <UART_CheckIdleState>
 80097ea:	4603      	mov	r3, r0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	0800388d 	.word	0x0800388d

080097f8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b087      	sub	sp, #28
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	460b      	mov	r3, r1
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d109      	bne.n	8009824 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009816:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e09c      	b.n	800995e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800982a:	2b20      	cmp	r3, #32
 800982c:	d16c      	bne.n	8009908 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800982e:	7afb      	ldrb	r3, [r7, #11]
 8009830:	2b0c      	cmp	r3, #12
 8009832:	d85e      	bhi.n	80098f2 <HAL_UART_RegisterCallback+0xfa>
 8009834:	a201      	add	r2, pc, #4	@ (adr r2, 800983c <HAL_UART_RegisterCallback+0x44>)
 8009836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983a:	bf00      	nop
 800983c:	08009871 	.word	0x08009871
 8009840:	0800987b 	.word	0x0800987b
 8009844:	08009885 	.word	0x08009885
 8009848:	0800988f 	.word	0x0800988f
 800984c:	08009899 	.word	0x08009899
 8009850:	080098a3 	.word	0x080098a3
 8009854:	080098ad 	.word	0x080098ad
 8009858:	080098b7 	.word	0x080098b7
 800985c:	080098c1 	.word	0x080098c1
 8009860:	080098cb 	.word	0x080098cb
 8009864:	080098d5 	.word	0x080098d5
 8009868:	080098df 	.word	0x080098df
 800986c:	080098e9 	.word	0x080098e9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009878:	e070      	b.n	800995c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009882:	e06b      	b.n	800995c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800988c:	e066      	b.n	800995c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009896:	e061      	b.n	800995c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80098a0:	e05c      	b.n	800995c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80098aa:	e057      	b.n	800995c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80098b4:	e052      	b.n	800995c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80098be:	e04d      	b.n	800995c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80098c8:	e048      	b.n	800995c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80098d2:	e043      	b.n	800995c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80098dc:	e03e      	b.n	800995c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80098e6:	e039      	b.n	800995c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80098f0:	e034      	b.n	800995c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	75fb      	strb	r3, [r7, #23]
        break;
 8009906:	e029      	b.n	800995c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800990e:	2b00      	cmp	r3, #0
 8009910:	d11a      	bne.n	8009948 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009912:	7afb      	ldrb	r3, [r7, #11]
 8009914:	2b0b      	cmp	r3, #11
 8009916:	d002      	beq.n	800991e <HAL_UART_RegisterCallback+0x126>
 8009918:	2b0c      	cmp	r3, #12
 800991a:	d005      	beq.n	8009928 <HAL_UART_RegisterCallback+0x130>
 800991c:	e009      	b.n	8009932 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009926:	e019      	b.n	800995c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009930:	e014      	b.n	800995c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009938:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	75fb      	strb	r3, [r7, #23]
        break;
 8009946:	e009      	b.n	800995c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800994e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800995c:	7dfb      	ldrb	r3, [r7, #23]
}
 800995e:	4618      	mov	r0, r3
 8009960:	371c      	adds	r7, #28
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop

0800996c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b08a      	sub	sp, #40	@ 0x28
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	4613      	mov	r3, r2
 8009978:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009980:	2b20      	cmp	r3, #32
 8009982:	d167      	bne.n	8009a54 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d002      	beq.n	8009990 <HAL_UART_Transmit_DMA+0x24>
 800998a:	88fb      	ldrh	r3, [r7, #6]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	e060      	b.n	8009a56 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	88fa      	ldrh	r2, [r7, #6]
 800999e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	88fa      	ldrh	r2, [r7, #6]
 80099a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2221      	movs	r2, #33	@ 0x21
 80099b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d028      	beq.n	8009a14 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099c6:	4a26      	ldr	r2, [pc, #152]	@ (8009a60 <HAL_UART_Transmit_DMA+0xf4>)
 80099c8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099ce:	4a25      	ldr	r2, [pc, #148]	@ (8009a64 <HAL_UART_Transmit_DMA+0xf8>)
 80099d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099d6:	4a24      	ldr	r2, [pc, #144]	@ (8009a68 <HAL_UART_Transmit_DMA+0xfc>)
 80099d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099de:	2200      	movs	r2, #0
 80099e0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099ea:	4619      	mov	r1, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3328      	adds	r3, #40	@ 0x28
 80099f2:	461a      	mov	r2, r3
 80099f4:	88fb      	ldrh	r3, [r7, #6]
 80099f6:	f7fc f929 	bl	8005c4c <HAL_DMA_Start_IT>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d009      	beq.n	8009a14 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2210      	movs	r2, #16
 8009a04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2220      	movs	r2, #32
 8009a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e020      	b.n	8009a56 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2240      	movs	r2, #64	@ 0x40
 8009a1a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	3308      	adds	r3, #8
 8009a22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	e853 3f00 	ldrex	r3, [r3]
 8009a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3308      	adds	r3, #8
 8009a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a3c:	623a      	str	r2, [r7, #32]
 8009a3e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a40:	69f9      	ldr	r1, [r7, #28]
 8009a42:	6a3a      	ldr	r2, [r7, #32]
 8009a44:	e841 2300 	strex	r3, r2, [r1]
 8009a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1e5      	bne.n	8009a1c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	e000      	b.n	8009a56 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009a54:	2302      	movs	r3, #2
  }
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3728      	adds	r7, #40	@ 0x28
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	0800af97 	.word	0x0800af97
 8009a64:	0800b035 	.word	0x0800b035
 8009a68:	0800b1cf 	.word	0x0800b1cf

08009a6c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08a      	sub	sp, #40	@ 0x28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	4613      	mov	r3, r2
 8009a78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a80:	2b20      	cmp	r3, #32
 8009a82:	d137      	bne.n	8009af4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d002      	beq.n	8009a90 <HAL_UART_Receive_DMA+0x24>
 8009a8a:	88fb      	ldrh	r3, [r7, #6]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	e030      	b.n	8009af6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a18      	ldr	r2, [pc, #96]	@ (8009b00 <HAL_UART_Receive_DMA+0x94>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d01f      	beq.n	8009ae4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d018      	beq.n	8009ae4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	e853 3f00 	ldrex	r3, [r3]
 8009abe:	613b      	str	r3, [r7, #16]
   return(result);
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	461a      	mov	r2, r3
 8009ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad0:	623b      	str	r3, [r7, #32]
 8009ad2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad4:	69f9      	ldr	r1, [r7, #28]
 8009ad6:	6a3a      	ldr	r2, [r7, #32]
 8009ad8:	e841 2300 	strex	r3, r2, [r1]
 8009adc:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e6      	bne.n	8009ab2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009ae4:	88fb      	ldrh	r3, [r7, #6]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	68b9      	ldr	r1, [r7, #8]
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f001 f906 	bl	800acfc <UART_Start_Receive_DMA>
 8009af0:	4603      	mov	r3, r0
 8009af2:	e000      	b.n	8009af6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009af4:	2302      	movs	r3, #2
  }
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3728      	adds	r7, #40	@ 0x28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	40008000 	.word	0x40008000

08009b04 <HAL_UART_IRQHandler>:
>>>>>>> Stashed changes
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008188:	b580      	push	{r7, lr}
 800818a:	b0ba      	sub	sp, #232	@ 0xe8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
=======
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b0ba      	sub	sp, #232	@ 0xe8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	69db      	ldr	r3, [r3, #28]
 8009b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
>>>>>>> Stashed changes

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< Updated upstream
 80081ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80081b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80081b6:	4013      	ands	r3, r2
 80081b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80081bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d11b      	bne.n	80081fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081c8:	f003 0320 	and.w	r3, r3, #32
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d015      	beq.n	80081fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081d4:	f003 0320 	and.w	r3, r3, #32
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d105      	bne.n	80081e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d009      	beq.n	80081fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 82f3 	beq.w	80087d8 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	4798      	blx	r3
      }
      return;
 80081fa:	e2ed      	b.n	80087d8 <HAL_UART_IRQHandler+0x650>
=======
 8009b2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009b2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009b32:	4013      	ands	r3, r2
 8009b34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009b38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d11b      	bne.n	8009b78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b44:	f003 0320 	and.w	r3, r3, #32
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d015      	beq.n	8009b78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b50:	f003 0320 	and.w	r3, r3, #32
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d105      	bne.n	8009b64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d009      	beq.n	8009b78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 82f3 	beq.w	800a154 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	4798      	blx	r3
      }
      return;
 8009b76:	e2ed      	b.n	800a154 <HAL_UART_IRQHandler+0x650>
>>>>>>> Stashed changes
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
<<<<<<< Updated upstream
 80081fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 8129 	beq.w	8008458 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008206:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800820a:	4b90      	ldr	r3, [pc, #576]	@ (800844c <HAL_UART_IRQHandler+0x2c4>)
 800820c:	4013      	ands	r3, r2
 800820e:	2b00      	cmp	r3, #0
 8008210:	d106      	bne.n	8008220 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008212:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008216:	4b8e      	ldr	r3, [pc, #568]	@ (8008450 <HAL_UART_IRQHandler+0x2c8>)
 8008218:	4013      	ands	r3, r2
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 811c 	beq.w	8008458 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d011      	beq.n	8008250 <HAL_UART_IRQHandler+0xc8>
 800822c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2201      	movs	r2, #1
 800823e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008246:	f043 0201 	orr.w	r2, r3, #1
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8009b78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f000 8129 	beq.w	8009dd4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b86:	4b90      	ldr	r3, [pc, #576]	@ (8009dc8 <HAL_UART_IRQHandler+0x2c4>)
 8009b88:	4013      	ands	r3, r2
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d106      	bne.n	8009b9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009b92:	4b8e      	ldr	r3, [pc, #568]	@ (8009dcc <HAL_UART_IRQHandler+0x2c8>)
 8009b94:	4013      	ands	r3, r2
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f000 811c 	beq.w	8009dd4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ba0:	f003 0301 	and.w	r3, r3, #1
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d011      	beq.n	8009bcc <HAL_UART_IRQHandler+0xc8>
 8009ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00b      	beq.n	8009bcc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bc2:	f043 0201 	orr.w	r2, r3, #1
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 8008250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d011      	beq.n	8008280 <HAL_UART_IRQHandler+0xf8>
 800825c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2202      	movs	r2, #2
 800826e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008276:	f043 0204 	orr.w	r2, r3, #4
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8009bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bd0:	f003 0302 	and.w	r3, r3, #2
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d011      	beq.n	8009bfc <HAL_UART_IRQHandler+0xf8>
 8009bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bdc:	f003 0301 	and.w	r3, r3, #1
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00b      	beq.n	8009bfc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2202      	movs	r2, #2
 8009bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bf2:	f043 0204 	orr.w	r2, r3, #4
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 8008280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	d011      	beq.n	80082b0 <HAL_UART_IRQHandler+0x128>
 800828c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00b      	beq.n	80082b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2204      	movs	r2, #4
 800829e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a6:	f043 0202 	orr.w	r2, r3, #2
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8009bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c00:	f003 0304 	and.w	r3, r3, #4
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d011      	beq.n	8009c2c <HAL_UART_IRQHandler+0x128>
 8009c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00b      	beq.n	8009c2c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2204      	movs	r2, #4
 8009c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c22:	f043 0202 	orr.w	r2, r3, #2
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< Updated upstream
 80082b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082b4:	f003 0308 	and.w	r3, r3, #8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d017      	beq.n	80082ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d105      	bne.n	80082d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80082c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80082cc:	4b5f      	ldr	r3, [pc, #380]	@ (800844c <HAL_UART_IRQHandler+0x2c4>)
 80082ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00b      	beq.n	80082ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2208      	movs	r2, #8
 80082da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082e2:	f043 0208 	orr.w	r2, r3, #8
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8009c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c30:	f003 0308 	and.w	r3, r3, #8
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d017      	beq.n	8009c68 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c3c:	f003 0320 	and.w	r3, r3, #32
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d105      	bne.n	8009c50 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009c48:	4b5f      	ldr	r3, [pc, #380]	@ (8009dc8 <HAL_UART_IRQHandler+0x2c4>)
 8009c4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00b      	beq.n	8009c68 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2208      	movs	r2, #8
 8009c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c5e:	f043 0208 	orr.w	r2, r3, #8
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< Updated upstream
 80082ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d012      	beq.n	800831e <HAL_UART_IRQHandler+0x196>
 80082f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00c      	beq.n	800831e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800830c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008314:	f043 0220 	orr.w	r2, r3, #32
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8009c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d012      	beq.n	8009c9a <HAL_UART_IRQHandler+0x196>
 8009c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00c      	beq.n	8009c9a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c90:	f043 0220 	orr.w	r2, r3, #32
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< Updated upstream
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 8259 	beq.w	80087dc <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800832a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800832e:	f003 0320 	and.w	r3, r3, #32
 8008332:	2b00      	cmp	r3, #0
 8008334:	d013      	beq.n	800835e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b00      	cmp	r3, #0
 8008340:	d105      	bne.n	800834e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d007      	beq.n	800835e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	4798      	blx	r3
=======
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 8259 	beq.w	800a158 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009caa:	f003 0320 	and.w	r3, r3, #32
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d013      	beq.n	8009cda <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cb6:	f003 0320 	and.w	r3, r3, #32
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d105      	bne.n	8009cca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d007      	beq.n	8009cda <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d003      	beq.n	8009cda <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	4798      	blx	r3
>>>>>>> Stashed changes
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< Updated upstream
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008364:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008372:	2b40      	cmp	r3, #64	@ 0x40
 8008374:	d005      	beq.n	8008382 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800837a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800837e:	2b00      	cmp	r3, #0
 8008380:	d058      	beq.n	8008434 <HAL_UART_IRQHandler+0x2ac>
=======
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ce0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cee:	2b40      	cmp	r3, #64	@ 0x40
 8009cf0:	d005      	beq.n	8009cfe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009cf6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d058      	beq.n	8009db0 <HAL_UART_IRQHandler+0x2ac>
>>>>>>> Stashed changes
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 ff97 	bl	80092b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008392:	2b40      	cmp	r3, #64	@ 0x40
 8008394:	d148      	bne.n	8008428 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80083ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3308      	adds	r3, #8
 80083be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80083c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80083c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80083ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80083da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1d9      	bne.n	8008396 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d017      	beq.n	800841c <HAL_UART_IRQHandler+0x294>
=======
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f001 f8e3 	bl	800aeca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d0e:	2b40      	cmp	r3, #64	@ 0x40
 8009d10:	d148      	bne.n	8009da4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3308      	adds	r3, #8
 8009d18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d20:	e853 3f00 	ldrex	r3, [r3]
 8009d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	3308      	adds	r3, #8
 8009d3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d4e:	e841 2300 	strex	r3, r2, [r1]
 8009d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1d9      	bne.n	8009d12 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d017      	beq.n	8009d98 <HAL_UART_IRQHandler+0x294>
>>>>>>> Stashed changes
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< Updated upstream
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083f2:	4a18      	ldr	r2, [pc, #96]	@ (8008454 <HAL_UART_IRQHandler+0x2cc>)
 80083f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fc fbaf 	bl	8004b60 <HAL_DMA_Abort_IT>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d01f      	beq.n	8008448 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800840e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008416:	4610      	mov	r0, r2
 8008418:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841a:	e015      	b.n	8008448 <HAL_UART_IRQHandler+0x2c0>
=======
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d6e:	4a18      	ldr	r2, [pc, #96]	@ (8009dd0 <HAL_UART_IRQHandler+0x2cc>)
 8009d70:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fc f83b 	bl	8005df4 <HAL_DMA_Abort_IT>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d01f      	beq.n	8009dc4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009d92:	4610      	mov	r0, r2
 8009d94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d96:	e015      	b.n	8009dc4 <HAL_UART_IRQHandler+0x2c0>
>>>>>>> Stashed changes
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
<<<<<<< Updated upstream
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008426:	e00f      	b.n	8008448 <HAL_UART_IRQHandler+0x2c0>
=======
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009da2:	e00f      	b.n	8009dc4 <HAL_UART_IRQHandler+0x2c0>
>>>>>>> Stashed changes
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
<<<<<<< Updated upstream
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008432:	e009      	b.n	8008448 <HAL_UART_IRQHandler+0x2c0>
=======
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dae:	e009      	b.n	8009dc4 <HAL_UART_IRQHandler+0x2c0>
>>>>>>> Stashed changes
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
<<<<<<< Updated upstream
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	4798      	blx	r3
=======
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	4798      	blx	r3
>>>>>>> Stashed changes
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< Updated upstream
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008446:	e1c9      	b.n	80087dc <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008448:	bf00      	nop
    return;
 800844a:	e1c7      	b.n	80087dc <HAL_UART_IRQHandler+0x654>
 800844c:	10000001 	.word	0x10000001
 8008450:	04000120 	.word	0x04000120
 8008454:	08009383 	.word	0x08009383
=======
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009dc2:	e1c9      	b.n	800a158 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dc4:	bf00      	nop
    return;
 8009dc6:	e1c7      	b.n	800a158 <HAL_UART_IRQHandler+0x654>
 8009dc8:	10000001 	.word	0x10000001
 8009dcc:	04000120 	.word	0x04000120
 8009dd0:	0800b253 	.word	0x0800b253
>>>>>>> Stashed changes

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800845c:	2b01      	cmp	r3, #1
 800845e:	f040 8157 	bne.w	8008710 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008466:	f003 0310 	and.w	r3, r3, #16
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 8150 	beq.w	8008710 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008474:	f003 0310 	and.w	r3, r3, #16
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 8149 	beq.w	8008710 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2210      	movs	r2, #16
 8008484:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008490:	2b40      	cmp	r3, #64	@ 0x40
 8008492:	f040 80bd 	bne.w	8008610 <HAL_UART_IRQHandler+0x488>
=======
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	f040 8157 	bne.w	800a08c <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009de2:	f003 0310 	and.w	r3, r3, #16
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f000 8150 	beq.w	800a08c <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009df0:	f003 0310 	and.w	r3, r3, #16
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f000 8149 	beq.w	800a08c <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2210      	movs	r2, #16
 8009e00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e0c:	2b40      	cmp	r3, #64	@ 0x40
 8009e0e:	f040 80bd 	bne.w	8009f8c <HAL_UART_IRQHandler+0x488>
>>>>>>> Stashed changes
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< Updated upstream
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 8199 	beq.w	80087e0 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084b8:	429a      	cmp	r2, r3
 80084ba:	f080 8191 	bcs.w	80087e0 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f040 8087 	bne.w	80085ea <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084e8:	e853 3f00 	ldrex	r3, [r3]
 80084ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80084f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80084f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800850a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008512:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800851e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1da      	bne.n	80084dc <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3308      	adds	r3, #8
 800852c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008530:	e853 3f00 	ldrex	r3, [r3]
 8008534:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008538:	f023 0301 	bic.w	r3, r3, #1
 800853c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3308      	adds	r3, #8
 8008546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800854a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800854e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008550:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008552:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008556:	e841 2300 	strex	r3, r2, [r1]
 800855a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800855c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1e1      	bne.n	8008526 <HAL_UART_IRQHandler+0x39e>
=======
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f000 8199 	beq.w	800a15c <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e34:	429a      	cmp	r2, r3
 8009e36:	f080 8191 	bcs.w	800a15c <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 0320 	and.w	r3, r3, #32
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f040 8087 	bne.w	8009f66 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e64:	e853 3f00 	ldrex	r3, [r3]
 8009e68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009e82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009e8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e92:	e841 2300 	strex	r3, r2, [r1]
 8009e96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1da      	bne.n	8009e58 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	3308      	adds	r3, #8
 8009ea8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009eac:	e853 3f00 	ldrex	r3, [r3]
 8009eb0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009eb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009eb4:	f023 0301 	bic.w	r3, r3, #1
 8009eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3308      	adds	r3, #8
 8009ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ec6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009eca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ecc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009ece:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009ed2:	e841 2300 	strex	r3, r2, [r1]
 8009ed6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ed8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1e1      	bne.n	8009ea2 <HAL_UART_IRQHandler+0x39e>
>>>>>>> Stashed changes

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3308      	adds	r3, #8
 8008568:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800856c:	e853 3f00 	ldrex	r3, [r3]
 8008570:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008578:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3308      	adds	r3, #8
 8008582:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008586:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008588:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800858c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800858e:	e841 2300 	strex	r3, r2, [r1]
 8008592:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1e3      	bne.n	8008562 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2220      	movs	r2, #32
 800859e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085b0:	e853 3f00 	ldrex	r3, [r3]
 80085b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80085b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085b8:	f023 0310 	bic.w	r3, r3, #16
 80085bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1e4      	bne.n	80085a8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fc fa62 	bl	8004aae <HAL_DMA_Abort>
=======
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3308      	adds	r3, #8
 8009ee4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ee8:	e853 3f00 	ldrex	r3, [r3]
 8009eec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009eee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ef0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3308      	adds	r3, #8
 8009efe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009f02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f0a:	e841 2300 	strex	r3, r2, [r1]
 8009f0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1e3      	bne.n	8009ede <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2220      	movs	r2, #32
 8009f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f2c:	e853 3f00 	ldrex	r3, [r3]
 8009f30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f34:	f023 0310 	bic.w	r3, r3, #16
 8009f38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	461a      	mov	r2, r3
 8009f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f4e:	e841 2300 	strex	r3, r2, [r1]
 8009f52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1e4      	bne.n	8009f24 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fb feee 	bl	8005d42 <HAL_DMA_Abort>
>>>>>>> Stashed changes
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< Updated upstream
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2202      	movs	r2, #2
 80085ee:	671a      	str	r2, [r3, #112]	@ 0x70
=======
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2202      	movs	r2, #2
 8009f6a:	671a      	str	r2, [r3, #112]	@ 0x70
>>>>>>> Stashed changes

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< Updated upstream
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8008602:	b292      	uxth	r2, r2
 8008604:	1a8a      	subs	r2, r1, r2
 8008606:	b292      	uxth	r2, r2
 8008608:	4611      	mov	r1, r2
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	4798      	blx	r3
=======
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009f7e:	b292      	uxth	r2, r2
 8009f80:	1a8a      	subs	r2, r1, r2
 8009f82:	b292      	uxth	r2, r2
 8009f84:	4611      	mov	r1, r2
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	4798      	blx	r3
>>>>>>> Stashed changes
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
<<<<<<< Updated upstream
 800860e:	e0e7      	b.n	80087e0 <HAL_UART_IRQHandler+0x658>
=======
 8009f8a:	e0e7      	b.n	800a15c <HAL_UART_IRQHandler+0x658>
>>>>>>> Stashed changes
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< Updated upstream
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800861c:	b29b      	uxth	r3, r3
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800862a:	b29b      	uxth	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 80d9 	beq.w	80087e4 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8008632:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 80d4 	beq.w	80087e4 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008644:	e853 3f00 	ldrex	r3, [r3]
 8008648:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800864a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800864c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008650:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	461a      	mov	r2, r3
 800865a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800865e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008660:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800866c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e4      	bne.n	800863c <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3308      	adds	r3, #8
 8008678:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	623b      	str	r3, [r7, #32]
   return(result);
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008688:	f023 0301 	bic.w	r3, r3, #1
 800868c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3308      	adds	r3, #8
 8008696:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800869a:	633a      	str	r2, [r7, #48]	@ 0x30
 800869c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e1      	bne.n	8008672 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	e853 3f00 	ldrex	r3, [r3]
 80086ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f023 0310 	bic.w	r3, r3, #16
 80086d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80086e4:	61fb      	str	r3, [r7, #28]
 80086e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e8:	69b9      	ldr	r1, [r7, #24]
 80086ea:	69fa      	ldr	r2, [r7, #28]
 80086ec:	e841 2300 	strex	r3, r2, [r1]
 80086f0:	617b      	str	r3, [r7, #20]
   return(result);
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e4      	bne.n	80086c2 <HAL_UART_IRQHandler+0x53a>
=======
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 80d9 	beq.w	800a160 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8009fae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 80d4 	beq.w	800a160 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc0:	e853 3f00 	ldrex	r3, [r3]
 8009fc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fdc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fe2:	e841 2300 	strex	r3, r2, [r1]
 8009fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1e4      	bne.n	8009fb8 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	3308      	adds	r3, #8
 8009ff4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff8:	e853 3f00 	ldrex	r3, [r3]
 8009ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a004:	f023 0301 	bic.w	r3, r3, #1
 800a008:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	3308      	adds	r3, #8
 800a012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a016:	633a      	str	r2, [r7, #48]	@ 0x30
 800a018:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a01c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a01e:	e841 2300 	strex	r3, r2, [r1]
 800a022:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1e1      	bne.n	8009fee <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2220      	movs	r2, #32
 800a02e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f023 0310 	bic.w	r3, r3, #16
 800a052:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	461a      	mov	r2, r3
 800a05c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a060:	61fb      	str	r3, [r7, #28]
 800a062:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a064:	69b9      	ldr	r1, [r7, #24]
 800a066:	69fa      	ldr	r2, [r7, #28]
 800a068:	e841 2300 	strex	r3, r2, [r1]
 800a06c:	617b      	str	r3, [r7, #20]
   return(result);
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1e4      	bne.n	800a03e <HAL_UART_IRQHandler+0x53a>
>>>>>>> Stashed changes

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< Updated upstream
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2202      	movs	r2, #2
 80086fc:	671a      	str	r2, [r3, #112]	@ 0x70
=======
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2202      	movs	r2, #2
 800a078:	671a      	str	r2, [r3, #112]	@ 0x70
>>>>>>> Stashed changes

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
<<<<<<< Updated upstream
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008704:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008708:	4611      	mov	r1, r2
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	4798      	blx	r3
=======
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a080:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a084:	4611      	mov	r1, r2
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	4798      	blx	r3
>>>>>>> Stashed changes
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
<<<<<<< Updated upstream
 800870e:	e069      	b.n	80087e4 <HAL_UART_IRQHandler+0x65c>
=======
 800a08a:	e069      	b.n	800a160 <HAL_UART_IRQHandler+0x65c>
>>>>>>> Stashed changes
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< Updated upstream
 8008710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008714:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d010      	beq.n	800873e <HAL_UART_IRQHandler+0x5b6>
 800871c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00a      	beq.n	800873e <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008730:	621a      	str	r2, [r3, #32]
=======
 800a08c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a090:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d010      	beq.n	800a0ba <HAL_UART_IRQHandler+0x5b6>
 800a098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a09c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00a      	beq.n	800a0ba <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a0ac:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
<<<<<<< Updated upstream
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	4798      	blx	r3
=======
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	4798      	blx	r3
>>>>>>> Stashed changes
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
<<<<<<< Updated upstream
 800873c:	e055      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
=======
 800a0b8:	e055      	b.n	800a166 <HAL_UART_IRQHandler+0x662>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
<<<<<<< Updated upstream
 800873e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008746:	2b00      	cmp	r3, #0
 8008748:	d014      	beq.n	8008774 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800874a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800874e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008752:	2b00      	cmp	r3, #0
 8008754:	d105      	bne.n	8008762 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800875a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d008      	beq.n	8008774 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008766:	2b00      	cmp	r3, #0
 8008768:	d03e      	beq.n	80087e8 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	4798      	blx	r3
    }
    return;
 8008772:	e039      	b.n	80087e8 <HAL_UART_IRQHandler+0x660>
=======
 800a0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d014      	beq.n	800a0f0 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a0c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d105      	bne.n	800a0de <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a0d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d008      	beq.n	800a0f0 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d03e      	beq.n	800a164 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	4798      	blx	r3
    }
    return;
 800a0ee:	e039      	b.n	800a164 <HAL_UART_IRQHandler+0x660>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< Updated upstream
 8008774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d009      	beq.n	8008794 <HAL_UART_IRQHandler+0x60c>
 8008780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fe10 	bl	80093b2 <UART_EndTransmit_IT>
    return;
 8008792:	e02a      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
=======
 800a0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d009      	beq.n	800a110 <HAL_UART_IRQHandler+0x60c>
 800a0fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a104:	2b00      	cmp	r3, #0
 800a106:	d003      	beq.n	800a110 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f001 f8ba 	bl	800b282 <UART_EndTransmit_IT>
    return;
 800a10e:	e02a      	b.n	800a166 <HAL_UART_IRQHandler+0x662>
>>>>>>> Stashed changes
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
<<<<<<< Updated upstream
 8008794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008798:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00b      	beq.n	80087b8 <HAL_UART_IRQHandler+0x630>
 80087a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d005      	beq.n	80087b8 <HAL_UART_IRQHandler+0x630>
=======
 800a110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a114:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00b      	beq.n	800a134 <HAL_UART_IRQHandler+0x630>
 800a11c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a120:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d005      	beq.n	800a134 <HAL_UART_IRQHandler+0x630>
>>>>>>> Stashed changes
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
<<<<<<< Updated upstream
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	4798      	blx	r3
=======
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	4798      	blx	r3
>>>>>>> Stashed changes
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
<<<<<<< Updated upstream
 80087b6:	e018      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
=======
 800a132:	e018      	b.n	800a166 <HAL_UART_IRQHandler+0x662>
>>>>>>> Stashed changes
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
<<<<<<< Updated upstream
 80087b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d012      	beq.n	80087ea <HAL_UART_IRQHandler+0x662>
 80087c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	da0e      	bge.n	80087ea <HAL_UART_IRQHandler+0x662>
=======
 800a134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a138:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d012      	beq.n	800a166 <HAL_UART_IRQHandler+0x662>
 800a140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a144:	2b00      	cmp	r3, #0
 800a146:	da0e      	bge.n	800a166 <HAL_UART_IRQHandler+0x662>
>>>>>>> Stashed changes
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
<<<<<<< Updated upstream
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	4798      	blx	r3
=======
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	4798      	blx	r3
>>>>>>> Stashed changes
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
<<<<<<< Updated upstream
 80087d6:	e008      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
      return;
 80087d8:	bf00      	nop
 80087da:	e006      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
    return;
 80087dc:	bf00      	nop
 80087de:	e004      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
      return;
 80087e0:	bf00      	nop
 80087e2:	e002      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
      return;
 80087e4:	bf00      	nop
 80087e6:	e000      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
    return;
 80087e8:	bf00      	nop
  }
}
 80087ea:	37e8      	adds	r7, #232	@ 0xe8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <HAL_UART_TxCpltCallback>:
=======
 800a152:	e008      	b.n	800a166 <HAL_UART_IRQHandler+0x662>
      return;
 800a154:	bf00      	nop
 800a156:	e006      	b.n	800a166 <HAL_UART_IRQHandler+0x662>
    return;
 800a158:	bf00      	nop
 800a15a:	e004      	b.n	800a166 <HAL_UART_IRQHandler+0x662>
      return;
 800a15c:	bf00      	nop
 800a15e:	e002      	b.n	800a166 <HAL_UART_IRQHandler+0x662>
      return;
 800a160:	bf00      	nop
 800a162:	e000      	b.n	800a166 <HAL_UART_IRQHandler+0x662>
    return;
 800a164:	bf00      	nop
  }
}
 800a166:	37e8      	adds	r7, #232	@ 0xe8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <HAL_UART_TxCpltCallback>:
>>>>>>> Stashed changes
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
=======
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <HAL_UART_TxHalfCpltCallback>:
=======
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <HAL_UART_TxHalfCpltCallback>:
>>>>>>> Stashed changes
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
=======
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_UART_RxCpltCallback>:
=======
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <HAL_UART_RxCpltCallback>:
>>>>>>> Stashed changes
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
=======
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <HAL_UART_RxHalfCpltCallback>:
=======
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <HAL_UART_RxHalfCpltCallback>:
>>>>>>> Stashed changes
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
=======
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_UART_ErrorCallback>:
=======
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <HAL_UART_ErrorCallback>:
>>>>>>> Stashed changes
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
=======
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_UART_AbortCpltCallback>:
=======
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_UART_AbortCpltCallback>:
>>>>>>> Stashed changes
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
=======
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_UART_AbortTransmitCpltCallback>:
=======
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <HAL_UART_AbortTransmitCpltCallback>:
>>>>>>> Stashed changes
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
=======
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_UART_AbortReceiveCpltCallback>:
=======
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <HAL_UART_AbortReceiveCpltCallback>:
>>>>>>> Stashed changes
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
=======
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_UARTEx_RxEventCallback>:
=======
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <HAL_UARTEx_RxEventCallback>:
>>>>>>> Stashed changes
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< Updated upstream
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	807b      	strh	r3, [r7, #2]
=======
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	460b      	mov	r3, r1
 800a216:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <UART_InitCallbacksToDefault>:
=======
 800a218:	bf00      	nop
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a09      	ldr	r2, [pc, #36]	@ (800a258 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d009      	beq.n	800a24c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	430a      	orrs	r2, r1
 800a24a:	615a      	str	r2, [r3, #20]
  }
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	40008000 	.word	0x40008000

0800a25c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a18      	ldr	r2, [pc, #96]	@ (800a2cc <HAL_UART_EnableReceiverTimeout+0x70>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d027      	beq.n	800a2be <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a274:	2b20      	cmp	r3, #32
 800a276:	d120      	bne.n	800a2ba <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d101      	bne.n	800a286 <HAL_UART_EnableReceiverTimeout+0x2a>
 800a282:	2302      	movs	r3, #2
 800a284:	e01c      	b.n	800a2c0 <HAL_UART_EnableReceiverTimeout+0x64>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2224      	movs	r2, #36	@ 0x24
 800a292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a2a4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2220      	movs	r2, #32
 800a2aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e002      	b.n	800a2c0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	e000      	b.n	800a2c0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
  }
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	40008000 	.word	0x40008000

0800a2d0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	370c      	adds	r7, #12
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
	...

0800a2ec <UART_InitCallbacksToDefault>:
>>>>>>> Stashed changes
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a1a      	ldr	r2, [pc, #104]	@ (800891c <UART_InitCallbacksToDefault+0x74>)
 80088b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a19      	ldr	r2, [pc, #100]	@ (8008920 <UART_InitCallbacksToDefault+0x78>)
 80088bc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a18      	ldr	r2, [pc, #96]	@ (8008924 <UART_InitCallbacksToDefault+0x7c>)
 80088c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a17      	ldr	r2, [pc, #92]	@ (8008928 <UART_InitCallbacksToDefault+0x80>)
 80088cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a16      	ldr	r2, [pc, #88]	@ (800892c <UART_InitCallbacksToDefault+0x84>)
 80088d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a15      	ldr	r2, [pc, #84]	@ (8008930 <UART_InitCallbacksToDefault+0x88>)
 80088dc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a14      	ldr	r2, [pc, #80]	@ (8008934 <UART_InitCallbacksToDefault+0x8c>)
 80088e4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a13      	ldr	r2, [pc, #76]	@ (8008938 <UART_InitCallbacksToDefault+0x90>)
 80088ec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a12      	ldr	r2, [pc, #72]	@ (800893c <UART_InitCallbacksToDefault+0x94>)
 80088f4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a11      	ldr	r2, [pc, #68]	@ (8008940 <UART_InitCallbacksToDefault+0x98>)
 80088fc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a10      	ldr	r2, [pc, #64]	@ (8008944 <UART_InitCallbacksToDefault+0x9c>)
 8008904:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a0f      	ldr	r2, [pc, #60]	@ (8008948 <UART_InitCallbacksToDefault+0xa0>)
 800890c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	08008805 	.word	0x08008805
 8008920:	080087f1 	.word	0x080087f1
 8008924:	0800882d 	.word	0x0800882d
 8008928:	08008819 	.word	0x08008819
 800892c:	08008841 	.word	0x08008841
 8008930:	08008855 	.word	0x08008855
 8008934:	08008869 	.word	0x08008869
 8008938:	0800887d 	.word	0x0800887d
 800893c:	0800940d 	.word	0x0800940d
 8008940:	08009421 	.word	0x08009421
 8008944:	08009435 	.word	0x08009435
 8008948:	08008891 	.word	0x08008891

0800894c <UART_SetConfig>:
=======
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a1a      	ldr	r2, [pc, #104]	@ (800a360 <UART_InitCallbacksToDefault+0x74>)
 800a2f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a19      	ldr	r2, [pc, #100]	@ (800a364 <UART_InitCallbacksToDefault+0x78>)
 800a300:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a18      	ldr	r2, [pc, #96]	@ (800a368 <UART_InitCallbacksToDefault+0x7c>)
 800a308:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a17      	ldr	r2, [pc, #92]	@ (800a36c <UART_InitCallbacksToDefault+0x80>)
 800a310:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a16      	ldr	r2, [pc, #88]	@ (800a370 <UART_InitCallbacksToDefault+0x84>)
 800a318:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a15      	ldr	r2, [pc, #84]	@ (800a374 <UART_InitCallbacksToDefault+0x88>)
 800a320:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a14      	ldr	r2, [pc, #80]	@ (800a378 <UART_InitCallbacksToDefault+0x8c>)
 800a328:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a13      	ldr	r2, [pc, #76]	@ (800a37c <UART_InitCallbacksToDefault+0x90>)
 800a330:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a12      	ldr	r2, [pc, #72]	@ (800a380 <UART_InitCallbacksToDefault+0x94>)
 800a338:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a11      	ldr	r2, [pc, #68]	@ (800a384 <UART_InitCallbacksToDefault+0x98>)
 800a340:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a10      	ldr	r2, [pc, #64]	@ (800a388 <UART_InitCallbacksToDefault+0x9c>)
 800a348:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a0f      	ldr	r2, [pc, #60]	@ (800a38c <UART_InitCallbacksToDefault+0xa0>)
 800a350:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	0800a181 	.word	0x0800a181
 800a364:	0800a16d 	.word	0x0800a16d
 800a368:	0800a1a9 	.word	0x0800a1a9
 800a36c:	0800a195 	.word	0x0800a195
 800a370:	0800a1bd 	.word	0x0800a1bd
 800a374:	0800a1d1 	.word	0x0800a1d1
 800a378:	0800a1e5 	.word	0x0800a1e5
 800a37c:	0800a1f9 	.word	0x0800a1f9
 800a380:	0800b2dd 	.word	0x0800b2dd
 800a384:	0800b2f1 	.word	0x0800b2f1
 800a388:	0800b305 	.word	0x0800b305
 800a38c:	0800a20d 	.word	0x0800a20d

0800a390 <UART_SetConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800894c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008950:	b08c      	sub	sp, #48	@ 0x30
 8008952:	af00      	add	r7, sp, #0
 8008954:	6178      	str	r0, [r7, #20]
=======
 800a390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a394:	b08c      	sub	sp, #48	@ 0x30
 800a396:	af00      	add	r7, sp, #0
 800a398:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< Updated upstream
 8008956:	2300      	movs	r3, #0
 8008958:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
=======
 800a39a:	2300      	movs	r3, #0
 800a39c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
>>>>>>> Stashed changes
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< Updated upstream
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	431a      	orrs	r2, r3
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	431a      	orrs	r2, r3
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	69db      	ldr	r3, [r3, #28]
 8008970:	4313      	orrs	r3, r2
 8008972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	4baa      	ldr	r3, [pc, #680]	@ (8008c24 <UART_SetConfig+0x2d8>)
 800897c:	4013      	ands	r3, r2
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	6812      	ldr	r2, [r2, #0]
 8008982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008984:	430b      	orrs	r3, r1
 8008986:	6013      	str	r3, [r2, #0]
=======
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	689a      	ldr	r2, [r3, #8]
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	431a      	orrs	r2, r3
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	69db      	ldr	r3, [r3, #28]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	4baa      	ldr	r3, [pc, #680]	@ (800a668 <UART_SetConfig+0x2d8>)
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	6812      	ldr	r2, [r2, #0]
 800a3c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3c8:	430b      	orrs	r3, r1
 800a3ca:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	68da      	ldr	r2, [r3, #12]
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
=======
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	68da      	ldr	r2, [r3, #12]
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	430a      	orrs	r2, r1
 800a3e0:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< Updated upstream
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a9f      	ldr	r2, [pc, #636]	@ (8008c28 <UART_SetConfig+0x2dc>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d004      	beq.n	80089b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089b4:	4313      	orrs	r3, r2
 80089b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80089c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	6812      	ldr	r2, [r2, #0]
 80089ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089cc:	430b      	orrs	r3, r1
 80089ce:	6093      	str	r3, [r2, #8]
=======
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a9f      	ldr	r2, [pc, #636]	@ (800a66c <UART_SetConfig+0x2dc>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d004      	beq.n	800a3fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a406:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	6812      	ldr	r2, [r2, #0]
 800a40e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a410:	430b      	orrs	r3, r1
 800a412:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
<<<<<<< Updated upstream
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d6:	f023 010f 	bic.w	r1, r3, #15
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a90      	ldr	r2, [pc, #576]	@ (8008c2c <UART_SetConfig+0x2e0>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d125      	bne.n	8008a3c <UART_SetConfig+0xf0>
 80089f0:	4b8f      	ldr	r3, [pc, #572]	@ (8008c30 <UART_SetConfig+0x2e4>)
 80089f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089f6:	f003 0303 	and.w	r3, r3, #3
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d81a      	bhi.n	8008a34 <UART_SetConfig+0xe8>
 80089fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008a04 <UART_SetConfig+0xb8>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008a15 	.word	0x08008a15
 8008a08:	08008a25 	.word	0x08008a25
 8008a0c:	08008a1d 	.word	0x08008a1d
 8008a10:	08008a2d 	.word	0x08008a2d
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a1a:	e116      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a22:	e112      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008a24:	2304      	movs	r3, #4
 8008a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a2a:	e10e      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008a2c:	2308      	movs	r3, #8
 8008a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a32:	e10a      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008a34:	2310      	movs	r3, #16
 8008a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a3a:	e106      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a7c      	ldr	r2, [pc, #496]	@ (8008c34 <UART_SetConfig+0x2e8>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d138      	bne.n	8008ab8 <UART_SetConfig+0x16c>
 8008a46:	4b7a      	ldr	r3, [pc, #488]	@ (8008c30 <UART_SetConfig+0x2e4>)
 8008a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a4c:	f003 030c 	and.w	r3, r3, #12
 8008a50:	2b0c      	cmp	r3, #12
 8008a52:	d82d      	bhi.n	8008ab0 <UART_SetConfig+0x164>
 8008a54:	a201      	add	r2, pc, #4	@ (adr r2, 8008a5c <UART_SetConfig+0x110>)
 8008a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5a:	bf00      	nop
 8008a5c:	08008a91 	.word	0x08008a91
 8008a60:	08008ab1 	.word	0x08008ab1
 8008a64:	08008ab1 	.word	0x08008ab1
 8008a68:	08008ab1 	.word	0x08008ab1
 8008a6c:	08008aa1 	.word	0x08008aa1
 8008a70:	08008ab1 	.word	0x08008ab1
 8008a74:	08008ab1 	.word	0x08008ab1
 8008a78:	08008ab1 	.word	0x08008ab1
 8008a7c:	08008a99 	.word	0x08008a99
 8008a80:	08008ab1 	.word	0x08008ab1
 8008a84:	08008ab1 	.word	0x08008ab1
 8008a88:	08008ab1 	.word	0x08008ab1
 8008a8c:	08008aa9 	.word	0x08008aa9
 8008a90:	2300      	movs	r3, #0
 8008a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a96:	e0d8      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008a98:	2302      	movs	r3, #2
 8008a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a9e:	e0d4      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008aa0:	2304      	movs	r3, #4
 8008aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aa6:	e0d0      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008aa8:	2308      	movs	r3, #8
 8008aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aae:	e0cc      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008ab0:	2310      	movs	r3, #16
 8008ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ab6:	e0c8      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a5e      	ldr	r2, [pc, #376]	@ (8008c38 <UART_SetConfig+0x2ec>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d125      	bne.n	8008b0e <UART_SetConfig+0x1c2>
 8008ac2:	4b5b      	ldr	r3, [pc, #364]	@ (8008c30 <UART_SetConfig+0x2e4>)
 8008ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ac8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008acc:	2b30      	cmp	r3, #48	@ 0x30
 8008ace:	d016      	beq.n	8008afe <UART_SetConfig+0x1b2>
 8008ad0:	2b30      	cmp	r3, #48	@ 0x30
 8008ad2:	d818      	bhi.n	8008b06 <UART_SetConfig+0x1ba>
 8008ad4:	2b20      	cmp	r3, #32
 8008ad6:	d00a      	beq.n	8008aee <UART_SetConfig+0x1a2>
 8008ad8:	2b20      	cmp	r3, #32
 8008ada:	d814      	bhi.n	8008b06 <UART_SetConfig+0x1ba>
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <UART_SetConfig+0x19a>
 8008ae0:	2b10      	cmp	r3, #16
 8008ae2:	d008      	beq.n	8008af6 <UART_SetConfig+0x1aa>
 8008ae4:	e00f      	b.n	8008b06 <UART_SetConfig+0x1ba>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aec:	e0ad      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008aee:	2302      	movs	r3, #2
 8008af0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008af4:	e0a9      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008af6:	2304      	movs	r3, #4
 8008af8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008afc:	e0a5      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008afe:	2308      	movs	r3, #8
 8008b00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b04:	e0a1      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008b06:	2310      	movs	r3, #16
 8008b08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b0c:	e09d      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a4a      	ldr	r2, [pc, #296]	@ (8008c3c <UART_SetConfig+0x2f0>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d125      	bne.n	8008b64 <UART_SetConfig+0x218>
 8008b18:	4b45      	ldr	r3, [pc, #276]	@ (8008c30 <UART_SetConfig+0x2e4>)
 8008b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008b22:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b24:	d016      	beq.n	8008b54 <UART_SetConfig+0x208>
 8008b26:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b28:	d818      	bhi.n	8008b5c <UART_SetConfig+0x210>
 8008b2a:	2b80      	cmp	r3, #128	@ 0x80
 8008b2c:	d00a      	beq.n	8008b44 <UART_SetConfig+0x1f8>
 8008b2e:	2b80      	cmp	r3, #128	@ 0x80
 8008b30:	d814      	bhi.n	8008b5c <UART_SetConfig+0x210>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <UART_SetConfig+0x1f0>
 8008b36:	2b40      	cmp	r3, #64	@ 0x40
 8008b38:	d008      	beq.n	8008b4c <UART_SetConfig+0x200>
 8008b3a:	e00f      	b.n	8008b5c <UART_SetConfig+0x210>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b42:	e082      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008b44:	2302      	movs	r3, #2
 8008b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b4a:	e07e      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008b4c:	2304      	movs	r3, #4
 8008b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b52:	e07a      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008b54:	2308      	movs	r3, #8
 8008b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b5a:	e076      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008b5c:	2310      	movs	r3, #16
 8008b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b62:	e072      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a35      	ldr	r2, [pc, #212]	@ (8008c40 <UART_SetConfig+0x2f4>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d12a      	bne.n	8008bc4 <UART_SetConfig+0x278>
 8008b6e:	4b30      	ldr	r3, [pc, #192]	@ (8008c30 <UART_SetConfig+0x2e4>)
 8008b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b7c:	d01a      	beq.n	8008bb4 <UART_SetConfig+0x268>
 8008b7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b82:	d81b      	bhi.n	8008bbc <UART_SetConfig+0x270>
 8008b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b88:	d00c      	beq.n	8008ba4 <UART_SetConfig+0x258>
 8008b8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b8e:	d815      	bhi.n	8008bbc <UART_SetConfig+0x270>
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d003      	beq.n	8008b9c <UART_SetConfig+0x250>
 8008b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b98:	d008      	beq.n	8008bac <UART_SetConfig+0x260>
 8008b9a:	e00f      	b.n	8008bbc <UART_SetConfig+0x270>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ba2:	e052      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008baa:	e04e      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008bac:	2304      	movs	r3, #4
 8008bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bb2:	e04a      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008bb4:	2308      	movs	r3, #8
 8008bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bba:	e046      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008bbc:	2310      	movs	r3, #16
 8008bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bc2:	e042      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a17      	ldr	r2, [pc, #92]	@ (8008c28 <UART_SetConfig+0x2dc>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d13a      	bne.n	8008c44 <UART_SetConfig+0x2f8>
 8008bce:	4b18      	ldr	r3, [pc, #96]	@ (8008c30 <UART_SetConfig+0x2e4>)
 8008bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008bd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008bdc:	d01a      	beq.n	8008c14 <UART_SetConfig+0x2c8>
 8008bde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008be2:	d81b      	bhi.n	8008c1c <UART_SetConfig+0x2d0>
 8008be4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008be8:	d00c      	beq.n	8008c04 <UART_SetConfig+0x2b8>
 8008bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bee:	d815      	bhi.n	8008c1c <UART_SetConfig+0x2d0>
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <UART_SetConfig+0x2b0>
 8008bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bf8:	d008      	beq.n	8008c0c <UART_SetConfig+0x2c0>
 8008bfa:	e00f      	b.n	8008c1c <UART_SetConfig+0x2d0>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c02:	e022      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008c04:	2302      	movs	r3, #2
 8008c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c0a:	e01e      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008c0c:	2304      	movs	r3, #4
 8008c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c12:	e01a      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008c14:	2308      	movs	r3, #8
 8008c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c1a:	e016      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008c1c:	2310      	movs	r3, #16
 8008c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c22:	e012      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008c24:	cfff69f3 	.word	0xcfff69f3
 8008c28:	40008000 	.word	0x40008000
 8008c2c:	40013800 	.word	0x40013800
 8008c30:	40021000 	.word	0x40021000
 8008c34:	40004400 	.word	0x40004400
 8008c38:	40004800 	.word	0x40004800
 8008c3c:	40004c00 	.word	0x40004c00
 8008c40:	40005000 	.word	0x40005000
 8008c44:	2310      	movs	r3, #16
 8008c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4aae      	ldr	r2, [pc, #696]	@ (8008f08 <UART_SetConfig+0x5bc>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	f040 8097 	bne.w	8008d84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c5a:	2b08      	cmp	r3, #8
 8008c5c:	d823      	bhi.n	8008ca6 <UART_SetConfig+0x35a>
 8008c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c64 <UART_SetConfig+0x318>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008c89 	.word	0x08008c89
 8008c68:	08008ca7 	.word	0x08008ca7
 8008c6c:	08008c91 	.word	0x08008c91
 8008c70:	08008ca7 	.word	0x08008ca7
 8008c74:	08008c97 	.word	0x08008c97
 8008c78:	08008ca7 	.word	0x08008ca7
 8008c7c:	08008ca7 	.word	0x08008ca7
 8008c80:	08008ca7 	.word	0x08008ca7
 8008c84:	08008c9f 	.word	0x08008c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c88:	f7fd f85a 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8008c8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c8e:	e010      	b.n	8008cb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c90:	4b9e      	ldr	r3, [pc, #632]	@ (8008f0c <UART_SetConfig+0x5c0>)
 8008c92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c94:	e00d      	b.n	8008cb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c96:	f7fc ffe5 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8008c9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c9c:	e009      	b.n	8008cb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ca2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ca4:	e005      	b.n	8008cb2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008cb0:	bf00      	nop
=======
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a41a:	f023 010f 	bic.w	r1, r3, #15
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a90      	ldr	r2, [pc, #576]	@ (800a670 <UART_SetConfig+0x2e0>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d125      	bne.n	800a480 <UART_SetConfig+0xf0>
 800a434:	4b8f      	ldr	r3, [pc, #572]	@ (800a674 <UART_SetConfig+0x2e4>)
 800a436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a43a:	f003 0303 	and.w	r3, r3, #3
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d81a      	bhi.n	800a478 <UART_SetConfig+0xe8>
 800a442:	a201      	add	r2, pc, #4	@ (adr r2, 800a448 <UART_SetConfig+0xb8>)
 800a444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a448:	0800a459 	.word	0x0800a459
 800a44c:	0800a469 	.word	0x0800a469
 800a450:	0800a461 	.word	0x0800a461
 800a454:	0800a471 	.word	0x0800a471
 800a458:	2301      	movs	r3, #1
 800a45a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a45e:	e116      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a460:	2302      	movs	r3, #2
 800a462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a466:	e112      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a468:	2304      	movs	r3, #4
 800a46a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a46e:	e10e      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a470:	2308      	movs	r3, #8
 800a472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a476:	e10a      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a478:	2310      	movs	r3, #16
 800a47a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a47e:	e106      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a7c      	ldr	r2, [pc, #496]	@ (800a678 <UART_SetConfig+0x2e8>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d138      	bne.n	800a4fc <UART_SetConfig+0x16c>
 800a48a:	4b7a      	ldr	r3, [pc, #488]	@ (800a674 <UART_SetConfig+0x2e4>)
 800a48c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a490:	f003 030c 	and.w	r3, r3, #12
 800a494:	2b0c      	cmp	r3, #12
 800a496:	d82d      	bhi.n	800a4f4 <UART_SetConfig+0x164>
 800a498:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a0 <UART_SetConfig+0x110>)
 800a49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49e:	bf00      	nop
 800a4a0:	0800a4d5 	.word	0x0800a4d5
 800a4a4:	0800a4f5 	.word	0x0800a4f5
 800a4a8:	0800a4f5 	.word	0x0800a4f5
 800a4ac:	0800a4f5 	.word	0x0800a4f5
 800a4b0:	0800a4e5 	.word	0x0800a4e5
 800a4b4:	0800a4f5 	.word	0x0800a4f5
 800a4b8:	0800a4f5 	.word	0x0800a4f5
 800a4bc:	0800a4f5 	.word	0x0800a4f5
 800a4c0:	0800a4dd 	.word	0x0800a4dd
 800a4c4:	0800a4f5 	.word	0x0800a4f5
 800a4c8:	0800a4f5 	.word	0x0800a4f5
 800a4cc:	0800a4f5 	.word	0x0800a4f5
 800a4d0:	0800a4ed 	.word	0x0800a4ed
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4da:	e0d8      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a4dc:	2302      	movs	r3, #2
 800a4de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4e2:	e0d4      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a4e4:	2304      	movs	r3, #4
 800a4e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4ea:	e0d0      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a4ec:	2308      	movs	r3, #8
 800a4ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4f2:	e0cc      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a4f4:	2310      	movs	r3, #16
 800a4f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4fa:	e0c8      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a5e      	ldr	r2, [pc, #376]	@ (800a67c <UART_SetConfig+0x2ec>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d125      	bne.n	800a552 <UART_SetConfig+0x1c2>
 800a506:	4b5b      	ldr	r3, [pc, #364]	@ (800a674 <UART_SetConfig+0x2e4>)
 800a508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a50c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a510:	2b30      	cmp	r3, #48	@ 0x30
 800a512:	d016      	beq.n	800a542 <UART_SetConfig+0x1b2>
 800a514:	2b30      	cmp	r3, #48	@ 0x30
 800a516:	d818      	bhi.n	800a54a <UART_SetConfig+0x1ba>
 800a518:	2b20      	cmp	r3, #32
 800a51a:	d00a      	beq.n	800a532 <UART_SetConfig+0x1a2>
 800a51c:	2b20      	cmp	r3, #32
 800a51e:	d814      	bhi.n	800a54a <UART_SetConfig+0x1ba>
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <UART_SetConfig+0x19a>
 800a524:	2b10      	cmp	r3, #16
 800a526:	d008      	beq.n	800a53a <UART_SetConfig+0x1aa>
 800a528:	e00f      	b.n	800a54a <UART_SetConfig+0x1ba>
 800a52a:	2300      	movs	r3, #0
 800a52c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a530:	e0ad      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a532:	2302      	movs	r3, #2
 800a534:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a538:	e0a9      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a53a:	2304      	movs	r3, #4
 800a53c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a540:	e0a5      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a542:	2308      	movs	r3, #8
 800a544:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a548:	e0a1      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a54a:	2310      	movs	r3, #16
 800a54c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a550:	e09d      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a4a      	ldr	r2, [pc, #296]	@ (800a680 <UART_SetConfig+0x2f0>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d125      	bne.n	800a5a8 <UART_SetConfig+0x218>
 800a55c:	4b45      	ldr	r3, [pc, #276]	@ (800a674 <UART_SetConfig+0x2e4>)
 800a55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a562:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a566:	2bc0      	cmp	r3, #192	@ 0xc0
 800a568:	d016      	beq.n	800a598 <UART_SetConfig+0x208>
 800a56a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a56c:	d818      	bhi.n	800a5a0 <UART_SetConfig+0x210>
 800a56e:	2b80      	cmp	r3, #128	@ 0x80
 800a570:	d00a      	beq.n	800a588 <UART_SetConfig+0x1f8>
 800a572:	2b80      	cmp	r3, #128	@ 0x80
 800a574:	d814      	bhi.n	800a5a0 <UART_SetConfig+0x210>
 800a576:	2b00      	cmp	r3, #0
 800a578:	d002      	beq.n	800a580 <UART_SetConfig+0x1f0>
 800a57a:	2b40      	cmp	r3, #64	@ 0x40
 800a57c:	d008      	beq.n	800a590 <UART_SetConfig+0x200>
 800a57e:	e00f      	b.n	800a5a0 <UART_SetConfig+0x210>
 800a580:	2300      	movs	r3, #0
 800a582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a586:	e082      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a588:	2302      	movs	r3, #2
 800a58a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a58e:	e07e      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a590:	2304      	movs	r3, #4
 800a592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a596:	e07a      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a598:	2308      	movs	r3, #8
 800a59a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a59e:	e076      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a5a0:	2310      	movs	r3, #16
 800a5a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5a6:	e072      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a35      	ldr	r2, [pc, #212]	@ (800a684 <UART_SetConfig+0x2f4>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d12a      	bne.n	800a608 <UART_SetConfig+0x278>
 800a5b2:	4b30      	ldr	r3, [pc, #192]	@ (800a674 <UART_SetConfig+0x2e4>)
 800a5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5c0:	d01a      	beq.n	800a5f8 <UART_SetConfig+0x268>
 800a5c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5c6:	d81b      	bhi.n	800a600 <UART_SetConfig+0x270>
 800a5c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5cc:	d00c      	beq.n	800a5e8 <UART_SetConfig+0x258>
 800a5ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5d2:	d815      	bhi.n	800a600 <UART_SetConfig+0x270>
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d003      	beq.n	800a5e0 <UART_SetConfig+0x250>
 800a5d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5dc:	d008      	beq.n	800a5f0 <UART_SetConfig+0x260>
 800a5de:	e00f      	b.n	800a600 <UART_SetConfig+0x270>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5e6:	e052      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ee:	e04e      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a5f0:	2304      	movs	r3, #4
 800a5f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5f6:	e04a      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a5f8:	2308      	movs	r3, #8
 800a5fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5fe:	e046      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a600:	2310      	movs	r3, #16
 800a602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a606:	e042      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a17      	ldr	r2, [pc, #92]	@ (800a66c <UART_SetConfig+0x2dc>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d13a      	bne.n	800a688 <UART_SetConfig+0x2f8>
 800a612:	4b18      	ldr	r3, [pc, #96]	@ (800a674 <UART_SetConfig+0x2e4>)
 800a614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a618:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a61c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a620:	d01a      	beq.n	800a658 <UART_SetConfig+0x2c8>
 800a622:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a626:	d81b      	bhi.n	800a660 <UART_SetConfig+0x2d0>
 800a628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a62c:	d00c      	beq.n	800a648 <UART_SetConfig+0x2b8>
 800a62e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a632:	d815      	bhi.n	800a660 <UART_SetConfig+0x2d0>
 800a634:	2b00      	cmp	r3, #0
 800a636:	d003      	beq.n	800a640 <UART_SetConfig+0x2b0>
 800a638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a63c:	d008      	beq.n	800a650 <UART_SetConfig+0x2c0>
 800a63e:	e00f      	b.n	800a660 <UART_SetConfig+0x2d0>
 800a640:	2300      	movs	r3, #0
 800a642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a646:	e022      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a648:	2302      	movs	r3, #2
 800a64a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a64e:	e01e      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a650:	2304      	movs	r3, #4
 800a652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a656:	e01a      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a658:	2308      	movs	r3, #8
 800a65a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a65e:	e016      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a660:	2310      	movs	r3, #16
 800a662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a666:	e012      	b.n	800a68e <UART_SetConfig+0x2fe>
 800a668:	cfff69f3 	.word	0xcfff69f3
 800a66c:	40008000 	.word	0x40008000
 800a670:	40013800 	.word	0x40013800
 800a674:	40021000 	.word	0x40021000
 800a678:	40004400 	.word	0x40004400
 800a67c:	40004800 	.word	0x40004800
 800a680:	40004c00 	.word	0x40004c00
 800a684:	40005000 	.word	0x40005000
 800a688:	2310      	movs	r3, #16
 800a68a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4aae      	ldr	r2, [pc, #696]	@ (800a94c <UART_SetConfig+0x5bc>)
 800a694:	4293      	cmp	r3, r2
 800a696:	f040 8097 	bne.w	800a7c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a69a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	d823      	bhi.n	800a6ea <UART_SetConfig+0x35a>
 800a6a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6a8 <UART_SetConfig+0x318>)
 800a6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a8:	0800a6cd 	.word	0x0800a6cd
 800a6ac:	0800a6eb 	.word	0x0800a6eb
 800a6b0:	0800a6d5 	.word	0x0800a6d5
 800a6b4:	0800a6eb 	.word	0x0800a6eb
 800a6b8:	0800a6db 	.word	0x0800a6db
 800a6bc:	0800a6eb 	.word	0x0800a6eb
 800a6c0:	0800a6eb 	.word	0x0800a6eb
 800a6c4:	0800a6eb 	.word	0x0800a6eb
 800a6c8:	0800a6e3 	.word	0x0800a6e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6cc:	f7fc fc82 	bl	8006fd4 <HAL_RCC_GetPCLK1Freq>
 800a6d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a6d2:	e010      	b.n	800a6f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6d4:	4b9e      	ldr	r3, [pc, #632]	@ (800a950 <UART_SetConfig+0x5c0>)
 800a6d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a6d8:	e00d      	b.n	800a6f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6da:	f7fc fc0d 	bl	8006ef8 <HAL_RCC_GetSysClockFreq>
 800a6de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a6e0:	e009      	b.n	800a6f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a6e8:	e005      	b.n	800a6f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a6f4:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< Updated upstream
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 8130 	beq.w	8008f1a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cbe:	4a94      	ldr	r2, [pc, #592]	@ (8008f10 <UART_SetConfig+0x5c4>)
 8008cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ccc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	4413      	add	r3, r2
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d305      	bcc.n	8008cea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d903      	bls.n	8008cf2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008cf0:	e113      	b.n	8008f1a <UART_SetConfig+0x5ce>
=======
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f000 8130 	beq.w	800a95e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a702:	4a94      	ldr	r2, [pc, #592]	@ (800a954 <UART_SetConfig+0x5c4>)
 800a704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a708:	461a      	mov	r2, r3
 800a70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a710:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	4613      	mov	r3, r2
 800a718:	005b      	lsls	r3, r3, #1
 800a71a:	4413      	add	r3, r2
 800a71c:	69ba      	ldr	r2, [r7, #24]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d305      	bcc.n	800a72e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a728:	69ba      	ldr	r2, [r7, #24]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d903      	bls.n	800a736 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a734:	e113      	b.n	800a95e <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< Updated upstream
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	60bb      	str	r3, [r7, #8]
 8008cf8:	60fa      	str	r2, [r7, #12]
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cfe:	4a84      	ldr	r2, [pc, #528]	@ (8008f10 <UART_SetConfig+0x5c4>)
 8008d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	2200      	movs	r2, #0
 8008d08:	603b      	str	r3, [r7, #0]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d14:	f7f7 ff6e 	bl	8000bf4 <__aeabi_uldivmod>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4619      	mov	r1, r3
 8008d20:	f04f 0200 	mov.w	r2, #0
 8008d24:	f04f 0300 	mov.w	r3, #0
 8008d28:	020b      	lsls	r3, r1, #8
 8008d2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d2e:	0202      	lsls	r2, r0, #8
 8008d30:	6979      	ldr	r1, [r7, #20]
 8008d32:	6849      	ldr	r1, [r1, #4]
 8008d34:	0849      	lsrs	r1, r1, #1
 8008d36:	2000      	movs	r0, #0
 8008d38:	460c      	mov	r4, r1
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	eb12 0804 	adds.w	r8, r2, r4
 8008d40:	eb43 0905 	adc.w	r9, r3, r5
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	469a      	mov	sl, r3
 8008d4c:	4693      	mov	fp, r2
 8008d4e:	4652      	mov	r2, sl
 8008d50:	465b      	mov	r3, fp
 8008d52:	4640      	mov	r0, r8
 8008d54:	4649      	mov	r1, r9
 8008d56:	f7f7 ff4d 	bl	8000bf4 <__aeabi_uldivmod>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	4613      	mov	r3, r2
 8008d60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d68:	d308      	bcc.n	8008d7c <UART_SetConfig+0x430>
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d70:	d204      	bcs.n	8008d7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6a3a      	ldr	r2, [r7, #32]
 8008d78:	60da      	str	r2, [r3, #12]
 8008d7a:	e0ce      	b.n	8008f1a <UART_SetConfig+0x5ce>
=======
 800a736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a738:	2200      	movs	r2, #0
 800a73a:	60bb      	str	r3, [r7, #8]
 800a73c:	60fa      	str	r2, [r7, #12]
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a742:	4a84      	ldr	r2, [pc, #528]	@ (800a954 <UART_SetConfig+0x5c4>)
 800a744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a748:	b29b      	uxth	r3, r3
 800a74a:	2200      	movs	r2, #0
 800a74c:	603b      	str	r3, [r7, #0]
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a754:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a758:	f7f6 fa4c 	bl	8000bf4 <__aeabi_uldivmod>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	4610      	mov	r0, r2
 800a762:	4619      	mov	r1, r3
 800a764:	f04f 0200 	mov.w	r2, #0
 800a768:	f04f 0300 	mov.w	r3, #0
 800a76c:	020b      	lsls	r3, r1, #8
 800a76e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a772:	0202      	lsls	r2, r0, #8
 800a774:	6979      	ldr	r1, [r7, #20]
 800a776:	6849      	ldr	r1, [r1, #4]
 800a778:	0849      	lsrs	r1, r1, #1
 800a77a:	2000      	movs	r0, #0
 800a77c:	460c      	mov	r4, r1
 800a77e:	4605      	mov	r5, r0
 800a780:	eb12 0804 	adds.w	r8, r2, r4
 800a784:	eb43 0905 	adc.w	r9, r3, r5
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	469a      	mov	sl, r3
 800a790:	4693      	mov	fp, r2
 800a792:	4652      	mov	r2, sl
 800a794:	465b      	mov	r3, fp
 800a796:	4640      	mov	r0, r8
 800a798:	4649      	mov	r1, r9
 800a79a:	f7f6 fa2b 	bl	8000bf4 <__aeabi_uldivmod>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a7a6:	6a3b      	ldr	r3, [r7, #32]
 800a7a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7ac:	d308      	bcc.n	800a7c0 <UART_SetConfig+0x430>
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7b4:	d204      	bcs.n	800a7c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	6a3a      	ldr	r2, [r7, #32]
 800a7bc:	60da      	str	r2, [r3, #12]
 800a7be:	e0ce      	b.n	800a95e <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< Updated upstream
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008d82:	e0ca      	b.n	8008f1a <UART_SetConfig+0x5ce>
=======
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a7c6:	e0ca      	b.n	800a95e <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< Updated upstream
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	69db      	ldr	r3, [r3, #28]
 8008d88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d8c:	d166      	bne.n	8008e5c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d92:	2b08      	cmp	r3, #8
 8008d94:	d827      	bhi.n	8008de6 <UART_SetConfig+0x49a>
 8008d96:	a201      	add	r2, pc, #4	@ (adr r2, 8008d9c <UART_SetConfig+0x450>)
 8008d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9c:	08008dc1 	.word	0x08008dc1
 8008da0:	08008dc9 	.word	0x08008dc9
 8008da4:	08008dd1 	.word	0x08008dd1
 8008da8:	08008de7 	.word	0x08008de7
 8008dac:	08008dd7 	.word	0x08008dd7
 8008db0:	08008de7 	.word	0x08008de7
 8008db4:	08008de7 	.word	0x08008de7
 8008db8:	08008de7 	.word	0x08008de7
 8008dbc:	08008ddf 	.word	0x08008ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dc0:	f7fc ffbe 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8008dc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008dc6:	e014      	b.n	8008df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dc8:	f7fc ffd0 	bl	8005d6c <HAL_RCC_GetPCLK2Freq>
 8008dcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008dce:	e010      	b.n	8008df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dd0:	4b4e      	ldr	r3, [pc, #312]	@ (8008f0c <UART_SetConfig+0x5c0>)
 8008dd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008dd4:	e00d      	b.n	8008df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dd6:	f7fc ff45 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8008dda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ddc:	e009      	b.n	8008df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008de2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008de4:	e005      	b.n	8008df2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008de6:	2300      	movs	r3, #0
 8008de8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008df0:	bf00      	nop
=======
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	69db      	ldr	r3, [r3, #28]
 800a7cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7d0:	d166      	bne.n	800a8a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a7d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a7d6:	2b08      	cmp	r3, #8
 800a7d8:	d827      	bhi.n	800a82a <UART_SetConfig+0x49a>
 800a7da:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e0 <UART_SetConfig+0x450>)
 800a7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e0:	0800a805 	.word	0x0800a805
 800a7e4:	0800a80d 	.word	0x0800a80d
 800a7e8:	0800a815 	.word	0x0800a815
 800a7ec:	0800a82b 	.word	0x0800a82b
 800a7f0:	0800a81b 	.word	0x0800a81b
 800a7f4:	0800a82b 	.word	0x0800a82b
 800a7f8:	0800a82b 	.word	0x0800a82b
 800a7fc:	0800a82b 	.word	0x0800a82b
 800a800:	0800a823 	.word	0x0800a823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a804:	f7fc fbe6 	bl	8006fd4 <HAL_RCC_GetPCLK1Freq>
 800a808:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a80a:	e014      	b.n	800a836 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a80c:	f7fc fbf8 	bl	8007000 <HAL_RCC_GetPCLK2Freq>
 800a810:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a812:	e010      	b.n	800a836 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a814:	4b4e      	ldr	r3, [pc, #312]	@ (800a950 <UART_SetConfig+0x5c0>)
 800a816:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a818:	e00d      	b.n	800a836 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a81a:	f7fc fb6d 	bl	8006ef8 <HAL_RCC_GetSysClockFreq>
 800a81e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a820:	e009      	b.n	800a836 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a826:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a828:	e005      	b.n	800a836 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a82a:	2300      	movs	r3, #0
 800a82c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a834:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< Updated upstream
 8008df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 8090 	beq.w	8008f1a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dfe:	4a44      	ldr	r2, [pc, #272]	@ (8008f10 <UART_SetConfig+0x5c4>)
 8008e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e04:	461a      	mov	r2, r3
 8008e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e0c:	005a      	lsls	r2, r3, #1
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	085b      	lsrs	r3, r3, #1
 8008e14:	441a      	add	r2, r3
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	2b0f      	cmp	r3, #15
 8008e24:	d916      	bls.n	8008e54 <UART_SetConfig+0x508>
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e2c:	d212      	bcs.n	8008e54 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	f023 030f 	bic.w	r3, r3, #15
 8008e36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	085b      	lsrs	r3, r3, #1
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	f003 0307 	and.w	r3, r3, #7
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	8bfb      	ldrh	r3, [r7, #30]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	8bfa      	ldrh	r2, [r7, #30]
 8008e50:	60da      	str	r2, [r3, #12]
 8008e52:	e062      	b.n	8008f1a <UART_SetConfig+0x5ce>
=======
 800a836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f000 8090 	beq.w	800a95e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a842:	4a44      	ldr	r2, [pc, #272]	@ (800a954 <UART_SetConfig+0x5c4>)
 800a844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a848:	461a      	mov	r2, r3
 800a84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a84c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a850:	005a      	lsls	r2, r3, #1
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	085b      	lsrs	r3, r3, #1
 800a858:	441a      	add	r2, r3
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a862:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	2b0f      	cmp	r3, #15
 800a868:	d916      	bls.n	800a898 <UART_SetConfig+0x508>
 800a86a:	6a3b      	ldr	r3, [r7, #32]
 800a86c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a870:	d212      	bcs.n	800a898 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	b29b      	uxth	r3, r3
 800a876:	f023 030f 	bic.w	r3, r3, #15
 800a87a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a87c:	6a3b      	ldr	r3, [r7, #32]
 800a87e:	085b      	lsrs	r3, r3, #1
 800a880:	b29b      	uxth	r3, r3
 800a882:	f003 0307 	and.w	r3, r3, #7
 800a886:	b29a      	uxth	r2, r3
 800a888:	8bfb      	ldrh	r3, [r7, #30]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	8bfa      	ldrh	r2, [r7, #30]
 800a894:	60da      	str	r2, [r3, #12]
 800a896:	e062      	b.n	800a95e <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 8008e54:	2301      	movs	r3, #1
 8008e56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e5a:	e05e      	b.n	8008f1a <UART_SetConfig+0x5ce>
=======
 800a898:	2301      	movs	r3, #1
 800a89a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a89e:	e05e      	b.n	800a95e <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< Updated upstream
 8008e5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d828      	bhi.n	8008eb6 <UART_SetConfig+0x56a>
 8008e64:	a201      	add	r2, pc, #4	@ (adr r2, 8008e6c <UART_SetConfig+0x520>)
 8008e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6a:	bf00      	nop
 8008e6c:	08008e91 	.word	0x08008e91
 8008e70:	08008e99 	.word	0x08008e99
 8008e74:	08008ea1 	.word	0x08008ea1
 8008e78:	08008eb7 	.word	0x08008eb7
 8008e7c:	08008ea7 	.word	0x08008ea7
 8008e80:	08008eb7 	.word	0x08008eb7
 8008e84:	08008eb7 	.word	0x08008eb7
 8008e88:	08008eb7 	.word	0x08008eb7
 8008e8c:	08008eaf 	.word	0x08008eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e90:	f7fc ff56 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8008e94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e96:	e014      	b.n	8008ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e98:	f7fc ff68 	bl	8005d6c <HAL_RCC_GetPCLK2Freq>
 8008e9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e9e:	e010      	b.n	8008ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8008f0c <UART_SetConfig+0x5c0>)
 8008ea2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ea4:	e00d      	b.n	8008ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ea6:	f7fc fedd 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8008eaa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008eac:	e009      	b.n	8008ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008eb4:	e005      	b.n	8008ec2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ec0:	bf00      	nop
    }

    if (pclk != 0U)
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d028      	beq.n	8008f1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ecc:	4a10      	ldr	r2, [pc, #64]	@ (8008f10 <UART_SetConfig+0x5c4>)
 8008ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	085b      	lsrs	r3, r3, #1
 8008ee0:	441a      	add	r2, r3
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	2b0f      	cmp	r3, #15
 8008ef0:	d910      	bls.n	8008f14 <UART_SetConfig+0x5c8>
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ef8:	d20c      	bcs.n	8008f14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	60da      	str	r2, [r3, #12]
 8008f04:	e009      	b.n	8008f1a <UART_SetConfig+0x5ce>
 8008f06:	bf00      	nop
 8008f08:	40008000 	.word	0x40008000
 8008f0c:	00f42400 	.word	0x00f42400
 8008f10:	080096d8 	.word	0x080096d8
=======
 800a8a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a8a4:	2b08      	cmp	r3, #8
 800a8a6:	d828      	bhi.n	800a8fa <UART_SetConfig+0x56a>
 800a8a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a8b0 <UART_SetConfig+0x520>)
 800a8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ae:	bf00      	nop
 800a8b0:	0800a8d5 	.word	0x0800a8d5
 800a8b4:	0800a8dd 	.word	0x0800a8dd
 800a8b8:	0800a8e5 	.word	0x0800a8e5
 800a8bc:	0800a8fb 	.word	0x0800a8fb
 800a8c0:	0800a8eb 	.word	0x0800a8eb
 800a8c4:	0800a8fb 	.word	0x0800a8fb
 800a8c8:	0800a8fb 	.word	0x0800a8fb
 800a8cc:	0800a8fb 	.word	0x0800a8fb
 800a8d0:	0800a8f3 	.word	0x0800a8f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8d4:	f7fc fb7e 	bl	8006fd4 <HAL_RCC_GetPCLK1Freq>
 800a8d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a8da:	e014      	b.n	800a906 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8dc:	f7fc fb90 	bl	8007000 <HAL_RCC_GetPCLK2Freq>
 800a8e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a8e2:	e010      	b.n	800a906 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8e4:	4b1a      	ldr	r3, [pc, #104]	@ (800a950 <UART_SetConfig+0x5c0>)
 800a8e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a8e8:	e00d      	b.n	800a906 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8ea:	f7fc fb05 	bl	8006ef8 <HAL_RCC_GetSysClockFreq>
 800a8ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a8f0:	e009      	b.n	800a906 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a8f8:	e005      	b.n	800a906 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a904:	bf00      	nop
    }

    if (pclk != 0U)
 800a906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d028      	beq.n	800a95e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a910:	4a10      	ldr	r2, [pc, #64]	@ (800a954 <UART_SetConfig+0x5c4>)
 800a912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a916:	461a      	mov	r2, r3
 800a918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	085b      	lsrs	r3, r3, #1
 800a924:	441a      	add	r2, r3
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a92e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a930:	6a3b      	ldr	r3, [r7, #32]
 800a932:	2b0f      	cmp	r3, #15
 800a934:	d910      	bls.n	800a958 <UART_SetConfig+0x5c8>
 800a936:	6a3b      	ldr	r3, [r7, #32]
 800a938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a93c:	d20c      	bcs.n	800a958 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	b29a      	uxth	r2, r3
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	60da      	str	r2, [r3, #12]
 800a948:	e009      	b.n	800a95e <UART_SetConfig+0x5ce>
 800a94a:	bf00      	nop
 800a94c:	40008000 	.word	0x40008000
 800a950:	00f42400 	.word	0x00f42400
 800a954:	0800b628 	.word	0x0800b628
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 8008f14:	2301      	movs	r3, #1
 8008f16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
=======
 800a958:	2301      	movs	r3, #1
 800a95a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
>>>>>>> Stashed changes
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
<<<<<<< Updated upstream
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2200      	movs	r2, #0
 8008f34:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008f36:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3730      	adds	r7, #48	@ 0x30
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008f44 <UART_AdvFeatureConfig>:
=======
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2201      	movs	r2, #1
 800a962:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	2201      	movs	r2, #1
 800a96a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2200      	movs	r2, #0
 800a972:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	2200      	movs	r2, #0
 800a978:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a97a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3730      	adds	r7, #48	@ 0x30
 800a982:	46bd      	mov	sp, r7
 800a984:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a988 <UART_AdvFeatureConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
=======
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< Updated upstream
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00a      	beq.n	8008f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	605a      	str	r2, [r3, #4]
=======
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a994:	f003 0308 	and.w	r3, r3, #8
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00a      	beq.n	800a9b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	430a      	orrs	r2, r1
 800a9b0:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< Updated upstream
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	605a      	str	r2, [r3, #4]
=======
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b6:	f003 0301 	and.w	r3, r3, #1
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00a      	beq.n	800a9d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	430a      	orrs	r2, r1
 800a9d2:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< Updated upstream
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f94:	f003 0302 	and.w	r3, r3, #2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00a      	beq.n	8008fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	605a      	str	r2, [r3, #4]
=======
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9d8:	f003 0302 	and.w	r3, r3, #2
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00a      	beq.n	800a9f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	430a      	orrs	r2, r1
 800a9f4:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< Updated upstream
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb6:	f003 0304 	and.w	r3, r3, #4
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00a      	beq.n	8008fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	605a      	str	r2, [r3, #4]
=======
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9fa:	f003 0304 	and.w	r3, r3, #4
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00a      	beq.n	800aa18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	430a      	orrs	r2, r1
 800aa16:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< Updated upstream
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd8:	f003 0310 	and.w	r3, r3, #16
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00a      	beq.n	8008ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	609a      	str	r2, [r3, #8]
=======
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa1c:	f003 0310 	and.w	r3, r3, #16
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00a      	beq.n	800aa3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	430a      	orrs	r2, r1
 800aa38:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< Updated upstream
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffa:	f003 0320 	and.w	r3, r3, #32
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00a      	beq.n	8009018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	430a      	orrs	r2, r1
 8009016:	609a      	str	r2, [r3, #8]
=======
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa3e:	f003 0320 	and.w	r3, r3, #32
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00a      	beq.n	800aa5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	430a      	orrs	r2, r1
 800aa5a:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< Updated upstream
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	d01a      	beq.n	800905a <UART_AdvFeatureConfig+0x116>
=======
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d01a      	beq.n	800aa9e <UART_AdvFeatureConfig+0x116>
>>>>>>> Stashed changes
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< Updated upstream
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	430a      	orrs	r2, r1
 8009038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800903e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009042:	d10a      	bne.n	800905a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	605a      	str	r2, [r3, #4]
=======
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	430a      	orrs	r2, r1
 800aa7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa86:	d10a      	bne.n	800aa9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	430a      	orrs	r2, r1
 800aa9c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< Updated upstream
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800905e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00a      	beq.n	800907c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	430a      	orrs	r2, r1
 800907a:	605a      	str	r2, [r3, #4]
  }
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <UART_CheckIdleState>:
=======
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00a      	beq.n	800aac0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	430a      	orrs	r2, r1
 800aabe:	605a      	str	r2, [r3, #4]
  }
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <UART_CheckIdleState>:
>>>>>>> Stashed changes
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8009088:	b580      	push	{r7, lr}
 800908a:	b098      	sub	sp, #96	@ 0x60
 800908c:	af02      	add	r7, sp, #8
 800908e:	6078      	str	r0, [r7, #4]
=======
 800aacc:	b580      	push	{r7, lr}
 800aace:	b098      	sub	sp, #96	@ 0x60
 800aad0:	af02      	add	r7, sp, #8
 800aad2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< Updated upstream
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009098:	f7f9 fca8 	bl	80029ec <HAL_GetTick>
 800909c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0308 	and.w	r3, r3, #8
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	d12f      	bne.n	800910c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090b4:	2200      	movs	r2, #0
 80090b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f88e 	bl	80091dc <UART_WaitOnFlagUntilTimeout>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d022      	beq.n	800910c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090da:	653b      	str	r3, [r7, #80]	@ 0x50
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80090e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e6      	bne.n	80090c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e063      	b.n	80091d4 <UART_CheckIdleState+0x14c>
=======
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aadc:	f7f9 f8d0 	bl	8003c80 <HAL_GetTick>
 800aae0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f003 0308 	and.w	r3, r3, #8
 800aaec:	2b08      	cmp	r3, #8
 800aaee:	d12f      	bne.n	800ab50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaf0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aaf4:	9300      	str	r3, [sp, #0]
 800aaf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 f88e 	bl	800ac20 <UART_WaitOnFlagUntilTimeout>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d022      	beq.n	800ab50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab12:	e853 3f00 	ldrex	r3, [r3]
 800ab16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab1e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	461a      	mov	r2, r3
 800ab26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab28:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab30:	e841 2300 	strex	r3, r2, [r1]
 800ab34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1e6      	bne.n	800ab0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2220      	movs	r2, #32
 800ab40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	e063      	b.n	800ac18 <UART_CheckIdleState+0x14c>
>>>>>>> Stashed changes
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< Updated upstream
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 0304 	and.w	r3, r3, #4
 8009116:	2b04      	cmp	r3, #4
 8009118:	d149      	bne.n	80091ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800911a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009122:	2200      	movs	r2, #0
 8009124:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f857 	bl	80091dc <UART_WaitOnFlagUntilTimeout>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d03c      	beq.n	80091ae <UART_CheckIdleState+0x126>
=======
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 0304 	and.w	r3, r3, #4
 800ab5a:	2b04      	cmp	r3, #4
 800ab5c:	d149      	bne.n	800abf2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab5e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab66:	2200      	movs	r2, #0
 800ab68:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f857 	bl	800ac20 <UART_WaitOnFlagUntilTimeout>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d03c      	beq.n	800abf2 <UART_CheckIdleState+0x126>
>>>>>>> Stashed changes
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913c:	e853 3f00 	ldrex	r3, [r3]
 8009140:	623b      	str	r3, [r7, #32]
   return(result);
 8009142:	6a3b      	ldr	r3, [r7, #32]
 8009144:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009152:	633b      	str	r3, [r7, #48]	@ 0x30
 8009154:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009156:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800915a:	e841 2300 	strex	r3, r2, [r1]
 800915e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e6      	bne.n	8009134 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3308      	adds	r3, #8
 800916c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	e853 3f00 	ldrex	r3, [r3]
 8009174:	60fb      	str	r3, [r7, #12]
   return(result);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f023 0301 	bic.w	r3, r3, #1
 800917c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3308      	adds	r3, #8
 8009184:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009186:	61fa      	str	r2, [r7, #28]
 8009188:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918a:	69b9      	ldr	r1, [r7, #24]
 800918c:	69fa      	ldr	r2, [r7, #28]
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	617b      	str	r3, [r7, #20]
   return(result);
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e5      	bne.n	8009166 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2220      	movs	r2, #32
 800919e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e012      	b.n	80091d4 <UART_CheckIdleState+0x14c>
=======
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab80:	e853 3f00 	ldrex	r3, [r3]
 800ab84:	623b      	str	r3, [r7, #32]
   return(result);
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	461a      	mov	r2, r3
 800ab94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab96:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab9e:	e841 2300 	strex	r3, r2, [r1]
 800aba2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1e6      	bne.n	800ab78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	3308      	adds	r3, #8
 800abb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	e853 3f00 	ldrex	r3, [r3]
 800abb8:	60fb      	str	r3, [r7, #12]
   return(result);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f023 0301 	bic.w	r3, r3, #1
 800abc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	3308      	adds	r3, #8
 800abc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abca:	61fa      	str	r2, [r7, #28]
 800abcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abce:	69b9      	ldr	r1, [r7, #24]
 800abd0:	69fa      	ldr	r2, [r7, #28]
 800abd2:	e841 2300 	strex	r3, r2, [r1]
 800abd6:	617b      	str	r3, [r7, #20]
   return(result);
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1e5      	bne.n	800abaa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2220      	movs	r2, #32
 800abe2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abee:	2303      	movs	r3, #3
 800abf0:	e012      	b.n	800ac18 <UART_CheckIdleState+0x14c>
>>>>>>> Stashed changes
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2220      	movs	r2, #32
 80091b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2220      	movs	r2, #32
 80091ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3758      	adds	r7, #88	@ 0x58
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <UART_WaitOnFlagUntilTimeout>:
=======
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2220      	movs	r2, #32
 800abf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2220      	movs	r2, #32
 800abfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2200      	movs	r2, #0
 800ac06:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3758      	adds	r7, #88	@ 0x58
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	603b      	str	r3, [r7, #0]
 80091e8:	4613      	mov	r3, r2
 80091ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091ec:	e04f      	b.n	800928e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f4:	d04b      	beq.n	800928e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091f6:	f7f9 fbf9 	bl	80029ec <HAL_GetTick>
 80091fa:	4602      	mov	r2, r0
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	429a      	cmp	r2, r3
 8009204:	d302      	bcc.n	800920c <UART_WaitOnFlagUntilTimeout+0x30>
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d101      	bne.n	8009210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800920c:	2303      	movs	r3, #3
 800920e:	e04e      	b.n	80092ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 0304 	and.w	r3, r3, #4
 800921a:	2b00      	cmp	r3, #0
 800921c:	d037      	beq.n	800928e <UART_WaitOnFlagUntilTimeout+0xb2>
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2b80      	cmp	r3, #128	@ 0x80
 8009222:	d034      	beq.n	800928e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2b40      	cmp	r3, #64	@ 0x40
 8009228:	d031      	beq.n	800928e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	69db      	ldr	r3, [r3, #28]
 8009230:	f003 0308 	and.w	r3, r3, #8
 8009234:	2b08      	cmp	r3, #8
 8009236:	d110      	bne.n	800925a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2208      	movs	r2, #8
 800923e:	621a      	str	r2, [r3, #32]
=======
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	603b      	str	r3, [r7, #0]
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac30:	e04f      	b.n	800acd2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac38:	d04b      	beq.n	800acd2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac3a:	f7f9 f821 	bl	8003c80 <HAL_GetTick>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	1ad3      	subs	r3, r2, r3
 800ac44:	69ba      	ldr	r2, [r7, #24]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d302      	bcc.n	800ac50 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d101      	bne.n	800ac54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac50:	2303      	movs	r3, #3
 800ac52:	e04e      	b.n	800acf2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 0304 	and.w	r3, r3, #4
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d037      	beq.n	800acd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	2b80      	cmp	r3, #128	@ 0x80
 800ac66:	d034      	beq.n	800acd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2b40      	cmp	r3, #64	@ 0x40
 800ac6c:	d031      	beq.n	800acd2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	69db      	ldr	r3, [r3, #28]
 800ac74:	f003 0308 	and.w	r3, r3, #8
 800ac78:	2b08      	cmp	r3, #8
 800ac7a:	d110      	bne.n	800ac9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2208      	movs	r2, #8
 800ac82:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f000 f838 	bl	80092b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2208      	movs	r2, #8
 800924a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e029      	b.n	80092ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	69db      	ldr	r3, [r3, #28]
 8009260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009268:	d111      	bne.n	800928e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009272:	621a      	str	r2, [r3, #32]
=======
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f000 f920 	bl	800aeca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2208      	movs	r2, #8
 800ac8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e029      	b.n	800acf2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	69db      	ldr	r3, [r3, #28]
 800aca4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acac:	d111      	bne.n	800acd2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800acb6:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 f81e 	bl	80092b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2220      	movs	r2, #32
 800927e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e00f      	b.n	80092ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	69da      	ldr	r2, [r3, #28]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	4013      	ands	r3, r2
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	429a      	cmp	r2, r3
 800929c:	bf0c      	ite	eq
 800929e:	2301      	moveq	r3, #1
 80092a0:	2300      	movne	r3, #0
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	461a      	mov	r2, r3
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d0a0      	beq.n	80091ee <UART_WaitOnFlagUntilTimeout+0x12>
=======
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f000 f906 	bl	800aeca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2220      	movs	r2, #32
 800acc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800acce:	2303      	movs	r3, #3
 800acd0:	e00f      	b.n	800acf2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	69da      	ldr	r2, [r3, #28]
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	4013      	ands	r3, r2
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	429a      	cmp	r2, r3
 800ace0:	bf0c      	ite	eq
 800ace2:	2301      	moveq	r3, #1
 800ace4:	2300      	movne	r3, #0
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	461a      	mov	r2, r3
 800acea:	79fb      	ldrb	r3, [r7, #7]
 800acec:	429a      	cmp	r2, r3
 800acee:	d0a0      	beq.n	800ac32 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <UART_EndRxTransfer>:
=======
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b096      	sub	sp, #88	@ 0x58
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	4613      	mov	r3, r2
 800ad08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	88fa      	ldrh	r2, [r7, #6]
 800ad14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2222      	movs	r2, #34	@ 0x22
 800ad24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d02d      	beq.n	800ad8e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad38:	4a40      	ldr	r2, [pc, #256]	@ (800ae3c <UART_Start_Receive_DMA+0x140>)
 800ad3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad42:	4a3f      	ldr	r2, [pc, #252]	@ (800ae40 <UART_Start_Receive_DMA+0x144>)
 800ad44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad4c:	4a3d      	ldr	r2, [pc, #244]	@ (800ae44 <UART_Start_Receive_DMA+0x148>)
 800ad4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad56:	2200      	movs	r2, #0
 800ad58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3324      	adds	r3, #36	@ 0x24
 800ad66:	4619      	mov	r1, r3
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	88fb      	ldrh	r3, [r7, #6]
 800ad70:	f7fa ff6c 	bl	8005c4c <HAL_DMA_Start_IT>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d009      	beq.n	800ad8e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2210      	movs	r2, #16
 800ad7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2220      	movs	r2, #32
 800ad86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e051      	b.n	800ae32 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d018      	beq.n	800adc8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad9e:	e853 3f00 	ldrex	r3, [r3]
 800ada2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ada4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800adaa:	657b      	str	r3, [r7, #84]	@ 0x54
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	461a      	mov	r2, r3
 800adb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adb6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800adba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adbc:	e841 2300 	strex	r3, r2, [r1]
 800adc0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800adc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d1e6      	bne.n	800ad96 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	3308      	adds	r3, #8
 800adce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add2:	e853 3f00 	ldrex	r3, [r3]
 800add6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800add8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adda:	f043 0301 	orr.w	r3, r3, #1
 800adde:	653b      	str	r3, [r7, #80]	@ 0x50
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	3308      	adds	r3, #8
 800ade6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ade8:	637a      	str	r2, [r7, #52]	@ 0x34
 800adea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800adee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800adf0:	e841 2300 	strex	r3, r2, [r1]
 800adf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800adf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1e5      	bne.n	800adc8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	3308      	adds	r3, #8
 800ae02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	e853 3f00 	ldrex	r3, [r3]
 800ae0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	3308      	adds	r3, #8
 800ae1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae1c:	623a      	str	r2, [r7, #32]
 800ae1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae20:	69f9      	ldr	r1, [r7, #28]
 800ae22:	6a3a      	ldr	r2, [r7, #32]
 800ae24:	e841 2300 	strex	r3, r2, [r1]
 800ae28:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1e5      	bne.n	800adfc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3758      	adds	r7, #88	@ 0x58
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	0800b055 	.word	0x0800b055
 800ae40:	0800b189 	.word	0x0800b189
 800ae44:	0800b1cf 	.word	0x0800b1cf

0800ae48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b08f      	sub	sp, #60	@ 0x3c
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae56:	6a3b      	ldr	r3, [r7, #32]
 800ae58:	e853 3f00 	ldrex	r3, [r3]
 800ae5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ae64:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae70:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae76:	e841 2300 	strex	r3, r2, [r1]
 800ae7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1e6      	bne.n	800ae50 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	3308      	adds	r3, #8
 800ae88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	e853 3f00 	ldrex	r3, [r3]
 800ae90:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ae98:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	3308      	adds	r3, #8
 800aea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aea2:	61ba      	str	r2, [r7, #24]
 800aea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea6:	6979      	ldr	r1, [r7, #20]
 800aea8:	69ba      	ldr	r2, [r7, #24]
 800aeaa:	e841 2300 	strex	r3, r2, [r1]
 800aeae:	613b      	str	r3, [r7, #16]
   return(result);
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d1e5      	bne.n	800ae82 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2220      	movs	r2, #32
 800aeba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800aebe:	bf00      	nop
 800aec0:	373c      	adds	r7, #60	@ 0x3c
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80092b6:	b480      	push	{r7}
 80092b8:	b095      	sub	sp, #84	@ 0x54
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c6:	e853 3f00 	ldrex	r3, [r3]
 80092ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	461a      	mov	r2, r3
 80092da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80092de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092e4:	e841 2300 	strex	r3, r2, [r1]
 80092e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1e6      	bne.n	80092be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3308      	adds	r3, #8
 80092f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	6a3b      	ldr	r3, [r7, #32]
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009306:	f023 0301 	bic.w	r3, r3, #1
 800930a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3308      	adds	r3, #8
 8009312:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009314:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009316:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009318:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800931a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800931c:	e841 2300 	strex	r3, r2, [r1]
 8009320:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e3      	bne.n	80092f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800932c:	2b01      	cmp	r3, #1
 800932e:	d118      	bne.n	8009362 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	60bb      	str	r3, [r7, #8]
   return(result);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f023 0310 	bic.w	r3, r3, #16
 8009344:	647b      	str	r3, [r7, #68]	@ 0x44
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800934e:	61bb      	str	r3, [r7, #24]
 8009350:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	6979      	ldr	r1, [r7, #20]
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	e841 2300 	strex	r3, r2, [r1]
 800935a:	613b      	str	r3, [r7, #16]
   return(result);
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e6      	bne.n	8009330 <UART_EndRxTransfer+0x7a>
=======
 800aeca:	b480      	push	{r7}
 800aecc:	b095      	sub	sp, #84	@ 0x54
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeda:	e853 3f00 	ldrex	r3, [r3]
 800aede:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	461a      	mov	r2, r3
 800aeee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aef0:	643b      	str	r3, [r7, #64]	@ 0x40
 800aef2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aef6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aef8:	e841 2300 	strex	r3, r2, [r1]
 800aefc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aefe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1e6      	bne.n	800aed2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	3308      	adds	r3, #8
 800af0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0c:	6a3b      	ldr	r3, [r7, #32]
 800af0e:	e853 3f00 	ldrex	r3, [r3]
 800af12:	61fb      	str	r3, [r7, #28]
   return(result);
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af1a:	f023 0301 	bic.w	r3, r3, #1
 800af1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	3308      	adds	r3, #8
 800af26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af30:	e841 2300 	strex	r3, r2, [r1]
 800af34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1e3      	bne.n	800af04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af40:	2b01      	cmp	r3, #1
 800af42:	d118      	bne.n	800af76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	e853 3f00 	ldrex	r3, [r3]
 800af50:	60bb      	str	r3, [r7, #8]
   return(result);
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	f023 0310 	bic.w	r3, r3, #16
 800af58:	647b      	str	r3, [r7, #68]	@ 0x44
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	461a      	mov	r2, r3
 800af60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af62:	61bb      	str	r3, [r7, #24]
 800af64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af66:	6979      	ldr	r1, [r7, #20]
 800af68:	69ba      	ldr	r2, [r7, #24]
 800af6a:	e841 2300 	strex	r3, r2, [r1]
 800af6e:	613b      	str	r3, [r7, #16]
   return(result);
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1e6      	bne.n	800af44 <UART_EndRxTransfer+0x7a>
>>>>>>> Stashed changes
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2220      	movs	r2, #32
 8009366:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009376:	bf00      	nop
 8009378:	3754      	adds	r7, #84	@ 0x54
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <UART_DMAAbortOnError>:
=======
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2220      	movs	r2, #32
 800af7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800af8a:	bf00      	nop
 800af8c:	3754      	adds	r7, #84	@ 0x54
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b090      	sub	sp, #64	@ 0x40
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afa2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f003 0320 	and.w	r3, r3, #32
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d137      	bne.n	800b022 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800afb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afb4:	2200      	movs	r2, #0
 800afb6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	3308      	adds	r3, #8
 800afc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc4:	e853 3f00 	ldrex	r3, [r3]
 800afc8:	623b      	str	r3, [r7, #32]
   return(result);
 800afca:	6a3b      	ldr	r3, [r7, #32]
 800afcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800afd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	3308      	adds	r3, #8
 800afd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800afda:	633a      	str	r2, [r7, #48]	@ 0x30
 800afdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afe2:	e841 2300 	strex	r3, r2, [r1]
 800afe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1e5      	bne.n	800afba <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	e853 3f00 	ldrex	r3, [r3]
 800affa:	60fb      	str	r3, [r7, #12]
   return(result);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b002:	637b      	str	r3, [r7, #52]	@ 0x34
 800b004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	461a      	mov	r2, r3
 800b00a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b00c:	61fb      	str	r3, [r7, #28]
 800b00e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b010:	69b9      	ldr	r1, [r7, #24]
 800b012:	69fa      	ldr	r2, [r7, #28]
 800b014:	e841 2300 	strex	r3, r2, [r1]
 800b018:	617b      	str	r3, [r7, #20]
   return(result);
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1e6      	bne.n	800afee <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b020:	e004      	b.n	800b02c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b024:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b028:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b02a:	4798      	blx	r3
}
 800b02c:	bf00      	nop
 800b02e:	3740      	adds	r7, #64	@ 0x40
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b040:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b04c:	bf00      	nop
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b09c      	sub	sp, #112	@ 0x70
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b060:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0320 	and.w	r3, r3, #32
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d171      	bne.n	800b154 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b072:	2200      	movs	r2, #0
 800b074:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b078:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b080:	e853 3f00 	ldrex	r3, [r3]
 800b084:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b08c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b08e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	461a      	mov	r2, r3
 800b094:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b096:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b098:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b09c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b09e:	e841 2300 	strex	r3, r2, [r1]
 800b0a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b0a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1e6      	bne.n	800b078 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	3308      	adds	r3, #8
 800b0b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b4:	e853 3f00 	ldrex	r3, [r3]
 800b0b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0bc:	f023 0301 	bic.w	r3, r3, #1
 800b0c0:	667b      	str	r3, [r7, #100]	@ 0x64
 800b0c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	3308      	adds	r3, #8
 800b0c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b0ca:	647a      	str	r2, [r7, #68]	@ 0x44
 800b0cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0d2:	e841 2300 	strex	r3, r2, [r1]
 800b0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1e5      	bne.n	800b0aa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	3308      	adds	r3, #8
 800b0e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e8:	e853 3f00 	ldrex	r3, [r3]
 800b0ec:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0f4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b0f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b0fe:	633a      	str	r2, [r7, #48]	@ 0x30
 800b100:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b106:	e841 2300 	strex	r3, r2, [r1]
 800b10a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1e5      	bne.n	800b0de <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b114:	2220      	movs	r2, #32
 800b116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b11a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b11c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d118      	bne.n	800b154 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	e853 3f00 	ldrex	r3, [r3]
 800b12e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f023 0310 	bic.w	r3, r3, #16
 800b136:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	461a      	mov	r2, r3
 800b13e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b140:	61fb      	str	r3, [r7, #28]
 800b142:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b144:	69b9      	ldr	r1, [r7, #24]
 800b146:	69fa      	ldr	r2, [r7, #28]
 800b148:	e841 2300 	strex	r3, r2, [r1]
 800b14c:	617b      	str	r3, [r7, #20]
   return(result);
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1e6      	bne.n	800b122 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b156:	2200      	movs	r2, #0
 800b158:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b15a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b15c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d109      	bne.n	800b176 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b164:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b168:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b16a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b16e:	4611      	mov	r1, r2
 800b170:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b172:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b174:	e004      	b.n	800b180 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b178:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b17c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b17e:	4798      	blx	r3
}
 800b180:	bf00      	nop
 800b182:	3770      	adds	r7, #112	@ 0x70
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b194:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2201      	movs	r2, #1
 800b19a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d10b      	bne.n	800b1bc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b1b0:	0852      	lsrs	r2, r2, #1
 800b1b2:	b292      	uxth	r2, r2
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1ba:	e004      	b.n	800b1c6 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	4798      	blx	r3
}
 800b1c6:	bf00      	nop
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b086      	sub	sp, #24
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1da:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1e2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1f6:	2b80      	cmp	r3, #128	@ 0x80
 800b1f8:	d109      	bne.n	800b20e <UART_DMAError+0x40>
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	2b21      	cmp	r3, #33	@ 0x21
 800b1fe:	d106      	bne.n	800b20e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	2200      	movs	r2, #0
 800b204:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b208:	6978      	ldr	r0, [r7, #20]
 800b20a:	f7ff fe1d 	bl	800ae48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b218:	2b40      	cmp	r3, #64	@ 0x40
 800b21a:	d109      	bne.n	800b230 <UART_DMAError+0x62>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2b22      	cmp	r3, #34	@ 0x22
 800b220:	d106      	bne.n	800b230 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	2200      	movs	r2, #0
 800b226:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b22a:	6978      	ldr	r0, [r7, #20]
 800b22c:	f7ff fe4d 	bl	800aeca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b236:	f043 0210 	orr.w	r2, r3, #16
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b246:	6978      	ldr	r0, [r7, #20]
 800b248:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b24a:	bf00      	nop
 800b24c:	3718      	adds	r7, #24
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <UART_DMAAbortOnError>:
>>>>>>> Stashed changes
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8009382:	b580      	push	{r7, lr}
 8009384:	b084      	sub	sp, #16
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
=======
 800b252:	b580      	push	{r7, lr}
 800b254:	b084      	sub	sp, #16
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b25e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
>>>>>>> Stashed changes

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
<<<<<<< Updated upstream
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	4798      	blx	r3
=======
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	4798      	blx	r3
>>>>>>> Stashed changes
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
<<<<<<< Updated upstream
 80093aa:	bf00      	nop
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <UART_EndTransmit_IT>:
=======
 800b27a:	bf00      	nop
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <UART_EndTransmit_IT>:
>>>>>>> Stashed changes
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b088      	sub	sp, #32
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	e853 3f00 	ldrex	r3, [r3]
 80093c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093ce:	61fb      	str	r3, [r7, #28]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	461a      	mov	r2, r3
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	61bb      	str	r3, [r7, #24]
 80093da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093dc:	6979      	ldr	r1, [r7, #20]
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	e841 2300 	strex	r3, r2, [r1]
 80093e4:	613b      	str	r3, [r7, #16]
   return(result);
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1e6      	bne.n	80093ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2220      	movs	r2, #32
 80093f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	679a      	str	r2, [r3, #120]	@ 0x78
=======
 800b282:	b580      	push	{r7, lr}
 800b284:	b088      	sub	sp, #32
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	e853 3f00 	ldrex	r3, [r3]
 800b296:	60bb      	str	r3, [r7, #8]
   return(result);
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b29e:	61fb      	str	r3, [r7, #28]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	61bb      	str	r3, [r7, #24]
 800b2aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ac:	6979      	ldr	r1, [r7, #20]
 800b2ae:	69ba      	ldr	r2, [r7, #24]
 800b2b0:	e841 2300 	strex	r3, r2, [r1]
 800b2b4:	613b      	str	r3, [r7, #16]
   return(result);
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1e6      	bne.n	800b28a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2220      	movs	r2, #32
 800b2c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	679a      	str	r2, [r3, #120]	@ 0x78
>>>>>>> Stashed changes

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
<<<<<<< Updated upstream
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	4798      	blx	r3
=======
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	4798      	blx	r3
>>>>>>> Stashed changes
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
<<<<<<< Updated upstream
 8009404:	bf00      	nop
 8009406:	3720      	adds	r7, #32
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <HAL_UARTEx_WakeupCallback>:
=======
 800b2d4:	bf00      	nop
 800b2d6:	3720      	adds	r7, #32
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <HAL_UARTEx_WakeupCallback>:
>>>>>>> Stashed changes
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
=======
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_UARTEx_RxFifoFullCallback>:
=======
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <HAL_UARTEx_RxFifoFullCallback>:
>>>>>>> Stashed changes
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
=======
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_UARTEx_TxFifoEmptyCallback>:
=======
 800b2f8:	bf00      	nop
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <HAL_UARTEx_TxFifoEmptyCallback>:
>>>>>>> Stashed changes
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
=======
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_UARTEx_DisableFifoMode>:
=======
 800b30c:	bf00      	nop
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <HAL_UARTEx_DisableFifoMode>:
>>>>>>> Stashed changes
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
=======
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009456:	2b01      	cmp	r3, #1
 8009458:	d101      	bne.n	800945e <HAL_UARTEx_DisableFifoMode+0x16>
 800945a:	2302      	movs	r3, #2
 800945c:	e027      	b.n	80094ae <HAL_UARTEx_DisableFifoMode+0x66>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2224      	movs	r2, #36	@ 0x24
 800946a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f022 0201 	bic.w	r2, r2, #1
 8009484:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800948c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2220      	movs	r2, #32
 80094a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <HAL_UARTEx_SetTxFifoThreshold>:
=======
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b326:	2b01      	cmp	r3, #1
 800b328:	d101      	bne.n	800b32e <HAL_UARTEx_DisableFifoMode+0x16>
 800b32a:	2302      	movs	r3, #2
 800b32c:	e027      	b.n	800b37e <HAL_UARTEx_DisableFifoMode+0x66>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2201      	movs	r2, #1
 800b332:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2224      	movs	r2, #36	@ 0x24
 800b33a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f022 0201 	bic.w	r2, r2, #1
 800b354:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b35c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2220      	movs	r2, #32
 800b370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <HAL_UARTEx_SetTxFifoThreshold>:
>>>>>>> Stashed changes
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< Updated upstream
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	6039      	str	r1, [r7, #0]
=======
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b084      	sub	sp, #16
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d101      	bne.n	80094d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094ce:	2302      	movs	r3, #2
 80094d0:	e02d      	b.n	800952e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2224      	movs	r2, #36	@ 0x24
 80094de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 0201 	bic.w	r2, r2, #1
 80094f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	683a      	ldr	r2, [r7, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f850 	bl	80095b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2220      	movs	r2, #32
 8009520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <HAL_UARTEx_SetRxFifoThreshold>:
=======
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d101      	bne.n	800b3a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b39e:	2302      	movs	r3, #2
 800b3a0:	e02d      	b.n	800b3fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2224      	movs	r2, #36	@ 0x24
 800b3ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f022 0201 	bic.w	r2, r2, #1
 800b3c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	430a      	orrs	r2, r1
 800b3dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f850 	bl	800b484 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2220      	movs	r2, #32
 800b3f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3710      	adds	r7, #16
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <HAL_UARTEx_SetRxFifoThreshold>:
>>>>>>> Stashed changes
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< Updated upstream
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	6039      	str	r1, [r7, #0]
=======
 800b406:	b580      	push	{r7, lr}
 800b408:	b084      	sub	sp, #16
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
 800b40e:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009546:	2b01      	cmp	r3, #1
 8009548:	d101      	bne.n	800954e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800954a:	2302      	movs	r3, #2
 800954c:	e02d      	b.n	80095aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2224      	movs	r2, #36	@ 0x24
 800955a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 0201 	bic.w	r2, r2, #1
 8009574:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	430a      	orrs	r2, r1
 8009588:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f812 	bl	80095b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2220      	movs	r2, #32
 800959c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
	...

080095b4 <UARTEx_SetNbDataToProcess>:
=======
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b416:	2b01      	cmp	r3, #1
 800b418:	d101      	bne.n	800b41e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b41a:	2302      	movs	r3, #2
 800b41c:	e02d      	b.n	800b47a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2224      	movs	r2, #36	@ 0x24
 800b42a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f022 0201 	bic.w	r2, r2, #1
 800b444:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	683a      	ldr	r2, [r7, #0]
 800b456:	430a      	orrs	r2, r1
 800b458:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f812 	bl	800b484 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2220      	movs	r2, #32
 800b46c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b478:	2300      	movs	r3, #0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3710      	adds	r7, #16
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
	...

0800b484 <UARTEx_SetNbDataToProcess>:
>>>>>>> Stashed changes
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
=======
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
<<<<<<< Updated upstream
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d108      	bne.n	80095d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
=======
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b490:	2b00      	cmp	r3, #0
 800b492:	d108      	bne.n	800b4a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
>>>>>>> Stashed changes
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
<<<<<<< Updated upstream
 80095d4:	e031      	b.n	800963a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095d6:	2308      	movs	r3, #8
 80095d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095da:	2308      	movs	r3, #8
 80095dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	0e5b      	lsrs	r3, r3, #25
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	f003 0307 	and.w	r3, r3, #7
 80095ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	0f5b      	lsrs	r3, r3, #29
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	f003 0307 	and.w	r3, r3, #7
 80095fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	7b3a      	ldrb	r2, [r7, #12]
 8009602:	4911      	ldr	r1, [pc, #68]	@ (8009648 <UARTEx_SetNbDataToProcess+0x94>)
 8009604:	5c8a      	ldrb	r2, [r1, r2]
 8009606:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800960a:	7b3a      	ldrb	r2, [r7, #12]
 800960c:	490f      	ldr	r1, [pc, #60]	@ (800964c <UARTEx_SetNbDataToProcess+0x98>)
 800960e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009610:	fb93 f3f2 	sdiv	r3, r3, r2
 8009614:	b29a      	uxth	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	7b7a      	ldrb	r2, [r7, #13]
 8009620:	4909      	ldr	r1, [pc, #36]	@ (8009648 <UARTEx_SetNbDataToProcess+0x94>)
 8009622:	5c8a      	ldrb	r2, [r1, r2]
 8009624:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009628:	7b7a      	ldrb	r2, [r7, #13]
 800962a:	4908      	ldr	r1, [pc, #32]	@ (800964c <UARTEx_SetNbDataToProcess+0x98>)
 800962c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800962e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009632:	b29a      	uxth	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800963a:	bf00      	nop
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	080096f0 	.word	0x080096f0
 800964c:	080096f8 	.word	0x080096f8

08009650 <memset>:
 8009650:	4402      	add	r2, r0
 8009652:	4603      	mov	r3, r0
 8009654:	4293      	cmp	r3, r2
 8009656:	d100      	bne.n	800965a <memset+0xa>
 8009658:	4770      	bx	lr
 800965a:	f803 1b01 	strb.w	r1, [r3], #1
 800965e:	e7f9      	b.n	8009654 <memset+0x4>

08009660 <__libc_init_array>:
 8009660:	b570      	push	{r4, r5, r6, lr}
 8009662:	4d0d      	ldr	r5, [pc, #52]	@ (8009698 <__libc_init_array+0x38>)
 8009664:	4c0d      	ldr	r4, [pc, #52]	@ (800969c <__libc_init_array+0x3c>)
 8009666:	1b64      	subs	r4, r4, r5
 8009668:	10a4      	asrs	r4, r4, #2
 800966a:	2600      	movs	r6, #0
 800966c:	42a6      	cmp	r6, r4
 800966e:	d109      	bne.n	8009684 <__libc_init_array+0x24>
 8009670:	4d0b      	ldr	r5, [pc, #44]	@ (80096a0 <__libc_init_array+0x40>)
 8009672:	4c0c      	ldr	r4, [pc, #48]	@ (80096a4 <__libc_init_array+0x44>)
 8009674:	f000 f818 	bl	80096a8 <_init>
 8009678:	1b64      	subs	r4, r4, r5
 800967a:	10a4      	asrs	r4, r4, #2
 800967c:	2600      	movs	r6, #0
 800967e:	42a6      	cmp	r6, r4
 8009680:	d105      	bne.n	800968e <__libc_init_array+0x2e>
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	f855 3b04 	ldr.w	r3, [r5], #4
 8009688:	4798      	blx	r3
 800968a:	3601      	adds	r6, #1
 800968c:	e7ee      	b.n	800966c <__libc_init_array+0xc>
 800968e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009692:	4798      	blx	r3
 8009694:	3601      	adds	r6, #1
 8009696:	e7f2      	b.n	800967e <__libc_init_array+0x1e>
 8009698:	08009708 	.word	0x08009708
 800969c:	08009708 	.word	0x08009708
 80096a0:	08009708 	.word	0x08009708
 80096a4:	0800970c 	.word	0x0800970c

080096a8 <_init>:
 80096a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096aa:	bf00      	nop
 80096ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ae:	bc08      	pop	{r3}
 80096b0:	469e      	mov	lr, r3
 80096b2:	4770      	bx	lr

080096b4 <_fini>:
 80096b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b6:	bf00      	nop
 80096b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ba:	bc08      	pop	{r3}
 80096bc:	469e      	mov	lr, r3
 80096be:	4770      	bx	lr
=======
 800b4a4:	e031      	b.n	800b50a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4a6:	2308      	movs	r3, #8
 800b4a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4aa:	2308      	movs	r3, #8
 800b4ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	0e5b      	lsrs	r3, r3, #25
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	f003 0307 	and.w	r3, r3, #7
 800b4bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	0f5b      	lsrs	r3, r3, #29
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	f003 0307 	and.w	r3, r3, #7
 800b4cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4ce:	7bbb      	ldrb	r3, [r7, #14]
 800b4d0:	7b3a      	ldrb	r2, [r7, #12]
 800b4d2:	4911      	ldr	r1, [pc, #68]	@ (800b518 <UARTEx_SetNbDataToProcess+0x94>)
 800b4d4:	5c8a      	ldrb	r2, [r1, r2]
 800b4d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b4da:	7b3a      	ldrb	r2, [r7, #12]
 800b4dc:	490f      	ldr	r1, [pc, #60]	@ (800b51c <UARTEx_SetNbDataToProcess+0x98>)
 800b4de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
 800b4ee:	7b7a      	ldrb	r2, [r7, #13]
 800b4f0:	4909      	ldr	r1, [pc, #36]	@ (800b518 <UARTEx_SetNbDataToProcess+0x94>)
 800b4f2:	5c8a      	ldrb	r2, [r1, r2]
 800b4f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b4f8:	7b7a      	ldrb	r2, [r7, #13]
 800b4fa:	4908      	ldr	r1, [pc, #32]	@ (800b51c <UARTEx_SetNbDataToProcess+0x98>)
 800b4fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800b502:	b29a      	uxth	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b50a:	bf00      	nop
 800b50c:	3714      	adds	r7, #20
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	0800b640 	.word	0x0800b640
 800b51c:	0800b648 	.word	0x0800b648

0800b520 <memset>:
 800b520:	4402      	add	r2, r0
 800b522:	4603      	mov	r3, r0
 800b524:	4293      	cmp	r3, r2
 800b526:	d100      	bne.n	800b52a <memset+0xa>
 800b528:	4770      	bx	lr
 800b52a:	f803 1b01 	strb.w	r1, [r3], #1
 800b52e:	e7f9      	b.n	800b524 <memset+0x4>

0800b530 <__libc_init_array>:
 800b530:	b570      	push	{r4, r5, r6, lr}
 800b532:	4d0d      	ldr	r5, [pc, #52]	@ (800b568 <__libc_init_array+0x38>)
 800b534:	4c0d      	ldr	r4, [pc, #52]	@ (800b56c <__libc_init_array+0x3c>)
 800b536:	1b64      	subs	r4, r4, r5
 800b538:	10a4      	asrs	r4, r4, #2
 800b53a:	2600      	movs	r6, #0
 800b53c:	42a6      	cmp	r6, r4
 800b53e:	d109      	bne.n	800b554 <__libc_init_array+0x24>
 800b540:	4d0b      	ldr	r5, [pc, #44]	@ (800b570 <__libc_init_array+0x40>)
 800b542:	4c0c      	ldr	r4, [pc, #48]	@ (800b574 <__libc_init_array+0x44>)
 800b544:	f000 f826 	bl	800b594 <_init>
 800b548:	1b64      	subs	r4, r4, r5
 800b54a:	10a4      	asrs	r4, r4, #2
 800b54c:	2600      	movs	r6, #0
 800b54e:	42a6      	cmp	r6, r4
 800b550:	d105      	bne.n	800b55e <__libc_init_array+0x2e>
 800b552:	bd70      	pop	{r4, r5, r6, pc}
 800b554:	f855 3b04 	ldr.w	r3, [r5], #4
 800b558:	4798      	blx	r3
 800b55a:	3601      	adds	r6, #1
 800b55c:	e7ee      	b.n	800b53c <__libc_init_array+0xc>
 800b55e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b562:	4798      	blx	r3
 800b564:	3601      	adds	r6, #1
 800b566:	e7f2      	b.n	800b54e <__libc_init_array+0x1e>
 800b568:	0800b658 	.word	0x0800b658
 800b56c:	0800b658 	.word	0x0800b658
 800b570:	0800b658 	.word	0x0800b658
 800b574:	0800b65c 	.word	0x0800b65c

0800b578 <memcpy>:
 800b578:	440a      	add	r2, r1
 800b57a:	4291      	cmp	r1, r2
 800b57c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b580:	d100      	bne.n	800b584 <memcpy+0xc>
 800b582:	4770      	bx	lr
 800b584:	b510      	push	{r4, lr}
 800b586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b58a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b58e:	4291      	cmp	r1, r2
 800b590:	d1f9      	bne.n	800b586 <memcpy+0xe>
 800b592:	bd10      	pop	{r4, pc}

0800b594 <_init>:
 800b594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b596:	bf00      	nop
 800b598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b59a:	bc08      	pop	{r3}
 800b59c:	469e      	mov	lr, r3
 800b59e:	4770      	bx	lr

0800b5a0 <_fini>:
 800b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a2:	bf00      	nop
 800b5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5a6:	bc08      	pop	{r3}
 800b5a8:	469e      	mov	lr, r3
 800b5aa:	4770      	bx	lr
>>>>>>> Stashed changes

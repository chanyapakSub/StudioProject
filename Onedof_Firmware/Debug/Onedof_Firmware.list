
Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2c8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800b4a0  0800b4a0  0000c4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b544  0800b544  0000d280  2**0
                  CONTENTS
  4 .ARM          00000008  0800b544  0800b544  0000c544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b54c  0800b54c  0000d280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b54c  0800b54c  0000c54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b550  0800b550  0000c550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  0800b554  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ec4  20000280  0800b7d4  0000d280  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001144  0800b7d4  0000e144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5c8  00000000  00000000  0000d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000398e  00000000  00000000  0002b878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  0002f208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b8  00000000  00000000  000308d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cc5  00000000  00000000  00031a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d782  00000000  00000000  0005b755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001152ed  00000000  00000000  00078ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018e1c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000638c  00000000  00000000  0018e208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00194594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000280 	.word	0x20000280
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b488 	.word	0x0800b488

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000284 	.word	0x20000284
 8000214:	0800b488 	.word	0x0800b488

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b96a 	b.w	8000ee0 <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d14e      	bne.n	8000cce <__udivmoddi4+0xaa>
 8000c30:	4694      	mov	ip, r2
 8000c32:	458c      	cmp	ip, r1
 8000c34:	4686      	mov	lr, r0
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	d962      	bls.n	8000d02 <__udivmoddi4+0xde>
 8000c3c:	b14a      	cbz	r2, 8000c52 <__udivmoddi4+0x2e>
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	4091      	lsls	r1, r2
 8000c44:	fa20 f303 	lsr.w	r3, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c56:	fa1f f68c 	uxth.w	r6, ip
 8000c5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c62:	fb07 1114 	mls	r1, r7, r4, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb04 f106 	mul.w	r1, r4, r6
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x64>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7a:	f080 8112 	bcs.w	8000ea2 <__udivmoddi4+0x27e>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 810f 	bls.w	8000ea2 <__udivmoddi4+0x27e>
 8000c84:	3c02      	subs	r4, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a59      	subs	r1, r3, r1
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c92:	fb07 1110 	mls	r1, r7, r0, r1
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f606 	mul.w	r6, r0, r6
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x94>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000caa:	f080 80fc 	bcs.w	8000ea6 <__udivmoddi4+0x282>
 8000cae:	429e      	cmp	r6, r3
 8000cb0:	f240 80f9 	bls.w	8000ea6 <__udivmoddi4+0x282>
 8000cb4:	4463      	add	r3, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa6>
 8000cc2:	40d3      	lsrs	r3, r2
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xba>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb4>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa6>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x150>
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xcc>
 8000cea:	4290      	cmp	r0, r2
 8000cec:	f0c0 80f0 	bcc.w	8000ed0 <__udivmoddi4+0x2ac>
 8000cf0:	1a86      	subs	r6, r0, r2
 8000cf2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	2d00      	cmp	r5, #0
 8000cfa:	d0e6      	beq.n	8000cca <__udivmoddi4+0xa6>
 8000cfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000d00:	e7e3      	b.n	8000cca <__udivmoddi4+0xa6>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x204>
 8000d08:	eba1 040c 	sub.w	r4, r1, ip
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa1f f78c 	uxth.w	r7, ip
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb07 f006 	mul.w	r0, r7, r6
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x11c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x11a>
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	f200 80cd 	bhi.w	8000ed8 <__udivmoddi4+0x2b4>
 8000d3e:	4626      	mov	r6, r4
 8000d40:	1a1c      	subs	r4, r3, r0
 8000d42:	fa1f f38e 	uxth.w	r3, lr
 8000d46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb00 f707 	mul.w	r7, r0, r7
 8000d56:	429f      	cmp	r7, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x148>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x146>
 8000d64:	429f      	cmp	r7, r3
 8000d66:	f200 80b0 	bhi.w	8000eca <__udivmoddi4+0x2a6>
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	1bdb      	subs	r3, r3, r7
 8000d6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x9c>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d84:	fa04 f301 	lsl.w	r3, r4, r1
 8000d88:	ea43 030c 	orr.w	r3, r3, ip
 8000d8c:	40f4      	lsrs	r4, r6
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	0c38      	lsrs	r0, r7, #16
 8000d94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d98:	fbb4 fef0 	udiv	lr, r4, r0
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	fb00 441e 	mls	r4, r0, lr, r4
 8000da4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da8:	fb0e f90c 	mul.w	r9, lr, ip
 8000dac:	45a1      	cmp	r9, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x1a6>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dba:	f080 8084 	bcs.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	f240 8081 	bls.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	eba4 0409 	sub.w	r4, r4, r9
 8000dce:	fa1f f983 	uxth.w	r9, r3
 8000dd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1d2>
 8000de6:	193c      	adds	r4, r7, r4
 8000de8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dec:	d267      	bcs.n	8000ebe <__udivmoddi4+0x29a>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d965      	bls.n	8000ebe <__udivmoddi4+0x29a>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfe:	eba4 040c 	sub.w	r4, r4, ip
 8000e02:	429c      	cmp	r4, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	469c      	mov	ip, r3
 8000e08:	d351      	bcc.n	8000eae <__udivmoddi4+0x28a>
 8000e0a:	d04e      	beq.n	8000eaa <__udivmoddi4+0x286>
 8000e0c:	b155      	cbz	r5, 8000e24 <__udivmoddi4+0x200>
 8000e0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e12:	eb64 040c 	sbc.w	r4, r4, ip
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	40cb      	lsrs	r3, r1
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	40cc      	lsrs	r4, r1
 8000e20:	e9c5 6400 	strd	r6, r4, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	e750      	b.n	8000cca <__udivmoddi4+0xa6>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa24 f303 	lsr.w	r3, r4, r3
 8000e38:	4094      	lsls	r4, r2
 8000e3a:	430c      	orrs	r4, r1
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e50:	0c23      	lsrs	r3, r4, #16
 8000e52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e56:	fb00 f107 	mul.w	r1, r0, r7
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x24c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e66:	d22c      	bcs.n	8000ec2 <__udivmoddi4+0x29e>
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d92a      	bls.n	8000ec2 <__udivmoddi4+0x29e>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e80:	fb01 f307 	mul.w	r3, r1, r7
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x276>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e90:	d213      	bcs.n	8000eba <__udivmoddi4+0x296>
 8000e92:	42a3      	cmp	r3, r4
 8000e94:	d911      	bls.n	8000eba <__udivmoddi4+0x296>
 8000e96:	3902      	subs	r1, #2
 8000e98:	4464      	add	r4, ip
 8000e9a:	1ae4      	subs	r4, r4, r3
 8000e9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea0:	e739      	b.n	8000d16 <__udivmoddi4+0xf2>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	e6f0      	b.n	8000c88 <__udivmoddi4+0x64>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e706      	b.n	8000cb8 <__udivmoddi4+0x94>
 8000eaa:	45c8      	cmp	r8, r9
 8000eac:	d2ae      	bcs.n	8000e0c <__udivmoddi4+0x1e8>
 8000eae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb6:	3801      	subs	r0, #1
 8000eb8:	e7a8      	b.n	8000e0c <__udivmoddi4+0x1e8>
 8000eba:	4631      	mov	r1, r6
 8000ebc:	e7ed      	b.n	8000e9a <__udivmoddi4+0x276>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e799      	b.n	8000df6 <__udivmoddi4+0x1d2>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e7d4      	b.n	8000e70 <__udivmoddi4+0x24c>
 8000ec6:	46d6      	mov	lr, sl
 8000ec8:	e77f      	b.n	8000dca <__udivmoddi4+0x1a6>
 8000eca:	4463      	add	r3, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e74d      	b.n	8000d6c <__udivmoddi4+0x148>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e70f      	b.n	8000cf8 <__udivmoddi4+0xd4>
 8000ed8:	3e02      	subs	r6, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	e730      	b.n	8000d40 <__udivmoddi4+0x11c>
 8000ede:	bf00      	nop

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <Vacuum_Status>:
//       registerFrame[0x00].U16 = 22881;
//    }
//}


void Vacuum_Status(){
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
    //Vacuum On
    if (registerFrame[0x02].U16 == 1){ // ใช้ == แทน =
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <Vacuum_Status+0x38>)
 8000eea:	889b      	ldrh	r3, [r3, #4]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d108      	bne.n	8000f02 <Vacuum_Status+0x1e>
        strcpy(Vacuum, "On");
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <Vacuum_Status+0x3c>)
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8000f24 <Vacuum_Status+0x40>)
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	8019      	strh	r1, [r3, #0]
 8000efa:	3302      	adds	r3, #2
 8000efc:	0c12      	lsrs	r2, r2, #16
 8000efe:	701a      	strb	r2, [r3, #0]
    }
    //Vacuum Off
    else if (registerFrame[0x02].U16 == 0){ // ใช้ == แทน =
        strcpy(Vacuum, "Off");
    }
}
 8000f00:	e006      	b.n	8000f10 <Vacuum_Status+0x2c>
    else if (registerFrame[0x02].U16 == 0){ // ใช้ == แทน =
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <Vacuum_Status+0x38>)
 8000f04:	889b      	ldrh	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d102      	bne.n	8000f10 <Vacuum_Status+0x2c>
        strcpy(Vacuum, "Off");
 8000f0a:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <Vacuum_Status+0x3c>)
 8000f0c:	4a06      	ldr	r2, [pc, #24]	@ (8000f28 <Vacuum_Status+0x44>)
 8000f0e:	601a      	str	r2, [r3, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000e0c 	.word	0x20000e0c
 8000f20:	20000000 	.word	0x20000000
 8000f24:	0800b4a0 	.word	0x0800b4a0
 8000f28:	0066664f 	.word	0x0066664f

08000f2c <Gripper_Movement_Status>:

void Gripper_Movement_Status(){
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
    //Movement Forward
    if (registerFrame[0x03].U16 == 1){ // ใช้ == แทน =
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <Gripper_Movement_Status+0x38>)
 8000f32:	88db      	ldrh	r3, [r3, #6]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d106      	bne.n	8000f46 <Gripper_Movement_Status+0x1a>
        strcpy(Gripper, "Forward");
 8000f38:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <Gripper_Movement_Status+0x3c>)
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f6c <Gripper_Movement_Status+0x40>)
 8000f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f40:	e883 0003 	stmia.w	r3, {r0, r1}
    }
    //Movement Backward
    else if (registerFrame[0x03].U16 == 0){ // ใช้ == แทน =
        strcpy(Gripper, "Backward");
    }
}
 8000f44:	e008      	b.n	8000f58 <Gripper_Movement_Status+0x2c>
    else if (registerFrame[0x03].U16 == 0){ // ใช้ == แทน =
 8000f46:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <Gripper_Movement_Status+0x38>)
 8000f48:	88db      	ldrh	r3, [r3, #6]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d104      	bne.n	8000f58 <Gripper_Movement_Status+0x2c>
        strcpy(Gripper, "Backward");
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <Gripper_Movement_Status+0x3c>)
 8000f50:	4a07      	ldr	r2, [pc, #28]	@ (8000f70 <Gripper_Movement_Status+0x44>)
 8000f52:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f54:	c303      	stmia	r3!, {r0, r1}
 8000f56:	701a      	strb	r2, [r3, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000e0c 	.word	0x20000e0c
 8000f68:	2000000c 	.word	0x2000000c
 8000f6c:	0800b4a4 	.word	0x0800b4a4
 8000f70:	0800b4ac 	.word	0x0800b4ac

08000f74 <Set_Shelves>:

void Set_Shelves(){
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
    //Set
    if (registerFrame[0x01].U16 == 1){ // ใช้ == แทน =
 8000f78:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <Set_Shelves+0x64>)
 8000f7a:	885b      	ldrh	r3, [r3, #2]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d112      	bne.n	8000fa6 <Set_Shelves+0x32>
    	state = 1;
 8000f80:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <Set_Shelves+0x68>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	801a      	strh	r2, [r3, #0]
        strcpy(Shelves, "SET");
 8000f86:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <Set_Shelves+0x6c>)
 8000f88:	4a16      	ldr	r2, [pc, #88]	@ (8000fe4 <Set_Shelves+0x70>)
 8000f8a:	601a      	str	r2, [r3, #0]
        registerFrame[0x01].U16 = 0;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <Set_Shelves+0x64>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	805a      	strh	r2, [r3, #2]
        registerFrame[0x10].U16 = 1;
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <Set_Shelves+0x64>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	841a      	strh	r2, [r3, #32]

        if(Jogging == 1){
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <Set_Shelves+0x74>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d102      	bne.n	8000fa6 <Set_Shelves+0x32>
            registerFrame[0x10].U16 = 0;
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <Set_Shelves+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	841a      	strh	r2, [r3, #32]
        }
    }

    registerFrame[0x23].U16 = 8;  //1st Shelve Position
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <Set_Shelves+0x64>)
 8000fa8:	2208      	movs	r2, #8
 8000faa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    registerFrame[0x24].U16 = 8;  //2nd Shelve Position
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <Set_Shelves+0x64>)
 8000fb0:	2208      	movs	r2, #8
 8000fb2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    registerFrame[0x25].U16 = 8;  //3rd Shelve Position
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <Set_Shelves+0x64>)
 8000fb8:	2208      	movs	r2, #8
 8000fba:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    registerFrame[0x26].U16 = 8;  //4th Shelve Position
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <Set_Shelves+0x64>)
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    registerFrame[0x27].U16 = 8;  //5th Shelve Position
 8000fc6:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <Set_Shelves+0x64>)
 8000fc8:	2208      	movs	r2, #8
 8000fca:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	20000e0c 	.word	0x20000e0c
 8000fdc:	200002ba 	.word	0x200002ba
 8000fe0:	20000020 	.word	0x20000020
 8000fe4:	00544553 	.word	0x00544553
 8000fe8:	200002b2 	.word	0x200002b2

08000fec <Set_Goal_Point>:


void Set_Goal_Point(){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	if (registerFrame[0x30].U16 != 0){
 8000ff0:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <Set_Goal_Point+0x18>)
 8000ff2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <Set_Goal_Point+0x12>
		Run_Point_Mode();
 8000ffa:	f000 f805 	bl	8001008 <Run_Point_Mode>
	 }
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000e0c 	.word	0x20000e0c

08001008 <Run_Point_Mode>:

void Run_Point_Mode(){
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

	if (registerFrame[0x01].U16 = 8){
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <Run_Point_Mode+0x20>)
 800100e:	2208      	movs	r2, #8
 8001010:	805a      	strh	r2, [r3, #2]
		registerFrame[0x01].U16 = 0;
 8001012:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <Run_Point_Mode+0x20>)
 8001014:	2200      	movs	r2, #0
 8001016:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 1 ;
 8001018:	4b03      	ldr	r3, [pc, #12]	@ (8001028 <Run_Point_Mode+0x20>)
 800101a:	2201      	movs	r2, #1
 800101c:	841a      	strh	r2, [r3, #32]
	}
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	20000e0c 	.word	0x20000e0c

0800102c <Set_Home>:

void Set_Home(){
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
	state = 2;
 8001030:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <Set_Home+0x40>)
 8001032:	2202      	movs	r2, #2
 8001034:	801a      	strh	r2, [r3, #0]
	registerFrame[0x01].U16 = 2;
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <Set_Home+0x44>)
 8001038:	2202      	movs	r2, #2
 800103a:	805a      	strh	r2, [r3, #2]
	registerFrame[0x01].U16 = 0;
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <Set_Home+0x44>)
 800103e:	2200      	movs	r2, #0
 8001040:	805a      	strh	r2, [r3, #2]
	registerFrame[0x01].U16 = 2;
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <Set_Home+0x44>)
 8001044:	2202      	movs	r2, #2
 8001046:	805a      	strh	r2, [r3, #2]
	strcpy(Home, "Homing...");
 8001048:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <Set_Home+0x48>)
 800104a:	4a0b      	ldr	r2, [pc, #44]	@ (8001078 <Set_Home+0x4c>)
 800104c:	ca07      	ldmia	r2, {r0, r1, r2}
 800104e:	c303      	stmia	r3!, {r0, r1}
 8001050:	801a      	strh	r2, [r3, #0]
	if (Jogginghome == 1){
 8001052:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <Set_Home+0x50>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d102      	bne.n	8001060 <Set_Home+0x34>
		registerFrame[0x01].U16 = 0;
 800105a:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <Set_Home+0x44>)
 800105c:	2200      	movs	r2, #0
 800105e:	805a      	strh	r2, [r3, #2]
	}


}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200002ba 	.word	0x200002ba
 8001070:	20000e0c 	.word	0x20000e0c
 8001074:	20000054 	.word	0x20000054
 8001078:	0800b4b8 	.word	0x0800b4b8
 800107c:	200002b4 	.word	0x200002b4

08001080 <SetPick_PlaceOrder>:
void SetPick_PlaceOrder() {
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
    if (registerFrame[0x21].U16 != 00000 && registerFrame[0x22].U16 != 00000 ) {
 8001084:	4bab      	ldr	r3, [pc, #684]	@ (8001334 <SetPick_PlaceOrder+0x2b4>)
 8001086:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 8176 	beq.w	800137c <SetPick_PlaceOrder+0x2fc>
 8001090:	4ba8      	ldr	r3, [pc, #672]	@ (8001334 <SetPick_PlaceOrder+0x2b4>)
 8001092:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8170 	beq.w	800137c <SetPick_PlaceOrder+0x2fc>
    	strcpy(Order, "Pick");
 800109c:	4ba6      	ldr	r3, [pc, #664]	@ (8001338 <SetPick_PlaceOrder+0x2b8>)
 800109e:	4aa7      	ldr	r2, [pc, #668]	@ (800133c <SetPick_PlaceOrder+0x2bc>)
 80010a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010a4:	6018      	str	r0, [r3, #0]
 80010a6:	3304      	adds	r3, #4
 80010a8:	7019      	strb	r1, [r3, #0]
    	Pick[0] = registerFrame[0x21].U16/10000;
 80010aa:	4ba2      	ldr	r3, [pc, #648]	@ (8001334 <SetPick_PlaceOrder+0x2b4>)
 80010ac:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80010b0:	4aa3      	ldr	r2, [pc, #652]	@ (8001340 <SetPick_PlaceOrder+0x2c0>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	0b5b      	lsrs	r3, r3, #13
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4ba2      	ldr	r3, [pc, #648]	@ (8001344 <SetPick_PlaceOrder+0x2c4>)
 80010bc:	801a      	strh	r2, [r3, #0]
    	countPick += Pick[0]*10000;
 80010be:	4ba1      	ldr	r3, [pc, #644]	@ (8001344 <SetPick_PlaceOrder+0x2c4>)
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	0152      	lsls	r2, r2, #5
 80010c6:	1ad2      	subs	r2, r2, r3
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	461a      	mov	r2, r3
 80010ce:	0091      	lsls	r1, r2, #2
 80010d0:	461a      	mov	r2, r3
 80010d2:	460b      	mov	r3, r1
 80010d4:	4413      	add	r3, r2
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b9b      	ldr	r3, [pc, #620]	@ (8001348 <SetPick_PlaceOrder+0x2c8>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	4b99      	ldr	r3, [pc, #612]	@ (8001348 <SetPick_PlaceOrder+0x2c8>)
 80010e4:	801a      	strh	r2, [r3, #0]
    	strcpy(Order, "Place");
 80010e6:	4b94      	ldr	r3, [pc, #592]	@ (8001338 <SetPick_PlaceOrder+0x2b8>)
 80010e8:	4a98      	ldr	r2, [pc, #608]	@ (800134c <SetPick_PlaceOrder+0x2cc>)
 80010ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ee:	6018      	str	r0, [r3, #0]
 80010f0:	3304      	adds	r3, #4
 80010f2:	8019      	strh	r1, [r3, #0]
    	Place[0] = registerFrame[0x22].U16/10000;
 80010f4:	4b8f      	ldr	r3, [pc, #572]	@ (8001334 <SetPick_PlaceOrder+0x2b4>)
 80010f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010fa:	4a91      	ldr	r2, [pc, #580]	@ (8001340 <SetPick_PlaceOrder+0x2c0>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	0b5b      	lsrs	r3, r3, #13
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b92      	ldr	r3, [pc, #584]	@ (8001350 <SetPick_PlaceOrder+0x2d0>)
 8001106:	801a      	strh	r2, [r3, #0]
    	countPlace +=Place[0]*10000;
 8001108:	4b91      	ldr	r3, [pc, #580]	@ (8001350 <SetPick_PlaceOrder+0x2d0>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	0152      	lsls	r2, r2, #5
 8001110:	1ad2      	subs	r2, r2, r3
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4413      	add	r3, r2
 8001116:	461a      	mov	r2, r3
 8001118:	0091      	lsls	r1, r2, #2
 800111a:	461a      	mov	r2, r3
 800111c:	460b      	mov	r3, r1
 800111e:	4413      	add	r3, r2
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b8b      	ldr	r3, [pc, #556]	@ (8001354 <SetPick_PlaceOrder+0x2d4>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	4413      	add	r3, r2
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b89      	ldr	r3, [pc, #548]	@ (8001354 <SetPick_PlaceOrder+0x2d4>)
 800112e:	801a      	strh	r2, [r3, #0]


    	strcpy(Order, "Pick");
 8001130:	4b81      	ldr	r3, [pc, #516]	@ (8001338 <SetPick_PlaceOrder+0x2b8>)
 8001132:	4a82      	ldr	r2, [pc, #520]	@ (800133c <SetPick_PlaceOrder+0x2bc>)
 8001134:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001138:	6018      	str	r0, [r3, #0]
 800113a:	3304      	adds	r3, #4
 800113c:	7019      	strb	r1, [r3, #0]
    	Pick[1] = (registerFrame[0x21].U16- countPick)/1000;
 800113e:	4b7d      	ldr	r3, [pc, #500]	@ (8001334 <SetPick_PlaceOrder+0x2b4>)
 8001140:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001144:	461a      	mov	r2, r3
 8001146:	4b80      	ldr	r3, [pc, #512]	@ (8001348 <SetPick_PlaceOrder+0x2c8>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	4a82      	ldr	r2, [pc, #520]	@ (8001358 <SetPick_PlaceOrder+0x2d8>)
 800114e:	fb82 1203 	smull	r1, r2, r2, r3
 8001152:	1192      	asrs	r2, r2, #6
 8001154:	17db      	asrs	r3, r3, #31
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b7a      	ldr	r3, [pc, #488]	@ (8001344 <SetPick_PlaceOrder+0x2c4>)
 800115c:	805a      	strh	r2, [r3, #2]
    	countPick += Pick[1]*1000;
 800115e:	4b79      	ldr	r3, [pc, #484]	@ (8001344 <SetPick_PlaceOrder+0x2c4>)
 8001160:	885b      	ldrh	r3, [r3, #2]
 8001162:	461a      	mov	r2, r3
 8001164:	0152      	lsls	r2, r2, #5
 8001166:	1ad2      	subs	r2, r2, r3
 8001168:	0092      	lsls	r2, r2, #2
 800116a:	4413      	add	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b75      	ldr	r3, [pc, #468]	@ (8001348 <SetPick_PlaceOrder+0x2c8>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	4413      	add	r3, r2
 8001176:	b29a      	uxth	r2, r3
 8001178:	4b73      	ldr	r3, [pc, #460]	@ (8001348 <SetPick_PlaceOrder+0x2c8>)
 800117a:	801a      	strh	r2, [r3, #0]
    	strcpy(Order, "Place");
 800117c:	4b6e      	ldr	r3, [pc, #440]	@ (8001338 <SetPick_PlaceOrder+0x2b8>)
 800117e:	4a73      	ldr	r2, [pc, #460]	@ (800134c <SetPick_PlaceOrder+0x2cc>)
 8001180:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001184:	6018      	str	r0, [r3, #0]
 8001186:	3304      	adds	r3, #4
 8001188:	8019      	strh	r1, [r3, #0]
    	Place[1] = (registerFrame[0x22].U16- countPlace)/1000;
 800118a:	4b6a      	ldr	r3, [pc, #424]	@ (8001334 <SetPick_PlaceOrder+0x2b4>)
 800118c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001190:	461a      	mov	r2, r3
 8001192:	4b70      	ldr	r3, [pc, #448]	@ (8001354 <SetPick_PlaceOrder+0x2d4>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	4a6f      	ldr	r2, [pc, #444]	@ (8001358 <SetPick_PlaceOrder+0x2d8>)
 800119a:	fb82 1203 	smull	r1, r2, r2, r3
 800119e:	1192      	asrs	r2, r2, #6
 80011a0:	17db      	asrs	r3, r3, #31
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001350 <SetPick_PlaceOrder+0x2d0>)
 80011a8:	805a      	strh	r2, [r3, #2]
    	countPlace +=Place[1]*1000;
 80011aa:	4b69      	ldr	r3, [pc, #420]	@ (8001350 <SetPick_PlaceOrder+0x2d0>)
 80011ac:	885b      	ldrh	r3, [r3, #2]
 80011ae:	461a      	mov	r2, r3
 80011b0:	0152      	lsls	r2, r2, #5
 80011b2:	1ad2      	subs	r2, r2, r3
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b65      	ldr	r3, [pc, #404]	@ (8001354 <SetPick_PlaceOrder+0x2d4>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b63      	ldr	r3, [pc, #396]	@ (8001354 <SetPick_PlaceOrder+0x2d4>)
 80011c6:	801a      	strh	r2, [r3, #0]


    	strcpy(Order, "Pick");
 80011c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001338 <SetPick_PlaceOrder+0x2b8>)
 80011ca:	4a5c      	ldr	r2, [pc, #368]	@ (800133c <SetPick_PlaceOrder+0x2bc>)
 80011cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d0:	6018      	str	r0, [r3, #0]
 80011d2:	3304      	adds	r3, #4
 80011d4:	7019      	strb	r1, [r3, #0]
		Pick[2] = (registerFrame[0x21].U16 - countPick) / 100;
 80011d6:	4b57      	ldr	r3, [pc, #348]	@ (8001334 <SetPick_PlaceOrder+0x2b4>)
 80011d8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80011dc:	461a      	mov	r2, r3
 80011de:	4b5a      	ldr	r3, [pc, #360]	@ (8001348 <SetPick_PlaceOrder+0x2c8>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	4a5d      	ldr	r2, [pc, #372]	@ (800135c <SetPick_PlaceOrder+0x2dc>)
 80011e6:	fb82 1203 	smull	r1, r2, r2, r3
 80011ea:	1152      	asrs	r2, r2, #5
 80011ec:	17db      	asrs	r3, r3, #31
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	4b54      	ldr	r3, [pc, #336]	@ (8001344 <SetPick_PlaceOrder+0x2c4>)
 80011f4:	809a      	strh	r2, [r3, #4]
		countPick += Pick[2] * 100;
 80011f6:	4b53      	ldr	r3, [pc, #332]	@ (8001344 <SetPick_PlaceOrder+0x2c4>)
 80011f8:	889b      	ldrh	r3, [r3, #4]
 80011fa:	461a      	mov	r2, r3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	4413      	add	r3, r2
 8001200:	461a      	mov	r2, r3
 8001202:	0091      	lsls	r1, r2, #2
 8001204:	461a      	mov	r2, r3
 8001206:	460b      	mov	r3, r1
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b4e      	ldr	r3, [pc, #312]	@ (8001348 <SetPick_PlaceOrder+0x2c8>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	b29a      	uxth	r2, r3
 8001216:	4b4c      	ldr	r3, [pc, #304]	@ (8001348 <SetPick_PlaceOrder+0x2c8>)
 8001218:	801a      	strh	r2, [r3, #0]
		strcpy(Order, "Place");
 800121a:	4b47      	ldr	r3, [pc, #284]	@ (8001338 <SetPick_PlaceOrder+0x2b8>)
 800121c:	4a4b      	ldr	r2, [pc, #300]	@ (800134c <SetPick_PlaceOrder+0x2cc>)
 800121e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001222:	6018      	str	r0, [r3, #0]
 8001224:	3304      	adds	r3, #4
 8001226:	8019      	strh	r1, [r3, #0]
		Place[2] = (registerFrame[0x22].U16 - countPlace) / 100;
 8001228:	4b42      	ldr	r3, [pc, #264]	@ (8001334 <SetPick_PlaceOrder+0x2b4>)
 800122a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800122e:	461a      	mov	r2, r3
 8001230:	4b48      	ldr	r3, [pc, #288]	@ (8001354 <SetPick_PlaceOrder+0x2d4>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	4a49      	ldr	r2, [pc, #292]	@ (800135c <SetPick_PlaceOrder+0x2dc>)
 8001238:	fb82 1203 	smull	r1, r2, r2, r3
 800123c:	1152      	asrs	r2, r2, #5
 800123e:	17db      	asrs	r3, r3, #31
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	b29a      	uxth	r2, r3
 8001244:	4b42      	ldr	r3, [pc, #264]	@ (8001350 <SetPick_PlaceOrder+0x2d0>)
 8001246:	809a      	strh	r2, [r3, #4]
		countPlace += Place[2] * 100;
 8001248:	4b41      	ldr	r3, [pc, #260]	@ (8001350 <SetPick_PlaceOrder+0x2d0>)
 800124a:	889b      	ldrh	r3, [r3, #4]
 800124c:	461a      	mov	r2, r3
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	4413      	add	r3, r2
 8001252:	461a      	mov	r2, r3
 8001254:	0091      	lsls	r1, r2, #2
 8001256:	461a      	mov	r2, r3
 8001258:	460b      	mov	r3, r1
 800125a:	4413      	add	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b3c      	ldr	r3, [pc, #240]	@ (8001354 <SetPick_PlaceOrder+0x2d4>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	4413      	add	r3, r2
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b3a      	ldr	r3, [pc, #232]	@ (8001354 <SetPick_PlaceOrder+0x2d4>)
 800126a:	801a      	strh	r2, [r3, #0]


		strcpy(Order, "Pick");
 800126c:	4b32      	ldr	r3, [pc, #200]	@ (8001338 <SetPick_PlaceOrder+0x2b8>)
 800126e:	4a33      	ldr	r2, [pc, #204]	@ (800133c <SetPick_PlaceOrder+0x2bc>)
 8001270:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001274:	6018      	str	r0, [r3, #0]
 8001276:	3304      	adds	r3, #4
 8001278:	7019      	strb	r1, [r3, #0]
		Pick[3] = (registerFrame[0x21].U16 - countPick) / 10;
 800127a:	4b2e      	ldr	r3, [pc, #184]	@ (8001334 <SetPick_PlaceOrder+0x2b4>)
 800127c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001280:	461a      	mov	r2, r3
 8001282:	4b31      	ldr	r3, [pc, #196]	@ (8001348 <SetPick_PlaceOrder+0x2c8>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	4a35      	ldr	r2, [pc, #212]	@ (8001360 <SetPick_PlaceOrder+0x2e0>)
 800128a:	fb82 1203 	smull	r1, r2, r2, r3
 800128e:	1092      	asrs	r2, r2, #2
 8001290:	17db      	asrs	r3, r3, #31
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <SetPick_PlaceOrder+0x2c4>)
 8001298:	80da      	strh	r2, [r3, #6]
		countPick += Pick[3] * 10;
 800129a:	4b2a      	ldr	r3, [pc, #168]	@ (8001344 <SetPick_PlaceOrder+0x2c4>)
 800129c:	88db      	ldrh	r3, [r3, #6]
 800129e:	461a      	mov	r2, r3
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b27      	ldr	r3, [pc, #156]	@ (8001348 <SetPick_PlaceOrder+0x2c8>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <SetPick_PlaceOrder+0x2c8>)
 80012b2:	801a      	strh	r2, [r3, #0]
		strcpy(Order, "Place");
 80012b4:	4b20      	ldr	r3, [pc, #128]	@ (8001338 <SetPick_PlaceOrder+0x2b8>)
 80012b6:	4a25      	ldr	r2, [pc, #148]	@ (800134c <SetPick_PlaceOrder+0x2cc>)
 80012b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012bc:	6018      	str	r0, [r3, #0]
 80012be:	3304      	adds	r3, #4
 80012c0:	8019      	strh	r1, [r3, #0]
		Place[3] = (registerFrame[0x22].U16 - countPlace) / 10;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <SetPick_PlaceOrder+0x2b4>)
 80012c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <SetPick_PlaceOrder+0x2d4>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	4a23      	ldr	r2, [pc, #140]	@ (8001360 <SetPick_PlaceOrder+0x2e0>)
 80012d2:	fb82 1203 	smull	r1, r2, r2, r3
 80012d6:	1092      	asrs	r2, r2, #2
 80012d8:	17db      	asrs	r3, r3, #31
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <SetPick_PlaceOrder+0x2d0>)
 80012e0:	80da      	strh	r2, [r3, #6]
		countPlace += Place[3] * 10;
 80012e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <SetPick_PlaceOrder+0x2d0>)
 80012e4:	88db      	ldrh	r3, [r3, #6]
 80012e6:	461a      	mov	r2, r3
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <SetPick_PlaceOrder+0x2d4>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	4413      	add	r3, r2
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <SetPick_PlaceOrder+0x2d4>)
 80012fa:	801a      	strh	r2, [r3, #0]


		strcpy(Order, "Pick");
 80012fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <SetPick_PlaceOrder+0x2b8>)
 80012fe:	4a0f      	ldr	r2, [pc, #60]	@ (800133c <SetPick_PlaceOrder+0x2bc>)
 8001300:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001304:	6018      	str	r0, [r3, #0]
 8001306:	3304      	adds	r3, #4
 8001308:	7019      	strb	r1, [r3, #0]
		Pick[4] = (registerFrame[0x21].U16 - countPick);
 800130a:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <SetPick_PlaceOrder+0x2b4>)
 800130c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001310:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <SetPick_PlaceOrder+0x2c8>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	b29a      	uxth	r2, r3
 8001318:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <SetPick_PlaceOrder+0x2c4>)
 800131a:	811a      	strh	r2, [r3, #8]
		countPick = 0;
 800131c:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <SetPick_PlaceOrder+0x2c8>)
 800131e:	2200      	movs	r2, #0
 8001320:	801a      	strh	r2, [r3, #0]
		strcpy(Order, "Place");
 8001322:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <SetPick_PlaceOrder+0x2b8>)
 8001324:	4a09      	ldr	r2, [pc, #36]	@ (800134c <SetPick_PlaceOrder+0x2cc>)
 8001326:	e892 0003 	ldmia.w	r2, {r0, r1}
 800132a:	6018      	str	r0, [r3, #0]
 800132c:	3304      	adds	r3, #4
 800132e:	8019      	strh	r1, [r3, #0]
 8001330:	e018      	b.n	8001364 <SetPick_PlaceOrder+0x2e4>
 8001332:	bf00      	nop
 8001334:	20000e0c 	.word	0x20000e0c
 8001338:	20000034 	.word	0x20000034
 800133c:	0800b4c4 	.word	0x0800b4c4
 8001340:	d1b71759 	.word	0xd1b71759
 8001344:	2000029c 	.word	0x2000029c
 8001348:	200002b6 	.word	0x200002b6
 800134c:	0800b4cc 	.word	0x0800b4cc
 8001350:	200002a8 	.word	0x200002a8
 8001354:	200002b8 	.word	0x200002b8
 8001358:	10624dd3 	.word	0x10624dd3
 800135c:	51eb851f 	.word	0x51eb851f
 8001360:	66666667 	.word	0x66666667
		Place[4] = (registerFrame[0x22].U16 - countPlace);
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <SetPick_PlaceOrder+0x308>)
 8001366:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800136a:	4b08      	ldr	r3, [pc, #32]	@ (800138c <SetPick_PlaceOrder+0x30c>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	b29a      	uxth	r2, r3
 8001372:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <SetPick_PlaceOrder+0x310>)
 8001374:	811a      	strh	r2, [r3, #8]
		countPlace = 0;
 8001376:	4b05      	ldr	r3, [pc, #20]	@ (800138c <SetPick_PlaceOrder+0x30c>)
 8001378:	2200      	movs	r2, #0
 800137a:	801a      	strh	r2, [r3, #0]

    }
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000e0c 	.word	0x20000e0c
 800138c:	200002b8 	.word	0x200002b8
 8001390:	200002a8 	.word	0x200002a8

08001394 <Run_Jog_Mode>:



void Run_Jog_Mode() {
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 = 4) {
 800139a:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <Run_Jog_Mode+0x7c>)
 800139c:	2204      	movs	r2, #4
 800139e:	805a      	strh	r2, [r3, #2]
		strcpy(Jogmode, "Run Jog Mode");
 80013a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001414 <Run_Jog_Mode+0x80>)
 80013a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <Run_Jog_Mode+0x84>)
 80013a4:	4614      	mov	r4, r2
 80013a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a8:	c407      	stmia	r4!, {r0, r1, r2}
 80013aa:	7023      	strb	r3, [r4, #0]
		registerFrame[0x01].U16 = 0;
 80013ac:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <Run_Jog_Mode+0x7c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	805a      	strh	r2, [r3, #2]
		for (int i = 0; i < 5; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	e021      	b.n	80013fc <Run_Jog_Mode+0x68>

			state = 4;
 80013b8:	4b18      	ldr	r3, [pc, #96]	@ (800141c <Run_Jog_Mode+0x88>)
 80013ba:	2204      	movs	r2, #4
 80013bc:	801a      	strh	r2, [r3, #0]
			strcpy(Jogmode, "Go to Pick...");
 80013be:	4a15      	ldr	r2, [pc, #84]	@ (8001414 <Run_Jog_Mode+0x80>)
 80013c0:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <Run_Jog_Mode+0x8c>)
 80013c2:	4614      	mov	r4, r2
 80013c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c6:	c407      	stmia	r4!, {r0, r1, r2}
 80013c8:	8023      	strh	r3, [r4, #0]
			registerFrame[0x10].U16 = 4;
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <Run_Jog_Mode+0x7c>)
 80013cc:	2204      	movs	r2, #4
 80013ce:	841a      	strh	r2, [r3, #32]
			SetPick_PlaceOrder(); //แก้ให้เข้ากับซัน
 80013d0:	f7ff fe56 	bl	8001080 <SetPick_PlaceOrder>

			state = 8;
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <Run_Jog_Mode+0x88>)
 80013d6:	2208      	movs	r2, #8
 80013d8:	801a      	strh	r2, [r3, #0]
			strcpy(Jogmode, "Go to Place...");
 80013da:	4a0e      	ldr	r2, [pc, #56]	@ (8001414 <Run_Jog_Mode+0x80>)
 80013dc:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <Run_Jog_Mode+0x90>)
 80013de:	4614      	mov	r4, r2
 80013e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013e2:	c407      	stmia	r4!, {r0, r1, r2}
 80013e4:	8023      	strh	r3, [r4, #0]
 80013e6:	3402      	adds	r4, #2
 80013e8:	0c1b      	lsrs	r3, r3, #16
 80013ea:	7023      	strb	r3, [r4, #0]
			registerFrame[0x10].U16 = 8;
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <Run_Jog_Mode+0x7c>)
 80013ee:	2208      	movs	r2, #8
 80013f0:	841a      	strh	r2, [r3, #32]
			SetPick_PlaceOrder(); //แก้ให้เข้ากับซัน
 80013f2:	f7ff fe45 	bl	8001080 <SetPick_PlaceOrder>
		for (int i = 0; i < 5; i++) {
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3301      	adds	r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b04      	cmp	r3, #4
 8001400:	ddda      	ble.n	80013b8 <Run_Jog_Mode+0x24>
		}
	}
	registerFrame[0x10].U16 = 0;
 8001402:	4b03      	ldr	r3, [pc, #12]	@ (8001410 <Run_Jog_Mode+0x7c>)
 8001404:	2200      	movs	r2, #0
 8001406:	841a      	strh	r2, [r3, #32]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bd90      	pop	{r4, r7, pc}
 8001410:	20000e0c 	.word	0x20000e0c
 8001414:	20000040 	.word	0x20000040
 8001418:	0800b4d4 	.word	0x0800b4d4
 800141c:	200002ba 	.word	0x200002ba
 8001420:	0800b4e4 	.word	0x0800b4e4
 8001424:	0800b4f4 	.word	0x0800b4f4

08001428 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800142c:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <modbus_1t5_Timeout+0x3c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001434:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <modbus_1t5_Timeout+0x3c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2200      	movs	r2, #0
 800143e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <modbus_1t5_Timeout+0x3c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <modbus_1t5_Timeout+0x3c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0201 	orr.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000794 	.word	0x20000794

08001468 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001470:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <modbus_3t5_Timeout+0x1c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2201      	movs	r2, #1
 8001476:	755a      	strb	r2, [r3, #21]

}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	20000794 	.word	0x20000794

08001488 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f008 fe97 	bl	800a1c4 <HAL_UART_GetError>
 8001496:	4603      	mov	r3, r0
 8001498:	2b20      	cmp	r3, #32
 800149a:	d101      	bne.n	80014a0 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 800149c:	f7ff ffc4 	bl	8001428 <modbus_1t5_Timeout>

	}
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80014b2:	4a25      	ldr	r2, [pc, #148]	@ (8001548 <Modbus_init+0xa0>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80014b8:	4b23      	ldr	r3, [pc, #140]	@ (8001548 <Modbus_init+0xa0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	4a21      	ldr	r2, [pc, #132]	@ (800154c <Modbus_init+0xa4>)
 80014c6:	210e      	movs	r1, #14
 80014c8:	4618      	mov	r0, r3
 80014ca:	f007 f8bf 	bl	800864c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2110      	movs	r1, #16
 80014d4:	4618      	mov	r0, r3
 80014d6:	f008 fe1f 	bl	800a118 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	4618      	mov	r0, r3
 80014e0:	f008 fe36 	bl	800a150 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a19      	ldr	r2, [pc, #100]	@ (8001550 <Modbus_init+0xa8>)
 80014ea:	2104      	movs	r1, #4
 80014ec:	4618      	mov	r0, r3
 80014ee:	f008 f8fd 	bl	80096ec <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <Modbus_init+0xa0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80014f8:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <Modbus_init+0xa0>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <Modbus_init+0xa0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001504:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001508:	4413      	add	r3, r2
 800150a:	3302      	adds	r3, #2
 800150c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001510:	4619      	mov	r1, r3
 8001512:	f008 fa25 	bl	8009960 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <Modbus_init+0xa0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d10c      	bne.n	8001540 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001526:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <Modbus_init+0xa0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	4618      	mov	r0, r3
 800152e:	f006 f85f 	bl	80075f0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001532:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <Modbus_init+0xa0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f006 fab8 	bl	8007ab0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000794 	.word	0x20000794
 800154c:	08001469 	.word	0x08001469
 8001550:	08001489 	.word	0x08001489

08001554 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001560:	23ff      	movs	r3, #255	@ 0xff
 8001562:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001564:	23ff      	movs	r3, #255	@ 0xff
 8001566:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001568:	e013      	b.n	8001592 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	7bbb      	ldrb	r3, [r7, #14]
 8001574:	4053      	eors	r3, r2
 8001576:	b2db      	uxtb	r3, r3
 8001578:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800157a:	4a0f      	ldr	r2, [pc, #60]	@ (80015b8 <CRC16+0x64>)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4413      	add	r3, r2
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	4053      	eors	r3, r2
 8001586:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001588:	4a0c      	ldr	r2, [pc, #48]	@ (80015bc <CRC16+0x68>)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	4413      	add	r3, r2
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001592:	883b      	ldrh	r3, [r7, #0]
 8001594:	1e5a      	subs	r2, r3, #1
 8001596:	803a      	strh	r2, [r7, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1e6      	bne.n	800156a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	7bbb      	ldrb	r3, [r7, #14]
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	b29b      	uxth	r3, r3
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	20000168 	.word	0x20000168
 80015bc:	20000068 	.word	0x20000068

080015c0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80015c6:	4b7e      	ldr	r3, [pc, #504]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	7ddb      	ldrb	r3, [r3, #23]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d80a      	bhi.n	80015e8 <Modbus_Protocal_Worker+0x28>
 80015d2:	a201      	add	r2, pc, #4	@ (adr r2, 80015d8 <Modbus_Protocal_Worker+0x18>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	080015f3 	.word	0x080015f3
 80015dc:	08001787 	.word	0x08001787
 80015e0:	0800167f 	.word	0x0800167f
 80015e4:	080016c3 	.word	0x080016c3
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80015e8:	4b75      	ldr	r3, [pc, #468]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2201      	movs	r2, #1
 80015ee:	75da      	strb	r2, [r3, #23]
		break;
 80015f0:	e0e1      	b.n	80017b6 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80015f2:	4b73      	ldr	r3, [pc, #460]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80015fe:	4b70      	ldr	r3, [pc, #448]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2202      	movs	r2, #2
 8001604:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001606:	f000 f9cd 	bl	80019a4 <Modbus_Emission>
 800160a:	e018      	b.n	800163e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 800160c:	4b6c      	ldr	r3, [pc, #432]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001616:	4b6a      	ldr	r3, [pc, #424]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001620:	b29b      	uxth	r3, r3
 8001622:	429a      	cmp	r2, r3
 8001624:	d00b      	beq.n	800163e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001626:	4b66      	ldr	r3, [pc, #408]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2200      	movs	r2, #0
 800162c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800162e:	4b64      	ldr	r3, [pc, #400]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001636:	4b62      	ldr	r3, [pc, #392]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2203      	movs	r2, #3
 800163c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800163e:	4b60      	ldr	r3, [pc, #384]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001648:	2b20      	cmp	r3, #32
 800164a:	f040 80ad 	bne.w	80017a8 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800164e:	4b5c      	ldr	r3, [pc, #368]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2200      	movs	r2, #0
 8001654:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001658:	4b59      	ldr	r3, [pc, #356]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800165e:	4b58      	ldr	r3, [pc, #352]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b57      	ldr	r3, [pc, #348]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800166a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800166e:	4413      	add	r3, r2
 8001670:	3302      	adds	r3, #2
 8001672:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001676:	4619      	mov	r1, r3
 8001678:	f008 f972 	bl	8009960 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 800167c:	e094      	b.n	80017a8 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800167e:	4b50      	ldr	r3, [pc, #320]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	7d1b      	ldrb	r3, [r3, #20]
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 8091 	beq.w	80017ac <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800168a:	4b4d      	ldr	r3, [pc, #308]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	22fe      	movs	r2, #254	@ 0xfe
 8001690:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001692:	4b4b      	ldr	r3, [pc, #300]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 800169c:	4b48      	ldr	r3, [pc, #288]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80016ac:	4b44      	ldr	r3, [pc, #272]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 80016ae:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80016b0:	1a8a      	subs	r2, r1, r2
 80016b2:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80016b4:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80016b8:	4b41      	ldr	r3, [pc, #260]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2204      	movs	r2, #4
 80016be:	75da      	strb	r2, [r3, #23]
		}
		break;
 80016c0:	e074      	b.n	80017ac <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80016c2:	4b3f      	ldr	r3, [pc, #252]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80016ca:	f113 0f02 	cmn.w	r3, #2
 80016ce:	d150      	bne.n	8001772 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80016d0:	4b3b      	ldr	r3, [pc, #236]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2200      	movs	r2, #0
 80016d6:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80016d8:	4b39      	ldr	r3, [pc, #228]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80016e0:	4b37      	ldr	r3, [pc, #220]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80016e8:	3b02      	subs	r3, #2
 80016ea:	4619      	mov	r1, r3
 80016ec:	4610      	mov	r0, r2
 80016ee:	f7ff ff31 	bl	8001554 <CRC16>
 80016f2:	4603      	mov	r3, r0
 80016f4:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80016f6:	793a      	ldrb	r2, [r7, #4]
 80016f8:	4b31      	ldr	r3, [pc, #196]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 80016fa:	6819      	ldr	r1, [r3, #0]
 80016fc:	4b30      	ldr	r3, [pc, #192]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001704:	3b02      	subs	r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 800170c:	429a      	cmp	r2, r3
 800170e:	d10c      	bne.n	800172a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001710:	797a      	ldrb	r2, [r7, #5]
 8001712:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001714:	6819      	ldr	r1, [r3, #0]
 8001716:	4b2a      	ldr	r3, [pc, #168]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800171e:	3b01      	subs	r3, #1
 8001720:	440b      	add	r3, r1
 8001722:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001726:	429a      	cmp	r2, r3
 8001728:	d004      	beq.n	8001734 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800172a:	4b25      	ldr	r3, [pc, #148]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	22ff      	movs	r2, #255	@ 0xff
 8001730:	759a      	strb	r2, [r3, #22]
				break;
 8001732:	e040      	b.n	80017b6 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001734:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800173c:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d113      	bne.n	800176e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001746:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800174e:	4b1c      	ldr	r3, [pc, #112]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001756:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001760:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001762:	461a      	mov	r2, r3
 8001764:	f009 fe82 	bl	800b46c <memcpy>

			//execute command
			Modbus_frame_response();
 8001768:	f000 f904 	bl	8001974 <Modbus_frame_response>
 800176c:	e001      	b.n	8001772 <Modbus_Protocal_Worker+0x1b2>
				break;
 800176e:	bf00      	nop
					}
		break;


	}
}
 8001770:	e021      	b.n	80017b6 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001772:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	7d5b      	ldrb	r3, [r3, #21]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d019      	beq.n	80017b0 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 800177c:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2201      	movs	r2, #1
 8001782:	75da      	strb	r2, [r3, #23]
		break;
 8001784:	e014      	b.n	80017b0 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001790:	2b20      	cmp	r3, #32
 8001792:	d10f      	bne.n	80017b4 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001794:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <Modbus_Protocal_Worker+0x200>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2201      	movs	r2, #1
 80017a4:	75da      	strb	r2, [r3, #23]
		break;
 80017a6:	e005      	b.n	80017b4 <Modbus_Protocal_Worker+0x1f4>
		break;
 80017a8:	bf00      	nop
 80017aa:	e004      	b.n	80017b6 <Modbus_Protocal_Worker+0x1f6>
		break;
 80017ac:	bf00      	nop
 80017ae:	e002      	b.n	80017b6 <Modbus_Protocal_Worker+0x1f6>
		break;
 80017b0:	bf00      	nop
 80017b2:	e000      	b.n	80017b6 <Modbus_Protocal_Worker+0x1f6>
		break;
 80017b4:	bf00      	nop
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000794 	.word	0x20000794

080017c4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80017ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <modbusWrite1Register+0x7c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	7e5b      	ldrb	r3, [r3, #25]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001840 <modbusWrite1Register+0x7c>)
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	7e92      	ldrb	r2, [r2, #26]
 80017da:	4413      	add	r3, r2
 80017dc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80017de:	88fa      	ldrh	r2, [r7, #6]
 80017e0:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <modbusWrite1Register+0x7c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d903      	bls.n	80017f2 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80017ea:	2002      	movs	r0, #2
 80017ec:	f000 f8a0 	bl	8001930 <ModbusErrorReply>
			 return;
 80017f0:	e023      	b.n	800183a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80017f2:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <modbusWrite1Register+0x7c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <modbusWrite1Register+0x7c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	440b      	add	r3, r1
 8001802:	7ed2      	ldrb	r2, [r2, #27]
 8001804:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001806:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <modbusWrite1Register+0x7c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <modbusWrite1Register+0x7c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	440b      	add	r3, r1
 8001816:	7f12      	ldrb	r2, [r2, #28]
 8001818:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <modbusWrite1Register+0x7c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8001822:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <modbusWrite1Register+0x7c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001828:	2208      	movs	r2, #8
 800182a:	4619      	mov	r1, r3
 800182c:	f009 fe1e 	bl	800b46c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001830:	4b03      	ldr	r3, [pc, #12]	@ (8001840 <modbusWrite1Register+0x7c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2205      	movs	r2, #5
 8001836:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000794 	.word	0x20000794

08001844 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800184a:	4b38      	ldr	r3, [pc, #224]	@ (800192c <modbusRead1Register+0xe8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	7edb      	ldrb	r3, [r3, #27]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	b29b      	uxth	r3, r3
 8001854:	4a35      	ldr	r2, [pc, #212]	@ (800192c <modbusRead1Register+0xe8>)
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	7f12      	ldrb	r2, [r2, #28]
 800185a:	4413      	add	r3, r2
 800185c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800185e:	4b33      	ldr	r3, [pc, #204]	@ (800192c <modbusRead1Register+0xe8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	7e5b      	ldrb	r3, [r3, #25]
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	b29b      	uxth	r3, r3
 8001868:	4a30      	ldr	r2, [pc, #192]	@ (800192c <modbusRead1Register+0xe8>)
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	7e92      	ldrb	r2, [r2, #26]
 800186e:	4413      	add	r3, r2
 8001870:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <modbusRead1Register+0x3a>
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	2b7d      	cmp	r3, #125	@ 0x7d
 800187c:	d903      	bls.n	8001886 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800187e:	2003      	movs	r0, #3
 8001880:	f000 f856 	bl	8001930 <ModbusErrorReply>
		 return;
 8001884:	e04e      	b.n	8001924 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001886:	88ba      	ldrh	r2, [r7, #4]
 8001888:	4b28      	ldr	r3, [pc, #160]	@ (800192c <modbusRead1Register+0xe8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	429a      	cmp	r2, r3
 8001890:	d808      	bhi.n	80018a4 <modbusRead1Register+0x60>
 8001892:	88ba      	ldrh	r2, [r7, #4]
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	4413      	add	r3, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <modbusRead1Register+0xe8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d903      	bls.n	80018ac <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80018a4:	2002      	movs	r0, #2
 80018a6:	f000 f843 	bl	8001930 <ModbusErrorReply>
		 return;
 80018aa:	e03b      	b.n	8001924 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80018ac:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <modbusRead1Register+0xe8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2203      	movs	r2, #3
 80018b2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <modbusRead1Register+0xe8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	0052      	lsls	r2, r2, #1
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80018c6:	2400      	movs	r4, #0
 80018c8:	e020      	b.n	800190c <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80018ca:	4b18      	ldr	r3, [pc, #96]	@ (800192c <modbusRead1Register+0xe8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	88bb      	ldrh	r3, [r7, #4]
 80018d2:	4423      	add	r3, r4
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	18d1      	adds	r1, r2, r3
 80018d8:	4b14      	ldr	r3, [pc, #80]	@ (800192c <modbusRead1Register+0xe8>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	1c63      	adds	r3, r4, #1
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	7849      	ldrb	r1, [r1, #1]
 80018e2:	4413      	add	r3, r2
 80018e4:	460a      	mov	r2, r1
 80018e6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <modbusRead1Register+0xe8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	88bb      	ldrh	r3, [r7, #4]
 80018f2:	4423      	add	r3, r4
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	18d1      	adds	r1, r2, r3
 80018f8:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <modbusRead1Register+0xe8>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	0063      	lsls	r3, r4, #1
 80018fe:	3303      	adds	r3, #3
 8001900:	7809      	ldrb	r1, [r1, #0]
 8001902:	4413      	add	r3, r2
 8001904:	460a      	mov	r2, r1
 8001906:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 800190a:	3401      	adds	r4, #1
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	429c      	cmp	r4, r3
 8001910:	dbdb      	blt.n	80018ca <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	3301      	adds	r3, #1
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b04      	ldr	r3, [pc, #16]	@ (800192c <modbusRead1Register+0xe8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0052      	lsls	r2, r2, #1
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	20000794 	.word	0x20000794

08001930 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800193a:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <ModbusErrorReply+0x40>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	7e1a      	ldrb	r2, [r3, #24]
 8001940:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <ModbusErrorReply+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800194e:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <ModbusErrorReply+0x40>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	79fa      	ldrb	r2, [r7, #7]
 8001954:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <ModbusErrorReply+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2202      	movs	r2, #2
 800195e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000794 	.word	0x20000794

08001974 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001978:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <Modbus_frame_response+0x2c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	7e1b      	ldrb	r3, [r3, #24]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d004      	beq.n	800198c <Modbus_frame_response+0x18>
 8001982:	2b06      	cmp	r3, #6
 8001984:	d105      	bne.n	8001992 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001986:	f7ff ff1d 	bl	80017c4 <modbusWrite1Register>
		break;
 800198a:	e006      	b.n	800199a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800198c:	f7ff ff5a 	bl	8001844 <modbusRead1Register>
		break;
 8001990:	e003      	b.n	800199a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001992:	2001      	movs	r0, #1
 8001994:	f7ff ffcc 	bl	8001930 <ModbusErrorReply>
		break;
 8001998:	bf00      	nop

	}
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000794 	.word	0x20000794

080019a4 <Modbus_Emission>:

void Modbus_Emission()
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80019aa:	4b38      	ldr	r3, [pc, #224]	@ (8001a8c <Modbus_Emission+0xe8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019b4:	2b20      	cmp	r3, #32
 80019b6:	d15d      	bne.n	8001a74 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80019b8:	4b34      	ldr	r3, [pc, #208]	@ (8001a8c <Modbus_Emission+0xe8>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b33      	ldr	r3, [pc, #204]	@ (8001a8c <Modbus_Emission+0xe8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	7812      	ldrb	r2, [r2, #0]
 80019c2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80019c6:	4b31      	ldr	r3, [pc, #196]	@ (8001a8c <Modbus_Emission+0xe8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80019ce:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80019d0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a8c <Modbus_Emission+0xe8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80019d8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a8c <Modbus_Emission+0xe8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80019e0:	461a      	mov	r2, r3
 80019e2:	f009 fd43 	bl	800b46c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80019e6:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <Modbus_Emission+0xe8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80019ee:	461a      	mov	r2, r3
 80019f0:	4b26      	ldr	r3, [pc, #152]	@ (8001a8c <Modbus_Emission+0xe8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3203      	adds	r2, #3
 80019f6:	b292      	uxth	r2, r2
 80019f8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80019fc:	4b23      	ldr	r3, [pc, #140]	@ (8001a8c <Modbus_Emission+0xe8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001a04:	4b21      	ldr	r3, [pc, #132]	@ (8001a8c <Modbus_Emission+0xe8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001a0c:	3b02      	subs	r3, #2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4610      	mov	r0, r2
 8001a12:	f7ff fd9f 	bl	8001554 <CRC16>
 8001a16:	4603      	mov	r3, r0
 8001a18:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a8c <Modbus_Emission+0xe8>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <Modbus_Emission+0xe8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a26:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001a28:	7939      	ldrb	r1, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001a32:	4b16      	ldr	r3, [pc, #88]	@ (8001a8c <Modbus_Emission+0xe8>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <Modbus_Emission+0xe8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a3e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001a40:	7979      	ldrb	r1, [r7, #5]
 8001a42:	4413      	add	r3, r2
 8001a44:	460a      	mov	r2, r1
 8001a46:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <Modbus_Emission+0xe8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d10d      	bne.n	8001a74 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001a58:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <Modbus_Emission+0xe8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <Modbus_Emission+0xe8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001a66:	4b09      	ldr	r3, [pc, #36]	@ (8001a8c <Modbus_Emission+0xe8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001a6a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f007 fef6 	bl	8009860 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001a74:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <Modbus_Emission+0xe8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	@ (8001a8c <Modbus_Emission+0xe8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2200      	movs	r2, #0
 8001a82:	755a      	strb	r2, [r3, #21]

}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000794 	.word	0x20000794

08001a90 <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2232      	movs	r2, #50	@ 0x32
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f002 fc6f 	bl	8004384 <HAL_ADC_Start_DMA>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <Update_adc>:

uint32_t Update_adc(ADC* adc){
 8001aae:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	uint64_t sum_adc = 0;
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e011      	b.n	8001aee <Update_adc+0x40>
		sum_adc += adc -> adc_buffer[i];
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	461c      	mov	r4, r3
 8001ad6:	4615      	mov	r5, r2
 8001ad8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001adc:	eb12 0804 	adds.w	r8, r2, r4
 8001ae0:	eb43 0905 	adc.w	r9, r3, r5
 8001ae4:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	3301      	adds	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	2b31      	cmp	r3, #49	@ 0x31
 8001af2:	d9ea      	bls.n	8001aca <Update_adc+0x1c>
	}
	return adc -> adc_avg = sum_adc / 50;
 8001af4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001af8:	f04f 0232 	mov.w	r2, #50	@ 0x32
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	f7ff f878 	bl	8000bf4 <__aeabi_uldivmod>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001b20 <Update_joy>:
 *      Author: naker
 */

#include "joy.h"

void Update_joy(JOY *joy){
 8001b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
	uint8_t s_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001b2a:	2120      	movs	r1, #32
 8001b2c:	4835      	ldr	r0, [pc, #212]	@ (8001c04 <Update_joy+0xe4>)
 8001b2e:	f004 fc13 	bl	8006358 <HAL_GPIO_ReadPin>
 8001b32:	4603      	mov	r3, r0
 8001b34:	73fb      	strb	r3, [r7, #15]
	uint8_t s_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001b36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b3e:	f004 fc0b 	bl	8006358 <HAL_GPIO_ReadPin>
 8001b42:	4603      	mov	r3, r0
 8001b44:	73bb      	strb	r3, [r7, #14]
	uint8_t s_3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 8001b46:	2110      	movs	r1, #16
 8001b48:	482f      	ldr	r0, [pc, #188]	@ (8001c08 <Update_joy+0xe8>)
 8001b4a:	f004 fc05 	bl	8006358 <HAL_GPIO_ReadPin>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	737b      	strb	r3, [r7, #13]
	uint8_t s_4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8001b52:	2120      	movs	r1, #32
 8001b54:	482c      	ldr	r0, [pc, #176]	@ (8001c08 <Update_joy+0xe8>)
 8001b56:	f004 fbff 	bl	8006358 <HAL_GPIO_ReadPin>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	733b      	strb	r3, [r7, #12]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <Update_joy+0x56>
 8001b64:	7bbb      	ldrb	r3, [r7, #14]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <Update_joy+0x56>
 8001b6a:	7b7b      	ldrb	r3, [r7, #13]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <Update_joy+0x56>
 8001b70:	7b3b      	ldrb	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d133      	bne.n	8001bde <Update_joy+0xbe>
		static uint8_t is_first = 1;
		static uint64_t timestamp = 0;
		if(is_first){
 8001b76:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <Update_joy+0xec>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00c      	beq.n	8001b98 <Update_joy+0x78>
			timestamp = HAL_GetTick() + 50;
 8001b7e:	f001 fff9 	bl	8003b74 <HAL_GetTick>
 8001b82:	4603      	mov	r3, r0
 8001b84:	3332      	adds	r3, #50	@ 0x32
 8001b86:	2200      	movs	r2, #0
 8001b88:	469a      	mov	sl, r3
 8001b8a:	4693      	mov	fp, r2
 8001b8c:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <Update_joy+0xf0>)
 8001b8e:	e9c3 ab00 	strd	sl, fp, [r3]
			is_first = 0;
 8001b92:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <Update_joy+0xec>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() > timestamp){
 8001b98:	f001 ffec 	bl	8003b74 <HAL_GetTick>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	461c      	mov	r4, r3
 8001ba2:	4615      	mov	r5, r2
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <Update_joy+0xf0>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	42a2      	cmp	r2, r4
 8001bac:	41ab      	sbcs	r3, r5
 8001bae:	d223      	bcs.n	8001bf8 <Update_joy+0xd8>
			timestamp = HAL_GetTick() + 50;
 8001bb0:	f001 ffe0 	bl	8003b74 <HAL_GetTick>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	3332      	adds	r3, #50	@ 0x32
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4698      	mov	r8, r3
 8001bbc:	4691      	mov	r9, r2
 8001bbe:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <Update_joy+0xf0>)
 8001bc0:	e9c3 8900 	strd	r8, r9, [r3]
			joy -> s_1 = s_1;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	701a      	strb	r2, [r3, #0]
			joy -> s_2 = s_2;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7bba      	ldrb	r2, [r7, #14]
 8001bce:	705a      	strb	r2, [r3, #1]
			joy -> s_3 = s_3;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7b7a      	ldrb	r2, [r7, #13]
 8001bd4:	709a      	strb	r2, [r3, #2]
			joy -> s_4 = s_4;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7b3a      	ldrb	r2, [r7, #12]
 8001bda:	70da      	strb	r2, [r3, #3]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8001bdc:	e00c      	b.n	8001bf8 <Update_joy+0xd8>
		}
	}else{
		joy -> s_1 = 1;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
		joy -> s_2 = 1;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	705a      	strb	r2, [r3, #1]
		joy -> s_3 = 1;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	709a      	strb	r2, [r3, #2]
		joy -> s_4 = 1;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	70da      	strb	r2, [r3, #3]
	}
}
 8001bf6:	e000      	b.n	8001bfa <Update_joy+0xda>
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8001bf8:	bf00      	nop
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c04:	48000400 	.word	0x48000400
 8001c08:	48000800 	.word	0x48000800
 8001c0c:	20000268 	.word	0x20000268
 8001c10:	20000798 	.word	0x20000798

08001c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c18:	f001 ff47 	bl	8003aaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1c:	f000 f920 	bl	8001e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c20:	f000 fc3a 	bl	8002498 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c24:	f000 fbfe 	bl	8002424 <MX_DMA_Init>
  MX_TIM1_Init();
 8001c28:	f000 f9dc 	bl	8001fe4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001c2c:	f000 fa8a 	bl	8002144 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c30:	f000 fad6 	bl	80021e0 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001c34:	f000 f95e 	bl	8001ef4 <MX_ADC1_Init>
  MX_TIM5_Init();
 8001c38:	f000 fb28 	bl	800228c <MX_TIM5_Init>
  MX_TIM16_Init();
 8001c3c:	f000 fb74 	bl	8002328 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001c40:	f000 fba2 	bl	8002388 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Modbus setting
  hmodbus.huart = &huart2;
 8001c44:	4b6d      	ldr	r3, [pc, #436]	@ (8001dfc <main+0x1e8>)
 8001c46:	4a6e      	ldr	r2, [pc, #440]	@ (8001e00 <main+0x1ec>)
 8001c48:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8001c4a:	4b6c      	ldr	r3, [pc, #432]	@ (8001dfc <main+0x1e8>)
 8001c4c:	4a6d      	ldr	r2, [pc, #436]	@ (8001e04 <main+0x1f0>)
 8001c4e:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8001c50:	4b6a      	ldr	r3, [pc, #424]	@ (8001dfc <main+0x1e8>)
 8001c52:	2215      	movs	r2, #21
 8001c54:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8001c56:	4b69      	ldr	r3, [pc, #420]	@ (8001dfc <main+0x1e8>)
 8001c58:	22c8      	movs	r2, #200	@ 0xc8
 8001c5a:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001c5c:	496a      	ldr	r1, [pc, #424]	@ (8001e08 <main+0x1f4>)
 8001c5e:	4867      	ldr	r0, [pc, #412]	@ (8001dfc <main+0x1e8>)
 8001c60:	f7ff fc22 	bl	80014a8 <Modbus_init>
  //Update MODBUS timer
  HAL_TIM_Base_Start_IT(&htim5);
 8001c64:	4869      	ldr	r0, [pc, #420]	@ (8001e0c <main+0x1f8>)
 8001c66:	f005 fcc3 	bl	80075f0 <HAL_TIM_Base_Start_IT>

  //Update command timer
  HAL_TIM_Base_Start_IT(&htim3);
 8001c6a:	4869      	ldr	r0, [pc, #420]	@ (8001e10 <main+0x1fc>)
 8001c6c:	f005 fcc0 	bl	80075f0 <HAL_TIM_Base_Start_IT>

  //PWM generator
  HAL_TIM_Base_Start(&htim1);
 8001c70:	4868      	ldr	r0, [pc, #416]	@ (8001e14 <main+0x200>)
 8001c72:	f005 fc4d 	bl	8007510 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c76:	2100      	movs	r1, #0
 8001c78:	4866      	ldr	r0, [pc, #408]	@ (8001e14 <main+0x200>)
 8001c7a:	f005 fd9f 	bl	80077bc <HAL_TIM_PWM_Start>

  //Encoder reader
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001c7e:	213c      	movs	r1, #60	@ 0x3c
 8001c80:	4865      	ldr	r0, [pc, #404]	@ (8001e18 <main+0x204>)
 8001c82:	f006 f857 	bl	8007d34 <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, 8192, 8000, 65536);
 8001c86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c8a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001c8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c92:	4862      	ldr	r0, [pc, #392]	@ (8001e1c <main+0x208>)
 8001c94:	f001 f921 	bl	8002eda <QEI_init>

  //Current reader
  ADC_init(&hadc1, &current_sensor);
 8001c98:	4961      	ldr	r1, [pc, #388]	@ (8001e20 <main+0x20c>)
 8001c9a:	4862      	ldr	r0, [pc, #392]	@ (8001e24 <main+0x210>)
 8001c9c:	f7ff fef8 	bl	8001a90 <ADC_init>

  //Position PID
  PID_init(&p_pid, p_kp, p_ki, p_kd, 0.001);
 8001ca0:	4b61      	ldr	r3, [pc, #388]	@ (8001e28 <main+0x214>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	4b61      	ldr	r3, [pc, #388]	@ (8001e2c <main+0x218>)
 8001ca8:	ed93 7a00 	vldr	s14, [r3]
 8001cac:	4b60      	ldr	r3, [pc, #384]	@ (8001e30 <main+0x21c>)
 8001cae:	edd3 6a00 	vldr	s13, [r3]
 8001cb2:	eddf 1a60 	vldr	s3, [pc, #384]	@ 8001e34 <main+0x220>
 8001cb6:	eeb0 1a66 	vmov.f32	s2, s13
 8001cba:	eef0 0a47 	vmov.f32	s1, s14
 8001cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc2:	485d      	ldr	r0, [pc, #372]	@ (8001e38 <main+0x224>)
 8001cc4:	f000 ff04 	bl	8002ad0 <PID_init>
  PID_init(&v_pid, v_kp, v_ki, v_kd, 0.000125);
 8001cc8:	4b5c      	ldr	r3, [pc, #368]	@ (8001e3c <main+0x228>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	4b5c      	ldr	r3, [pc, #368]	@ (8001e40 <main+0x22c>)
 8001cd0:	ed93 7a00 	vldr	s14, [r3]
 8001cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e44 <main+0x230>)
 8001cd6:	edd3 6a00 	vldr	s13, [r3]
 8001cda:	eddf 1a5b 	vldr	s3, [pc, #364]	@ 8001e48 <main+0x234>
 8001cde:	eeb0 1a66 	vmov.f32	s2, s13
 8001ce2:	eef0 0a47 	vmov.f32	s1, s14
 8001ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cea:	4858      	ldr	r0, [pc, #352]	@ (8001e4c <main+0x238>)
 8001cec:	f000 fef0 	bl	8002ad0 <PID_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 8001cf0:	f7ff fc66 	bl	80015c0 <Modbus_Protocal_Worker>
	  Set_Shelves();
 8001cf4:	f7ff f93e 	bl	8000f74 <Set_Shelves>
	  Gripper_Movement_Status();
 8001cf8:	f7ff f918 	bl	8000f2c <Gripper_Movement_Status>
	  Vacuum_Status();
 8001cfc:	f7ff f8f2 	bl	8000ee4 <Vacuum_Status>
	  Run_Jog_Mode();
 8001d00:	f7ff fb48 	bl	8001394 <Run_Jog_Mode>
	  SetPick_PlaceOrder();
 8001d04:	f7ff f9bc 	bl	8001080 <SetPick_PlaceOrder>
	  Set_Home();
 8001d08:	f7ff f990 	bl	800102c <Set_Home>
	  Set_Goal_Point();
 8001d0c:	f7ff f96e 	bl	8000fec <Set_Goal_Point>
	  //Routime
	  registerFrame[0x10].U16 = state;  //Z-axis Moving Status(0x10)
 8001d10:	4b4f      	ldr	r3, [pc, #316]	@ (8001e50 <main+0x23c>)
 8001d12:	881a      	ldrh	r2, [r3, #0]
 8001d14:	4b3c      	ldr	r3, [pc, #240]	@ (8001e08 <main+0x1f4>)
 8001d16:	841a      	strh	r2, [r3, #32]
	  registerFrame[0x11].U16 = encoder.mm;	//Z-axis Actual Position(0x11)
 8001d18:	4b40      	ldr	r3, [pc, #256]	@ (8001e1c <main+0x208>)
 8001d1a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d22:	ee17 3a90 	vmov	r3, s15
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b37      	ldr	r3, [pc, #220]	@ (8001e08 <main+0x1f4>)
 8001d2a:	845a      	strh	r2, [r3, #34]	@ 0x22
	  registerFrame[0x12].U16 = encoder.mmps;  //Z-axis Actual Speed (0x12)
 8001d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e1c <main+0x208>)
 8001d2e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d36:	ee17 3a90 	vmov	r3, s15
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	4b32      	ldr	r3, [pc, #200]	@ (8001e08 <main+0x1f4>)
 8001d3e:	849a      	strh	r2, [r3, #36]	@ 0x24
	  registerFrame[0x13].U16 = encoder.mmpss;  //Z-axis Acceleration(0x13)    //////ความเร่งต้องเปลี่ยน/////
 8001d40:	4b36      	ldr	r3, [pc, #216]	@ (8001e1c <main+0x208>)
 8001d42:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d4a:	ee17 3a90 	vmov	r3, s15
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	4b2d      	ldr	r3, [pc, #180]	@ (8001e08 <main+0x1f4>)
 8001d52:	84da      	strh	r2, [r3, #38]	@ 0x26
//	  registerFrame[0x40].U16 = encoder.rpm;  //X-axis Actual Position(0x40)

	  while(mode == 1){
 8001d54:	e04d      	b.n	8001df2 <main+0x1de>
		  Update_joy(&joy);
 8001d56:	483f      	ldr	r0, [pc, #252]	@ (8001e54 <main+0x240>)
 8001d58:	f7ff fee2 	bl	8001b20 <Update_joy>
		  if (!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 8001d5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e54 <main+0x240>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d111      	bne.n	8001d88 <main+0x174>
 8001d64:	4b3b      	ldr	r3, [pc, #236]	@ (8001e54 <main+0x240>)
 8001d66:	785b      	ldrb	r3, [r3, #1]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00d      	beq.n	8001d88 <main+0x174>
 8001d6c:	4b39      	ldr	r3, [pc, #228]	@ (8001e54 <main+0x240>)
 8001d6e:	789b      	ldrb	r3, [r3, #2]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d009      	beq.n	8001d88 <main+0x174>
 8001d74:	4b37      	ldr	r3, [pc, #220]	@ (8001e54 <main+0x240>)
 8001d76:	78db      	ldrb	r3, [r3, #3]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <main+0x174>
			  // switch 1 has pushed
			  jog += 10; // Move up 10 mm.
 8001d7c:	4b36      	ldr	r3, [pc, #216]	@ (8001e58 <main+0x244>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	330a      	adds	r3, #10
 8001d82:	4a35      	ldr	r2, [pc, #212]	@ (8001e58 <main+0x244>)
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e034      	b.n	8001df2 <main+0x1de>
		  }else if (joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 8001d88:	4b32      	ldr	r3, [pc, #200]	@ (8001e54 <main+0x240>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d011      	beq.n	8001db4 <main+0x1a0>
 8001d90:	4b30      	ldr	r3, [pc, #192]	@ (8001e54 <main+0x240>)
 8001d92:	785b      	ldrb	r3, [r3, #1]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10d      	bne.n	8001db4 <main+0x1a0>
 8001d98:	4b2e      	ldr	r3, [pc, #184]	@ (8001e54 <main+0x240>)
 8001d9a:	789b      	ldrb	r3, [r3, #2]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d009      	beq.n	8001db4 <main+0x1a0>
 8001da0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e54 <main+0x240>)
 8001da2:	78db      	ldrb	r3, [r3, #3]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <main+0x1a0>
			  // switch 2 has pushed
			  jog -= 10; // Move down 10 mm.
 8001da8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e58 <main+0x244>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3b0a      	subs	r3, #10
 8001dae:	4a2a      	ldr	r2, [pc, #168]	@ (8001e58 <main+0x244>)
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e01e      	b.n	8001df2 <main+0x1de>
		  }else if (joy.s_1 && joy.s_2 && !joy.s_3 && joy.s_4){
 8001db4:	4b27      	ldr	r3, [pc, #156]	@ (8001e54 <main+0x240>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d01a      	beq.n	8001df2 <main+0x1de>
 8001dbc:	4b25      	ldr	r3, [pc, #148]	@ (8001e54 <main+0x240>)
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d016      	beq.n	8001df2 <main+0x1de>
 8001dc4:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <main+0x240>)
 8001dc6:	789b      	ldrb	r3, [r3, #2]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d112      	bne.n	8001df2 <main+0x1de>
 8001dcc:	4b21      	ldr	r3, [pc, #132]	@ (8001e54 <main+0x240>)
 8001dce:	78db      	ldrb	r3, [r3, #3]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <main+0x1c8>
			  // switch 3 has pushed
			  mode = 0; // Change mode to Automatic
 8001dd4:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <main+0x248>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	e00a      	b.n	8001df2 <main+0x1de>
		  }else if (joy.s_1 && joy.s_2 && joy.s_3 && !joy.s_4){
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <main+0x240>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <main+0x1de>
 8001de4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <main+0x240>)
 8001de6:	785b      	ldrb	r3, [r3, #1]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <main+0x1de>
 8001dec:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <main+0x240>)
 8001dee:	789b      	ldrb	r3, [r3, #2]
 8001df0:	2b00      	cmp	r3, #0
	  while(mode == 1){
 8001df2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e5c <main+0x248>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d0ad      	beq.n	8001d56 <main+0x142>
	  Modbus_Protocal_Worker();
 8001dfa:	e779      	b.n	8001cf0 <main+0xdc>
 8001dfc:	200002bc 	.word	0x200002bc
 8001e00:	20000c68 	.word	0x20000c68
 8001e04:	20000b9c 	.word	0x20000b9c
 8001e08:	20000e0c 	.word	0x20000e0c
 8001e0c:	20000ad0 	.word	0x20000ad0
 8001e10:	20000938 	.word	0x20000938
 8001e14:	2000086c 	.word	0x2000086c
 8001e18:	20000a04 	.word	0x20000a04
 8001e1c:	20001088 	.word	0x20001088
 8001e20:	20000fb8 	.word	0x20000fb8
 8001e24:	200007a0 	.word	0x200007a0
 8001e28:	20000270 	.word	0x20000270
 8001e2c:	20001128 	.word	0x20001128
 8001e30:	2000112c 	.word	0x2000112c
 8001e34:	3a83126f 	.word	0x3a83126f
 8001e38:	20001110 	.word	0x20001110
 8001e3c:	2000026c 	.word	0x2000026c
 8001e40:	20001100 	.word	0x20001100
 8001e44:	20001104 	.word	0x20001104
 8001e48:	3903126f 	.word	0x3903126f
 8001e4c:	200010e8 	.word	0x200010e8
 8001e50:	200002ba 	.word	0x200002ba
 8001e54:	20000f9c 	.word	0x20000f9c
 8001e58:	20000fa0 	.word	0x20000fa0
 8001e5c:	20000fb4 	.word	0x20000fb4

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b094      	sub	sp, #80	@ 0x50
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0318 	add.w	r3, r7, #24
 8001e6a:	2238      	movs	r2, #56	@ 0x38
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f009 fad0 	bl	800b414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f004 fab0 	bl	80063e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e90:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e92:	2302      	movs	r3, #2
 8001e94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e96:	2303      	movs	r3, #3
 8001e98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001e9e:	2355      	movs	r3, #85	@ 0x55
 8001ea0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eae:	f107 0318 	add.w	r3, r7, #24
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 fb4c 	bl	8006550 <HAL_RCC_OscConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001ebe:	f000 fe01 	bl	8002ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec2:	230f      	movs	r3, #15
 8001ec4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	2104      	movs	r1, #4
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 fe4a 	bl	8006b74 <HAL_RCC_ClockConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001ee6:	f000 fded 	bl	8002ac4 <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3750      	adds	r7, #80	@ 0x50
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08c      	sub	sp, #48	@ 0x30
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2220      	movs	r2, #32
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f009 fa81 	bl	800b414 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f12:	4b32      	ldr	r3, [pc, #200]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f14:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001f18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f1a:	4b30      	ldr	r3, [pc, #192]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f1c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001f20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f22:	4b2e      	ldr	r3, [pc, #184]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f28:	4b2c      	ldr	r3, [pc, #176]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f34:	4b29      	ldr	r3, [pc, #164]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f3a:	4b28      	ldr	r3, [pc, #160]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f40:	4b26      	ldr	r3, [pc, #152]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f46:	4b25      	ldr	r3, [pc, #148]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001f4c:	4b23      	ldr	r3, [pc, #140]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f52:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f5a:	4b20      	ldr	r3, [pc, #128]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f60:	4b1e      	ldr	r3, [pc, #120]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f66:	4b1d      	ldr	r3, [pc, #116]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001f74:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f7c:	4817      	ldr	r0, [pc, #92]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f7e:	f002 f845 	bl	800400c <HAL_ADC_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001f88:	f000 fd9c 	bl	8002ac4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f94:	4619      	mov	r1, r3
 8001f96:	4811      	ldr	r0, [pc, #68]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001f98:	f003 fb12 	bl	80055c0 <HAL_ADCEx_MultiModeConfigChannel>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001fa2:	f000 fd8f 	bl	8002ac4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <MX_ADC1_Init+0xec>)
 8001fa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001faa:	2306      	movs	r3, #6
 8001fac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001fb2:	237f      	movs	r3, #127	@ 0x7f
 8001fb4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4806      	ldr	r0, [pc, #24]	@ (8001fdc <MX_ADC1_Init+0xe8>)
 8001fc4:	f002 fd3a 	bl	8004a3c <HAL_ADC_ConfigChannel>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001fce:	f000 fd79 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	3730      	adds	r7, #48	@ 0x30
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200007a0 	.word	0x200007a0
 8001fe0:	04300002 	.word	0x04300002

08001fe4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b09c      	sub	sp, #112	@ 0x70
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002004:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
 8002014:	615a      	str	r2, [r3, #20]
 8002016:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	2234      	movs	r2, #52	@ 0x34
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f009 f9f8 	bl	800b414 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002024:	4b45      	ldr	r3, [pc, #276]	@ (800213c <MX_TIM1_Init+0x158>)
 8002026:	4a46      	ldr	r2, [pc, #280]	@ (8002140 <MX_TIM1_Init+0x15c>)
 8002028:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800202a:	4b44      	ldr	r3, [pc, #272]	@ (800213c <MX_TIM1_Init+0x158>)
 800202c:	22a9      	movs	r2, #169	@ 0xa9
 800202e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002030:	4b42      	ldr	r3, [pc, #264]	@ (800213c <MX_TIM1_Init+0x158>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002036:	4b41      	ldr	r3, [pc, #260]	@ (800213c <MX_TIM1_Init+0x158>)
 8002038:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800203c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203e:	4b3f      	ldr	r3, [pc, #252]	@ (800213c <MX_TIM1_Init+0x158>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002044:	4b3d      	ldr	r3, [pc, #244]	@ (800213c <MX_TIM1_Init+0x158>)
 8002046:	2200      	movs	r2, #0
 8002048:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204a:	4b3c      	ldr	r3, [pc, #240]	@ (800213c <MX_TIM1_Init+0x158>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002050:	483a      	ldr	r0, [pc, #232]	@ (800213c <MX_TIM1_Init+0x158>)
 8002052:	f005 f9f9 	bl	8007448 <HAL_TIM_Base_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800205c:	f000 fd32 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002060:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002064:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002066:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800206a:	4619      	mov	r1, r3
 800206c:	4833      	ldr	r0, [pc, #204]	@ (800213c <MX_TIM1_Init+0x158>)
 800206e:	f006 f97d 	bl	800836c <HAL_TIM_ConfigClockSource>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002078:	f000 fd24 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800207c:	482f      	ldr	r0, [pc, #188]	@ (800213c <MX_TIM1_Init+0x158>)
 800207e:	f005 fb2f 	bl	80076e0 <HAL_TIM_PWM_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002088:	f000 fd1c 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002090:	2300      	movs	r3, #0
 8002092:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002098:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800209c:	4619      	mov	r1, r3
 800209e:	4827      	ldr	r0, [pc, #156]	@ (800213c <MX_TIM1_Init+0x158>)
 80020a0:	f007 f94a 	bl	8009338 <HAL_TIMEx_MasterConfigSynchronization>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80020aa:	f000 fd0b 	bl	8002ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ae:	2360      	movs	r3, #96	@ 0x60
 80020b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b6:	2300      	movs	r3, #0
 80020b8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020ba:	2300      	movs	r3, #0
 80020bc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80020be:	2304      	movs	r3, #4
 80020c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020ce:	2200      	movs	r2, #0
 80020d0:	4619      	mov	r1, r3
 80020d2:	481a      	ldr	r0, [pc, #104]	@ (800213c <MX_TIM1_Init+0x158>)
 80020d4:	f006 f836 	bl	8008144 <HAL_TIM_PWM_ConfigChannel>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80020de:	f000 fcf1 	bl	8002ac4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002100:	2300      	movs	r3, #0
 8002102:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002108:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800210c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002112:	2300      	movs	r3, #0
 8002114:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	4619      	mov	r1, r3
 800211e:	4807      	ldr	r0, [pc, #28]	@ (800213c <MX_TIM1_Init+0x158>)
 8002120:	f007 f9a0 	bl	8009464 <HAL_TIMEx_ConfigBreakDeadTime>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800212a:	f000 fccb 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800212e:	4803      	ldr	r0, [pc, #12]	@ (800213c <MX_TIM1_Init+0x158>)
 8002130:	f001 faee 	bl	8003710 <HAL_TIM_MspPostInit>

}
 8002134:	bf00      	nop
 8002136:	3770      	adds	r7, #112	@ 0x70
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	2000086c 	.word	0x2000086c
 8002140:	40012c00 	.word	0x40012c00

08002144 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214a:	f107 0310 	add.w	r3, r7, #16
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002162:	4b1d      	ldr	r3, [pc, #116]	@ (80021d8 <MX_TIM3_Init+0x94>)
 8002164:	4a1d      	ldr	r2, [pc, #116]	@ (80021dc <MX_TIM3_Init+0x98>)
 8002166:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8002168:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <MX_TIM3_Init+0x94>)
 800216a:	22a9      	movs	r2, #169	@ 0xa9
 800216c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216e:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <MX_TIM3_Init+0x94>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002174:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <MX_TIM3_Init+0x94>)
 8002176:	2263      	movs	r2, #99	@ 0x63
 8002178:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217a:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <MX_TIM3_Init+0x94>)
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002180:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <MX_TIM3_Init+0x94>)
 8002182:	2200      	movs	r2, #0
 8002184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002186:	4814      	ldr	r0, [pc, #80]	@ (80021d8 <MX_TIM3_Init+0x94>)
 8002188:	f005 f95e 	bl	8007448 <HAL_TIM_Base_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002192:	f000 fc97 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002196:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800219a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800219c:	f107 0310 	add.w	r3, r7, #16
 80021a0:	4619      	mov	r1, r3
 80021a2:	480d      	ldr	r0, [pc, #52]	@ (80021d8 <MX_TIM3_Init+0x94>)
 80021a4:	f006 f8e2 	bl	800836c <HAL_TIM_ConfigClockSource>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80021ae:	f000 fc89 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	4619      	mov	r1, r3
 80021be:	4806      	ldr	r0, [pc, #24]	@ (80021d8 <MX_TIM3_Init+0x94>)
 80021c0:	f007 f8ba 	bl	8009338 <HAL_TIMEx_MasterConfigSynchronization>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80021ca:	f000 fc7b 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	3720      	adds	r7, #32
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000938 	.word	0x20000938
 80021dc:	40000400 	.word	0x40000400

080021e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	@ 0x30
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	2224      	movs	r2, #36	@ 0x24
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f009 f910 	bl	800b414 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f4:	463b      	mov	r3, r7
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021fe:	4b21      	ldr	r3, [pc, #132]	@ (8002284 <MX_TIM4_Init+0xa4>)
 8002200:	4a21      	ldr	r2, [pc, #132]	@ (8002288 <MX_TIM4_Init+0xa8>)
 8002202:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002204:	4b1f      	ldr	r3, [pc, #124]	@ (8002284 <MX_TIM4_Init+0xa4>)
 8002206:	2200      	movs	r2, #0
 8002208:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220a:	4b1e      	ldr	r3, [pc, #120]	@ (8002284 <MX_TIM4_Init+0xa4>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002210:	4b1c      	ldr	r3, [pc, #112]	@ (8002284 <MX_TIM4_Init+0xa4>)
 8002212:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002216:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002218:	4b1a      	ldr	r3, [pc, #104]	@ (8002284 <MX_TIM4_Init+0xa4>)
 800221a:	2200      	movs	r2, #0
 800221c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221e:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <MX_TIM4_Init+0xa4>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002224:	2303      	movs	r3, #3
 8002226:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800222c:	2301      	movs	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002230:	2300      	movs	r3, #0
 8002232:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800223c:	2301      	movs	r3, #1
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002240:	2300      	movs	r3, #0
 8002242:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	4619      	mov	r1, r3
 800224e:	480d      	ldr	r0, [pc, #52]	@ (8002284 <MX_TIM4_Init+0xa4>)
 8002250:	f005 fcbc 	bl	8007bcc <HAL_TIM_Encoder_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800225a:	f000 fc33 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002266:	463b      	mov	r3, r7
 8002268:	4619      	mov	r1, r3
 800226a:	4806      	ldr	r0, [pc, #24]	@ (8002284 <MX_TIM4_Init+0xa4>)
 800226c:	f007 f864 	bl	8009338 <HAL_TIMEx_MasterConfigSynchronization>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002276:	f000 fc25 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800227a:	bf00      	nop
 800227c:	3730      	adds	r7, #48	@ 0x30
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000a04 	.word	0x20000a04
 8002288:	40000800 	.word	0x40000800

0800228c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002292:	f107 0310 	add.w	r3, r7, #16
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <MX_TIM5_Init+0x94>)
 80022ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002324 <MX_TIM5_Init+0x98>)
 80022ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80022b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <MX_TIM5_Init+0x94>)
 80022b2:	22a9      	movs	r2, #169	@ 0xa9
 80022b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <MX_TIM5_Init+0x94>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 80022bc:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <MX_TIM5_Init+0x94>)
 80022be:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80022c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c4:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <MX_TIM5_Init+0x94>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <MX_TIM5_Init+0x94>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022d0:	4813      	ldr	r0, [pc, #76]	@ (8002320 <MX_TIM5_Init+0x94>)
 80022d2:	f005 f8b9 	bl	8007448 <HAL_TIM_Base_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80022dc:	f000 fbf2 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022e6:	f107 0310 	add.w	r3, r7, #16
 80022ea:	4619      	mov	r1, r3
 80022ec:	480c      	ldr	r0, [pc, #48]	@ (8002320 <MX_TIM5_Init+0x94>)
 80022ee:	f006 f83d 	bl	800836c <HAL_TIM_ConfigClockSource>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80022f8:	f000 fbe4 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	4619      	mov	r1, r3
 8002308:	4805      	ldr	r0, [pc, #20]	@ (8002320 <MX_TIM5_Init+0x94>)
 800230a:	f007 f815 	bl	8009338 <HAL_TIMEx_MasterConfigSynchronization>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002314:	f000 fbd6 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000ad0 	.word	0x20000ad0
 8002324:	40000c00 	.word	0x40000c00

08002328 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800232c:	4b14      	ldr	r3, [pc, #80]	@ (8002380 <MX_TIM16_Init+0x58>)
 800232e:	4a15      	ldr	r2, [pc, #84]	@ (8002384 <MX_TIM16_Init+0x5c>)
 8002330:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002332:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <MX_TIM16_Init+0x58>)
 8002334:	22a9      	movs	r2, #169	@ 0xa9
 8002336:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002338:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <MX_TIM16_Init+0x58>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800233e:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <MX_TIM16_Init+0x58>)
 8002340:	f240 4279 	movw	r2, #1145	@ 0x479
 8002344:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002346:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <MX_TIM16_Init+0x58>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800234c:	4b0c      	ldr	r3, [pc, #48]	@ (8002380 <MX_TIM16_Init+0x58>)
 800234e:	2200      	movs	r2, #0
 8002350:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002352:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <MX_TIM16_Init+0x58>)
 8002354:	2200      	movs	r2, #0
 8002356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002358:	4809      	ldr	r0, [pc, #36]	@ (8002380 <MX_TIM16_Init+0x58>)
 800235a:	f005 f875 	bl	8007448 <HAL_TIM_Base_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002364:	f000 fbae 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002368:	2108      	movs	r1, #8
 800236a:	4805      	ldr	r0, [pc, #20]	@ (8002380 <MX_TIM16_Init+0x58>)
 800236c:	f005 fb38 	bl	80079e0 <HAL_TIM_OnePulse_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002376:	f000 fba5 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000b9c 	.word	0x20000b9c
 8002384:	40014400 	.word	0x40014400

08002388 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800238c:	4b23      	ldr	r3, [pc, #140]	@ (800241c <MX_USART2_UART_Init+0x94>)
 800238e:	4a24      	ldr	r2, [pc, #144]	@ (8002420 <MX_USART2_UART_Init+0x98>)
 8002390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002392:	4b22      	ldr	r3, [pc, #136]	@ (800241c <MX_USART2_UART_Init+0x94>)
 8002394:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800239a:	4b20      	ldr	r3, [pc, #128]	@ (800241c <MX_USART2_UART_Init+0x94>)
 800239c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023a0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023a2:	4b1e      	ldr	r3, [pc, #120]	@ (800241c <MX_USART2_UART_Init+0x94>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80023a8:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <MX_USART2_UART_Init+0x94>)
 80023aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023b0:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <MX_USART2_UART_Init+0x94>)
 80023b2:	220c      	movs	r2, #12
 80023b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b6:	4b19      	ldr	r3, [pc, #100]	@ (800241c <MX_USART2_UART_Init+0x94>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023bc:	4b17      	ldr	r3, [pc, #92]	@ (800241c <MX_USART2_UART_Init+0x94>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023c2:	4b16      	ldr	r3, [pc, #88]	@ (800241c <MX_USART2_UART_Init+0x94>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023c8:	4b14      	ldr	r3, [pc, #80]	@ (800241c <MX_USART2_UART_Init+0x94>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ce:	4b13      	ldr	r3, [pc, #76]	@ (800241c <MX_USART2_UART_Init+0x94>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023d4:	4811      	ldr	r0, [pc, #68]	@ (800241c <MX_USART2_UART_Init+0x94>)
 80023d6:	f007 f929 	bl	800962c <HAL_UART_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80023e0:	f000 fb70 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023e4:	2100      	movs	r1, #0
 80023e6:	480d      	ldr	r0, [pc, #52]	@ (800241c <MX_USART2_UART_Init+0x94>)
 80023e8:	f008 ff49 	bl	800b27e <HAL_UARTEx_SetTxFifoThreshold>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80023f2:	f000 fb67 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023f6:	2100      	movs	r1, #0
 80023f8:	4808      	ldr	r0, [pc, #32]	@ (800241c <MX_USART2_UART_Init+0x94>)
 80023fa:	f008 ff7e 	bl	800b2fa <HAL_UARTEx_SetRxFifoThreshold>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002404:	f000 fb5e 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002408:	4804      	ldr	r0, [pc, #16]	@ (800241c <MX_USART2_UART_Init+0x94>)
 800240a:	f008 feff 	bl	800b20c <HAL_UARTEx_DisableFifoMode>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002414:	f000 fb56 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000c68 	.word	0x20000c68
 8002420:	40004400 	.word	0x40004400

08002424 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800242a:	4b1a      	ldr	r3, [pc, #104]	@ (8002494 <MX_DMA_Init+0x70>)
 800242c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800242e:	4a19      	ldr	r2, [pc, #100]	@ (8002494 <MX_DMA_Init+0x70>)
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	6493      	str	r3, [r2, #72]	@ 0x48
 8002436:	4b17      	ldr	r3, [pc, #92]	@ (8002494 <MX_DMA_Init+0x70>)
 8002438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002442:	4b14      	ldr	r3, [pc, #80]	@ (8002494 <MX_DMA_Init+0x70>)
 8002444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002446:	4a13      	ldr	r2, [pc, #76]	@ (8002494 <MX_DMA_Init+0x70>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6493      	str	r3, [r2, #72]	@ 0x48
 800244e:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <MX_DMA_Init+0x70>)
 8002450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	200b      	movs	r0, #11
 8002460:	f003 fa91 	bl	8005986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002464:	200b      	movs	r0, #11
 8002466:	f003 faa8 	bl	80059ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2100      	movs	r1, #0
 800246e:	200c      	movs	r0, #12
 8002470:	f003 fa89 	bl	8005986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002474:	200c      	movs	r0, #12
 8002476:	f003 faa0 	bl	80059ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	200d      	movs	r0, #13
 8002480:	f003 fa81 	bl	8005986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002484:	200d      	movs	r0, #13
 8002486:	f003 fa98 	bl	80059ba <HAL_NVIC_EnableIRQ>

}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000

08002498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	@ 0x28
 800249c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249e:	f107 0314 	add.w	r3, r7, #20
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	60da      	str	r2, [r3, #12]
 80024ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ae:	4b66      	ldr	r3, [pc, #408]	@ (8002648 <MX_GPIO_Init+0x1b0>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b2:	4a65      	ldr	r2, [pc, #404]	@ (8002648 <MX_GPIO_Init+0x1b0>)
 80024b4:	f043 0304 	orr.w	r3, r3, #4
 80024b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ba:	4b63      	ldr	r3, [pc, #396]	@ (8002648 <MX_GPIO_Init+0x1b0>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024c6:	4b60      	ldr	r3, [pc, #384]	@ (8002648 <MX_GPIO_Init+0x1b0>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002648 <MX_GPIO_Init+0x1b0>)
 80024cc:	f043 0320 	orr.w	r3, r3, #32
 80024d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002648 <MX_GPIO_Init+0x1b0>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	4b5a      	ldr	r3, [pc, #360]	@ (8002648 <MX_GPIO_Init+0x1b0>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e2:	4a59      	ldr	r2, [pc, #356]	@ (8002648 <MX_GPIO_Init+0x1b0>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ea:	4b57      	ldr	r3, [pc, #348]	@ (8002648 <MX_GPIO_Init+0x1b0>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f6:	4b54      	ldr	r3, [pc, #336]	@ (8002648 <MX_GPIO_Init+0x1b0>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fa:	4a53      	ldr	r2, [pc, #332]	@ (8002648 <MX_GPIO_Init+0x1b0>)
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002502:	4b51      	ldr	r3, [pc, #324]	@ (8002648 <MX_GPIO_Init+0x1b0>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 800250e:	2200      	movs	r2, #0
 8002510:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002514:	484d      	ldr	r0, [pc, #308]	@ (800264c <MX_GPIO_Init+0x1b4>)
 8002516:	f003 ff37 	bl	8006388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 800251a:	2200      	movs	r2, #0
 800251c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002520:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002524:	f003 ff30 	bl	8006388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 8002528:	2200      	movs	r2, #0
 800252a:	f240 4116 	movw	r1, #1046	@ 0x416
 800252e:	4848      	ldr	r0, [pc, #288]	@ (8002650 <MX_GPIO_Init+0x1b8>)
 8002530:	f003 ff2a 	bl	8006388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002534:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800253a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800253e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4619      	mov	r1, r3
 800254a:	4840      	ldr	r0, [pc, #256]	@ (800264c <MX_GPIO_Init+0x1b4>)
 800254c:	f003 fd82 	bl	8006054 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 8002550:	2302      	movs	r3, #2
 8002552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002554:	2301      	movs	r3, #1
 8002556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255c:	2303      	movs	r3, #3
 800255e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	4619      	mov	r1, r3
 8002566:	4839      	ldr	r0, [pc, #228]	@ (800264c <MX_GPIO_Init+0x1b4>)
 8002568:	f003 fd74 	bl	8006054 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 800256c:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8002570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	2301      	movs	r3, #1
 8002574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002588:	f003 fd64 	bl	8006054 <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 800258c:	23f0      	movs	r3, #240	@ 0xf0
 800258e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	4619      	mov	r1, r3
 800259e:	482b      	ldr	r0, [pc, #172]	@ (800264c <MX_GPIO_Init+0x1b4>)
 80025a0:	f003 fd58 	bl	8006054 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 80025a4:	f240 4316 	movw	r3, #1046	@ 0x416
 80025a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025aa:	2301      	movs	r3, #1
 80025ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4619      	mov	r1, r3
 80025bc:	4824      	ldr	r0, [pc, #144]	@ (8002650 <MX_GPIO_Init+0x1b8>)
 80025be:	f003 fd49 	bl	8006054 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|Emergency_switch_Pin;
 80025c2:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80025c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025c8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80025cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	481d      	ldr	r0, [pc, #116]	@ (8002650 <MX_GPIO_Init+0x1b8>)
 80025da:	f003 fd3b 	bl	8006054 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 80025de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e4:	2301      	movs	r3, #1
 80025e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4619      	mov	r1, r3
 80025f6:	4815      	ldr	r0, [pc, #84]	@ (800264c <MX_GPIO_Init+0x1b4>)
 80025f8:	f003 fd2c 	bl	8006054 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 80025fc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002602:	2300      	movs	r3, #0
 8002604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002614:	f003 fd1e 	bl	8006054 <HAL_GPIO_Init>

  /*Configure GPIO pin : joy_switch_1_Pin */
  GPIO_InitStruct.Pin = joy_switch_1_Pin;
 8002618:	2320      	movs	r3, #32
 800261a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(joy_switch_1_GPIO_Port, &GPIO_InitStruct);
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	4619      	mov	r1, r3
 800262a:	4809      	ldr	r0, [pc, #36]	@ (8002650 <MX_GPIO_Init+0x1b8>)
 800262c:	f003 fd12 	bl	8006054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002630:	2200      	movs	r2, #0
 8002632:	2100      	movs	r1, #0
 8002634:	2028      	movs	r0, #40	@ 0x28
 8002636:	f003 f9a6 	bl	8005986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800263a:	2028      	movs	r0, #40	@ 0x28
 800263c:	f003 f9bd 	bl	80059ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002640:	bf00      	nop
 8002642:	3728      	adds	r7, #40	@ 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	48000800 	.word	0x48000800
 8002650:	48000400 	.word	0x48000400

08002654 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002658:	b086      	sub	sp, #24
 800265a:	af02      	add	r7, sp, #8
 800265c:	60f8      	str	r0, [r7, #12]
	if(htim == &htim5){
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4aa7      	ldr	r2, [pc, #668]	@ (8002900 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d103      	bne.n	800266e <HAL_TIM_PeriodElapsedCallback+0x1a>
		//Update modbus
		registerFrame[0x00].U16 = 22881;
 8002666:	4ba7      	ldr	r3, [pc, #668]	@ (8002904 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002668:	f645 1261 	movw	r2, #22881	@ 0x5961
 800266c:	801a      	strh	r2, [r3, #0]
	}
	if(htim == &htim3){
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4aa5      	ldr	r2, [pc, #660]	@ (8002908 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	f040 813f 	bne.w	80028f6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
		//Update main
		Update_qei(&encoder, &htim4);
 8002678:	49a4      	ldr	r1, [pc, #656]	@ (800290c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800267a:	48a5      	ldr	r0, [pc, #660]	@ (8002910 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800267c:	f000 fc80 	bl	8002f80 <Update_qei>
		Update_adc(&current_sensor);
 8002680:	48a4      	ldr	r0, [pc, #656]	@ (8002914 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002682:	f7ff fa14 	bl	8001aae <Update_adc>
		if((homing == 0) && (encoder.mm > 500 || encoder.mm < 0)){
 8002686:	4ba4      	ldr	r3, [pc, #656]	@ (8002918 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d11a      	bne.n	80026c4 <HAL_TIM_PeriodElapsedCallback+0x70>
 800268e:	4ba0      	ldr	r3, [pc, #640]	@ (8002910 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002690:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002694:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 800291c <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8002698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800269c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a0:	dc07      	bgt.n	80026b2 <HAL_TIM_PeriodElapsedCallback+0x5e>
 80026a2:	4b9b      	ldr	r3, [pc, #620]	@ (8002910 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80026a4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80026a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	d508      	bpl.n	80026c4 <HAL_TIM_PeriodElapsedCallback+0x70>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 80026b2:	2300      	movs	r3, #0
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	2302      	movs	r3, #2
 80026b8:	4a99      	ldr	r2, [pc, #612]	@ (8002920 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80026ba:	2100      	movs	r1, #0
 80026bc:	4899      	ldr	r0, [pc, #612]	@ (8002924 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80026be:	f000 fb75 	bl	8002dac <Update_pwm>
 80026c2:	e118      	b.n	80028f6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
		}
		else if(mode == 0 || mode == 1){
 80026c4:	4b98      	ldr	r3, [pc, #608]	@ (8002928 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_TIM_PeriodElapsedCallback+0x80>
 80026cc:	4b96      	ldr	r3, [pc, #600]	@ (8002928 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d13f      	bne.n	8002754 <HAL_TIM_PeriodElapsedCallback+0x100>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, v_output);
 80026d4:	4b95      	ldr	r3, [pc, #596]	@ (800292c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2302      	movs	r3, #2
 80026dc:	4a90      	ldr	r2, [pc, #576]	@ (8002920 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80026de:	2100      	movs	r1, #0
 80026e0:	4890      	ldr	r0, [pc, #576]	@ (8002924 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80026e2:	f000 fb63 	bl	8002dac <Update_pwm>
			if(mode == 0){ setpoint = 0;} // If mode == 0 : set point from base system
 80026e6:	4b90      	ldr	r3, [pc, #576]	@ (8002928 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d104      	bne.n	80026f8 <HAL_TIM_PeriodElapsedCallback+0xa4>
 80026ee:	4b90      	ldr	r3, [pc, #576]	@ (8002930 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e007      	b.n	8002708 <HAL_TIM_PeriodElapsedCallback+0xb4>
			else if(mode == 1){setpoint = 1;} // If mode == 1 : set point from joy
 80026f8:	4b8b      	ldr	r3, [pc, #556]	@ (8002928 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d103      	bne.n	8002708 <HAL_TIM_PeriodElapsedCallback+0xb4>
 8002700:	4b8b      	ldr	r3, [pc, #556]	@ (8002930 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002702:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002706:	601a      	str	r2, [r3, #0]
			Update_velocity_control(test);
 8002708:	4b8a      	ldr	r3, [pc, #552]	@ (8002934 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	ee07 3a90 	vmov	s15, r3
 8002710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002714:	eeb0 0a67 	vmov.f32	s0, s15
 8002718:	f000 f9a4 	bl	8002a64 <Update_velocity_control>
			static uint64_t timestamp = 0;
			if (timestamp == 8){
 800271c:	4b86      	ldr	r3, [pc, #536]	@ (8002938 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	f1a2 0108 	sub.w	r1, r2, #8
 8002726:	430b      	orrs	r3, r1
 8002728:	d106      	bne.n	8002738 <HAL_TIM_PeriodElapsedCallback+0xe4>
//				Update_position_control(test);
				timestamp = 0;
 800272a:	4983      	ldr	r1, [pc, #524]	@ (8002938 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	e9c1 2300 	strd	r2, r3, [r1]
			}
			timestamp++;
 8002738:	4b7f      	ldr	r3, [pc, #508]	@ (8002938 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800273a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273e:	1c51      	adds	r1, r2, #1
 8002740:	6039      	str	r1, [r7, #0]
 8002742:	f143 0300 	adc.w	r3, r3, #0
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	4b7b      	ldr	r3, [pc, #492]	@ (8002938 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800274a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800274e:	e9c3 1200 	strd	r1, r2, [r3]
		else if(mode == 0 || mode == 1){
 8002752:	e0d0      	b.n	80028f6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
		}
		else{
			repeat_cheack++;
 8002754:	4b79      	ldr	r3, [pc, #484]	@ (800293c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275a:	f112 0a01 	adds.w	sl, r2, #1
 800275e:	f143 0b00 	adc.w	fp, r3, #0
 8002762:	4b76      	ldr	r3, [pc, #472]	@ (800293c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002764:	e9c3 ab00 	strd	sl, fp, [r3]
			// Stop motor if emergency
			if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8002768:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800276c:	4874      	ldr	r0, [pc, #464]	@ (8002940 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800276e:	f003 fdf3 	bl	8006358 <HAL_GPIO_ReadPin>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d112      	bne.n	800279e <HAL_TIM_PeriodElapsedCallback+0x14a>
				repeat_cheack++;
 8002778:	4b70      	ldr	r3, [pc, #448]	@ (800293c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800277a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277e:	f112 0801 	adds.w	r8, r2, #1
 8002782:	f143 0900 	adc.w	r9, r3, #0
 8002786:	4b6d      	ldr	r3, [pc, #436]	@ (800293c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002788:	e9c3 8900 	strd	r8, r9, [r3]
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 800278c:	2300      	movs	r3, #0
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2302      	movs	r3, #2
 8002792:	4a63      	ldr	r2, [pc, #396]	@ (8002920 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002794:	2100      	movs	r1, #0
 8002796:	4863      	ldr	r0, [pc, #396]	@ (8002924 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002798:	f000 fb08 	bl	8002dac <Update_pwm>
					homing_ts++;
				}
			}
		}
	}
}
 800279c:	e0ab      	b.n	80028f6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
			else if(wait_command){
 800279e:	4b69      	ldr	r3, [pc, #420]	@ (8002944 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d038      	beq.n	8002818 <HAL_TIM_PeriodElapsedCallback+0x1c4>
				Update_joy(&joy);
 80027a6:	4868      	ldr	r0, [pc, #416]	@ (8002948 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80027a8:	f7ff f9ba 	bl	8001b20 <Update_joy>
				if(!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 80027ac:	4b66      	ldr	r3, [pc, #408]	@ (8002948 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d115      	bne.n	80027e0 <HAL_TIM_PeriodElapsedCallback+0x18c>
 80027b4:	4b64      	ldr	r3, [pc, #400]	@ (8002948 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80027b6:	785b      	ldrb	r3, [r3, #1]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d011      	beq.n	80027e0 <HAL_TIM_PeriodElapsedCallback+0x18c>
 80027bc:	4b62      	ldr	r3, [pc, #392]	@ (8002948 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80027be:	789b      	ldrb	r3, [r3, #2]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00d      	beq.n	80027e0 <HAL_TIM_PeriodElapsedCallback+0x18c>
 80027c4:	4b60      	ldr	r3, [pc, #384]	@ (8002948 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80027c6:	78db      	ldrb	r3, [r3, #3]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d009      	beq.n	80027e0 <HAL_TIM_PeriodElapsedCallback+0x18c>
					mode = 0;
 80027cc:	4b56      	ldr	r3, [pc, #344]	@ (8002928 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
					is_home = 0;
 80027d2:	4b5e      	ldr	r3, [pc, #376]	@ (800294c <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
					wait_command = 0;
 80027d8:	4b5a      	ldr	r3, [pc, #360]	@ (8002944 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e08a      	b.n	80028f6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
				else if(joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 80027e0:	4b59      	ldr	r3, [pc, #356]	@ (8002948 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8086 	beq.w	80028f6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
 80027ea:	4b57      	ldr	r3, [pc, #348]	@ (8002948 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80027ec:	785b      	ldrb	r3, [r3, #1]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 8081 	bne.w	80028f6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
 80027f4:	4b54      	ldr	r3, [pc, #336]	@ (8002948 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80027f6:	789b      	ldrb	r3, [r3, #2]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d07c      	beq.n	80028f6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
 80027fc:	4b52      	ldr	r3, [pc, #328]	@ (8002948 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80027fe:	78db      	ldrb	r3, [r3, #3]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d078      	beq.n	80028f6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
					mode = 1;
 8002804:	4b48      	ldr	r3, [pc, #288]	@ (8002928 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
					is_home = 0;
 800280a:	4b50      	ldr	r3, [pc, #320]	@ (800294c <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
					wait_command = 0;
 8002810:	4b4c      	ldr	r3, [pc, #304]	@ (8002944 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
}
 8002816:	e06e      	b.n	80028f6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8002818:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800281c:	4848      	ldr	r0, [pc, #288]	@ (8002940 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800281e:	f003 fd9b 	bl	8006358 <HAL_GPIO_ReadPin>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d066      	beq.n	80028f6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8002828:	2300      	movs	r3, #0
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2302      	movs	r3, #2
 800282e:	4a3c      	ldr	r2, [pc, #240]	@ (8002920 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002830:	2100      	movs	r1, #0
 8002832:	483c      	ldr	r0, [pc, #240]	@ (8002924 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002834:	f000 faba 	bl	8002dac <Update_pwm>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 8002838:	2200      	movs	r2, #0
 800283a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800283e:	4838      	ldr	r0, [pc, #224]	@ (8002920 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002840:	f003 fda2 	bl	8006388 <HAL_GPIO_WritePin>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6)){
 8002844:	2140      	movs	r1, #64	@ 0x40
 8002846:	4836      	ldr	r0, [pc, #216]	@ (8002920 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002848:	f003 fd86 	bl	8006358 <HAL_GPIO_ReadPin>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d010      	beq.n	8002874 <HAL_TIM_PeriodElapsedCallback+0x220>
					if(homing_first == 1){
 8002852:	4b3f      	ldr	r3, [pc, #252]	@ (8002950 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d14d      	bne.n	80028f6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
						homing = 1;
 800285a:	4b2f      	ldr	r3, [pc, #188]	@ (8002918 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -100);
 8002860:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2302      	movs	r3, #2
 8002868:	4a2d      	ldr	r2, [pc, #180]	@ (8002920 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800286a:	2100      	movs	r1, #0
 800286c:	482d      	ldr	r0, [pc, #180]	@ (8002924 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800286e:	f000 fa9d 	bl	8002dac <Update_pwm>
}
 8002872:	e040      	b.n	80028f6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
				else if(homing_first == 0){
 8002874:	4b36      	ldr	r3, [pc, #216]	@ (8002950 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d13c      	bne.n	80028f6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
					if (homing_ts == 8000){
 800287c:	4b35      	ldr	r3, [pc, #212]	@ (8002954 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	f5a2 51fa 	sub.w	r1, r2, #8000	@ 0x1f40
 8002886:	430b      	orrs	r3, r1
 8002888:	d10b      	bne.n	80028a2 <HAL_TIM_PeriodElapsedCallback+0x24e>
						homing_second = 1;
 800288a:	4b33      	ldr	r3, [pc, #204]	@ (8002958 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8002890:	2300      	movs	r3, #0
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	2302      	movs	r3, #2
 8002896:	4a22      	ldr	r2, [pc, #136]	@ (8002920 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002898:	2100      	movs	r1, #0
 800289a:	4822      	ldr	r0, [pc, #136]	@ (8002924 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800289c:	f000 fa86 	bl	8002dac <Update_pwm>
 80028a0:	e01f      	b.n	80028e2 <HAL_TIM_PeriodElapsedCallback+0x28e>
					}else if(homing_ts == 18000){
 80028a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002954 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	492c      	ldr	r1, [pc, #176]	@ (800295c <HAL_TIM_PeriodElapsedCallback+0x308>)
 80028aa:	4411      	add	r1, r2
 80028ac:	430b      	orrs	r3, r1
 80028ae:	d109      	bne.n	80028c4 <HAL_TIM_PeriodElapsedCallback+0x270>
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -80);
 80028b0:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2302      	movs	r3, #2
 80028b8:	4a19      	ldr	r2, [pc, #100]	@ (8002920 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80028ba:	2100      	movs	r1, #0
 80028bc:	4819      	ldr	r0, [pc, #100]	@ (8002924 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80028be:	f000 fa75 	bl	8002dac <Update_pwm>
 80028c2:	e00e      	b.n	80028e2 <HAL_TIM_PeriodElapsedCallback+0x28e>
					}else if(homing_ts == 4000){
 80028c4:	4b23      	ldr	r3, [pc, #140]	@ (8002954 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	f5a2 617a 	sub.w	r1, r2, #4000	@ 0xfa0
 80028ce:	430b      	orrs	r3, r1
 80028d0:	d107      	bne.n	80028e2 <HAL_TIM_PeriodElapsedCallback+0x28e>
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 200);
 80028d2:	23c8      	movs	r3, #200	@ 0xc8
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2302      	movs	r3, #2
 80028d8:	4a11      	ldr	r2, [pc, #68]	@ (8002920 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80028da:	2100      	movs	r1, #0
 80028dc:	4811      	ldr	r0, [pc, #68]	@ (8002924 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80028de:	f000 fa65 	bl	8002dac <Update_pwm>
					homing_ts++;
 80028e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002954 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	1c54      	adds	r4, r2, #1
 80028ea:	f143 0500 	adc.w	r5, r3, #0
 80028ee:	4b19      	ldr	r3, [pc, #100]	@ (8002954 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80028f0:	e9c3 4500 	strd	r4, r5, [r3]
}
 80028f4:	e7ff      	b.n	80028f6 <HAL_TIM_PeriodElapsedCallback+0x2a2>
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002900:	20000ad0 	.word	0x20000ad0
 8002904:	20000e0c 	.word	0x20000e0c
 8002908:	20000938 	.word	0x20000938
 800290c:	20000a04 	.word	0x20000a04
 8002910:	20001088 	.word	0x20001088
 8002914:	20000fb8 	.word	0x20000fb8
 8002918:	20000fb1 	.word	0x20000fb1
 800291c:	43fa0000 	.word	0x43fa0000
 8002920:	48000800 	.word	0x48000800
 8002924:	2000086c 	.word	0x2000086c
 8002928:	20000fb4 	.word	0x20000fb4
 800292c:	2000110c 	.word	0x2000110c
 8002930:	20000e08 	.word	0x20000e08
 8002934:	20000e04 	.word	0x20000e04
 8002938:	20001130 	.word	0x20001130
 800293c:	20000df8 	.word	0x20000df8
 8002940:	48000400 	.word	0x48000400
 8002944:	20000fb3 	.word	0x20000fb3
 8002948:	20000f9c 	.word	0x20000f9c
 800294c:	20000fb2 	.word	0x20000fb2
 8002950:	20000269 	.word	0x20000269
 8002954:	20000fa8 	.word	0x20000fa8
 8002958:	20000fb0 	.word	0x20000fb0
 800295c:	ffffb9b0 	.word	0xffffb9b0

08002960 <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af02      	add	r7, sp, #8
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15){
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002970:	d10d      	bne.n	800298e <HAL_GPIO_EXTI_Callback+0x2e>
		// Emergency switch interrupted
		// Stop motor
		Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8002972:	2300      	movs	r3, #0
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	2302      	movs	r3, #2
 8002978:	4a2f      	ldr	r2, [pc, #188]	@ (8002a38 <HAL_GPIO_EXTI_Callback+0xd8>)
 800297a:	2100      	movs	r1, #0
 800297c:	482f      	ldr	r0, [pc, #188]	@ (8002a3c <HAL_GPIO_EXTI_Callback+0xdc>)
 800297e:	f000 fa15 	bl	8002dac <Update_pwm>
		// Emergency light enable
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8002982:	2201      	movs	r2, #1
 8002984:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002988:	482b      	ldr	r0, [pc, #172]	@ (8002a38 <HAL_GPIO_EXTI_Callback+0xd8>)
 800298a:	f003 fcfd 	bl	8006388 <HAL_GPIO_WritePin>
//		mode = 2;
	}
	if(GPIO_Pin == GPIO_PIN_12){
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002994:	d14d      	bne.n	8002a32 <HAL_GPIO_EXTI_Callback+0xd2>
		// Proximity interrupted
		limitswitch_test++;
 8002996:	4b2a      	ldr	r3, [pc, #168]	@ (8002a40 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3301      	adds	r3, #1
 800299c:	4a28      	ldr	r2, [pc, #160]	@ (8002a40 <HAL_GPIO_EXTI_Callback+0xe0>)
 800299e:	6013      	str	r3, [r2, #0]
		if(homing == 1){
 80029a0:	4b28      	ldr	r3, [pc, #160]	@ (8002a44 <HAL_GPIO_EXTI_Callback+0xe4>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d135      	bne.n	8002a14 <HAL_GPIO_EXTI_Callback+0xb4>
			// If homing
			if(homing_first == 1){
 80029a8:	4b27      	ldr	r3, [pc, #156]	@ (8002a48 <HAL_GPIO_EXTI_Callback+0xe8>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d10b      	bne.n	80029c8 <HAL_GPIO_EXTI_Callback+0x68>
				// First time stop
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 80029b0:	2300      	movs	r3, #0
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2302      	movs	r3, #2
 80029b6:	4a20      	ldr	r2, [pc, #128]	@ (8002a38 <HAL_GPIO_EXTI_Callback+0xd8>)
 80029b8:	2100      	movs	r1, #0
 80029ba:	4820      	ldr	r0, [pc, #128]	@ (8002a3c <HAL_GPIO_EXTI_Callback+0xdc>)
 80029bc:	f000 f9f6 	bl	8002dac <Update_pwm>
				homing_first = 0;
 80029c0:	4b21      	ldr	r3, [pc, #132]	@ (8002a48 <HAL_GPIO_EXTI_Callback+0xe8>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
				return;
 80029c6:	e034      	b.n	8002a32 <HAL_GPIO_EXTI_Callback+0xd2>
			}
			else if(homing_second == 1){
 80029c8:	4b20      	ldr	r3, [pc, #128]	@ (8002a4c <HAL_GPIO_EXTI_Callback+0xec>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d130      	bne.n	8002a32 <HAL_GPIO_EXTI_Callback+0xd2>
				// Second time stop and reset variables.
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 80029d0:	2300      	movs	r3, #0
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2302      	movs	r3, #2
 80029d6:	4a18      	ldr	r2, [pc, #96]	@ (8002a38 <HAL_GPIO_EXTI_Callback+0xd8>)
 80029d8:	2100      	movs	r1, #0
 80029da:	4818      	ldr	r0, [pc, #96]	@ (8002a3c <HAL_GPIO_EXTI_Callback+0xdc>)
 80029dc:	f000 f9e6 	bl	8002dac <Update_pwm>
				homing_ts = 0;
 80029e0:	491b      	ldr	r1, [pc, #108]	@ (8002a50 <HAL_GPIO_EXTI_Callback+0xf0>)
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9c1 2300 	strd	r2, r3, [r1]
				is_home = 1;
 80029ee:	4b19      	ldr	r3, [pc, #100]	@ (8002a54 <HAL_GPIO_EXTI_Callback+0xf4>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
				homing_second = 0;
 80029f4:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <HAL_GPIO_EXTI_Callback+0xec>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
				homing_first = 1;
 80029fa:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <HAL_GPIO_EXTI_Callback+0xe8>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	701a      	strb	r2, [r3, #0]
				homing = 0;
 8002a00:	4b10      	ldr	r3, [pc, #64]	@ (8002a44 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
				wait_command = 1;
 8002a06:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
				Reset_qei(&encoder);
 8002a0c:	4813      	ldr	r0, [pc, #76]	@ (8002a5c <HAL_GPIO_EXTI_Callback+0xfc>)
 8002a0e:	f000 fccb 	bl	80033a8 <Reset_qei>
 8002a12:	e00e      	b.n	8002a32 <HAL_GPIO_EXTI_Callback+0xd2>
			}
		}
		else{
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8002a14:	2300      	movs	r3, #0
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	2302      	movs	r3, #2
 8002a1a:	4a07      	ldr	r2, [pc, #28]	@ (8002a38 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4807      	ldr	r0, [pc, #28]	@ (8002a3c <HAL_GPIO_EXTI_Callback+0xdc>)
 8002a20:	f000 f9c4 	bl	8002dac <Update_pwm>
			mode = 2;
 8002a24:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <HAL_GPIO_EXTI_Callback+0x100>)
 8002a26:	2202      	movs	r2, #2
 8002a28:	701a      	strb	r2, [r3, #0]
			homing_first = 0;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	@ (8002a48 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
			return;
 8002a30:	bf00      	nop
		}
	}
}
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	48000800 	.word	0x48000800
 8002a3c:	2000086c 	.word	0x2000086c
 8002a40:	20000e00 	.word	0x20000e00
 8002a44:	20000fb1 	.word	0x20000fb1
 8002a48:	20000269 	.word	0x20000269
 8002a4c:	20000fb0 	.word	0x20000fb0
 8002a50:	20000fa8 	.word	0x20000fa8
 8002a54:	20000fb2 	.word	0x20000fb2
 8002a58:	20000fb3 	.word	0x20000fb3
 8002a5c:	20001088 	.word	0x20001088
 8002a60:	20000fb4 	.word	0x20000fb4

08002a64 <Update_velocity_control>:
// Torque control update
void Update_torque_control(float32_t s){

}
// Velocity control update
void Update_velocity_control(float32_t s){
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	ed87 0a01 	vstr	s0, [r7, #4]
	//input is pulse unit
	v_e = s - Get_mmps(&encoder);
 8002a6e:	480f      	ldr	r0, [pc, #60]	@ (8002aac <Update_velocity_control+0x48>)
 8002a70:	f000 fccb 	bl	800340a <Get_mmps>
 8002a74:	eeb0 7a40 	vmov.f32	s14, s0
 8002a78:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a80:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <Update_velocity_control+0x4c>)
 8002a82:	edc3 7a00 	vstr	s15, [r3]
	v_output = Update_pid(&v_pid, v_e, 900.0, 1000.0);
 8002a86:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <Update_velocity_control+0x4c>)
 8002a88:	edd3 7a00 	vldr	s15, [r3]
 8002a8c:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8002ab4 <Update_velocity_control+0x50>
 8002a90:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8002ab8 <Update_velocity_control+0x54>
 8002a94:	eeb0 0a67 	vmov.f32	s0, s15
 8002a98:	4808      	ldr	r0, [pc, #32]	@ (8002abc <Update_velocity_control+0x58>)
 8002a9a:	f000 f83f 	bl	8002b1c <Update_pid>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4a07      	ldr	r2, [pc, #28]	@ (8002ac0 <Update_velocity_control+0x5c>)
 8002aa2:	6013      	str	r3, [r2, #0]
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20001088 	.word	0x20001088
 8002ab0:	20001108 	.word	0x20001108
 8002ab4:	447a0000 	.word	0x447a0000
 8002ab8:	44610000 	.word	0x44610000
 8002abc:	200010e8 	.word	0x200010e8
 8002ac0:	2000110c 	.word	0x2000110c

08002ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac8:	b672      	cpsid	i
}
 8002aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002acc:	bf00      	nop
 8002ace:	e7fd      	b.n	8002acc <Error_Handler+0x8>

08002ad0 <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6178      	str	r0, [r7, #20]
 8002ad8:	ed87 0a04 	vstr	s0, [r7, #16]
 8002adc:	edc7 0a03 	vstr	s1, [r7, #12]
 8002ae0:	ed87 1a02 	vstr	s2, [r7, #8]
 8002ae4:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 8002b00:	6979      	ldr	r1, [r7, #20]
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 8002b1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b20:	b08a      	sub	sp, #40	@ 0x28
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b2a:	edc7 0a01 	vstr	s1, [r7, #4]
 8002b2e:	ed87 1a00 	vstr	s2, [r7]
//	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b44:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 8002b48:	4b96      	ldr	r3, [pc, #600]	@ (8002da4 <Update_pid+0x288>)
 8002b4a:	edd3 7a00 	vldr	s15, [r3]
 8002b4e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b5c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b6a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt / 2.0)*(e_n + e_n_1)) + y_n_1;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7e:	ee17 0a90 	vmov	r0, s15
 8002b82:	f7fd fcad 	bl	80004e0 <__aeabi_f2d>
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b8e:	f7fd fe29 	bl	80007e4 <__aeabi_ddiv>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4690      	mov	r8, r2
 8002b98:	4699      	mov	r9, r3
 8002b9a:	4b82      	ldr	r3, [pc, #520]	@ (8002da4 <Update_pid+0x288>)
 8002b9c:	ed93 7a00 	vldr	s14, [r3]
 8002ba0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba8:	ee17 0a90 	vmov	r0, s15
 8002bac:	f7fd fc98 	bl	80004e0 <__aeabi_f2d>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4640      	mov	r0, r8
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	f7fd fcea 	bl	8000590 <__aeabi_dmul>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4690      	mov	r8, r2
 8002bc2:	4699      	mov	r9, r3
 8002bc4:	4b78      	ldr	r3, [pc, #480]	@ (8002da8 <Update_pid+0x28c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fc89 	bl	80004e0 <__aeabi_f2d>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4640      	mov	r0, r8
 8002bd4:	4649      	mov	r1, r9
 8002bd6:	f7fd fb25 	bl	8000224 <__adddf3>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	f7fd ffb7 	bl	8000b54 <__aeabi_d2f>
 8002be6:	4603      	mov	r3, r0
 8002be8:	623b      	str	r3, [r7, #32]

	if(pid -> ki == 0){
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bf0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf8:	d102      	bne.n	8002c00 <Update_pid+0xe4>
		i_term = 0;
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0e:	d102      	bne.n	8002c16 <Update_pid+0xfa>
		d_term = 0;
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 8002c16:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c1a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c22:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2a:	ee17 0a90 	vmov	r0, s15
 8002c2e:	f7fd fc57 	bl	80004e0 <__aeabi_f2d>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	68f9      	ldr	r1, [r7, #12]
 8002c38:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t is_sat = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fd fc4a 	bl	80004e0 <__aeabi_f2d>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4640      	mov	r0, r8
 8002c52:	4649      	mov	r1, r9
 8002c54:	f7fd ff2c 	bl	8000ab0 <__aeabi_dcmpgt>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <Update_pid+0x148>
		is_sat = 1;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	77fb      	strb	r3, [r7, #31]
 8002c62:	e016      	b.n	8002c92 <Update_pid+0x176>
	}
	else if(pid -> y_n < -(pid_sat)){
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8002c6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c6e:	eef1 7a67 	vneg.f32	s15, s15
 8002c72:	ee17 3a90 	vmov	r3, s15
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc32 	bl	80004e0 <__aeabi_f2d>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4640      	mov	r0, r8
 8002c82:	4649      	mov	r1, r9
 8002c84:	f7fd fef6 	bl	8000a74 <__aeabi_dcmplt>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <Update_pid+0x176>
		is_sat = 1;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 8002c92:	69b8      	ldr	r0, [r7, #24]
 8002c94:	f7fd fc24 	bl	80004e0 <__aeabi_f2d>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c9e:	f7fd fc77 	bl	8000590 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4690      	mov	r8, r2
 8002ca8:	4699      	mov	r9, r3
 8002caa:	69b8      	ldr	r0, [r7, #24]
 8002cac:	f7fd fc18 	bl	80004e0 <__aeabi_f2d>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cb6:	f7fd fc6b 	bl	8000590 <__aeabi_dmul>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4614      	mov	r4, r2
 8002cc0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002cc4:	4622      	mov	r2, r4
 8002cc6:	462b      	mov	r3, r5
 8002cc8:	4640      	mov	r0, r8
 8002cca:	4649      	mov	r1, r9
 8002ccc:	f7fd fec8 	bl	8000a60 <__aeabi_dcmpeq>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d011      	beq.n	8002cfa <Update_pid+0x1de>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 8002cd6:	7ffb      	ldrb	r3, [r7, #31]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d10e      	bne.n	8002cfa <Update_pid+0x1de>
			pid -> y_n = p_term + d_term;
 8002cdc:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ce0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce8:	ee17 0a90 	vmov	r0, s15
 8002cec:	f7fd fbf8 	bl	80004e0 <__aeabi_f2d>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	68f9      	ldr	r1, [r7, #12]
 8002cf6:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	// Plant saturation
	if(pid -> y_n > plant_sat){
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002d00:	6838      	ldr	r0, [r7, #0]
 8002d02:	f7fd fbed 	bl	80004e0 <__aeabi_f2d>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	f7fd fecf 	bl	8000ab0 <__aeabi_dcmpgt>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <Update_pid+0x20e>
		pid -> y_n = plant_sat;
 8002d18:	6838      	ldr	r0, [r7, #0]
 8002d1a:	f7fd fbe1 	bl	80004e0 <__aeabi_f2d>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	68f9      	ldr	r1, [r7, #12]
 8002d24:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002d28:	e022      	b.n	8002d70 <Update_pid+0x254>
	}
	else if(pid -> y_n < -(plant_sat)){
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002d30:	edd7 7a00 	vldr	s15, [r7]
 8002d34:	eef1 7a67 	vneg.f32	s15, s15
 8002d38:	ee17 3a90 	vmov	r3, s15
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fbcf 	bl	80004e0 <__aeabi_f2d>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4620      	mov	r0, r4
 8002d48:	4629      	mov	r1, r5
 8002d4a:	f7fd fe93 	bl	8000a74 <__aeabi_dcmplt>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00d      	beq.n	8002d70 <Update_pid+0x254>
		pid -> y_n = (-(plant_sat));
 8002d54:	edd7 7a00 	vldr	s15, [r7]
 8002d58:	eef1 7a67 	vneg.f32	s15, s15
 8002d5c:	ee17 3a90 	vmov	r3, s15
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd fbbd 	bl	80004e0 <__aeabi_f2d>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	68f9      	ldr	r1, [r7, #12]
 8002d6c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f7fd feeb 	bl	8000b54 <__aeabi_d2f>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4a09      	ldr	r2, [pc, #36]	@ (8002da8 <Update_pid+0x28c>)
 8002d82:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 8002d84:	4a07      	ldr	r2, [pc, #28]	@ (8002da4 <Update_pid+0x288>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	6013      	str	r3, [r2, #0]
	return pid -> y_n;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	f7fd fe96 	bl	8000ac4 <__aeabi_d2iz>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3728      	adds	r7, #40	@ 0x28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002da4:	20001138 	.word	0x20001138
 8002da8:	2000113c 	.word	0x2000113c

08002dac <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 8002dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db0:	b08b      	sub	sp, #44	@ 0x2c
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6278      	str	r0, [r7, #36]	@ 0x24
 8002db6:	61fa      	str	r2, [r7, #28]
 8002db8:	461a      	mov	r2, r3
 8002dba:	460b      	mov	r3, r1
 8002dbc:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 8002dc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d111      	bne.n	8002dec <Update_pwm+0x40>
 8002dc8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002dca:	f7fd fb77 	bl	80004bc <__aeabi_i2d>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	613a      	str	r2, [r7, #16]
 8002dd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	681c      	ldr	r4, [r3, #0]
 8002dde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002de2:	f7fd fe97 	bl	8000b14 <__aeabi_d2uiz>
 8002de6:	4603      	mov	r3, r0
 8002de8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002dea:	e061      	b.n	8002eb0 <Update_pwm+0x104>
 8002dec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d111      	bne.n	8002e16 <Update_pwm+0x6a>
 8002df2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002df4:	f7fd fb62 	bl	80004bc <__aeabi_i2d>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	60ba      	str	r2, [r7, #8]
 8002dfe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	681c      	ldr	r4, [r3, #0]
 8002e08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e0c:	f7fd fe82 	bl	8000b14 <__aeabi_d2uiz>
 8002e10:	4603      	mov	r3, r0
 8002e12:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002e14:	e04c      	b.n	8002eb0 <Update_pwm+0x104>
 8002e16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d111      	bne.n	8002e40 <Update_pwm+0x94>
 8002e1c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002e1e:	f7fd fb4d 	bl	80004bc <__aeabi_i2d>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	603a      	str	r2, [r7, #0]
 8002e28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	681c      	ldr	r4, [r3, #0]
 8002e32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e36:	f7fd fe6d 	bl	8000b14 <__aeabi_d2uiz>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002e3e:	e037      	b.n	8002eb0 <Update_pwm+0x104>
 8002e40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d110      	bne.n	8002e68 <Update_pwm+0xbc>
 8002e46:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002e48:	f7fd fb38 	bl	80004bc <__aeabi_i2d>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4615      	mov	r5, r2
 8002e52:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	681c      	ldr	r4, [r3, #0]
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	4631      	mov	r1, r6
 8002e5e:	f7fd fe59 	bl	8000b14 <__aeabi_d2uiz>
 8002e62:	4603      	mov	r3, r0
 8002e64:	6423      	str	r3, [r4, #64]	@ 0x40
 8002e66:	e023      	b.n	8002eb0 <Update_pwm+0x104>
 8002e68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002e6a:	2b10      	cmp	r3, #16
 8002e6c:	d110      	bne.n	8002e90 <Update_pwm+0xe4>
 8002e6e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002e70:	f7fd fb24 	bl	80004bc <__aeabi_i2d>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4692      	mov	sl, r2
 8002e7a:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	681c      	ldr	r4, [r3, #0]
 8002e82:	4650      	mov	r0, sl
 8002e84:	4659      	mov	r1, fp
 8002e86:	f7fd fe45 	bl	8000b14 <__aeabi_d2uiz>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002e8e:	e00f      	b.n	8002eb0 <Update_pwm+0x104>
 8002e90:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002e92:	f7fd fb13 	bl	80004bc <__aeabi_i2d>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4690      	mov	r8, r2
 8002e9c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea2:	681c      	ldr	r4, [r3, #0]
 8002ea4:	4640      	mov	r0, r8
 8002ea6:	4649      	mov	r1, r9
 8002ea8:	f7fd fe34 	bl	8000b14 <__aeabi_d2uiz>
 8002eac:	4603      	mov	r3, r0
 8002eae:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 8002eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	da06      	bge.n	8002ec4 <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 8002eb6:	8c3b      	ldrh	r3, [r7, #32]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	4619      	mov	r1, r3
 8002ebc:	69f8      	ldr	r0, [r7, #28]
 8002ebe:	f003 fa63 	bl	8006388 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 8002ec2:	e005      	b.n	8002ed0 <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 8002ec4:	8c3b      	ldrh	r3, [r7, #32]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4619      	mov	r1, r3
 8002eca:	69f8      	ldr	r0, [r7, #28]
 8002ecc:	f003 fa5c 	bl	8006388 <HAL_GPIO_WritePin>
}
 8002ed0:	bf00      	nop
 8002ed2:	372c      	adds	r7, #44	@ 0x2c
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002eda <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 8002eda:	b480      	push	{r7}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8002f0c:	68f9      	ldr	r1, [r7, #12]
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 8002f32:	68f9      	ldr	r1, [r7, #12]
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0.0;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps = 0.0;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> mmps = 0.0;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	641a      	str	r2, [r3, #64]	@ 0x40
	qei -> radpss = 0.0;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> rpms = 0.0;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	659a      	str	r2, [r3, #88]	@ 0x58
	qei -> mmpss = 0.0;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	65da      	str	r2, [r3, #92]	@ 0x5c


}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	0000      	movs	r0, r0
	...

08002f80 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 8002f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	0fd9      	lsrs	r1, r3, #31
 8002fb0:	440b      	add	r3, r1
 8002fb2:	105b      	asrs	r3, r3, #1
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	dd06      	ble.n	8002fc6 <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	1ad2      	subs	r2, r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	425b      	negs	r3, r3
 8002fd0:	0fd9      	lsrs	r1, r3, #31
 8002fd2:	440b      	add	r3, r1
 8002fd4:	105b      	asrs	r3, r3, #1
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	da06      	bge.n	8002fe8 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	441a      	add	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	615a      	str	r2, [r3, #20]
	}
	// Update velocity at difference unit
	qei -> pps = (float)qei -> diff_counter_value * (float)qei -> freq;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	ee07 3a90 	vmov	s15, r3
 8002ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	ee07 3a90 	vmov	s15, r3
 8002ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003004:	ee17 0a90 	vmov	r0, s15
 8003008:	f7fd fa6a 	bl	80004e0 <__aeabi_f2d>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> radps = qei -> pps * 2.0 * M_PI / (float)(qei -> ppr);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	f7fd f900 	bl	8000224 <__adddf3>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	a3da      	add	r3, pc, #872	@ (adr r3, 8003398 <Update_qei+0x418>)
 800302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003032:	f7fd faad 	bl	8000590 <__aeabi_dmul>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4692      	mov	sl, r2
 800303c:	469b      	mov	fp, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800304a:	ee17 0a90 	vmov	r0, s15
 800304e:	f7fd fa47 	bl	80004e0 <__aeabi_f2d>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4650      	mov	r0, sl
 8003058:	4659      	mov	r1, fp
 800305a:	f7fd fbc3 	bl	80007e4 <__aeabi_ddiv>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4610      	mov	r0, r2
 8003064:	4619      	mov	r1, r3
 8003066:	f7fd fd75 	bl	8000b54 <__aeabi_d2f>
 800306a:	4602      	mov	r2, r0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	4bc9      	ldr	r3, [pc, #804]	@ (80033a0 <Update_qei+0x420>)
 800307c:	f7fd fa88 	bl	8000590 <__aeabi_dmul>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4692      	mov	sl, r2
 8003086:	469b      	mov	fp, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003094:	ee17 0a90 	vmov	r0, s15
 8003098:	f7fd fa22 	bl	80004e0 <__aeabi_f2d>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4650      	mov	r0, sl
 80030a2:	4659      	mov	r1, fp
 80030a4:	f7fd fb9e 	bl	80007e4 <__aeabi_ddiv>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	f7fd fd50 	bl	8000b54 <__aeabi_d2f>
 80030b4:	4602      	mov	r2, r0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> mmps = qei -> pps * 16.0 / (float)(qei -> ppr);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	4bb7      	ldr	r3, [pc, #732]	@ (80033a4 <Update_qei+0x424>)
 80030c6:	f7fd fa63 	bl	8000590 <__aeabi_dmul>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4692      	mov	sl, r2
 80030d0:	469b      	mov	fp, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030de:	ee17 0a90 	vmov	r0, s15
 80030e2:	f7fd f9fd 	bl	80004e0 <__aeabi_f2d>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4650      	mov	r0, sl
 80030ec:	4659      	mov	r1, fp
 80030ee:	f7fd fb79 	bl	80007e4 <__aeabi_ddiv>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	f7fd fd2b 	bl	8000b54 <__aeabi_d2f>
 80030fe:	4602      	mov	r2, r0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	641a      	str	r2, [r3, #64]	@ 0x40

	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	6949      	ldr	r1, [r1, #20]
 800310e:	17c8      	asrs	r0, r1, #31
 8003110:	460c      	mov	r4, r1
 8003112:	4605      	mov	r5, r0
 8003114:	eb12 0804 	adds.w	r8, r2, r4
 8003118:	eb43 0905 	adc.w	r9, r3, r5
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	e9c3 8906 	strd	r8, r9, [r3, #24]
	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd f9da 	bl	80004e0 <__aeabi_f2d>
 800312c:	4604      	mov	r4, r0
 800312e:	460d      	mov	r5, r1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	ee07 3a90 	vmov	s15, r3
 8003138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800313c:	ee17 0a90 	vmov	r0, s15
 8003140:	f7fd f9ce 	bl	80004e0 <__aeabi_f2d>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	f7fd f86c 	bl	8000224 <__adddf3>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	a390      	add	r3, pc, #576	@ (adr r3, 8003398 <Update_qei+0x418>)
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f7fd fa19 	bl	8000590 <__aeabi_dmul>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4690      	mov	r8, r2
 8003164:	4699      	mov	r9, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003172:	ee17 0a90 	vmov	r0, s15
 8003176:	f7fd f9b3 	bl	80004e0 <__aeabi_f2d>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4640      	mov	r0, r8
 8003180:	4649      	mov	r1, r9
 8003182:	f7fd fb2f 	bl	80007e4 <__aeabi_ddiv>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4620      	mov	r0, r4
 800318c:	4629      	mov	r1, r5
 800318e:	f7fd f849 	bl	8000224 <__adddf3>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	f7fd fcdb 	bl	8000b54 <__aeabi_d2f>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	ed93 7a08 	vldr	s14, [r3, #32]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031c2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80031c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	edc3 7a08 	vstr	s15, [r3, #32]
	qei -> mm += (float)qei -> diff_counter_value * 16.0 / (float)(qei -> ppr); // for lead 16 mm.
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd f983 	bl	80004e0 <__aeabi_f2d>
 80031da:	4604      	mov	r4, r0
 80031dc:	460d      	mov	r5, r1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	ee07 3a90 	vmov	s15, r3
 80031e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ea:	ee17 0a90 	vmov	r0, s15
 80031ee:	f7fd f977 	bl	80004e0 <__aeabi_f2d>
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	4b6b      	ldr	r3, [pc, #428]	@ (80033a4 <Update_qei+0x424>)
 80031f8:	f7fd f9ca 	bl	8000590 <__aeabi_dmul>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4690      	mov	r8, r2
 8003202:	4699      	mov	r9, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003210:	ee17 0a90 	vmov	r0, s15
 8003214:	f7fd f964 	bl	80004e0 <__aeabi_f2d>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4640      	mov	r0, r8
 800321e:	4649      	mov	r1, r9
 8003220:	f7fd fae0 	bl	80007e4 <__aeabi_ddiv>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4620      	mov	r0, r4
 800322a:	4629      	mov	r1, r5
 800322c:	f7fc fffa 	bl	8000224 <__adddf3>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	f7fd fc8c 	bl	8000b54 <__aeabi_d2f>
 800323c:	4602      	mov	r2, r0
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	629a      	str	r2, [r3, #40]	@ 0x28

	// Update acceleration
	qei -> velocity_value[NEW] = qei -> pps;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	f7fd fc82 	bl	8000b54 <__aeabi_d2f>
 8003250:	4602      	mov	r2, r0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	645a      	str	r2, [r3, #68]	@ 0x44
	qei -> diff_velocity_value = qei -> velocity_value[NEW] - qei -> velocity_value[OLD];
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003262:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	qei -> ppss = qei -> diff_velocity_value * (float)qei -> freq;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800327e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	qei -> radpss = qei -> ppss * 2.0 * M_PI / (float)(qei -> ppr);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800328c:	4618      	mov	r0, r3
 800328e:	f7fd f927 	bl	80004e0 <__aeabi_f2d>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	f7fc ffc5 	bl	8000224 <__adddf3>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4610      	mov	r0, r2
 80032a0:	4619      	mov	r1, r3
 80032a2:	a33d      	add	r3, pc, #244	@ (adr r3, 8003398 <Update_qei+0x418>)
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	f7fd f972 	bl	8000590 <__aeabi_dmul>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4614      	mov	r4, r2
 80032b2:	461d      	mov	r5, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032c0:	ee17 0a90 	vmov	r0, s15
 80032c4:	f7fd f90c 	bl	80004e0 <__aeabi_f2d>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4620      	mov	r0, r4
 80032ce:	4629      	mov	r1, r5
 80032d0:	f7fd fa88 	bl	80007e4 <__aeabi_ddiv>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4610      	mov	r0, r2
 80032da:	4619      	mov	r1, r3
 80032dc:	f7fd fc3a 	bl	8000b54 <__aeabi_d2f>
 80032e0:	4602      	mov	r2, r0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> rpms = qei -> ppss * 60.0 / (float)(qei -> ppr);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd f8f8 	bl	80004e0 <__aeabi_f2d>
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	4b2a      	ldr	r3, [pc, #168]	@ (80033a0 <Update_qei+0x420>)
 80032f6:	f7fd f94b 	bl	8000590 <__aeabi_dmul>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4614      	mov	r4, r2
 8003300:	461d      	mov	r5, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800330e:	ee17 0a90 	vmov	r0, s15
 8003312:	f7fd f8e5 	bl	80004e0 <__aeabi_f2d>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4620      	mov	r0, r4
 800331c:	4629      	mov	r1, r5
 800331e:	f7fd fa61 	bl	80007e4 <__aeabi_ddiv>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4610      	mov	r0, r2
 8003328:	4619      	mov	r1, r3
 800332a:	f7fd fc13 	bl	8000b54 <__aeabi_d2f>
 800332e:	4602      	mov	r2, r0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	659a      	str	r2, [r3, #88]	@ 0x58
	qei -> mmpss = qei -> ppss * 16.0 / (float)(qei -> ppr); // Acceleration in mm/s^2
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f8d1 	bl	80004e0 <__aeabi_f2d>
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	4b18      	ldr	r3, [pc, #96]	@ (80033a4 <Update_qei+0x424>)
 8003344:	f7fd f924 	bl	8000590 <__aeabi_dmul>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4614      	mov	r4, r2
 800334e:	461d      	mov	r5, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	ee07 3a90 	vmov	s15, r3
 8003358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800335c:	ee17 0a90 	vmov	r0, s15
 8003360:	f7fd f8be 	bl	80004e0 <__aeabi_f2d>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4620      	mov	r0, r4
 800336a:	4629      	mov	r1, r5
 800336c:	f7fd fa3a 	bl	80007e4 <__aeabi_ddiv>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4610      	mov	r0, r2
 8003376:	4619      	mov	r1, r3
 8003378:	f7fd fbec 	bl	8000b54 <__aeabi_d2f>
 800337c:	4602      	mov	r2, r0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	65da      	str	r2, [r3, #92]	@ 0x5c

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	611a      	str	r2, [r3, #16]

}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003394:	f3af 8000 	nop.w
 8003398:	54442d18 	.word	0x54442d18
 800339c:	400921fb 	.word	0x400921fb
 80033a0:	404e0000 	.word	0x404e0000
 80033a4:	40300000 	.word	0x40300000

080033a8 <Reset_qei>:

void Reset_qei(QEI* qei){
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	qei -> counter_value[NEW] = 0;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	621a      	str	r2, [r3, #32]
	qei -> pps = 0;
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps =0;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <Get_mmps>:

float32_t Get_mmps(QEI* qei){
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
	return qei -> mmps;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	ee07 3a90 	vmov	s15, r3
}
 800341a:	eeb0 0a67 	vmov.f32	s0, s15
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342e:	4b0f      	ldr	r3, [pc, #60]	@ (800346c <HAL_MspInit+0x44>)
 8003430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003432:	4a0e      	ldr	r2, [pc, #56]	@ (800346c <HAL_MspInit+0x44>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6613      	str	r3, [r2, #96]	@ 0x60
 800343a:	4b0c      	ldr	r3, [pc, #48]	@ (800346c <HAL_MspInit+0x44>)
 800343c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	4b09      	ldr	r3, [pc, #36]	@ (800346c <HAL_MspInit+0x44>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344a:	4a08      	ldr	r2, [pc, #32]	@ (800346c <HAL_MspInit+0x44>)
 800344c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003450:	6593      	str	r3, [r2, #88]	@ 0x58
 8003452:	4b06      	ldr	r3, [pc, #24]	@ (800346c <HAL_MspInit+0x44>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800345e:	f003 f867 	bl	8006530 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000

08003470 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b09e      	sub	sp, #120	@ 0x78
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003488:	f107 0310 	add.w	r3, r7, #16
 800348c:	2254      	movs	r2, #84	@ 0x54
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f007 ffbf 	bl	800b414 <memset>
  if(hadc->Instance==ADC1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800349e:	d167      	bne.n	8003570 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80034a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80034a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80034aa:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034ac:	f107 0310 	add.w	r3, r7, #16
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 fd7b 	bl	8006fac <HAL_RCCEx_PeriphCLKConfig>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80034bc:	f7ff fb02 	bl	8002ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80034c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003578 <HAL_ADC_MspInit+0x108>)
 80034c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003578 <HAL_ADC_MspInit+0x108>)
 80034c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003578 <HAL_ADC_MspInit+0x108>)
 80034ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d8:	4b27      	ldr	r3, [pc, #156]	@ (8003578 <HAL_ADC_MspInit+0x108>)
 80034da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034dc:	4a26      	ldr	r2, [pc, #152]	@ (8003578 <HAL_ADC_MspInit+0x108>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034e4:	4b24      	ldr	r3, [pc, #144]	@ (8003578 <HAL_ADC_MspInit+0x108>)
 80034e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 80034f0:	2301      	movs	r3, #1
 80034f2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034f4:	2303      	movs	r3, #3
 80034f6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 80034fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003500:	4619      	mov	r1, r3
 8003502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003506:	f002 fda5 	bl	8006054 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800350a:	4b1c      	ldr	r3, [pc, #112]	@ (800357c <HAL_ADC_MspInit+0x10c>)
 800350c:	4a1c      	ldr	r2, [pc, #112]	@ (8003580 <HAL_ADC_MspInit+0x110>)
 800350e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003510:	4b1a      	ldr	r3, [pc, #104]	@ (800357c <HAL_ADC_MspInit+0x10c>)
 8003512:	2205      	movs	r2, #5
 8003514:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003516:	4b19      	ldr	r3, [pc, #100]	@ (800357c <HAL_ADC_MspInit+0x10c>)
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800351c:	4b17      	ldr	r3, [pc, #92]	@ (800357c <HAL_ADC_MspInit+0x10c>)
 800351e:	2200      	movs	r2, #0
 8003520:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003522:	4b16      	ldr	r3, [pc, #88]	@ (800357c <HAL_ADC_MspInit+0x10c>)
 8003524:	2280      	movs	r2, #128	@ 0x80
 8003526:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003528:	4b14      	ldr	r3, [pc, #80]	@ (800357c <HAL_ADC_MspInit+0x10c>)
 800352a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800352e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003530:	4b12      	ldr	r3, [pc, #72]	@ (800357c <HAL_ADC_MspInit+0x10c>)
 8003532:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003536:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003538:	4b10      	ldr	r3, [pc, #64]	@ (800357c <HAL_ADC_MspInit+0x10c>)
 800353a:	2220      	movs	r2, #32
 800353c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800353e:	4b0f      	ldr	r3, [pc, #60]	@ (800357c <HAL_ADC_MspInit+0x10c>)
 8003540:	2200      	movs	r2, #0
 8003542:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003544:	480d      	ldr	r0, [pc, #52]	@ (800357c <HAL_ADC_MspInit+0x10c>)
 8003546:	f002 fa53 	bl	80059f0 <HAL_DMA_Init>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003550:	f7ff fab8 	bl	8002ac4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a09      	ldr	r2, [pc, #36]	@ (800357c <HAL_ADC_MspInit+0x10c>)
 8003558:	655a      	str	r2, [r3, #84]	@ 0x54
 800355a:	4a08      	ldr	r2, [pc, #32]	@ (800357c <HAL_ADC_MspInit+0x10c>)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003560:	2200      	movs	r2, #0
 8003562:	2100      	movs	r1, #0
 8003564:	2012      	movs	r0, #18
 8003566:	f002 fa0e 	bl	8005986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800356a:	2012      	movs	r0, #18
 800356c:	f002 fa25 	bl	80059ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003570:	bf00      	nop
 8003572:	3778      	adds	r7, #120	@ 0x78
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000
 800357c:	2000080c 	.word	0x2000080c
 8003580:	40020008 	.word	0x40020008

08003584 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a34      	ldr	r2, [pc, #208]	@ (8003664 <HAL_TIM_Base_MspInit+0xe0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d114      	bne.n	80035c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003596:	4b34      	ldr	r3, [pc, #208]	@ (8003668 <HAL_TIM_Base_MspInit+0xe4>)
 8003598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800359a:	4a33      	ldr	r2, [pc, #204]	@ (8003668 <HAL_TIM_Base_MspInit+0xe4>)
 800359c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80035a2:	4b31      	ldr	r3, [pc, #196]	@ (8003668 <HAL_TIM_Base_MspInit+0xe4>)
 80035a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80035ae:	2200      	movs	r2, #0
 80035b0:	2100      	movs	r1, #0
 80035b2:	2019      	movs	r0, #25
 80035b4:	f002 f9e7 	bl	8005986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80035b8:	2019      	movs	r0, #25
 80035ba:	f002 f9fe 	bl	80059ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80035be:	e04c      	b.n	800365a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a29      	ldr	r2, [pc, #164]	@ (800366c <HAL_TIM_Base_MspInit+0xe8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d114      	bne.n	80035f4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035ca:	4b27      	ldr	r3, [pc, #156]	@ (8003668 <HAL_TIM_Base_MspInit+0xe4>)
 80035cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ce:	4a26      	ldr	r2, [pc, #152]	@ (8003668 <HAL_TIM_Base_MspInit+0xe4>)
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80035d6:	4b24      	ldr	r3, [pc, #144]	@ (8003668 <HAL_TIM_Base_MspInit+0xe4>)
 80035d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80035e2:	2200      	movs	r2, #0
 80035e4:	2100      	movs	r1, #0
 80035e6:	201d      	movs	r0, #29
 80035e8:	f002 f9cd 	bl	8005986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035ec:	201d      	movs	r0, #29
 80035ee:	f002 f9e4 	bl	80059ba <HAL_NVIC_EnableIRQ>
}
 80035f2:	e032      	b.n	800365a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003670 <HAL_TIM_Base_MspInit+0xec>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d114      	bne.n	8003628 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80035fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003668 <HAL_TIM_Base_MspInit+0xe4>)
 8003600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003602:	4a19      	ldr	r2, [pc, #100]	@ (8003668 <HAL_TIM_Base_MspInit+0xe4>)
 8003604:	f043 0308 	orr.w	r3, r3, #8
 8003608:	6593      	str	r3, [r2, #88]	@ 0x58
 800360a:	4b17      	ldr	r3, [pc, #92]	@ (8003668 <HAL_TIM_Base_MspInit+0xe4>)
 800360c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003616:	2200      	movs	r2, #0
 8003618:	2100      	movs	r1, #0
 800361a:	2032      	movs	r0, #50	@ 0x32
 800361c:	f002 f9b3 	bl	8005986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003620:	2032      	movs	r0, #50	@ 0x32
 8003622:	f002 f9ca 	bl	80059ba <HAL_NVIC_EnableIRQ>
}
 8003626:	e018      	b.n	800365a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a11      	ldr	r2, [pc, #68]	@ (8003674 <HAL_TIM_Base_MspInit+0xf0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d113      	bne.n	800365a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003632:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <HAL_TIM_Base_MspInit+0xe4>)
 8003634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003636:	4a0c      	ldr	r2, [pc, #48]	@ (8003668 <HAL_TIM_Base_MspInit+0xe4>)
 8003638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800363c:	6613      	str	r3, [r2, #96]	@ 0x60
 800363e:	4b0a      	ldr	r3, [pc, #40]	@ (8003668 <HAL_TIM_Base_MspInit+0xe4>)
 8003640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800364a:	2200      	movs	r2, #0
 800364c:	2100      	movs	r1, #0
 800364e:	2019      	movs	r0, #25
 8003650:	f002 f999 	bl	8005986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003654:	2019      	movs	r0, #25
 8003656:	f002 f9b0 	bl	80059ba <HAL_NVIC_EnableIRQ>
}
 800365a:	bf00      	nop
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40021000 	.word	0x40021000
 800366c:	40000400 	.word	0x40000400
 8003670:	40000c00 	.word	0x40000c00
 8003674:	40014400 	.word	0x40014400

08003678 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	@ 0x28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003680:	f107 0314 	add.w	r3, r7, #20
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <HAL_TIM_Encoder_MspInit+0x90>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d131      	bne.n	80036fe <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800369a:	4b1c      	ldr	r3, [pc, #112]	@ (800370c <HAL_TIM_Encoder_MspInit+0x94>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369e:	4a1b      	ldr	r2, [pc, #108]	@ (800370c <HAL_TIM_Encoder_MspInit+0x94>)
 80036a0:	f043 0304 	orr.w	r3, r3, #4
 80036a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036a6:	4b19      	ldr	r3, [pc, #100]	@ (800370c <HAL_TIM_Encoder_MspInit+0x94>)
 80036a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b2:	4b16      	ldr	r3, [pc, #88]	@ (800370c <HAL_TIM_Encoder_MspInit+0x94>)
 80036b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036b6:	4a15      	ldr	r2, [pc, #84]	@ (800370c <HAL_TIM_Encoder_MspInit+0x94>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036be:	4b13      	ldr	r3, [pc, #76]	@ (800370c <HAL_TIM_Encoder_MspInit+0x94>)
 80036c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 80036ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80036ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d0:	2302      	movs	r3, #2
 80036d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d8:	2300      	movs	r3, #0
 80036da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80036dc:	230a      	movs	r3, #10
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	4619      	mov	r1, r3
 80036e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036ea:	f002 fcb3 	bl	8006054 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80036ee:	2200      	movs	r2, #0
 80036f0:	2100      	movs	r1, #0
 80036f2:	201e      	movs	r0, #30
 80036f4:	f002 f947 	bl	8005986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80036f8:	201e      	movs	r0, #30
 80036fa:	f002 f95e 	bl	80059ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80036fe:	bf00      	nop
 8003700:	3728      	adds	r7, #40	@ 0x28
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40000800 	.word	0x40000800
 800370c:	40021000 	.word	0x40021000

08003710 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	f107 030c 	add.w	r3, r7, #12
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a11      	ldr	r2, [pc, #68]	@ (8003774 <HAL_TIM_MspPostInit+0x64>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d11b      	bne.n	800376a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003732:	4b11      	ldr	r3, [pc, #68]	@ (8003778 <HAL_TIM_MspPostInit+0x68>)
 8003734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003736:	4a10      	ldr	r2, [pc, #64]	@ (8003778 <HAL_TIM_MspPostInit+0x68>)
 8003738:	f043 0304 	orr.w	r3, r3, #4
 800373c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800373e:	4b0e      	ldr	r3, [pc, #56]	@ (8003778 <HAL_TIM_MspPostInit+0x68>)
 8003740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 800374a:	2301      	movs	r3, #1
 800374c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374e:	2302      	movs	r3, #2
 8003750:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003756:	2300      	movs	r3, #0
 8003758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800375a:	2302      	movs	r3, #2
 800375c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 800375e:	f107 030c 	add.w	r3, r7, #12
 8003762:	4619      	mov	r1, r3
 8003764:	4805      	ldr	r0, [pc, #20]	@ (800377c <HAL_TIM_MspPostInit+0x6c>)
 8003766:	f002 fc75 	bl	8006054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800376a:	bf00      	nop
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40021000 	.word	0x40021000
 800377c:	48000800 	.word	0x48000800

08003780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b09e      	sub	sp, #120	@ 0x78
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003798:	f107 0310 	add.w	r3, r7, #16
 800379c:	2254      	movs	r2, #84	@ 0x54
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f007 fe37 	bl	800b414 <memset>
  if(huart->Instance==USART2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a4d      	ldr	r2, [pc, #308]	@ (80038e0 <HAL_UART_MspInit+0x160>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	f040 8092 	bne.w	80038d6 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80037b2:	2302      	movs	r3, #2
 80037b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ba:	f107 0310 	add.w	r3, r7, #16
 80037be:	4618      	mov	r0, r3
 80037c0:	f003 fbf4 	bl	8006fac <HAL_RCCEx_PeriphCLKConfig>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80037ca:	f7ff f97b 	bl	8002ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037ce:	4b45      	ldr	r3, [pc, #276]	@ (80038e4 <HAL_UART_MspInit+0x164>)
 80037d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d2:	4a44      	ldr	r2, [pc, #272]	@ (80038e4 <HAL_UART_MspInit+0x164>)
 80037d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80037da:	4b42      	ldr	r3, [pc, #264]	@ (80038e4 <HAL_UART_MspInit+0x164>)
 80037dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e6:	4b3f      	ldr	r3, [pc, #252]	@ (80038e4 <HAL_UART_MspInit+0x164>)
 80037e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ea:	4a3e      	ldr	r2, [pc, #248]	@ (80038e4 <HAL_UART_MspInit+0x164>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037f2:	4b3c      	ldr	r3, [pc, #240]	@ (80038e4 <HAL_UART_MspInit+0x164>)
 80037f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037fe:	230c      	movs	r3, #12
 8003800:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003802:	2302      	movs	r3, #2
 8003804:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	2300      	movs	r3, #0
 8003808:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380a:	2300      	movs	r3, #0
 800380c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800380e:	2307      	movs	r3, #7
 8003810:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003812:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003816:	4619      	mov	r1, r3
 8003818:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800381c:	f002 fc1a 	bl	8006054 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003820:	4b31      	ldr	r3, [pc, #196]	@ (80038e8 <HAL_UART_MspInit+0x168>)
 8003822:	4a32      	ldr	r2, [pc, #200]	@ (80038ec <HAL_UART_MspInit+0x16c>)
 8003824:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003826:	4b30      	ldr	r3, [pc, #192]	@ (80038e8 <HAL_UART_MspInit+0x168>)
 8003828:	221a      	movs	r2, #26
 800382a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800382c:	4b2e      	ldr	r3, [pc, #184]	@ (80038e8 <HAL_UART_MspInit+0x168>)
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003832:	4b2d      	ldr	r3, [pc, #180]	@ (80038e8 <HAL_UART_MspInit+0x168>)
 8003834:	2200      	movs	r2, #0
 8003836:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003838:	4b2b      	ldr	r3, [pc, #172]	@ (80038e8 <HAL_UART_MspInit+0x168>)
 800383a:	2280      	movs	r2, #128	@ 0x80
 800383c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800383e:	4b2a      	ldr	r3, [pc, #168]	@ (80038e8 <HAL_UART_MspInit+0x168>)
 8003840:	2200      	movs	r2, #0
 8003842:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003844:	4b28      	ldr	r3, [pc, #160]	@ (80038e8 <HAL_UART_MspInit+0x168>)
 8003846:	2200      	movs	r2, #0
 8003848:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800384a:	4b27      	ldr	r3, [pc, #156]	@ (80038e8 <HAL_UART_MspInit+0x168>)
 800384c:	2200      	movs	r2, #0
 800384e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003850:	4b25      	ldr	r3, [pc, #148]	@ (80038e8 <HAL_UART_MspInit+0x168>)
 8003852:	2200      	movs	r2, #0
 8003854:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003856:	4824      	ldr	r0, [pc, #144]	@ (80038e8 <HAL_UART_MspInit+0x168>)
 8003858:	f002 f8ca 	bl	80059f0 <HAL_DMA_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003862:	f7ff f92f 	bl	8002ac4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a1f      	ldr	r2, [pc, #124]	@ (80038e8 <HAL_UART_MspInit+0x168>)
 800386a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800386e:	4a1e      	ldr	r2, [pc, #120]	@ (80038e8 <HAL_UART_MspInit+0x168>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8003874:	4b1e      	ldr	r3, [pc, #120]	@ (80038f0 <HAL_UART_MspInit+0x170>)
 8003876:	4a1f      	ldr	r2, [pc, #124]	@ (80038f4 <HAL_UART_MspInit+0x174>)
 8003878:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800387a:	4b1d      	ldr	r3, [pc, #116]	@ (80038f0 <HAL_UART_MspInit+0x170>)
 800387c:	221b      	movs	r2, #27
 800387e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003880:	4b1b      	ldr	r3, [pc, #108]	@ (80038f0 <HAL_UART_MspInit+0x170>)
 8003882:	2210      	movs	r2, #16
 8003884:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003886:	4b1a      	ldr	r3, [pc, #104]	@ (80038f0 <HAL_UART_MspInit+0x170>)
 8003888:	2200      	movs	r2, #0
 800388a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800388c:	4b18      	ldr	r3, [pc, #96]	@ (80038f0 <HAL_UART_MspInit+0x170>)
 800388e:	2280      	movs	r2, #128	@ 0x80
 8003890:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003892:	4b17      	ldr	r3, [pc, #92]	@ (80038f0 <HAL_UART_MspInit+0x170>)
 8003894:	2200      	movs	r2, #0
 8003896:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003898:	4b15      	ldr	r3, [pc, #84]	@ (80038f0 <HAL_UART_MspInit+0x170>)
 800389a:	2200      	movs	r2, #0
 800389c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800389e:	4b14      	ldr	r3, [pc, #80]	@ (80038f0 <HAL_UART_MspInit+0x170>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038a4:	4b12      	ldr	r3, [pc, #72]	@ (80038f0 <HAL_UART_MspInit+0x170>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80038aa:	4811      	ldr	r0, [pc, #68]	@ (80038f0 <HAL_UART_MspInit+0x170>)
 80038ac:	f002 f8a0 	bl	80059f0 <HAL_DMA_Init>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80038b6:	f7ff f905 	bl	8002ac4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a0c      	ldr	r2, [pc, #48]	@ (80038f0 <HAL_UART_MspInit+0x170>)
 80038be:	67da      	str	r2, [r3, #124]	@ 0x7c
 80038c0:	4a0b      	ldr	r2, [pc, #44]	@ (80038f0 <HAL_UART_MspInit+0x170>)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038c6:	2200      	movs	r2, #0
 80038c8:	2100      	movs	r1, #0
 80038ca:	2026      	movs	r0, #38	@ 0x26
 80038cc:	f002 f85b 	bl	8005986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038d0:	2026      	movs	r0, #38	@ 0x26
 80038d2:	f002 f872 	bl	80059ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038d6:	bf00      	nop
 80038d8:	3778      	adds	r7, #120	@ 0x78
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40004400 	.word	0x40004400
 80038e4:	40021000 	.word	0x40021000
 80038e8:	20000d34 	.word	0x20000d34
 80038ec:	4002001c 	.word	0x4002001c
 80038f0:	20000d94 	.word	0x20000d94
 80038f4:	40020030 	.word	0x40020030

080038f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038fc:	bf00      	nop
 80038fe:	e7fd      	b.n	80038fc <NMI_Handler+0x4>

08003900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003904:	bf00      	nop
 8003906:	e7fd      	b.n	8003904 <HardFault_Handler+0x4>

08003908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800390c:	bf00      	nop
 800390e:	e7fd      	b.n	800390c <MemManage_Handler+0x4>

08003910 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003914:	bf00      	nop
 8003916:	e7fd      	b.n	8003914 <BusFault_Handler+0x4>

08003918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800391c:	bf00      	nop
 800391e:	e7fd      	b.n	800391c <UsageFault_Handler+0x4>

08003920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003940:	bf00      	nop
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800394e:	f000 f8ff 	bl	8003b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800395c:	4802      	ldr	r0, [pc, #8]	@ (8003968 <DMA1_Channel1_IRQHandler+0x10>)
 800395e:	f002 fa2a 	bl	8005db6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	2000080c 	.word	0x2000080c

0800396c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003970:	4802      	ldr	r0, [pc, #8]	@ (800397c <DMA1_Channel2_IRQHandler+0x10>)
 8003972:	f002 fa20 	bl	8005db6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000d34 	.word	0x20000d34

08003980 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003984:	4802      	ldr	r0, [pc, #8]	@ (8003990 <DMA1_Channel3_IRQHandler+0x10>)
 8003986:	f002 fa16 	bl	8005db6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000d94 	.word	0x20000d94

08003994 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003998:	4802      	ldr	r0, [pc, #8]	@ (80039a4 <ADC1_2_IRQHandler+0x10>)
 800399a:	f000 fdc7 	bl	800452c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200007a0 	.word	0x200007a0

080039a8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039ac:	4803      	ldr	r0, [pc, #12]	@ (80039bc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80039ae:	f004 fa4f 	bl	8007e50 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80039b2:	4803      	ldr	r0, [pc, #12]	@ (80039c0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80039b4:	f004 fa4c 	bl	8007e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80039b8:	bf00      	nop
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	2000086c 	.word	0x2000086c
 80039c0:	20000b9c 	.word	0x20000b9c

080039c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039c8:	4802      	ldr	r0, [pc, #8]	@ (80039d4 <TIM3_IRQHandler+0x10>)
 80039ca:	f004 fa41 	bl	8007e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000938 	.word	0x20000938

080039d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80039dc:	4802      	ldr	r0, [pc, #8]	@ (80039e8 <TIM4_IRQHandler+0x10>)
 80039de:	f004 fa37 	bl	8007e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000a04 	.word	0x20000a04

080039ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039f0:	4802      	ldr	r0, [pc, #8]	@ (80039fc <USART2_IRQHandler+0x10>)
 80039f2:	f006 f801 	bl	80099f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000c68 	.word	0x20000c68

08003a00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_Pin);
 8003a04:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003a08:	f002 fcd6 	bl	80063b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003a0c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003a10:	f002 fcd2 	bl	80063b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 8003a14:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003a18:	f002 fcce 	bl	80063b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a1c:	bf00      	nop
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003a24:	4802      	ldr	r0, [pc, #8]	@ (8003a30 <TIM5_IRQHandler+0x10>)
 8003a26:	f004 fa13 	bl	8007e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000ad0 	.word	0x20000ad0

08003a34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a38:	4b06      	ldr	r3, [pc, #24]	@ (8003a54 <SystemInit+0x20>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3e:	4a05      	ldr	r2, [pc, #20]	@ (8003a54 <SystemInit+0x20>)
 8003a40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a48:	bf00      	nop
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a58:	480d      	ldr	r0, [pc, #52]	@ (8003a90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a5a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a5c:	f7ff ffea 	bl	8003a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a60:	480c      	ldr	r0, [pc, #48]	@ (8003a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a62:	490d      	ldr	r1, [pc, #52]	@ (8003a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a64:	4a0d      	ldr	r2, [pc, #52]	@ (8003a9c <LoopForever+0xe>)
  movs r3, #0
 8003a66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003a68:	e002      	b.n	8003a70 <LoopCopyDataInit>

08003a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a6e:	3304      	adds	r3, #4

08003a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a74:	d3f9      	bcc.n	8003a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a76:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a78:	4c0a      	ldr	r4, [pc, #40]	@ (8003aa4 <LoopForever+0x16>)
  movs r3, #0
 8003a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a7c:	e001      	b.n	8003a82 <LoopFillZerobss>

08003a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a80:	3204      	adds	r2, #4

08003a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a84:	d3fb      	bcc.n	8003a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a86:	f007 fccd 	bl	800b424 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a8a:	f7fe f8c3 	bl	8001c14 <main>

08003a8e <LoopForever>:

LoopForever:
    b LoopForever
 8003a8e:	e7fe      	b.n	8003a8e <LoopForever>
  ldr   r0, =_estack
 8003a90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a98:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8003a9c:	0800b554 	.word	0x0800b554
  ldr r2, =_sbss
 8003aa0:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8003aa4:	20001144 	.word	0x20001144

08003aa8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003aa8:	e7fe      	b.n	8003aa8 <ADC3_IRQHandler>

08003aaa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ab4:	2003      	movs	r0, #3
 8003ab6:	f001 ff5b 	bl	8005970 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003aba:	2000      	movs	r0, #0
 8003abc:	f000 f80e 	bl	8003adc <HAL_InitTick>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	71fb      	strb	r3, [r7, #7]
 8003aca:	e001      	b.n	8003ad0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003acc:	f7ff fcac 	bl	8003428 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ad0:	79fb      	ldrb	r3, [r7, #7]

}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003ae8:	4b16      	ldr	r3, [pc, #88]	@ (8003b44 <HAL_InitTick+0x68>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d022      	beq.n	8003b36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003af0:	4b15      	ldr	r3, [pc, #84]	@ (8003b48 <HAL_InitTick+0x6c>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4b13      	ldr	r3, [pc, #76]	@ (8003b44 <HAL_InitTick+0x68>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003afc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 ff66 	bl	80059d6 <HAL_SYSTICK_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10f      	bne.n	8003b30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	d809      	bhi.n	8003b2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b16:	2200      	movs	r2, #0
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1e:	f001 ff32 	bl	8005986 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b22:	4a0a      	ldr	r2, [pc, #40]	@ (8003b4c <HAL_InitTick+0x70>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	e007      	b.n	8003b3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
 8003b2e:	e004      	b.n	8003b3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	e001      	b.n	8003b3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	2000027c 	.word	0x2000027c
 8003b48:	20000274 	.word	0x20000274
 8003b4c:	20000278 	.word	0x20000278

08003b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b54:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <HAL_IncTick+0x1c>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b05      	ldr	r3, [pc, #20]	@ (8003b70 <HAL_IncTick+0x20>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	4a03      	ldr	r2, [pc, #12]	@ (8003b6c <HAL_IncTick+0x1c>)
 8003b60:	6013      	str	r3, [r2, #0]
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	20001140 	.word	0x20001140
 8003b70:	2000027c 	.word	0x2000027c

08003b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return uwTick;
 8003b78:	4b03      	ldr	r3, [pc, #12]	@ (8003b88 <HAL_GetTick+0x14>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20001140 	.word	0x20001140

08003b8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	609a      	str	r2, [r3, #8]
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3360      	adds	r3, #96	@ 0x60
 8003c06:	461a      	mov	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b08      	ldr	r3, [pc, #32]	@ (8003c38 <LL_ADC_SetOffset+0x44>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c2c:	bf00      	nop
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	03fff000 	.word	0x03fff000

08003c3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3360      	adds	r3, #96	@ 0x60
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3360      	adds	r3, #96	@ 0x60
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003c92:	bf00      	nop
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b087      	sub	sp, #28
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3360      	adds	r3, #96	@ 0x60
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003cc8:	bf00      	nop
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3360      	adds	r3, #96	@ 0x60
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003cfe:	bf00      	nop
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	615a      	str	r2, [r3, #20]
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b087      	sub	sp, #28
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3330      	adds	r3, #48	@ 0x30
 8003d66:	461a      	mov	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	4413      	add	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	211f      	movs	r1, #31
 8003d82:	fa01 f303 	lsl.w	r3, r1, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	401a      	ands	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	0e9b      	lsrs	r3, r3, #26
 8003d8e:	f003 011f 	and.w	r1, r3, #31
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003da2:	bf00      	nop
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dba:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3314      	adds	r3, #20
 8003de4:	461a      	mov	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	0e5b      	lsrs	r3, r3, #25
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	4413      	add	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	0d1b      	lsrs	r3, r3, #20
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	2107      	movs	r1, #7
 8003e02:	fa01 f303 	lsl.w	r3, r1, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	401a      	ands	r2, r3
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	0d1b      	lsrs	r3, r3, #20
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	fa01 f303 	lsl.w	r3, r1, r3
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
	...

08003e2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e44:	43db      	mvns	r3, r3
 8003e46:	401a      	ands	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f003 0318 	and.w	r3, r3, #24
 8003e4e:	4908      	ldr	r1, [pc, #32]	@ (8003e70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003e50:	40d9      	lsrs	r1, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	400b      	ands	r3, r1
 8003e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	0007ffff 	.word	0x0007ffff

08003e74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 031f 	and.w	r3, r3, #31
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003ebc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6093      	str	r3, [r2, #8]
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ee4:	d101      	bne.n	8003eea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003f08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f34:	d101      	bne.n	8003f3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f5c:	f043 0201 	orr.w	r2, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <LL_ADC_IsEnabled+0x18>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <LL_ADC_IsEnabled+0x1a>
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fa6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003faa:	f043 0204 	orr.w	r2, r3, #4
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d101      	bne.n	8003fd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d101      	bne.n	8003ffc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b089      	sub	sp, #36	@ 0x24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e1a9      	b.n	800437a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff fa1b 	bl	8003470 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff ff3f 	bl	8003ed0 <LL_ADC_IsDeepPowerDownEnabled>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d004      	beq.n	8004062 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ff25 	bl	8003eac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff ff5a 	bl	8003f20 <LL_ADC_IsInternalRegulatorEnabled>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d115      	bne.n	800409e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff ff3e 	bl	8003ef8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800407c:	4b9c      	ldr	r3, [pc, #624]	@ (80042f0 <HAL_ADC_Init+0x2e4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	099b      	lsrs	r3, r3, #6
 8004082:	4a9c      	ldr	r2, [pc, #624]	@ (80042f4 <HAL_ADC_Init+0x2e8>)
 8004084:	fba2 2303 	umull	r2, r3, r2, r3
 8004088:	099b      	lsrs	r3, r3, #6
 800408a:	3301      	adds	r3, #1
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004090:	e002      	b.n	8004098 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3b01      	subs	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f9      	bne.n	8004092 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff ff3c 	bl	8003f20 <LL_ADC_IsInternalRegulatorEnabled>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10d      	bne.n	80040ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b2:	f043 0210 	orr.w	r2, r3, #16
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040be:	f043 0201 	orr.w	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff ff75 	bl	8003fbe <LL_ADC_REG_IsConversionOngoing>
 80040d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 8142 	bne.w	8004368 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f040 813e 	bne.w	8004368 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80040f4:	f043 0202 	orr.w	r2, r3, #2
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ff35 	bl	8003f70 <LL_ADC_IsEnabled>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d141      	bne.n	8004190 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004114:	d004      	beq.n	8004120 <HAL_ADC_Init+0x114>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a77      	ldr	r2, [pc, #476]	@ (80042f8 <HAL_ADC_Init+0x2ec>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10f      	bne.n	8004140 <HAL_ADC_Init+0x134>
 8004120:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004124:	f7ff ff24 	bl	8003f70 <LL_ADC_IsEnabled>
 8004128:	4604      	mov	r4, r0
 800412a:	4873      	ldr	r0, [pc, #460]	@ (80042f8 <HAL_ADC_Init+0x2ec>)
 800412c:	f7ff ff20 	bl	8003f70 <LL_ADC_IsEnabled>
 8004130:	4603      	mov	r3, r0
 8004132:	4323      	orrs	r3, r4
 8004134:	2b00      	cmp	r3, #0
 8004136:	bf0c      	ite	eq
 8004138:	2301      	moveq	r3, #1
 800413a:	2300      	movne	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	e012      	b.n	8004166 <HAL_ADC_Init+0x15a>
 8004140:	486e      	ldr	r0, [pc, #440]	@ (80042fc <HAL_ADC_Init+0x2f0>)
 8004142:	f7ff ff15 	bl	8003f70 <LL_ADC_IsEnabled>
 8004146:	4604      	mov	r4, r0
 8004148:	486d      	ldr	r0, [pc, #436]	@ (8004300 <HAL_ADC_Init+0x2f4>)
 800414a:	f7ff ff11 	bl	8003f70 <LL_ADC_IsEnabled>
 800414e:	4603      	mov	r3, r0
 8004150:	431c      	orrs	r4, r3
 8004152:	486c      	ldr	r0, [pc, #432]	@ (8004304 <HAL_ADC_Init+0x2f8>)
 8004154:	f7ff ff0c 	bl	8003f70 <LL_ADC_IsEnabled>
 8004158:	4603      	mov	r3, r0
 800415a:	4323      	orrs	r3, r4
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d012      	beq.n	8004190 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004172:	d004      	beq.n	800417e <HAL_ADC_Init+0x172>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a5f      	ldr	r2, [pc, #380]	@ (80042f8 <HAL_ADC_Init+0x2ec>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d101      	bne.n	8004182 <HAL_ADC_Init+0x176>
 800417e:	4a62      	ldr	r2, [pc, #392]	@ (8004308 <HAL_ADC_Init+0x2fc>)
 8004180:	e000      	b.n	8004184 <HAL_ADC_Init+0x178>
 8004182:	4a62      	ldr	r2, [pc, #392]	@ (800430c <HAL_ADC_Init+0x300>)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4619      	mov	r1, r3
 800418a:	4610      	mov	r0, r2
 800418c:	f7ff fcfe 	bl	8003b8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	7f5b      	ldrb	r3, [r3, #29]
 8004194:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800419a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80041a0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80041a6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041ae:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d106      	bne.n	80041cc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c2:	3b01      	subs	r3, #1
 80041c4:	045b      	lsls	r3, r3, #17
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d009      	beq.n	80041e8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	4b48      	ldr	r3, [pc, #288]	@ (8004310 <HAL_ADC_Init+0x304>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	69b9      	ldr	r1, [r7, #24]
 80041f8:	430b      	orrs	r3, r1
 80041fa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fee4 	bl	8003fe4 <LL_ADC_INJ_IsConversionOngoing>
 800421c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d17f      	bne.n	8004324 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d17c      	bne.n	8004324 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800422e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004236:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004238:	4313      	orrs	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004246:	f023 0302 	bic.w	r3, r3, #2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	69b9      	ldr	r1, [r7, #24]
 8004250:	430b      	orrs	r3, r1
 8004252:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d017      	beq.n	800428c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800426a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004274:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004278:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6911      	ldr	r1, [r2, #16]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	430b      	orrs	r3, r1
 8004286:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800428a:	e013      	b.n	80042b4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691a      	ldr	r2, [r3, #16]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800429a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80042ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042b0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d12a      	bne.n	8004314 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80042d4:	4311      	orrs	r1, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80042da:	4311      	orrs	r1, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042e0:	430a      	orrs	r2, r1
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	611a      	str	r2, [r3, #16]
 80042ee:	e019      	b.n	8004324 <HAL_ADC_Init+0x318>
 80042f0:	20000274 	.word	0x20000274
 80042f4:	053e2d63 	.word	0x053e2d63
 80042f8:	50000100 	.word	0x50000100
 80042fc:	50000400 	.word	0x50000400
 8004300:	50000500 	.word	0x50000500
 8004304:	50000600 	.word	0x50000600
 8004308:	50000300 	.word	0x50000300
 800430c:	50000700 	.word	0x50000700
 8004310:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d10c      	bne.n	8004346 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	f023 010f 	bic.w	r1, r3, #15
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	1e5a      	subs	r2, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30
 8004344:	e007      	b.n	8004356 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 020f 	bic.w	r2, r2, #15
 8004354:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	f043 0201 	orr.w	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004366:	e007      	b.n	8004378 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436c:	f043 0210 	orr.w	r2, r3, #16
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004378:	7ffb      	ldrb	r3, [r7, #31]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3724      	adds	r7, #36	@ 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd90      	pop	{r4, r7, pc}
 8004382:	bf00      	nop

08004384 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004398:	d004      	beq.n	80043a4 <HAL_ADC_Start_DMA+0x20>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a5a      	ldr	r2, [pc, #360]	@ (8004508 <HAL_ADC_Start_DMA+0x184>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d101      	bne.n	80043a8 <HAL_ADC_Start_DMA+0x24>
 80043a4:	4b59      	ldr	r3, [pc, #356]	@ (800450c <HAL_ADC_Start_DMA+0x188>)
 80043a6:	e000      	b.n	80043aa <HAL_ADC_Start_DMA+0x26>
 80043a8:	4b59      	ldr	r3, [pc, #356]	@ (8004510 <HAL_ADC_Start_DMA+0x18c>)
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff fd62 	bl	8003e74 <LL_ADC_GetMultimode>
 80043b0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fe01 	bl	8003fbe <LL_ADC_REG_IsConversionOngoing>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f040 809b 	bne.w	80044fa <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_ADC_Start_DMA+0x4e>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e096      	b.n	8004500 <HAL_ADC_Start_DMA+0x17c>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a4d      	ldr	r2, [pc, #308]	@ (8004514 <HAL_ADC_Start_DMA+0x190>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d008      	beq.n	80043f6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b05      	cmp	r3, #5
 80043ee:	d002      	beq.n	80043f6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b09      	cmp	r3, #9
 80043f4:	d17a      	bne.n	80044ec <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 ff60 	bl	80052bc <ADC_Enable>
 80043fc:	4603      	mov	r3, r0
 80043fe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d16d      	bne.n	80044e2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800440e:	f023 0301 	bic.w	r3, r3, #1
 8004412:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a3a      	ldr	r2, [pc, #232]	@ (8004508 <HAL_ADC_Start_DMA+0x184>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d009      	beq.n	8004438 <HAL_ADC_Start_DMA+0xb4>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a3b      	ldr	r2, [pc, #236]	@ (8004518 <HAL_ADC_Start_DMA+0x194>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d002      	beq.n	8004434 <HAL_ADC_Start_DMA+0xb0>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	e003      	b.n	800443c <HAL_ADC_Start_DMA+0xb8>
 8004434:	4b39      	ldr	r3, [pc, #228]	@ (800451c <HAL_ADC_Start_DMA+0x198>)
 8004436:	e001      	b.n	800443c <HAL_ADC_Start_DMA+0xb8>
 8004438:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	4293      	cmp	r3, r2
 8004442:	d002      	beq.n	800444a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d105      	bne.n	8004456 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d006      	beq.n	8004470 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004466:	f023 0206 	bic.w	r2, r3, #6
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	661a      	str	r2, [r3, #96]	@ 0x60
 800446e:	e002      	b.n	8004476 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447a:	4a29      	ldr	r2, [pc, #164]	@ (8004520 <HAL_ADC_Start_DMA+0x19c>)
 800447c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004482:	4a28      	ldr	r2, [pc, #160]	@ (8004524 <HAL_ADC_Start_DMA+0x1a0>)
 8004484:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800448a:	4a27      	ldr	r2, [pc, #156]	@ (8004528 <HAL_ADC_Start_DMA+0x1a4>)
 800448c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	221c      	movs	r2, #28
 8004494:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0210 	orr.w	r2, r2, #16
 80044ac:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3340      	adds	r3, #64	@ 0x40
 80044c8:	4619      	mov	r1, r3
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f001 fb37 	bl	8005b40 <HAL_DMA_Start_IT>
 80044d2:	4603      	mov	r3, r0
 80044d4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fd5b 	bl	8003f96 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80044e0:	e00d      	b.n	80044fe <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80044ea:	e008      	b.n	80044fe <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80044f8:	e001      	b.n	80044fe <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80044fa:	2302      	movs	r3, #2
 80044fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	50000100 	.word	0x50000100
 800450c:	50000300 	.word	0x50000300
 8004510:	50000700 	.word	0x50000700
 8004514:	50000600 	.word	0x50000600
 8004518:	50000500 	.word	0x50000500
 800451c:	50000400 	.word	0x50000400
 8004520:	080053e9 	.word	0x080053e9
 8004524:	080054c1 	.word	0x080054c1
 8004528:	080054dd 	.word	0x080054dd

0800452c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	@ 0x28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004534:	2300      	movs	r3, #0
 8004536:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004550:	d004      	beq.n	800455c <HAL_ADC_IRQHandler+0x30>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a8e      	ldr	r2, [pc, #568]	@ (8004790 <HAL_ADC_IRQHandler+0x264>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d101      	bne.n	8004560 <HAL_ADC_IRQHandler+0x34>
 800455c:	4b8d      	ldr	r3, [pc, #564]	@ (8004794 <HAL_ADC_IRQHandler+0x268>)
 800455e:	e000      	b.n	8004562 <HAL_ADC_IRQHandler+0x36>
 8004560:	4b8d      	ldr	r3, [pc, #564]	@ (8004798 <HAL_ADC_IRQHandler+0x26c>)
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fc86 	bl	8003e74 <LL_ADC_GetMultimode>
 8004568:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d017      	beq.n	80045a4 <HAL_ADC_IRQHandler+0x78>
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d012      	beq.n	80045a4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b00      	cmp	r3, #0
 8004588:	d105      	bne.n	8004596 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f001 f808 	bl	80055ac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2202      	movs	r2, #2
 80045a2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <HAL_ADC_IRQHandler+0x8c>
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 8094 	beq.w	80046ec <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 808e 	beq.w	80046ec <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d105      	bne.n	80045e8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff fb9f 	bl	8003d30 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d072      	beq.n	80046de <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a64      	ldr	r2, [pc, #400]	@ (8004790 <HAL_ADC_IRQHandler+0x264>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d009      	beq.n	8004616 <HAL_ADC_IRQHandler+0xea>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a65      	ldr	r2, [pc, #404]	@ (800479c <HAL_ADC_IRQHandler+0x270>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d002      	beq.n	8004612 <HAL_ADC_IRQHandler+0xe6>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	e003      	b.n	800461a <HAL_ADC_IRQHandler+0xee>
 8004612:	4b63      	ldr	r3, [pc, #396]	@ (80047a0 <HAL_ADC_IRQHandler+0x274>)
 8004614:	e001      	b.n	800461a <HAL_ADC_IRQHandler+0xee>
 8004616:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6812      	ldr	r2, [r2, #0]
 800461e:	4293      	cmp	r3, r2
 8004620:	d008      	beq.n	8004634 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2b05      	cmp	r3, #5
 800462c:	d002      	beq.n	8004634 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b09      	cmp	r3, #9
 8004632:	d104      	bne.n	800463e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	623b      	str	r3, [r7, #32]
 800463c:	e014      	b.n	8004668 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a53      	ldr	r2, [pc, #332]	@ (8004790 <HAL_ADC_IRQHandler+0x264>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d009      	beq.n	800465c <HAL_ADC_IRQHandler+0x130>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a53      	ldr	r2, [pc, #332]	@ (800479c <HAL_ADC_IRQHandler+0x270>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d002      	beq.n	8004658 <HAL_ADC_IRQHandler+0x12c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	e003      	b.n	8004660 <HAL_ADC_IRQHandler+0x134>
 8004658:	4b51      	ldr	r3, [pc, #324]	@ (80047a0 <HAL_ADC_IRQHandler+0x274>)
 800465a:	e001      	b.n	8004660 <HAL_ADC_IRQHandler+0x134>
 800465c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004660:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d135      	bne.n	80046de <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b08      	cmp	r3, #8
 800467e:	d12e      	bne.n	80046de <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fc9a 	bl	8003fbe <LL_ADC_REG_IsConversionOngoing>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d11a      	bne.n	80046c6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 020c 	bic.w	r2, r2, #12
 800469e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d112      	bne.n	80046de <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046bc:	f043 0201 	orr.w	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046c4:	e00b      	b.n	80046de <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ca:	f043 0210 	orr.w	r2, r3, #16
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d6:	f043 0201 	orr.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f984 	bl	80049ec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	220c      	movs	r2, #12
 80046ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d004      	beq.n	8004700 <HAL_ADC_IRQHandler+0x1d4>
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10b      	bne.n	8004718 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 80b3 	beq.w	8004872 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80ad 	beq.w	8004872 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	2b00      	cmp	r3, #0
 8004722:	d105      	bne.n	8004730 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004728:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fb3a 	bl	8003dae <LL_ADC_INJ_IsTriggerSourceSWStart>
 800473a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff faf5 	bl	8003d30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004746:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a10      	ldr	r2, [pc, #64]	@ (8004790 <HAL_ADC_IRQHandler+0x264>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d009      	beq.n	8004766 <HAL_ADC_IRQHandler+0x23a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a11      	ldr	r2, [pc, #68]	@ (800479c <HAL_ADC_IRQHandler+0x270>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d002      	beq.n	8004762 <HAL_ADC_IRQHandler+0x236>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	e003      	b.n	800476a <HAL_ADC_IRQHandler+0x23e>
 8004762:	4b0f      	ldr	r3, [pc, #60]	@ (80047a0 <HAL_ADC_IRQHandler+0x274>)
 8004764:	e001      	b.n	800476a <HAL_ADC_IRQHandler+0x23e>
 8004766:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	4293      	cmp	r3, r2
 8004770:	d008      	beq.n	8004784 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2b06      	cmp	r3, #6
 800477c:	d002      	beq.n	8004784 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b07      	cmp	r3, #7
 8004782:	d10f      	bne.n	80047a4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	623b      	str	r3, [r7, #32]
 800478c:	e01f      	b.n	80047ce <HAL_ADC_IRQHandler+0x2a2>
 800478e:	bf00      	nop
 8004790:	50000100 	.word	0x50000100
 8004794:	50000300 	.word	0x50000300
 8004798:	50000700 	.word	0x50000700
 800479c:	50000500 	.word	0x50000500
 80047a0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a8b      	ldr	r2, [pc, #556]	@ (80049d8 <HAL_ADC_IRQHandler+0x4ac>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d009      	beq.n	80047c2 <HAL_ADC_IRQHandler+0x296>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a8a      	ldr	r2, [pc, #552]	@ (80049dc <HAL_ADC_IRQHandler+0x4b0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d002      	beq.n	80047be <HAL_ADC_IRQHandler+0x292>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	e003      	b.n	80047c6 <HAL_ADC_IRQHandler+0x29a>
 80047be:	4b88      	ldr	r3, [pc, #544]	@ (80049e0 <HAL_ADC_IRQHandler+0x4b4>)
 80047c0:	e001      	b.n	80047c6 <HAL_ADC_IRQHandler+0x29a>
 80047c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80047c6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d047      	beq.n	8004864 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <HAL_ADC_IRQHandler+0x2c2>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d03f      	beq.n	8004864 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d13a      	bne.n	8004864 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f8:	2b40      	cmp	r3, #64	@ 0x40
 80047fa:	d133      	bne.n	8004864 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d12e      	bne.n	8004864 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fbea 	bl	8003fe4 <LL_ADC_INJ_IsConversionOngoing>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d11a      	bne.n	800484c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004824:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800482a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d112      	bne.n	8004864 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004842:	f043 0201 	orr.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	65da      	str	r2, [r3, #92]	@ 0x5c
 800484a:	e00b      	b.n	8004864 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004850:	f043 0210 	orr.w	r2, r3, #16
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800485c:	f043 0201 	orr.w	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fe79 	bl	800555c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2260      	movs	r2, #96	@ 0x60
 8004870:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004878:	2b00      	cmp	r3, #0
 800487a:	d011      	beq.n	80048a0 <HAL_ADC_IRQHandler+0x374>
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00c      	beq.n	80048a0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f8be 	bl	8004a14 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2280      	movs	r2, #128	@ 0x80
 800489e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d012      	beq.n	80048d0 <HAL_ADC_IRQHandler+0x3a4>
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00d      	beq.n	80048d0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fe5f 	bl	8005584 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d012      	beq.n	8004900 <HAL_ADC_IRQHandler+0x3d4>
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00d      	beq.n	8004900 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fe51 	bl	8005598 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b00      	cmp	r3, #0
 8004908:	d043      	beq.n	8004992 <HAL_ADC_IRQHandler+0x466>
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	d03e      	beq.n	8004992 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d102      	bne.n	8004922 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800491c:	2301      	movs	r3, #1
 800491e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004920:	e021      	b.n	8004966 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d015      	beq.n	8004954 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004930:	d004      	beq.n	800493c <HAL_ADC_IRQHandler+0x410>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a28      	ldr	r2, [pc, #160]	@ (80049d8 <HAL_ADC_IRQHandler+0x4ac>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d101      	bne.n	8004940 <HAL_ADC_IRQHandler+0x414>
 800493c:	4b29      	ldr	r3, [pc, #164]	@ (80049e4 <HAL_ADC_IRQHandler+0x4b8>)
 800493e:	e000      	b.n	8004942 <HAL_ADC_IRQHandler+0x416>
 8004940:	4b29      	ldr	r3, [pc, #164]	@ (80049e8 <HAL_ADC_IRQHandler+0x4bc>)
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff faa4 	bl	8003e90 <LL_ADC_GetMultiDMATransfer>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800494e:	2301      	movs	r3, #1
 8004950:	627b      	str	r3, [r7, #36]	@ 0x24
 8004952:	e008      	b.n	8004966 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004962:	2301      	movs	r3, #1
 8004964:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004968:	2b01      	cmp	r3, #1
 800496a:	d10e      	bne.n	800498a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004970:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800497c:	f043 0202 	orr.w	r2, r3, #2
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f84f 	bl	8004a28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2210      	movs	r2, #16
 8004990:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004998:	2b00      	cmp	r3, #0
 800499a:	d018      	beq.n	80049ce <HAL_ADC_IRQHandler+0x4a2>
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d013      	beq.n	80049ce <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049aa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b6:	f043 0208 	orr.w	r2, r3, #8
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049c6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fdd1 	bl	8005570 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80049ce:	bf00      	nop
 80049d0:	3728      	adds	r7, #40	@ 0x28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	50000100 	.word	0x50000100
 80049dc:	50000500 	.word	0x50000500
 80049e0:	50000400 	.word	0x50000400
 80049e4:	50000300 	.word	0x50000300
 80049e8:	50000700 	.word	0x50000700

080049ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b0b6      	sub	sp, #216	@ 0xd8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d102      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x24>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	f000 bc13 	b.w	8005286 <HAL_ADC_ConfigChannel+0x84a>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff faa6 	bl	8003fbe <LL_ADC_REG_IsConversionOngoing>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f040 83f3 	bne.w	8005260 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6859      	ldr	r1, [r3, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	f7ff f965 	bl	8003d56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff fa94 	bl	8003fbe <LL_ADC_REG_IsConversionOngoing>
 8004a96:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff faa0 	bl	8003fe4 <LL_ADC_INJ_IsConversionOngoing>
 8004aa4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004aa8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f040 81d9 	bne.w	8004e64 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ab2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f040 81d4 	bne.w	8004e64 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ac4:	d10f      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f7ff f97f 	bl	8003dd4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff f913 	bl	8003d0a <LL_ADC_SetSamplingTimeCommonConfig>
 8004ae4:	e00e      	b.n	8004b04 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6819      	ldr	r1, [r3, #0]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f7ff f96e 	bl	8003dd4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2100      	movs	r1, #0
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff f903 	bl	8003d0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695a      	ldr	r2, [r3, #20]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	08db      	lsrs	r3, r3, #3
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d022      	beq.n	8004b6c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6919      	ldr	r1, [r3, #16]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b36:	f7ff f85d 	bl	8003bf4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6919      	ldr	r1, [r3, #16]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f7ff f8a9 	bl	8003c9e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6818      	ldr	r0, [r3, #0]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d102      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x126>
 8004b5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b60:	e000      	b.n	8004b64 <HAL_ADC_ConfigChannel+0x128>
 8004b62:	2300      	movs	r3, #0
 8004b64:	461a      	mov	r2, r3
 8004b66:	f7ff f8b5 	bl	8003cd4 <LL_ADC_SetOffsetSaturation>
 8004b6a:	e17b      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2100      	movs	r1, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff f862 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10a      	bne.n	8004b98 <HAL_ADC_ConfigChannel+0x15c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2100      	movs	r1, #0
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff f857 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	0e9b      	lsrs	r3, r3, #26
 8004b92:	f003 021f 	and.w	r2, r3, #31
 8004b96:	e01e      	b.n	8004bd6 <HAL_ADC_ConfigChannel+0x19a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff f84c 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004baa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004bae:	fa93 f3a3 	rbit	r3, r3
 8004bb2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004bb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004bba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004bbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004bc6:	2320      	movs	r3, #32
 8004bc8:	e004      	b.n	8004bd4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004bca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bce:	fab3 f383 	clz	r3, r3
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d105      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x1b2>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	0e9b      	lsrs	r3, r3, #26
 8004be8:	f003 031f 	and.w	r3, r3, #31
 8004bec:	e018      	b.n	8004c20 <HAL_ADC_ConfigChannel+0x1e4>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004bfa:	fa93 f3a3 	rbit	r3, r3
 8004bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004c0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004c12:	2320      	movs	r3, #32
 8004c14:	e004      	b.n	8004c20 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004c16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c1a:	fab3 f383 	clz	r3, r3
 8004c1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d106      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff f81b 	bl	8003c68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2101      	movs	r1, #1
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fe ffff 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x222>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe fff4 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004c54:	4603      	mov	r3, r0
 8004c56:	0e9b      	lsrs	r3, r3, #26
 8004c58:	f003 021f 	and.w	r2, r3, #31
 8004c5c:	e01e      	b.n	8004c9c <HAL_ADC_ConfigChannel+0x260>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2101      	movs	r1, #1
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fe ffe9 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c74:	fa93 f3a3 	rbit	r3, r3
 8004c78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004c7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004c84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004c8c:	2320      	movs	r3, #32
 8004c8e:	e004      	b.n	8004c9a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004c90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c94:	fab3 f383 	clz	r3, r3
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0x278>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	0e9b      	lsrs	r3, r3, #26
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	e018      	b.n	8004ce6 <HAL_ADC_ConfigChannel+0x2aa>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cc0:	fa93 f3a3 	rbit	r3, r3
 8004cc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004cc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ccc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004cd8:	2320      	movs	r3, #32
 8004cda:	e004      	b.n	8004ce6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ce0:	fab3 f383 	clz	r3, r3
 8004ce4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d106      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fe ffb8 	bl	8003c68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2102      	movs	r1, #2
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fe ff9c 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x2e8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2102      	movs	r1, #2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fe ff91 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	0e9b      	lsrs	r3, r3, #26
 8004d1e:	f003 021f 	and.w	r2, r3, #31
 8004d22:	e01e      	b.n	8004d62 <HAL_ADC_ConfigChannel+0x326>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2102      	movs	r1, #2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fe ff86 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d3a:	fa93 f3a3 	rbit	r3, r3
 8004d3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004d4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004d52:	2320      	movs	r3, #32
 8004d54:	e004      	b.n	8004d60 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004d56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004d5a:	fab3 f383 	clz	r3, r3
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d105      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x33e>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	0e9b      	lsrs	r3, r3, #26
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	e016      	b.n	8004da8 <HAL_ADC_ConfigChannel+0x36c>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d86:	fa93 f3a3 	rbit	r3, r3
 8004d8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004d8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004d9a:	2320      	movs	r3, #32
 8004d9c:	e004      	b.n	8004da8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004d9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004da2:	fab3 f383 	clz	r3, r3
 8004da6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d106      	bne.n	8004dba <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2200      	movs	r2, #0
 8004db2:	2102      	movs	r1, #2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fe ff57 	bl	8003c68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2103      	movs	r1, #3
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fe ff3b 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <HAL_ADC_ConfigChannel+0x3aa>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2103      	movs	r1, #3
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe ff30 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	0e9b      	lsrs	r3, r3, #26
 8004de0:	f003 021f 	and.w	r2, r3, #31
 8004de4:	e017      	b.n	8004e16 <HAL_ADC_ConfigChannel+0x3da>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2103      	movs	r1, #3
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fe ff25 	bl	8003c3c <LL_ADC_GetOffsetChannel>
 8004df2:	4603      	mov	r3, r0
 8004df4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004df8:	fa93 f3a3 	rbit	r3, r3
 8004dfc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004dfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e00:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004e02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004e08:	2320      	movs	r3, #32
 8004e0a:	e003      	b.n	8004e14 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004e0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e0e:	fab3 f383 	clz	r3, r3
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d105      	bne.n	8004e2e <HAL_ADC_ConfigChannel+0x3f2>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	0e9b      	lsrs	r3, r3, #26
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	e011      	b.n	8004e52 <HAL_ADC_ConfigChannel+0x416>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e36:	fa93 f3a3 	rbit	r3, r3
 8004e3a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004e3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004e46:	2320      	movs	r3, #32
 8004e48:	e003      	b.n	8004e52 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004e4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e4c:	fab3 f383 	clz	r3, r3
 8004e50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d106      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2103      	movs	r1, #3
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe ff02 	bl	8003c68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff f881 	bl	8003f70 <LL_ADC_IsEnabled>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f040 813d 	bne.w	80050f0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6819      	ldr	r1, [r3, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	461a      	mov	r2, r3
 8004e84:	f7fe ffd2 	bl	8003e2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4aa2      	ldr	r2, [pc, #648]	@ (8005118 <HAL_ADC_ConfigChannel+0x6dc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	f040 812e 	bne.w	80050f0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10b      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x480>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	0e9b      	lsrs	r3, r3, #26
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2b09      	cmp	r3, #9
 8004eb2:	bf94      	ite	ls
 8004eb4:	2301      	movls	r3, #1
 8004eb6:	2300      	movhi	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	e019      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x4b4>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ec4:	fa93 f3a3 	rbit	r3, r3
 8004ec8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004eca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ecc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004ece:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004ed4:	2320      	movs	r3, #32
 8004ed6:	e003      	b.n	8004ee0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004ed8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004eda:	fab3 f383 	clz	r3, r3
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	2b09      	cmp	r3, #9
 8004ee8:	bf94      	ite	ls
 8004eea:	2301      	movls	r3, #1
 8004eec:	2300      	movhi	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d079      	beq.n	8004fe8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d107      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x4d4>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	0e9b      	lsrs	r3, r3, #26
 8004f06:	3301      	adds	r3, #1
 8004f08:	069b      	lsls	r3, r3, #26
 8004f0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f0e:	e015      	b.n	8004f3c <HAL_ADC_ConfigChannel+0x500>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f18:	fa93 f3a3 	rbit	r3, r3
 8004f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f20:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004f28:	2320      	movs	r3, #32
 8004f2a:	e003      	b.n	8004f34 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f2e:	fab3 f383 	clz	r3, r3
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	3301      	adds	r3, #1
 8004f36:	069b      	lsls	r3, r3, #26
 8004f38:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d109      	bne.n	8004f5c <HAL_ADC_ConfigChannel+0x520>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	0e9b      	lsrs	r3, r3, #26
 8004f4e:	3301      	adds	r3, #1
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	2101      	movs	r1, #1
 8004f56:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5a:	e017      	b.n	8004f8c <HAL_ADC_ConfigChannel+0x550>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f64:	fa93 f3a3 	rbit	r3, r3
 8004f68:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004f74:	2320      	movs	r3, #32
 8004f76:	e003      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004f78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f7a:	fab3 f383 	clz	r3, r3
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	3301      	adds	r3, #1
 8004f82:	f003 031f 	and.w	r3, r3, #31
 8004f86:	2101      	movs	r1, #1
 8004f88:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8c:	ea42 0103 	orr.w	r1, r2, r3
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <HAL_ADC_ConfigChannel+0x576>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	0e9b      	lsrs	r3, r3, #26
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	f003 021f 	and.w	r2, r3, #31
 8004fa8:	4613      	mov	r3, r2
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	4413      	add	r3, r2
 8004fae:	051b      	lsls	r3, r3, #20
 8004fb0:	e018      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x5a8>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fba:	fa93 f3a3 	rbit	r3, r3
 8004fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004fca:	2320      	movs	r3, #32
 8004fcc:	e003      	b.n	8004fd6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fd0:	fab3 f383 	clz	r3, r3
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	f003 021f 	and.w	r2, r3, #31
 8004fdc:	4613      	mov	r3, r2
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	4413      	add	r3, r2
 8004fe2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	e07e      	b.n	80050e6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d107      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x5c8>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	0e9b      	lsrs	r3, r3, #26
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	069b      	lsls	r3, r3, #26
 8004ffe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005002:	e015      	b.n	8005030 <HAL_ADC_ConfigChannel+0x5f4>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500c:	fa93 f3a3 	rbit	r3, r3
 8005010:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005014:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800501c:	2320      	movs	r3, #32
 800501e:	e003      	b.n	8005028 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005022:	fab3 f383 	clz	r3, r3
 8005026:	b2db      	uxtb	r3, r3
 8005028:	3301      	adds	r3, #1
 800502a:	069b      	lsls	r3, r3, #26
 800502c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005038:	2b00      	cmp	r3, #0
 800503a:	d109      	bne.n	8005050 <HAL_ADC_ConfigChannel+0x614>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	0e9b      	lsrs	r3, r3, #26
 8005042:	3301      	adds	r3, #1
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	2101      	movs	r1, #1
 800504a:	fa01 f303 	lsl.w	r3, r1, r3
 800504e:	e017      	b.n	8005080 <HAL_ADC_ConfigChannel+0x644>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	fa93 f3a3 	rbit	r3, r3
 800505c:	61fb      	str	r3, [r7, #28]
  return result;
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005068:	2320      	movs	r3, #32
 800506a:	e003      	b.n	8005074 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	fab3 f383 	clz	r3, r3
 8005072:	b2db      	uxtb	r3, r3
 8005074:	3301      	adds	r3, #1
 8005076:	f003 031f 	and.w	r3, r3, #31
 800507a:	2101      	movs	r1, #1
 800507c:	fa01 f303 	lsl.w	r3, r1, r3
 8005080:	ea42 0103 	orr.w	r1, r2, r3
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10d      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x670>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	0e9b      	lsrs	r3, r3, #26
 8005096:	3301      	adds	r3, #1
 8005098:	f003 021f 	and.w	r2, r3, #31
 800509c:	4613      	mov	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4413      	add	r3, r2
 80050a2:	3b1e      	subs	r3, #30
 80050a4:	051b      	lsls	r3, r3, #20
 80050a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80050aa:	e01b      	b.n	80050e4 <HAL_ADC_ConfigChannel+0x6a8>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	fa93 f3a3 	rbit	r3, r3
 80050b8:	613b      	str	r3, [r7, #16]
  return result;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80050c4:	2320      	movs	r3, #32
 80050c6:	e003      	b.n	80050d0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	fab3 f383 	clz	r3, r3
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	3301      	adds	r3, #1
 80050d2:	f003 021f 	and.w	r2, r3, #31
 80050d6:	4613      	mov	r3, r2
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	4413      	add	r3, r2
 80050dc:	3b1e      	subs	r3, #30
 80050de:	051b      	lsls	r3, r3, #20
 80050e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050ea:	4619      	mov	r1, r3
 80050ec:	f7fe fe72 	bl	8003dd4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	4b09      	ldr	r3, [pc, #36]	@ (800511c <HAL_ADC_ConfigChannel+0x6e0>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80be 	beq.w	800527a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005106:	d004      	beq.n	8005112 <HAL_ADC_ConfigChannel+0x6d6>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a04      	ldr	r2, [pc, #16]	@ (8005120 <HAL_ADC_ConfigChannel+0x6e4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d10a      	bne.n	8005128 <HAL_ADC_ConfigChannel+0x6ec>
 8005112:	4b04      	ldr	r3, [pc, #16]	@ (8005124 <HAL_ADC_ConfigChannel+0x6e8>)
 8005114:	e009      	b.n	800512a <HAL_ADC_ConfigChannel+0x6ee>
 8005116:	bf00      	nop
 8005118:	407f0000 	.word	0x407f0000
 800511c:	80080000 	.word	0x80080000
 8005120:	50000100 	.word	0x50000100
 8005124:	50000300 	.word	0x50000300
 8005128:	4b59      	ldr	r3, [pc, #356]	@ (8005290 <HAL_ADC_ConfigChannel+0x854>)
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe fd54 	bl	8003bd8 <LL_ADC_GetCommonPathInternalCh>
 8005130:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a56      	ldr	r2, [pc, #344]	@ (8005294 <HAL_ADC_ConfigChannel+0x858>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_ADC_ConfigChannel+0x70c>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a55      	ldr	r2, [pc, #340]	@ (8005298 <HAL_ADC_ConfigChannel+0x85c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d13a      	bne.n	80051be <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005148:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800514c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d134      	bne.n	80051be <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800515c:	d005      	beq.n	800516a <HAL_ADC_ConfigChannel+0x72e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a4e      	ldr	r2, [pc, #312]	@ (800529c <HAL_ADC_ConfigChannel+0x860>)
 8005164:	4293      	cmp	r3, r2
 8005166:	f040 8085 	bne.w	8005274 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005172:	d004      	beq.n	800517e <HAL_ADC_ConfigChannel+0x742>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a49      	ldr	r2, [pc, #292]	@ (80052a0 <HAL_ADC_ConfigChannel+0x864>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d101      	bne.n	8005182 <HAL_ADC_ConfigChannel+0x746>
 800517e:	4a49      	ldr	r2, [pc, #292]	@ (80052a4 <HAL_ADC_ConfigChannel+0x868>)
 8005180:	e000      	b.n	8005184 <HAL_ADC_ConfigChannel+0x748>
 8005182:	4a43      	ldr	r2, [pc, #268]	@ (8005290 <HAL_ADC_ConfigChannel+0x854>)
 8005184:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005188:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f7fe fd0f 	bl	8003bb2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005194:	4b44      	ldr	r3, [pc, #272]	@ (80052a8 <HAL_ADC_ConfigChannel+0x86c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	099b      	lsrs	r3, r3, #6
 800519a:	4a44      	ldr	r2, [pc, #272]	@ (80052ac <HAL_ADC_ConfigChannel+0x870>)
 800519c:	fba2 2303 	umull	r2, r3, r2, r3
 80051a0:	099b      	lsrs	r3, r3, #6
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	4613      	mov	r3, r2
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051ae:	e002      	b.n	80051b6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f9      	bne.n	80051b0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051bc:	e05a      	b.n	8005274 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a3b      	ldr	r2, [pc, #236]	@ (80052b0 <HAL_ADC_ConfigChannel+0x874>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d125      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80051c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d11f      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a31      	ldr	r2, [pc, #196]	@ (80052a0 <HAL_ADC_ConfigChannel+0x864>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d104      	bne.n	80051e8 <HAL_ADC_ConfigChannel+0x7ac>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a34      	ldr	r2, [pc, #208]	@ (80052b4 <HAL_ADC_ConfigChannel+0x878>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d047      	beq.n	8005278 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051f0:	d004      	beq.n	80051fc <HAL_ADC_ConfigChannel+0x7c0>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a2a      	ldr	r2, [pc, #168]	@ (80052a0 <HAL_ADC_ConfigChannel+0x864>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d101      	bne.n	8005200 <HAL_ADC_ConfigChannel+0x7c4>
 80051fc:	4a29      	ldr	r2, [pc, #164]	@ (80052a4 <HAL_ADC_ConfigChannel+0x868>)
 80051fe:	e000      	b.n	8005202 <HAL_ADC_ConfigChannel+0x7c6>
 8005200:	4a23      	ldr	r2, [pc, #140]	@ (8005290 <HAL_ADC_ConfigChannel+0x854>)
 8005202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005206:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800520a:	4619      	mov	r1, r3
 800520c:	4610      	mov	r0, r2
 800520e:	f7fe fcd0 	bl	8003bb2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005212:	e031      	b.n	8005278 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a27      	ldr	r2, [pc, #156]	@ (80052b8 <HAL_ADC_ConfigChannel+0x87c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d12d      	bne.n	800527a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800521e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d127      	bne.n	800527a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1c      	ldr	r2, [pc, #112]	@ (80052a0 <HAL_ADC_ConfigChannel+0x864>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d022      	beq.n	800527a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800523c:	d004      	beq.n	8005248 <HAL_ADC_ConfigChannel+0x80c>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a17      	ldr	r2, [pc, #92]	@ (80052a0 <HAL_ADC_ConfigChannel+0x864>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d101      	bne.n	800524c <HAL_ADC_ConfigChannel+0x810>
 8005248:	4a16      	ldr	r2, [pc, #88]	@ (80052a4 <HAL_ADC_ConfigChannel+0x868>)
 800524a:	e000      	b.n	800524e <HAL_ADC_ConfigChannel+0x812>
 800524c:	4a10      	ldr	r2, [pc, #64]	@ (8005290 <HAL_ADC_ConfigChannel+0x854>)
 800524e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005252:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005256:	4619      	mov	r1, r3
 8005258:	4610      	mov	r0, r2
 800525a:	f7fe fcaa 	bl	8003bb2 <LL_ADC_SetCommonPathInternalCh>
 800525e:	e00c      	b.n	800527a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005264:	f043 0220 	orr.w	r2, r3, #32
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005272:	e002      	b.n	800527a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005274:	bf00      	nop
 8005276:	e000      	b.n	800527a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005278:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005282:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005286:	4618      	mov	r0, r3
 8005288:	37d8      	adds	r7, #216	@ 0xd8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	50000700 	.word	0x50000700
 8005294:	c3210000 	.word	0xc3210000
 8005298:	90c00010 	.word	0x90c00010
 800529c:	50000600 	.word	0x50000600
 80052a0:	50000100 	.word	0x50000100
 80052a4:	50000300 	.word	0x50000300
 80052a8:	20000274 	.word	0x20000274
 80052ac:	053e2d63 	.word	0x053e2d63
 80052b0:	c7520000 	.word	0xc7520000
 80052b4:	50000500 	.word	0x50000500
 80052b8:	cb840000 	.word	0xcb840000

080052bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fe fe4f 	bl	8003f70 <LL_ADC_IsEnabled>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d176      	bne.n	80053c6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	4b3c      	ldr	r3, [pc, #240]	@ (80053d0 <ADC_Enable+0x114>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00d      	beq.n	8005302 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ea:	f043 0210 	orr.w	r2, r3, #16
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052f6:	f043 0201 	orr.w	r2, r3, #1
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e062      	b.n	80053c8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f7fe fe1e 	bl	8003f48 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005314:	d004      	beq.n	8005320 <ADC_Enable+0x64>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2e      	ldr	r2, [pc, #184]	@ (80053d4 <ADC_Enable+0x118>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d101      	bne.n	8005324 <ADC_Enable+0x68>
 8005320:	4b2d      	ldr	r3, [pc, #180]	@ (80053d8 <ADC_Enable+0x11c>)
 8005322:	e000      	b.n	8005326 <ADC_Enable+0x6a>
 8005324:	4b2d      	ldr	r3, [pc, #180]	@ (80053dc <ADC_Enable+0x120>)
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe fc56 	bl	8003bd8 <LL_ADC_GetCommonPathInternalCh>
 800532c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800532e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005332:	2b00      	cmp	r3, #0
 8005334:	d013      	beq.n	800535e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005336:	4b2a      	ldr	r3, [pc, #168]	@ (80053e0 <ADC_Enable+0x124>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	099b      	lsrs	r3, r3, #6
 800533c:	4a29      	ldr	r2, [pc, #164]	@ (80053e4 <ADC_Enable+0x128>)
 800533e:	fba2 2303 	umull	r2, r3, r2, r3
 8005342:	099b      	lsrs	r3, r3, #6
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	4613      	mov	r3, r2
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005350:	e002      	b.n	8005358 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	3b01      	subs	r3, #1
 8005356:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f9      	bne.n	8005352 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800535e:	f7fe fc09 	bl	8003b74 <HAL_GetTick>
 8005362:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005364:	e028      	b.n	80053b8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe fe00 	bl	8003f70 <LL_ADC_IsEnabled>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d104      	bne.n	8005380 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f7fe fde4 	bl	8003f48 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005380:	f7fe fbf8 	bl	8003b74 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d914      	bls.n	80053b8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b01      	cmp	r3, #1
 800539a:	d00d      	beq.n	80053b8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a0:	f043 0210 	orr.w	r2, r3, #16
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ac:	f043 0201 	orr.w	r2, r3, #1
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e007      	b.n	80053c8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d1cf      	bne.n	8005366 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	8000003f 	.word	0x8000003f
 80053d4:	50000100 	.word	0x50000100
 80053d8:	50000300 	.word	0x50000300
 80053dc:	50000700 	.word	0x50000700
 80053e0:	20000274 	.word	0x20000274
 80053e4:	053e2d63 	.word	0x053e2d63

080053e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d14b      	bne.n	800549a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005406:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b00      	cmp	r3, #0
 800541a:	d021      	beq.n	8005460 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f7fe fc85 	bl	8003d30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d032      	beq.n	8005492 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d12b      	bne.n	8005492 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800543e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800544a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d11f      	bne.n	8005492 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005456:	f043 0201 	orr.w	r2, r3, #1
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800545e:	e018      	b.n	8005492 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d111      	bne.n	8005492 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005472:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800547e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d105      	bne.n	8005492 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800548a:	f043 0201 	orr.w	r2, r3, #1
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f7ff faaa 	bl	80049ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005498:	e00e      	b.n	80054b8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800549e:	f003 0310 	and.w	r3, r3, #16
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7ff fabe 	bl	8004a28 <HAL_ADC_ErrorCallback>
}
 80054ac:	e004      	b.n	80054b8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	4798      	blx	r3
}
 80054b8:	bf00      	nop
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f7ff fa96 	bl	8004a00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054d4:	bf00      	nop
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054fa:	f043 0204 	orr.w	r2, r3, #4
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f7ff fa90 	bl	8004a28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005508:	bf00      	nop
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <LL_ADC_IsEnabled>:
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <LL_ADC_IsEnabled+0x18>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <LL_ADC_IsEnabled+0x1a>
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <LL_ADC_REG_IsConversionOngoing>:
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b04      	cmp	r3, #4
 8005548:	d101      	bne.n	800554e <LL_ADC_REG_IsConversionOngoing+0x18>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80055c0:	b590      	push	{r4, r7, lr}
 80055c2:	b0a1      	sub	sp, #132	@ 0x84
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80055da:	2302      	movs	r3, #2
 80055dc:	e0e7      	b.n	80057ae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80055e6:	2300      	movs	r3, #0
 80055e8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80055ea:	2300      	movs	r3, #0
 80055ec:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055f6:	d102      	bne.n	80055fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80055f8:	4b6f      	ldr	r3, [pc, #444]	@ (80057b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80055fa:	60bb      	str	r3, [r7, #8]
 80055fc:	e009      	b.n	8005612 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a6e      	ldr	r2, [pc, #440]	@ (80057bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d102      	bne.n	800560e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005608:	4b6d      	ldr	r3, [pc, #436]	@ (80057c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800560a:	60bb      	str	r3, [r7, #8]
 800560c:	e001      	b.n	8005612 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10b      	bne.n	8005630 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800561c:	f043 0220 	orr.w	r2, r3, #32
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e0be      	b.n	80057ae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff ff7f 	bl	8005536 <LL_ADC_REG_IsConversionOngoing>
 8005638:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff ff79 	bl	8005536 <LL_ADC_REG_IsConversionOngoing>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	f040 80a0 	bne.w	800578c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800564c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 809c 	bne.w	800578c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800565c:	d004      	beq.n	8005668 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a55      	ldr	r2, [pc, #340]	@ (80057b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d101      	bne.n	800566c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005668:	4b56      	ldr	r3, [pc, #344]	@ (80057c4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800566a:	e000      	b.n	800566e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800566c:	4b56      	ldr	r3, [pc, #344]	@ (80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800566e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d04b      	beq.n	8005710 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005678:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	6859      	ldr	r1, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800568a:	035b      	lsls	r3, r3, #13
 800568c:	430b      	orrs	r3, r1
 800568e:	431a      	orrs	r2, r3
 8005690:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005692:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800569c:	d004      	beq.n	80056a8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a45      	ldr	r2, [pc, #276]	@ (80057b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d10f      	bne.n	80056c8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80056a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80056ac:	f7ff ff30 	bl	8005510 <LL_ADC_IsEnabled>
 80056b0:	4604      	mov	r4, r0
 80056b2:	4841      	ldr	r0, [pc, #260]	@ (80057b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80056b4:	f7ff ff2c 	bl	8005510 <LL_ADC_IsEnabled>
 80056b8:	4603      	mov	r3, r0
 80056ba:	4323      	orrs	r3, r4
 80056bc:	2b00      	cmp	r3, #0
 80056be:	bf0c      	ite	eq
 80056c0:	2301      	moveq	r3, #1
 80056c2:	2300      	movne	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	e012      	b.n	80056ee <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80056c8:	483c      	ldr	r0, [pc, #240]	@ (80057bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80056ca:	f7ff ff21 	bl	8005510 <LL_ADC_IsEnabled>
 80056ce:	4604      	mov	r4, r0
 80056d0:	483b      	ldr	r0, [pc, #236]	@ (80057c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80056d2:	f7ff ff1d 	bl	8005510 <LL_ADC_IsEnabled>
 80056d6:	4603      	mov	r3, r0
 80056d8:	431c      	orrs	r4, r3
 80056da:	483c      	ldr	r0, [pc, #240]	@ (80057cc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80056dc:	f7ff ff18 	bl	8005510 <LL_ADC_IsEnabled>
 80056e0:	4603      	mov	r3, r0
 80056e2:	4323      	orrs	r3, r4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bf0c      	ite	eq
 80056e8:	2301      	moveq	r3, #1
 80056ea:	2300      	movne	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d056      	beq.n	80057a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80056f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80056fa:	f023 030f 	bic.w	r3, r3, #15
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	6811      	ldr	r1, [r2, #0]
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	6892      	ldr	r2, [r2, #8]
 8005706:	430a      	orrs	r2, r1
 8005708:	431a      	orrs	r2, r3
 800570a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800570c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800570e:	e047      	b.n	80057a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005710:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005718:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800571a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005724:	d004      	beq.n	8005730 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a23      	ldr	r2, [pc, #140]	@ (80057b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d10f      	bne.n	8005750 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005730:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005734:	f7ff feec 	bl	8005510 <LL_ADC_IsEnabled>
 8005738:	4604      	mov	r4, r0
 800573a:	481f      	ldr	r0, [pc, #124]	@ (80057b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800573c:	f7ff fee8 	bl	8005510 <LL_ADC_IsEnabled>
 8005740:	4603      	mov	r3, r0
 8005742:	4323      	orrs	r3, r4
 8005744:	2b00      	cmp	r3, #0
 8005746:	bf0c      	ite	eq
 8005748:	2301      	moveq	r3, #1
 800574a:	2300      	movne	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e012      	b.n	8005776 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005750:	481a      	ldr	r0, [pc, #104]	@ (80057bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005752:	f7ff fedd 	bl	8005510 <LL_ADC_IsEnabled>
 8005756:	4604      	mov	r4, r0
 8005758:	4819      	ldr	r0, [pc, #100]	@ (80057c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800575a:	f7ff fed9 	bl	8005510 <LL_ADC_IsEnabled>
 800575e:	4603      	mov	r3, r0
 8005760:	431c      	orrs	r4, r3
 8005762:	481a      	ldr	r0, [pc, #104]	@ (80057cc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005764:	f7ff fed4 	bl	8005510 <LL_ADC_IsEnabled>
 8005768:	4603      	mov	r3, r0
 800576a:	4323      	orrs	r3, r4
 800576c:	2b00      	cmp	r3, #0
 800576e:	bf0c      	ite	eq
 8005770:	2301      	moveq	r3, #1
 8005772:	2300      	movne	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d012      	beq.n	80057a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800577a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005782:	f023 030f 	bic.w	r3, r3, #15
 8005786:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005788:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800578a:	e009      	b.n	80057a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005790:	f043 0220 	orr.w	r2, r3, #32
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800579e:	e000      	b.n	80057a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80057a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80057aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3784      	adds	r7, #132	@ 0x84
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd90      	pop	{r4, r7, pc}
 80057b6:	bf00      	nop
 80057b8:	50000100 	.word	0x50000100
 80057bc:	50000400 	.word	0x50000400
 80057c0:	50000500 	.word	0x50000500
 80057c4:	50000300 	.word	0x50000300
 80057c8:	50000700 	.word	0x50000700
 80057cc:	50000600 	.word	0x50000600

080057d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005814 <__NVIC_SetPriorityGrouping+0x44>)
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80057ec:	4013      	ands	r3, r2
 80057ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80057fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005802:	4a04      	ldr	r2, [pc, #16]	@ (8005814 <__NVIC_SetPriorityGrouping+0x44>)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	60d3      	str	r3, [r2, #12]
}
 8005808:	bf00      	nop
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	e000ed00 	.word	0xe000ed00

08005818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800581c:	4b04      	ldr	r3, [pc, #16]	@ (8005830 <__NVIC_GetPriorityGrouping+0x18>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	0a1b      	lsrs	r3, r3, #8
 8005822:	f003 0307 	and.w	r3, r3, #7
}
 8005826:	4618      	mov	r0, r3
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	e000ed00 	.word	0xe000ed00

08005834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	4603      	mov	r3, r0
 800583c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800583e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005842:	2b00      	cmp	r3, #0
 8005844:	db0b      	blt.n	800585e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	f003 021f 	and.w	r2, r3, #31
 800584c:	4907      	ldr	r1, [pc, #28]	@ (800586c <__NVIC_EnableIRQ+0x38>)
 800584e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	2001      	movs	r0, #1
 8005856:	fa00 f202 	lsl.w	r2, r0, r2
 800585a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	e000e100 	.word	0xe000e100

08005870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	6039      	str	r1, [r7, #0]
 800587a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800587c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005880:	2b00      	cmp	r3, #0
 8005882:	db0a      	blt.n	800589a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	b2da      	uxtb	r2, r3
 8005888:	490c      	ldr	r1, [pc, #48]	@ (80058bc <__NVIC_SetPriority+0x4c>)
 800588a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588e:	0112      	lsls	r2, r2, #4
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	440b      	add	r3, r1
 8005894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005898:	e00a      	b.n	80058b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	b2da      	uxtb	r2, r3
 800589e:	4908      	ldr	r1, [pc, #32]	@ (80058c0 <__NVIC_SetPriority+0x50>)
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	3b04      	subs	r3, #4
 80058a8:	0112      	lsls	r2, r2, #4
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	440b      	add	r3, r1
 80058ae:	761a      	strb	r2, [r3, #24]
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	e000e100 	.word	0xe000e100
 80058c0:	e000ed00 	.word	0xe000ed00

080058c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b089      	sub	sp, #36	@ 0x24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f1c3 0307 	rsb	r3, r3, #7
 80058de:	2b04      	cmp	r3, #4
 80058e0:	bf28      	it	cs
 80058e2:	2304      	movcs	r3, #4
 80058e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	3304      	adds	r3, #4
 80058ea:	2b06      	cmp	r3, #6
 80058ec:	d902      	bls.n	80058f4 <NVIC_EncodePriority+0x30>
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	3b03      	subs	r3, #3
 80058f2:	e000      	b.n	80058f6 <NVIC_EncodePriority+0x32>
 80058f4:	2300      	movs	r3, #0
 80058f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058f8:	f04f 32ff 	mov.w	r2, #4294967295
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	43da      	mvns	r2, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	401a      	ands	r2, r3
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800590c:	f04f 31ff 	mov.w	r1, #4294967295
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	fa01 f303 	lsl.w	r3, r1, r3
 8005916:	43d9      	mvns	r1, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800591c:	4313      	orrs	r3, r2
         );
}
 800591e:	4618      	mov	r0, r3
 8005920:	3724      	adds	r7, #36	@ 0x24
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3b01      	subs	r3, #1
 8005938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800593c:	d301      	bcc.n	8005942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800593e:	2301      	movs	r3, #1
 8005940:	e00f      	b.n	8005962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005942:	4a0a      	ldr	r2, [pc, #40]	@ (800596c <SysTick_Config+0x40>)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3b01      	subs	r3, #1
 8005948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800594a:	210f      	movs	r1, #15
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	f7ff ff8e 	bl	8005870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005954:	4b05      	ldr	r3, [pc, #20]	@ (800596c <SysTick_Config+0x40>)
 8005956:	2200      	movs	r2, #0
 8005958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800595a:	4b04      	ldr	r3, [pc, #16]	@ (800596c <SysTick_Config+0x40>)
 800595c:	2207      	movs	r2, #7
 800595e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	e000e010 	.word	0xe000e010

08005970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff ff29 	bl	80057d0 <__NVIC_SetPriorityGrouping>
}
 800597e:	bf00      	nop
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b086      	sub	sp, #24
 800598a:	af00      	add	r7, sp, #0
 800598c:	4603      	mov	r3, r0
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
 8005992:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005994:	f7ff ff40 	bl	8005818 <__NVIC_GetPriorityGrouping>
 8005998:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	68b9      	ldr	r1, [r7, #8]
 800599e:	6978      	ldr	r0, [r7, #20]
 80059a0:	f7ff ff90 	bl	80058c4 <NVIC_EncodePriority>
 80059a4:	4602      	mov	r2, r0
 80059a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059aa:	4611      	mov	r1, r2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff ff5f 	bl	8005870 <__NVIC_SetPriority>
}
 80059b2:	bf00      	nop
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
 80059c0:	4603      	mov	r3, r0
 80059c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff ff33 	bl	8005834 <__NVIC_EnableIRQ>
}
 80059ce:	bf00      	nop
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff ffa4 	bl	800592c <SysTick_Config>
 80059e4:	4603      	mov	r3, r0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e08d      	b.n	8005b1e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	4b47      	ldr	r3, [pc, #284]	@ (8005b28 <HAL_DMA_Init+0x138>)
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d80f      	bhi.n	8005a2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	4b45      	ldr	r3, [pc, #276]	@ (8005b2c <HAL_DMA_Init+0x13c>)
 8005a16:	4413      	add	r3, r2
 8005a18:	4a45      	ldr	r2, [pc, #276]	@ (8005b30 <HAL_DMA_Init+0x140>)
 8005a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1e:	091b      	lsrs	r3, r3, #4
 8005a20:	009a      	lsls	r2, r3, #2
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a42      	ldr	r2, [pc, #264]	@ (8005b34 <HAL_DMA_Init+0x144>)
 8005a2a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a2c:	e00e      	b.n	8005a4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	4b40      	ldr	r3, [pc, #256]	@ (8005b38 <HAL_DMA_Init+0x148>)
 8005a36:	4413      	add	r3, r2
 8005a38:	4a3d      	ldr	r2, [pc, #244]	@ (8005b30 <HAL_DMA_Init+0x140>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	091b      	lsrs	r3, r3, #4
 8005a40:	009a      	lsls	r2, r3, #2
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a3c      	ldr	r2, [pc, #240]	@ (8005b3c <HAL_DMA_Init+0x14c>)
 8005a4a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fa76 	bl	8005f90 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005aac:	d102      	bne.n	8005ab4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ac8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d010      	beq.n	8005af4 <HAL_DMA_Init+0x104>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d80c      	bhi.n	8005af4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa96 	bl	800600c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	e008      	b.n	8005b06 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40020407 	.word	0x40020407
 8005b2c:	bffdfff8 	.word	0xbffdfff8
 8005b30:	cccccccd 	.word	0xcccccccd
 8005b34:	40020000 	.word	0x40020000
 8005b38:	bffdfbf8 	.word	0xbffdfbf8
 8005b3c:	40020400 	.word	0x40020400

08005b40 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_DMA_Start_IT+0x20>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e066      	b.n	8005c2e <HAL_DMA_Start_IT+0xee>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d155      	bne.n	8005c20 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0201 	bic.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f9bb 	bl	8005f14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 020e 	orr.w	r2, r2, #14
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	e00f      	b.n	8005bd8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0204 	bic.w	r2, r2, #4
 8005bc6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 020a 	orr.w	r2, r2, #10
 8005bd6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d007      	beq.n	8005bf6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bf4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d007      	beq.n	8005c0e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c0c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	e005      	b.n	8005c2c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c28:	2302      	movs	r3, #2
 8005c2a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d005      	beq.n	8005c5a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2204      	movs	r2, #4
 8005c52:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
 8005c58:	e037      	b.n	8005cca <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 020e 	bic.w	r2, r2, #14
 8005c68:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c78:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0201 	bic.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8e:	f003 021f 	and.w	r2, r3, #31
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c96:	2101      	movs	r1, #1
 8005c98:	fa01 f202 	lsl.w	r2, r1, r2
 8005c9c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ca6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00c      	beq.n	8005cca <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cbe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005cc8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d00d      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2204      	movs	r2, #4
 8005d04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	73fb      	strb	r3, [r7, #15]
 8005d1a:	e047      	b.n	8005dac <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 020e 	bic.w	r2, r2, #14
 8005d2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0201 	bic.w	r2, r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d50:	f003 021f 	and.w	r2, r3, #31
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d58:	2101      	movs	r1, #1
 8005d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8005d5e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d68:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00c      	beq.n	8005d8c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d80:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005d8a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	4798      	blx	r3
    }
  }
  return status;
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd2:	f003 031f 	and.w	r3, r3, #31
 8005dd6:	2204      	movs	r2, #4
 8005dd8:	409a      	lsls	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d026      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x7a>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d021      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d107      	bne.n	8005e0a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0204 	bic.w	r2, r2, #4
 8005e08:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e0e:	f003 021f 	and.w	r2, r3, #31
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e16:	2104      	movs	r1, #4
 8005e18:	fa01 f202 	lsl.w	r2, r1, r2
 8005e1c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d071      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005e2e:	e06c      	b.n	8005f0a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e34:	f003 031f 	and.w	r3, r3, #31
 8005e38:	2202      	movs	r2, #2
 8005e3a:	409a      	lsls	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d02e      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d029      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0320 	and.w	r3, r3, #32
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10b      	bne.n	8005e74 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 020a 	bic.w	r2, r2, #10
 8005e6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e78:	f003 021f 	and.w	r2, r3, #31
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e80:	2102      	movs	r1, #2
 8005e82:	fa01 f202 	lsl.w	r2, r1, r2
 8005e86:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d038      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005ea0:	e033      	b.n	8005f0a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea6:	f003 031f 	and.w	r3, r3, #31
 8005eaa:	2208      	movs	r2, #8
 8005eac:	409a      	lsls	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d02a      	beq.n	8005f0c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d025      	beq.n	8005f0c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 020e 	bic.w	r2, r2, #14
 8005ece:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed4:	f003 021f 	and.w	r2, r3, #31
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005edc:	2101      	movs	r1, #1
 8005ede:	fa01 f202 	lsl.w	r2, r1, r2
 8005ee2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d004      	beq.n	8005f0c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005f0a:	bf00      	nop
 8005f0c:	bf00      	nop
}
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f2a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f3c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f42:	f003 021f 	and.w	r2, r3, #31
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b10      	cmp	r3, #16
 8005f60:	d108      	bne.n	8005f74 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f72:	e007      	b.n	8005f84 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	60da      	str	r2, [r3, #12]
}
 8005f84:	bf00      	nop
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4b16      	ldr	r3, [pc, #88]	@ (8005ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d802      	bhi.n	8005faa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005fa4:	4b15      	ldr	r3, [pc, #84]	@ (8005ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	e001      	b.n	8005fae <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005faa:	4b15      	ldr	r3, [pc, #84]	@ (8006000 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005fac:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	3b08      	subs	r3, #8
 8005fba:	4a12      	ldr	r2, [pc, #72]	@ (8006004 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc0:	091b      	lsrs	r3, r3, #4
 8005fc2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc8:	089b      	lsrs	r3, r3, #2
 8005fca:	009a      	lsls	r2, r3, #2
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4413      	add	r3, r2
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8006008 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005fda:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f003 031f 	and.w	r3, r3, #31
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	409a      	lsls	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005fea:	bf00      	nop
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40020407 	.word	0x40020407
 8005ffc:	40020800 	.word	0x40020800
 8006000:	40020820 	.word	0x40020820
 8006004:	cccccccd 	.word	0xcccccccd
 8006008:	40020880 	.word	0x40020880

0800600c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	b2db      	uxtb	r3, r3
 800601a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4b0b      	ldr	r3, [pc, #44]	@ (800604c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006020:	4413      	add	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	461a      	mov	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a08      	ldr	r2, [pc, #32]	@ (8006050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800602e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3b01      	subs	r3, #1
 8006034:	f003 031f 	and.w	r3, r3, #31
 8006038:	2201      	movs	r2, #1
 800603a:	409a      	lsls	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006040:	bf00      	nop
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	1000823f 	.word	0x1000823f
 8006050:	40020940 	.word	0x40020940

08006054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800605e:	2300      	movs	r3, #0
 8006060:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006062:	e15a      	b.n	800631a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	2101      	movs	r1, #1
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	fa01 f303 	lsl.w	r3, r1, r3
 8006070:	4013      	ands	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 814c 	beq.w	8006314 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f003 0303 	and.w	r3, r3, #3
 8006084:	2b01      	cmp	r3, #1
 8006086:	d005      	beq.n	8006094 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006090:	2b02      	cmp	r3, #2
 8006092:	d130      	bne.n	80060f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	2203      	movs	r2, #3
 80060a0:	fa02 f303 	lsl.w	r3, r2, r3
 80060a4:	43db      	mvns	r3, r3
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4013      	ands	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	fa02 f303 	lsl.w	r3, r2, r3
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ca:	2201      	movs	r2, #1
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	fa02 f303 	lsl.w	r3, r2, r3
 80060d2:	43db      	mvns	r3, r3
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4013      	ands	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	091b      	lsrs	r3, r3, #4
 80060e0:	f003 0201 	and.w	r2, r3, #1
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d017      	beq.n	8006132 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	2203      	movs	r2, #3
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	43db      	mvns	r3, r3
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4013      	ands	r3, r2
 8006118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d123      	bne.n	8006186 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	08da      	lsrs	r2, r3, #3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3208      	adds	r2, #8
 8006146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	220f      	movs	r2, #15
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	43db      	mvns	r3, r3
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4013      	ands	r3, r2
 8006160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	08da      	lsrs	r2, r3, #3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3208      	adds	r2, #8
 8006180:	6939      	ldr	r1, [r7, #16]
 8006182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	2203      	movs	r2, #3
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	43db      	mvns	r3, r3
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4013      	ands	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f003 0203 	and.w	r2, r3, #3
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 80a6 	beq.w	8006314 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061c8:	4b5b      	ldr	r3, [pc, #364]	@ (8006338 <HAL_GPIO_Init+0x2e4>)
 80061ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061cc:	4a5a      	ldr	r2, [pc, #360]	@ (8006338 <HAL_GPIO_Init+0x2e4>)
 80061ce:	f043 0301 	orr.w	r3, r3, #1
 80061d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80061d4:	4b58      	ldr	r3, [pc, #352]	@ (8006338 <HAL_GPIO_Init+0x2e4>)
 80061d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	60bb      	str	r3, [r7, #8]
 80061de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061e0:	4a56      	ldr	r2, [pc, #344]	@ (800633c <HAL_GPIO_Init+0x2e8>)
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	089b      	lsrs	r3, r3, #2
 80061e6:	3302      	adds	r3, #2
 80061e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f003 0303 	and.w	r3, r3, #3
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	220f      	movs	r2, #15
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	43db      	mvns	r3, r3
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	4013      	ands	r3, r2
 8006202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800620a:	d01f      	beq.n	800624c <HAL_GPIO_Init+0x1f8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a4c      	ldr	r2, [pc, #304]	@ (8006340 <HAL_GPIO_Init+0x2ec>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d019      	beq.n	8006248 <HAL_GPIO_Init+0x1f4>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a4b      	ldr	r2, [pc, #300]	@ (8006344 <HAL_GPIO_Init+0x2f0>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d013      	beq.n	8006244 <HAL_GPIO_Init+0x1f0>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a4a      	ldr	r2, [pc, #296]	@ (8006348 <HAL_GPIO_Init+0x2f4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d00d      	beq.n	8006240 <HAL_GPIO_Init+0x1ec>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a49      	ldr	r2, [pc, #292]	@ (800634c <HAL_GPIO_Init+0x2f8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d007      	beq.n	800623c <HAL_GPIO_Init+0x1e8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a48      	ldr	r2, [pc, #288]	@ (8006350 <HAL_GPIO_Init+0x2fc>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d101      	bne.n	8006238 <HAL_GPIO_Init+0x1e4>
 8006234:	2305      	movs	r3, #5
 8006236:	e00a      	b.n	800624e <HAL_GPIO_Init+0x1fa>
 8006238:	2306      	movs	r3, #6
 800623a:	e008      	b.n	800624e <HAL_GPIO_Init+0x1fa>
 800623c:	2304      	movs	r3, #4
 800623e:	e006      	b.n	800624e <HAL_GPIO_Init+0x1fa>
 8006240:	2303      	movs	r3, #3
 8006242:	e004      	b.n	800624e <HAL_GPIO_Init+0x1fa>
 8006244:	2302      	movs	r3, #2
 8006246:	e002      	b.n	800624e <HAL_GPIO_Init+0x1fa>
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <HAL_GPIO_Init+0x1fa>
 800624c:	2300      	movs	r3, #0
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	f002 0203 	and.w	r2, r2, #3
 8006254:	0092      	lsls	r2, r2, #2
 8006256:	4093      	lsls	r3, r2
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	4313      	orrs	r3, r2
 800625c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800625e:	4937      	ldr	r1, [pc, #220]	@ (800633c <HAL_GPIO_Init+0x2e8>)
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	089b      	lsrs	r3, r3, #2
 8006264:	3302      	adds	r3, #2
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800626c:	4b39      	ldr	r3, [pc, #228]	@ (8006354 <HAL_GPIO_Init+0x300>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	43db      	mvns	r3, r3
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4013      	ands	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006290:	4a30      	ldr	r2, [pc, #192]	@ (8006354 <HAL_GPIO_Init+0x300>)
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006296:	4b2f      	ldr	r3, [pc, #188]	@ (8006354 <HAL_GPIO_Init+0x300>)
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	43db      	mvns	r3, r3
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4013      	ands	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80062ba:	4a26      	ldr	r2, [pc, #152]	@ (8006354 <HAL_GPIO_Init+0x300>)
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80062c0:	4b24      	ldr	r3, [pc, #144]	@ (8006354 <HAL_GPIO_Init+0x300>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	43db      	mvns	r3, r3
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4013      	ands	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80062e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006354 <HAL_GPIO_Init+0x300>)
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80062ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006354 <HAL_GPIO_Init+0x300>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	43db      	mvns	r3, r3
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4013      	ands	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800630e:	4a11      	ldr	r2, [pc, #68]	@ (8006354 <HAL_GPIO_Init+0x300>)
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	3301      	adds	r3, #1
 8006318:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	fa22 f303 	lsr.w	r3, r2, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	f47f ae9d 	bne.w	8006064 <HAL_GPIO_Init+0x10>
  }
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	40021000 	.word	0x40021000
 800633c:	40010000 	.word	0x40010000
 8006340:	48000400 	.word	0x48000400
 8006344:	48000800 	.word	0x48000800
 8006348:	48000c00 	.word	0x48000c00
 800634c:	48001000 	.word	0x48001000
 8006350:	48001400 	.word	0x48001400
 8006354:	40010400 	.word	0x40010400

08006358 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691a      	ldr	r2, [r3, #16]
 8006368:	887b      	ldrh	r3, [r7, #2]
 800636a:	4013      	ands	r3, r2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006370:	2301      	movs	r3, #1
 8006372:	73fb      	strb	r3, [r7, #15]
 8006374:	e001      	b.n	800637a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800637a:	7bfb      	ldrb	r3, [r7, #15]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	807b      	strh	r3, [r7, #2]
 8006394:	4613      	mov	r3, r2
 8006396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006398:	787b      	ldrb	r3, [r7, #1]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800639e:	887a      	ldrh	r2, [r7, #2]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80063a4:	e002      	b.n	80063ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80063a6:	887a      	ldrh	r2, [r7, #2]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	4603      	mov	r3, r0
 80063c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80063c2:	4b08      	ldr	r3, [pc, #32]	@ (80063e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063c4:	695a      	ldr	r2, [r3, #20]
 80063c6:	88fb      	ldrh	r3, [r7, #6]
 80063c8:	4013      	ands	r3, r2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d006      	beq.n	80063dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80063ce:	4a05      	ldr	r2, [pc, #20]	@ (80063e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063d0:	88fb      	ldrh	r3, [r7, #6]
 80063d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fc fac2 	bl	8002960 <HAL_GPIO_EXTI_Callback>
  }
}
 80063dc:	bf00      	nop
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40010400 	.word	0x40010400

080063e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d141      	bne.n	800647a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063f6:	4b4b      	ldr	r3, [pc, #300]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006402:	d131      	bne.n	8006468 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006404:	4b47      	ldr	r3, [pc, #284]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800640a:	4a46      	ldr	r2, [pc, #280]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800640c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006410:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006414:	4b43      	ldr	r3, [pc, #268]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800641c:	4a41      	ldr	r2, [pc, #260]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800641e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006422:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006424:	4b40      	ldr	r3, [pc, #256]	@ (8006528 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2232      	movs	r2, #50	@ 0x32
 800642a:	fb02 f303 	mul.w	r3, r2, r3
 800642e:	4a3f      	ldr	r2, [pc, #252]	@ (800652c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006430:	fba2 2303 	umull	r2, r3, r2, r3
 8006434:	0c9b      	lsrs	r3, r3, #18
 8006436:	3301      	adds	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800643a:	e002      	b.n	8006442 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3b01      	subs	r3, #1
 8006440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006442:	4b38      	ldr	r3, [pc, #224]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800644a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800644e:	d102      	bne.n	8006456 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f2      	bne.n	800643c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006456:	4b33      	ldr	r3, [pc, #204]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800645e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006462:	d158      	bne.n	8006516 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e057      	b.n	8006518 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006468:	4b2e      	ldr	r3, [pc, #184]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800646a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800646e:	4a2d      	ldr	r2, [pc, #180]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006474:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006478:	e04d      	b.n	8006516 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006480:	d141      	bne.n	8006506 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006482:	4b28      	ldr	r3, [pc, #160]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800648a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800648e:	d131      	bne.n	80064f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006490:	4b24      	ldr	r3, [pc, #144]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006496:	4a23      	ldr	r2, [pc, #140]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800649c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80064a0:	4b20      	ldr	r3, [pc, #128]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80064a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80064ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80064b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006528 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2232      	movs	r2, #50	@ 0x32
 80064b6:	fb02 f303 	mul.w	r3, r2, r3
 80064ba:	4a1c      	ldr	r2, [pc, #112]	@ (800652c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80064bc:	fba2 2303 	umull	r2, r3, r2, r3
 80064c0:	0c9b      	lsrs	r3, r3, #18
 80064c2:	3301      	adds	r3, #1
 80064c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064c6:	e002      	b.n	80064ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064ce:	4b15      	ldr	r3, [pc, #84]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064da:	d102      	bne.n	80064e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f2      	bne.n	80064c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80064e2:	4b10      	ldr	r3, [pc, #64]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ee:	d112      	bne.n	8006516 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e011      	b.n	8006518 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006500:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006504:	e007      	b.n	8006516 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006506:	4b07      	ldr	r3, [pc, #28]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800650e:	4a05      	ldr	r2, [pc, #20]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006510:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006514:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	40007000 	.word	0x40007000
 8006528:	20000274 	.word	0x20000274
 800652c:	431bde83 	.word	0x431bde83

08006530 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006534:	4b05      	ldr	r3, [pc, #20]	@ (800654c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	4a04      	ldr	r2, [pc, #16]	@ (800654c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800653a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800653e:	6093      	str	r3, [r2, #8]
}
 8006540:	bf00      	nop
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40007000 	.word	0x40007000

08006550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b088      	sub	sp, #32
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e2fe      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d075      	beq.n	800665a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800656e:	4b97      	ldr	r3, [pc, #604]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 030c 	and.w	r3, r3, #12
 8006576:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006578:	4b94      	ldr	r3, [pc, #592]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	2b0c      	cmp	r3, #12
 8006586:	d102      	bne.n	800658e <HAL_RCC_OscConfig+0x3e>
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2b03      	cmp	r3, #3
 800658c:	d002      	beq.n	8006594 <HAL_RCC_OscConfig+0x44>
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	2b08      	cmp	r3, #8
 8006592:	d10b      	bne.n	80065ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006594:	4b8d      	ldr	r3, [pc, #564]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d05b      	beq.n	8006658 <HAL_RCC_OscConfig+0x108>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d157      	bne.n	8006658 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e2d9      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065b4:	d106      	bne.n	80065c4 <HAL_RCC_OscConfig+0x74>
 80065b6:	4b85      	ldr	r3, [pc, #532]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a84      	ldr	r2, [pc, #528]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80065bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	e01d      	b.n	8006600 <HAL_RCC_OscConfig+0xb0>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065cc:	d10c      	bne.n	80065e8 <HAL_RCC_OscConfig+0x98>
 80065ce:	4b7f      	ldr	r3, [pc, #508]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a7e      	ldr	r2, [pc, #504]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80065d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	4b7c      	ldr	r3, [pc, #496]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a7b      	ldr	r2, [pc, #492]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80065e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065e4:	6013      	str	r3, [r2, #0]
 80065e6:	e00b      	b.n	8006600 <HAL_RCC_OscConfig+0xb0>
 80065e8:	4b78      	ldr	r3, [pc, #480]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a77      	ldr	r2, [pc, #476]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80065ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	4b75      	ldr	r3, [pc, #468]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a74      	ldr	r2, [pc, #464]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80065fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d013      	beq.n	8006630 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006608:	f7fd fab4 	bl	8003b74 <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006610:	f7fd fab0 	bl	8003b74 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b64      	cmp	r3, #100	@ 0x64
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e29e      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006622:	4b6a      	ldr	r3, [pc, #424]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0f0      	beq.n	8006610 <HAL_RCC_OscConfig+0xc0>
 800662e:	e014      	b.n	800665a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006630:	f7fd faa0 	bl	8003b74 <HAL_GetTick>
 8006634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006638:	f7fd fa9c 	bl	8003b74 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b64      	cmp	r3, #100	@ 0x64
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e28a      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800664a:	4b60      	ldr	r3, [pc, #384]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1f0      	bne.n	8006638 <HAL_RCC_OscConfig+0xe8>
 8006656:	e000      	b.n	800665a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d075      	beq.n	8006752 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006666:	4b59      	ldr	r3, [pc, #356]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f003 030c 	and.w	r3, r3, #12
 800666e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006670:	4b56      	ldr	r3, [pc, #344]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b0c      	cmp	r3, #12
 800667e:	d102      	bne.n	8006686 <HAL_RCC_OscConfig+0x136>
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	2b02      	cmp	r3, #2
 8006684:	d002      	beq.n	800668c <HAL_RCC_OscConfig+0x13c>
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b04      	cmp	r3, #4
 800668a:	d11f      	bne.n	80066cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800668c:	4b4f      	ldr	r3, [pc, #316]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <HAL_RCC_OscConfig+0x154>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e25d      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a4:	4b49      	ldr	r3, [pc, #292]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	061b      	lsls	r3, r3, #24
 80066b2:	4946      	ldr	r1, [pc, #280]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80066b8:	4b45      	ldr	r3, [pc, #276]	@ (80067d0 <HAL_RCC_OscConfig+0x280>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fd fa0d 	bl	8003adc <HAL_InitTick>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d043      	beq.n	8006750 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e249      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d023      	beq.n	800671c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066d4:	4b3d      	ldr	r3, [pc, #244]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a3c      	ldr	r2, [pc, #240]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80066da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e0:	f7fd fa48 	bl	8003b74 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066e8:	f7fd fa44 	bl	8003b74 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e232      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066fa:	4b34      	ldr	r3, [pc, #208]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0f0      	beq.n	80066e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006706:	4b31      	ldr	r3, [pc, #196]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	061b      	lsls	r3, r3, #24
 8006714:	492d      	ldr	r1, [pc, #180]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 8006716:	4313      	orrs	r3, r2
 8006718:	604b      	str	r3, [r1, #4]
 800671a:	e01a      	b.n	8006752 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800671c:	4b2b      	ldr	r3, [pc, #172]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a2a      	ldr	r2, [pc, #168]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 8006722:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006728:	f7fd fa24 	bl	8003b74 <HAL_GetTick>
 800672c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800672e:	e008      	b.n	8006742 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006730:	f7fd fa20 	bl	8003b74 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e20e      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006742:	4b22      	ldr	r3, [pc, #136]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f0      	bne.n	8006730 <HAL_RCC_OscConfig+0x1e0>
 800674e:	e000      	b.n	8006752 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006750:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0308 	and.w	r3, r3, #8
 800675a:	2b00      	cmp	r3, #0
 800675c:	d041      	beq.n	80067e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01c      	beq.n	80067a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006766:	4b19      	ldr	r3, [pc, #100]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 8006768:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800676c:	4a17      	ldr	r2, [pc, #92]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 800676e:	f043 0301 	orr.w	r3, r3, #1
 8006772:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006776:	f7fd f9fd 	bl	8003b74 <HAL_GetTick>
 800677a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800677c:	e008      	b.n	8006790 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800677e:	f7fd f9f9 	bl	8003b74 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e1e7      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006790:	4b0e      	ldr	r3, [pc, #56]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 8006792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0ef      	beq.n	800677e <HAL_RCC_OscConfig+0x22e>
 800679e:	e020      	b.n	80067e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067a0:	4b0a      	ldr	r3, [pc, #40]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80067a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067a6:	4a09      	ldr	r2, [pc, #36]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80067a8:	f023 0301 	bic.w	r3, r3, #1
 80067ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b0:	f7fd f9e0 	bl	8003b74 <HAL_GetTick>
 80067b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067b6:	e00d      	b.n	80067d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b8:	f7fd f9dc 	bl	8003b74 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d906      	bls.n	80067d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e1ca      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
 80067ca:	bf00      	nop
 80067cc:	40021000 	.word	0x40021000
 80067d0:	20000278 	.word	0x20000278
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067d4:	4b8c      	ldr	r3, [pc, #560]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 80067d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1ea      	bne.n	80067b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0304 	and.w	r3, r3, #4
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 80a6 	beq.w	800693c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067f0:	2300      	movs	r3, #0
 80067f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80067f4:	4b84      	ldr	r3, [pc, #528]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 80067f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_RCC_OscConfig+0x2b4>
 8006800:	2301      	movs	r3, #1
 8006802:	e000      	b.n	8006806 <HAL_RCC_OscConfig+0x2b6>
 8006804:	2300      	movs	r3, #0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00d      	beq.n	8006826 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800680a:	4b7f      	ldr	r3, [pc, #508]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 800680c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800680e:	4a7e      	ldr	r2, [pc, #504]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 8006810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006814:	6593      	str	r3, [r2, #88]	@ 0x58
 8006816:	4b7c      	ldr	r3, [pc, #496]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 8006818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800681a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006822:	2301      	movs	r3, #1
 8006824:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006826:	4b79      	ldr	r3, [pc, #484]	@ (8006a0c <HAL_RCC_OscConfig+0x4bc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800682e:	2b00      	cmp	r3, #0
 8006830:	d118      	bne.n	8006864 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006832:	4b76      	ldr	r3, [pc, #472]	@ (8006a0c <HAL_RCC_OscConfig+0x4bc>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a75      	ldr	r2, [pc, #468]	@ (8006a0c <HAL_RCC_OscConfig+0x4bc>)
 8006838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800683c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800683e:	f7fd f999 	bl	8003b74 <HAL_GetTick>
 8006842:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006844:	e008      	b.n	8006858 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006846:	f7fd f995 	bl	8003b74 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d901      	bls.n	8006858 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e183      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006858:	4b6c      	ldr	r3, [pc, #432]	@ (8006a0c <HAL_RCC_OscConfig+0x4bc>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0f0      	beq.n	8006846 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d108      	bne.n	800687e <HAL_RCC_OscConfig+0x32e>
 800686c:	4b66      	ldr	r3, [pc, #408]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 800686e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006872:	4a65      	ldr	r2, [pc, #404]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 8006874:	f043 0301 	orr.w	r3, r3, #1
 8006878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800687c:	e024      	b.n	80068c8 <HAL_RCC_OscConfig+0x378>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	2b05      	cmp	r3, #5
 8006884:	d110      	bne.n	80068a8 <HAL_RCC_OscConfig+0x358>
 8006886:	4b60      	ldr	r3, [pc, #384]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 8006888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800688c:	4a5e      	ldr	r2, [pc, #376]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 800688e:	f043 0304 	orr.w	r3, r3, #4
 8006892:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006896:	4b5c      	ldr	r3, [pc, #368]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 8006898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800689c:	4a5a      	ldr	r2, [pc, #360]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 800689e:	f043 0301 	orr.w	r3, r3, #1
 80068a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80068a6:	e00f      	b.n	80068c8 <HAL_RCC_OscConfig+0x378>
 80068a8:	4b57      	ldr	r3, [pc, #348]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 80068aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ae:	4a56      	ldr	r2, [pc, #344]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 80068b0:	f023 0301 	bic.w	r3, r3, #1
 80068b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80068b8:	4b53      	ldr	r3, [pc, #332]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068be:	4a52      	ldr	r2, [pc, #328]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 80068c0:	f023 0304 	bic.w	r3, r3, #4
 80068c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d016      	beq.n	80068fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d0:	f7fd f950 	bl	8003b74 <HAL_GetTick>
 80068d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068d6:	e00a      	b.n	80068ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d8:	f7fd f94c 	bl	8003b74 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e138      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068ee:	4b46      	ldr	r3, [pc, #280]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 80068f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0ed      	beq.n	80068d8 <HAL_RCC_OscConfig+0x388>
 80068fc:	e015      	b.n	800692a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068fe:	f7fd f939 	bl	8003b74 <HAL_GetTick>
 8006902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006904:	e00a      	b.n	800691c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006906:	f7fd f935 	bl	8003b74 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006914:	4293      	cmp	r3, r2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e121      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800691c:	4b3a      	ldr	r3, [pc, #232]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 800691e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1ed      	bne.n	8006906 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800692a:	7ffb      	ldrb	r3, [r7, #31]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d105      	bne.n	800693c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006930:	4b35      	ldr	r3, [pc, #212]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 8006932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006934:	4a34      	ldr	r2, [pc, #208]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 8006936:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800693a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b00      	cmp	r3, #0
 8006946:	d03c      	beq.n	80069c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01c      	beq.n	800698a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006950:	4b2d      	ldr	r3, [pc, #180]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 8006952:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006956:	4a2c      	ldr	r2, [pc, #176]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006960:	f7fd f908 	bl	8003b74 <HAL_GetTick>
 8006964:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006968:	f7fd f904 	bl	8003b74 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e0f2      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800697a:	4b23      	ldr	r3, [pc, #140]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 800697c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0ef      	beq.n	8006968 <HAL_RCC_OscConfig+0x418>
 8006988:	e01b      	b.n	80069c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800698a:	4b1f      	ldr	r3, [pc, #124]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 800698c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006990:	4a1d      	ldr	r2, [pc, #116]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 8006992:	f023 0301 	bic.w	r3, r3, #1
 8006996:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699a:	f7fd f8eb 	bl	8003b74 <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069a2:	f7fd f8e7 	bl	8003b74 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e0d5      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069b4:	4b14      	ldr	r3, [pc, #80]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 80069b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1ef      	bne.n	80069a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 80c9 	beq.w	8006b5e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f003 030c 	and.w	r3, r3, #12
 80069d4:	2b0c      	cmp	r3, #12
 80069d6:	f000 8083 	beq.w	8006ae0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d15e      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e2:	4b09      	ldr	r3, [pc, #36]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a08      	ldr	r2, [pc, #32]	@ (8006a08 <HAL_RCC_OscConfig+0x4b8>)
 80069e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ee:	f7fd f8c1 	bl	8003b74 <HAL_GetTick>
 80069f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069f4:	e00c      	b.n	8006a10 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f6:	f7fd f8bd 	bl	8003b74 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d905      	bls.n	8006a10 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e0ab      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a10:	4b55      	ldr	r3, [pc, #340]	@ (8006b68 <HAL_RCC_OscConfig+0x618>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1ec      	bne.n	80069f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a1c:	4b52      	ldr	r3, [pc, #328]	@ (8006b68 <HAL_RCC_OscConfig+0x618>)
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	4b52      	ldr	r3, [pc, #328]	@ (8006b6c <HAL_RCC_OscConfig+0x61c>)
 8006a22:	4013      	ands	r3, r2
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6a11      	ldr	r1, [r2, #32]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a2c:	3a01      	subs	r2, #1
 8006a2e:	0112      	lsls	r2, r2, #4
 8006a30:	4311      	orrs	r1, r2
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006a36:	0212      	lsls	r2, r2, #8
 8006a38:	4311      	orrs	r1, r2
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006a3e:	0852      	lsrs	r2, r2, #1
 8006a40:	3a01      	subs	r2, #1
 8006a42:	0552      	lsls	r2, r2, #21
 8006a44:	4311      	orrs	r1, r2
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006a4a:	0852      	lsrs	r2, r2, #1
 8006a4c:	3a01      	subs	r2, #1
 8006a4e:	0652      	lsls	r2, r2, #25
 8006a50:	4311      	orrs	r1, r2
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a56:	06d2      	lsls	r2, r2, #27
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	4943      	ldr	r1, [pc, #268]	@ (8006b68 <HAL_RCC_OscConfig+0x618>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a60:	4b41      	ldr	r3, [pc, #260]	@ (8006b68 <HAL_RCC_OscConfig+0x618>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a40      	ldr	r2, [pc, #256]	@ (8006b68 <HAL_RCC_OscConfig+0x618>)
 8006a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a6c:	4b3e      	ldr	r3, [pc, #248]	@ (8006b68 <HAL_RCC_OscConfig+0x618>)
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	4a3d      	ldr	r2, [pc, #244]	@ (8006b68 <HAL_RCC_OscConfig+0x618>)
 8006a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fd f87c 	bl	8003b74 <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a80:	f7fd f878 	bl	8003b74 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e066      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a92:	4b35      	ldr	r3, [pc, #212]	@ (8006b68 <HAL_RCC_OscConfig+0x618>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0f0      	beq.n	8006a80 <HAL_RCC_OscConfig+0x530>
 8006a9e:	e05e      	b.n	8006b5e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa0:	4b31      	ldr	r3, [pc, #196]	@ (8006b68 <HAL_RCC_OscConfig+0x618>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a30      	ldr	r2, [pc, #192]	@ (8006b68 <HAL_RCC_OscConfig+0x618>)
 8006aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aac:	f7fd f862 	bl	8003b74 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ab4:	f7fd f85e 	bl	8003b74 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e04c      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ac6:	4b28      	ldr	r3, [pc, #160]	@ (8006b68 <HAL_RCC_OscConfig+0x618>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f0      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006ad2:	4b25      	ldr	r3, [pc, #148]	@ (8006b68 <HAL_RCC_OscConfig+0x618>)
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	4924      	ldr	r1, [pc, #144]	@ (8006b68 <HAL_RCC_OscConfig+0x618>)
 8006ad8:	4b25      	ldr	r3, [pc, #148]	@ (8006b70 <HAL_RCC_OscConfig+0x620>)
 8006ada:	4013      	ands	r3, r2
 8006adc:	60cb      	str	r3, [r1, #12]
 8006ade:	e03e      	b.n	8006b5e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d101      	bne.n	8006aec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e039      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006aec:	4b1e      	ldr	r3, [pc, #120]	@ (8006b68 <HAL_RCC_OscConfig+0x618>)
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f003 0203 	and.w	r2, r3, #3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d12c      	bne.n	8006b5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d123      	bne.n	8006b5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d11b      	bne.n	8006b5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d113      	bne.n	8006b5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3c:	085b      	lsrs	r3, r3, #1
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d109      	bne.n	8006b5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b50:	085b      	lsrs	r3, r3, #1
 8006b52:	3b01      	subs	r3, #1
 8006b54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d001      	beq.n	8006b5e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e000      	b.n	8006b60 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3720      	adds	r7, #32
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40021000 	.word	0x40021000
 8006b6c:	019f800c 	.word	0x019f800c
 8006b70:	feeefffc 	.word	0xfeeefffc

08006b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e11e      	b.n	8006dca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b8c:	4b91      	ldr	r3, [pc, #580]	@ (8006dd4 <HAL_RCC_ClockConfig+0x260>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 030f 	and.w	r3, r3, #15
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d910      	bls.n	8006bbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b9a:	4b8e      	ldr	r3, [pc, #568]	@ (8006dd4 <HAL_RCC_ClockConfig+0x260>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f023 020f 	bic.w	r2, r3, #15
 8006ba2:	498c      	ldr	r1, [pc, #560]	@ (8006dd4 <HAL_RCC_ClockConfig+0x260>)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006baa:	4b8a      	ldr	r3, [pc, #552]	@ (8006dd4 <HAL_RCC_ClockConfig+0x260>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 030f 	and.w	r3, r3, #15
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d001      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e106      	b.n	8006dca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d073      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d129      	bne.n	8006c24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bd0:	4b81      	ldr	r3, [pc, #516]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e0f4      	b.n	8006dca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006be0:	f000 f99e 	bl	8006f20 <RCC_GetSysClockFreqFromPLLSource>
 8006be4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	4a7c      	ldr	r2, [pc, #496]	@ (8006ddc <HAL_RCC_ClockConfig+0x268>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d93f      	bls.n	8006c6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006bee:	4b7a      	ldr	r3, [pc, #488]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d009      	beq.n	8006c0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d033      	beq.n	8006c6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d12f      	bne.n	8006c6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006c0e:	4b72      	ldr	r3, [pc, #456]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c16:	4a70      	ldr	r2, [pc, #448]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006c1e:	2380      	movs	r3, #128	@ 0x80
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	e024      	b.n	8006c6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d107      	bne.n	8006c3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c2c:	4b6a      	ldr	r3, [pc, #424]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d109      	bne.n	8006c4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e0c6      	b.n	8006dca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c3c:	4b66      	ldr	r3, [pc, #408]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e0be      	b.n	8006dca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006c4c:	f000 f8ce 	bl	8006dec <HAL_RCC_GetSysClockFreq>
 8006c50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	4a61      	ldr	r2, [pc, #388]	@ (8006ddc <HAL_RCC_ClockConfig+0x268>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d909      	bls.n	8006c6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006c5a:	4b5f      	ldr	r3, [pc, #380]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c62:	4a5d      	ldr	r2, [pc, #372]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006c6a:	2380      	movs	r3, #128	@ 0x80
 8006c6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f023 0203 	bic.w	r2, r3, #3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	4957      	ldr	r1, [pc, #348]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c80:	f7fc ff78 	bl	8003b74 <HAL_GetTick>
 8006c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c86:	e00a      	b.n	8006c9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c88:	f7fc ff74 	bl	8003b74 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e095      	b.n	8006dca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c9e:	4b4e      	ldr	r3, [pc, #312]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f003 020c 	and.w	r2, r3, #12
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d1eb      	bne.n	8006c88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d023      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cc8:	4b43      	ldr	r3, [pc, #268]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	4a42      	ldr	r2, [pc, #264]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006cce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006cd2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0308 	and.w	r3, r3, #8
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d007      	beq.n	8006cf0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ce8:	4a3b      	ldr	r2, [pc, #236]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006cea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006cee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cf0:	4b39      	ldr	r3, [pc, #228]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	4936      	ldr	r1, [pc, #216]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	608b      	str	r3, [r1, #8]
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2b80      	cmp	r3, #128	@ 0x80
 8006d08:	d105      	bne.n	8006d16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006d0a:	4b33      	ldr	r3, [pc, #204]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	4a32      	ldr	r2, [pc, #200]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006d10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d16:	4b2f      	ldr	r3, [pc, #188]	@ (8006dd4 <HAL_RCC_ClockConfig+0x260>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d21d      	bcs.n	8006d60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d24:	4b2b      	ldr	r3, [pc, #172]	@ (8006dd4 <HAL_RCC_ClockConfig+0x260>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f023 020f 	bic.w	r2, r3, #15
 8006d2c:	4929      	ldr	r1, [pc, #164]	@ (8006dd4 <HAL_RCC_ClockConfig+0x260>)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006d34:	f7fc ff1e 	bl	8003b74 <HAL_GetTick>
 8006d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d3a:	e00a      	b.n	8006d52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d3c:	f7fc ff1a 	bl	8003b74 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d901      	bls.n	8006d52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e03b      	b.n	8006dca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d52:	4b20      	ldr	r3, [pc, #128]	@ (8006dd4 <HAL_RCC_ClockConfig+0x260>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d1ed      	bne.n	8006d3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d008      	beq.n	8006d7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	4917      	ldr	r1, [pc, #92]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d009      	beq.n	8006d9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d8a:	4b13      	ldr	r3, [pc, #76]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	490f      	ldr	r1, [pc, #60]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d9e:	f000 f825 	bl	8006dec <HAL_RCC_GetSysClockFreq>
 8006da2:	4602      	mov	r2, r0
 8006da4:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd8 <HAL_RCC_ClockConfig+0x264>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	091b      	lsrs	r3, r3, #4
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	490c      	ldr	r1, [pc, #48]	@ (8006de0 <HAL_RCC_ClockConfig+0x26c>)
 8006db0:	5ccb      	ldrb	r3, [r1, r3]
 8006db2:	f003 031f 	and.w	r3, r3, #31
 8006db6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dba:	4a0a      	ldr	r2, [pc, #40]	@ (8006de4 <HAL_RCC_ClockConfig+0x270>)
 8006dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8006de8 <HAL_RCC_ClockConfig+0x274>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fc fe8a 	bl	8003adc <HAL_InitTick>
 8006dc8:	4603      	mov	r3, r0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	40022000 	.word	0x40022000
 8006dd8:	40021000 	.word	0x40021000
 8006ddc:	04c4b400 	.word	0x04c4b400
 8006de0:	0800b504 	.word	0x0800b504
 8006de4:	20000274 	.word	0x20000274
 8006de8:	20000278 	.word	0x20000278

08006dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006df2:	4b2c      	ldr	r3, [pc, #176]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 030c 	and.w	r3, r3, #12
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d102      	bne.n	8006e04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	e047      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006e04:	4b27      	ldr	r3, [pc, #156]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f003 030c 	and.w	r3, r3, #12
 8006e0c:	2b08      	cmp	r3, #8
 8006e0e:	d102      	bne.n	8006e16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e10:	4b26      	ldr	r3, [pc, #152]	@ (8006eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	e03e      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006e16:	4b23      	ldr	r3, [pc, #140]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f003 030c 	and.w	r3, r3, #12
 8006e1e:	2b0c      	cmp	r3, #12
 8006e20:	d136      	bne.n	8006e90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e22:	4b20      	ldr	r3, [pc, #128]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f003 0303 	and.w	r3, r3, #3
 8006e2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	091b      	lsrs	r3, r3, #4
 8006e32:	f003 030f 	and.w	r3, r3, #15
 8006e36:	3301      	adds	r3, #1
 8006e38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d10c      	bne.n	8006e5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e40:	4a1a      	ldr	r2, [pc, #104]	@ (8006eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	4a16      	ldr	r2, [pc, #88]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e4a:	68d2      	ldr	r2, [r2, #12]
 8006e4c:	0a12      	lsrs	r2, r2, #8
 8006e4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006e52:	fb02 f303 	mul.w	r3, r2, r3
 8006e56:	617b      	str	r3, [r7, #20]
      break;
 8006e58:	e00c      	b.n	8006e74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e5a:	4a13      	ldr	r2, [pc, #76]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e62:	4a10      	ldr	r2, [pc, #64]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e64:	68d2      	ldr	r2, [r2, #12]
 8006e66:	0a12      	lsrs	r2, r2, #8
 8006e68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006e6c:	fb02 f303 	mul.w	r3, r2, r3
 8006e70:	617b      	str	r3, [r7, #20]
      break;
 8006e72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	0e5b      	lsrs	r3, r3, #25
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	3301      	adds	r3, #1
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	e001      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006e94:	693b      	ldr	r3, [r7, #16]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	40021000 	.word	0x40021000
 8006ea8:	00f42400 	.word	0x00f42400
 8006eac:	016e3600 	.word	0x016e3600

08006eb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eb4:	4b03      	ldr	r3, [pc, #12]	@ (8006ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20000274 	.word	0x20000274

08006ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ecc:	f7ff fff0 	bl	8006eb0 <HAL_RCC_GetHCLKFreq>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	4b06      	ldr	r3, [pc, #24]	@ (8006eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	0a1b      	lsrs	r3, r3, #8
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	4904      	ldr	r1, [pc, #16]	@ (8006ef0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ede:	5ccb      	ldrb	r3, [r1, r3]
 8006ee0:	f003 031f 	and.w	r3, r3, #31
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40021000 	.word	0x40021000
 8006ef0:	0800b514 	.word	0x0800b514

08006ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ef8:	f7ff ffda 	bl	8006eb0 <HAL_RCC_GetHCLKFreq>
 8006efc:	4602      	mov	r2, r0
 8006efe:	4b06      	ldr	r3, [pc, #24]	@ (8006f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	0adb      	lsrs	r3, r3, #11
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	4904      	ldr	r1, [pc, #16]	@ (8006f1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f0a:	5ccb      	ldrb	r3, [r1, r3]
 8006f0c:	f003 031f 	and.w	r3, r3, #31
 8006f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	40021000 	.word	0x40021000
 8006f1c:	0800b514 	.word	0x0800b514

08006f20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f26:	4b1e      	ldr	r3, [pc, #120]	@ (8006fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f003 0303 	and.w	r3, r3, #3
 8006f2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f30:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	091b      	lsrs	r3, r3, #4
 8006f36:	f003 030f 	and.w	r3, r3, #15
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d10c      	bne.n	8006f5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f44:	4a17      	ldr	r2, [pc, #92]	@ (8006fa4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4c:	4a14      	ldr	r2, [pc, #80]	@ (8006fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f4e:	68d2      	ldr	r2, [r2, #12]
 8006f50:	0a12      	lsrs	r2, r2, #8
 8006f52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f56:	fb02 f303 	mul.w	r3, r2, r3
 8006f5a:	617b      	str	r3, [r7, #20]
    break;
 8006f5c:	e00c      	b.n	8006f78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f5e:	4a12      	ldr	r2, [pc, #72]	@ (8006fa8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f66:	4a0e      	ldr	r2, [pc, #56]	@ (8006fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f68:	68d2      	ldr	r2, [r2, #12]
 8006f6a:	0a12      	lsrs	r2, r2, #8
 8006f6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f70:	fb02 f303 	mul.w	r3, r2, r3
 8006f74:	617b      	str	r3, [r7, #20]
    break;
 8006f76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f78:	4b09      	ldr	r3, [pc, #36]	@ (8006fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	0e5b      	lsrs	r3, r3, #25
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	3301      	adds	r3, #1
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006f92:	687b      	ldr	r3, [r7, #4]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	371c      	adds	r7, #28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	40021000 	.word	0x40021000
 8006fa4:	016e3600 	.word	0x016e3600
 8006fa8:	00f42400 	.word	0x00f42400

08006fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006fb8:	2300      	movs	r3, #0
 8006fba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8098 	beq.w	80070fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fce:	4b43      	ldr	r3, [pc, #268]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10d      	bne.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fda:	4b40      	ldr	r3, [pc, #256]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fde:	4a3f      	ldr	r2, [pc, #252]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fee:	60bb      	str	r3, [r7, #8]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a39      	ldr	r2, [pc, #228]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007000:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007002:	f7fc fdb7 	bl	8003b74 <HAL_GetTick>
 8007006:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007008:	e009      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800700a:	f7fc fdb3 	bl	8003b74 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	2b02      	cmp	r3, #2
 8007016:	d902      	bls.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	74fb      	strb	r3, [r7, #19]
        break;
 800701c:	e005      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800701e:	4b30      	ldr	r3, [pc, #192]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0ef      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800702a:	7cfb      	ldrb	r3, [r7, #19]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d159      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007030:	4b2a      	ldr	r3, [pc, #168]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800703a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d01e      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	429a      	cmp	r2, r3
 800704a:	d019      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800704c:	4b23      	ldr	r3, [pc, #140]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800704e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007056:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007058:	4b20      	ldr	r3, [pc, #128]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800705a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800705e:	4a1f      	ldr	r2, [pc, #124]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007068:	4b1c      	ldr	r3, [pc, #112]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800706a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800706e:	4a1b      	ldr	r2, [pc, #108]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007078:	4a18      	ldr	r2, [pc, #96]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d016      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800708a:	f7fc fd73 	bl	8003b74 <HAL_GetTick>
 800708e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007090:	e00b      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007092:	f7fc fd6f 	bl	8003b74 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d902      	bls.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	74fb      	strb	r3, [r7, #19]
            break;
 80070a8:	e006      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070aa:	4b0c      	ldr	r3, [pc, #48]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0ec      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80070b8:	7cfb      	ldrb	r3, [r7, #19]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10b      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070be:	4b07      	ldr	r3, [pc, #28]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070cc:	4903      	ldr	r1, [pc, #12]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80070d4:	e008      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070d6:	7cfb      	ldrb	r3, [r7, #19]
 80070d8:	74bb      	strb	r3, [r7, #18]
 80070da:	e005      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80070dc:	40021000 	.word	0x40021000
 80070e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e4:	7cfb      	ldrb	r3, [r7, #19]
 80070e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070e8:	7c7b      	ldrb	r3, [r7, #17]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d105      	bne.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070ee:	4ba7      	ldr	r3, [pc, #668]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f2:	4aa6      	ldr	r2, [pc, #664]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00a      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007106:	4ba1      	ldr	r3, [pc, #644]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800710c:	f023 0203 	bic.w	r2, r3, #3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	499d      	ldr	r1, [pc, #628]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007116:	4313      	orrs	r3, r2
 8007118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007128:	4b98      	ldr	r3, [pc, #608]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800712a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800712e:	f023 020c 	bic.w	r2, r3, #12
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	4995      	ldr	r1, [pc, #596]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007138:	4313      	orrs	r3, r2
 800713a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0304 	and.w	r3, r3, #4
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800714a:	4b90      	ldr	r3, [pc, #576]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800714c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007150:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	498c      	ldr	r1, [pc, #560]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800715a:	4313      	orrs	r3, r2
 800715c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00a      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800716c:	4b87      	ldr	r3, [pc, #540]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800716e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007172:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	4984      	ldr	r1, [pc, #528]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800717c:	4313      	orrs	r3, r2
 800717e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0310 	and.w	r3, r3, #16
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800718e:	4b7f      	ldr	r3, [pc, #508]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	497b      	ldr	r1, [pc, #492]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00a      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071b0:	4b76      	ldr	r3, [pc, #472]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	4973      	ldr	r1, [pc, #460]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071d2:	4b6e      	ldr	r3, [pc, #440]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	496a      	ldr	r1, [pc, #424]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00a      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071f4:	4b65      	ldr	r3, [pc, #404]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	4962      	ldr	r1, [pc, #392]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007204:	4313      	orrs	r3, r2
 8007206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007216:	4b5d      	ldr	r3, [pc, #372]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800721c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007224:	4959      	ldr	r1, [pc, #356]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007226:	4313      	orrs	r3, r2
 8007228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00a      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007238:	4b54      	ldr	r3, [pc, #336]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800723a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800723e:	f023 0203 	bic.w	r2, r3, #3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007246:	4951      	ldr	r1, [pc, #324]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007248:	4313      	orrs	r3, r2
 800724a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800725a:	4b4c      	ldr	r3, [pc, #304]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800725c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007260:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007268:	4948      	ldr	r1, [pc, #288]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800726a:	4313      	orrs	r3, r2
 800726c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007278:	2b00      	cmp	r3, #0
 800727a:	d015      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800727c:	4b43      	ldr	r3, [pc, #268]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800727e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007282:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728a:	4940      	ldr	r1, [pc, #256]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800728c:	4313      	orrs	r3, r2
 800728e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800729a:	d105      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800729c:	4b3b      	ldr	r3, [pc, #236]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	4a3a      	ldr	r2, [pc, #232]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d015      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80072b4:	4b35      	ldr	r3, [pc, #212]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072c2:	4932      	ldr	r1, [pc, #200]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072d2:	d105      	bne.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072d4:	4b2d      	ldr	r3, [pc, #180]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	4a2c      	ldr	r2, [pc, #176]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d015      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80072ec:	4b27      	ldr	r3, [pc, #156]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fa:	4924      	ldr	r1, [pc, #144]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007306:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800730a:	d105      	bne.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800730c:	4b1f      	ldr	r3, [pc, #124]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	4a1e      	ldr	r2, [pc, #120]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007316:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d015      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007324:	4b19      	ldr	r3, [pc, #100]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800732a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007332:	4916      	ldr	r1, [pc, #88]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007334:	4313      	orrs	r3, r2
 8007336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800733e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007342:	d105      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007344:	4b11      	ldr	r3, [pc, #68]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	4a10      	ldr	r2, [pc, #64]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800734a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800734e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d019      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800735c:	4b0b      	ldr	r3, [pc, #44]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800735e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007362:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736a:	4908      	ldr	r1, [pc, #32]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800736c:	4313      	orrs	r3, r2
 800736e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007376:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800737a:	d109      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800737c:	4b03      	ldr	r3, [pc, #12]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	4a02      	ldr	r2, [pc, #8]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007382:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007386:	60d3      	str	r3, [r2, #12]
 8007388:	e002      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800738a:	bf00      	nop
 800738c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d015      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800739c:	4b29      	ldr	r3, [pc, #164]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800739e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073aa:	4926      	ldr	r1, [pc, #152]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ba:	d105      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80073bc:	4b21      	ldr	r3, [pc, #132]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	4a20      	ldr	r2, [pc, #128]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073c6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d015      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80073d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073da:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073e2:	4918      	ldr	r1, [pc, #96]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f2:	d105      	bne.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80073f4:	4b13      	ldr	r3, [pc, #76]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	4a12      	ldr	r2, [pc, #72]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073fe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d015      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800740c:	4b0d      	ldr	r3, [pc, #52]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800740e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007412:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800741a:	490a      	ldr	r1, [pc, #40]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800741c:	4313      	orrs	r3, r2
 800741e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007426:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800742a:	d105      	bne.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800742c:	4b05      	ldr	r3, [pc, #20]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	4a04      	ldr	r2, [pc, #16]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007436:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007438:	7cbb      	ldrb	r3, [r7, #18]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	40021000 	.word	0x40021000

08007448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e054      	b.n	8007504 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d111      	bne.n	800748a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f001 feec 	bl	800924c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007478:	2b00      	cmp	r3, #0
 800747a:	d102      	bne.n	8007482 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a23      	ldr	r2, [pc, #140]	@ (800750c <HAL_TIM_Base_Init+0xc4>)
 8007480:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2202      	movs	r2, #2
 800748e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3304      	adds	r3, #4
 800749a:	4619      	mov	r1, r3
 800749c:	4610      	mov	r0, r2
 800749e:	f001 fa35 	bl	800890c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	08003585 	.word	0x08003585

08007510 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b01      	cmp	r3, #1
 8007522:	d001      	beq.n	8007528 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e04c      	b.n	80075c2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a26      	ldr	r2, [pc, #152]	@ (80075d0 <HAL_TIM_Base_Start+0xc0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d022      	beq.n	8007580 <HAL_TIM_Base_Start+0x70>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007542:	d01d      	beq.n	8007580 <HAL_TIM_Base_Start+0x70>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a22      	ldr	r2, [pc, #136]	@ (80075d4 <HAL_TIM_Base_Start+0xc4>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d018      	beq.n	8007580 <HAL_TIM_Base_Start+0x70>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a21      	ldr	r2, [pc, #132]	@ (80075d8 <HAL_TIM_Base_Start+0xc8>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d013      	beq.n	8007580 <HAL_TIM_Base_Start+0x70>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a1f      	ldr	r2, [pc, #124]	@ (80075dc <HAL_TIM_Base_Start+0xcc>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d00e      	beq.n	8007580 <HAL_TIM_Base_Start+0x70>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a1e      	ldr	r2, [pc, #120]	@ (80075e0 <HAL_TIM_Base_Start+0xd0>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d009      	beq.n	8007580 <HAL_TIM_Base_Start+0x70>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a1c      	ldr	r2, [pc, #112]	@ (80075e4 <HAL_TIM_Base_Start+0xd4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d004      	beq.n	8007580 <HAL_TIM_Base_Start+0x70>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a1b      	ldr	r2, [pc, #108]	@ (80075e8 <HAL_TIM_Base_Start+0xd8>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d115      	bne.n	80075ac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	4b19      	ldr	r3, [pc, #100]	@ (80075ec <HAL_TIM_Base_Start+0xdc>)
 8007588:	4013      	ands	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2b06      	cmp	r3, #6
 8007590:	d015      	beq.n	80075be <HAL_TIM_Base_Start+0xae>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007598:	d011      	beq.n	80075be <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0201 	orr.w	r2, r2, #1
 80075a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075aa:	e008      	b.n	80075be <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0201 	orr.w	r2, r2, #1
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	e000      	b.n	80075c0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40012c00 	.word	0x40012c00
 80075d4:	40000400 	.word	0x40000400
 80075d8:	40000800 	.word	0x40000800
 80075dc:	40000c00 	.word	0x40000c00
 80075e0:	40013400 	.word	0x40013400
 80075e4:	40014000 	.word	0x40014000
 80075e8:	40015000 	.word	0x40015000
 80075ec:	00010007 	.word	0x00010007

080075f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b01      	cmp	r3, #1
 8007602:	d001      	beq.n	8007608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e054      	b.n	80076b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a26      	ldr	r2, [pc, #152]	@ (80076c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d022      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007632:	d01d      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a22      	ldr	r2, [pc, #136]	@ (80076c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d018      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a21      	ldr	r2, [pc, #132]	@ (80076c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d013      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1f      	ldr	r2, [pc, #124]	@ (80076cc <HAL_TIM_Base_Start_IT+0xdc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d00e      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a1e      	ldr	r2, [pc, #120]	@ (80076d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d009      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1c      	ldr	r2, [pc, #112]	@ (80076d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d004      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a1b      	ldr	r2, [pc, #108]	@ (80076d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d115      	bne.n	800769c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689a      	ldr	r2, [r3, #8]
 8007676:	4b19      	ldr	r3, [pc, #100]	@ (80076dc <HAL_TIM_Base_Start_IT+0xec>)
 8007678:	4013      	ands	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b06      	cmp	r3, #6
 8007680:	d015      	beq.n	80076ae <HAL_TIM_Base_Start_IT+0xbe>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007688:	d011      	beq.n	80076ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0201 	orr.w	r2, r2, #1
 8007698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769a:	e008      	b.n	80076ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0201 	orr.w	r2, r2, #1
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	e000      	b.n	80076b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40012c00 	.word	0x40012c00
 80076c4:	40000400 	.word	0x40000400
 80076c8:	40000800 	.word	0x40000800
 80076cc:	40000c00 	.word	0x40000c00
 80076d0:	40013400 	.word	0x40013400
 80076d4:	40014000 	.word	0x40014000
 80076d8:	40015000 	.word	0x40015000
 80076dc:	00010007 	.word	0x00010007

080076e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e054      	b.n	800779c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d111      	bne.n	8007722 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f001 fda0 	bl	800924c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007710:	2b00      	cmp	r3, #0
 8007712:	d102      	bne.n	800771a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a23      	ldr	r2, [pc, #140]	@ (80077a4 <HAL_TIM_PWM_Init+0xc4>)
 8007718:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2202      	movs	r2, #2
 8007726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	3304      	adds	r3, #4
 8007732:	4619      	mov	r1, r3
 8007734:	4610      	mov	r0, r2
 8007736:	f001 f8e9 	bl	800890c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	080077a9 	.word	0x080077a9

080077a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d109      	bne.n	80077e0 <HAL_TIM_PWM_Start+0x24>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	bf14      	ite	ne
 80077d8:	2301      	movne	r3, #1
 80077da:	2300      	moveq	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	e03c      	b.n	800785a <HAL_TIM_PWM_Start+0x9e>
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d109      	bne.n	80077fa <HAL_TIM_PWM_Start+0x3e>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	bf14      	ite	ne
 80077f2:	2301      	movne	r3, #1
 80077f4:	2300      	moveq	r3, #0
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	e02f      	b.n	800785a <HAL_TIM_PWM_Start+0x9e>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d109      	bne.n	8007814 <HAL_TIM_PWM_Start+0x58>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b01      	cmp	r3, #1
 800780a:	bf14      	ite	ne
 800780c:	2301      	movne	r3, #1
 800780e:	2300      	moveq	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	e022      	b.n	800785a <HAL_TIM_PWM_Start+0x9e>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b0c      	cmp	r3, #12
 8007818:	d109      	bne.n	800782e <HAL_TIM_PWM_Start+0x72>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b01      	cmp	r3, #1
 8007824:	bf14      	ite	ne
 8007826:	2301      	movne	r3, #1
 8007828:	2300      	moveq	r3, #0
 800782a:	b2db      	uxtb	r3, r3
 800782c:	e015      	b.n	800785a <HAL_TIM_PWM_Start+0x9e>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b10      	cmp	r3, #16
 8007832:	d109      	bne.n	8007848 <HAL_TIM_PWM_Start+0x8c>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b01      	cmp	r3, #1
 800783e:	bf14      	ite	ne
 8007840:	2301      	movne	r3, #1
 8007842:	2300      	moveq	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	e008      	b.n	800785a <HAL_TIM_PWM_Start+0x9e>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b01      	cmp	r3, #1
 8007852:	bf14      	ite	ne
 8007854:	2301      	movne	r3, #1
 8007856:	2300      	moveq	r3, #0
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e0a6      	b.n	80079b0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d104      	bne.n	8007872 <HAL_TIM_PWM_Start+0xb6>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007870:	e023      	b.n	80078ba <HAL_TIM_PWM_Start+0xfe>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b04      	cmp	r3, #4
 8007876:	d104      	bne.n	8007882 <HAL_TIM_PWM_Start+0xc6>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007880:	e01b      	b.n	80078ba <HAL_TIM_PWM_Start+0xfe>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b08      	cmp	r3, #8
 8007886:	d104      	bne.n	8007892 <HAL_TIM_PWM_Start+0xd6>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007890:	e013      	b.n	80078ba <HAL_TIM_PWM_Start+0xfe>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b0c      	cmp	r3, #12
 8007896:	d104      	bne.n	80078a2 <HAL_TIM_PWM_Start+0xe6>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078a0:	e00b      	b.n	80078ba <HAL_TIM_PWM_Start+0xfe>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b10      	cmp	r3, #16
 80078a6:	d104      	bne.n	80078b2 <HAL_TIM_PWM_Start+0xf6>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2202      	movs	r2, #2
 80078ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078b0:	e003      	b.n	80078ba <HAL_TIM_PWM_Start+0xfe>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2202      	movs	r2, #2
 80078b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2201      	movs	r2, #1
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f001 fc9c 	bl	8009200 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a3a      	ldr	r2, [pc, #232]	@ (80079b8 <HAL_TIM_PWM_Start+0x1fc>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d018      	beq.n	8007904 <HAL_TIM_PWM_Start+0x148>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a39      	ldr	r2, [pc, #228]	@ (80079bc <HAL_TIM_PWM_Start+0x200>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d013      	beq.n	8007904 <HAL_TIM_PWM_Start+0x148>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a37      	ldr	r2, [pc, #220]	@ (80079c0 <HAL_TIM_PWM_Start+0x204>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d00e      	beq.n	8007904 <HAL_TIM_PWM_Start+0x148>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a36      	ldr	r2, [pc, #216]	@ (80079c4 <HAL_TIM_PWM_Start+0x208>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d009      	beq.n	8007904 <HAL_TIM_PWM_Start+0x148>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a34      	ldr	r2, [pc, #208]	@ (80079c8 <HAL_TIM_PWM_Start+0x20c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d004      	beq.n	8007904 <HAL_TIM_PWM_Start+0x148>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a33      	ldr	r2, [pc, #204]	@ (80079cc <HAL_TIM_PWM_Start+0x210>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d101      	bne.n	8007908 <HAL_TIM_PWM_Start+0x14c>
 8007904:	2301      	movs	r3, #1
 8007906:	e000      	b.n	800790a <HAL_TIM_PWM_Start+0x14e>
 8007908:	2300      	movs	r3, #0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d007      	beq.n	800791e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800791c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a25      	ldr	r2, [pc, #148]	@ (80079b8 <HAL_TIM_PWM_Start+0x1fc>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d022      	beq.n	800796e <HAL_TIM_PWM_Start+0x1b2>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007930:	d01d      	beq.n	800796e <HAL_TIM_PWM_Start+0x1b2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a26      	ldr	r2, [pc, #152]	@ (80079d0 <HAL_TIM_PWM_Start+0x214>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d018      	beq.n	800796e <HAL_TIM_PWM_Start+0x1b2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a24      	ldr	r2, [pc, #144]	@ (80079d4 <HAL_TIM_PWM_Start+0x218>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d013      	beq.n	800796e <HAL_TIM_PWM_Start+0x1b2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a23      	ldr	r2, [pc, #140]	@ (80079d8 <HAL_TIM_PWM_Start+0x21c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00e      	beq.n	800796e <HAL_TIM_PWM_Start+0x1b2>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a19      	ldr	r2, [pc, #100]	@ (80079bc <HAL_TIM_PWM_Start+0x200>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d009      	beq.n	800796e <HAL_TIM_PWM_Start+0x1b2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a18      	ldr	r2, [pc, #96]	@ (80079c0 <HAL_TIM_PWM_Start+0x204>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d004      	beq.n	800796e <HAL_TIM_PWM_Start+0x1b2>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a18      	ldr	r2, [pc, #96]	@ (80079cc <HAL_TIM_PWM_Start+0x210>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d115      	bne.n	800799a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	4b19      	ldr	r3, [pc, #100]	@ (80079dc <HAL_TIM_PWM_Start+0x220>)
 8007976:	4013      	ands	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2b06      	cmp	r3, #6
 800797e:	d015      	beq.n	80079ac <HAL_TIM_PWM_Start+0x1f0>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007986:	d011      	beq.n	80079ac <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007998:	e008      	b.n	80079ac <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f042 0201 	orr.w	r2, r2, #1
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	e000      	b.n	80079ae <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	40012c00 	.word	0x40012c00
 80079bc:	40013400 	.word	0x40013400
 80079c0:	40014000 	.word	0x40014000
 80079c4:	40014400 	.word	0x40014400
 80079c8:	40014800 	.word	0x40014800
 80079cc:	40015000 	.word	0x40015000
 80079d0:	40000400 	.word	0x40000400
 80079d4:	40000800 	.word	0x40000800
 80079d8:	40000c00 	.word	0x40000c00
 80079dc:	00010007 	.word	0x00010007

080079e0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e04c      	b.n	8007a8e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d111      	bne.n	8007a24 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 fc1f 	bl	800924c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d102      	bne.n	8007a1c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a1f      	ldr	r2, [pc, #124]	@ (8007a98 <HAL_TIM_OnePulse_Init+0xb8>)
 8007a1a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	3304      	adds	r3, #4
 8007a34:	4619      	mov	r1, r3
 8007a36:	4610      	mov	r0, r2
 8007a38:	f000 ff68 	bl	800890c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0208 	bic.w	r2, r2, #8
 8007a4a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6819      	ldr	r1, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	08007a9d 	.word	0x08007a9d

08007a9c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ac0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ac8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ad0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ad8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d108      	bne.n	8007af2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d105      	bne.n	8007af2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ae6:	7b7b      	ldrb	r3, [r7, #13]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d102      	bne.n	8007af2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007aec:	7b3b      	ldrb	r3, [r7, #12]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d001      	beq.n	8007af6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e059      	b.n	8007baa <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2202      	movs	r2, #2
 8007afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2202      	movs	r2, #2
 8007b02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2202      	movs	r2, #2
 8007b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f042 0202 	orr.w	r2, r2, #2
 8007b24:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f042 0204 	orr.w	r2, r2, #4
 8007b34:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f001 fb5e 	bl	8009200 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	2104      	movs	r1, #4
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f001 fb57 	bl	8009200 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a17      	ldr	r2, [pc, #92]	@ (8007bb4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d018      	beq.n	8007b8e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a15      	ldr	r2, [pc, #84]	@ (8007bb8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d013      	beq.n	8007b8e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a14      	ldr	r2, [pc, #80]	@ (8007bbc <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d00e      	beq.n	8007b8e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a12      	ldr	r2, [pc, #72]	@ (8007bc0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d009      	beq.n	8007b8e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a11      	ldr	r2, [pc, #68]	@ (8007bc4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d004      	beq.n	8007b8e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a0f      	ldr	r2, [pc, #60]	@ (8007bc8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d101      	bne.n	8007b92 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007b92:	2300      	movs	r3, #0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d007      	beq.n	8007ba8 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ba6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	40012c00 	.word	0x40012c00
 8007bb8:	40013400 	.word	0x40013400
 8007bbc:	40014000 	.word	0x40014000
 8007bc0:	40014400 	.word	0x40014400
 8007bc4:	40014800 	.word	0x40014800
 8007bc8:	40015000 	.word	0x40015000

08007bcc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e0a2      	b.n	8007d26 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d111      	bne.n	8007c10 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f001 fb29 	bl	800924c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d102      	bne.n	8007c08 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a4a      	ldr	r2, [pc, #296]	@ (8007d30 <HAL_TIM_Encoder_Init+0x164>)
 8007c06:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	6812      	ldr	r2, [r2, #0]
 8007c22:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007c26:	f023 0307 	bic.w	r3, r3, #7
 8007c2a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	f000 fe68 	bl	800890c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c64:	f023 0303 	bic.w	r3, r3, #3
 8007c68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	021b      	lsls	r3, r3, #8
 8007c74:	4313      	orrs	r3, r2
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007c82:	f023 030c 	bic.w	r3, r3, #12
 8007c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007c8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	011a      	lsls	r2, r3, #4
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	031b      	lsls	r3, r3, #12
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007cc0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007cc8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	08003679 	.word	0x08003679

08007d34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d110      	bne.n	8007d86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d102      	bne.n	8007d70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d6a:	7b7b      	ldrb	r3, [r7, #13]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d001      	beq.n	8007d74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e069      	b.n	8007e48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d84:	e031      	b.n	8007dea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	d110      	bne.n	8007dae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d8c:	7bbb      	ldrb	r3, [r7, #14]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d102      	bne.n	8007d98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d92:	7b3b      	ldrb	r3, [r7, #12]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d001      	beq.n	8007d9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e055      	b.n	8007e48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2202      	movs	r2, #2
 8007da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dac:	e01d      	b.n	8007dea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d108      	bne.n	8007dc6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d105      	bne.n	8007dc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dba:	7b7b      	ldrb	r3, [r7, #13]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d102      	bne.n	8007dc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007dc0:	7b3b      	ldrb	r3, [r7, #12]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d001      	beq.n	8007dca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e03e      	b.n	8007e48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2202      	movs	r2, #2
 8007dde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2202      	movs	r2, #2
 8007de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <HAL_TIM_Encoder_Start+0xc4>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d008      	beq.n	8007e08 <HAL_TIM_Encoder_Start+0xd4>
 8007df6:	e00f      	b.n	8007e18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	2100      	movs	r1, #0
 8007e00:	4618      	mov	r0, r3
 8007e02:	f001 f9fd 	bl	8009200 <TIM_CCxChannelCmd>
      break;
 8007e06:	e016      	b.n	8007e36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	2104      	movs	r1, #4
 8007e10:	4618      	mov	r0, r3
 8007e12:	f001 f9f5 	bl	8009200 <TIM_CCxChannelCmd>
      break;
 8007e16:	e00e      	b.n	8007e36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	2100      	movs	r1, #0
 8007e20:	4618      	mov	r0, r3
 8007e22:	f001 f9ed 	bl	8009200 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	2104      	movs	r1, #4
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f001 f9e6 	bl	8009200 <TIM_CCxChannelCmd>
      break;
 8007e34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f042 0201 	orr.w	r2, r2, #1
 8007e44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d026      	beq.n	8007ec0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d021      	beq.n	8007ec0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f06f 0202 	mvn.w	r2, #2
 8007e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	f003 0303 	and.w	r3, r3, #3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d005      	beq.n	8007ea6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	4798      	blx	r3
 8007ea4:	e009      	b.n	8007eba <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f003 0304 	and.w	r3, r3, #4
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d026      	beq.n	8007f18 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d021      	beq.n	8007f18 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f06f 0204 	mvn.w	r2, #4
 8007edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	4798      	blx	r3
 8007efc:	e009      	b.n	8007f12 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f003 0308 	and.w	r3, r3, #8
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d026      	beq.n	8007f70 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d021      	beq.n	8007f70 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f06f 0208 	mvn.w	r2, #8
 8007f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2204      	movs	r2, #4
 8007f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	f003 0303 	and.w	r3, r3, #3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d005      	beq.n	8007f56 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	4798      	blx	r3
 8007f54:	e009      	b.n	8007f6a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f003 0310 	and.w	r3, r3, #16
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d026      	beq.n	8007fc8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f003 0310 	and.w	r3, r3, #16
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d021      	beq.n	8007fc8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f06f 0210 	mvn.w	r2, #16
 8007f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2208      	movs	r2, #8
 8007f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d005      	beq.n	8007fae <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	4798      	blx	r3
 8007fac:	e009      	b.n	8007fc2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00e      	beq.n	8007ff0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d009      	beq.n	8007ff0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f06f 0201 	mvn.w	r2, #1
 8007fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d104      	bne.n	8008004 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00e      	beq.n	8008022 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800800a:	2b00      	cmp	r3, #0
 800800c:	d009      	beq.n	8008022 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00e      	beq.n	800804a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008032:	2b00      	cmp	r3, #0
 8008034:	d009      	beq.n	800804a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800803e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00e      	beq.n	8008072 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	d009      	beq.n	8008072 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	f003 0320 	and.w	r3, r3, #32
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00e      	beq.n	800809a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f003 0320 	and.w	r3, r3, #32
 8008082:	2b00      	cmp	r3, #0
 8008084:	d009      	beq.n	800809a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f06f 0220 	mvn.w	r2, #32
 800808e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00e      	beq.n	80080c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d009      	beq.n	80080c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80080b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00e      	beq.n	80080ea <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d009      	beq.n	80080ea <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80080de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00e      	beq.n	8008112 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d009      	beq.n	8008112 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00e      	beq.n	800813a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d009      	beq.n	800813a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800812e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800813a:	bf00      	nop
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800815a:	2b01      	cmp	r3, #1
 800815c:	d101      	bne.n	8008162 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800815e:	2302      	movs	r3, #2
 8008160:	e0ff      	b.n	8008362 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b14      	cmp	r3, #20
 800816e:	f200 80f0 	bhi.w	8008352 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008172:	a201      	add	r2, pc, #4	@ (adr r2, 8008178 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008178:	080081cd 	.word	0x080081cd
 800817c:	08008353 	.word	0x08008353
 8008180:	08008353 	.word	0x08008353
 8008184:	08008353 	.word	0x08008353
 8008188:	0800820d 	.word	0x0800820d
 800818c:	08008353 	.word	0x08008353
 8008190:	08008353 	.word	0x08008353
 8008194:	08008353 	.word	0x08008353
 8008198:	0800824f 	.word	0x0800824f
 800819c:	08008353 	.word	0x08008353
 80081a0:	08008353 	.word	0x08008353
 80081a4:	08008353 	.word	0x08008353
 80081a8:	0800828f 	.word	0x0800828f
 80081ac:	08008353 	.word	0x08008353
 80081b0:	08008353 	.word	0x08008353
 80081b4:	08008353 	.word	0x08008353
 80081b8:	080082d1 	.word	0x080082d1
 80081bc:	08008353 	.word	0x08008353
 80081c0:	08008353 	.word	0x08008353
 80081c4:	08008353 	.word	0x08008353
 80081c8:	08008311 	.word	0x08008311
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fc4e 	bl	8008a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0208 	orr.w	r2, r2, #8
 80081e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 0204 	bic.w	r2, r2, #4
 80081f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6999      	ldr	r1, [r3, #24]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	691a      	ldr	r2, [r3, #16]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	619a      	str	r2, [r3, #24]
      break;
 800820a:	e0a5      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68b9      	ldr	r1, [r7, #8]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fcc8 	bl	8008ba8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699a      	ldr	r2, [r3, #24]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	699a      	ldr	r2, [r3, #24]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6999      	ldr	r1, [r3, #24]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	021a      	lsls	r2, r3, #8
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	619a      	str	r2, [r3, #24]
      break;
 800824c:	e084      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	4618      	mov	r0, r3
 8008256:	f000 fd3b 	bl	8008cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69da      	ldr	r2, [r3, #28]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f042 0208 	orr.w	r2, r2, #8
 8008268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69da      	ldr	r2, [r3, #28]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0204 	bic.w	r2, r2, #4
 8008278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69d9      	ldr	r1, [r3, #28]
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	61da      	str	r2, [r3, #28]
      break;
 800828c:	e064      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68b9      	ldr	r1, [r7, #8]
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fdad 	bl	8008df4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69da      	ldr	r2, [r3, #28]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	69da      	ldr	r2, [r3, #28]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	69d9      	ldr	r1, [r3, #28]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	021a      	lsls	r2, r3, #8
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	61da      	str	r2, [r3, #28]
      break;
 80082ce:	e043      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68b9      	ldr	r1, [r7, #8]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fe20 	bl	8008f1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f042 0208 	orr.w	r2, r2, #8
 80082ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f022 0204 	bic.w	r2, r2, #4
 80082fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	691a      	ldr	r2, [r3, #16]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800830e:	e023      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fe6a 	bl	8008ff0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800832a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800833a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	021a      	lsls	r2, r3, #8
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008350:	e002      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	75fb      	strb	r3, [r7, #23]
      break;
 8008356:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008360:	7dfb      	ldrb	r3, [r7, #23]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop

0800836c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008380:	2b01      	cmp	r3, #1
 8008382:	d101      	bne.n	8008388 <HAL_TIM_ConfigClockSource+0x1c>
 8008384:	2302      	movs	r3, #2
 8008386:	e0f6      	b.n	8008576 <HAL_TIM_ConfigClockSource+0x20a>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80083a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80083aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a6f      	ldr	r2, [pc, #444]	@ (8008580 <HAL_TIM_ConfigClockSource+0x214>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	f000 80c1 	beq.w	800854a <HAL_TIM_ConfigClockSource+0x1de>
 80083c8:	4a6d      	ldr	r2, [pc, #436]	@ (8008580 <HAL_TIM_ConfigClockSource+0x214>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	f200 80c6 	bhi.w	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 80083d0:	4a6c      	ldr	r2, [pc, #432]	@ (8008584 <HAL_TIM_ConfigClockSource+0x218>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	f000 80b9 	beq.w	800854a <HAL_TIM_ConfigClockSource+0x1de>
 80083d8:	4a6a      	ldr	r2, [pc, #424]	@ (8008584 <HAL_TIM_ConfigClockSource+0x218>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	f200 80be 	bhi.w	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 80083e0:	4a69      	ldr	r2, [pc, #420]	@ (8008588 <HAL_TIM_ConfigClockSource+0x21c>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	f000 80b1 	beq.w	800854a <HAL_TIM_ConfigClockSource+0x1de>
 80083e8:	4a67      	ldr	r2, [pc, #412]	@ (8008588 <HAL_TIM_ConfigClockSource+0x21c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	f200 80b6 	bhi.w	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 80083f0:	4a66      	ldr	r2, [pc, #408]	@ (800858c <HAL_TIM_ConfigClockSource+0x220>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	f000 80a9 	beq.w	800854a <HAL_TIM_ConfigClockSource+0x1de>
 80083f8:	4a64      	ldr	r2, [pc, #400]	@ (800858c <HAL_TIM_ConfigClockSource+0x220>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	f200 80ae 	bhi.w	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 8008400:	4a63      	ldr	r2, [pc, #396]	@ (8008590 <HAL_TIM_ConfigClockSource+0x224>)
 8008402:	4293      	cmp	r3, r2
 8008404:	f000 80a1 	beq.w	800854a <HAL_TIM_ConfigClockSource+0x1de>
 8008408:	4a61      	ldr	r2, [pc, #388]	@ (8008590 <HAL_TIM_ConfigClockSource+0x224>)
 800840a:	4293      	cmp	r3, r2
 800840c:	f200 80a6 	bhi.w	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 8008410:	4a60      	ldr	r2, [pc, #384]	@ (8008594 <HAL_TIM_ConfigClockSource+0x228>)
 8008412:	4293      	cmp	r3, r2
 8008414:	f000 8099 	beq.w	800854a <HAL_TIM_ConfigClockSource+0x1de>
 8008418:	4a5e      	ldr	r2, [pc, #376]	@ (8008594 <HAL_TIM_ConfigClockSource+0x228>)
 800841a:	4293      	cmp	r3, r2
 800841c:	f200 809e 	bhi.w	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 8008420:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008424:	f000 8091 	beq.w	800854a <HAL_TIM_ConfigClockSource+0x1de>
 8008428:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800842c:	f200 8096 	bhi.w	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 8008430:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008434:	f000 8089 	beq.w	800854a <HAL_TIM_ConfigClockSource+0x1de>
 8008438:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800843c:	f200 808e 	bhi.w	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 8008440:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008444:	d03e      	beq.n	80084c4 <HAL_TIM_ConfigClockSource+0x158>
 8008446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800844a:	f200 8087 	bhi.w	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 800844e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008452:	f000 8086 	beq.w	8008562 <HAL_TIM_ConfigClockSource+0x1f6>
 8008456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800845a:	d87f      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 800845c:	2b70      	cmp	r3, #112	@ 0x70
 800845e:	d01a      	beq.n	8008496 <HAL_TIM_ConfigClockSource+0x12a>
 8008460:	2b70      	cmp	r3, #112	@ 0x70
 8008462:	d87b      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 8008464:	2b60      	cmp	r3, #96	@ 0x60
 8008466:	d050      	beq.n	800850a <HAL_TIM_ConfigClockSource+0x19e>
 8008468:	2b60      	cmp	r3, #96	@ 0x60
 800846a:	d877      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 800846c:	2b50      	cmp	r3, #80	@ 0x50
 800846e:	d03c      	beq.n	80084ea <HAL_TIM_ConfigClockSource+0x17e>
 8008470:	2b50      	cmp	r3, #80	@ 0x50
 8008472:	d873      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 8008474:	2b40      	cmp	r3, #64	@ 0x40
 8008476:	d058      	beq.n	800852a <HAL_TIM_ConfigClockSource+0x1be>
 8008478:	2b40      	cmp	r3, #64	@ 0x40
 800847a:	d86f      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 800847c:	2b30      	cmp	r3, #48	@ 0x30
 800847e:	d064      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x1de>
 8008480:	2b30      	cmp	r3, #48	@ 0x30
 8008482:	d86b      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 8008484:	2b20      	cmp	r3, #32
 8008486:	d060      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x1de>
 8008488:	2b20      	cmp	r3, #32
 800848a:	d867      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x1f0>
 800848c:	2b00      	cmp	r3, #0
 800848e:	d05c      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x1de>
 8008490:	2b10      	cmp	r3, #16
 8008492:	d05a      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x1de>
 8008494:	e062      	b.n	800855c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084a6:	f000 fe8b 	bl	80091c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	609a      	str	r2, [r3, #8]
      break;
 80084c2:	e04f      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084d4:	f000 fe74 	bl	80091c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689a      	ldr	r2, [r3, #8]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084e6:	609a      	str	r2, [r3, #8]
      break;
 80084e8:	e03c      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084f6:	461a      	mov	r2, r3
 80084f8:	f000 fde6 	bl	80090c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2150      	movs	r1, #80	@ 0x50
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fe3f 	bl	8009186 <TIM_ITRx_SetConfig>
      break;
 8008508:	e02c      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008516:	461a      	mov	r2, r3
 8008518:	f000 fe05 	bl	8009126 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2160      	movs	r1, #96	@ 0x60
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fe2f 	bl	8009186 <TIM_ITRx_SetConfig>
      break;
 8008528:	e01c      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008536:	461a      	mov	r2, r3
 8008538:	f000 fdc6 	bl	80090c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2140      	movs	r1, #64	@ 0x40
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fe1f 	bl	8009186 <TIM_ITRx_SetConfig>
      break;
 8008548:	e00c      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4619      	mov	r1, r3
 8008554:	4610      	mov	r0, r2
 8008556:	f000 fe16 	bl	8009186 <TIM_ITRx_SetConfig>
      break;
 800855a:	e003      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	73fb      	strb	r3, [r7, #15]
      break;
 8008560:	e000      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008562:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008574:	7bfb      	ldrb	r3, [r7, #15]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	00100070 	.word	0x00100070
 8008584:	00100060 	.word	0x00100060
 8008588:	00100050 	.word	0x00100050
 800858c:	00100040 	.word	0x00100040
 8008590:	00100030 	.word	0x00100030
 8008594:	00100020 	.word	0x00100020

08008598 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	460b      	mov	r3, r1
 8008656:	607a      	str	r2, [r7, #4]
 8008658:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e14a      	b.n	80088fe <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b01      	cmp	r3, #1
 8008672:	f040 80dd 	bne.w	8008830 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008676:	7afb      	ldrb	r3, [r7, #11]
 8008678:	2b1f      	cmp	r3, #31
 800867a:	f200 80d6 	bhi.w	800882a <HAL_TIM_RegisterCallback+0x1de>
 800867e:	a201      	add	r2, pc, #4	@ (adr r2, 8008684 <HAL_TIM_RegisterCallback+0x38>)
 8008680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008684:	08008705 	.word	0x08008705
 8008688:	0800870d 	.word	0x0800870d
 800868c:	08008715 	.word	0x08008715
 8008690:	0800871d 	.word	0x0800871d
 8008694:	08008725 	.word	0x08008725
 8008698:	0800872d 	.word	0x0800872d
 800869c:	08008735 	.word	0x08008735
 80086a0:	0800873d 	.word	0x0800873d
 80086a4:	08008745 	.word	0x08008745
 80086a8:	0800874d 	.word	0x0800874d
 80086ac:	08008755 	.word	0x08008755
 80086b0:	0800875d 	.word	0x0800875d
 80086b4:	08008765 	.word	0x08008765
 80086b8:	0800876d 	.word	0x0800876d
 80086bc:	08008777 	.word	0x08008777
 80086c0:	08008781 	.word	0x08008781
 80086c4:	0800878b 	.word	0x0800878b
 80086c8:	08008795 	.word	0x08008795
 80086cc:	0800879f 	.word	0x0800879f
 80086d0:	080087a9 	.word	0x080087a9
 80086d4:	080087b3 	.word	0x080087b3
 80086d8:	080087bd 	.word	0x080087bd
 80086dc:	080087c7 	.word	0x080087c7
 80086e0:	080087d1 	.word	0x080087d1
 80086e4:	080087db 	.word	0x080087db
 80086e8:	080087e5 	.word	0x080087e5
 80086ec:	080087ef 	.word	0x080087ef
 80086f0:	080087f9 	.word	0x080087f9
 80086f4:	08008803 	.word	0x08008803
 80086f8:	0800880d 	.word	0x0800880d
 80086fc:	08008817 	.word	0x08008817
 8008700:	08008821 	.word	0x08008821
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800870a:	e0f7      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008712:	e0f3      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800871a:	e0ef      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008722:	e0eb      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800872a:	e0e7      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008732:	e0e3      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800873a:	e0df      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008742:	e0db      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800874a:	e0d7      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008752:	e0d3      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800875a:	e0cf      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008762:	e0cb      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800876a:	e0c7      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008774:	e0c2      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800877e:	e0bd      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008788:	e0b8      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008792:	e0b3      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800879c:	e0ae      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80087a6:	e0a9      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80087b0:	e0a4      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80087ba:	e09f      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80087c4:	e09a      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80087ce:	e095      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80087d8:	e090      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80087e2:	e08b      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80087ec:	e086      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80087f6:	e081      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008800:	e07c      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800880a:	e077      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008814:	e072      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800881e:	e06d      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008828:	e068      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	75fb      	strb	r3, [r7, #23]
        break;
 800882e:	e065      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b00      	cmp	r3, #0
 800883a:	d15d      	bne.n	80088f8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800883c:	7afb      	ldrb	r3, [r7, #11]
 800883e:	2b0d      	cmp	r3, #13
 8008840:	d857      	bhi.n	80088f2 <HAL_TIM_RegisterCallback+0x2a6>
 8008842:	a201      	add	r2, pc, #4	@ (adr r2, 8008848 <HAL_TIM_RegisterCallback+0x1fc>)
 8008844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008848:	08008881 	.word	0x08008881
 800884c:	08008889 	.word	0x08008889
 8008850:	08008891 	.word	0x08008891
 8008854:	08008899 	.word	0x08008899
 8008858:	080088a1 	.word	0x080088a1
 800885c:	080088a9 	.word	0x080088a9
 8008860:	080088b1 	.word	0x080088b1
 8008864:	080088b9 	.word	0x080088b9
 8008868:	080088c1 	.word	0x080088c1
 800886c:	080088c9 	.word	0x080088c9
 8008870:	080088d1 	.word	0x080088d1
 8008874:	080088d9 	.word	0x080088d9
 8008878:	080088e1 	.word	0x080088e1
 800887c:	080088e9 	.word	0x080088e9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008886:	e039      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800888e:	e035      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008896:	e031      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800889e:	e02d      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80088a6:	e029      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80088ae:	e025      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80088b6:	e021      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80088be:	e01d      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80088c6:	e019      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80088ce:	e015      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80088d6:	e011      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80088de:	e00d      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80088e6:	e009      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80088f0:	e004      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	75fb      	strb	r3, [r7, #23]
        break;
 80088f6:	e001      	b.n	80088fc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80088fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop

0800890c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a4c      	ldr	r2, [pc, #304]	@ (8008a50 <TIM_Base_SetConfig+0x144>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d017      	beq.n	8008954 <TIM_Base_SetConfig+0x48>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800892a:	d013      	beq.n	8008954 <TIM_Base_SetConfig+0x48>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a49      	ldr	r2, [pc, #292]	@ (8008a54 <TIM_Base_SetConfig+0x148>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d00f      	beq.n	8008954 <TIM_Base_SetConfig+0x48>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a48      	ldr	r2, [pc, #288]	@ (8008a58 <TIM_Base_SetConfig+0x14c>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d00b      	beq.n	8008954 <TIM_Base_SetConfig+0x48>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a47      	ldr	r2, [pc, #284]	@ (8008a5c <TIM_Base_SetConfig+0x150>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d007      	beq.n	8008954 <TIM_Base_SetConfig+0x48>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a46      	ldr	r2, [pc, #280]	@ (8008a60 <TIM_Base_SetConfig+0x154>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d003      	beq.n	8008954 <TIM_Base_SetConfig+0x48>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a45      	ldr	r2, [pc, #276]	@ (8008a64 <TIM_Base_SetConfig+0x158>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d108      	bne.n	8008966 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800895a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	4313      	orrs	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a39      	ldr	r2, [pc, #228]	@ (8008a50 <TIM_Base_SetConfig+0x144>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d023      	beq.n	80089b6 <TIM_Base_SetConfig+0xaa>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008974:	d01f      	beq.n	80089b6 <TIM_Base_SetConfig+0xaa>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a36      	ldr	r2, [pc, #216]	@ (8008a54 <TIM_Base_SetConfig+0x148>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d01b      	beq.n	80089b6 <TIM_Base_SetConfig+0xaa>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a35      	ldr	r2, [pc, #212]	@ (8008a58 <TIM_Base_SetConfig+0x14c>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d017      	beq.n	80089b6 <TIM_Base_SetConfig+0xaa>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a34      	ldr	r2, [pc, #208]	@ (8008a5c <TIM_Base_SetConfig+0x150>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d013      	beq.n	80089b6 <TIM_Base_SetConfig+0xaa>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a33      	ldr	r2, [pc, #204]	@ (8008a60 <TIM_Base_SetConfig+0x154>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d00f      	beq.n	80089b6 <TIM_Base_SetConfig+0xaa>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a33      	ldr	r2, [pc, #204]	@ (8008a68 <TIM_Base_SetConfig+0x15c>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d00b      	beq.n	80089b6 <TIM_Base_SetConfig+0xaa>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a32      	ldr	r2, [pc, #200]	@ (8008a6c <TIM_Base_SetConfig+0x160>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d007      	beq.n	80089b6 <TIM_Base_SetConfig+0xaa>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a31      	ldr	r2, [pc, #196]	@ (8008a70 <TIM_Base_SetConfig+0x164>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d003      	beq.n	80089b6 <TIM_Base_SetConfig+0xaa>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a2c      	ldr	r2, [pc, #176]	@ (8008a64 <TIM_Base_SetConfig+0x158>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d108      	bne.n	80089c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a18      	ldr	r2, [pc, #96]	@ (8008a50 <TIM_Base_SetConfig+0x144>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d013      	beq.n	8008a1c <TIM_Base_SetConfig+0x110>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a1a      	ldr	r2, [pc, #104]	@ (8008a60 <TIM_Base_SetConfig+0x154>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d00f      	beq.n	8008a1c <TIM_Base_SetConfig+0x110>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a1a      	ldr	r2, [pc, #104]	@ (8008a68 <TIM_Base_SetConfig+0x15c>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d00b      	beq.n	8008a1c <TIM_Base_SetConfig+0x110>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a19      	ldr	r2, [pc, #100]	@ (8008a6c <TIM_Base_SetConfig+0x160>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d007      	beq.n	8008a1c <TIM_Base_SetConfig+0x110>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a18      	ldr	r2, [pc, #96]	@ (8008a70 <TIM_Base_SetConfig+0x164>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d003      	beq.n	8008a1c <TIM_Base_SetConfig+0x110>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a13      	ldr	r2, [pc, #76]	@ (8008a64 <TIM_Base_SetConfig+0x158>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d103      	bne.n	8008a24 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	691a      	ldr	r2, [r3, #16]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d105      	bne.n	8008a42 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	f023 0201 	bic.w	r2, r3, #1
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	611a      	str	r2, [r3, #16]
  }
}
 8008a42:	bf00      	nop
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	40012c00 	.word	0x40012c00
 8008a54:	40000400 	.word	0x40000400
 8008a58:	40000800 	.word	0x40000800
 8008a5c:	40000c00 	.word	0x40000c00
 8008a60:	40013400 	.word	0x40013400
 8008a64:	40015000 	.word	0x40015000
 8008a68:	40014000 	.word	0x40014000
 8008a6c:	40014400 	.word	0x40014400
 8008a70:	40014800 	.word	0x40014800

08008a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a1b      	ldr	r3, [r3, #32]
 8008a88:	f023 0201 	bic.w	r2, r3, #1
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f023 0303 	bic.w	r3, r3, #3
 8008aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f023 0302 	bic.w	r3, r3, #2
 8008ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a30      	ldr	r2, [pc, #192]	@ (8008b90 <TIM_OC1_SetConfig+0x11c>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d013      	beq.n	8008afc <TIM_OC1_SetConfig+0x88>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8008b94 <TIM_OC1_SetConfig+0x120>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d00f      	beq.n	8008afc <TIM_OC1_SetConfig+0x88>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a2e      	ldr	r2, [pc, #184]	@ (8008b98 <TIM_OC1_SetConfig+0x124>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d00b      	beq.n	8008afc <TIM_OC1_SetConfig+0x88>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8008b9c <TIM_OC1_SetConfig+0x128>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d007      	beq.n	8008afc <TIM_OC1_SetConfig+0x88>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a2c      	ldr	r2, [pc, #176]	@ (8008ba0 <TIM_OC1_SetConfig+0x12c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d003      	beq.n	8008afc <TIM_OC1_SetConfig+0x88>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a2b      	ldr	r2, [pc, #172]	@ (8008ba4 <TIM_OC1_SetConfig+0x130>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d10c      	bne.n	8008b16 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	f023 0308 	bic.w	r3, r3, #8
 8008b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f023 0304 	bic.w	r3, r3, #4
 8008b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a1d      	ldr	r2, [pc, #116]	@ (8008b90 <TIM_OC1_SetConfig+0x11c>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d013      	beq.n	8008b46 <TIM_OC1_SetConfig+0xd2>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a1c      	ldr	r2, [pc, #112]	@ (8008b94 <TIM_OC1_SetConfig+0x120>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00f      	beq.n	8008b46 <TIM_OC1_SetConfig+0xd2>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a1b      	ldr	r2, [pc, #108]	@ (8008b98 <TIM_OC1_SetConfig+0x124>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00b      	beq.n	8008b46 <TIM_OC1_SetConfig+0xd2>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a1a      	ldr	r2, [pc, #104]	@ (8008b9c <TIM_OC1_SetConfig+0x128>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d007      	beq.n	8008b46 <TIM_OC1_SetConfig+0xd2>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a19      	ldr	r2, [pc, #100]	@ (8008ba0 <TIM_OC1_SetConfig+0x12c>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d003      	beq.n	8008b46 <TIM_OC1_SetConfig+0xd2>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a18      	ldr	r2, [pc, #96]	@ (8008ba4 <TIM_OC1_SetConfig+0x130>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d111      	bne.n	8008b6a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	621a      	str	r2, [r3, #32]
}
 8008b84:	bf00      	nop
 8008b86:	371c      	adds	r7, #28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	40012c00 	.word	0x40012c00
 8008b94:	40013400 	.word	0x40013400
 8008b98:	40014000 	.word	0x40014000
 8008b9c:	40014400 	.word	0x40014400
 8008ba0:	40014800 	.word	0x40014800
 8008ba4:	40015000 	.word	0x40015000

08008ba8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a1b      	ldr	r3, [r3, #32]
 8008bbc:	f023 0210 	bic.w	r2, r3, #16
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	021b      	lsls	r3, r3, #8
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f023 0320 	bic.w	r3, r3, #32
 8008bf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	011b      	lsls	r3, r3, #4
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a2c      	ldr	r2, [pc, #176]	@ (8008cb8 <TIM_OC2_SetConfig+0x110>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d007      	beq.n	8008c1c <TIM_OC2_SetConfig+0x74>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a2b      	ldr	r2, [pc, #172]	@ (8008cbc <TIM_OC2_SetConfig+0x114>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d003      	beq.n	8008c1c <TIM_OC2_SetConfig+0x74>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a2a      	ldr	r2, [pc, #168]	@ (8008cc0 <TIM_OC2_SetConfig+0x118>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d10d      	bne.n	8008c38 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	011b      	lsls	r3, r3, #4
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8008cb8 <TIM_OC2_SetConfig+0x110>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d013      	beq.n	8008c68 <TIM_OC2_SetConfig+0xc0>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a1e      	ldr	r2, [pc, #120]	@ (8008cbc <TIM_OC2_SetConfig+0x114>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d00f      	beq.n	8008c68 <TIM_OC2_SetConfig+0xc0>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8008cc4 <TIM_OC2_SetConfig+0x11c>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d00b      	beq.n	8008c68 <TIM_OC2_SetConfig+0xc0>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a1d      	ldr	r2, [pc, #116]	@ (8008cc8 <TIM_OC2_SetConfig+0x120>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d007      	beq.n	8008c68 <TIM_OC2_SetConfig+0xc0>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8008ccc <TIM_OC2_SetConfig+0x124>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d003      	beq.n	8008c68 <TIM_OC2_SetConfig+0xc0>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a17      	ldr	r2, [pc, #92]	@ (8008cc0 <TIM_OC2_SetConfig+0x118>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d113      	bne.n	8008c90 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	621a      	str	r2, [r3, #32]
}
 8008caa:	bf00      	nop
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	40012c00 	.word	0x40012c00
 8008cbc:	40013400 	.word	0x40013400
 8008cc0:	40015000 	.word	0x40015000
 8008cc4:	40014000 	.word	0x40014000
 8008cc8:	40014400 	.word	0x40014400
 8008ccc:	40014800 	.word	0x40014800

08008cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a1b      	ldr	r3, [r3, #32]
 8008ce4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 0303 	bic.w	r3, r3, #3
 8008d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	021b      	lsls	r3, r3, #8
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8008ddc <TIM_OC3_SetConfig+0x10c>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d007      	beq.n	8008d42 <TIM_OC3_SetConfig+0x72>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a2a      	ldr	r2, [pc, #168]	@ (8008de0 <TIM_OC3_SetConfig+0x110>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d003      	beq.n	8008d42 <TIM_OC3_SetConfig+0x72>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a29      	ldr	r2, [pc, #164]	@ (8008de4 <TIM_OC3_SetConfig+0x114>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d10d      	bne.n	8008d5e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	021b      	lsls	r3, r3, #8
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a1e      	ldr	r2, [pc, #120]	@ (8008ddc <TIM_OC3_SetConfig+0x10c>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d013      	beq.n	8008d8e <TIM_OC3_SetConfig+0xbe>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a1d      	ldr	r2, [pc, #116]	@ (8008de0 <TIM_OC3_SetConfig+0x110>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d00f      	beq.n	8008d8e <TIM_OC3_SetConfig+0xbe>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a1d      	ldr	r2, [pc, #116]	@ (8008de8 <TIM_OC3_SetConfig+0x118>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d00b      	beq.n	8008d8e <TIM_OC3_SetConfig+0xbe>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a1c      	ldr	r2, [pc, #112]	@ (8008dec <TIM_OC3_SetConfig+0x11c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d007      	beq.n	8008d8e <TIM_OC3_SetConfig+0xbe>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a1b      	ldr	r2, [pc, #108]	@ (8008df0 <TIM_OC3_SetConfig+0x120>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d003      	beq.n	8008d8e <TIM_OC3_SetConfig+0xbe>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a16      	ldr	r2, [pc, #88]	@ (8008de4 <TIM_OC3_SetConfig+0x114>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d113      	bne.n	8008db6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	011b      	lsls	r3, r3, #4
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	011b      	lsls	r3, r3, #4
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	685a      	ldr	r2, [r3, #4]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	621a      	str	r2, [r3, #32]
}
 8008dd0:	bf00      	nop
 8008dd2:	371c      	adds	r7, #28
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr
 8008ddc:	40012c00 	.word	0x40012c00
 8008de0:	40013400 	.word	0x40013400
 8008de4:	40015000 	.word	0x40015000
 8008de8:	40014000 	.word	0x40014000
 8008dec:	40014400 	.word	0x40014400
 8008df0:	40014800 	.word	0x40014800

08008df4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a1b      	ldr	r3, [r3, #32]
 8008e08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	69db      	ldr	r3, [r3, #28]
 8008e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	021b      	lsls	r3, r3, #8
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	031b      	lsls	r3, r3, #12
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a2c      	ldr	r2, [pc, #176]	@ (8008f04 <TIM_OC4_SetConfig+0x110>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d007      	beq.n	8008e68 <TIM_OC4_SetConfig+0x74>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8008f08 <TIM_OC4_SetConfig+0x114>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d003      	beq.n	8008e68 <TIM_OC4_SetConfig+0x74>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a2a      	ldr	r2, [pc, #168]	@ (8008f0c <TIM_OC4_SetConfig+0x118>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d10d      	bne.n	8008e84 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	031b      	lsls	r3, r3, #12
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a1f      	ldr	r2, [pc, #124]	@ (8008f04 <TIM_OC4_SetConfig+0x110>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d013      	beq.n	8008eb4 <TIM_OC4_SetConfig+0xc0>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8008f08 <TIM_OC4_SetConfig+0x114>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d00f      	beq.n	8008eb4 <TIM_OC4_SetConfig+0xc0>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a1e      	ldr	r2, [pc, #120]	@ (8008f10 <TIM_OC4_SetConfig+0x11c>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d00b      	beq.n	8008eb4 <TIM_OC4_SetConfig+0xc0>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8008f14 <TIM_OC4_SetConfig+0x120>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d007      	beq.n	8008eb4 <TIM_OC4_SetConfig+0xc0>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8008f18 <TIM_OC4_SetConfig+0x124>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d003      	beq.n	8008eb4 <TIM_OC4_SetConfig+0xc0>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a17      	ldr	r2, [pc, #92]	@ (8008f0c <TIM_OC4_SetConfig+0x118>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d113      	bne.n	8008edc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008eba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ec2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	019b      	lsls	r3, r3, #6
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	019b      	lsls	r3, r3, #6
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	693a      	ldr	r2, [r7, #16]
 8008ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	621a      	str	r2, [r3, #32]
}
 8008ef6:	bf00      	nop
 8008ef8:	371c      	adds	r7, #28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	40012c00 	.word	0x40012c00
 8008f08:	40013400 	.word	0x40013400
 8008f0c:	40015000 	.word	0x40015000
 8008f10:	40014000 	.word	0x40014000
 8008f14:	40014400 	.word	0x40014400
 8008f18:	40014800 	.word	0x40014800

08008f1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a1b      	ldr	r3, [r3, #32]
 8008f30:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008f60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	041b      	lsls	r3, r3, #16
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a19      	ldr	r2, [pc, #100]	@ (8008fd8 <TIM_OC5_SetConfig+0xbc>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d013      	beq.n	8008f9e <TIM_OC5_SetConfig+0x82>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a18      	ldr	r2, [pc, #96]	@ (8008fdc <TIM_OC5_SetConfig+0xc0>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d00f      	beq.n	8008f9e <TIM_OC5_SetConfig+0x82>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a17      	ldr	r2, [pc, #92]	@ (8008fe0 <TIM_OC5_SetConfig+0xc4>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d00b      	beq.n	8008f9e <TIM_OC5_SetConfig+0x82>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a16      	ldr	r2, [pc, #88]	@ (8008fe4 <TIM_OC5_SetConfig+0xc8>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d007      	beq.n	8008f9e <TIM_OC5_SetConfig+0x82>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a15      	ldr	r2, [pc, #84]	@ (8008fe8 <TIM_OC5_SetConfig+0xcc>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d003      	beq.n	8008f9e <TIM_OC5_SetConfig+0x82>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a14      	ldr	r2, [pc, #80]	@ (8008fec <TIM_OC5_SetConfig+0xd0>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d109      	bne.n	8008fb2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	021b      	lsls	r3, r3, #8
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	697a      	ldr	r2, [r7, #20]
 8008fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	621a      	str	r2, [r3, #32]
}
 8008fcc:	bf00      	nop
 8008fce:	371c      	adds	r7, #28
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	40012c00 	.word	0x40012c00
 8008fdc:	40013400 	.word	0x40013400
 8008fe0:	40014000 	.word	0x40014000
 8008fe4:	40014400 	.word	0x40014400
 8008fe8:	40014800 	.word	0x40014800
 8008fec:	40015000 	.word	0x40015000

08008ff0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a1b      	ldr	r3, [r3, #32]
 8009004:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800901e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	021b      	lsls	r3, r3, #8
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	4313      	orrs	r3, r2
 800902e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	051b      	lsls	r3, r3, #20
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	4313      	orrs	r3, r2
 8009042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a1a      	ldr	r2, [pc, #104]	@ (80090b0 <TIM_OC6_SetConfig+0xc0>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d013      	beq.n	8009074 <TIM_OC6_SetConfig+0x84>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a19      	ldr	r2, [pc, #100]	@ (80090b4 <TIM_OC6_SetConfig+0xc4>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d00f      	beq.n	8009074 <TIM_OC6_SetConfig+0x84>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a18      	ldr	r2, [pc, #96]	@ (80090b8 <TIM_OC6_SetConfig+0xc8>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d00b      	beq.n	8009074 <TIM_OC6_SetConfig+0x84>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a17      	ldr	r2, [pc, #92]	@ (80090bc <TIM_OC6_SetConfig+0xcc>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d007      	beq.n	8009074 <TIM_OC6_SetConfig+0x84>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a16      	ldr	r2, [pc, #88]	@ (80090c0 <TIM_OC6_SetConfig+0xd0>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d003      	beq.n	8009074 <TIM_OC6_SetConfig+0x84>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a15      	ldr	r2, [pc, #84]	@ (80090c4 <TIM_OC6_SetConfig+0xd4>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d109      	bne.n	8009088 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800907a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	695b      	ldr	r3, [r3, #20]
 8009080:	029b      	lsls	r3, r3, #10
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	4313      	orrs	r3, r2
 8009086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	621a      	str	r2, [r3, #32]
}
 80090a2:	bf00      	nop
 80090a4:	371c      	adds	r7, #28
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	40012c00 	.word	0x40012c00
 80090b4:	40013400 	.word	0x40013400
 80090b8:	40014000 	.word	0x40014000
 80090bc:	40014400 	.word	0x40014400
 80090c0:	40014800 	.word	0x40014800
 80090c4:	40015000 	.word	0x40015000

080090c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
 80090d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	f023 0201 	bic.w	r2, r3, #1
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	011b      	lsls	r3, r3, #4
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f023 030a 	bic.w	r3, r3, #10
 8009104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	4313      	orrs	r3, r2
 800910c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	621a      	str	r2, [r3, #32]
}
 800911a:	bf00      	nop
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009126:	b480      	push	{r7}
 8009128:	b087      	sub	sp, #28
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6a1b      	ldr	r3, [r3, #32]
 800913c:	f023 0210 	bic.w	r2, r3, #16
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009150:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	031b      	lsls	r3, r3, #12
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	4313      	orrs	r3, r2
 800915a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009162:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	011b      	lsls	r3, r3, #4
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	4313      	orrs	r3, r2
 800916c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	621a      	str	r2, [r3, #32]
}
 800917a:	bf00      	nop
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009186:	b480      	push	{r7}
 8009188:	b085      	sub	sp, #20
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800919c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	f043 0307 	orr.w	r3, r3, #7
 80091ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	609a      	str	r2, [r3, #8]
}
 80091b4:	bf00      	nop
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80091da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	021a      	lsls	r2, r3, #8
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	431a      	orrs	r2, r3
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	609a      	str	r2, [r3, #8]
}
 80091f4:	bf00      	nop
 80091f6:	371c      	adds	r7, #28
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f003 031f 	and.w	r3, r3, #31
 8009212:	2201      	movs	r2, #1
 8009214:	fa02 f303 	lsl.w	r3, r2, r3
 8009218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6a1a      	ldr	r2, [r3, #32]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	43db      	mvns	r3, r3
 8009222:	401a      	ands	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6a1a      	ldr	r2, [r3, #32]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f003 031f 	and.w	r3, r3, #31
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	fa01 f303 	lsl.w	r3, r1, r3
 8009238:	431a      	orrs	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	621a      	str	r2, [r3, #32]
}
 800923e:	bf00      	nop
 8009240:	371c      	adds	r7, #28
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
	...

0800924c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a26      	ldr	r2, [pc, #152]	@ (80092f0 <TIM_ResetCallback+0xa4>)
 8009258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a25      	ldr	r2, [pc, #148]	@ (80092f4 <TIM_ResetCallback+0xa8>)
 8009260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a24      	ldr	r2, [pc, #144]	@ (80092f8 <TIM_ResetCallback+0xac>)
 8009268:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a23      	ldr	r2, [pc, #140]	@ (80092fc <TIM_ResetCallback+0xb0>)
 8009270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a22      	ldr	r2, [pc, #136]	@ (8009300 <TIM_ResetCallback+0xb4>)
 8009278:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a21      	ldr	r2, [pc, #132]	@ (8009304 <TIM_ResetCallback+0xb8>)
 8009280:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a20      	ldr	r2, [pc, #128]	@ (8009308 <TIM_ResetCallback+0xbc>)
 8009288:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a1f      	ldr	r2, [pc, #124]	@ (800930c <TIM_ResetCallback+0xc0>)
 8009290:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a1e      	ldr	r2, [pc, #120]	@ (8009310 <TIM_ResetCallback+0xc4>)
 8009298:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a1d      	ldr	r2, [pc, #116]	@ (8009314 <TIM_ResetCallback+0xc8>)
 80092a0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009318 <TIM_ResetCallback+0xcc>)
 80092a8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a1b      	ldr	r2, [pc, #108]	@ (800931c <TIM_ResetCallback+0xd0>)
 80092b0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a1a      	ldr	r2, [pc, #104]	@ (8009320 <TIM_ResetCallback+0xd4>)
 80092b8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a19      	ldr	r2, [pc, #100]	@ (8009324 <TIM_ResetCallback+0xd8>)
 80092c0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a18      	ldr	r2, [pc, #96]	@ (8009328 <TIM_ResetCallback+0xdc>)
 80092c8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a17      	ldr	r2, [pc, #92]	@ (800932c <TIM_ResetCallback+0xe0>)
 80092d0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a16      	ldr	r2, [pc, #88]	@ (8009330 <TIM_ResetCallback+0xe4>)
 80092d8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a15      	ldr	r2, [pc, #84]	@ (8009334 <TIM_ResetCallback+0xe8>)
 80092e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	08002655 	.word	0x08002655
 80092f4:	08008599 	.word	0x08008599
 80092f8:	08008611 	.word	0x08008611
 80092fc:	08008625 	.word	0x08008625
 8009300:	080085c1 	.word	0x080085c1
 8009304:	080085d5 	.word	0x080085d5
 8009308:	080085ad 	.word	0x080085ad
 800930c:	080085e9 	.word	0x080085e9
 8009310:	080085fd 	.word	0x080085fd
 8009314:	08008639 	.word	0x08008639
 8009318:	0800958d 	.word	0x0800958d
 800931c:	080095a1 	.word	0x080095a1
 8009320:	080095b5 	.word	0x080095b5
 8009324:	080095c9 	.word	0x080095c9
 8009328:	080095dd 	.word	0x080095dd
 800932c:	080095f1 	.word	0x080095f1
 8009330:	08009605 	.word	0x08009605
 8009334:	08009619 	.word	0x08009619

08009338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009348:	2b01      	cmp	r3, #1
 800934a:	d101      	bne.n	8009350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800934c:	2302      	movs	r3, #2
 800934e:	e074      	b.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a34      	ldr	r2, [pc, #208]	@ (8009448 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d009      	beq.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a33      	ldr	r2, [pc, #204]	@ (800944c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d004      	beq.n	800938e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a31      	ldr	r2, [pc, #196]	@ (8009450 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d108      	bne.n	80093a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009394:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	4313      	orrs	r3, r2
 800939e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80093a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a21      	ldr	r2, [pc, #132]	@ (8009448 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d022      	beq.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093d0:	d01d      	beq.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009454 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d018      	beq.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009458 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d013      	beq.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a1c      	ldr	r2, [pc, #112]	@ (800945c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d00e      	beq.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a15      	ldr	r2, [pc, #84]	@ (800944c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d009      	beq.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a18      	ldr	r2, [pc, #96]	@ (8009460 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d004      	beq.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a11      	ldr	r2, [pc, #68]	@ (8009450 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d10c      	bne.n	8009428 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	4313      	orrs	r3, r2
 800941e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	40012c00 	.word	0x40012c00
 800944c:	40013400 	.word	0x40013400
 8009450:	40015000 	.word	0x40015000
 8009454:	40000400 	.word	0x40000400
 8009458:	40000800 	.word	0x40000800
 800945c:	40000c00 	.word	0x40000c00
 8009460:	40014000 	.word	0x40014000

08009464 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009478:	2b01      	cmp	r3, #1
 800947a:	d101      	bne.n	8009480 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800947c:	2302      	movs	r3, #2
 800947e:	e078      	b.n	8009572 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	4313      	orrs	r3, r2
 8009494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4313      	orrs	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	4313      	orrs	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e6:	4313      	orrs	r3, r2
 80094e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	041b      	lsls	r3, r3, #16
 80094f6:	4313      	orrs	r3, r2
 80094f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	69db      	ldr	r3, [r3, #28]
 8009504:	4313      	orrs	r3, r2
 8009506:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a1c      	ldr	r2, [pc, #112]	@ (8009580 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d009      	beq.n	8009526 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a1b      	ldr	r2, [pc, #108]	@ (8009584 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d004      	beq.n	8009526 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a19      	ldr	r2, [pc, #100]	@ (8009588 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d11c      	bne.n	8009560 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009530:	051b      	lsls	r3, r3, #20
 8009532:	4313      	orrs	r3, r2
 8009534:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	6a1b      	ldr	r3, [r3, #32]
 8009540:	4313      	orrs	r3, r2
 8009542:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954e:	4313      	orrs	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800955c:	4313      	orrs	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	40012c00 	.word	0x40012c00
 8009584:	40013400 	.word	0x40013400
 8009588:	40015000 	.word	0x40015000

0800958c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e050      	b.n	80096e0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009644:	2b00      	cmp	r3, #0
 8009646:	d114      	bne.n	8009672 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fdc5 	bl	800a1e0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800965c:	2b00      	cmp	r3, #0
 800965e:	d103      	bne.n	8009668 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a21      	ldr	r2, [pc, #132]	@ (80096e8 <HAL_UART_Init+0xbc>)
 8009664:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2224      	movs	r2, #36	@ 0x24
 8009676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f022 0201 	bic.w	r2, r2, #1
 8009688:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800968e:	2b00      	cmp	r3, #0
 8009690:	d002      	beq.n	8009698 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f001 f8f2 	bl	800a87c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fdf3 	bl	800a284 <UART_SetConfig>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d101      	bne.n	80096a8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e01b      	b.n	80096e0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80096b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	689a      	ldr	r2, [r3, #8]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80096c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f042 0201 	orr.w	r2, r2, #1
 80096d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f001 f971 	bl	800a9c0 <UART_CheckIdleState>
 80096de:	4603      	mov	r3, r0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	08003781 	.word	0x08003781

080096ec <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b087      	sub	sp, #28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	460b      	mov	r3, r1
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d109      	bne.n	8009718 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800970a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e09c      	b.n	8009852 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800971e:	2b20      	cmp	r3, #32
 8009720:	d16c      	bne.n	80097fc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009722:	7afb      	ldrb	r3, [r7, #11]
 8009724:	2b0c      	cmp	r3, #12
 8009726:	d85e      	bhi.n	80097e6 <HAL_UART_RegisterCallback+0xfa>
 8009728:	a201      	add	r2, pc, #4	@ (adr r2, 8009730 <HAL_UART_RegisterCallback+0x44>)
 800972a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972e:	bf00      	nop
 8009730:	08009765 	.word	0x08009765
 8009734:	0800976f 	.word	0x0800976f
 8009738:	08009779 	.word	0x08009779
 800973c:	08009783 	.word	0x08009783
 8009740:	0800978d 	.word	0x0800978d
 8009744:	08009797 	.word	0x08009797
 8009748:	080097a1 	.word	0x080097a1
 800974c:	080097ab 	.word	0x080097ab
 8009750:	080097b5 	.word	0x080097b5
 8009754:	080097bf 	.word	0x080097bf
 8009758:	080097c9 	.word	0x080097c9
 800975c:	080097d3 	.word	0x080097d3
 8009760:	080097dd 	.word	0x080097dd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800976c:	e070      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009776:	e06b      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009780:	e066      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800978a:	e061      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009794:	e05c      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800979e:	e057      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80097a8:	e052      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80097b2:	e04d      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80097bc:	e048      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80097c6:	e043      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80097d0:	e03e      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80097da:	e039      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80097e4:	e034      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	75fb      	strb	r3, [r7, #23]
        break;
 80097fa:	e029      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009802:	2b00      	cmp	r3, #0
 8009804:	d11a      	bne.n	800983c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009806:	7afb      	ldrb	r3, [r7, #11]
 8009808:	2b0b      	cmp	r3, #11
 800980a:	d002      	beq.n	8009812 <HAL_UART_RegisterCallback+0x126>
 800980c:	2b0c      	cmp	r3, #12
 800980e:	d005      	beq.n	800981c <HAL_UART_RegisterCallback+0x130>
 8009810:	e009      	b.n	8009826 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800981a:	e019      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009824:	e014      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800982c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	75fb      	strb	r3, [r7, #23]
        break;
 800983a:	e009      	b.n	8009850 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009842:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009850:	7dfb      	ldrb	r3, [r7, #23]
}
 8009852:	4618      	mov	r0, r3
 8009854:	371c      	adds	r7, #28
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop

08009860 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b08a      	sub	sp, #40	@ 0x28
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	4613      	mov	r3, r2
 800986c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009874:	2b20      	cmp	r3, #32
 8009876:	d167      	bne.n	8009948 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d002      	beq.n	8009884 <HAL_UART_Transmit_DMA+0x24>
 800987e:	88fb      	ldrh	r3, [r7, #6]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d101      	bne.n	8009888 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e060      	b.n	800994a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	88fa      	ldrh	r2, [r7, #6]
 8009892:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	88fa      	ldrh	r2, [r7, #6]
 800989a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2221      	movs	r2, #33	@ 0x21
 80098aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d028      	beq.n	8009908 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098ba:	4a26      	ldr	r2, [pc, #152]	@ (8009954 <HAL_UART_Transmit_DMA+0xf4>)
 80098bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098c2:	4a25      	ldr	r2, [pc, #148]	@ (8009958 <HAL_UART_Transmit_DMA+0xf8>)
 80098c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098ca:	4a24      	ldr	r2, [pc, #144]	@ (800995c <HAL_UART_Transmit_DMA+0xfc>)
 80098cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098d2:	2200      	movs	r2, #0
 80098d4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098de:	4619      	mov	r1, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	3328      	adds	r3, #40	@ 0x28
 80098e6:	461a      	mov	r2, r3
 80098e8:	88fb      	ldrh	r3, [r7, #6]
 80098ea:	f7fc f929 	bl	8005b40 <HAL_DMA_Start_IT>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d009      	beq.n	8009908 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2210      	movs	r2, #16
 80098f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2220      	movs	r2, #32
 8009900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e020      	b.n	800994a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2240      	movs	r2, #64	@ 0x40
 800990e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3308      	adds	r3, #8
 8009916:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	e853 3f00 	ldrex	r3, [r3]
 800991e:	613b      	str	r3, [r7, #16]
   return(result);
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009926:	627b      	str	r3, [r7, #36]	@ 0x24
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	3308      	adds	r3, #8
 800992e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009930:	623a      	str	r2, [r7, #32]
 8009932:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009934:	69f9      	ldr	r1, [r7, #28]
 8009936:	6a3a      	ldr	r2, [r7, #32]
 8009938:	e841 2300 	strex	r3, r2, [r1]
 800993c:	61bb      	str	r3, [r7, #24]
   return(result);
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1e5      	bne.n	8009910 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	e000      	b.n	800994a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009948:	2302      	movs	r3, #2
  }
}
 800994a:	4618      	mov	r0, r3
 800994c:	3728      	adds	r7, #40	@ 0x28
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	0800ae8b 	.word	0x0800ae8b
 8009958:	0800af29 	.word	0x0800af29
 800995c:	0800b0c3 	.word	0x0800b0c3

08009960 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b08a      	sub	sp, #40	@ 0x28
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	4613      	mov	r3, r2
 800996c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009974:	2b20      	cmp	r3, #32
 8009976:	d137      	bne.n	80099e8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <HAL_UART_Receive_DMA+0x24>
 800997e:	88fb      	ldrh	r3, [r7, #6]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e030      	b.n	80099ea <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a18      	ldr	r2, [pc, #96]	@ (80099f4 <HAL_UART_Receive_DMA+0x94>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d01f      	beq.n	80099d8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d018      	beq.n	80099d8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	e853 3f00 	ldrex	r3, [r3]
 80099b2:	613b      	str	r3, [r7, #16]
   return(result);
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80099ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	461a      	mov	r2, r3
 80099c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c4:	623b      	str	r3, [r7, #32]
 80099c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c8:	69f9      	ldr	r1, [r7, #28]
 80099ca:	6a3a      	ldr	r2, [r7, #32]
 80099cc:	e841 2300 	strex	r3, r2, [r1]
 80099d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1e6      	bne.n	80099a6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80099d8:	88fb      	ldrh	r3, [r7, #6]
 80099da:	461a      	mov	r2, r3
 80099dc:	68b9      	ldr	r1, [r7, #8]
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f001 f906 	bl	800abf0 <UART_Start_Receive_DMA>
 80099e4:	4603      	mov	r3, r0
 80099e6:	e000      	b.n	80099ea <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80099e8:	2302      	movs	r3, #2
  }
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3728      	adds	r7, #40	@ 0x28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	40008000 	.word	0x40008000

080099f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b0ba      	sub	sp, #232	@ 0xe8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009a22:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009a26:	4013      	ands	r3, r2
 8009a28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009a2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d11b      	bne.n	8009a6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a38:	f003 0320 	and.w	r3, r3, #32
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d015      	beq.n	8009a6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a44:	f003 0320 	and.w	r3, r3, #32
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d105      	bne.n	8009a58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d009      	beq.n	8009a6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f000 82f3 	beq.w	800a048 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	4798      	blx	r3
      }
      return;
 8009a6a:	e2ed      	b.n	800a048 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 8129 	beq.w	8009cc8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009a76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009a7a:	4b90      	ldr	r3, [pc, #576]	@ (8009cbc <HAL_UART_IRQHandler+0x2c4>)
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d106      	bne.n	8009a90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009a82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009a86:	4b8e      	ldr	r3, [pc, #568]	@ (8009cc0 <HAL_UART_IRQHandler+0x2c8>)
 8009a88:	4013      	ands	r3, r2
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 811c 	beq.w	8009cc8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d011      	beq.n	8009ac0 <HAL_UART_IRQHandler+0xc8>
 8009a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00b      	beq.n	8009ac0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2201      	movs	r2, #1
 8009aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ab6:	f043 0201 	orr.w	r2, r3, #1
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ac4:	f003 0302 	and.w	r3, r3, #2
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d011      	beq.n	8009af0 <HAL_UART_IRQHandler+0xf8>
 8009acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00b      	beq.n	8009af0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2202      	movs	r2, #2
 8009ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ae6:	f043 0204 	orr.w	r2, r3, #4
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009af4:	f003 0304 	and.w	r3, r3, #4
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d011      	beq.n	8009b20 <HAL_UART_IRQHandler+0x128>
 8009afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00b      	beq.n	8009b20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2204      	movs	r2, #4
 8009b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b16:	f043 0202 	orr.w	r2, r3, #2
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b24:	f003 0308 	and.w	r3, r3, #8
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d017      	beq.n	8009b5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b30:	f003 0320 	and.w	r3, r3, #32
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d105      	bne.n	8009b44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b3c:	4b5f      	ldr	r3, [pc, #380]	@ (8009cbc <HAL_UART_IRQHandler+0x2c4>)
 8009b3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00b      	beq.n	8009b5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2208      	movs	r2, #8
 8009b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b52:	f043 0208 	orr.w	r2, r3, #8
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d012      	beq.n	8009b8e <HAL_UART_IRQHandler+0x196>
 8009b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00c      	beq.n	8009b8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b84:	f043 0220 	orr.w	r2, r3, #32
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 8259 	beq.w	800a04c <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b9e:	f003 0320 	and.w	r3, r3, #32
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d013      	beq.n	8009bce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009baa:	f003 0320 	and.w	r3, r3, #32
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d105      	bne.n	8009bbe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d007      	beq.n	8009bce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009be2:	2b40      	cmp	r3, #64	@ 0x40
 8009be4:	d005      	beq.n	8009bf2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009bea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d058      	beq.n	8009ca4 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f001 f8e3 	bl	800adbe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c02:	2b40      	cmp	r3, #64	@ 0x40
 8009c04:	d148      	bne.n	8009c98 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3308      	adds	r3, #8
 8009c0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3308      	adds	r3, #8
 8009c2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009c32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009c3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009c42:	e841 2300 	strex	r3, r2, [r1]
 8009c46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009c4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1d9      	bne.n	8009c06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d017      	beq.n	8009c8c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c62:	4a18      	ldr	r2, [pc, #96]	@ (8009cc4 <HAL_UART_IRQHandler+0x2cc>)
 8009c64:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fc f83b 	bl	8005ce8 <HAL_DMA_Abort_IT>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d01f      	beq.n	8009cb8 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009c86:	4610      	mov	r0, r2
 8009c88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c8a:	e015      	b.n	8009cb8 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c96:	e00f      	b.n	8009cb8 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca2:	e009      	b.n	8009cb8 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009cb6:	e1c9      	b.n	800a04c <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cb8:	bf00      	nop
    return;
 8009cba:	e1c7      	b.n	800a04c <HAL_UART_IRQHandler+0x654>
 8009cbc:	10000001 	.word	0x10000001
 8009cc0:	04000120 	.word	0x04000120
 8009cc4:	0800b147 	.word	0x0800b147

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	f040 8157 	bne.w	8009f80 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cd6:	f003 0310 	and.w	r3, r3, #16
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 8150 	beq.w	8009f80 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ce4:	f003 0310 	and.w	r3, r3, #16
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 8149 	beq.w	8009f80 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2210      	movs	r2, #16
 8009cf4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d00:	2b40      	cmp	r3, #64	@ 0x40
 8009d02:	f040 80bd 	bne.w	8009e80 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 8199 	beq.w	800a050 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	f080 8191 	bcs.w	800a050 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 0320 	and.w	r3, r3, #32
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f040 8087 	bne.w	8009e5a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d58:	e853 3f00 	ldrex	r3, [r3]
 8009d5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	461a      	mov	r2, r3
 8009d72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009d82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009d86:	e841 2300 	strex	r3, r2, [r1]
 8009d8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1da      	bne.n	8009d4c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3308      	adds	r3, #8
 8009d9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009da0:	e853 3f00 	ldrex	r3, [r3]
 8009da4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009da6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009da8:	f023 0301 	bic.w	r3, r3, #1
 8009dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3308      	adds	r3, #8
 8009db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009dba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009dbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009dc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009dc6:	e841 2300 	strex	r3, r2, [r1]
 8009dca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1e1      	bne.n	8009d96 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	3308      	adds	r3, #8
 8009dd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ddc:	e853 3f00 	ldrex	r3, [r3]
 8009de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009de2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009de8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3308      	adds	r3, #8
 8009df2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009df6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009df8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009dfc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009dfe:	e841 2300 	strex	r3, r2, [r1]
 8009e02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1e3      	bne.n	8009dd2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2220      	movs	r2, #32
 8009e0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e20:	e853 3f00 	ldrex	r3, [r3]
 8009e24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e28:	f023 0310 	bic.w	r3, r3, #16
 8009e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	461a      	mov	r2, r3
 8009e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e42:	e841 2300 	strex	r3, r2, [r1]
 8009e46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1e4      	bne.n	8009e18 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7fb feee 	bl	8005c36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2202      	movs	r2, #2
 8009e5e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009e72:	b292      	uxth	r2, r2
 8009e74:	1a8a      	subs	r2, r1, r2
 8009e76:	b292      	uxth	r2, r2
 8009e78:	4611      	mov	r1, r2
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e7e:	e0e7      	b.n	800a050 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 80d9 	beq.w	800a054 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8009ea2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 80d4 	beq.w	800a054 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb4:	e853 3f00 	ldrex	r3, [r3]
 8009eb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ebc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ece:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ed0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ed4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ed6:	e841 2300 	strex	r3, r2, [r1]
 8009eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1e4      	bne.n	8009eac <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eec:	e853 3f00 	ldrex	r3, [r3]
 8009ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ef8:	f023 0301 	bic.w	r3, r3, #1
 8009efc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3308      	adds	r3, #8
 8009f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009f0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f12:	e841 2300 	strex	r3, r2, [r1]
 8009f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1e1      	bne.n	8009ee2 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2220      	movs	r2, #32
 8009f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	e853 3f00 	ldrex	r3, [r3]
 8009f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f023 0310 	bic.w	r3, r3, #16
 8009f46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009f54:	61fb      	str	r3, [r7, #28]
 8009f56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f58:	69b9      	ldr	r1, [r7, #24]
 8009f5a:	69fa      	ldr	r2, [r7, #28]
 8009f5c:	e841 2300 	strex	r3, r2, [r1]
 8009f60:	617b      	str	r3, [r7, #20]
   return(result);
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1e4      	bne.n	8009f32 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009f74:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009f78:	4611      	mov	r1, r2
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f7e:	e069      	b.n	800a054 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d010      	beq.n	8009fae <HAL_UART_IRQHandler+0x5b6>
 8009f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00a      	beq.n	8009fae <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009fa0:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fac:	e055      	b.n	800a05a <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d014      	beq.n	8009fe4 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d105      	bne.n	8009fd2 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d008      	beq.n	8009fe4 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d03e      	beq.n	800a058 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	4798      	blx	r3
    }
    return;
 8009fe2:	e039      	b.n	800a058 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d009      	beq.n	800a004 <HAL_UART_IRQHandler+0x60c>
 8009ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d003      	beq.n	800a004 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f001 f8ba 	bl	800b176 <UART_EndTransmit_IT>
    return;
 800a002:	e02a      	b.n	800a05a <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a008:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00b      	beq.n	800a028 <HAL_UART_IRQHandler+0x630>
 800a010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a014:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d005      	beq.n	800a028 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a026:	e018      	b.n	800a05a <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a02c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d012      	beq.n	800a05a <HAL_UART_IRQHandler+0x662>
 800a034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	da0e      	bge.n	800a05a <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a046:	e008      	b.n	800a05a <HAL_UART_IRQHandler+0x662>
      return;
 800a048:	bf00      	nop
 800a04a:	e006      	b.n	800a05a <HAL_UART_IRQHandler+0x662>
    return;
 800a04c:	bf00      	nop
 800a04e:	e004      	b.n	800a05a <HAL_UART_IRQHandler+0x662>
      return;
 800a050:	bf00      	nop
 800a052:	e002      	b.n	800a05a <HAL_UART_IRQHandler+0x662>
      return;
 800a054:	bf00      	nop
 800a056:	e000      	b.n	800a05a <HAL_UART_IRQHandler+0x662>
    return;
 800a058:	bf00      	nop
  }
}
 800a05a:	37e8      	adds	r7, #232	@ 0xe8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a0a4:	bf00      	nop
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a0b8:	bf00      	nop
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	460b      	mov	r3, r1
 800a10a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a09      	ldr	r2, [pc, #36]	@ (800a14c <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d009      	beq.n	800a140 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	695b      	ldr	r3, [r3, #20]
 800a132:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	430a      	orrs	r2, r1
 800a13e:	615a      	str	r2, [r3, #20]
  }
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr
 800a14c:	40008000 	.word	0x40008000

0800a150 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a18      	ldr	r2, [pc, #96]	@ (800a1c0 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d027      	beq.n	800a1b2 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a168:	2b20      	cmp	r3, #32
 800a16a:	d120      	bne.n	800a1ae <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a172:	2b01      	cmp	r3, #1
 800a174:	d101      	bne.n	800a17a <HAL_UART_EnableReceiverTimeout+0x2a>
 800a176:	2302      	movs	r3, #2
 800a178:	e01c      	b.n	800a1b4 <HAL_UART_EnableReceiverTimeout+0x64>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2224      	movs	r2, #36	@ 0x24
 800a186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	685a      	ldr	r2, [r3, #4]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a198:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2220      	movs	r2, #32
 800a19e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	e002      	b.n	800a1b4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a1ae:	2302      	movs	r3, #2
 800a1b0:	e000      	b.n	800a1b4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
  }
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	40008000 	.word	0x40008000

0800a1c4 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	370c      	adds	r7, #12
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
	...

0800a1e0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a1a      	ldr	r2, [pc, #104]	@ (800a254 <UART_InitCallbacksToDefault+0x74>)
 800a1ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a19      	ldr	r2, [pc, #100]	@ (800a258 <UART_InitCallbacksToDefault+0x78>)
 800a1f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a18      	ldr	r2, [pc, #96]	@ (800a25c <UART_InitCallbacksToDefault+0x7c>)
 800a1fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a17      	ldr	r2, [pc, #92]	@ (800a260 <UART_InitCallbacksToDefault+0x80>)
 800a204:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a16      	ldr	r2, [pc, #88]	@ (800a264 <UART_InitCallbacksToDefault+0x84>)
 800a20c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a15      	ldr	r2, [pc, #84]	@ (800a268 <UART_InitCallbacksToDefault+0x88>)
 800a214:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a14      	ldr	r2, [pc, #80]	@ (800a26c <UART_InitCallbacksToDefault+0x8c>)
 800a21c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a13      	ldr	r2, [pc, #76]	@ (800a270 <UART_InitCallbacksToDefault+0x90>)
 800a224:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a12      	ldr	r2, [pc, #72]	@ (800a274 <UART_InitCallbacksToDefault+0x94>)
 800a22c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a11      	ldr	r2, [pc, #68]	@ (800a278 <UART_InitCallbacksToDefault+0x98>)
 800a234:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a10      	ldr	r2, [pc, #64]	@ (800a27c <UART_InitCallbacksToDefault+0x9c>)
 800a23c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	4a0f      	ldr	r2, [pc, #60]	@ (800a280 <UART_InitCallbacksToDefault+0xa0>)
 800a244:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr
 800a254:	0800a075 	.word	0x0800a075
 800a258:	0800a061 	.word	0x0800a061
 800a25c:	0800a09d 	.word	0x0800a09d
 800a260:	0800a089 	.word	0x0800a089
 800a264:	0800a0b1 	.word	0x0800a0b1
 800a268:	0800a0c5 	.word	0x0800a0c5
 800a26c:	0800a0d9 	.word	0x0800a0d9
 800a270:	0800a0ed 	.word	0x0800a0ed
 800a274:	0800b1d1 	.word	0x0800b1d1
 800a278:	0800b1e5 	.word	0x0800b1e5
 800a27c:	0800b1f9 	.word	0x0800b1f9
 800a280:	0800a101 	.word	0x0800a101

0800a284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a288:	b08c      	sub	sp, #48	@ 0x30
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	689a      	ldr	r2, [r3, #8]
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	431a      	orrs	r2, r3
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	431a      	orrs	r2, r3
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	69db      	ldr	r3, [r3, #28]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	4baa      	ldr	r3, [pc, #680]	@ (800a55c <UART_SetConfig+0x2d8>)
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	6812      	ldr	r2, [r2, #0]
 800a2ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2bc:	430b      	orrs	r3, r1
 800a2be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	68da      	ldr	r2, [r3, #12]
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	430a      	orrs	r2, r1
 800a2d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	699b      	ldr	r3, [r3, #24]
 800a2da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a9f      	ldr	r2, [pc, #636]	@ (800a560 <UART_SetConfig+0x2dc>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d004      	beq.n	800a2f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a2fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	6812      	ldr	r2, [r2, #0]
 800a302:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a304:	430b      	orrs	r3, r1
 800a306:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a30e:	f023 010f 	bic.w	r1, r3, #15
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	430a      	orrs	r2, r1
 800a31c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a90      	ldr	r2, [pc, #576]	@ (800a564 <UART_SetConfig+0x2e0>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d125      	bne.n	800a374 <UART_SetConfig+0xf0>
 800a328:	4b8f      	ldr	r3, [pc, #572]	@ (800a568 <UART_SetConfig+0x2e4>)
 800a32a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a32e:	f003 0303 	and.w	r3, r3, #3
 800a332:	2b03      	cmp	r3, #3
 800a334:	d81a      	bhi.n	800a36c <UART_SetConfig+0xe8>
 800a336:	a201      	add	r2, pc, #4	@ (adr r2, 800a33c <UART_SetConfig+0xb8>)
 800a338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33c:	0800a34d 	.word	0x0800a34d
 800a340:	0800a35d 	.word	0x0800a35d
 800a344:	0800a355 	.word	0x0800a355
 800a348:	0800a365 	.word	0x0800a365
 800a34c:	2301      	movs	r3, #1
 800a34e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a352:	e116      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a354:	2302      	movs	r3, #2
 800a356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a35a:	e112      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a35c:	2304      	movs	r3, #4
 800a35e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a362:	e10e      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a364:	2308      	movs	r3, #8
 800a366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a36a:	e10a      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a36c:	2310      	movs	r3, #16
 800a36e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a372:	e106      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a7c      	ldr	r2, [pc, #496]	@ (800a56c <UART_SetConfig+0x2e8>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d138      	bne.n	800a3f0 <UART_SetConfig+0x16c>
 800a37e:	4b7a      	ldr	r3, [pc, #488]	@ (800a568 <UART_SetConfig+0x2e4>)
 800a380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a384:	f003 030c 	and.w	r3, r3, #12
 800a388:	2b0c      	cmp	r3, #12
 800a38a:	d82d      	bhi.n	800a3e8 <UART_SetConfig+0x164>
 800a38c:	a201      	add	r2, pc, #4	@ (adr r2, 800a394 <UART_SetConfig+0x110>)
 800a38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a392:	bf00      	nop
 800a394:	0800a3c9 	.word	0x0800a3c9
 800a398:	0800a3e9 	.word	0x0800a3e9
 800a39c:	0800a3e9 	.word	0x0800a3e9
 800a3a0:	0800a3e9 	.word	0x0800a3e9
 800a3a4:	0800a3d9 	.word	0x0800a3d9
 800a3a8:	0800a3e9 	.word	0x0800a3e9
 800a3ac:	0800a3e9 	.word	0x0800a3e9
 800a3b0:	0800a3e9 	.word	0x0800a3e9
 800a3b4:	0800a3d1 	.word	0x0800a3d1
 800a3b8:	0800a3e9 	.word	0x0800a3e9
 800a3bc:	0800a3e9 	.word	0x0800a3e9
 800a3c0:	0800a3e9 	.word	0x0800a3e9
 800a3c4:	0800a3e1 	.word	0x0800a3e1
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3ce:	e0d8      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3d6:	e0d4      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a3d8:	2304      	movs	r3, #4
 800a3da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3de:	e0d0      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a3e0:	2308      	movs	r3, #8
 800a3e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3e6:	e0cc      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a3e8:	2310      	movs	r3, #16
 800a3ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3ee:	e0c8      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a5e      	ldr	r2, [pc, #376]	@ (800a570 <UART_SetConfig+0x2ec>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d125      	bne.n	800a446 <UART_SetConfig+0x1c2>
 800a3fa:	4b5b      	ldr	r3, [pc, #364]	@ (800a568 <UART_SetConfig+0x2e4>)
 800a3fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a400:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a404:	2b30      	cmp	r3, #48	@ 0x30
 800a406:	d016      	beq.n	800a436 <UART_SetConfig+0x1b2>
 800a408:	2b30      	cmp	r3, #48	@ 0x30
 800a40a:	d818      	bhi.n	800a43e <UART_SetConfig+0x1ba>
 800a40c:	2b20      	cmp	r3, #32
 800a40e:	d00a      	beq.n	800a426 <UART_SetConfig+0x1a2>
 800a410:	2b20      	cmp	r3, #32
 800a412:	d814      	bhi.n	800a43e <UART_SetConfig+0x1ba>
 800a414:	2b00      	cmp	r3, #0
 800a416:	d002      	beq.n	800a41e <UART_SetConfig+0x19a>
 800a418:	2b10      	cmp	r3, #16
 800a41a:	d008      	beq.n	800a42e <UART_SetConfig+0x1aa>
 800a41c:	e00f      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a41e:	2300      	movs	r3, #0
 800a420:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a424:	e0ad      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a426:	2302      	movs	r3, #2
 800a428:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a42c:	e0a9      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a42e:	2304      	movs	r3, #4
 800a430:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a434:	e0a5      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a436:	2308      	movs	r3, #8
 800a438:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a43c:	e0a1      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a43e:	2310      	movs	r3, #16
 800a440:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a444:	e09d      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a4a      	ldr	r2, [pc, #296]	@ (800a574 <UART_SetConfig+0x2f0>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d125      	bne.n	800a49c <UART_SetConfig+0x218>
 800a450:	4b45      	ldr	r3, [pc, #276]	@ (800a568 <UART_SetConfig+0x2e4>)
 800a452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a456:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a45a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a45c:	d016      	beq.n	800a48c <UART_SetConfig+0x208>
 800a45e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a460:	d818      	bhi.n	800a494 <UART_SetConfig+0x210>
 800a462:	2b80      	cmp	r3, #128	@ 0x80
 800a464:	d00a      	beq.n	800a47c <UART_SetConfig+0x1f8>
 800a466:	2b80      	cmp	r3, #128	@ 0x80
 800a468:	d814      	bhi.n	800a494 <UART_SetConfig+0x210>
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d002      	beq.n	800a474 <UART_SetConfig+0x1f0>
 800a46e:	2b40      	cmp	r3, #64	@ 0x40
 800a470:	d008      	beq.n	800a484 <UART_SetConfig+0x200>
 800a472:	e00f      	b.n	800a494 <UART_SetConfig+0x210>
 800a474:	2300      	movs	r3, #0
 800a476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a47a:	e082      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a47c:	2302      	movs	r3, #2
 800a47e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a482:	e07e      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a484:	2304      	movs	r3, #4
 800a486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a48a:	e07a      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a48c:	2308      	movs	r3, #8
 800a48e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a492:	e076      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a494:	2310      	movs	r3, #16
 800a496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a49a:	e072      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a35      	ldr	r2, [pc, #212]	@ (800a578 <UART_SetConfig+0x2f4>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d12a      	bne.n	800a4fc <UART_SetConfig+0x278>
 800a4a6:	4b30      	ldr	r3, [pc, #192]	@ (800a568 <UART_SetConfig+0x2e4>)
 800a4a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4b4:	d01a      	beq.n	800a4ec <UART_SetConfig+0x268>
 800a4b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4ba:	d81b      	bhi.n	800a4f4 <UART_SetConfig+0x270>
 800a4bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4c0:	d00c      	beq.n	800a4dc <UART_SetConfig+0x258>
 800a4c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4c6:	d815      	bhi.n	800a4f4 <UART_SetConfig+0x270>
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d003      	beq.n	800a4d4 <UART_SetConfig+0x250>
 800a4cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4d0:	d008      	beq.n	800a4e4 <UART_SetConfig+0x260>
 800a4d2:	e00f      	b.n	800a4f4 <UART_SetConfig+0x270>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4da:	e052      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a4dc:	2302      	movs	r3, #2
 800a4de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4e2:	e04e      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a4e4:	2304      	movs	r3, #4
 800a4e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4ea:	e04a      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a4ec:	2308      	movs	r3, #8
 800a4ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4f2:	e046      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a4f4:	2310      	movs	r3, #16
 800a4f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4fa:	e042      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a17      	ldr	r2, [pc, #92]	@ (800a560 <UART_SetConfig+0x2dc>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d13a      	bne.n	800a57c <UART_SetConfig+0x2f8>
 800a506:	4b18      	ldr	r3, [pc, #96]	@ (800a568 <UART_SetConfig+0x2e4>)
 800a508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a50c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a510:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a514:	d01a      	beq.n	800a54c <UART_SetConfig+0x2c8>
 800a516:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a51a:	d81b      	bhi.n	800a554 <UART_SetConfig+0x2d0>
 800a51c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a520:	d00c      	beq.n	800a53c <UART_SetConfig+0x2b8>
 800a522:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a526:	d815      	bhi.n	800a554 <UART_SetConfig+0x2d0>
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d003      	beq.n	800a534 <UART_SetConfig+0x2b0>
 800a52c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a530:	d008      	beq.n	800a544 <UART_SetConfig+0x2c0>
 800a532:	e00f      	b.n	800a554 <UART_SetConfig+0x2d0>
 800a534:	2300      	movs	r3, #0
 800a536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a53a:	e022      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a53c:	2302      	movs	r3, #2
 800a53e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a542:	e01e      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a544:	2304      	movs	r3, #4
 800a546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a54a:	e01a      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a54c:	2308      	movs	r3, #8
 800a54e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a552:	e016      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a554:	2310      	movs	r3, #16
 800a556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a55a:	e012      	b.n	800a582 <UART_SetConfig+0x2fe>
 800a55c:	cfff69f3 	.word	0xcfff69f3
 800a560:	40008000 	.word	0x40008000
 800a564:	40013800 	.word	0x40013800
 800a568:	40021000 	.word	0x40021000
 800a56c:	40004400 	.word	0x40004400
 800a570:	40004800 	.word	0x40004800
 800a574:	40004c00 	.word	0x40004c00
 800a578:	40005000 	.word	0x40005000
 800a57c:	2310      	movs	r3, #16
 800a57e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4aae      	ldr	r2, [pc, #696]	@ (800a840 <UART_SetConfig+0x5bc>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	f040 8097 	bne.w	800a6bc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a58e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a592:	2b08      	cmp	r3, #8
 800a594:	d823      	bhi.n	800a5de <UART_SetConfig+0x35a>
 800a596:	a201      	add	r2, pc, #4	@ (adr r2, 800a59c <UART_SetConfig+0x318>)
 800a598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59c:	0800a5c1 	.word	0x0800a5c1
 800a5a0:	0800a5df 	.word	0x0800a5df
 800a5a4:	0800a5c9 	.word	0x0800a5c9
 800a5a8:	0800a5df 	.word	0x0800a5df
 800a5ac:	0800a5cf 	.word	0x0800a5cf
 800a5b0:	0800a5df 	.word	0x0800a5df
 800a5b4:	0800a5df 	.word	0x0800a5df
 800a5b8:	0800a5df 	.word	0x0800a5df
 800a5bc:	0800a5d7 	.word	0x0800a5d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5c0:	f7fc fc82 	bl	8006ec8 <HAL_RCC_GetPCLK1Freq>
 800a5c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5c6:	e010      	b.n	800a5ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5c8:	4b9e      	ldr	r3, [pc, #632]	@ (800a844 <UART_SetConfig+0x5c0>)
 800a5ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a5cc:	e00d      	b.n	800a5ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5ce:	f7fc fc0d 	bl	8006dec <HAL_RCC_GetSysClockFreq>
 800a5d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5d4:	e009      	b.n	800a5ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a5dc:	e005      	b.n	800a5ea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a5e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 8130 	beq.w	800a852 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f6:	4a94      	ldr	r2, [pc, #592]	@ (800a848 <UART_SetConfig+0x5c4>)
 800a5f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a600:	fbb3 f3f2 	udiv	r3, r3, r2
 800a604:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	4613      	mov	r3, r2
 800a60c:	005b      	lsls	r3, r3, #1
 800a60e:	4413      	add	r3, r2
 800a610:	69ba      	ldr	r2, [r7, #24]
 800a612:	429a      	cmp	r2, r3
 800a614:	d305      	bcc.n	800a622 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a61c:	69ba      	ldr	r2, [r7, #24]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d903      	bls.n	800a62a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a628:	e113      	b.n	800a852 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62c:	2200      	movs	r2, #0
 800a62e:	60bb      	str	r3, [r7, #8]
 800a630:	60fa      	str	r2, [r7, #12]
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a636:	4a84      	ldr	r2, [pc, #528]	@ (800a848 <UART_SetConfig+0x5c4>)
 800a638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	2200      	movs	r2, #0
 800a640:	603b      	str	r3, [r7, #0]
 800a642:	607a      	str	r2, [r7, #4]
 800a644:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a648:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a64c:	f7f6 fad2 	bl	8000bf4 <__aeabi_uldivmod>
 800a650:	4602      	mov	r2, r0
 800a652:	460b      	mov	r3, r1
 800a654:	4610      	mov	r0, r2
 800a656:	4619      	mov	r1, r3
 800a658:	f04f 0200 	mov.w	r2, #0
 800a65c:	f04f 0300 	mov.w	r3, #0
 800a660:	020b      	lsls	r3, r1, #8
 800a662:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a666:	0202      	lsls	r2, r0, #8
 800a668:	6979      	ldr	r1, [r7, #20]
 800a66a:	6849      	ldr	r1, [r1, #4]
 800a66c:	0849      	lsrs	r1, r1, #1
 800a66e:	2000      	movs	r0, #0
 800a670:	460c      	mov	r4, r1
 800a672:	4605      	mov	r5, r0
 800a674:	eb12 0804 	adds.w	r8, r2, r4
 800a678:	eb43 0905 	adc.w	r9, r3, r5
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	469a      	mov	sl, r3
 800a684:	4693      	mov	fp, r2
 800a686:	4652      	mov	r2, sl
 800a688:	465b      	mov	r3, fp
 800a68a:	4640      	mov	r0, r8
 800a68c:	4649      	mov	r1, r9
 800a68e:	f7f6 fab1 	bl	8000bf4 <__aeabi_uldivmod>
 800a692:	4602      	mov	r2, r0
 800a694:	460b      	mov	r3, r1
 800a696:	4613      	mov	r3, r2
 800a698:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a6a0:	d308      	bcc.n	800a6b4 <UART_SetConfig+0x430>
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6a8:	d204      	bcs.n	800a6b4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	6a3a      	ldr	r2, [r7, #32]
 800a6b0:	60da      	str	r2, [r3, #12]
 800a6b2:	e0ce      	b.n	800a852 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a6ba:	e0ca      	b.n	800a852 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	69db      	ldr	r3, [r3, #28]
 800a6c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6c4:	d166      	bne.n	800a794 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a6c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a6ca:	2b08      	cmp	r3, #8
 800a6cc:	d827      	bhi.n	800a71e <UART_SetConfig+0x49a>
 800a6ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a6d4 <UART_SetConfig+0x450>)
 800a6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d4:	0800a6f9 	.word	0x0800a6f9
 800a6d8:	0800a701 	.word	0x0800a701
 800a6dc:	0800a709 	.word	0x0800a709
 800a6e0:	0800a71f 	.word	0x0800a71f
 800a6e4:	0800a70f 	.word	0x0800a70f
 800a6e8:	0800a71f 	.word	0x0800a71f
 800a6ec:	0800a71f 	.word	0x0800a71f
 800a6f0:	0800a71f 	.word	0x0800a71f
 800a6f4:	0800a717 	.word	0x0800a717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6f8:	f7fc fbe6 	bl	8006ec8 <HAL_RCC_GetPCLK1Freq>
 800a6fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a6fe:	e014      	b.n	800a72a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a700:	f7fc fbf8 	bl	8006ef4 <HAL_RCC_GetPCLK2Freq>
 800a704:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a706:	e010      	b.n	800a72a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a708:	4b4e      	ldr	r3, [pc, #312]	@ (800a844 <UART_SetConfig+0x5c0>)
 800a70a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a70c:	e00d      	b.n	800a72a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a70e:	f7fc fb6d 	bl	8006dec <HAL_RCC_GetSysClockFreq>
 800a712:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a714:	e009      	b.n	800a72a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a71a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a71c:	e005      	b.n	800a72a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a71e:	2300      	movs	r3, #0
 800a720:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a728:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f000 8090 	beq.w	800a852 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a736:	4a44      	ldr	r2, [pc, #272]	@ (800a848 <UART_SetConfig+0x5c4>)
 800a738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a73c:	461a      	mov	r2, r3
 800a73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a740:	fbb3 f3f2 	udiv	r3, r3, r2
 800a744:	005a      	lsls	r2, r3, #1
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	085b      	lsrs	r3, r3, #1
 800a74c:	441a      	add	r2, r3
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	fbb2 f3f3 	udiv	r3, r2, r3
 800a756:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a758:	6a3b      	ldr	r3, [r7, #32]
 800a75a:	2b0f      	cmp	r3, #15
 800a75c:	d916      	bls.n	800a78c <UART_SetConfig+0x508>
 800a75e:	6a3b      	ldr	r3, [r7, #32]
 800a760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a764:	d212      	bcs.n	800a78c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	b29b      	uxth	r3, r3
 800a76a:	f023 030f 	bic.w	r3, r3, #15
 800a76e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	085b      	lsrs	r3, r3, #1
 800a774:	b29b      	uxth	r3, r3
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	8bfb      	ldrh	r3, [r7, #30]
 800a77e:	4313      	orrs	r3, r2
 800a780:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	8bfa      	ldrh	r2, [r7, #30]
 800a788:	60da      	str	r2, [r3, #12]
 800a78a:	e062      	b.n	800a852 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a792:	e05e      	b.n	800a852 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a794:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a798:	2b08      	cmp	r3, #8
 800a79a:	d828      	bhi.n	800a7ee <UART_SetConfig+0x56a>
 800a79c:	a201      	add	r2, pc, #4	@ (adr r2, 800a7a4 <UART_SetConfig+0x520>)
 800a79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a2:	bf00      	nop
 800a7a4:	0800a7c9 	.word	0x0800a7c9
 800a7a8:	0800a7d1 	.word	0x0800a7d1
 800a7ac:	0800a7d9 	.word	0x0800a7d9
 800a7b0:	0800a7ef 	.word	0x0800a7ef
 800a7b4:	0800a7df 	.word	0x0800a7df
 800a7b8:	0800a7ef 	.word	0x0800a7ef
 800a7bc:	0800a7ef 	.word	0x0800a7ef
 800a7c0:	0800a7ef 	.word	0x0800a7ef
 800a7c4:	0800a7e7 	.word	0x0800a7e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7c8:	f7fc fb7e 	bl	8006ec8 <HAL_RCC_GetPCLK1Freq>
 800a7cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7ce:	e014      	b.n	800a7fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7d0:	f7fc fb90 	bl	8006ef4 <HAL_RCC_GetPCLK2Freq>
 800a7d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7d6:	e010      	b.n	800a7fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a844 <UART_SetConfig+0x5c0>)
 800a7da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a7dc:	e00d      	b.n	800a7fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7de:	f7fc fb05 	bl	8006dec <HAL_RCC_GetSysClockFreq>
 800a7e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7e4:	e009      	b.n	800a7fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a7ec:	e005      	b.n	800a7fa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a7f8:	bf00      	nop
    }

    if (pclk != 0U)
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d028      	beq.n	800a852 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a804:	4a10      	ldr	r2, [pc, #64]	@ (800a848 <UART_SetConfig+0x5c4>)
 800a806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a80a:	461a      	mov	r2, r3
 800a80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	085b      	lsrs	r3, r3, #1
 800a818:	441a      	add	r2, r3
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a822:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a824:	6a3b      	ldr	r3, [r7, #32]
 800a826:	2b0f      	cmp	r3, #15
 800a828:	d910      	bls.n	800a84c <UART_SetConfig+0x5c8>
 800a82a:	6a3b      	ldr	r3, [r7, #32]
 800a82c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a830:	d20c      	bcs.n	800a84c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	b29a      	uxth	r2, r3
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	60da      	str	r2, [r3, #12]
 800a83c:	e009      	b.n	800a852 <UART_SetConfig+0x5ce>
 800a83e:	bf00      	nop
 800a840:	40008000 	.word	0x40008000
 800a844:	00f42400 	.word	0x00f42400
 800a848:	0800b51c 	.word	0x0800b51c
      }
      else
      {
        ret = HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	2201      	movs	r2, #1
 800a856:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	2200      	movs	r2, #0
 800a866:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	2200      	movs	r2, #0
 800a86c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a86e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a872:	4618      	mov	r0, r3
 800a874:	3730      	adds	r7, #48	@ 0x30
 800a876:	46bd      	mov	sp, r7
 800a878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a87c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a888:	f003 0308 	and.w	r3, r3, #8
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00a      	beq.n	800a8a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	430a      	orrs	r2, r1
 800a8a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8aa:	f003 0301 	and.w	r3, r3, #1
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00a      	beq.n	800a8c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	430a      	orrs	r2, r1
 800a8c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8cc:	f003 0302 	and.w	r3, r3, #2
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00a      	beq.n	800a8ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ee:	f003 0304 	and.w	r3, r3, #4
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00a      	beq.n	800a90c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	430a      	orrs	r2, r1
 800a90a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a910:	f003 0310 	and.w	r3, r3, #16
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00a      	beq.n	800a92e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	430a      	orrs	r2, r1
 800a92c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a932:	f003 0320 	and.w	r3, r3, #32
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00a      	beq.n	800a950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	430a      	orrs	r2, r1
 800a94e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d01a      	beq.n	800a992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	430a      	orrs	r2, r1
 800a970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a97a:	d10a      	bne.n	800a992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	430a      	orrs	r2, r1
 800a990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00a      	beq.n	800a9b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	430a      	orrs	r2, r1
 800a9b2:	605a      	str	r2, [r3, #4]
  }
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b098      	sub	sp, #96	@ 0x60
 800a9c4:	af02      	add	r7, sp, #8
 800a9c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9d0:	f7f9 f8d0 	bl	8003b74 <HAL_GetTick>
 800a9d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 0308 	and.w	r3, r3, #8
 800a9e0:	2b08      	cmp	r3, #8
 800a9e2:	d12f      	bne.n	800aa44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 f88e 	bl	800ab14 <UART_WaitOnFlagUntilTimeout>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d022      	beq.n	800aa44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa06:	e853 3f00 	ldrex	r3, [r3]
 800aa0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa12:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	461a      	mov	r2, r3
 800aa1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa24:	e841 2300 	strex	r3, r2, [r1]
 800aa28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1e6      	bne.n	800a9fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2220      	movs	r2, #32
 800aa34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e063      	b.n	800ab0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 0304 	and.w	r3, r3, #4
 800aa4e:	2b04      	cmp	r3, #4
 800aa50:	d149      	bne.n	800aae6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f857 	bl	800ab14 <UART_WaitOnFlagUntilTimeout>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d03c      	beq.n	800aae6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa74:	e853 3f00 	ldrex	r3, [r3]
 800aa78:	623b      	str	r3, [r7, #32]
   return(result);
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	461a      	mov	r2, r3
 800aa88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa92:	e841 2300 	strex	r3, r2, [r1]
 800aa96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1e6      	bne.n	800aa6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	60fb      	str	r3, [r7, #12]
   return(result);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f023 0301 	bic.w	r3, r3, #1
 800aab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3308      	adds	r3, #8
 800aabc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aabe:	61fa      	str	r2, [r7, #28]
 800aac0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac2:	69b9      	ldr	r1, [r7, #24]
 800aac4:	69fa      	ldr	r2, [r7, #28]
 800aac6:	e841 2300 	strex	r3, r2, [r1]
 800aaca:	617b      	str	r3, [r7, #20]
   return(result);
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1e5      	bne.n	800aa9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2220      	movs	r2, #32
 800aad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e012      	b.n	800ab0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2220      	movs	r2, #32
 800aaea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2220      	movs	r2, #32
 800aaf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3758      	adds	r7, #88	@ 0x58
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	603b      	str	r3, [r7, #0]
 800ab20:	4613      	mov	r3, r2
 800ab22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab24:	e04f      	b.n	800abc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab2c:	d04b      	beq.n	800abc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab2e:	f7f9 f821 	bl	8003b74 <HAL_GetTick>
 800ab32:	4602      	mov	r2, r0
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	69ba      	ldr	r2, [r7, #24]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d302      	bcc.n	800ab44 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d101      	bne.n	800ab48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e04e      	b.n	800abe6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 0304 	and.w	r3, r3, #4
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d037      	beq.n	800abc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	2b80      	cmp	r3, #128	@ 0x80
 800ab5a:	d034      	beq.n	800abc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2b40      	cmp	r3, #64	@ 0x40
 800ab60:	d031      	beq.n	800abc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	69db      	ldr	r3, [r3, #28]
 800ab68:	f003 0308 	and.w	r3, r3, #8
 800ab6c:	2b08      	cmp	r3, #8
 800ab6e:	d110      	bne.n	800ab92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2208      	movs	r2, #8
 800ab76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f000 f920 	bl	800adbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2208      	movs	r2, #8
 800ab82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e029      	b.n	800abe6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	69db      	ldr	r3, [r3, #28]
 800ab98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aba0:	d111      	bne.n	800abc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800abaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f000 f906 	bl	800adbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2220      	movs	r2, #32
 800abb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800abc2:	2303      	movs	r3, #3
 800abc4:	e00f      	b.n	800abe6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	69da      	ldr	r2, [r3, #28]
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	4013      	ands	r3, r2
 800abd0:	68ba      	ldr	r2, [r7, #8]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	bf0c      	ite	eq
 800abd6:	2301      	moveq	r3, #1
 800abd8:	2300      	movne	r3, #0
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	461a      	mov	r2, r3
 800abde:	79fb      	ldrb	r3, [r7, #7]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d0a0      	beq.n	800ab26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
	...

0800abf0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b096      	sub	sp, #88	@ 0x58
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	4613      	mov	r3, r2
 800abfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	88fa      	ldrh	r2, [r7, #6]
 800ac08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2222      	movs	r2, #34	@ 0x22
 800ac18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d02d      	beq.n	800ac82 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac2c:	4a40      	ldr	r2, [pc, #256]	@ (800ad30 <UART_Start_Receive_DMA+0x140>)
 800ac2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac36:	4a3f      	ldr	r2, [pc, #252]	@ (800ad34 <UART_Start_Receive_DMA+0x144>)
 800ac38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac40:	4a3d      	ldr	r2, [pc, #244]	@ (800ad38 <UART_Start_Receive_DMA+0x148>)
 800ac42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3324      	adds	r3, #36	@ 0x24
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac60:	461a      	mov	r2, r3
 800ac62:	88fb      	ldrh	r3, [r7, #6]
 800ac64:	f7fa ff6c 	bl	8005b40 <HAL_DMA_Start_IT>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d009      	beq.n	800ac82 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2210      	movs	r2, #16
 800ac72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2220      	movs	r2, #32
 800ac7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e051      	b.n	800ad26 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d018      	beq.n	800acbc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac92:	e853 3f00 	ldrex	r3, [r3]
 800ac96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac9e:	657b      	str	r3, [r7, #84]	@ 0x54
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	461a      	mov	r2, r3
 800aca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acaa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800acae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acb0:	e841 2300 	strex	r3, r2, [r1]
 800acb4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800acb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1e6      	bne.n	800ac8a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	3308      	adds	r3, #8
 800acc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc6:	e853 3f00 	ldrex	r3, [r3]
 800acca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800accc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acce:	f043 0301 	orr.w	r3, r3, #1
 800acd2:	653b      	str	r3, [r7, #80]	@ 0x50
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	3308      	adds	r3, #8
 800acda:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800acdc:	637a      	str	r2, [r7, #52]	@ 0x34
 800acde:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ace2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ace4:	e841 2300 	strex	r3, r2, [r1]
 800ace8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800acea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1e5      	bne.n	800acbc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	3308      	adds	r3, #8
 800acf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	e853 3f00 	ldrex	r3, [r3]
 800acfe:	613b      	str	r3, [r7, #16]
   return(result);
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	3308      	adds	r3, #8
 800ad0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ad10:	623a      	str	r2, [r7, #32]
 800ad12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad14:	69f9      	ldr	r1, [r7, #28]
 800ad16:	6a3a      	ldr	r2, [r7, #32]
 800ad18:	e841 2300 	strex	r3, r2, [r1]
 800ad1c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1e5      	bne.n	800acf0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3758      	adds	r7, #88	@ 0x58
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	0800af49 	.word	0x0800af49
 800ad34:	0800b07d 	.word	0x0800b07d
 800ad38:	0800b0c3 	.word	0x0800b0c3

0800ad3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b08f      	sub	sp, #60	@ 0x3c
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	e853 3f00 	ldrex	r3, [r3]
 800ad50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ad58:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad64:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad6a:	e841 2300 	strex	r3, r2, [r1]
 800ad6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1e6      	bne.n	800ad44 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	e853 3f00 	ldrex	r3, [r3]
 800ad84:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ad8c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3308      	adds	r3, #8
 800ad94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad96:	61ba      	str	r2, [r7, #24]
 800ad98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9a:	6979      	ldr	r1, [r7, #20]
 800ad9c:	69ba      	ldr	r2, [r7, #24]
 800ad9e:	e841 2300 	strex	r3, r2, [r1]
 800ada2:	613b      	str	r3, [r7, #16]
   return(result);
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1e5      	bne.n	800ad76 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2220      	movs	r2, #32
 800adae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800adb2:	bf00      	nop
 800adb4:	373c      	adds	r7, #60	@ 0x3c
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b095      	sub	sp, #84	@ 0x54
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adce:	e853 3f00 	ldrex	r3, [r3]
 800add2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800add4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800adda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	461a      	mov	r2, r3
 800ade2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ade4:	643b      	str	r3, [r7, #64]	@ 0x40
 800ade6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800adea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800adec:	e841 2300 	strex	r3, r2, [r1]
 800adf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800adf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1e6      	bne.n	800adc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	3308      	adds	r3, #8
 800adfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae00:	6a3b      	ldr	r3, [r7, #32]
 800ae02:	e853 3f00 	ldrex	r3, [r3]
 800ae06:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae0e:	f023 0301 	bic.w	r3, r3, #1
 800ae12:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	3308      	adds	r3, #8
 800ae1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae24:	e841 2300 	strex	r3, r2, [r1]
 800ae28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1e3      	bne.n	800adf8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d118      	bne.n	800ae6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	e853 3f00 	ldrex	r3, [r3]
 800ae44:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	f023 0310 	bic.w	r3, r3, #16
 800ae4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae56:	61bb      	str	r3, [r7, #24]
 800ae58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5a:	6979      	ldr	r1, [r7, #20]
 800ae5c:	69ba      	ldr	r2, [r7, #24]
 800ae5e:	e841 2300 	strex	r3, r2, [r1]
 800ae62:	613b      	str	r3, [r7, #16]
   return(result);
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1e6      	bne.n	800ae38 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2220      	movs	r2, #32
 800ae6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ae7e:	bf00      	nop
 800ae80:	3754      	adds	r7, #84	@ 0x54
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b090      	sub	sp, #64	@ 0x40
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae96:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 0320 	and.w	r3, r3, #32
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d137      	bne.n	800af16 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800aea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aeae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	3308      	adds	r3, #8
 800aeb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb8:	e853 3f00 	ldrex	r3, [r3]
 800aebc:	623b      	str	r3, [r7, #32]
   return(result);
 800aebe:	6a3b      	ldr	r3, [r7, #32]
 800aec0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aec4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3308      	adds	r3, #8
 800aecc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aece:	633a      	str	r2, [r7, #48]	@ 0x30
 800aed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aed6:	e841 2300 	strex	r3, r2, [r1]
 800aeda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1e5      	bne.n	800aeae <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	e853 3f00 	ldrex	r3, [r3]
 800aeee:	60fb      	str	r3, [r7, #12]
   return(result);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aef6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	461a      	mov	r2, r3
 800aefe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af00:	61fb      	str	r3, [r7, #28]
 800af02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af04:	69b9      	ldr	r1, [r7, #24]
 800af06:	69fa      	ldr	r2, [r7, #28]
 800af08:	e841 2300 	strex	r3, r2, [r1]
 800af0c:	617b      	str	r3, [r7, #20]
   return(result);
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1e6      	bne.n	800aee2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af14:	e004      	b.n	800af20 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800af16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800af1c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800af1e:	4798      	blx	r3
}
 800af20:	bf00      	nop
 800af22:	3740      	adds	r7, #64	@ 0x40
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af34:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af40:	bf00      	nop
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b09c      	sub	sp, #112	@ 0x70
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af54:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 0320 	and.w	r3, r3, #32
 800af60:	2b00      	cmp	r3, #0
 800af62:	d171      	bne.n	800b048 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800af64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af66:	2200      	movs	r2, #0
 800af68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af74:	e853 3f00 	ldrex	r3, [r3]
 800af78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af80:	66bb      	str	r3, [r7, #104]	@ 0x68
 800af82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af92:	e841 2300 	strex	r3, r2, [r1]
 800af96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1e6      	bne.n	800af6c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3308      	adds	r3, #8
 800afa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa8:	e853 3f00 	ldrex	r3, [r3]
 800afac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800afae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afb0:	f023 0301 	bic.w	r3, r3, #1
 800afb4:	667b      	str	r3, [r7, #100]	@ 0x64
 800afb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	3308      	adds	r3, #8
 800afbc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800afbe:	647a      	str	r2, [r7, #68]	@ 0x44
 800afc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800afc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800afc6:	e841 2300 	strex	r3, r2, [r1]
 800afca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800afcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1e5      	bne.n	800af9e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	3308      	adds	r3, #8
 800afd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afdc:	e853 3f00 	ldrex	r3, [r3]
 800afe0:	623b      	str	r3, [r7, #32]
   return(result);
 800afe2:	6a3b      	ldr	r3, [r7, #32]
 800afe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afe8:	663b      	str	r3, [r7, #96]	@ 0x60
 800afea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3308      	adds	r3, #8
 800aff0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aff2:	633a      	str	r2, [r7, #48]	@ 0x30
 800aff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800affa:	e841 2300 	strex	r3, r2, [r1]
 800affe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1e5      	bne.n	800afd2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b008:	2220      	movs	r2, #32
 800b00a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b00e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b012:	2b01      	cmp	r3, #1
 800b014:	d118      	bne.n	800b048 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	e853 3f00 	ldrex	r3, [r3]
 800b022:	60fb      	str	r3, [r7, #12]
   return(result);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f023 0310 	bic.w	r3, r3, #16
 800b02a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b02c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	461a      	mov	r2, r3
 800b032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b034:	61fb      	str	r3, [r7, #28]
 800b036:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b038:	69b9      	ldr	r1, [r7, #24]
 800b03a:	69fa      	ldr	r2, [r7, #28]
 800b03c:	e841 2300 	strex	r3, r2, [r1]
 800b040:	617b      	str	r3, [r7, #20]
   return(result);
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1e6      	bne.n	800b016 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b04a:	2200      	movs	r2, #0
 800b04c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b04e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b052:	2b01      	cmp	r3, #1
 800b054:	d109      	bne.n	800b06a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b058:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b05c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b05e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b062:	4611      	mov	r1, r2
 800b064:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b066:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b068:	e004      	b.n	800b074 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b06a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b06c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b070:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b072:	4798      	blx	r3
}
 800b074:	bf00      	nop
 800b076:	3770      	adds	r7, #112	@ 0x70
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b088:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2201      	movs	r2, #1
 800b08e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b094:	2b01      	cmp	r3, #1
 800b096:	d10b      	bne.n	800b0b0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b0a4:	0852      	lsrs	r2, r2, #1
 800b0a6:	b292      	uxth	r2, r2
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0ae:	e004      	b.n	800b0ba <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	4798      	blx	r3
}
 800b0ba:	bf00      	nop
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b086      	sub	sp, #24
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0ea:	2b80      	cmp	r3, #128	@ 0x80
 800b0ec:	d109      	bne.n	800b102 <UART_DMAError+0x40>
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	2b21      	cmp	r3, #33	@ 0x21
 800b0f2:	d106      	bne.n	800b102 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b0fc:	6978      	ldr	r0, [r7, #20]
 800b0fe:	f7ff fe1d 	bl	800ad3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b10c:	2b40      	cmp	r3, #64	@ 0x40
 800b10e:	d109      	bne.n	800b124 <UART_DMAError+0x62>
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2b22      	cmp	r3, #34	@ 0x22
 800b114:	d106      	bne.n	800b124 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	2200      	movs	r2, #0
 800b11a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b11e:	6978      	ldr	r0, [r7, #20]
 800b120:	f7ff fe4d 	bl	800adbe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b12a:	f043 0210 	orr.w	r2, r3, #16
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b13a:	6978      	ldr	r0, [r7, #20]
 800b13c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b13e:	bf00      	nop
 800b140:	3718      	adds	r7, #24
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b084      	sub	sp, #16
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b152:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b16e:	bf00      	nop
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b088      	sub	sp, #32
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	e853 3f00 	ldrex	r3, [r3]
 800b18a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b192:	61fb      	str	r3, [r7, #28]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	461a      	mov	r2, r3
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	61bb      	str	r3, [r7, #24]
 800b19e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a0:	6979      	ldr	r1, [r7, #20]
 800b1a2:	69ba      	ldr	r2, [r7, #24]
 800b1a4:	e841 2300 	strex	r3, r2, [r1]
 800b1a8:	613b      	str	r3, [r7, #16]
   return(result);
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d1e6      	bne.n	800b17e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2220      	movs	r2, #32
 800b1b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1c8:	bf00      	nop
 800b1ca:	3720      	adds	r7, #32
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1d8:	bf00      	nop
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b200:	bf00      	nop
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d101      	bne.n	800b222 <HAL_UARTEx_DisableFifoMode+0x16>
 800b21e:	2302      	movs	r3, #2
 800b220:	e027      	b.n	800b272 <HAL_UARTEx_DisableFifoMode+0x66>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2201      	movs	r2, #1
 800b226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2224      	movs	r2, #36	@ 0x24
 800b22e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f022 0201 	bic.w	r2, r2, #1
 800b248:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b250:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2220      	movs	r2, #32
 800b264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr

0800b27e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b084      	sub	sp, #16
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
 800b286:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d101      	bne.n	800b296 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b292:	2302      	movs	r3, #2
 800b294:	e02d      	b.n	800b2f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2201      	movs	r2, #1
 800b29a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2224      	movs	r2, #36	@ 0x24
 800b2a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f022 0201 	bic.w	r2, r2, #1
 800b2bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	683a      	ldr	r2, [r7, #0]
 800b2ce:	430a      	orrs	r2, r1
 800b2d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 f850 	bl	800b378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2220      	movs	r2, #32
 800b2e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b084      	sub	sp, #16
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d101      	bne.n	800b312 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b30e:	2302      	movs	r3, #2
 800b310:	e02d      	b.n	800b36e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2201      	movs	r2, #1
 800b316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2224      	movs	r2, #36	@ 0x24
 800b31e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f022 0201 	bic.w	r2, r2, #1
 800b338:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	430a      	orrs	r2, r1
 800b34c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f812 	bl	800b378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2220      	movs	r2, #32
 800b360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
	...

0800b378 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b384:	2b00      	cmp	r3, #0
 800b386:	d108      	bne.n	800b39a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b398:	e031      	b.n	800b3fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b39a:	2308      	movs	r3, #8
 800b39c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b39e:	2308      	movs	r3, #8
 800b3a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	0e5b      	lsrs	r3, r3, #25
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	f003 0307 	and.w	r3, r3, #7
 800b3b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	0f5b      	lsrs	r3, r3, #29
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	f003 0307 	and.w	r3, r3, #7
 800b3c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3c2:	7bbb      	ldrb	r3, [r7, #14]
 800b3c4:	7b3a      	ldrb	r2, [r7, #12]
 800b3c6:	4911      	ldr	r1, [pc, #68]	@ (800b40c <UARTEx_SetNbDataToProcess+0x94>)
 800b3c8:	5c8a      	ldrb	r2, [r1, r2]
 800b3ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3ce:	7b3a      	ldrb	r2, [r7, #12]
 800b3d0:	490f      	ldr	r1, [pc, #60]	@ (800b410 <UARTEx_SetNbDataToProcess+0x98>)
 800b3d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3e0:	7bfb      	ldrb	r3, [r7, #15]
 800b3e2:	7b7a      	ldrb	r2, [r7, #13]
 800b3e4:	4909      	ldr	r1, [pc, #36]	@ (800b40c <UARTEx_SetNbDataToProcess+0x94>)
 800b3e6:	5c8a      	ldrb	r2, [r1, r2]
 800b3e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3ec:	7b7a      	ldrb	r2, [r7, #13]
 800b3ee:	4908      	ldr	r1, [pc, #32]	@ (800b410 <UARTEx_SetNbDataToProcess+0x98>)
 800b3f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3f6:	b29a      	uxth	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b3fe:	bf00      	nop
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	0800b534 	.word	0x0800b534
 800b410:	0800b53c 	.word	0x0800b53c

0800b414 <memset>:
 800b414:	4402      	add	r2, r0
 800b416:	4603      	mov	r3, r0
 800b418:	4293      	cmp	r3, r2
 800b41a:	d100      	bne.n	800b41e <memset+0xa>
 800b41c:	4770      	bx	lr
 800b41e:	f803 1b01 	strb.w	r1, [r3], #1
 800b422:	e7f9      	b.n	800b418 <memset+0x4>

0800b424 <__libc_init_array>:
 800b424:	b570      	push	{r4, r5, r6, lr}
 800b426:	4d0d      	ldr	r5, [pc, #52]	@ (800b45c <__libc_init_array+0x38>)
 800b428:	4c0d      	ldr	r4, [pc, #52]	@ (800b460 <__libc_init_array+0x3c>)
 800b42a:	1b64      	subs	r4, r4, r5
 800b42c:	10a4      	asrs	r4, r4, #2
 800b42e:	2600      	movs	r6, #0
 800b430:	42a6      	cmp	r6, r4
 800b432:	d109      	bne.n	800b448 <__libc_init_array+0x24>
 800b434:	4d0b      	ldr	r5, [pc, #44]	@ (800b464 <__libc_init_array+0x40>)
 800b436:	4c0c      	ldr	r4, [pc, #48]	@ (800b468 <__libc_init_array+0x44>)
 800b438:	f000 f826 	bl	800b488 <_init>
 800b43c:	1b64      	subs	r4, r4, r5
 800b43e:	10a4      	asrs	r4, r4, #2
 800b440:	2600      	movs	r6, #0
 800b442:	42a6      	cmp	r6, r4
 800b444:	d105      	bne.n	800b452 <__libc_init_array+0x2e>
 800b446:	bd70      	pop	{r4, r5, r6, pc}
 800b448:	f855 3b04 	ldr.w	r3, [r5], #4
 800b44c:	4798      	blx	r3
 800b44e:	3601      	adds	r6, #1
 800b450:	e7ee      	b.n	800b430 <__libc_init_array+0xc>
 800b452:	f855 3b04 	ldr.w	r3, [r5], #4
 800b456:	4798      	blx	r3
 800b458:	3601      	adds	r6, #1
 800b45a:	e7f2      	b.n	800b442 <__libc_init_array+0x1e>
 800b45c:	0800b54c 	.word	0x0800b54c
 800b460:	0800b54c 	.word	0x0800b54c
 800b464:	0800b54c 	.word	0x0800b54c
 800b468:	0800b550 	.word	0x0800b550

0800b46c <memcpy>:
 800b46c:	440a      	add	r2, r1
 800b46e:	4291      	cmp	r1, r2
 800b470:	f100 33ff 	add.w	r3, r0, #4294967295
 800b474:	d100      	bne.n	800b478 <memcpy+0xc>
 800b476:	4770      	bx	lr
 800b478:	b510      	push	{r4, lr}
 800b47a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b47e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b482:	4291      	cmp	r1, r2
 800b484:	d1f9      	bne.n	800b47a <memcpy+0xe>
 800b486:	bd10      	pop	{r4, pc}

0800b488 <_init>:
 800b488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48a:	bf00      	nop
 800b48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b48e:	bc08      	pop	{r3}
 800b490:	469e      	mov	lr, r3
 800b492:	4770      	bx	lr

0800b494 <_fini>:
 800b494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b496:	bf00      	nop
 800b498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b49a:	bc08      	pop	{r3}
 800b49c:	469e      	mov	lr, r3
 800b49e:	4770      	bx	lr


Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097c4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800999c  0800999c  0000a99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099dc  080099dc  0000b018  2**0
                  CONTENTS
  4 .ARM          00000008  080099dc  080099dc  0000a9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099e4  080099e4  0000b018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099e4  080099e4  0000a9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099e8  080099e8  0000a9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080099ec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  20000018  08009a04  0000b018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  08009a04  0000b76c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9d1  00000000  00000000  0000b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332b  00000000  00000000  00026a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00029d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001117  00000000  00000000  0002b340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003667  00000000  00000000  0002c457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcd8  00000000  00000000  0002fabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114bd4  00000000  00000000  0004b796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016036a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000606c  00000000  00000000  001603b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0016641c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009984 	.word	0x08009984

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08009984 	.word	0x08009984

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b96a 	b.w	8000ee0 <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d14e      	bne.n	8000cce <__udivmoddi4+0xaa>
 8000c30:	4694      	mov	ip, r2
 8000c32:	458c      	cmp	ip, r1
 8000c34:	4686      	mov	lr, r0
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	d962      	bls.n	8000d02 <__udivmoddi4+0xde>
 8000c3c:	b14a      	cbz	r2, 8000c52 <__udivmoddi4+0x2e>
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	4091      	lsls	r1, r2
 8000c44:	fa20 f303 	lsr.w	r3, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c56:	fa1f f68c 	uxth.w	r6, ip
 8000c5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c62:	fb07 1114 	mls	r1, r7, r4, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb04 f106 	mul.w	r1, r4, r6
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x64>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7a:	f080 8112 	bcs.w	8000ea2 <__udivmoddi4+0x27e>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 810f 	bls.w	8000ea2 <__udivmoddi4+0x27e>
 8000c84:	3c02      	subs	r4, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a59      	subs	r1, r3, r1
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c92:	fb07 1110 	mls	r1, r7, r0, r1
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f606 	mul.w	r6, r0, r6
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x94>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000caa:	f080 80fc 	bcs.w	8000ea6 <__udivmoddi4+0x282>
 8000cae:	429e      	cmp	r6, r3
 8000cb0:	f240 80f9 	bls.w	8000ea6 <__udivmoddi4+0x282>
 8000cb4:	4463      	add	r3, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa6>
 8000cc2:	40d3      	lsrs	r3, r2
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xba>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb4>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa6>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x150>
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xcc>
 8000cea:	4290      	cmp	r0, r2
 8000cec:	f0c0 80f0 	bcc.w	8000ed0 <__udivmoddi4+0x2ac>
 8000cf0:	1a86      	subs	r6, r0, r2
 8000cf2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	2d00      	cmp	r5, #0
 8000cfa:	d0e6      	beq.n	8000cca <__udivmoddi4+0xa6>
 8000cfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000d00:	e7e3      	b.n	8000cca <__udivmoddi4+0xa6>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x204>
 8000d08:	eba1 040c 	sub.w	r4, r1, ip
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa1f f78c 	uxth.w	r7, ip
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb07 f006 	mul.w	r0, r7, r6
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x11c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x11a>
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	f200 80cd 	bhi.w	8000ed8 <__udivmoddi4+0x2b4>
 8000d3e:	4626      	mov	r6, r4
 8000d40:	1a1c      	subs	r4, r3, r0
 8000d42:	fa1f f38e 	uxth.w	r3, lr
 8000d46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb00 f707 	mul.w	r7, r0, r7
 8000d56:	429f      	cmp	r7, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x148>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x146>
 8000d64:	429f      	cmp	r7, r3
 8000d66:	f200 80b0 	bhi.w	8000eca <__udivmoddi4+0x2a6>
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	1bdb      	subs	r3, r3, r7
 8000d6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x9c>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d84:	fa04 f301 	lsl.w	r3, r4, r1
 8000d88:	ea43 030c 	orr.w	r3, r3, ip
 8000d8c:	40f4      	lsrs	r4, r6
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	0c38      	lsrs	r0, r7, #16
 8000d94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d98:	fbb4 fef0 	udiv	lr, r4, r0
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	fb00 441e 	mls	r4, r0, lr, r4
 8000da4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da8:	fb0e f90c 	mul.w	r9, lr, ip
 8000dac:	45a1      	cmp	r9, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x1a6>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dba:	f080 8084 	bcs.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	f240 8081 	bls.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	eba4 0409 	sub.w	r4, r4, r9
 8000dce:	fa1f f983 	uxth.w	r9, r3
 8000dd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1d2>
 8000de6:	193c      	adds	r4, r7, r4
 8000de8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dec:	d267      	bcs.n	8000ebe <__udivmoddi4+0x29a>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d965      	bls.n	8000ebe <__udivmoddi4+0x29a>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfe:	eba4 040c 	sub.w	r4, r4, ip
 8000e02:	429c      	cmp	r4, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	469c      	mov	ip, r3
 8000e08:	d351      	bcc.n	8000eae <__udivmoddi4+0x28a>
 8000e0a:	d04e      	beq.n	8000eaa <__udivmoddi4+0x286>
 8000e0c:	b155      	cbz	r5, 8000e24 <__udivmoddi4+0x200>
 8000e0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e12:	eb64 040c 	sbc.w	r4, r4, ip
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	40cb      	lsrs	r3, r1
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	40cc      	lsrs	r4, r1
 8000e20:	e9c5 6400 	strd	r6, r4, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	e750      	b.n	8000cca <__udivmoddi4+0xa6>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa24 f303 	lsr.w	r3, r4, r3
 8000e38:	4094      	lsls	r4, r2
 8000e3a:	430c      	orrs	r4, r1
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e50:	0c23      	lsrs	r3, r4, #16
 8000e52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e56:	fb00 f107 	mul.w	r1, r0, r7
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x24c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e66:	d22c      	bcs.n	8000ec2 <__udivmoddi4+0x29e>
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d92a      	bls.n	8000ec2 <__udivmoddi4+0x29e>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e80:	fb01 f307 	mul.w	r3, r1, r7
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x276>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e90:	d213      	bcs.n	8000eba <__udivmoddi4+0x296>
 8000e92:	42a3      	cmp	r3, r4
 8000e94:	d911      	bls.n	8000eba <__udivmoddi4+0x296>
 8000e96:	3902      	subs	r1, #2
 8000e98:	4464      	add	r4, ip
 8000e9a:	1ae4      	subs	r4, r4, r3
 8000e9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea0:	e739      	b.n	8000d16 <__udivmoddi4+0xf2>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	e6f0      	b.n	8000c88 <__udivmoddi4+0x64>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e706      	b.n	8000cb8 <__udivmoddi4+0x94>
 8000eaa:	45c8      	cmp	r8, r9
 8000eac:	d2ae      	bcs.n	8000e0c <__udivmoddi4+0x1e8>
 8000eae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb6:	3801      	subs	r0, #1
 8000eb8:	e7a8      	b.n	8000e0c <__udivmoddi4+0x1e8>
 8000eba:	4631      	mov	r1, r6
 8000ebc:	e7ed      	b.n	8000e9a <__udivmoddi4+0x276>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e799      	b.n	8000df6 <__udivmoddi4+0x1d2>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e7d4      	b.n	8000e70 <__udivmoddi4+0x24c>
 8000ec6:	46d6      	mov	lr, sl
 8000ec8:	e77f      	b.n	8000dca <__udivmoddi4+0x1a6>
 8000eca:	4463      	add	r3, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e74d      	b.n	8000d6c <__udivmoddi4+0x148>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e70f      	b.n	8000cf8 <__udivmoddi4+0xd4>
 8000ed8:	3e02      	subs	r6, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	e730      	b.n	8000d40 <__udivmoddi4+0x11c>
 8000ede:	bf00      	nop

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2232      	movs	r2, #50	@ 0x32
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f002 faef 	bl	80034d8 <HAL_ADC_Start_DMA>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <Update_adc>:

uint32_t Update_adc(ADC* adc){
 8000f02:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	uint64_t sum_adc = 0;
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e011      	b.n	8000f42 <Update_adc+0x40>
		sum_adc += adc -> adc_buffer[i];
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f26:	2200      	movs	r2, #0
 8000f28:	461c      	mov	r4, r3
 8000f2a:	4615      	mov	r5, r2
 8000f2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f30:	eb12 0804 	adds.w	r8, r2, r4
 8000f34:	eb43 0905 	adc.w	r9, r3, r5
 8000f38:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b31      	cmp	r3, #49	@ 0x31
 8000f46:	d9ea      	bls.n	8000f1e <Update_adc+0x1c>
	}
	return adc -> adc_avg = sum_adc / 50;
 8000f48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f4c:	f04f 0232 	mov.w	r2, #50	@ 0x32
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	f7ff fe4e 	bl	8000bf4 <__aeabi_uldivmod>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000f74 <Update_joy>:
 *      Author: naker
 */

#include "joy.h"

void Update_joy(JOY *joy){
 8000f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
	uint8_t s_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000f7e:	2120      	movs	r1, #32
 8000f80:	4835      	ldr	r0, [pc, #212]	@ (8001058 <Update_joy+0xe4>)
 8000f82:	f004 fa93 	bl	80054ac <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
	uint8_t s_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000f8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f92:	f004 fa8b 	bl	80054ac <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73bb      	strb	r3, [r7, #14]
	uint8_t s_3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	482f      	ldr	r0, [pc, #188]	@ (800105c <Update_joy+0xe8>)
 8000f9e:	f004 fa85 	bl	80054ac <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	737b      	strb	r3, [r7, #13]
	uint8_t s_4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8000fa6:	2120      	movs	r1, #32
 8000fa8:	482c      	ldr	r0, [pc, #176]	@ (800105c <Update_joy+0xe8>)
 8000faa:	f004 fa7f 	bl	80054ac <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	733b      	strb	r3, [r7, #12]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d008      	beq.n	8000fca <Update_joy+0x56>
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <Update_joy+0x56>
 8000fbe:	7b7b      	ldrb	r3, [r7, #13]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <Update_joy+0x56>
 8000fc4:	7b3b      	ldrb	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d133      	bne.n	8001032 <Update_joy+0xbe>
		static uint8_t is_first = 1;
		static uint64_t timestamp = 0;
		if(is_first){
 8000fca:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <Update_joy+0xec>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00c      	beq.n	8000fec <Update_joy+0x78>
			timestamp = HAL_GetTick() + 50;
 8000fd2:	f001 fe79 	bl	8002cc8 <HAL_GetTick>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	3332      	adds	r3, #50	@ 0x32
 8000fda:	2200      	movs	r2, #0
 8000fdc:	469a      	mov	sl, r3
 8000fde:	4693      	mov	fp, r2
 8000fe0:	4b20      	ldr	r3, [pc, #128]	@ (8001064 <Update_joy+0xf0>)
 8000fe2:	e9c3 ab00 	strd	sl, fp, [r3]
			is_first = 0;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8001060 <Update_joy+0xec>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() > timestamp){
 8000fec:	f001 fe6c 	bl	8002cc8 <HAL_GetTick>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	461c      	mov	r4, r3
 8000ff6:	4615      	mov	r5, r2
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <Update_joy+0xf0>)
 8000ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffe:	42a2      	cmp	r2, r4
 8001000:	41ab      	sbcs	r3, r5
 8001002:	d223      	bcs.n	800104c <Update_joy+0xd8>
			timestamp = HAL_GetTick() + 50;
 8001004:	f001 fe60 	bl	8002cc8 <HAL_GetTick>
 8001008:	4603      	mov	r3, r0
 800100a:	3332      	adds	r3, #50	@ 0x32
 800100c:	2200      	movs	r2, #0
 800100e:	4698      	mov	r8, r3
 8001010:	4691      	mov	r9, r2
 8001012:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <Update_joy+0xf0>)
 8001014:	e9c3 8900 	strd	r8, r9, [r3]
			joy -> s_1 = s_1;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	701a      	strb	r2, [r3, #0]
			joy -> s_2 = s_2;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7bba      	ldrb	r2, [r7, #14]
 8001022:	705a      	strb	r2, [r3, #1]
			joy -> s_3 = s_3;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7b7a      	ldrb	r2, [r7, #13]
 8001028:	709a      	strb	r2, [r3, #2]
			joy -> s_4 = s_4;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7b3a      	ldrb	r2, [r7, #12]
 800102e:	70da      	strb	r2, [r3, #3]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8001030:	e00c      	b.n	800104c <Update_joy+0xd8>
		}
	}else{
		joy -> s_1 = 1;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
		joy -> s_2 = 1;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	705a      	strb	r2, [r3, #1]
		joy -> s_3 = 1;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	709a      	strb	r2, [r3, #2]
		joy -> s_4 = 1;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	70da      	strb	r2, [r3, #3]
	}
}
 800104a:	e000      	b.n	800104e <Update_joy+0xda>
	if(!s_1 || !s_2 || !s_3 || !s_4){
 800104c:	bf00      	nop
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001058:	48000400 	.word	0x48000400
 800105c:	48000800 	.word	0x48000800
 8001060:	20000000 	.word	0x20000000
 8001064:	20000038 	.word	0x20000038

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f001 fdc7 	bl	8002bfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f8ce 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f000 fb9a 	bl	80017ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001078:	f000 fb5e 	bl	8001738 <MX_DMA_Init>
  MX_TIM1_Init();
 800107c:	f000 f98a 	bl	8001394 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001080:	f000 fa38 	bl	80014f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001084:	f000 fa84 	bl	8001590 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001088:	f000 f90c 	bl	80012a4 <MX_ADC1_Init>
  MX_TIM16_Init();
 800108c:	f000 fad6 	bl	800163c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001090:	f000 fb04 	bl	800169c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Update command timer
  HAL_TIM_Base_Start_IT(&htim3);
 8001094:	484b      	ldr	r0, [pc, #300]	@ (80011c4 <main+0x15c>)
 8001096:	f005 fb55 	bl	8006744 <HAL_TIM_Base_Start_IT>

  //PWM generator
  HAL_TIM_Base_Start(&htim1);
 800109a:	484b      	ldr	r0, [pc, #300]	@ (80011c8 <main+0x160>)
 800109c:	f005 fae2 	bl	8006664 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010a0:	2100      	movs	r1, #0
 80010a2:	4849      	ldr	r0, [pc, #292]	@ (80011c8 <main+0x160>)
 80010a4:	f005 fc34 	bl	8006910 <HAL_TIM_PWM_Start>

  //Encoder reader
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80010a8:	213c      	movs	r1, #60	@ 0x3c
 80010aa:	4848      	ldr	r0, [pc, #288]	@ (80011cc <main+0x164>)
 80010ac:	f005 fe5e 	bl	8006d6c <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, 8192, 8000, 65536);
 80010b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010b4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80010b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010bc:	4844      	ldr	r0, [pc, #272]	@ (80011d0 <main+0x168>)
 80010be:	f001 f88a 	bl	80021d6 <QEI_init>

  //Current reader
  ADC_init(&hadc1, &current_sensor);
 80010c2:	4944      	ldr	r1, [pc, #272]	@ (80011d4 <main+0x16c>)
 80010c4:	4844      	ldr	r0, [pc, #272]	@ (80011d8 <main+0x170>)
 80010c6:	f7ff ff0d 	bl	8000ee4 <ADC_init>

  //Position PID
  PID_init(&p_pid, p_kp, p_ki, p_kd, 0.001);
 80010ca:	4b44      	ldr	r3, [pc, #272]	@ (80011dc <main+0x174>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	4b43      	ldr	r3, [pc, #268]	@ (80011e0 <main+0x178>)
 80010d2:	ed93 7a00 	vldr	s14, [r3]
 80010d6:	4b43      	ldr	r3, [pc, #268]	@ (80011e4 <main+0x17c>)
 80010d8:	edd3 6a00 	vldr	s13, [r3]
 80010dc:	eddf 1a42 	vldr	s3, [pc, #264]	@ 80011e8 <main+0x180>
 80010e0:	eeb0 1a66 	vmov.f32	s2, s13
 80010e4:	eef0 0a47 	vmov.f32	s1, s14
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	483f      	ldr	r0, [pc, #252]	@ (80011ec <main+0x184>)
 80010ee:	f000 fe6d 	bl	8001dcc <PID_init>
  PID_init(&v_pid, v_kp, v_ki, v_kd, 0.000125);
 80010f2:	4b3f      	ldr	r3, [pc, #252]	@ (80011f0 <main+0x188>)
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	4b3e      	ldr	r3, [pc, #248]	@ (80011f4 <main+0x18c>)
 80010fa:	ed93 7a00 	vldr	s14, [r3]
 80010fe:	4b3e      	ldr	r3, [pc, #248]	@ (80011f8 <main+0x190>)
 8001100:	edd3 6a00 	vldr	s13, [r3]
 8001104:	eddf 1a3d 	vldr	s3, [pc, #244]	@ 80011fc <main+0x194>
 8001108:	eeb0 1a66 	vmov.f32	s2, s13
 800110c:	eef0 0a47 	vmov.f32	s1, s14
 8001110:	eeb0 0a67 	vmov.f32	s0, s15
 8001114:	483a      	ldr	r0, [pc, #232]	@ (8001200 <main+0x198>)
 8001116:	f000 fe59 	bl	8001dcc <PID_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(mode == 1){
 800111a:	e04d      	b.n	80011b8 <main+0x150>
		  Update_joy(&joy);
 800111c:	4839      	ldr	r0, [pc, #228]	@ (8001204 <main+0x19c>)
 800111e:	f7ff ff29 	bl	8000f74 <Update_joy>
		  if (!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 8001122:	4b38      	ldr	r3, [pc, #224]	@ (8001204 <main+0x19c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d111      	bne.n	800114e <main+0xe6>
 800112a:	4b36      	ldr	r3, [pc, #216]	@ (8001204 <main+0x19c>)
 800112c:	785b      	ldrb	r3, [r3, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00d      	beq.n	800114e <main+0xe6>
 8001132:	4b34      	ldr	r3, [pc, #208]	@ (8001204 <main+0x19c>)
 8001134:	789b      	ldrb	r3, [r3, #2]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d009      	beq.n	800114e <main+0xe6>
 800113a:	4b32      	ldr	r3, [pc, #200]	@ (8001204 <main+0x19c>)
 800113c:	78db      	ldrb	r3, [r3, #3]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d005      	beq.n	800114e <main+0xe6>
			  // switch 1 has pushed
			  jog += 20; // Move up 20 mm.
 8001142:	4b31      	ldr	r3, [pc, #196]	@ (8001208 <main+0x1a0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3314      	adds	r3, #20
 8001148:	4a2f      	ldr	r2, [pc, #188]	@ (8001208 <main+0x1a0>)
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	e034      	b.n	80011b8 <main+0x150>
		  }else if (joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 800114e:	4b2d      	ldr	r3, [pc, #180]	@ (8001204 <main+0x19c>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d011      	beq.n	800117a <main+0x112>
 8001156:	4b2b      	ldr	r3, [pc, #172]	@ (8001204 <main+0x19c>)
 8001158:	785b      	ldrb	r3, [r3, #1]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10d      	bne.n	800117a <main+0x112>
 800115e:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <main+0x19c>)
 8001160:	789b      	ldrb	r3, [r3, #2]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d009      	beq.n	800117a <main+0x112>
 8001166:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <main+0x19c>)
 8001168:	78db      	ldrb	r3, [r3, #3]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <main+0x112>
			  // switch 2 has pushed
			  jog -= 20; // Move down 20 mm.
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <main+0x1a0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3b14      	subs	r3, #20
 8001174:	4a24      	ldr	r2, [pc, #144]	@ (8001208 <main+0x1a0>)
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	e01e      	b.n	80011b8 <main+0x150>
		  }else if (joy.s_1 && joy.s_2 && !joy.s_3 && joy.s_4){
 800117a:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <main+0x19c>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d01a      	beq.n	80011b8 <main+0x150>
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <main+0x19c>)
 8001184:	785b      	ldrb	r3, [r3, #1]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d016      	beq.n	80011b8 <main+0x150>
 800118a:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <main+0x19c>)
 800118c:	789b      	ldrb	r3, [r3, #2]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d112      	bne.n	80011b8 <main+0x150>
 8001192:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <main+0x19c>)
 8001194:	78db      	ldrb	r3, [r3, #3]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <main+0x13a>
			  // switch 3 has pushed
			  mode = 0; // Change mode to Automatic
 800119a:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <main+0x1a4>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e00a      	b.n	80011b8 <main+0x150>
		  }else if (joy.s_1 && joy.s_2 && joy.s_3 && !joy.s_4){
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <main+0x19c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d006      	beq.n	80011b8 <main+0x150>
 80011aa:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <main+0x19c>)
 80011ac:	785b      	ldrb	r3, [r3, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <main+0x150>
 80011b2:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <main+0x19c>)
 80011b4:	789b      	ldrb	r3, [r3, #2]
 80011b6:	2b00      	cmp	r3, #0
	  while(mode == 1){
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <main+0x1a4>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d0ad      	beq.n	800111c <main+0xb4>
 80011c0:	e7fa      	b.n	80011b8 <main+0x150>
 80011c2:	bf00      	nop
 80011c4:	200001d8 	.word	0x200001d8
 80011c8:	2000010c 	.word	0x2000010c
 80011cc:	200002a4 	.word	0x200002a4
 80011d0:	200006c8 	.word	0x200006c8
 80011d4:	200005f8 	.word	0x200005f8
 80011d8:	20000040 	.word	0x20000040
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000750 	.word	0x20000750
 80011e4:	20000754 	.word	0x20000754
 80011e8:	3a83126f 	.word	0x3a83126f
 80011ec:	20000738 	.word	0x20000738
 80011f0:	20000004 	.word	0x20000004
 80011f4:	20000728 	.word	0x20000728
 80011f8:	2000072c 	.word	0x2000072c
 80011fc:	3903126f 	.word	0x3903126f
 8001200:	20000710 	.word	0x20000710
 8001204:	200005dc 	.word	0x200005dc
 8001208:	200005e0 	.word	0x200005e0
 800120c:	200005f4 	.word	0x200005f4

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	@ 0x50
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	2238      	movs	r2, #56	@ 0x38
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f008 fb84 	bl	800992c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001232:	2000      	movs	r0, #0
 8001234:	f004 f982 	bl	800553c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001238:	2301      	movs	r3, #1
 800123a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001240:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001242:	2302      	movs	r3, #2
 8001244:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001246:	2303      	movs	r3, #3
 8001248:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800124a:	2306      	movs	r3, #6
 800124c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800124e:	2355      	movs	r3, #85	@ 0x55
 8001250:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800125a:	2302      	movs	r3, #2
 800125c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125e:	f107 0318 	add.w	r3, r7, #24
 8001262:	4618      	mov	r0, r3
 8001264:	f004 fa1e 	bl	80056a4 <HAL_RCC_OscConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800126e:	f000 fda7 	bl	8001dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001272:	230f      	movs	r3, #15
 8001274:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001276:	2303      	movs	r3, #3
 8001278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2104      	movs	r1, #4
 800128a:	4618      	mov	r0, r3
 800128c:	f004 fd1c 	bl	8005cc8 <HAL_RCC_ClockConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001296:	f000 fd93 	bl	8001dc0 <Error_Handler>
  }
}
 800129a:	bf00      	nop
 800129c:	3750      	adds	r7, #80	@ 0x50
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	@ 0x30
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2220      	movs	r2, #32
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f008 fb35 	bl	800992c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012c2:	4b32      	ldr	r3, [pc, #200]	@ (800138c <MX_ADC1_Init+0xe8>)
 80012c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012ca:	4b30      	ldr	r3, [pc, #192]	@ (800138c <MX_ADC1_Init+0xe8>)
 80012cc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d2:	4b2e      	ldr	r3, [pc, #184]	@ (800138c <MX_ADC1_Init+0xe8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d8:	4b2c      	ldr	r3, [pc, #176]	@ (800138c <MX_ADC1_Init+0xe8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80012de:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <MX_ADC1_Init+0xe8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012e4:	4b29      	ldr	r3, [pc, #164]	@ (800138c <MX_ADC1_Init+0xe8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ea:	4b28      	ldr	r3, [pc, #160]	@ (800138c <MX_ADC1_Init+0xe8>)
 80012ec:	2204      	movs	r2, #4
 80012ee:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012f0:	4b26      	ldr	r3, [pc, #152]	@ (800138c <MX_ADC1_Init+0xe8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012f6:	4b25      	ldr	r3, [pc, #148]	@ (800138c <MX_ADC1_Init+0xe8>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012fc:	4b23      	ldr	r3, [pc, #140]	@ (800138c <MX_ADC1_Init+0xe8>)
 80012fe:	2201      	movs	r2, #1
 8001300:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001302:	4b22      	ldr	r3, [pc, #136]	@ (800138c <MX_ADC1_Init+0xe8>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <MX_ADC1_Init+0xe8>)
 800130c:	2200      	movs	r2, #0
 800130e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001310:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <MX_ADC1_Init+0xe8>)
 8001312:	2200      	movs	r2, #0
 8001314:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001316:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <MX_ADC1_Init+0xe8>)
 8001318:	2201      	movs	r2, #1
 800131a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800131e:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <MX_ADC1_Init+0xe8>)
 8001320:	2200      	movs	r2, #0
 8001322:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001324:	4b19      	ldr	r3, [pc, #100]	@ (800138c <MX_ADC1_Init+0xe8>)
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800132c:	4817      	ldr	r0, [pc, #92]	@ (800138c <MX_ADC1_Init+0xe8>)
 800132e:	f001 ff17 	bl	8003160 <HAL_ADC_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001338:	f000 fd42 	bl	8001dc0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4811      	ldr	r0, [pc, #68]	@ (800138c <MX_ADC1_Init+0xe8>)
 8001348:	f003 f9e4 	bl	8004714 <HAL_ADCEx_MultiModeConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001352:	f000 fd35 	bl	8001dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001356:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <MX_ADC1_Init+0xec>)
 8001358:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800135a:	2306      	movs	r3, #6
 800135c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001362:	237f      	movs	r3, #127	@ 0x7f
 8001364:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001366:	2304      	movs	r3, #4
 8001368:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	@ (800138c <MX_ADC1_Init+0xe8>)
 8001374:	f002 fc0c 	bl	8003b90 <HAL_ADC_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800137e:	f000 fd1f 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	3730      	adds	r7, #48	@ 0x30
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000040 	.word	0x20000040
 8001390:	04300002 	.word	0x04300002

08001394 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b09c      	sub	sp, #112	@ 0x70
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	615a      	str	r2, [r3, #20]
 80013c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2234      	movs	r2, #52	@ 0x34
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f008 faac 	bl	800992c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013d4:	4b45      	ldr	r3, [pc, #276]	@ (80014ec <MX_TIM1_Init+0x158>)
 80013d6:	4a46      	ldr	r2, [pc, #280]	@ (80014f0 <MX_TIM1_Init+0x15c>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80013da:	4b44      	ldr	r3, [pc, #272]	@ (80014ec <MX_TIM1_Init+0x158>)
 80013dc:	22a9      	movs	r2, #169	@ 0xa9
 80013de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b42      	ldr	r3, [pc, #264]	@ (80014ec <MX_TIM1_Init+0x158>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80013e6:	4b41      	ldr	r3, [pc, #260]	@ (80014ec <MX_TIM1_Init+0x158>)
 80013e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	4b3f      	ldr	r3, [pc, #252]	@ (80014ec <MX_TIM1_Init+0x158>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f4:	4b3d      	ldr	r3, [pc, #244]	@ (80014ec <MX_TIM1_Init+0x158>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fa:	4b3c      	ldr	r3, [pc, #240]	@ (80014ec <MX_TIM1_Init+0x158>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001400:	483a      	ldr	r0, [pc, #232]	@ (80014ec <MX_TIM1_Init+0x158>)
 8001402:	f005 f8cb 	bl	800659c <HAL_TIM_Base_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800140c:	f000 fcd8 	bl	8001dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001414:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001416:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800141a:	4619      	mov	r1, r3
 800141c:	4833      	ldr	r0, [pc, #204]	@ (80014ec <MX_TIM1_Init+0x158>)
 800141e:	f005 ffc1 	bl	80073a4 <HAL_TIM_ConfigClockSource>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001428:	f000 fcca 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800142c:	482f      	ldr	r0, [pc, #188]	@ (80014ec <MX_TIM1_Init+0x158>)
 800142e:	f005 fa01 	bl	8006834 <HAL_TIM_PWM_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001438:	f000 fcc2 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001448:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800144c:	4619      	mov	r1, r3
 800144e:	4827      	ldr	r0, [pc, #156]	@ (80014ec <MX_TIM1_Init+0x158>)
 8001450:	f006 fe2e 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800145a:	f000 fcb1 	bl	8001dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145e:	2360      	movs	r3, #96	@ 0x60
 8001460:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001466:	2300      	movs	r3, #0
 8001468:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800146a:	2300      	movs	r3, #0
 800146c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800146e:	2304      	movs	r3, #4
 8001470:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800147e:	2200      	movs	r2, #0
 8001480:	4619      	mov	r1, r3
 8001482:	481a      	ldr	r0, [pc, #104]	@ (80014ec <MX_TIM1_Init+0x158>)
 8001484:	f005 fe7a 	bl	800717c <HAL_TIM_PWM_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800148e:	f000 fc97 	bl	8001dc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014c2:	2300      	movs	r3, #0
 80014c4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	4619      	mov	r1, r3
 80014ce:	4807      	ldr	r0, [pc, #28]	@ (80014ec <MX_TIM1_Init+0x158>)
 80014d0:	f006 fe84 	bl	80081dc <HAL_TIMEx_ConfigBreakDeadTime>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80014da:	f000 fc71 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014de:	4803      	ldr	r0, [pc, #12]	@ (80014ec <MX_TIM1_Init+0x158>)
 80014e0:	f001 f9ca 	bl	8002878 <HAL_TIM_MspPostInit>

}
 80014e4:	bf00      	nop
 80014e6:	3770      	adds	r7, #112	@ 0x70
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000010c 	.word	0x2000010c
 80014f0:	40012c00 	.word	0x40012c00

080014f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001512:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <MX_TIM3_Init+0x94>)
 8001514:	4a1d      	ldr	r2, [pc, #116]	@ (800158c <MX_TIM3_Init+0x98>)
 8001516:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001518:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <MX_TIM3_Init+0x94>)
 800151a:	22a9      	movs	r2, #169	@ 0xa9
 800151c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <MX_TIM3_Init+0x94>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001524:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <MX_TIM3_Init+0x94>)
 8001526:	2263      	movs	r2, #99	@ 0x63
 8001528:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152a:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <MX_TIM3_Init+0x94>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001530:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <MX_TIM3_Init+0x94>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001536:	4814      	ldr	r0, [pc, #80]	@ (8001588 <MX_TIM3_Init+0x94>)
 8001538:	f005 f830 	bl	800659c <HAL_TIM_Base_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001542:	f000 fc3d 	bl	8001dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001546:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4619      	mov	r1, r3
 8001552:	480d      	ldr	r0, [pc, #52]	@ (8001588 <MX_TIM3_Init+0x94>)
 8001554:	f005 ff26 	bl	80073a4 <HAL_TIM_ConfigClockSource>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800155e:	f000 fc2f 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4806      	ldr	r0, [pc, #24]	@ (8001588 <MX_TIM3_Init+0x94>)
 8001570:	f006 fd9e 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800157a:	f000 fc21 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200001d8 	.word	0x200001d8
 800158c:	40000400 	.word	0x40000400

08001590 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08c      	sub	sp, #48	@ 0x30
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	2224      	movs	r2, #36	@ 0x24
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f008 f9c4 	bl	800992c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a4:	463b      	mov	r3, r7
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015ae:	4b21      	ldr	r3, [pc, #132]	@ (8001634 <MX_TIM4_Init+0xa4>)
 80015b0:	4a21      	ldr	r2, [pc, #132]	@ (8001638 <MX_TIM4_Init+0xa8>)
 80015b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <MX_TIM4_Init+0xa4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <MX_TIM4_Init+0xa4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <MX_TIM4_Init+0xa4>)
 80015c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <MX_TIM4_Init+0xa4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <MX_TIM4_Init+0xa4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015d4:	2303      	movs	r3, #3
 80015d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015dc:	2301      	movs	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015ec:	2301      	movs	r3, #1
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	4619      	mov	r1, r3
 80015fe:	480d      	ldr	r0, [pc, #52]	@ (8001634 <MX_TIM4_Init+0xa4>)
 8001600:	f005 fb00 	bl	8006c04 <HAL_TIM_Encoder_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800160a:	f000 fbd9 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001616:	463b      	mov	r3, r7
 8001618:	4619      	mov	r1, r3
 800161a:	4806      	ldr	r0, [pc, #24]	@ (8001634 <MX_TIM4_Init+0xa4>)
 800161c:	f006 fd48 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001626:	f000 fbcb 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	3730      	adds	r7, #48	@ 0x30
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200002a4 	.word	0x200002a4
 8001638:	40000800 	.word	0x40000800

0800163c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <MX_TIM16_Init+0x58>)
 8001642:	4a15      	ldr	r2, [pc, #84]	@ (8001698 <MX_TIM16_Init+0x5c>)
 8001644:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001646:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <MX_TIM16_Init+0x58>)
 8001648:	22a9      	movs	r2, #169	@ 0xa9
 800164a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <MX_TIM16_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <MX_TIM16_Init+0x58>)
 8001654:	f240 4279 	movw	r2, #1145	@ 0x479
 8001658:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <MX_TIM16_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <MX_TIM16_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001666:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <MX_TIM16_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800166c:	4809      	ldr	r0, [pc, #36]	@ (8001694 <MX_TIM16_Init+0x58>)
 800166e:	f004 ff95 	bl	800659c <HAL_TIM_Base_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001678:	f000 fba2 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800167c:	2108      	movs	r1, #8
 800167e:	4805      	ldr	r0, [pc, #20]	@ (8001694 <MX_TIM16_Init+0x58>)
 8001680:	f005 fa58 	bl	8006b34 <HAL_TIM_OnePulse_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800168a:	f000 fb99 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000370 	.word	0x20000370
 8001698:	40014400 	.word	0x40014400

0800169c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016a0:	4b23      	ldr	r3, [pc, #140]	@ (8001730 <MX_USART2_UART_Init+0x94>)
 80016a2:	4a24      	ldr	r2, [pc, #144]	@ (8001734 <MX_USART2_UART_Init+0x98>)
 80016a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80016a6:	4b22      	ldr	r3, [pc, #136]	@ (8001730 <MX_USART2_UART_Init+0x94>)
 80016a8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80016ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80016ae:	4b20      	ldr	r3, [pc, #128]	@ (8001730 <MX_USART2_UART_Init+0x94>)
 80016b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016b4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <MX_USART2_UART_Init+0x94>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <MX_USART2_UART_Init+0x94>)
 80016be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <MX_USART2_UART_Init+0x94>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <MX_USART2_UART_Init+0x94>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <MX_USART2_UART_Init+0x94>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d6:	4b16      	ldr	r3, [pc, #88]	@ (8001730 <MX_USART2_UART_Init+0x94>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016dc:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <MX_USART2_UART_Init+0x94>)
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e2:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <MX_USART2_UART_Init+0x94>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016e8:	4811      	ldr	r0, [pc, #68]	@ (8001730 <MX_USART2_UART_Init+0x94>)
 80016ea:	f006 fe5b 	bl	80083a4 <HAL_UART_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80016f4:	f000 fb64 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f8:	2100      	movs	r1, #0
 80016fa:	480d      	ldr	r0, [pc, #52]	@ (8001730 <MX_USART2_UART_Init+0x94>)
 80016fc:	f008 f84b 	bl	8009796 <HAL_UARTEx_SetTxFifoThreshold>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001706:	f000 fb5b 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800170a:	2100      	movs	r1, #0
 800170c:	4808      	ldr	r0, [pc, #32]	@ (8001730 <MX_USART2_UART_Init+0x94>)
 800170e:	f008 f880 	bl	8009812 <HAL_UARTEx_SetRxFifoThreshold>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001718:	f000 fb52 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	@ (8001730 <MX_USART2_UART_Init+0x94>)
 800171e:	f008 f801 	bl	8009724 <HAL_UARTEx_DisableFifoMode>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001728:	f000 fb4a 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	2000043c 	.word	0x2000043c
 8001734:	40004400 	.word	0x40004400

08001738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <MX_DMA_Init+0x70>)
 8001740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001742:	4a19      	ldr	r2, [pc, #100]	@ (80017a8 <MX_DMA_Init+0x70>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6493      	str	r3, [r2, #72]	@ 0x48
 800174a:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <MX_DMA_Init+0x70>)
 800174c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <MX_DMA_Init+0x70>)
 8001758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800175a:	4a13      	ldr	r2, [pc, #76]	@ (80017a8 <MX_DMA_Init+0x70>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6493      	str	r3, [r2, #72]	@ 0x48
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <MX_DMA_Init+0x70>)
 8001764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	200b      	movs	r0, #11
 8001774:	f003 f9b1 	bl	8004ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001778:	200b      	movs	r0, #11
 800177a:	f003 f9c8 	bl	8004b0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	200c      	movs	r0, #12
 8001784:	f003 f9a9 	bl	8004ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001788:	200c      	movs	r0, #12
 800178a:	f003 f9c0 	bl	8004b0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	200d      	movs	r0, #13
 8001794:	f003 f9a1 	bl	8004ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001798:	200d      	movs	r0, #13
 800179a:	f003 f9b8 	bl	8004b0e <HAL_NVIC_EnableIRQ>

}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000

080017ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	@ 0x28
 80017b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	4b66      	ldr	r3, [pc, #408]	@ (800195c <MX_GPIO_Init+0x1b0>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	4a65      	ldr	r2, [pc, #404]	@ (800195c <MX_GPIO_Init+0x1b0>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ce:	4b63      	ldr	r3, [pc, #396]	@ (800195c <MX_GPIO_Init+0x1b0>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017da:	4b60      	ldr	r3, [pc, #384]	@ (800195c <MX_GPIO_Init+0x1b0>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	4a5f      	ldr	r2, [pc, #380]	@ (800195c <MX_GPIO_Init+0x1b0>)
 80017e0:	f043 0320 	orr.w	r3, r3, #32
 80017e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e6:	4b5d      	ldr	r3, [pc, #372]	@ (800195c <MX_GPIO_Init+0x1b0>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	4b5a      	ldr	r3, [pc, #360]	@ (800195c <MX_GPIO_Init+0x1b0>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	4a59      	ldr	r2, [pc, #356]	@ (800195c <MX_GPIO_Init+0x1b0>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fe:	4b57      	ldr	r3, [pc, #348]	@ (800195c <MX_GPIO_Init+0x1b0>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	4b54      	ldr	r3, [pc, #336]	@ (800195c <MX_GPIO_Init+0x1b0>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	4a53      	ldr	r2, [pc, #332]	@ (800195c <MX_GPIO_Init+0x1b0>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001816:	4b51      	ldr	r3, [pc, #324]	@ (800195c <MX_GPIO_Init+0x1b0>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001828:	484d      	ldr	r0, [pc, #308]	@ (8001960 <MX_GPIO_Init+0x1b4>)
 800182a:	f003 fe57 	bl	80054dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001838:	f003 fe50 	bl	80054dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	f240 4116 	movw	r1, #1046	@ 0x416
 8001842:	4848      	ldr	r0, [pc, #288]	@ (8001964 <MX_GPIO_Init+0x1b8>)
 8001844:	f003 fe4a 	bl	80054dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001848:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800184c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800184e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	4840      	ldr	r0, [pc, #256]	@ (8001960 <MX_GPIO_Init+0x1b4>)
 8001860:	f003 fca2 	bl	80051a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 8001864:	2302      	movs	r3, #2
 8001866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4839      	ldr	r0, [pc, #228]	@ (8001960 <MX_GPIO_Init+0x1b4>)
 800187c:	f003 fc94 	bl	80051a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 8001880:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189c:	f003 fc84 	bl	80051a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 80018a0:	23f0      	movs	r3, #240	@ 0xf0
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	482b      	ldr	r0, [pc, #172]	@ (8001960 <MX_GPIO_Init+0x1b4>)
 80018b4:	f003 fc78 	bl	80051a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 80018b8:	f240 4316 	movw	r3, #1046	@ 0x416
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4824      	ldr	r0, [pc, #144]	@ (8001964 <MX_GPIO_Init+0x1b8>)
 80018d2:	f003 fc69 	bl	80051a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|Emergency_switch_Pin;
 80018d6:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80018da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	481d      	ldr	r0, [pc, #116]	@ (8001964 <MX_GPIO_Init+0x1b8>)
 80018ee:	f003 fc5b 	bl	80051a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 80018f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	4815      	ldr	r0, [pc, #84]	@ (8001960 <MX_GPIO_Init+0x1b4>)
 800190c:	f003 fc4c 	bl	80051a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 8001910:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001928:	f003 fc3e 	bl	80051a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : joy_switch_1_Pin */
  GPIO_InitStruct.Pin = joy_switch_1_Pin;
 800192c:	2320      	movs	r3, #32
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(joy_switch_1_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	4809      	ldr	r0, [pc, #36]	@ (8001964 <MX_GPIO_Init+0x1b8>)
 8001940:	f003 fc32 	bl	80051a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2028      	movs	r0, #40	@ 0x28
 800194a:	f003 f8c6 	bl	8004ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800194e:	2028      	movs	r0, #40	@ 0x28
 8001950:	f003 f8dd 	bl	8004b0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001954:	bf00      	nop
 8001956:	3728      	adds	r7, #40	@ 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	48000800 	.word	0x48000800
 8001964:	48000400 	.word	0x48000400

08001968 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af02      	add	r7, sp, #8
 8001970:	60f8      	str	r0, [r7, #12]
	if(htim == &htim3){
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4aa3      	ldr	r2, [pc, #652]	@ (8001c04 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	f040 813f 	bne.w	8001bfa <HAL_TIM_PeriodElapsedCallback+0x292>
		Update_qei(&encoder, &htim4);
 800197c:	49a2      	ldr	r1, [pc, #648]	@ (8001c08 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800197e:	48a3      	ldr	r0, [pc, #652]	@ (8001c0c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001980:	f000 fc6e 	bl	8002260 <Update_qei>
		Update_adc(&current_sensor);
 8001984:	48a2      	ldr	r0, [pc, #648]	@ (8001c10 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001986:	f7ff fabc 	bl	8000f02 <Update_adc>
		if((homing == 0) && (encoder.mm > 500 || encoder.mm < 0)){
 800198a:	4ba2      	ldr	r3, [pc, #648]	@ (8001c14 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d11a      	bne.n	80019c8 <HAL_TIM_PeriodElapsedCallback+0x60>
 8001992:	4b9e      	ldr	r3, [pc, #632]	@ (8001c0c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001994:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001998:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8001c18 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 800199c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	dc07      	bgt.n	80019b6 <HAL_TIM_PeriodElapsedCallback+0x4e>
 80019a6:	4b99      	ldr	r3, [pc, #612]	@ (8001c0c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80019a8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80019ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b4:	d508      	bpl.n	80019c8 <HAL_TIM_PeriodElapsedCallback+0x60>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 80019b6:	2300      	movs	r3, #0
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2302      	movs	r3, #2
 80019bc:	4a97      	ldr	r2, [pc, #604]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80019be:	2100      	movs	r1, #0
 80019c0:	4897      	ldr	r0, [pc, #604]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80019c2:	f000 fb71 	bl	80020a8 <Update_pwm>
 80019c6:	e118      	b.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x292>
		}
		else if(mode == 0 || mode == 1){
 80019c8:	4b96      	ldr	r3, [pc, #600]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_TIM_PeriodElapsedCallback+0x70>
 80019d0:	4b94      	ldr	r3, [pc, #592]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d13f      	bne.n	8001a58 <HAL_TIM_PeriodElapsedCallback+0xf0>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, v_output);
 80019d8:	4b93      	ldr	r3, [pc, #588]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2302      	movs	r3, #2
 80019e0:	4a8e      	ldr	r2, [pc, #568]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80019e2:	2100      	movs	r1, #0
 80019e4:	488e      	ldr	r0, [pc, #568]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80019e6:	f000 fb5f 	bl	80020a8 <Update_pwm>
			if(mode == 0){ setpoint = 0;} // If mode == 0 : set point from base system
 80019ea:	4b8e      	ldr	r3, [pc, #568]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d104      	bne.n	80019fc <HAL_TIM_PeriodElapsedCallback+0x94>
 80019f2:	4b8e      	ldr	r3, [pc, #568]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e007      	b.n	8001a0c <HAL_TIM_PeriodElapsedCallback+0xa4>
			else if(mode == 1){setpoint = 1;} // If mode == 1 : set point from joy
 80019fc:	4b89      	ldr	r3, [pc, #548]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d103      	bne.n	8001a0c <HAL_TIM_PeriodElapsedCallback+0xa4>
 8001a04:	4b89      	ldr	r3, [pc, #548]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001a06:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a0a:	601a      	str	r2, [r3, #0]
			Update_velocity_control(test);
 8001a0c:	4b88      	ldr	r3, [pc, #544]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a18:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1c:	f000 f9a0 	bl	8001d60 <Update_velocity_control>
			static uint64_t timestamp = 0;
			if (timestamp == 8){
 8001a20:	4b84      	ldr	r3, [pc, #528]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f1a2 0108 	sub.w	r1, r2, #8
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	d106      	bne.n	8001a3c <HAL_TIM_PeriodElapsedCallback+0xd4>
//				Update_position_control(test);
				timestamp = 0;
 8001a2e:	4981      	ldr	r1, [pc, #516]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	e9c1 2300 	strd	r2, r3, [r1]
			}
			timestamp++;
 8001a3c:	4b7d      	ldr	r3, [pc, #500]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	1c51      	adds	r1, r2, #1
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	f143 0300 	adc.w	r3, r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	4b79      	ldr	r3, [pc, #484]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001a4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001a52:	e9c3 1200 	strd	r1, r2, [r3]
		else if(mode == 0 || mode == 1){
 8001a56:	e0d0      	b.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x292>
		}
		else{
			repeat_cheack++;
 8001a58:	4b77      	ldr	r3, [pc, #476]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f112 0a01 	adds.w	sl, r2, #1
 8001a62:	f143 0b00 	adc.w	fp, r3, #0
 8001a66:	4b74      	ldr	r3, [pc, #464]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001a68:	e9c3 ab00 	strd	sl, fp, [r3]
			// Stop motor if emergency
			if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8001a6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a70:	4872      	ldr	r0, [pc, #456]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001a72:	f003 fd1b 	bl	80054ac <HAL_GPIO_ReadPin>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d112      	bne.n	8001aa2 <HAL_TIM_PeriodElapsedCallback+0x13a>
				repeat_cheack++;
 8001a7c:	4b6e      	ldr	r3, [pc, #440]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f112 0801 	adds.w	r8, r2, #1
 8001a86:	f143 0900 	adc.w	r9, r3, #0
 8001a8a:	4b6b      	ldr	r3, [pc, #428]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001a8c:	e9c3 8900 	strd	r8, r9, [r3]
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001a90:	2300      	movs	r3, #0
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2302      	movs	r3, #2
 8001a96:	4a61      	ldr	r2, [pc, #388]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4861      	ldr	r0, [pc, #388]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001a9c:	f000 fb04 	bl	80020a8 <Update_pwm>
					homing_ts++;
				}
			}
		}
	}
}
 8001aa0:	e0ab      	b.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x292>
			else if(wait_command){
 8001aa2:	4b67      	ldr	r3, [pc, #412]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d038      	beq.n	8001b1c <HAL_TIM_PeriodElapsedCallback+0x1b4>
				Update_joy(&joy);
 8001aaa:	4866      	ldr	r0, [pc, #408]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001aac:	f7ff fa62 	bl	8000f74 <Update_joy>
				if(!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 8001ab0:	4b64      	ldr	r3, [pc, #400]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d115      	bne.n	8001ae4 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8001ab8:	4b62      	ldr	r3, [pc, #392]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001aba:	785b      	ldrb	r3, [r3, #1]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d011      	beq.n	8001ae4 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8001ac0:	4b60      	ldr	r3, [pc, #384]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001ac2:	789b      	ldrb	r3, [r3, #2]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00d      	beq.n	8001ae4 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8001ac8:	4b5e      	ldr	r3, [pc, #376]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001aca:	78db      	ldrb	r3, [r3, #3]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d009      	beq.n	8001ae4 <HAL_TIM_PeriodElapsedCallback+0x17c>
					mode = 0;
 8001ad0:	4b54      	ldr	r3, [pc, #336]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
					is_home = 0;
 8001ad6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c48 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
					wait_command = 0;
 8001adc:	4b58      	ldr	r3, [pc, #352]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	e08a      	b.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x292>
				else if(joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 8001ae4:	4b57      	ldr	r3, [pc, #348]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 8086 	beq.w	8001bfa <HAL_TIM_PeriodElapsedCallback+0x292>
 8001aee:	4b55      	ldr	r3, [pc, #340]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001af0:	785b      	ldrb	r3, [r3, #1]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 8081 	bne.w	8001bfa <HAL_TIM_PeriodElapsedCallback+0x292>
 8001af8:	4b52      	ldr	r3, [pc, #328]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001afa:	789b      	ldrb	r3, [r3, #2]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d07c      	beq.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x292>
 8001b00:	4b50      	ldr	r3, [pc, #320]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001b02:	78db      	ldrb	r3, [r3, #3]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d078      	beq.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x292>
					mode = 1;
 8001b08:	4b46      	ldr	r3, [pc, #280]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
					is_home = 0;
 8001b0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c48 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
					wait_command = 0;
 8001b14:	4b4a      	ldr	r3, [pc, #296]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
}
 8001b1a:	e06e      	b.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x292>
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8001b1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b20:	4846      	ldr	r0, [pc, #280]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b22:	f003 fcc3 	bl	80054ac <HAL_GPIO_ReadPin>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d066      	beq.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x292>
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2302      	movs	r3, #2
 8001b32:	4a3a      	ldr	r2, [pc, #232]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b34:	2100      	movs	r1, #0
 8001b36:	483a      	ldr	r0, [pc, #232]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001b38:	f000 fab6 	bl	80020a8 <Update_pwm>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b42:	4836      	ldr	r0, [pc, #216]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b44:	f003 fcca 	bl	80054dc <HAL_GPIO_WritePin>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6)){
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4834      	ldr	r0, [pc, #208]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b4c:	f003 fcae 	bl	80054ac <HAL_GPIO_ReadPin>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d010      	beq.n	8001b78 <HAL_TIM_PeriodElapsedCallback+0x210>
					if(homing_first == 1){
 8001b56:	4b3d      	ldr	r3, [pc, #244]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d14d      	bne.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x292>
						homing = 1;
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c14 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -100);
 8001b64:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b6e:	2100      	movs	r1, #0
 8001b70:	482b      	ldr	r0, [pc, #172]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001b72:	f000 fa99 	bl	80020a8 <Update_pwm>
}
 8001b76:	e040      	b.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x292>
				else if(homing_first == 0){
 8001b78:	4b34      	ldr	r3, [pc, #208]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d13c      	bne.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x292>
					if (homing_ts == 8000){
 8001b80:	4b33      	ldr	r3, [pc, #204]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b86:	f5a2 51fa 	sub.w	r1, r2, #8000	@ 0x1f40
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_TIM_PeriodElapsedCallback+0x23e>
						homing_second = 1;
 8001b8e:	4b31      	ldr	r3, [pc, #196]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001b94:	2300      	movs	r3, #0
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2302      	movs	r3, #2
 8001b9a:	4a20      	ldr	r2, [pc, #128]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4820      	ldr	r0, [pc, #128]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001ba0:	f000 fa82 	bl	80020a8 <Update_pwm>
 8001ba4:	e01f      	b.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0x27e>
					}else if(homing_ts == 18000){
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	492a      	ldr	r1, [pc, #168]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001bae:	4411      	add	r1, r2
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	d109      	bne.n	8001bc8 <HAL_TIM_PeriodElapsedCallback+0x260>
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -80);
 8001bb4:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2302      	movs	r3, #2
 8001bbc:	4a17      	ldr	r2, [pc, #92]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4817      	ldr	r0, [pc, #92]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001bc2:	f000 fa71 	bl	80020a8 <Update_pwm>
 8001bc6:	e00e      	b.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0x27e>
					}else if(homing_ts == 4000){
 8001bc8:	4b21      	ldr	r3, [pc, #132]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	f5a2 617a 	sub.w	r1, r2, #4000	@ 0xfa0
 8001bd2:	430b      	orrs	r3, r1
 8001bd4:	d107      	bne.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0x27e>
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 200);
 8001bd6:	23c8      	movs	r3, #200	@ 0xc8
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2302      	movs	r3, #2
 8001bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001bde:	2100      	movs	r1, #0
 8001be0:	480f      	ldr	r0, [pc, #60]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001be2:	f000 fa61 	bl	80020a8 <Update_pwm>
					homing_ts++;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	1c54      	adds	r4, r2, #1
 8001bee:	f143 0500 	adc.w	r5, r3, #0
 8001bf2:	4b17      	ldr	r3, [pc, #92]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001bf4:	e9c3 4500 	strd	r4, r5, [r3]
}
 8001bf8:	e7ff      	b.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x292>
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c04:	200001d8 	.word	0x200001d8
 8001c08:	200002a4 	.word	0x200002a4
 8001c0c:	200006c8 	.word	0x200006c8
 8001c10:	200005f8 	.word	0x200005f8
 8001c14:	200005f1 	.word	0x200005f1
 8001c18:	43fa0000 	.word	0x43fa0000
 8001c1c:	48000800 	.word	0x48000800
 8001c20:	2000010c 	.word	0x2000010c
 8001c24:	200005f4 	.word	0x200005f4
 8001c28:	20000734 	.word	0x20000734
 8001c2c:	200005d8 	.word	0x200005d8
 8001c30:	200005d4 	.word	0x200005d4
 8001c34:	20000758 	.word	0x20000758
 8001c38:	200005c8 	.word	0x200005c8
 8001c3c:	48000400 	.word	0x48000400
 8001c40:	200005f3 	.word	0x200005f3
 8001c44:	200005dc 	.word	0x200005dc
 8001c48:	200005f2 	.word	0x200005f2
 8001c4c:	20000001 	.word	0x20000001
 8001c50:	200005e8 	.word	0x200005e8
 8001c54:	200005f0 	.word	0x200005f0
 8001c58:	ffffb9b0 	.word	0xffffb9b0

08001c5c <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15){
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c6c:	d10d      	bne.n	8001c8a <HAL_GPIO_EXTI_Callback+0x2e>
		// Emergency switch interrupted
		// Stop motor
		Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2302      	movs	r3, #2
 8001c74:	4a2f      	ldr	r2, [pc, #188]	@ (8001d34 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c76:	2100      	movs	r1, #0
 8001c78:	482f      	ldr	r0, [pc, #188]	@ (8001d38 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001c7a:	f000 fa15 	bl	80020a8 <Update_pwm>
		// Emergency light enable
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c84:	482b      	ldr	r0, [pc, #172]	@ (8001d34 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c86:	f003 fc29 	bl	80054dc <HAL_GPIO_WritePin>
//		mode = 2;
	}
	if(GPIO_Pin == GPIO_PIN_12){
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c90:	d14d      	bne.n	8001d2e <HAL_GPIO_EXTI_Callback+0xd2>
		// Proximity interrupted
		limitswitch_test++;
 8001c92:	4b2a      	ldr	r3, [pc, #168]	@ (8001d3c <HAL_GPIO_EXTI_Callback+0xe0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	3301      	adds	r3, #1
 8001c98:	4a28      	ldr	r2, [pc, #160]	@ (8001d3c <HAL_GPIO_EXTI_Callback+0xe0>)
 8001c9a:	6013      	str	r3, [r2, #0]
		if(homing == 1){
 8001c9c:	4b28      	ldr	r3, [pc, #160]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d135      	bne.n	8001d10 <HAL_GPIO_EXTI_Callback+0xb4>
			// If homing
			if(homing_first == 1){
 8001ca4:	4b27      	ldr	r3, [pc, #156]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d10b      	bne.n	8001cc4 <HAL_GPIO_EXTI_Callback+0x68>
				// First time stop
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001cac:	2300      	movs	r3, #0
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	4a20      	ldr	r2, [pc, #128]	@ (8001d34 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4820      	ldr	r0, [pc, #128]	@ (8001d38 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001cb8:	f000 f9f6 	bl	80020a8 <Update_pwm>
				homing_first = 0;
 8001cbc:	4b21      	ldr	r3, [pc, #132]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
				return;
 8001cc2:	e034      	b.n	8001d2e <HAL_GPIO_EXTI_Callback+0xd2>
			}
			else if(homing_second == 1){
 8001cc4:	4b20      	ldr	r3, [pc, #128]	@ (8001d48 <HAL_GPIO_EXTI_Callback+0xec>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d130      	bne.n	8001d2e <HAL_GPIO_EXTI_Callback+0xd2>
				// Second time stop and reset variables.
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	4a18      	ldr	r2, [pc, #96]	@ (8001d34 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4818      	ldr	r0, [pc, #96]	@ (8001d38 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001cd8:	f000 f9e6 	bl	80020a8 <Update_pwm>
				homing_ts = 0;
 8001cdc:	491b      	ldr	r1, [pc, #108]	@ (8001d4c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	e9c1 2300 	strd	r2, r3, [r1]
				is_home = 1;
 8001cea:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
				homing_second = 0;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <HAL_GPIO_EXTI_Callback+0xec>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
				homing_first = 1;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
				homing = 0;
 8001cfc:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
				wait_command = 1;
 8001d02:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
				Reset_qei(&encoder);
 8001d08:	4813      	ldr	r0, [pc, #76]	@ (8001d58 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d0a:	f000 fc1d 	bl	8002548 <Reset_qei>
 8001d0e:	e00e      	b.n	8001d2e <HAL_GPIO_EXTI_Callback+0xd2>
			}
		}
		else{
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001d10:	2300      	movs	r3, #0
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	2302      	movs	r3, #2
 8001d16:	4a07      	ldr	r2, [pc, #28]	@ (8001d34 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4807      	ldr	r0, [pc, #28]	@ (8001d38 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001d1c:	f000 f9c4 	bl	80020a8 <Update_pwm>
			mode = 2;
 8001d20:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <HAL_GPIO_EXTI_Callback+0x100>)
 8001d22:	2202      	movs	r2, #2
 8001d24:	701a      	strb	r2, [r3, #0]
			homing_first = 0;
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
			return;
 8001d2c:	bf00      	nop
		}
	}
}
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	48000800 	.word	0x48000800
 8001d38:	2000010c 	.word	0x2000010c
 8001d3c:	200005d0 	.word	0x200005d0
 8001d40:	200005f1 	.word	0x200005f1
 8001d44:	20000001 	.word	0x20000001
 8001d48:	200005f0 	.word	0x200005f0
 8001d4c:	200005e8 	.word	0x200005e8
 8001d50:	200005f2 	.word	0x200005f2
 8001d54:	200005f3 	.word	0x200005f3
 8001d58:	200006c8 	.word	0x200006c8
 8001d5c:	200005f4 	.word	0x200005f4

08001d60 <Update_velocity_control>:
// Torque control update
void Update_torque_control(float32_t s){

}
// Velocity control update
void Update_velocity_control(float32_t s){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	ed87 0a01 	vstr	s0, [r7, #4]
	//input is pulse unit
	v_e = s - Get_mmps(&encoder);
 8001d6a:	480f      	ldr	r0, [pc, #60]	@ (8001da8 <Update_velocity_control+0x48>)
 8001d6c:	f000 fc1d 	bl	80025aa <Get_mmps>
 8001d70:	eeb0 7a40 	vmov.f32	s14, s0
 8001d74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <Update_velocity_control+0x4c>)
 8001d7e:	edc3 7a00 	vstr	s15, [r3]
	v_output = Update_pid(&v_pid, v_e, 900.0, 1000.0);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <Update_velocity_control+0x4c>)
 8001d84:	edd3 7a00 	vldr	s15, [r3]
 8001d88:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8001db0 <Update_velocity_control+0x50>
 8001d8c:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001db4 <Update_velocity_control+0x54>
 8001d90:	eeb0 0a67 	vmov.f32	s0, s15
 8001d94:	4808      	ldr	r0, [pc, #32]	@ (8001db8 <Update_velocity_control+0x58>)
 8001d96:	f000 f83f 	bl	8001e18 <Update_pid>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a07      	ldr	r2, [pc, #28]	@ (8001dbc <Update_velocity_control+0x5c>)
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200006c8 	.word	0x200006c8
 8001dac:	20000730 	.word	0x20000730
 8001db0:	447a0000 	.word	0x447a0000
 8001db4:	44610000 	.word	0x44610000
 8001db8:	20000710 	.word	0x20000710
 8001dbc:	20000734 	.word	0x20000734

08001dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc4:	b672      	cpsid	i
}
 8001dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <Error_Handler+0x8>

08001dcc <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6178      	str	r0, [r7, #20]
 8001dd4:	ed87 0a04 	vstr	s0, [r7, #16]
 8001dd8:	edc7 0a03 	vstr	s1, [r7, #12]
 8001ddc:	ed87 1a02 	vstr	s2, [r7, #8]
 8001de0:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 8001dfc:	6979      	ldr	r1, [r7, #20]
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001e0a:	bf00      	nop
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 8001e18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e1c:	b08a      	sub	sp, #40	@ 0x28
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e26:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e2a:	ed87 1a00 	vstr	s2, [r7]
//	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e40:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 8001e44:	4b96      	ldr	r3, [pc, #600]	@ (80020a0 <Update_pid+0x288>)
 8001e46:	edd3 7a00 	vldr	s15, [r3]
 8001e4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e58:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e66:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt / 2.0)*(e_n + e_n_1)) + y_n_1;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7a:	ee17 0a90 	vmov	r0, s15
 8001e7e:	f7fe fb2f 	bl	80004e0 <__aeabi_f2d>
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e8a:	f7fe fcab 	bl	80007e4 <__aeabi_ddiv>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4690      	mov	r8, r2
 8001e94:	4699      	mov	r9, r3
 8001e96:	4b82      	ldr	r3, [pc, #520]	@ (80020a0 <Update_pid+0x288>)
 8001e98:	ed93 7a00 	vldr	s14, [r3]
 8001e9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea4:	ee17 0a90 	vmov	r0, s15
 8001ea8:	f7fe fb1a 	bl	80004e0 <__aeabi_f2d>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4640      	mov	r0, r8
 8001eb2:	4649      	mov	r1, r9
 8001eb4:	f7fe fb6c 	bl	8000590 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4690      	mov	r8, r2
 8001ebe:	4699      	mov	r9, r3
 8001ec0:	4b78      	ldr	r3, [pc, #480]	@ (80020a4 <Update_pid+0x28c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fb0b 	bl	80004e0 <__aeabi_f2d>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4640      	mov	r0, r8
 8001ed0:	4649      	mov	r1, r9
 8001ed2:	f7fe f9a7 	bl	8000224 <__adddf3>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7fe fe39 	bl	8000b54 <__aeabi_d2f>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	623b      	str	r3, [r7, #32]

	if(pid -> ki == 0){
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef4:	d102      	bne.n	8001efc <Update_pid+0xe4>
		i_term = 0;
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0a:	d102      	bne.n	8001f12 <Update_pid+0xfa>
		d_term = 0;
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 8001f12:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f16:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f26:	ee17 0a90 	vmov	r0, s15
 8001f2a:	f7fe fad9 	bl	80004e0 <__aeabi_f2d>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	68f9      	ldr	r1, [r7, #12]
 8001f34:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t is_sat = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe facc 	bl	80004e0 <__aeabi_f2d>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4640      	mov	r0, r8
 8001f4e:	4649      	mov	r1, r9
 8001f50:	f7fe fdae 	bl	8000ab0 <__aeabi_dcmpgt>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <Update_pid+0x148>
		is_sat = 1;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	77fb      	strb	r3, [r7, #31]
 8001f5e:	e016      	b.n	8001f8e <Update_pid+0x176>
	}
	else if(pid -> y_n < -(pid_sat)){
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001f66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f6a:	eef1 7a67 	vneg.f32	s15, s15
 8001f6e:	ee17 3a90 	vmov	r3, s15
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fab4 	bl	80004e0 <__aeabi_f2d>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4640      	mov	r0, r8
 8001f7e:	4649      	mov	r1, r9
 8001f80:	f7fe fd78 	bl	8000a74 <__aeabi_dcmplt>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <Update_pid+0x176>
		is_sat = 1;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 8001f8e:	69b8      	ldr	r0, [r7, #24]
 8001f90:	f7fe faa6 	bl	80004e0 <__aeabi_f2d>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f9a:	f7fe faf9 	bl	8000590 <__aeabi_dmul>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4690      	mov	r8, r2
 8001fa4:	4699      	mov	r9, r3
 8001fa6:	69b8      	ldr	r0, [r7, #24]
 8001fa8:	f7fe fa9a 	bl	80004e0 <__aeabi_f2d>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fb2:	f7fe faed 	bl	8000590 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4614      	mov	r4, r2
 8001fbc:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001fc0:	4622      	mov	r2, r4
 8001fc2:	462b      	mov	r3, r5
 8001fc4:	4640      	mov	r0, r8
 8001fc6:	4649      	mov	r1, r9
 8001fc8:	f7fe fd4a 	bl	8000a60 <__aeabi_dcmpeq>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d011      	beq.n	8001ff6 <Update_pid+0x1de>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 8001fd2:	7ffb      	ldrb	r3, [r7, #31]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d10e      	bne.n	8001ff6 <Update_pid+0x1de>
			pid -> y_n = p_term + d_term;
 8001fd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fdc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe4:	ee17 0a90 	vmov	r0, s15
 8001fe8:	f7fe fa7a 	bl	80004e0 <__aeabi_f2d>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	68f9      	ldr	r1, [r7, #12]
 8001ff2:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	// Plant saturation
	if(pid -> y_n > plant_sat){
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001ffc:	6838      	ldr	r0, [r7, #0]
 8001ffe:	f7fe fa6f 	bl	80004e0 <__aeabi_f2d>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4620      	mov	r0, r4
 8002008:	4629      	mov	r1, r5
 800200a:	f7fe fd51 	bl	8000ab0 <__aeabi_dcmpgt>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <Update_pid+0x20e>
		pid -> y_n = plant_sat;
 8002014:	6838      	ldr	r0, [r7, #0]
 8002016:	f7fe fa63 	bl	80004e0 <__aeabi_f2d>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	68f9      	ldr	r1, [r7, #12]
 8002020:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002024:	e022      	b.n	800206c <Update_pid+0x254>
	}
	else if(pid -> y_n < -(plant_sat)){
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800202c:	edd7 7a00 	vldr	s15, [r7]
 8002030:	eef1 7a67 	vneg.f32	s15, s15
 8002034:	ee17 3a90 	vmov	r3, s15
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fa51 	bl	80004e0 <__aeabi_f2d>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4620      	mov	r0, r4
 8002044:	4629      	mov	r1, r5
 8002046:	f7fe fd15 	bl	8000a74 <__aeabi_dcmplt>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00d      	beq.n	800206c <Update_pid+0x254>
		pid -> y_n = (-(plant_sat));
 8002050:	edd7 7a00 	vldr	s15, [r7]
 8002054:	eef1 7a67 	vneg.f32	s15, s15
 8002058:	ee17 3a90 	vmov	r3, s15
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fa3f 	bl	80004e0 <__aeabi_f2d>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	68f9      	ldr	r1, [r7, #12]
 8002068:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f7fe fd6d 	bl	8000b54 <__aeabi_d2f>
 800207a:	4603      	mov	r3, r0
 800207c:	4a09      	ldr	r2, [pc, #36]	@ (80020a4 <Update_pid+0x28c>)
 800207e:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 8002080:	4a07      	ldr	r2, [pc, #28]	@ (80020a0 <Update_pid+0x288>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	6013      	str	r3, [r2, #0]
	return pid -> y_n;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f7fe fd18 	bl	8000ac4 <__aeabi_d2iz>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3728      	adds	r7, #40	@ 0x28
 800209a:	46bd      	mov	sp, r7
 800209c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020a0:	20000760 	.word	0x20000760
 80020a4:	20000764 	.word	0x20000764

080020a8 <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 80020a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ac:	b08b      	sub	sp, #44	@ 0x2c
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80020b2:	61fa      	str	r2, [r7, #28]
 80020b4:	461a      	mov	r2, r3
 80020b6:	460b      	mov	r3, r1
 80020b8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80020ba:	4613      	mov	r3, r2
 80020bc:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 80020be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d111      	bne.n	80020e8 <Update_pwm+0x40>
 80020c4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020c6:	f7fe f9f9 	bl	80004bc <__aeabi_i2d>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	613a      	str	r2, [r7, #16]
 80020d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	681c      	ldr	r4, [r3, #0]
 80020da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020de:	f7fe fd19 	bl	8000b14 <__aeabi_d2uiz>
 80020e2:	4603      	mov	r3, r0
 80020e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80020e6:	e061      	b.n	80021ac <Update_pwm+0x104>
 80020e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d111      	bne.n	8002112 <Update_pwm+0x6a>
 80020ee:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020f0:	f7fe f9e4 	bl	80004bc <__aeabi_i2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	60ba      	str	r2, [r7, #8]
 80020fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	681c      	ldr	r4, [r3, #0]
 8002104:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002108:	f7fe fd04 	bl	8000b14 <__aeabi_d2uiz>
 800210c:	4603      	mov	r3, r0
 800210e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002110:	e04c      	b.n	80021ac <Update_pwm+0x104>
 8002112:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002114:	2b08      	cmp	r3, #8
 8002116:	d111      	bne.n	800213c <Update_pwm+0x94>
 8002118:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800211a:	f7fe f9cf 	bl	80004bc <__aeabi_i2d>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	603a      	str	r2, [r7, #0]
 8002124:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	681c      	ldr	r4, [r3, #0]
 800212e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002132:	f7fe fcef 	bl	8000b14 <__aeabi_d2uiz>
 8002136:	4603      	mov	r3, r0
 8002138:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800213a:	e037      	b.n	80021ac <Update_pwm+0x104>
 800213c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d110      	bne.n	8002164 <Update_pwm+0xbc>
 8002142:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002144:	f7fe f9ba 	bl	80004bc <__aeabi_i2d>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4615      	mov	r5, r2
 800214e:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	681c      	ldr	r4, [r3, #0]
 8002156:	4628      	mov	r0, r5
 8002158:	4631      	mov	r1, r6
 800215a:	f7fe fcdb 	bl	8000b14 <__aeabi_d2uiz>
 800215e:	4603      	mov	r3, r0
 8002160:	6423      	str	r3, [r4, #64]	@ 0x40
 8002162:	e023      	b.n	80021ac <Update_pwm+0x104>
 8002164:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002166:	2b10      	cmp	r3, #16
 8002168:	d110      	bne.n	800218c <Update_pwm+0xe4>
 800216a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800216c:	f7fe f9a6 	bl	80004bc <__aeabi_i2d>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4692      	mov	sl, r2
 8002176:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	681c      	ldr	r4, [r3, #0]
 800217e:	4650      	mov	r0, sl
 8002180:	4659      	mov	r1, fp
 8002182:	f7fe fcc7 	bl	8000b14 <__aeabi_d2uiz>
 8002186:	4603      	mov	r3, r0
 8002188:	64a3      	str	r3, [r4, #72]	@ 0x48
 800218a:	e00f      	b.n	80021ac <Update_pwm+0x104>
 800218c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800218e:	f7fe f995 	bl	80004bc <__aeabi_i2d>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4690      	mov	r8, r2
 8002198:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	681c      	ldr	r4, [r3, #0]
 80021a0:	4640      	mov	r0, r8
 80021a2:	4649      	mov	r1, r9
 80021a4:	f7fe fcb6 	bl	8000b14 <__aeabi_d2uiz>
 80021a8:	4603      	mov	r3, r0
 80021aa:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 80021ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	da06      	bge.n	80021c0 <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 80021b2:	8c3b      	ldrh	r3, [r7, #32]
 80021b4:	2200      	movs	r2, #0
 80021b6:	4619      	mov	r1, r3
 80021b8:	69f8      	ldr	r0, [r7, #28]
 80021ba:	f003 f98f 	bl	80054dc <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 80021be:	e005      	b.n	80021cc <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 80021c0:	8c3b      	ldrh	r3, [r7, #32]
 80021c2:	2201      	movs	r2, #1
 80021c4:	4619      	mov	r1, r3
 80021c6:	69f8      	ldr	r0, [r7, #28]
 80021c8:	f003 f988 	bl	80054dc <HAL_GPIO_WritePin>
}
 80021cc:	bf00      	nop
 80021ce:	372c      	adds	r7, #44	@ 0x2c
 80021d0:	46bd      	mov	sp, r7
 80021d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080021d6 <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8002208:	68f9      	ldr	r1, [r7, #12]
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0.0;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps = 0.0;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> mmps = 0.0;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 8002260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	461a      	mov	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	0fd9      	lsrs	r1, r3, #31
 8002290:	440b      	add	r3, r1
 8002292:	105b      	asrs	r3, r3, #1
 8002294:	429a      	cmp	r2, r3
 8002296:	dd06      	ble.n	80022a6 <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	1ad2      	subs	r2, r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	425b      	negs	r3, r3
 80022b0:	0fd9      	lsrs	r1, r3, #31
 80022b2:	440b      	add	r3, r1
 80022b4:	105b      	asrs	r3, r3, #1
 80022b6:	429a      	cmp	r2, r3
 80022b8:	da06      	bge.n	80022c8 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695a      	ldr	r2, [r3, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	441a      	add	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	615a      	str	r2, [r3, #20]
	}
	// Update velocity at difference unit
	qei -> pps = (float)qei -> diff_counter_value * (float)qei -> freq;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	ee07 3a90 	vmov	s15, r3
 80022dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e4:	ee17 0a90 	vmov	r0, s15
 80022e8:	f7fe f8fa 	bl	80004e0 <__aeabi_f2d>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> radps = qei -> pps * 2.0 * M_PI / (float)(qei -> ppr);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	f7fd ff90 	bl	8000224 <__adddf3>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	a38a      	add	r3, pc, #552	@ (adr r3, 8002538 <Update_qei+0x2d8>)
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	f7fe f93d 	bl	8000590 <__aeabi_dmul>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4692      	mov	sl, r2
 800231c:	469b      	mov	fp, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800232a:	ee17 0a90 	vmov	r0, s15
 800232e:	f7fe f8d7 	bl	80004e0 <__aeabi_f2d>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4650      	mov	r0, sl
 8002338:	4659      	mov	r1, fp
 800233a:	f7fe fa53 	bl	80007e4 <__aeabi_ddiv>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	f7fe fc05 	bl	8000b54 <__aeabi_d2f>
 800234a:	4602      	mov	r2, r0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	4b79      	ldr	r3, [pc, #484]	@ (8002540 <Update_qei+0x2e0>)
 800235c:	f7fe f918 	bl	8000590 <__aeabi_dmul>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4692      	mov	sl, r2
 8002366:	469b      	mov	fp, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	ee07 3a90 	vmov	s15, r3
 8002370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002374:	ee17 0a90 	vmov	r0, s15
 8002378:	f7fe f8b2 	bl	80004e0 <__aeabi_f2d>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4650      	mov	r0, sl
 8002382:	4659      	mov	r1, fp
 8002384:	f7fe fa2e 	bl	80007e4 <__aeabi_ddiv>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	f7fe fbe0 	bl	8000b54 <__aeabi_d2f>
 8002394:	4602      	mov	r2, r0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> mmps = qei -> pps * 16.0 / (float)(qei -> ppr);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4b67      	ldr	r3, [pc, #412]	@ (8002544 <Update_qei+0x2e4>)
 80023a6:	f7fe f8f3 	bl	8000590 <__aeabi_dmul>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4692      	mov	sl, r2
 80023b0:	469b      	mov	fp, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	ee07 3a90 	vmov	s15, r3
 80023ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023be:	ee17 0a90 	vmov	r0, s15
 80023c2:	f7fe f88d 	bl	80004e0 <__aeabi_f2d>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4650      	mov	r0, sl
 80023cc:	4659      	mov	r1, fp
 80023ce:	f7fe fa09 	bl	80007e4 <__aeabi_ddiv>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f7fe fbbb 	bl	8000b54 <__aeabi_d2f>
 80023de:	4602      	mov	r2, r0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	641a      	str	r2, [r3, #64]	@ 0x40
	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	6949      	ldr	r1, [r1, #20]
 80023ee:	17c8      	asrs	r0, r1, #31
 80023f0:	460c      	mov	r4, r1
 80023f2:	4605      	mov	r5, r0
 80023f4:	eb12 0804 	adds.w	r8, r2, r4
 80023f8:	eb43 0905 	adc.w	r9, r3, r5
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	e9c3 8906 	strd	r8, r9, [r3, #24]
	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f86a 	bl	80004e0 <__aeabi_f2d>
 800240c:	4604      	mov	r4, r0
 800240e:	460d      	mov	r5, r1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	ee07 3a90 	vmov	s15, r3
 8002418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800241c:	ee17 0a90 	vmov	r0, s15
 8002420:	f7fe f85e 	bl	80004e0 <__aeabi_f2d>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	f7fd fefc 	bl	8000224 <__adddf3>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	a340      	add	r3, pc, #256	@ (adr r3, 8002538 <Update_qei+0x2d8>)
 8002436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243a:	f7fe f8a9 	bl	8000590 <__aeabi_dmul>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4690      	mov	r8, r2
 8002444:	4699      	mov	r9, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002452:	ee17 0a90 	vmov	r0, s15
 8002456:	f7fe f843 	bl	80004e0 <__aeabi_f2d>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4640      	mov	r0, r8
 8002460:	4649      	mov	r1, r9
 8002462:	f7fe f9bf 	bl	80007e4 <__aeabi_ddiv>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4620      	mov	r0, r4
 800246c:	4629      	mov	r1, r5
 800246e:	f7fd fed9 	bl	8000224 <__adddf3>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe fb6b 	bl	8000b54 <__aeabi_d2f>
 800247e:	4602      	mov	r2, r0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	ed93 7a08 	vldr	s14, [r3, #32]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024a2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80024a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	edc3 7a08 	vstr	s15, [r3, #32]
	qei -> mm += (float)qei -> diff_counter_value * 16.0 / (float)(qei -> ppr); // for lead 16 mm.
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe f813 	bl	80004e0 <__aeabi_f2d>
 80024ba:	4604      	mov	r4, r0
 80024bc:	460d      	mov	r5, r1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ca:	ee17 0a90 	vmov	r0, s15
 80024ce:	f7fe f807 	bl	80004e0 <__aeabi_f2d>
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002544 <Update_qei+0x2e4>)
 80024d8:	f7fe f85a 	bl	8000590 <__aeabi_dmul>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4690      	mov	r8, r2
 80024e2:	4699      	mov	r9, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f0:	ee17 0a90 	vmov	r0, s15
 80024f4:	f7fd fff4 	bl	80004e0 <__aeabi_f2d>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4640      	mov	r0, r8
 80024fe:	4649      	mov	r1, r9
 8002500:	f7fe f970 	bl	80007e4 <__aeabi_ddiv>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4620      	mov	r0, r4
 800250a:	4629      	mov	r1, r5
 800250c:	f7fd fe8a 	bl	8000224 <__adddf3>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	f7fe fb1c 	bl	8000b54 <__aeabi_d2f>
 800251c:	4602      	mov	r2, r0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	629a      	str	r2, [r3, #40]	@ 0x28
	// Update acceleration at difference

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	611a      	str	r2, [r3, #16]

}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002534:	f3af 8000 	nop.w
 8002538:	54442d18 	.word	0x54442d18
 800253c:	400921fb 	.word	0x400921fb
 8002540:	404e0000 	.word	0x404e0000
 8002544:	40300000 	.word	0x40300000

08002548 <Reset_qei>:

void Reset_qei(QEI* qei){
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	qei -> counter_value[NEW] = 0;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	621a      	str	r2, [r3, #32]
	qei -> pps = 0;
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps =0;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <Get_mmps>:

float32_t Get_mmps(QEI* qei){
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
	return qei -> mmps;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	ee07 3a90 	vmov	s15, r3
}
 80025ba:	eeb0 0a67 	vmov.f32	s0, s15
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	4b0f      	ldr	r3, [pc, #60]	@ (800260c <HAL_MspInit+0x44>)
 80025d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d2:	4a0e      	ldr	r2, [pc, #56]	@ (800260c <HAL_MspInit+0x44>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80025da:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <HAL_MspInit+0x44>)
 80025dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	4b09      	ldr	r3, [pc, #36]	@ (800260c <HAL_MspInit+0x44>)
 80025e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ea:	4a08      	ldr	r2, [pc, #32]	@ (800260c <HAL_MspInit+0x44>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <HAL_MspInit+0x44>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80025fe:	f003 f841 	bl	8005684 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000

08002610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b09e      	sub	sp, #120	@ 0x78
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	2254      	movs	r2, #84	@ 0x54
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f007 f97b 	bl	800992c <memset>
  if(hadc->Instance==ADC1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800263e:	d167      	bne.n	8002710 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002640:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002644:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002646:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800264a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	4618      	mov	r0, r3
 8002652:	f003 fd55 	bl	8006100 <HAL_RCCEx_PeriphCLKConfig>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800265c:	f7ff fbb0 	bl	8001dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002660:	4b2d      	ldr	r3, [pc, #180]	@ (8002718 <HAL_ADC_MspInit+0x108>)
 8002662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002664:	4a2c      	ldr	r2, [pc, #176]	@ (8002718 <HAL_ADC_MspInit+0x108>)
 8002666:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800266a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800266c:	4b2a      	ldr	r3, [pc, #168]	@ (8002718 <HAL_ADC_MspInit+0x108>)
 800266e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002670:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002678:	4b27      	ldr	r3, [pc, #156]	@ (8002718 <HAL_ADC_MspInit+0x108>)
 800267a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267c:	4a26      	ldr	r2, [pc, #152]	@ (8002718 <HAL_ADC_MspInit+0x108>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002684:	4b24      	ldr	r3, [pc, #144]	@ (8002718 <HAL_ADC_MspInit+0x108>)
 8002686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 8002690:	2301      	movs	r3, #1
 8002692:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002694:	2303      	movs	r3, #3
 8002696:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 800269c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026a0:	4619      	mov	r1, r3
 80026a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026a6:	f002 fd7f 	bl	80051a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80026aa:	4b1c      	ldr	r3, [pc, #112]	@ (800271c <HAL_ADC_MspInit+0x10c>)
 80026ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002720 <HAL_ADC_MspInit+0x110>)
 80026ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80026b0:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <HAL_ADC_MspInit+0x10c>)
 80026b2:	2205      	movs	r2, #5
 80026b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b6:	4b19      	ldr	r3, [pc, #100]	@ (800271c <HAL_ADC_MspInit+0x10c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026bc:	4b17      	ldr	r3, [pc, #92]	@ (800271c <HAL_ADC_MspInit+0x10c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026c2:	4b16      	ldr	r3, [pc, #88]	@ (800271c <HAL_ADC_MspInit+0x10c>)
 80026c4:	2280      	movs	r2, #128	@ 0x80
 80026c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026c8:	4b14      	ldr	r3, [pc, #80]	@ (800271c <HAL_ADC_MspInit+0x10c>)
 80026ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026d0:	4b12      	ldr	r3, [pc, #72]	@ (800271c <HAL_ADC_MspInit+0x10c>)
 80026d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026d8:	4b10      	ldr	r3, [pc, #64]	@ (800271c <HAL_ADC_MspInit+0x10c>)
 80026da:	2220      	movs	r2, #32
 80026dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026de:	4b0f      	ldr	r3, [pc, #60]	@ (800271c <HAL_ADC_MspInit+0x10c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026e4:	480d      	ldr	r0, [pc, #52]	@ (800271c <HAL_ADC_MspInit+0x10c>)
 80026e6:	f002 fa2d 	bl	8004b44 <HAL_DMA_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80026f0:	f7ff fb66 	bl	8001dc0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a09      	ldr	r2, [pc, #36]	@ (800271c <HAL_ADC_MspInit+0x10c>)
 80026f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80026fa:	4a08      	ldr	r2, [pc, #32]	@ (800271c <HAL_ADC_MspInit+0x10c>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002700:	2200      	movs	r2, #0
 8002702:	2100      	movs	r1, #0
 8002704:	2012      	movs	r0, #18
 8002706:	f002 f9e8 	bl	8004ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800270a:	2012      	movs	r0, #18
 800270c:	f002 f9ff 	bl	8004b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002710:	bf00      	nop
 8002712:	3778      	adds	r7, #120	@ 0x78
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	200000ac 	.word	0x200000ac
 8002720:	40020008 	.word	0x40020008

08002724 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a27      	ldr	r2, [pc, #156]	@ (80027d0 <HAL_TIM_Base_MspInit+0xac>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d114      	bne.n	8002760 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002736:	4b27      	ldr	r3, [pc, #156]	@ (80027d4 <HAL_TIM_Base_MspInit+0xb0>)
 8002738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800273a:	4a26      	ldr	r2, [pc, #152]	@ (80027d4 <HAL_TIM_Base_MspInit+0xb0>)
 800273c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002740:	6613      	str	r3, [r2, #96]	@ 0x60
 8002742:	4b24      	ldr	r3, [pc, #144]	@ (80027d4 <HAL_TIM_Base_MspInit+0xb0>)
 8002744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002746:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	2019      	movs	r0, #25
 8002754:	f002 f9c1 	bl	8004ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002758:	2019      	movs	r0, #25
 800275a:	f002 f9d8 	bl	8004b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800275e:	e032      	b.n	80027c6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1c      	ldr	r2, [pc, #112]	@ (80027d8 <HAL_TIM_Base_MspInit+0xb4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d114      	bne.n	8002794 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800276a:	4b1a      	ldr	r3, [pc, #104]	@ (80027d4 <HAL_TIM_Base_MspInit+0xb0>)
 800276c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276e:	4a19      	ldr	r2, [pc, #100]	@ (80027d4 <HAL_TIM_Base_MspInit+0xb0>)
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	6593      	str	r3, [r2, #88]	@ 0x58
 8002776:	4b17      	ldr	r3, [pc, #92]	@ (80027d4 <HAL_TIM_Base_MspInit+0xb0>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	201d      	movs	r0, #29
 8002788:	f002 f9a7 	bl	8004ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800278c:	201d      	movs	r0, #29
 800278e:	f002 f9be 	bl	8004b0e <HAL_NVIC_EnableIRQ>
}
 8002792:	e018      	b.n	80027c6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a10      	ldr	r2, [pc, #64]	@ (80027dc <HAL_TIM_Base_MspInit+0xb8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d113      	bne.n	80027c6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800279e:	4b0d      	ldr	r3, [pc, #52]	@ (80027d4 <HAL_TIM_Base_MspInit+0xb0>)
 80027a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a2:	4a0c      	ldr	r2, [pc, #48]	@ (80027d4 <HAL_TIM_Base_MspInit+0xb0>)
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80027aa:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <HAL_TIM_Base_MspInit+0xb0>)
 80027ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2100      	movs	r1, #0
 80027ba:	2019      	movs	r0, #25
 80027bc:	f002 f98d 	bl	8004ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80027c0:	2019      	movs	r0, #25
 80027c2:	f002 f9a4 	bl	8004b0e <HAL_NVIC_EnableIRQ>
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40012c00 	.word	0x40012c00
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40014400 	.word	0x40014400

080027e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	@ 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002870 <HAL_TIM_Encoder_MspInit+0x90>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d131      	bne.n	8002866 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002802:	4b1c      	ldr	r3, [pc, #112]	@ (8002874 <HAL_TIM_Encoder_MspInit+0x94>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002806:	4a1b      	ldr	r2, [pc, #108]	@ (8002874 <HAL_TIM_Encoder_MspInit+0x94>)
 8002808:	f043 0304 	orr.w	r3, r3, #4
 800280c:	6593      	str	r3, [r2, #88]	@ 0x58
 800280e:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <HAL_TIM_Encoder_MspInit+0x94>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281a:	4b16      	ldr	r3, [pc, #88]	@ (8002874 <HAL_TIM_Encoder_MspInit+0x94>)
 800281c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281e:	4a15      	ldr	r2, [pc, #84]	@ (8002874 <HAL_TIM_Encoder_MspInit+0x94>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002826:	4b13      	ldr	r3, [pc, #76]	@ (8002874 <HAL_TIM_Encoder_MspInit+0x94>)
 8002828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8002832:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002844:	230a      	movs	r3, #10
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002852:	f002 fca9 	bl	80051a8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	201e      	movs	r0, #30
 800285c:	f002 f93d 	bl	8004ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002860:	201e      	movs	r0, #30
 8002862:	f002 f954 	bl	8004b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	@ 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40000800 	.word	0x40000800
 8002874:	40021000 	.word	0x40021000

08002878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 030c 	add.w	r3, r7, #12
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a11      	ldr	r2, [pc, #68]	@ (80028dc <HAL_TIM_MspPostInit+0x64>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d11b      	bne.n	80028d2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800289a:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <HAL_TIM_MspPostInit+0x68>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289e:	4a10      	ldr	r2, [pc, #64]	@ (80028e0 <HAL_TIM_MspPostInit+0x68>)
 80028a0:	f043 0304 	orr.w	r3, r3, #4
 80028a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028a6:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <HAL_TIM_MspPostInit+0x68>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 80028b2:	2301      	movs	r3, #1
 80028b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b6:	2302      	movs	r3, #2
 80028b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80028c2:	2302      	movs	r3, #2
 80028c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	4619      	mov	r1, r3
 80028cc:	4805      	ldr	r0, [pc, #20]	@ (80028e4 <HAL_TIM_MspPostInit+0x6c>)
 80028ce:	f002 fc6b 	bl	80051a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028d2:	bf00      	nop
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40012c00 	.word	0x40012c00
 80028e0:	40021000 	.word	0x40021000
 80028e4:	48000800 	.word	0x48000800

080028e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b09e      	sub	sp, #120	@ 0x78
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	2254      	movs	r2, #84	@ 0x54
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f007 f80f 	bl	800992c <memset>
  if(huart->Instance==USART2)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a4d      	ldr	r2, [pc, #308]	@ (8002a48 <HAL_UART_MspInit+0x160>)
 8002914:	4293      	cmp	r3, r2
 8002916:	f040 8092 	bne.w	8002a3e <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800291a:	2302      	movs	r3, #2
 800291c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002922:	f107 0310 	add.w	r3, r7, #16
 8002926:	4618      	mov	r0, r3
 8002928:	f003 fbea 	bl	8006100 <HAL_RCCEx_PeriphCLKConfig>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002932:	f7ff fa45 	bl	8001dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002936:	4b45      	ldr	r3, [pc, #276]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 8002938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293a:	4a44      	ldr	r2, [pc, #272]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 800293c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002940:	6593      	str	r3, [r2, #88]	@ 0x58
 8002942:	4b42      	ldr	r3, [pc, #264]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 8002944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 8002950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002952:	4a3e      	ldr	r2, [pc, #248]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800295a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002966:	230c      	movs	r3, #12
 8002968:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002976:	2307      	movs	r3, #7
 8002978:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800297e:	4619      	mov	r1, r3
 8002980:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002984:	f002 fc10 	bl	80051a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8002988:	4b31      	ldr	r3, [pc, #196]	@ (8002a50 <HAL_UART_MspInit+0x168>)
 800298a:	4a32      	ldr	r2, [pc, #200]	@ (8002a54 <HAL_UART_MspInit+0x16c>)
 800298c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800298e:	4b30      	ldr	r3, [pc, #192]	@ (8002a50 <HAL_UART_MspInit+0x168>)
 8002990:	221a      	movs	r2, #26
 8002992:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002994:	4b2e      	ldr	r3, [pc, #184]	@ (8002a50 <HAL_UART_MspInit+0x168>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800299a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a50 <HAL_UART_MspInit+0x168>)
 800299c:	2200      	movs	r2, #0
 800299e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a50 <HAL_UART_MspInit+0x168>)
 80029a2:	2280      	movs	r2, #128	@ 0x80
 80029a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a50 <HAL_UART_MspInit+0x168>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ac:	4b28      	ldr	r3, [pc, #160]	@ (8002a50 <HAL_UART_MspInit+0x168>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80029b2:	4b27      	ldr	r3, [pc, #156]	@ (8002a50 <HAL_UART_MspInit+0x168>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029b8:	4b25      	ldr	r3, [pc, #148]	@ (8002a50 <HAL_UART_MspInit+0x168>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80029be:	4824      	ldr	r0, [pc, #144]	@ (8002a50 <HAL_UART_MspInit+0x168>)
 80029c0:	f002 f8c0 	bl	8004b44 <HAL_DMA_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80029ca:	f7ff f9f9 	bl	8001dc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a50 <HAL_UART_MspInit+0x168>)
 80029d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80029d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002a50 <HAL_UART_MspInit+0x168>)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80029dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002a58 <HAL_UART_MspInit+0x170>)
 80029de:	4a1f      	ldr	r2, [pc, #124]	@ (8002a5c <HAL_UART_MspInit+0x174>)
 80029e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80029e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a58 <HAL_UART_MspInit+0x170>)
 80029e4:	221b      	movs	r2, #27
 80029e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a58 <HAL_UART_MspInit+0x170>)
 80029ea:	2210      	movs	r2, #16
 80029ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002a58 <HAL_UART_MspInit+0x170>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029f4:	4b18      	ldr	r3, [pc, #96]	@ (8002a58 <HAL_UART_MspInit+0x170>)
 80029f6:	2280      	movs	r2, #128	@ 0x80
 80029f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029fa:	4b17      	ldr	r3, [pc, #92]	@ (8002a58 <HAL_UART_MspInit+0x170>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a00:	4b15      	ldr	r3, [pc, #84]	@ (8002a58 <HAL_UART_MspInit+0x170>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a06:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <HAL_UART_MspInit+0x170>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a0c:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <HAL_UART_MspInit+0x170>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a12:	4811      	ldr	r0, [pc, #68]	@ (8002a58 <HAL_UART_MspInit+0x170>)
 8002a14:	f002 f896 	bl	8004b44 <HAL_DMA_Init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002a1e:	f7ff f9cf 	bl	8001dc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a0c      	ldr	r2, [pc, #48]	@ (8002a58 <HAL_UART_MspInit+0x170>)
 8002a26:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002a28:	4a0b      	ldr	r2, [pc, #44]	@ (8002a58 <HAL_UART_MspInit+0x170>)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	2026      	movs	r0, #38	@ 0x26
 8002a34:	f002 f851 	bl	8004ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a38:	2026      	movs	r0, #38	@ 0x26
 8002a3a:	f002 f868 	bl	8004b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a3e:	bf00      	nop
 8002a40:	3778      	adds	r7, #120	@ 0x78
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40004400 	.word	0x40004400
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	20000508 	.word	0x20000508
 8002a54:	4002001c 	.word	0x4002001c
 8002a58:	20000568 	.word	0x20000568
 8002a5c:	40020030 	.word	0x40020030

08002a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a64:	bf00      	nop
 8002a66:	e7fd      	b.n	8002a64 <NMI_Handler+0x4>

08002a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a6c:	bf00      	nop
 8002a6e:	e7fd      	b.n	8002a6c <HardFault_Handler+0x4>

08002a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a74:	bf00      	nop
 8002a76:	e7fd      	b.n	8002a74 <MemManage_Handler+0x4>

08002a78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <BusFault_Handler+0x4>

08002a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a84:	bf00      	nop
 8002a86:	e7fd      	b.n	8002a84 <UsageFault_Handler+0x4>

08002a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab6:	f000 f8f5 	bl	8002ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ac4:	4802      	ldr	r0, [pc, #8]	@ (8002ad0 <DMA1_Channel1_IRQHandler+0x10>)
 8002ac6:	f002 fa20 	bl	8004f0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	200000ac 	.word	0x200000ac

08002ad4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ad8:	4802      	ldr	r0, [pc, #8]	@ (8002ae4 <DMA1_Channel2_IRQHandler+0x10>)
 8002ada:	f002 fa16 	bl	8004f0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000508 	.word	0x20000508

08002ae8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002aec:	4802      	ldr	r0, [pc, #8]	@ (8002af8 <DMA1_Channel3_IRQHandler+0x10>)
 8002aee:	f002 fa0c 	bl	8004f0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000568 	.word	0x20000568

08002afc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b00:	4802      	ldr	r0, [pc, #8]	@ (8002b0c <ADC1_2_IRQHandler+0x10>)
 8002b02:	f000 fdbd 	bl	8003680 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000040 	.word	0x20000040

08002b10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b14:	4803      	ldr	r0, [pc, #12]	@ (8002b24 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002b16:	f004 f9b7 	bl	8006e88 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002b1a:	4803      	ldr	r0, [pc, #12]	@ (8002b28 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002b1c:	f004 f9b4 	bl	8006e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	2000010c 	.word	0x2000010c
 8002b28:	20000370 	.word	0x20000370

08002b2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b30:	4802      	ldr	r0, [pc, #8]	@ (8002b3c <TIM3_IRQHandler+0x10>)
 8002b32:	f004 f9a9 	bl	8006e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200001d8 	.word	0x200001d8

08002b40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b44:	4802      	ldr	r0, [pc, #8]	@ (8002b50 <TIM4_IRQHandler+0x10>)
 8002b46:	f004 f99f 	bl	8006e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200002a4 	.word	0x200002a4

08002b54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b58:	4802      	ldr	r0, [pc, #8]	@ (8002b64 <USART2_IRQHandler+0x10>)
 8002b5a:	f005 fc83 	bl	8008464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	2000043c 	.word	0x2000043c

08002b68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_Pin);
 8002b6c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002b70:	f002 fccc 	bl	800550c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002b74:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002b78:	f002 fcc8 	bl	800550c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 8002b7c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002b80:	f002 fcc4 	bl	800550c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <SystemInit+0x20>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b92:	4a05      	ldr	r2, [pc, #20]	@ (8002ba8 <SystemInit+0x20>)
 8002b94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bac:	480d      	ldr	r0, [pc, #52]	@ (8002be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bb0:	f7ff ffea 	bl	8002b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bb4:	480c      	ldr	r0, [pc, #48]	@ (8002be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bb6:	490d      	ldr	r1, [pc, #52]	@ (8002bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf0 <LoopForever+0xe>)
  movs r3, #0
 8002bba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002bbc:	e002      	b.n	8002bc4 <LoopCopyDataInit>

08002bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bc2:	3304      	adds	r3, #4

08002bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc8:	d3f9      	bcc.n	8002bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bca:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8002bf8 <LoopForever+0x16>)
  movs r3, #0
 8002bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd0:	e001      	b.n	8002bd6 <LoopFillZerobss>

08002bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd4:	3204      	adds	r2, #4

08002bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd8:	d3fb      	bcc.n	8002bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bda:	f006 feaf 	bl	800993c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bde:	f7fe fa43 	bl	8001068 <main>

08002be2 <LoopForever>:

LoopForever:
    b LoopForever
 8002be2:	e7fe      	b.n	8002be2 <LoopForever>
  ldr   r0, =_estack
 8002be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bec:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002bf0:	080099ec 	.word	0x080099ec
  ldr r2, =_sbss
 8002bf4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002bf8:	2000076c 	.word	0x2000076c

08002bfc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bfc:	e7fe      	b.n	8002bfc <ADC3_IRQHandler>

08002bfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c08:	2003      	movs	r0, #3
 8002c0a:	f001 ff5b 	bl	8004ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f000 f80e 	bl	8002c30 <HAL_InitTick>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	71fb      	strb	r3, [r7, #7]
 8002c1e:	e001      	b.n	8002c24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c20:	f7ff fcd2 	bl	80025c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c24:	79fb      	ldrb	r3, [r7, #7]

}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002c3c:	4b16      	ldr	r3, [pc, #88]	@ (8002c98 <HAL_InitTick+0x68>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d022      	beq.n	8002c8a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002c44:	4b15      	ldr	r3, [pc, #84]	@ (8002c9c <HAL_InitTick+0x6c>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b13      	ldr	r3, [pc, #76]	@ (8002c98 <HAL_InitTick+0x68>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f001 ff66 	bl	8004b2a <HAL_SYSTICK_Config>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10f      	bne.n	8002c84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b0f      	cmp	r3, #15
 8002c68:	d809      	bhi.n	8002c7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c72:	f001 ff32 	bl	8004ada <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <HAL_InitTick+0x70>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	e007      	b.n	8002c8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
 8002c82:	e004      	b.n	8002c8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
 8002c88:	e001      	b.n	8002c8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000014 	.word	0x20000014
 8002c9c:	2000000c 	.word	0x2000000c
 8002ca0:	20000010 	.word	0x20000010

08002ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ca8:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <HAL_IncTick+0x1c>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <HAL_IncTick+0x20>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4a03      	ldr	r2, [pc, #12]	@ (8002cc0 <HAL_IncTick+0x1c>)
 8002cb4:	6013      	str	r3, [r2, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	20000768 	.word	0x20000768
 8002cc4:	20000014 	.word	0x20000014

08002cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return uwTick;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	@ (8002cdc <HAL_GetTick+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000768 	.word	0x20000768

08002ce0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3360      	adds	r3, #96	@ 0x60
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b08      	ldr	r3, [pc, #32]	@ (8002d8c <LL_ADC_SetOffset+0x44>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d80:	bf00      	nop
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	03fff000 	.word	0x03fff000

08002d90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3360      	adds	r3, #96	@ 0x60
 8002d9e:	461a      	mov	r2, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3360      	adds	r3, #96	@ 0x60
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b087      	sub	sp, #28
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3360      	adds	r3, #96	@ 0x60
 8002e02:	461a      	mov	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002e1c:	bf00      	nop
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3360      	adds	r3, #96	@ 0x60
 8002e38:	461a      	mov	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	615a      	str	r2, [r3, #20]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b087      	sub	sp, #28
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	3330      	adds	r3, #48	@ 0x30
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	4413      	add	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	211f      	movs	r1, #31
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	401a      	ands	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	0e9b      	lsrs	r3, r3, #26
 8002ee2:	f003 011f 	and.w	r1, r3, #31
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3314      	adds	r3, #20
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	0e5b      	lsrs	r3, r3, #25
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	4413      	add	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	0d1b      	lsrs	r3, r3, #20
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2107      	movs	r1, #7
 8002f56:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	401a      	ands	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	0d1b      	lsrs	r3, r3, #20
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0318 	and.w	r3, r3, #24
 8002fa2:	4908      	ldr	r1, [pc, #32]	@ (8002fc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002fa4:	40d9      	lsrs	r1, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	400b      	ands	r3, r1
 8002faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	0007ffff 	.word	0x0007ffff

08002fc8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 031f 	and.w	r3, r3, #31
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003010:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6093      	str	r3, [r2, #8]
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003038:	d101      	bne.n	800303e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800305c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003060:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003088:	d101      	bne.n	800308e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030b0:	f043 0201 	orr.w	r2, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <LL_ADC_IsEnabled+0x18>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <LL_ADC_IsEnabled+0x1a>
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030fa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030fe:	f043 0204 	orr.w	r2, r3, #4
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d101      	bne.n	800312a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b08      	cmp	r3, #8
 800314a:	d101      	bne.n	8003150 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b089      	sub	sp, #36	@ 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e1a9      	b.n	80034ce <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff fa41 	bl	8002610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ff3f 	bl	8003024 <LL_ADC_IsDeepPowerDownEnabled>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d004      	beq.n	80031b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff25 	bl	8003000 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff5a 	bl	8003074 <LL_ADC_IsInternalRegulatorEnabled>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d115      	bne.n	80031f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff ff3e 	bl	800304c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031d0:	4b9c      	ldr	r3, [pc, #624]	@ (8003444 <HAL_ADC_Init+0x2e4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	099b      	lsrs	r3, r3, #6
 80031d6:	4a9c      	ldr	r2, [pc, #624]	@ (8003448 <HAL_ADC_Init+0x2e8>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	3301      	adds	r3, #1
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031e4:	e002      	b.n	80031ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3b01      	subs	r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f9      	bne.n	80031e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff ff3c 	bl	8003074 <LL_ADC_IsInternalRegulatorEnabled>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10d      	bne.n	800321e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003206:	f043 0210 	orr.w	r2, r3, #16
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff ff75 	bl	8003112 <LL_ADC_REG_IsConversionOngoing>
 8003228:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 8142 	bne.w	80034bc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 813e 	bne.w	80034bc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003244:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003248:	f043 0202 	orr.w	r2, r3, #2
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff35 	bl	80030c4 <LL_ADC_IsEnabled>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d141      	bne.n	80032e4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003268:	d004      	beq.n	8003274 <HAL_ADC_Init+0x114>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a77      	ldr	r2, [pc, #476]	@ (800344c <HAL_ADC_Init+0x2ec>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d10f      	bne.n	8003294 <HAL_ADC_Init+0x134>
 8003274:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003278:	f7ff ff24 	bl	80030c4 <LL_ADC_IsEnabled>
 800327c:	4604      	mov	r4, r0
 800327e:	4873      	ldr	r0, [pc, #460]	@ (800344c <HAL_ADC_Init+0x2ec>)
 8003280:	f7ff ff20 	bl	80030c4 <LL_ADC_IsEnabled>
 8003284:	4603      	mov	r3, r0
 8003286:	4323      	orrs	r3, r4
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	e012      	b.n	80032ba <HAL_ADC_Init+0x15a>
 8003294:	486e      	ldr	r0, [pc, #440]	@ (8003450 <HAL_ADC_Init+0x2f0>)
 8003296:	f7ff ff15 	bl	80030c4 <LL_ADC_IsEnabled>
 800329a:	4604      	mov	r4, r0
 800329c:	486d      	ldr	r0, [pc, #436]	@ (8003454 <HAL_ADC_Init+0x2f4>)
 800329e:	f7ff ff11 	bl	80030c4 <LL_ADC_IsEnabled>
 80032a2:	4603      	mov	r3, r0
 80032a4:	431c      	orrs	r4, r3
 80032a6:	486c      	ldr	r0, [pc, #432]	@ (8003458 <HAL_ADC_Init+0x2f8>)
 80032a8:	f7ff ff0c 	bl	80030c4 <LL_ADC_IsEnabled>
 80032ac:	4603      	mov	r3, r0
 80032ae:	4323      	orrs	r3, r4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d012      	beq.n	80032e4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032c6:	d004      	beq.n	80032d2 <HAL_ADC_Init+0x172>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a5f      	ldr	r2, [pc, #380]	@ (800344c <HAL_ADC_Init+0x2ec>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <HAL_ADC_Init+0x176>
 80032d2:	4a62      	ldr	r2, [pc, #392]	@ (800345c <HAL_ADC_Init+0x2fc>)
 80032d4:	e000      	b.n	80032d8 <HAL_ADC_Init+0x178>
 80032d6:	4a62      	ldr	r2, [pc, #392]	@ (8003460 <HAL_ADC_Init+0x300>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f7ff fcfe 	bl	8002ce0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	7f5b      	ldrb	r3, [r3, #29]
 80032e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80032f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80032fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003302:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800330e:	2b01      	cmp	r3, #1
 8003310:	d106      	bne.n	8003320 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003316:	3b01      	subs	r3, #1
 8003318:	045b      	lsls	r3, r3, #17
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	4b48      	ldr	r3, [pc, #288]	@ (8003464 <HAL_ADC_Init+0x304>)
 8003344:	4013      	ands	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	69b9      	ldr	r1, [r7, #24]
 800334c:	430b      	orrs	r3, r1
 800334e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fee4 	bl	8003138 <LL_ADC_INJ_IsConversionOngoing>
 8003370:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d17f      	bne.n	8003478 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d17c      	bne.n	8003478 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003382:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800338a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800339a:	f023 0302 	bic.w	r3, r3, #2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	69b9      	ldr	r1, [r7, #24]
 80033a4:	430b      	orrs	r3, r1
 80033a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d017      	beq.n	80033e0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80033be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80033c8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80033cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6911      	ldr	r1, [r2, #16]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	430b      	orrs	r3, r1
 80033da:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80033de:	e013      	b.n	8003408 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80033ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003400:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003404:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800340e:	2b01      	cmp	r3, #1
 8003410:	d12a      	bne.n	8003468 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800341c:	f023 0304 	bic.w	r3, r3, #4
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003428:	4311      	orrs	r1, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800342e:	4311      	orrs	r1, r2
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003434:	430a      	orrs	r2, r1
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	611a      	str	r2, [r3, #16]
 8003442:	e019      	b.n	8003478 <HAL_ADC_Init+0x318>
 8003444:	2000000c 	.word	0x2000000c
 8003448:	053e2d63 	.word	0x053e2d63
 800344c:	50000100 	.word	0x50000100
 8003450:	50000400 	.word	0x50000400
 8003454:	50000500 	.word	0x50000500
 8003458:	50000600 	.word	0x50000600
 800345c:	50000300 	.word	0x50000300
 8003460:	50000700 	.word	0x50000700
 8003464:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0201 	bic.w	r2, r2, #1
 8003476:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10c      	bne.n	800349a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003486:	f023 010f 	bic.w	r1, r3, #15
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	1e5a      	subs	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	631a      	str	r2, [r3, #48]	@ 0x30
 8003498:	e007      	b.n	80034aa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 020f 	bic.w	r2, r2, #15
 80034a8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ae:	f023 0303 	bic.w	r3, r3, #3
 80034b2:	f043 0201 	orr.w	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034ba:	e007      	b.n	80034cc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c0:	f043 0210 	orr.w	r2, r3, #16
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3724      	adds	r7, #36	@ 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd90      	pop	{r4, r7, pc}
 80034d6:	bf00      	nop

080034d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034ec:	d004      	beq.n	80034f8 <HAL_ADC_Start_DMA+0x20>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a5a      	ldr	r2, [pc, #360]	@ (800365c <HAL_ADC_Start_DMA+0x184>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_Start_DMA+0x24>
 80034f8:	4b59      	ldr	r3, [pc, #356]	@ (8003660 <HAL_ADC_Start_DMA+0x188>)
 80034fa:	e000      	b.n	80034fe <HAL_ADC_Start_DMA+0x26>
 80034fc:	4b59      	ldr	r3, [pc, #356]	@ (8003664 <HAL_ADC_Start_DMA+0x18c>)
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fd62 	bl	8002fc8 <LL_ADC_GetMultimode>
 8003504:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fe01 	bl	8003112 <LL_ADC_REG_IsConversionOngoing>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	f040 809b 	bne.w	800364e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_ADC_Start_DMA+0x4e>
 8003522:	2302      	movs	r3, #2
 8003524:	e096      	b.n	8003654 <HAL_ADC_Start_DMA+0x17c>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a4d      	ldr	r2, [pc, #308]	@ (8003668 <HAL_ADC_Start_DMA+0x190>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d008      	beq.n	800354a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2b05      	cmp	r3, #5
 8003542:	d002      	beq.n	800354a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	2b09      	cmp	r3, #9
 8003548:	d17a      	bne.n	8003640 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 ff60 	bl	8004410 <ADC_Enable>
 8003550:	4603      	mov	r3, r0
 8003552:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003554:	7dfb      	ldrb	r3, [r7, #23]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d16d      	bne.n	8003636 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a3a      	ldr	r2, [pc, #232]	@ (800365c <HAL_ADC_Start_DMA+0x184>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_ADC_Start_DMA+0xb4>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a3b      	ldr	r2, [pc, #236]	@ (800366c <HAL_ADC_Start_DMA+0x194>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d002      	beq.n	8003588 <HAL_ADC_Start_DMA+0xb0>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	e003      	b.n	8003590 <HAL_ADC_Start_DMA+0xb8>
 8003588:	4b39      	ldr	r3, [pc, #228]	@ (8003670 <HAL_ADC_Start_DMA+0x198>)
 800358a:	e001      	b.n	8003590 <HAL_ADC_Start_DMA+0xb8>
 800358c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	4293      	cmp	r3, r2
 8003596:	d002      	beq.n	800359e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d105      	bne.n	80035aa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ba:	f023 0206 	bic.w	r2, r3, #6
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	661a      	str	r2, [r3, #96]	@ 0x60
 80035c2:	e002      	b.n	80035ca <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ce:	4a29      	ldr	r2, [pc, #164]	@ (8003674 <HAL_ADC_Start_DMA+0x19c>)
 80035d0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d6:	4a28      	ldr	r2, [pc, #160]	@ (8003678 <HAL_ADC_Start_DMA+0x1a0>)
 80035d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035de:	4a27      	ldr	r2, [pc, #156]	@ (800367c <HAL_ADC_Start_DMA+0x1a4>)
 80035e0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	221c      	movs	r2, #28
 80035e8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0210 	orr.w	r2, r2, #16
 8003600:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3340      	adds	r3, #64	@ 0x40
 800361c:	4619      	mov	r1, r3
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f001 fb37 	bl	8004c94 <HAL_DMA_Start_IT>
 8003626:	4603      	mov	r3, r0
 8003628:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fd5b 	bl	80030ea <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003634:	e00d      	b.n	8003652 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800363e:	e008      	b.n	8003652 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800364c:	e001      	b.n	8003652 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800364e:	2302      	movs	r3, #2
 8003650:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003652:	7dfb      	ldrb	r3, [r7, #23]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	50000100 	.word	0x50000100
 8003660:	50000300 	.word	0x50000300
 8003664:	50000700 	.word	0x50000700
 8003668:	50000600 	.word	0x50000600
 800366c:	50000500 	.word	0x50000500
 8003670:	50000400 	.word	0x50000400
 8003674:	0800453d 	.word	0x0800453d
 8003678:	08004615 	.word	0x08004615
 800367c:	08004631 	.word	0x08004631

08003680 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	@ 0x28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003688:	2300      	movs	r3, #0
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036a4:	d004      	beq.n	80036b0 <HAL_ADC_IRQHandler+0x30>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a8e      	ldr	r2, [pc, #568]	@ (80038e4 <HAL_ADC_IRQHandler+0x264>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d101      	bne.n	80036b4 <HAL_ADC_IRQHandler+0x34>
 80036b0:	4b8d      	ldr	r3, [pc, #564]	@ (80038e8 <HAL_ADC_IRQHandler+0x268>)
 80036b2:	e000      	b.n	80036b6 <HAL_ADC_IRQHandler+0x36>
 80036b4:	4b8d      	ldr	r3, [pc, #564]	@ (80038ec <HAL_ADC_IRQHandler+0x26c>)
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fc86 	bl	8002fc8 <LL_ADC_GetMultimode>
 80036bc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d017      	beq.n	80036f8 <HAL_ADC_IRQHandler+0x78>
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d012      	beq.n	80036f8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d105      	bne.n	80036ea <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f001 f808 	bl	8004700 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2202      	movs	r2, #2
 80036f6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d004      	beq.n	800370c <HAL_ADC_IRQHandler+0x8c>
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10b      	bne.n	8003724 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8094 	beq.w	8003840 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 808e 	beq.w	8003840 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	d105      	bne.n	800373c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003734:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fb9f 	bl	8002e84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d072      	beq.n	8003832 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a64      	ldr	r2, [pc, #400]	@ (80038e4 <HAL_ADC_IRQHandler+0x264>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d009      	beq.n	800376a <HAL_ADC_IRQHandler+0xea>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a65      	ldr	r2, [pc, #404]	@ (80038f0 <HAL_ADC_IRQHandler+0x270>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d002      	beq.n	8003766 <HAL_ADC_IRQHandler+0xe6>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	e003      	b.n	800376e <HAL_ADC_IRQHandler+0xee>
 8003766:	4b63      	ldr	r3, [pc, #396]	@ (80038f4 <HAL_ADC_IRQHandler+0x274>)
 8003768:	e001      	b.n	800376e <HAL_ADC_IRQHandler+0xee>
 800376a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	4293      	cmp	r3, r2
 8003774:	d008      	beq.n	8003788 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2b05      	cmp	r3, #5
 8003780:	d002      	beq.n	8003788 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b09      	cmp	r3, #9
 8003786:	d104      	bne.n	8003792 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	623b      	str	r3, [r7, #32]
 8003790:	e014      	b.n	80037bc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a53      	ldr	r2, [pc, #332]	@ (80038e4 <HAL_ADC_IRQHandler+0x264>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d009      	beq.n	80037b0 <HAL_ADC_IRQHandler+0x130>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a53      	ldr	r2, [pc, #332]	@ (80038f0 <HAL_ADC_IRQHandler+0x270>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d002      	beq.n	80037ac <HAL_ADC_IRQHandler+0x12c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	e003      	b.n	80037b4 <HAL_ADC_IRQHandler+0x134>
 80037ac:	4b51      	ldr	r3, [pc, #324]	@ (80038f4 <HAL_ADC_IRQHandler+0x274>)
 80037ae:	e001      	b.n	80037b4 <HAL_ADC_IRQHandler+0x134>
 80037b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80037b4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d135      	bne.n	8003832 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d12e      	bne.n	8003832 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fc9a 	bl	8003112 <LL_ADC_REG_IsConversionOngoing>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d11a      	bne.n	800381a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 020c 	bic.w	r2, r2, #12
 80037f2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003804:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d112      	bne.n	8003832 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003810:	f043 0201 	orr.w	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003818:	e00b      	b.n	8003832 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381e:	f043 0210 	orr.w	r2, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382a:	f043 0201 	orr.w	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f984 	bl	8003b40 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	220c      	movs	r2, #12
 800383e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b00      	cmp	r3, #0
 8003848:	d004      	beq.n	8003854 <HAL_ADC_IRQHandler+0x1d4>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 80b3 	beq.w	80039c6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 80ad 	beq.w	80039c6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	d105      	bne.n	8003884 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff fb3a 	bl	8002f02 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800388e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff faf5 	bl	8002e84 <LL_ADC_REG_IsTriggerSourceSWStart>
 800389a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a10      	ldr	r2, [pc, #64]	@ (80038e4 <HAL_ADC_IRQHandler+0x264>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_ADC_IRQHandler+0x23a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a11      	ldr	r2, [pc, #68]	@ (80038f0 <HAL_ADC_IRQHandler+0x270>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d002      	beq.n	80038b6 <HAL_ADC_IRQHandler+0x236>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	e003      	b.n	80038be <HAL_ADC_IRQHandler+0x23e>
 80038b6:	4b0f      	ldr	r3, [pc, #60]	@ (80038f4 <HAL_ADC_IRQHandler+0x274>)
 80038b8:	e001      	b.n	80038be <HAL_ADC_IRQHandler+0x23e>
 80038ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d008      	beq.n	80038d8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b06      	cmp	r3, #6
 80038d0:	d002      	beq.n	80038d8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b07      	cmp	r3, #7
 80038d6:	d10f      	bne.n	80038f8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	623b      	str	r3, [r7, #32]
 80038e0:	e01f      	b.n	8003922 <HAL_ADC_IRQHandler+0x2a2>
 80038e2:	bf00      	nop
 80038e4:	50000100 	.word	0x50000100
 80038e8:	50000300 	.word	0x50000300
 80038ec:	50000700 	.word	0x50000700
 80038f0:	50000500 	.word	0x50000500
 80038f4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a8b      	ldr	r2, [pc, #556]	@ (8003b2c <HAL_ADC_IRQHandler+0x4ac>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d009      	beq.n	8003916 <HAL_ADC_IRQHandler+0x296>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a8a      	ldr	r2, [pc, #552]	@ (8003b30 <HAL_ADC_IRQHandler+0x4b0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d002      	beq.n	8003912 <HAL_ADC_IRQHandler+0x292>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	e003      	b.n	800391a <HAL_ADC_IRQHandler+0x29a>
 8003912:	4b88      	ldr	r3, [pc, #544]	@ (8003b34 <HAL_ADC_IRQHandler+0x4b4>)
 8003914:	e001      	b.n	800391a <HAL_ADC_IRQHandler+0x29a>
 8003916:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800391a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d047      	beq.n	80039b8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <HAL_ADC_IRQHandler+0x2c2>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d03f      	beq.n	80039b8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800393e:	2b00      	cmp	r3, #0
 8003940:	d13a      	bne.n	80039b8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394c:	2b40      	cmp	r3, #64	@ 0x40
 800394e:	d133      	bne.n	80039b8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d12e      	bne.n	80039b8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fbea 	bl	8003138 <LL_ADC_INJ_IsConversionOngoing>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d11a      	bne.n	80039a0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003978:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d112      	bne.n	80039b8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003996:	f043 0201 	orr.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800399e:	e00b      	b.n	80039b8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a4:	f043 0210 	orr.w	r2, r3, #16
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b0:	f043 0201 	orr.w	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fe79 	bl	80046b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2260      	movs	r2, #96	@ 0x60
 80039c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d011      	beq.n	80039f4 <HAL_ADC_IRQHandler+0x374>
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00c      	beq.n	80039f4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f8be 	bl	8003b68 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2280      	movs	r2, #128	@ 0x80
 80039f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d012      	beq.n	8003a24 <HAL_ADC_IRQHandler+0x3a4>
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00d      	beq.n	8003a24 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fe5f 	bl	80046d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d012      	beq.n	8003a54 <HAL_ADC_IRQHandler+0x3d4>
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00d      	beq.n	8003a54 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fe51 	bl	80046ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d043      	beq.n	8003ae6 <HAL_ADC_IRQHandler+0x466>
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d03e      	beq.n	8003ae6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003a70:	2301      	movs	r3, #1
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a74:	e021      	b.n	8003aba <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d015      	beq.n	8003aa8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a84:	d004      	beq.n	8003a90 <HAL_ADC_IRQHandler+0x410>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a28      	ldr	r2, [pc, #160]	@ (8003b2c <HAL_ADC_IRQHandler+0x4ac>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d101      	bne.n	8003a94 <HAL_ADC_IRQHandler+0x414>
 8003a90:	4b29      	ldr	r3, [pc, #164]	@ (8003b38 <HAL_ADC_IRQHandler+0x4b8>)
 8003a92:	e000      	b.n	8003a96 <HAL_ADC_IRQHandler+0x416>
 8003a94:	4b29      	ldr	r3, [pc, #164]	@ (8003b3c <HAL_ADC_IRQHandler+0x4bc>)
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff faa4 	bl	8002fe4 <LL_ADC_GetMultiDMATransfer>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa6:	e008      	b.n	8003aba <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10e      	bne.n	8003ade <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad0:	f043 0202 	orr.w	r2, r3, #2
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f84f 	bl	8003b7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2210      	movs	r2, #16
 8003ae4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d018      	beq.n	8003b22 <HAL_ADC_IRQHandler+0x4a2>
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d013      	beq.n	8003b22 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0a:	f043 0208 	orr.w	r2, r3, #8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b1a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fdd1 	bl	80046c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003b22:	bf00      	nop
 8003b24:	3728      	adds	r7, #40	@ 0x28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	50000100 	.word	0x50000100
 8003b30:	50000500 	.word	0x50000500
 8003b34:	50000400 	.word	0x50000400
 8003b38:	50000300 	.word	0x50000300
 8003b3c:	50000700 	.word	0x50000700

08003b40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b0b6      	sub	sp, #216	@ 0xd8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d102      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x24>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	f000 bc13 	b.w	80043da <HAL_ADC_ConfigChannel+0x84a>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff faa6 	bl	8003112 <LL_ADC_REG_IsConversionOngoing>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f040 83f3 	bne.w	80043b4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6859      	ldr	r1, [r3, #4]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f7ff f965 	bl	8002eaa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff fa94 	bl	8003112 <LL_ADC_REG_IsConversionOngoing>
 8003bea:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff faa0 	bl	8003138 <LL_ADC_INJ_IsConversionOngoing>
 8003bf8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bfc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f040 81d9 	bne.w	8003fb8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f040 81d4 	bne.w	8003fb8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c18:	d10f      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2200      	movs	r2, #0
 8003c24:	4619      	mov	r1, r3
 8003c26:	f7ff f97f 	bl	8002f28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff f913 	bl	8002e5e <LL_ADC_SetSamplingTimeCommonConfig>
 8003c38:	e00e      	b.n	8003c58 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	6819      	ldr	r1, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f7ff f96e 	bl	8002f28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff f903 	bl	8002e5e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	08db      	lsrs	r3, r3, #3
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d022      	beq.n	8003cc0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6919      	ldr	r1, [r3, #16]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c8a:	f7ff f85d 	bl	8002d48 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6919      	ldr	r1, [r3, #16]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f7ff f8a9 	bl	8002df2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d102      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x126>
 8003cb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cb4:	e000      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x128>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f7ff f8b5 	bl	8002e28 <LL_ADC_SetOffsetSaturation>
 8003cbe:	e17b      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff f862 	bl	8002d90 <LL_ADC_GetOffsetChannel>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x15c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff f857 	bl	8002d90 <LL_ADC_GetOffsetChannel>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	0e9b      	lsrs	r3, r3, #26
 8003ce6:	f003 021f 	and.w	r2, r3, #31
 8003cea:	e01e      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x19a>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff f84c 	bl	8002d90 <LL_ADC_GetOffsetChannel>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d02:	fa93 f3a3 	rbit	r3, r3
 8003d06:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003d1a:	2320      	movs	r3, #32
 8003d1c:	e004      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003d1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d22:	fab3 f383 	clz	r3, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d105      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x1b2>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	0e9b      	lsrs	r3, r3, #26
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	e018      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x1e4>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003d5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003d66:	2320      	movs	r3, #32
 8003d68:	e004      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003d6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d6e:	fab3 f383 	clz	r3, r3
 8003d72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d106      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff f81b 	bl	8002dbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe ffff 	bl	8002d90 <LL_ADC_GetOffsetChannel>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x222>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2101      	movs	r1, #1
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe fff4 	bl	8002d90 <LL_ADC_GetOffsetChannel>
 8003da8:	4603      	mov	r3, r0
 8003daa:	0e9b      	lsrs	r3, r3, #26
 8003dac:	f003 021f 	and.w	r2, r3, #31
 8003db0:	e01e      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x260>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2101      	movs	r1, #1
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe ffe9 	bl	8002d90 <LL_ADC_GetOffsetChannel>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dc8:	fa93 f3a3 	rbit	r3, r3
 8003dcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003dd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003dd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003de0:	2320      	movs	r3, #32
 8003de2:	e004      	b.n	8003dee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003de4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003de8:	fab3 f383 	clz	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d105      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x278>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	0e9b      	lsrs	r3, r3, #26
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	e018      	b.n	8003e3a <HAL_ADC_ConfigChannel+0x2aa>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e14:	fa93 f3a3 	rbit	r3, r3
 8003e18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003e1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003e2c:	2320      	movs	r3, #32
 8003e2e:	e004      	b.n	8003e3a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003e30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e34:	fab3 f383 	clz	r3, r3
 8003e38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d106      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2200      	movs	r2, #0
 8003e44:	2101      	movs	r1, #1
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe ffb8 	bl	8002dbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2102      	movs	r1, #2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe ff9c 	bl	8002d90 <LL_ADC_GetOffsetChannel>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10a      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x2e8>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2102      	movs	r1, #2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe ff91 	bl	8002d90 <LL_ADC_GetOffsetChannel>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	0e9b      	lsrs	r3, r3, #26
 8003e72:	f003 021f 	and.w	r2, r3, #31
 8003e76:	e01e      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x326>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2102      	movs	r1, #2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe ff86 	bl	8002d90 <LL_ADC_GetOffsetChannel>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e8e:	fa93 f3a3 	rbit	r3, r3
 8003e92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003e96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003e9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003ea6:	2320      	movs	r3, #32
 8003ea8:	e004      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003eaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003eae:	fab3 f383 	clz	r3, r3
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d105      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x33e>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	0e9b      	lsrs	r3, r3, #26
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	e016      	b.n	8003efc <HAL_ADC_ConfigChannel+0x36c>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003eda:	fa93 f3a3 	rbit	r3, r3
 8003ede:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003ee0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ee2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003ee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003eee:	2320      	movs	r3, #32
 8003ef0:	e004      	b.n	8003efc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003ef2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d106      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2200      	movs	r2, #0
 8003f06:	2102      	movs	r1, #2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fe ff57 	bl	8002dbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2103      	movs	r1, #3
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe ff3b 	bl	8002d90 <LL_ADC_GetOffsetChannel>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10a      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x3aa>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2103      	movs	r1, #3
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe ff30 	bl	8002d90 <LL_ADC_GetOffsetChannel>
 8003f30:	4603      	mov	r3, r0
 8003f32:	0e9b      	lsrs	r3, r3, #26
 8003f34:	f003 021f 	and.w	r2, r3, #31
 8003f38:	e017      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x3da>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2103      	movs	r1, #3
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fe ff25 	bl	8002d90 <LL_ADC_GetOffsetChannel>
 8003f46:	4603      	mov	r3, r0
 8003f48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f4c:	fa93 f3a3 	rbit	r3, r3
 8003f50:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003f52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f54:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003f56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003f5c:	2320      	movs	r3, #32
 8003f5e:	e003      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003f60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f62:	fab3 f383 	clz	r3, r3
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d105      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x3f2>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	0e9b      	lsrs	r3, r3, #26
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	e011      	b.n	8003fa6 <HAL_ADC_ConfigChannel+0x416>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f8a:	fa93 f3a3 	rbit	r3, r3
 8003f8e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003f90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f92:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003f94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003f9a:	2320      	movs	r3, #32
 8003f9c:	e003      	b.n	8003fa6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003f9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fa0:	fab3 f383 	clz	r3, r3
 8003fa4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d106      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2103      	movs	r1, #3
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe ff02 	bl	8002dbc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff f881 	bl	80030c4 <LL_ADC_IsEnabled>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f040 813d 	bne.w	8004244 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6819      	ldr	r1, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f7fe ffd2 	bl	8002f80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4aa2      	ldr	r2, [pc, #648]	@ (800426c <HAL_ADC_ConfigChannel+0x6dc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	f040 812e 	bne.w	8004244 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x480>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	0e9b      	lsrs	r3, r3, #26
 8003ffe:	3301      	adds	r3, #1
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	2b09      	cmp	r3, #9
 8004006:	bf94      	ite	ls
 8004008:	2301      	movls	r3, #1
 800400a:	2300      	movhi	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e019      	b.n	8004044 <HAL_ADC_ConfigChannel+0x4b4>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004018:	fa93 f3a3 	rbit	r3, r3
 800401c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800401e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004020:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004022:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004028:	2320      	movs	r3, #32
 800402a:	e003      	b.n	8004034 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800402c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	3301      	adds	r3, #1
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	2b09      	cmp	r3, #9
 800403c:	bf94      	ite	ls
 800403e:	2301      	movls	r3, #1
 8004040:	2300      	movhi	r3, #0
 8004042:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004044:	2b00      	cmp	r3, #0
 8004046:	d079      	beq.n	800413c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004050:	2b00      	cmp	r3, #0
 8004052:	d107      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x4d4>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	0e9b      	lsrs	r3, r3, #26
 800405a:	3301      	adds	r3, #1
 800405c:	069b      	lsls	r3, r3, #26
 800405e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004062:	e015      	b.n	8004090 <HAL_ADC_ConfigChannel+0x500>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004074:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800407c:	2320      	movs	r3, #32
 800407e:	e003      	b.n	8004088 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004082:	fab3 f383 	clz	r3, r3
 8004086:	b2db      	uxtb	r3, r3
 8004088:	3301      	adds	r3, #1
 800408a:	069b      	lsls	r3, r3, #26
 800408c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x520>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	0e9b      	lsrs	r3, r3, #26
 80040a2:	3301      	adds	r3, #1
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	e017      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x550>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040b8:	fa93 f3a3 	rbit	r3, r3
 80040bc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80040be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80040c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80040c8:	2320      	movs	r3, #32
 80040ca:	e003      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80040cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ce:	fab3 f383 	clz	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	3301      	adds	r3, #1
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	2101      	movs	r1, #1
 80040dc:	fa01 f303 	lsl.w	r3, r1, r3
 80040e0:	ea42 0103 	orr.w	r1, r2, r3
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10a      	bne.n	8004106 <HAL_ADC_ConfigChannel+0x576>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	0e9b      	lsrs	r3, r3, #26
 80040f6:	3301      	adds	r3, #1
 80040f8:	f003 021f 	and.w	r2, r3, #31
 80040fc:	4613      	mov	r3, r2
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	4413      	add	r3, r2
 8004102:	051b      	lsls	r3, r3, #20
 8004104:	e018      	b.n	8004138 <HAL_ADC_ConfigChannel+0x5a8>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004116:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800411e:	2320      	movs	r3, #32
 8004120:	e003      	b.n	800412a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004124:	fab3 f383 	clz	r3, r3
 8004128:	b2db      	uxtb	r3, r3
 800412a:	3301      	adds	r3, #1
 800412c:	f003 021f 	and.w	r2, r3, #31
 8004130:	4613      	mov	r3, r2
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	4413      	add	r3, r2
 8004136:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004138:	430b      	orrs	r3, r1
 800413a:	e07e      	b.n	800423a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004144:	2b00      	cmp	r3, #0
 8004146:	d107      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x5c8>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0e9b      	lsrs	r3, r3, #26
 800414e:	3301      	adds	r3, #1
 8004150:	069b      	lsls	r3, r3, #26
 8004152:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004156:	e015      	b.n	8004184 <HAL_ADC_ConfigChannel+0x5f4>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004160:	fa93 f3a3 	rbit	r3, r3
 8004164:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004168:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800416a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004170:	2320      	movs	r3, #32
 8004172:	e003      	b.n	800417c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	3301      	adds	r3, #1
 800417e:	069b      	lsls	r3, r3, #26
 8004180:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418c:	2b00      	cmp	r3, #0
 800418e:	d109      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x614>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	0e9b      	lsrs	r3, r3, #26
 8004196:	3301      	adds	r3, #1
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	2101      	movs	r1, #1
 800419e:	fa01 f303 	lsl.w	r3, r1, r3
 80041a2:	e017      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x644>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	fa93 f3a3 	rbit	r3, r3
 80041b0:	61fb      	str	r3, [r7, #28]
  return result;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80041b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80041bc:	2320      	movs	r3, #32
 80041be:	e003      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80041c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	3301      	adds	r3, #1
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	2101      	movs	r1, #1
 80041d0:	fa01 f303 	lsl.w	r3, r1, r3
 80041d4:	ea42 0103 	orr.w	r1, r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10d      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x670>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	0e9b      	lsrs	r3, r3, #26
 80041ea:	3301      	adds	r3, #1
 80041ec:	f003 021f 	and.w	r2, r3, #31
 80041f0:	4613      	mov	r3, r2
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	4413      	add	r3, r2
 80041f6:	3b1e      	subs	r3, #30
 80041f8:	051b      	lsls	r3, r3, #20
 80041fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041fe:	e01b      	b.n	8004238 <HAL_ADC_ConfigChannel+0x6a8>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	fa93 f3a3 	rbit	r3, r3
 800420c:	613b      	str	r3, [r7, #16]
  return result;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004218:	2320      	movs	r3, #32
 800421a:	e003      	b.n	8004224 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	fab3 f383 	clz	r3, r3
 8004222:	b2db      	uxtb	r3, r3
 8004224:	3301      	adds	r3, #1
 8004226:	f003 021f 	and.w	r2, r3, #31
 800422a:	4613      	mov	r3, r2
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	4413      	add	r3, r2
 8004230:	3b1e      	subs	r3, #30
 8004232:	051b      	lsls	r3, r3, #20
 8004234:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004238:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800423e:	4619      	mov	r1, r3
 8004240:	f7fe fe72 	bl	8002f28 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	4b09      	ldr	r3, [pc, #36]	@ (8004270 <HAL_ADC_ConfigChannel+0x6e0>)
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80be 	beq.w	80043ce <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800425a:	d004      	beq.n	8004266 <HAL_ADC_ConfigChannel+0x6d6>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a04      	ldr	r2, [pc, #16]	@ (8004274 <HAL_ADC_ConfigChannel+0x6e4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d10a      	bne.n	800427c <HAL_ADC_ConfigChannel+0x6ec>
 8004266:	4b04      	ldr	r3, [pc, #16]	@ (8004278 <HAL_ADC_ConfigChannel+0x6e8>)
 8004268:	e009      	b.n	800427e <HAL_ADC_ConfigChannel+0x6ee>
 800426a:	bf00      	nop
 800426c:	407f0000 	.word	0x407f0000
 8004270:	80080000 	.word	0x80080000
 8004274:	50000100 	.word	0x50000100
 8004278:	50000300 	.word	0x50000300
 800427c:	4b59      	ldr	r3, [pc, #356]	@ (80043e4 <HAL_ADC_ConfigChannel+0x854>)
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe fd54 	bl	8002d2c <LL_ADC_GetCommonPathInternalCh>
 8004284:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a56      	ldr	r2, [pc, #344]	@ (80043e8 <HAL_ADC_ConfigChannel+0x858>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <HAL_ADC_ConfigChannel+0x70c>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a55      	ldr	r2, [pc, #340]	@ (80043ec <HAL_ADC_ConfigChannel+0x85c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d13a      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800429c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d134      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042b0:	d005      	beq.n	80042be <HAL_ADC_ConfigChannel+0x72e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a4e      	ldr	r2, [pc, #312]	@ (80043f0 <HAL_ADC_ConfigChannel+0x860>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	f040 8085 	bne.w	80043c8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042c6:	d004      	beq.n	80042d2 <HAL_ADC_ConfigChannel+0x742>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a49      	ldr	r2, [pc, #292]	@ (80043f4 <HAL_ADC_ConfigChannel+0x864>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d101      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x746>
 80042d2:	4a49      	ldr	r2, [pc, #292]	@ (80043f8 <HAL_ADC_ConfigChannel+0x868>)
 80042d4:	e000      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x748>
 80042d6:	4a43      	ldr	r2, [pc, #268]	@ (80043e4 <HAL_ADC_ConfigChannel+0x854>)
 80042d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f7fe fd0f 	bl	8002d06 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042e8:	4b44      	ldr	r3, [pc, #272]	@ (80043fc <HAL_ADC_ConfigChannel+0x86c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	099b      	lsrs	r3, r3, #6
 80042ee:	4a44      	ldr	r2, [pc, #272]	@ (8004400 <HAL_ADC_ConfigChannel+0x870>)
 80042f0:	fba2 2303 	umull	r2, r3, r2, r3
 80042f4:	099b      	lsrs	r3, r3, #6
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	4613      	mov	r3, r2
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004302:	e002      	b.n	800430a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3b01      	subs	r3, #1
 8004308:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f9      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004310:	e05a      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a3b      	ldr	r2, [pc, #236]	@ (8004404 <HAL_ADC_ConfigChannel+0x874>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d125      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800431c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004320:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d11f      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a31      	ldr	r2, [pc, #196]	@ (80043f4 <HAL_ADC_ConfigChannel+0x864>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d104      	bne.n	800433c <HAL_ADC_ConfigChannel+0x7ac>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a34      	ldr	r2, [pc, #208]	@ (8004408 <HAL_ADC_ConfigChannel+0x878>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d047      	beq.n	80043cc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004344:	d004      	beq.n	8004350 <HAL_ADC_ConfigChannel+0x7c0>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a2a      	ldr	r2, [pc, #168]	@ (80043f4 <HAL_ADC_ConfigChannel+0x864>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x7c4>
 8004350:	4a29      	ldr	r2, [pc, #164]	@ (80043f8 <HAL_ADC_ConfigChannel+0x868>)
 8004352:	e000      	b.n	8004356 <HAL_ADC_ConfigChannel+0x7c6>
 8004354:	4a23      	ldr	r2, [pc, #140]	@ (80043e4 <HAL_ADC_ConfigChannel+0x854>)
 8004356:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800435a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f7fe fcd0 	bl	8002d06 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004366:	e031      	b.n	80043cc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a27      	ldr	r2, [pc, #156]	@ (800440c <HAL_ADC_ConfigChannel+0x87c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d12d      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004372:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d127      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1c      	ldr	r2, [pc, #112]	@ (80043f4 <HAL_ADC_ConfigChannel+0x864>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d022      	beq.n	80043ce <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004390:	d004      	beq.n	800439c <HAL_ADC_ConfigChannel+0x80c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a17      	ldr	r2, [pc, #92]	@ (80043f4 <HAL_ADC_ConfigChannel+0x864>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d101      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x810>
 800439c:	4a16      	ldr	r2, [pc, #88]	@ (80043f8 <HAL_ADC_ConfigChannel+0x868>)
 800439e:	e000      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x812>
 80043a0:	4a10      	ldr	r2, [pc, #64]	@ (80043e4 <HAL_ADC_ConfigChannel+0x854>)
 80043a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043aa:	4619      	mov	r1, r3
 80043ac:	4610      	mov	r0, r2
 80043ae:	f7fe fcaa 	bl	8002d06 <LL_ADC_SetCommonPathInternalCh>
 80043b2:	e00c      	b.n	80043ce <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b8:	f043 0220 	orr.w	r2, r3, #32
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80043c6:	e002      	b.n	80043ce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043c8:	bf00      	nop
 80043ca:	e000      	b.n	80043ce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80043d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80043da:	4618      	mov	r0, r3
 80043dc:	37d8      	adds	r7, #216	@ 0xd8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	50000700 	.word	0x50000700
 80043e8:	c3210000 	.word	0xc3210000
 80043ec:	90c00010 	.word	0x90c00010
 80043f0:	50000600 	.word	0x50000600
 80043f4:	50000100 	.word	0x50000100
 80043f8:	50000300 	.word	0x50000300
 80043fc:	2000000c 	.word	0x2000000c
 8004400:	053e2d63 	.word	0x053e2d63
 8004404:	c7520000 	.word	0xc7520000
 8004408:	50000500 	.word	0x50000500
 800440c:	cb840000 	.word	0xcb840000

08004410 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004418:	2300      	movs	r3, #0
 800441a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f7fe fe4f 	bl	80030c4 <LL_ADC_IsEnabled>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d176      	bne.n	800451a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	4b3c      	ldr	r3, [pc, #240]	@ (8004524 <ADC_Enable+0x114>)
 8004434:	4013      	ands	r3, r2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00d      	beq.n	8004456 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443e:	f043 0210 	orr.w	r2, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e062      	b.n	800451c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe fe1e 	bl	800309c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004468:	d004      	beq.n	8004474 <ADC_Enable+0x64>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2e      	ldr	r2, [pc, #184]	@ (8004528 <ADC_Enable+0x118>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d101      	bne.n	8004478 <ADC_Enable+0x68>
 8004474:	4b2d      	ldr	r3, [pc, #180]	@ (800452c <ADC_Enable+0x11c>)
 8004476:	e000      	b.n	800447a <ADC_Enable+0x6a>
 8004478:	4b2d      	ldr	r3, [pc, #180]	@ (8004530 <ADC_Enable+0x120>)
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe fc56 	bl	8002d2c <LL_ADC_GetCommonPathInternalCh>
 8004480:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004482:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004486:	2b00      	cmp	r3, #0
 8004488:	d013      	beq.n	80044b2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800448a:	4b2a      	ldr	r3, [pc, #168]	@ (8004534 <ADC_Enable+0x124>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	099b      	lsrs	r3, r3, #6
 8004490:	4a29      	ldr	r2, [pc, #164]	@ (8004538 <ADC_Enable+0x128>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	4613      	mov	r3, r2
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80044a4:	e002      	b.n	80044ac <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f9      	bne.n	80044a6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044b2:	f7fe fc09 	bl	8002cc8 <HAL_GetTick>
 80044b6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044b8:	e028      	b.n	800450c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fe00 	bl	80030c4 <LL_ADC_IsEnabled>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d104      	bne.n	80044d4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe fde4 	bl	800309c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044d4:	f7fe fbf8 	bl	8002cc8 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d914      	bls.n	800450c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d00d      	beq.n	800450c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f4:	f043 0210 	orr.w	r2, r3, #16
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004500:	f043 0201 	orr.w	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e007      	b.n	800451c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b01      	cmp	r3, #1
 8004518:	d1cf      	bne.n	80044ba <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	8000003f 	.word	0x8000003f
 8004528:	50000100 	.word	0x50000100
 800452c:	50000300 	.word	0x50000300
 8004530:	50000700 	.word	0x50000700
 8004534:	2000000c 	.word	0x2000000c
 8004538:	053e2d63 	.word	0x053e2d63

0800453c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004552:	2b00      	cmp	r3, #0
 8004554:	d14b      	bne.n	80045ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800455a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d021      	beq.n	80045b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f7fe fc85 	bl	8002e84 <LL_ADC_REG_IsTriggerSourceSWStart>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d032      	beq.n	80045e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d12b      	bne.n	80045e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004592:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d11f      	bne.n	80045e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045b2:	e018      	b.n	80045e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d111      	bne.n	80045e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d105      	bne.n	80045e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045de:	f043 0201 	orr.w	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f7ff faaa 	bl	8003b40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045ec:	e00e      	b.n	800460c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff fabe 	bl	8003b7c <HAL_ADC_ErrorCallback>
}
 8004600:	e004      	b.n	800460c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	4798      	blx	r3
}
 800460c:	bf00      	nop
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004620:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7ff fa96 	bl	8003b54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004642:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800464e:	f043 0204 	orr.w	r2, r3, #4
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff fa90 	bl	8003b7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800465c:	bf00      	nop
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <LL_ADC_IsEnabled>:
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <LL_ADC_IsEnabled+0x18>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <LL_ADC_IsEnabled+0x1a>
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <LL_ADC_REG_IsConversionOngoing>:
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b04      	cmp	r3, #4
 800469c:	d101      	bne.n	80046a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004714:	b590      	push	{r4, r7, lr}
 8004716:	b0a1      	sub	sp, #132	@ 0x84
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800472e:	2302      	movs	r3, #2
 8004730:	e0e7      	b.n	8004902 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800473a:	2300      	movs	r3, #0
 800473c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800473e:	2300      	movs	r3, #0
 8004740:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800474a:	d102      	bne.n	8004752 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800474c:	4b6f      	ldr	r3, [pc, #444]	@ (800490c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	e009      	b.n	8004766 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a6e      	ldr	r2, [pc, #440]	@ (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d102      	bne.n	8004762 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800475c:	4b6d      	ldr	r3, [pc, #436]	@ (8004914 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800475e:	60bb      	str	r3, [r7, #8]
 8004760:	e001      	b.n	8004766 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004762:	2300      	movs	r3, #0
 8004764:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004770:	f043 0220 	orr.w	r2, r3, #32
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0be      	b.n	8004902 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff ff7f 	bl	800468a <LL_ADC_REG_IsConversionOngoing>
 800478c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff ff79 	bl	800468a <LL_ADC_REG_IsConversionOngoing>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	f040 80a0 	bne.w	80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80047a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f040 809c 	bne.w	80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047b0:	d004      	beq.n	80047bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a55      	ldr	r2, [pc, #340]	@ (800490c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d101      	bne.n	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80047bc:	4b56      	ldr	r3, [pc, #344]	@ (8004918 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80047be:	e000      	b.n	80047c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80047c0:	4b56      	ldr	r3, [pc, #344]	@ (800491c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80047c2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d04b      	beq.n	8004864 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80047cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6859      	ldr	r1, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80047de:	035b      	lsls	r3, r3, #13
 80047e0:	430b      	orrs	r3, r1
 80047e2:	431a      	orrs	r2, r3
 80047e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047f0:	d004      	beq.n	80047fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a45      	ldr	r2, [pc, #276]	@ (800490c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d10f      	bne.n	800481c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80047fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004800:	f7ff ff30 	bl	8004664 <LL_ADC_IsEnabled>
 8004804:	4604      	mov	r4, r0
 8004806:	4841      	ldr	r0, [pc, #260]	@ (800490c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004808:	f7ff ff2c 	bl	8004664 <LL_ADC_IsEnabled>
 800480c:	4603      	mov	r3, r0
 800480e:	4323      	orrs	r3, r4
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	e012      	b.n	8004842 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800481c:	483c      	ldr	r0, [pc, #240]	@ (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800481e:	f7ff ff21 	bl	8004664 <LL_ADC_IsEnabled>
 8004822:	4604      	mov	r4, r0
 8004824:	483b      	ldr	r0, [pc, #236]	@ (8004914 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004826:	f7ff ff1d 	bl	8004664 <LL_ADC_IsEnabled>
 800482a:	4603      	mov	r3, r0
 800482c:	431c      	orrs	r4, r3
 800482e:	483c      	ldr	r0, [pc, #240]	@ (8004920 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004830:	f7ff ff18 	bl	8004664 <LL_ADC_IsEnabled>
 8004834:	4603      	mov	r3, r0
 8004836:	4323      	orrs	r3, r4
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf0c      	ite	eq
 800483c:	2301      	moveq	r3, #1
 800483e:	2300      	movne	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d056      	beq.n	80048f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004846:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800484e:	f023 030f 	bic.w	r3, r3, #15
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	6811      	ldr	r1, [r2, #0]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	6892      	ldr	r2, [r2, #8]
 800485a:	430a      	orrs	r2, r1
 800485c:	431a      	orrs	r2, r3
 800485e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004860:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004862:	e047      	b.n	80048f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004864:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800486c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800486e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004878:	d004      	beq.n	8004884 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a23      	ldr	r2, [pc, #140]	@ (800490c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d10f      	bne.n	80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004884:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004888:	f7ff feec 	bl	8004664 <LL_ADC_IsEnabled>
 800488c:	4604      	mov	r4, r0
 800488e:	481f      	ldr	r0, [pc, #124]	@ (800490c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004890:	f7ff fee8 	bl	8004664 <LL_ADC_IsEnabled>
 8004894:	4603      	mov	r3, r0
 8004896:	4323      	orrs	r3, r4
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	e012      	b.n	80048ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80048a4:	481a      	ldr	r0, [pc, #104]	@ (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80048a6:	f7ff fedd 	bl	8004664 <LL_ADC_IsEnabled>
 80048aa:	4604      	mov	r4, r0
 80048ac:	4819      	ldr	r0, [pc, #100]	@ (8004914 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80048ae:	f7ff fed9 	bl	8004664 <LL_ADC_IsEnabled>
 80048b2:	4603      	mov	r3, r0
 80048b4:	431c      	orrs	r4, r3
 80048b6:	481a      	ldr	r0, [pc, #104]	@ (8004920 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80048b8:	f7ff fed4 	bl	8004664 <LL_ADC_IsEnabled>
 80048bc:	4603      	mov	r3, r0
 80048be:	4323      	orrs	r3, r4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d012      	beq.n	80048f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80048ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80048d6:	f023 030f 	bic.w	r3, r3, #15
 80048da:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80048dc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048de:	e009      	b.n	80048f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e4:	f043 0220 	orr.w	r2, r3, #32
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80048f2:	e000      	b.n	80048f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80048fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004902:	4618      	mov	r0, r3
 8004904:	3784      	adds	r7, #132	@ 0x84
 8004906:	46bd      	mov	sp, r7
 8004908:	bd90      	pop	{r4, r7, pc}
 800490a:	bf00      	nop
 800490c:	50000100 	.word	0x50000100
 8004910:	50000400 	.word	0x50000400
 8004914:	50000500 	.word	0x50000500
 8004918:	50000300 	.word	0x50000300
 800491c:	50000700 	.word	0x50000700
 8004920:	50000600 	.word	0x50000600

08004924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004934:	4b0c      	ldr	r3, [pc, #48]	@ (8004968 <__NVIC_SetPriorityGrouping+0x44>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004940:	4013      	ands	r3, r2
 8004942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800494c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004956:	4a04      	ldr	r2, [pc, #16]	@ (8004968 <__NVIC_SetPriorityGrouping+0x44>)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	60d3      	str	r3, [r2, #12]
}
 800495c:	bf00      	nop
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	e000ed00 	.word	0xe000ed00

0800496c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004970:	4b04      	ldr	r3, [pc, #16]	@ (8004984 <__NVIC_GetPriorityGrouping+0x18>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	0a1b      	lsrs	r3, r3, #8
 8004976:	f003 0307 	and.w	r3, r3, #7
}
 800497a:	4618      	mov	r0, r3
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	e000ed00 	.word	0xe000ed00

08004988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004996:	2b00      	cmp	r3, #0
 8004998:	db0b      	blt.n	80049b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	f003 021f 	and.w	r2, r3, #31
 80049a0:	4907      	ldr	r1, [pc, #28]	@ (80049c0 <__NVIC_EnableIRQ+0x38>)
 80049a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	2001      	movs	r0, #1
 80049aa:	fa00 f202 	lsl.w	r2, r0, r2
 80049ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	e000e100 	.word	0xe000e100

080049c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	6039      	str	r1, [r7, #0]
 80049ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	db0a      	blt.n	80049ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	490c      	ldr	r1, [pc, #48]	@ (8004a10 <__NVIC_SetPriority+0x4c>)
 80049de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e2:	0112      	lsls	r2, r2, #4
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	440b      	add	r3, r1
 80049e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049ec:	e00a      	b.n	8004a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	4908      	ldr	r1, [pc, #32]	@ (8004a14 <__NVIC_SetPriority+0x50>)
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	3b04      	subs	r3, #4
 80049fc:	0112      	lsls	r2, r2, #4
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	440b      	add	r3, r1
 8004a02:	761a      	strb	r2, [r3, #24]
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	e000e100 	.word	0xe000e100
 8004a14:	e000ed00 	.word	0xe000ed00

08004a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	@ 0x24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f1c3 0307 	rsb	r3, r3, #7
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	bf28      	it	cs
 8004a36:	2304      	movcs	r3, #4
 8004a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	2b06      	cmp	r3, #6
 8004a40:	d902      	bls.n	8004a48 <NVIC_EncodePriority+0x30>
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	3b03      	subs	r3, #3
 8004a46:	e000      	b.n	8004a4a <NVIC_EncodePriority+0x32>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43da      	mvns	r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a60:	f04f 31ff 	mov.w	r1, #4294967295
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6a:	43d9      	mvns	r1, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a70:	4313      	orrs	r3, r2
         );
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3724      	adds	r7, #36	@ 0x24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a90:	d301      	bcc.n	8004a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a92:	2301      	movs	r3, #1
 8004a94:	e00f      	b.n	8004ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a96:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac0 <SysTick_Config+0x40>)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a9e:	210f      	movs	r1, #15
 8004aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa4:	f7ff ff8e 	bl	80049c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004aa8:	4b05      	ldr	r3, [pc, #20]	@ (8004ac0 <SysTick_Config+0x40>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aae:	4b04      	ldr	r3, [pc, #16]	@ (8004ac0 <SysTick_Config+0x40>)
 8004ab0:	2207      	movs	r2, #7
 8004ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	e000e010 	.word	0xe000e010

08004ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff ff29 	bl	8004924 <__NVIC_SetPriorityGrouping>
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ae8:	f7ff ff40 	bl	800496c <__NVIC_GetPriorityGrouping>
 8004aec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	6978      	ldr	r0, [r7, #20]
 8004af4:	f7ff ff90 	bl	8004a18 <NVIC_EncodePriority>
 8004af8:	4602      	mov	r2, r0
 8004afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004afe:	4611      	mov	r1, r2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff ff5f 	bl	80049c4 <__NVIC_SetPriority>
}
 8004b06:	bf00      	nop
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	4603      	mov	r3, r0
 8004b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff ff33 	bl	8004988 <__NVIC_EnableIRQ>
}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b082      	sub	sp, #8
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff ffa4 	bl	8004a80 <SysTick_Config>
 8004b38:	4603      	mov	r3, r0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e08d      	b.n	8004c72 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4b47      	ldr	r3, [pc, #284]	@ (8004c7c <HAL_DMA_Init+0x138>)
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d80f      	bhi.n	8004b82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	4b45      	ldr	r3, [pc, #276]	@ (8004c80 <HAL_DMA_Init+0x13c>)
 8004b6a:	4413      	add	r3, r2
 8004b6c:	4a45      	ldr	r2, [pc, #276]	@ (8004c84 <HAL_DMA_Init+0x140>)
 8004b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b72:	091b      	lsrs	r3, r3, #4
 8004b74:	009a      	lsls	r2, r3, #2
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a42      	ldr	r2, [pc, #264]	@ (8004c88 <HAL_DMA_Init+0x144>)
 8004b7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b80:	e00e      	b.n	8004ba0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	4b40      	ldr	r3, [pc, #256]	@ (8004c8c <HAL_DMA_Init+0x148>)
 8004b8a:	4413      	add	r3, r2
 8004b8c:	4a3d      	ldr	r2, [pc, #244]	@ (8004c84 <HAL_DMA_Init+0x140>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	091b      	lsrs	r3, r3, #4
 8004b94:	009a      	lsls	r2, r3, #2
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a3c      	ldr	r2, [pc, #240]	@ (8004c90 <HAL_DMA_Init+0x14c>)
 8004b9e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fa76 	bl	80050e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c00:	d102      	bne.n	8004c08 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c1c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d010      	beq.n	8004c48 <HAL_DMA_Init+0x104>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d80c      	bhi.n	8004c48 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fa96 	bl	8005160 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	e008      	b.n	8004c5a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40020407 	.word	0x40020407
 8004c80:	bffdfff8 	.word	0xbffdfff8
 8004c84:	cccccccd 	.word	0xcccccccd
 8004c88:	40020000 	.word	0x40020000
 8004c8c:	bffdfbf8 	.word	0xbffdfbf8
 8004c90:	40020400 	.word	0x40020400

08004c94 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_DMA_Start_IT+0x20>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e066      	b.n	8004d82 <HAL_DMA_Start_IT+0xee>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d155      	bne.n	8004d74 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0201 	bic.w	r2, r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f9bb 	bl	8005068 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d008      	beq.n	8004d0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 020e 	orr.w	r2, r2, #14
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	e00f      	b.n	8004d2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0204 	bic.w	r2, r2, #4
 8004d1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 020a 	orr.w	r2, r2, #10
 8004d2a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d48:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d007      	beq.n	8004d62 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d60:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	e005      	b.n	8004d80 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d005      	beq.n	8004dae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2204      	movs	r2, #4
 8004da6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	73fb      	strb	r3, [r7, #15]
 8004dac:	e037      	b.n	8004e1e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 020e 	bic.w	r2, r2, #14
 8004dbc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dcc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0201 	bic.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de2:	f003 021f 	and.w	r2, r3, #31
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dea:	2101      	movs	r1, #1
 8004dec:	fa01 f202 	lsl.w	r2, r1, r2
 8004df0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004dfa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00c      	beq.n	8004e1e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e12:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e1c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d00d      	beq.n	8004e70 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2204      	movs	r2, #4
 8004e58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
 8004e6e:	e047      	b.n	8004f00 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 020e 	bic.w	r2, r2, #14
 8004e7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0201 	bic.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea4:	f003 021f 	and.w	r2, r3, #31
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	2101      	movs	r1, #1
 8004eae:	fa01 f202 	lsl.w	r2, r1, r2
 8004eb2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ebc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00c      	beq.n	8004ee0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ed4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ede:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	4798      	blx	r3
    }
  }
  return status;
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	409a      	lsls	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4013      	ands	r3, r2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d026      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x7a>
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d021      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d107      	bne.n	8004f5e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0204 	bic.w	r2, r2, #4
 8004f5c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f62:	f003 021f 	and.w	r2, r3, #31
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6a:	2104      	movs	r1, #4
 8004f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f70:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d071      	beq.n	800505e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004f82:	e06c      	b.n	800505e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	409a      	lsls	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d02e      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d029      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 020a 	bic.w	r2, r2, #10
 8004fbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fcc:	f003 021f 	and.w	r2, r3, #31
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd4:	2102      	movs	r1, #2
 8004fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8004fda:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d038      	beq.n	800505e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004ff4:	e033      	b.n	800505e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	2208      	movs	r2, #8
 8005000:	409a      	lsls	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4013      	ands	r3, r2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d02a      	beq.n	8005060 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b00      	cmp	r3, #0
 8005012:	d025      	beq.n	8005060 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 020e 	bic.w	r2, r2, #14
 8005022:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005028:	f003 021f 	and.w	r2, r3, #31
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	2101      	movs	r1, #1
 8005032:	fa01 f202 	lsl.w	r2, r1, r2
 8005036:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005052:	2b00      	cmp	r3, #0
 8005054:	d004      	beq.n	8005060 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800505e:	bf00      	nop
 8005060:	bf00      	nop
}
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800507e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005084:	2b00      	cmp	r3, #0
 8005086:	d004      	beq.n	8005092 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005090:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005096:	f003 021f 	and.w	r2, r3, #31
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509e:	2101      	movs	r1, #1
 80050a0:	fa01 f202 	lsl.w	r2, r1, r2
 80050a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b10      	cmp	r3, #16
 80050b4:	d108      	bne.n	80050c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80050c6:	e007      	b.n	80050d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	60da      	str	r2, [r3, #12]
}
 80050d8:	bf00      	nop
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	4b16      	ldr	r3, [pc, #88]	@ (800514c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d802      	bhi.n	80050fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80050f8:	4b15      	ldr	r3, [pc, #84]	@ (8005150 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	e001      	b.n	8005102 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80050fe:	4b15      	ldr	r3, [pc, #84]	@ (8005154 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005100:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	3b08      	subs	r3, #8
 800510e:	4a12      	ldr	r2, [pc, #72]	@ (8005158 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	091b      	lsrs	r3, r3, #4
 8005116:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511c:	089b      	lsrs	r3, r3, #2
 800511e:	009a      	lsls	r2, r3, #2
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	4413      	add	r3, r2
 8005124:	461a      	mov	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a0b      	ldr	r2, [pc, #44]	@ (800515c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800512e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 031f 	and.w	r3, r3, #31
 8005136:	2201      	movs	r2, #1
 8005138:	409a      	lsls	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40020407 	.word	0x40020407
 8005150:	40020800 	.word	0x40020800
 8005154:	40020820 	.word	0x40020820
 8005158:	cccccccd 	.word	0xcccccccd
 800515c:	40020880 	.word	0x40020880

08005160 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4b0b      	ldr	r3, [pc, #44]	@ (80051a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	461a      	mov	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a08      	ldr	r2, [pc, #32]	@ (80051a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005182:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3b01      	subs	r3, #1
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	2201      	movs	r2, #1
 800518e:	409a      	lsls	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	1000823f 	.word	0x1000823f
 80051a4:	40020940 	.word	0x40020940

080051a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80051b6:	e15a      	b.n	800546e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	2101      	movs	r1, #1
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	fa01 f303 	lsl.w	r3, r1, r3
 80051c4:	4013      	ands	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 814c 	beq.w	8005468 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d005      	beq.n	80051e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d130      	bne.n	800524a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	2203      	movs	r2, #3
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4013      	ands	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800521e:	2201      	movs	r2, #1
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4013      	ands	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	091b      	lsrs	r3, r3, #4
 8005234:	f003 0201 	and.w	r2, r3, #1
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	2b03      	cmp	r3, #3
 8005254:	d017      	beq.n	8005286 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	2203      	movs	r2, #3
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	43db      	mvns	r3, r3
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4013      	ands	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d123      	bne.n	80052da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	08da      	lsrs	r2, r3, #3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3208      	adds	r2, #8
 800529a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800529e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	220f      	movs	r2, #15
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	43db      	mvns	r3, r3
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4013      	ands	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	08da      	lsrs	r2, r3, #3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3208      	adds	r2, #8
 80052d4:	6939      	ldr	r1, [r7, #16]
 80052d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	2203      	movs	r2, #3
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	43db      	mvns	r3, r3
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4013      	ands	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f003 0203 	and.w	r2, r3, #3
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 80a6 	beq.w	8005468 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800531c:	4b5b      	ldr	r3, [pc, #364]	@ (800548c <HAL_GPIO_Init+0x2e4>)
 800531e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005320:	4a5a      	ldr	r2, [pc, #360]	@ (800548c <HAL_GPIO_Init+0x2e4>)
 8005322:	f043 0301 	orr.w	r3, r3, #1
 8005326:	6613      	str	r3, [r2, #96]	@ 0x60
 8005328:	4b58      	ldr	r3, [pc, #352]	@ (800548c <HAL_GPIO_Init+0x2e4>)
 800532a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	60bb      	str	r3, [r7, #8]
 8005332:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005334:	4a56      	ldr	r2, [pc, #344]	@ (8005490 <HAL_GPIO_Init+0x2e8>)
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	089b      	lsrs	r3, r3, #2
 800533a:	3302      	adds	r3, #2
 800533c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005340:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	220f      	movs	r2, #15
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	43db      	mvns	r3, r3
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4013      	ands	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800535e:	d01f      	beq.n	80053a0 <HAL_GPIO_Init+0x1f8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a4c      	ldr	r2, [pc, #304]	@ (8005494 <HAL_GPIO_Init+0x2ec>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d019      	beq.n	800539c <HAL_GPIO_Init+0x1f4>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a4b      	ldr	r2, [pc, #300]	@ (8005498 <HAL_GPIO_Init+0x2f0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d013      	beq.n	8005398 <HAL_GPIO_Init+0x1f0>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a4a      	ldr	r2, [pc, #296]	@ (800549c <HAL_GPIO_Init+0x2f4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00d      	beq.n	8005394 <HAL_GPIO_Init+0x1ec>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a49      	ldr	r2, [pc, #292]	@ (80054a0 <HAL_GPIO_Init+0x2f8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d007      	beq.n	8005390 <HAL_GPIO_Init+0x1e8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a48      	ldr	r2, [pc, #288]	@ (80054a4 <HAL_GPIO_Init+0x2fc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d101      	bne.n	800538c <HAL_GPIO_Init+0x1e4>
 8005388:	2305      	movs	r3, #5
 800538a:	e00a      	b.n	80053a2 <HAL_GPIO_Init+0x1fa>
 800538c:	2306      	movs	r3, #6
 800538e:	e008      	b.n	80053a2 <HAL_GPIO_Init+0x1fa>
 8005390:	2304      	movs	r3, #4
 8005392:	e006      	b.n	80053a2 <HAL_GPIO_Init+0x1fa>
 8005394:	2303      	movs	r3, #3
 8005396:	e004      	b.n	80053a2 <HAL_GPIO_Init+0x1fa>
 8005398:	2302      	movs	r3, #2
 800539a:	e002      	b.n	80053a2 <HAL_GPIO_Init+0x1fa>
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <HAL_GPIO_Init+0x1fa>
 80053a0:	2300      	movs	r3, #0
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	f002 0203 	and.w	r2, r2, #3
 80053a8:	0092      	lsls	r2, r2, #2
 80053aa:	4093      	lsls	r3, r2
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053b2:	4937      	ldr	r1, [pc, #220]	@ (8005490 <HAL_GPIO_Init+0x2e8>)
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	089b      	lsrs	r3, r3, #2
 80053b8:	3302      	adds	r3, #2
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053c0:	4b39      	ldr	r3, [pc, #228]	@ (80054a8 <HAL_GPIO_Init+0x300>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	43db      	mvns	r3, r3
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4013      	ands	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80053e4:	4a30      	ldr	r2, [pc, #192]	@ (80054a8 <HAL_GPIO_Init+0x300>)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80053ea:	4b2f      	ldr	r3, [pc, #188]	@ (80054a8 <HAL_GPIO_Init+0x300>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	43db      	mvns	r3, r3
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4013      	ands	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800540e:	4a26      	ldr	r2, [pc, #152]	@ (80054a8 <HAL_GPIO_Init+0x300>)
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005414:	4b24      	ldr	r3, [pc, #144]	@ (80054a8 <HAL_GPIO_Init+0x300>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	43db      	mvns	r3, r3
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4013      	ands	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005438:	4a1b      	ldr	r2, [pc, #108]	@ (80054a8 <HAL_GPIO_Init+0x300>)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800543e:	4b1a      	ldr	r3, [pc, #104]	@ (80054a8 <HAL_GPIO_Init+0x300>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	43db      	mvns	r3, r3
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4013      	ands	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005462:	4a11      	ldr	r2, [pc, #68]	@ (80054a8 <HAL_GPIO_Init+0x300>)
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	3301      	adds	r3, #1
 800546c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	fa22 f303 	lsr.w	r3, r2, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	f47f ae9d 	bne.w	80051b8 <HAL_GPIO_Init+0x10>
  }
}
 800547e:	bf00      	nop
 8005480:	bf00      	nop
 8005482:	371c      	adds	r7, #28
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	40021000 	.word	0x40021000
 8005490:	40010000 	.word	0x40010000
 8005494:	48000400 	.word	0x48000400
 8005498:	48000800 	.word	0x48000800
 800549c:	48000c00 	.word	0x48000c00
 80054a0:	48001000 	.word	0x48001000
 80054a4:	48001400 	.word	0x48001400
 80054a8:	40010400 	.word	0x40010400

080054ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	887b      	ldrh	r3, [r7, #2]
 80054be:	4013      	ands	r3, r2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054c4:	2301      	movs	r3, #1
 80054c6:	73fb      	strb	r3, [r7, #15]
 80054c8:	e001      	b.n	80054ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054ca:	2300      	movs	r3, #0
 80054cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	807b      	strh	r3, [r7, #2]
 80054e8:	4613      	mov	r3, r2
 80054ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054ec:	787b      	ldrb	r3, [r7, #1]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054f2:	887a      	ldrh	r2, [r7, #2]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054f8:	e002      	b.n	8005500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054fa:	887a      	ldrh	r2, [r7, #2]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005516:	4b08      	ldr	r3, [pc, #32]	@ (8005538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005518:	695a      	ldr	r2, [r3, #20]
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	4013      	ands	r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d006      	beq.n	8005530 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005522:	4a05      	ldr	r2, [pc, #20]	@ (8005538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005524:	88fb      	ldrh	r3, [r7, #6]
 8005526:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	4618      	mov	r0, r3
 800552c:	f7fc fb96 	bl	8001c5c <HAL_GPIO_EXTI_Callback>
  }
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40010400 	.word	0x40010400

0800553c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d141      	bne.n	80055ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800554a:	4b4b      	ldr	r3, [pc, #300]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005556:	d131      	bne.n	80055bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005558:	4b47      	ldr	r3, [pc, #284]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800555a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800555e:	4a46      	ldr	r2, [pc, #280]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005564:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005568:	4b43      	ldr	r3, [pc, #268]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005570:	4a41      	ldr	r2, [pc, #260]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005576:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005578:	4b40      	ldr	r3, [pc, #256]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2232      	movs	r2, #50	@ 0x32
 800557e:	fb02 f303 	mul.w	r3, r2, r3
 8005582:	4a3f      	ldr	r2, [pc, #252]	@ (8005680 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005584:	fba2 2303 	umull	r2, r3, r2, r3
 8005588:	0c9b      	lsrs	r3, r3, #18
 800558a:	3301      	adds	r3, #1
 800558c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800558e:	e002      	b.n	8005596 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3b01      	subs	r3, #1
 8005594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005596:	4b38      	ldr	r3, [pc, #224]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800559e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a2:	d102      	bne.n	80055aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f2      	bne.n	8005590 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055aa:	4b33      	ldr	r3, [pc, #204]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055b6:	d158      	bne.n	800566a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e057      	b.n	800566c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055c2:	4a2d      	ldr	r2, [pc, #180]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80055cc:	e04d      	b.n	800566a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055d4:	d141      	bne.n	800565a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055d6:	4b28      	ldr	r3, [pc, #160]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80055de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055e2:	d131      	bne.n	8005648 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055e4:	4b24      	ldr	r3, [pc, #144]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ea:	4a23      	ldr	r2, [pc, #140]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055f4:	4b20      	ldr	r3, [pc, #128]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80055fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005602:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005604:	4b1d      	ldr	r3, [pc, #116]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2232      	movs	r2, #50	@ 0x32
 800560a:	fb02 f303 	mul.w	r3, r2, r3
 800560e:	4a1c      	ldr	r2, [pc, #112]	@ (8005680 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005610:	fba2 2303 	umull	r2, r3, r2, r3
 8005614:	0c9b      	lsrs	r3, r3, #18
 8005616:	3301      	adds	r3, #1
 8005618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800561a:	e002      	b.n	8005622 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3b01      	subs	r3, #1
 8005620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005622:	4b15      	ldr	r3, [pc, #84]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800562a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800562e:	d102      	bne.n	8005636 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f2      	bne.n	800561c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005636:	4b10      	ldr	r3, [pc, #64]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800563e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005642:	d112      	bne.n	800566a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e011      	b.n	800566c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005648:	4b0b      	ldr	r3, [pc, #44]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800564a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800564e:	4a0a      	ldr	r2, [pc, #40]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005654:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005658:	e007      	b.n	800566a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800565a:	4b07      	ldr	r3, [pc, #28]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005662:	4a05      	ldr	r2, [pc, #20]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005664:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005668:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	40007000 	.word	0x40007000
 800567c:	2000000c 	.word	0x2000000c
 8005680:	431bde83 	.word	0x431bde83

08005684 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005688:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	4a04      	ldr	r2, [pc, #16]	@ (80056a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800568e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005692:	6093      	str	r3, [r2, #8]
}
 8005694:	bf00      	nop
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40007000 	.word	0x40007000

080056a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e2fe      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d075      	beq.n	80057ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056c2:	4b97      	ldr	r3, [pc, #604]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 030c 	and.w	r3, r3, #12
 80056ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056cc:	4b94      	ldr	r3, [pc, #592]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	2b0c      	cmp	r3, #12
 80056da:	d102      	bne.n	80056e2 <HAL_RCC_OscConfig+0x3e>
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d002      	beq.n	80056e8 <HAL_RCC_OscConfig+0x44>
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d10b      	bne.n	8005700 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e8:	4b8d      	ldr	r3, [pc, #564]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d05b      	beq.n	80057ac <HAL_RCC_OscConfig+0x108>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d157      	bne.n	80057ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e2d9      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005708:	d106      	bne.n	8005718 <HAL_RCC_OscConfig+0x74>
 800570a:	4b85      	ldr	r3, [pc, #532]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a84      	ldr	r2, [pc, #528]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 8005710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	e01d      	b.n	8005754 <HAL_RCC_OscConfig+0xb0>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005720:	d10c      	bne.n	800573c <HAL_RCC_OscConfig+0x98>
 8005722:	4b7f      	ldr	r3, [pc, #508]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a7e      	ldr	r2, [pc, #504]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 8005728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	4b7c      	ldr	r3, [pc, #496]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a7b      	ldr	r2, [pc, #492]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 8005734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	e00b      	b.n	8005754 <HAL_RCC_OscConfig+0xb0>
 800573c:	4b78      	ldr	r3, [pc, #480]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a77      	ldr	r2, [pc, #476]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 8005742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	4b75      	ldr	r3, [pc, #468]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a74      	ldr	r2, [pc, #464]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 800574e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d013      	beq.n	8005784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575c:	f7fd fab4 	bl	8002cc8 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005764:	f7fd fab0 	bl	8002cc8 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b64      	cmp	r3, #100	@ 0x64
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e29e      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005776:	4b6a      	ldr	r3, [pc, #424]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f0      	beq.n	8005764 <HAL_RCC_OscConfig+0xc0>
 8005782:	e014      	b.n	80057ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005784:	f7fd faa0 	bl	8002cc8 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800578c:	f7fd fa9c 	bl	8002cc8 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b64      	cmp	r3, #100	@ 0x64
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e28a      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800579e:	4b60      	ldr	r3, [pc, #384]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f0      	bne.n	800578c <HAL_RCC_OscConfig+0xe8>
 80057aa:	e000      	b.n	80057ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d075      	beq.n	80058a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057ba:	4b59      	ldr	r3, [pc, #356]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 030c 	and.w	r3, r3, #12
 80057c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057c4:	4b56      	ldr	r3, [pc, #344]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0303 	and.w	r3, r3, #3
 80057cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	2b0c      	cmp	r3, #12
 80057d2:	d102      	bne.n	80057da <HAL_RCC_OscConfig+0x136>
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d002      	beq.n	80057e0 <HAL_RCC_OscConfig+0x13c>
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d11f      	bne.n	8005820 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057e0:	4b4f      	ldr	r3, [pc, #316]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <HAL_RCC_OscConfig+0x154>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e25d      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f8:	4b49      	ldr	r3, [pc, #292]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	061b      	lsls	r3, r3, #24
 8005806:	4946      	ldr	r1, [pc, #280]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 8005808:	4313      	orrs	r3, r2
 800580a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800580c:	4b45      	ldr	r3, [pc, #276]	@ (8005924 <HAL_RCC_OscConfig+0x280>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f7fd fa0d 	bl	8002c30 <HAL_InitTick>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d043      	beq.n	80058a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e249      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d023      	beq.n	8005870 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005828:	4b3d      	ldr	r3, [pc, #244]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a3c      	ldr	r2, [pc, #240]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 800582e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7fd fa48 	bl	8002cc8 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800583c:	f7fd fa44 	bl	8002cc8 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e232      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800584e:	4b34      	ldr	r3, [pc, #208]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585a:	4b31      	ldr	r3, [pc, #196]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	061b      	lsls	r3, r3, #24
 8005868:	492d      	ldr	r1, [pc, #180]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 800586a:	4313      	orrs	r3, r2
 800586c:	604b      	str	r3, [r1, #4]
 800586e:	e01a      	b.n	80058a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005870:	4b2b      	ldr	r3, [pc, #172]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a2a      	ldr	r2, [pc, #168]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 8005876:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800587a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587c:	f7fd fa24 	bl	8002cc8 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005884:	f7fd fa20 	bl	8002cc8 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e20e      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005896:	4b22      	ldr	r3, [pc, #136]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f0      	bne.n	8005884 <HAL_RCC_OscConfig+0x1e0>
 80058a2:	e000      	b.n	80058a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d041      	beq.n	8005936 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d01c      	beq.n	80058f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058ba:	4b19      	ldr	r3, [pc, #100]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 80058bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058c0:	4a17      	ldr	r2, [pc, #92]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ca:	f7fd f9fd 	bl	8002cc8 <HAL_GetTick>
 80058ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058d2:	f7fd f9f9 	bl	8002cc8 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e1e7      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 80058e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0ef      	beq.n	80058d2 <HAL_RCC_OscConfig+0x22e>
 80058f2:	e020      	b.n	8005936 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 80058f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058fa:	4a09      	ldr	r2, [pc, #36]	@ (8005920 <HAL_RCC_OscConfig+0x27c>)
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005904:	f7fd f9e0 	bl	8002cc8 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800590a:	e00d      	b.n	8005928 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800590c:	f7fd f9dc 	bl	8002cc8 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d906      	bls.n	8005928 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e1ca      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
 800591e:	bf00      	nop
 8005920:	40021000 	.word	0x40021000
 8005924:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005928:	4b8c      	ldr	r3, [pc, #560]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 800592a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1ea      	bne.n	800590c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 80a6 	beq.w	8005a90 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005944:	2300      	movs	r3, #0
 8005946:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005948:	4b84      	ldr	r3, [pc, #528]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 800594a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_RCC_OscConfig+0x2b4>
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <HAL_RCC_OscConfig+0x2b6>
 8005958:	2300      	movs	r3, #0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00d      	beq.n	800597a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800595e:	4b7f      	ldr	r3, [pc, #508]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005962:	4a7e      	ldr	r2, [pc, #504]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005968:	6593      	str	r3, [r2, #88]	@ 0x58
 800596a:	4b7c      	ldr	r3, [pc, #496]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 800596c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800596e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005976:	2301      	movs	r3, #1
 8005978:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800597a:	4b79      	ldr	r3, [pc, #484]	@ (8005b60 <HAL_RCC_OscConfig+0x4bc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005982:	2b00      	cmp	r3, #0
 8005984:	d118      	bne.n	80059b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005986:	4b76      	ldr	r3, [pc, #472]	@ (8005b60 <HAL_RCC_OscConfig+0x4bc>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a75      	ldr	r2, [pc, #468]	@ (8005b60 <HAL_RCC_OscConfig+0x4bc>)
 800598c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005992:	f7fd f999 	bl	8002cc8 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800599a:	f7fd f995 	bl	8002cc8 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e183      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059ac:	4b6c      	ldr	r3, [pc, #432]	@ (8005b60 <HAL_RCC_OscConfig+0x4bc>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0f0      	beq.n	800599a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d108      	bne.n	80059d2 <HAL_RCC_OscConfig+0x32e>
 80059c0:	4b66      	ldr	r3, [pc, #408]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 80059c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c6:	4a65      	ldr	r2, [pc, #404]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 80059c8:	f043 0301 	orr.w	r3, r3, #1
 80059cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059d0:	e024      	b.n	8005a1c <HAL_RCC_OscConfig+0x378>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b05      	cmp	r3, #5
 80059d8:	d110      	bne.n	80059fc <HAL_RCC_OscConfig+0x358>
 80059da:	4b60      	ldr	r3, [pc, #384]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 80059dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e0:	4a5e      	ldr	r2, [pc, #376]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 80059e2:	f043 0304 	orr.w	r3, r3, #4
 80059e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059ea:	4b5c      	ldr	r3, [pc, #368]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 80059ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f0:	4a5a      	ldr	r2, [pc, #360]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059fa:	e00f      	b.n	8005a1c <HAL_RCC_OscConfig+0x378>
 80059fc:	4b57      	ldr	r3, [pc, #348]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a02:	4a56      	ldr	r2, [pc, #344]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a0c:	4b53      	ldr	r3, [pc, #332]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a12:	4a52      	ldr	r2, [pc, #328]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005a14:	f023 0304 	bic.w	r3, r3, #4
 8005a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d016      	beq.n	8005a52 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a24:	f7fd f950 	bl	8002cc8 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a2a:	e00a      	b.n	8005a42 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a2c:	f7fd f94c 	bl	8002cc8 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e138      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a42:	4b46      	ldr	r3, [pc, #280]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0ed      	beq.n	8005a2c <HAL_RCC_OscConfig+0x388>
 8005a50:	e015      	b.n	8005a7e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a52:	f7fd f939 	bl	8002cc8 <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a58:	e00a      	b.n	8005a70 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a5a:	f7fd f935 	bl	8002cc8 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e121      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a70:	4b3a      	ldr	r3, [pc, #232]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1ed      	bne.n	8005a5a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a7e:	7ffb      	ldrb	r3, [r7, #31]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d105      	bne.n	8005a90 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a84:	4b35      	ldr	r3, [pc, #212]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a88:	4a34      	ldr	r2, [pc, #208]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a8e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d03c      	beq.n	8005b16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d01c      	beq.n	8005ade <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005aaa:	4a2c      	ldr	r2, [pc, #176]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005aac:	f043 0301 	orr.w	r3, r3, #1
 8005ab0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab4:	f7fd f908 	bl	8002cc8 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005abc:	f7fd f904 	bl	8002cc8 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e0f2      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ace:	4b23      	ldr	r3, [pc, #140]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005ad0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0ef      	beq.n	8005abc <HAL_RCC_OscConfig+0x418>
 8005adc:	e01b      	b.n	8005b16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ade:	4b1f      	ldr	r3, [pc, #124]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005ae6:	f023 0301 	bic.w	r3, r3, #1
 8005aea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aee:	f7fd f8eb 	bl	8002cc8 <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005af6:	f7fd f8e7 	bl	8002cc8 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e0d5      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b08:	4b14      	ldr	r3, [pc, #80]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005b0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1ef      	bne.n	8005af6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80c9 	beq.w	8005cb2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b20:	4b0e      	ldr	r3, [pc, #56]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 030c 	and.w	r3, r3, #12
 8005b28:	2b0c      	cmp	r3, #12
 8005b2a:	f000 8083 	beq.w	8005c34 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d15e      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b36:	4b09      	ldr	r3, [pc, #36]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a08      	ldr	r2, [pc, #32]	@ (8005b5c <HAL_RCC_OscConfig+0x4b8>)
 8005b3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b42:	f7fd f8c1 	bl	8002cc8 <HAL_GetTick>
 8005b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b48:	e00c      	b.n	8005b64 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b4a:	f7fd f8bd 	bl	8002cc8 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d905      	bls.n	8005b64 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e0ab      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b64:	4b55      	ldr	r3, [pc, #340]	@ (8005cbc <HAL_RCC_OscConfig+0x618>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1ec      	bne.n	8005b4a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b70:	4b52      	ldr	r3, [pc, #328]	@ (8005cbc <HAL_RCC_OscConfig+0x618>)
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	4b52      	ldr	r3, [pc, #328]	@ (8005cc0 <HAL_RCC_OscConfig+0x61c>)
 8005b76:	4013      	ands	r3, r2
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6a11      	ldr	r1, [r2, #32]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b80:	3a01      	subs	r2, #1
 8005b82:	0112      	lsls	r2, r2, #4
 8005b84:	4311      	orrs	r1, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005b8a:	0212      	lsls	r2, r2, #8
 8005b8c:	4311      	orrs	r1, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b92:	0852      	lsrs	r2, r2, #1
 8005b94:	3a01      	subs	r2, #1
 8005b96:	0552      	lsls	r2, r2, #21
 8005b98:	4311      	orrs	r1, r2
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b9e:	0852      	lsrs	r2, r2, #1
 8005ba0:	3a01      	subs	r2, #1
 8005ba2:	0652      	lsls	r2, r2, #25
 8005ba4:	4311      	orrs	r1, r2
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005baa:	06d2      	lsls	r2, r2, #27
 8005bac:	430a      	orrs	r2, r1
 8005bae:	4943      	ldr	r1, [pc, #268]	@ (8005cbc <HAL_RCC_OscConfig+0x618>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bb4:	4b41      	ldr	r3, [pc, #260]	@ (8005cbc <HAL_RCC_OscConfig+0x618>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a40      	ldr	r2, [pc, #256]	@ (8005cbc <HAL_RCC_OscConfig+0x618>)
 8005bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bbe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bc0:	4b3e      	ldr	r3, [pc, #248]	@ (8005cbc <HAL_RCC_OscConfig+0x618>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	4a3d      	ldr	r2, [pc, #244]	@ (8005cbc <HAL_RCC_OscConfig+0x618>)
 8005bc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bcc:	f7fd f87c 	bl	8002cc8 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd4:	f7fd f878 	bl	8002cc8 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e066      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005be6:	4b35      	ldr	r3, [pc, #212]	@ (8005cbc <HAL_RCC_OscConfig+0x618>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f0      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x530>
 8005bf2:	e05e      	b.n	8005cb2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf4:	4b31      	ldr	r3, [pc, #196]	@ (8005cbc <HAL_RCC_OscConfig+0x618>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a30      	ldr	r2, [pc, #192]	@ (8005cbc <HAL_RCC_OscConfig+0x618>)
 8005bfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c00:	f7fd f862 	bl	8002cc8 <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c08:	f7fd f85e 	bl	8002cc8 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e04c      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c1a:	4b28      	ldr	r3, [pc, #160]	@ (8005cbc <HAL_RCC_OscConfig+0x618>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005c26:	4b25      	ldr	r3, [pc, #148]	@ (8005cbc <HAL_RCC_OscConfig+0x618>)
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	4924      	ldr	r1, [pc, #144]	@ (8005cbc <HAL_RCC_OscConfig+0x618>)
 8005c2c:	4b25      	ldr	r3, [pc, #148]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	60cb      	str	r3, [r1, #12]
 8005c32:	e03e      	b.n	8005cb2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e039      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005c40:	4b1e      	ldr	r3, [pc, #120]	@ (8005cbc <HAL_RCC_OscConfig+0x618>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f003 0203 	and.w	r2, r3, #3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d12c      	bne.n	8005cae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d123      	bne.n	8005cae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d11b      	bne.n	8005cae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d113      	bne.n	8005cae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c90:	085b      	lsrs	r3, r3, #1
 8005c92:	3b01      	subs	r3, #1
 8005c94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d109      	bne.n	8005cae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d001      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3720      	adds	r7, #32
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40021000 	.word	0x40021000
 8005cc0:	019f800c 	.word	0x019f800c
 8005cc4:	feeefffc 	.word	0xfeeefffc

08005cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e11e      	b.n	8005f1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce0:	4b91      	ldr	r3, [pc, #580]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d910      	bls.n	8005d10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cee:	4b8e      	ldr	r3, [pc, #568]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f023 020f 	bic.w	r2, r3, #15
 8005cf6:	498c      	ldr	r1, [pc, #560]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfe:	4b8a      	ldr	r3, [pc, #552]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d001      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e106      	b.n	8005f1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d073      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d129      	bne.n	8005d78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d24:	4b81      	ldr	r3, [pc, #516]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e0f4      	b.n	8005f1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005d34:	f000 f99e 	bl	8006074 <RCC_GetSysClockFreqFromPLLSource>
 8005d38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	4a7c      	ldr	r2, [pc, #496]	@ (8005f30 <HAL_RCC_ClockConfig+0x268>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d93f      	bls.n	8005dc2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d42:	4b7a      	ldr	r3, [pc, #488]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d033      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d12f      	bne.n	8005dc2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d62:	4b72      	ldr	r3, [pc, #456]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d6a:	4a70      	ldr	r2, [pc, #448]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d72:	2380      	movs	r3, #128	@ 0x80
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	e024      	b.n	8005dc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d107      	bne.n	8005d90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d80:	4b6a      	ldr	r3, [pc, #424]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e0c6      	b.n	8005f1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d90:	4b66      	ldr	r3, [pc, #408]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0be      	b.n	8005f1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005da0:	f000 f8ce 	bl	8005f40 <HAL_RCC_GetSysClockFreq>
 8005da4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	4a61      	ldr	r2, [pc, #388]	@ (8005f30 <HAL_RCC_ClockConfig+0x268>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d909      	bls.n	8005dc2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005dae:	4b5f      	ldr	r3, [pc, #380]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005db6:	4a5d      	ldr	r2, [pc, #372]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dbc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005dbe:	2380      	movs	r3, #128	@ 0x80
 8005dc0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dc2:	4b5a      	ldr	r3, [pc, #360]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f023 0203 	bic.w	r2, r3, #3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	4957      	ldr	r1, [pc, #348]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dd4:	f7fc ff78 	bl	8002cc8 <HAL_GetTick>
 8005dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dda:	e00a      	b.n	8005df2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ddc:	f7fc ff74 	bl	8002cc8 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e095      	b.n	8005f1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005df2:	4b4e      	ldr	r3, [pc, #312]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 020c 	and.w	r2, r3, #12
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d1eb      	bne.n	8005ddc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d023      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e1c:	4b43      	ldr	r3, [pc, #268]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	4a42      	ldr	r2, [pc, #264]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005e22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005e26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d007      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005e34:	4b3d      	ldr	r3, [pc, #244]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005e3c:	4a3b      	ldr	r2, [pc, #236]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005e3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005e42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e44:	4b39      	ldr	r3, [pc, #228]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	4936      	ldr	r1, [pc, #216]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	608b      	str	r3, [r1, #8]
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2b80      	cmp	r3, #128	@ 0x80
 8005e5c:	d105      	bne.n	8005e6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005e5e:	4b33      	ldr	r3, [pc, #204]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	4a32      	ldr	r2, [pc, #200]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005e64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d21d      	bcs.n	8005eb4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e78:	4b2b      	ldr	r3, [pc, #172]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f023 020f 	bic.w	r2, r3, #15
 8005e80:	4929      	ldr	r1, [pc, #164]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e88:	f7fc ff1e 	bl	8002cc8 <HAL_GetTick>
 8005e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e8e:	e00a      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e90:	f7fc ff1a 	bl	8002cc8 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e03b      	b.n	8005f1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ea6:	4b20      	ldr	r3, [pc, #128]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d1ed      	bne.n	8005e90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	4917      	ldr	r1, [pc, #92]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d009      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ede:	4b13      	ldr	r3, [pc, #76]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	490f      	ldr	r1, [pc, #60]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ef2:	f000 f825 	bl	8005f40 <HAL_RCC_GetSysClockFreq>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8005f2c <HAL_RCC_ClockConfig+0x264>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	091b      	lsrs	r3, r3, #4
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	490c      	ldr	r1, [pc, #48]	@ (8005f34 <HAL_RCC_ClockConfig+0x26c>)
 8005f04:	5ccb      	ldrb	r3, [r1, r3]
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f38 <HAL_RCC_ClockConfig+0x270>)
 8005f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f12:	4b0a      	ldr	r3, [pc, #40]	@ (8005f3c <HAL_RCC_ClockConfig+0x274>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fc fe8a 	bl	8002c30 <HAL_InitTick>
 8005f1c:	4603      	mov	r3, r0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	40022000 	.word	0x40022000
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	04c4b400 	.word	0x04c4b400
 8005f34:	0800999c 	.word	0x0800999c
 8005f38:	2000000c 	.word	0x2000000c
 8005f3c:	20000010 	.word	0x20000010

08005f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005f46:	4b2c      	ldr	r3, [pc, #176]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 030c 	and.w	r3, r3, #12
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d102      	bne.n	8005f58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f52:	4b2a      	ldr	r3, [pc, #168]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	e047      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005f58:	4b27      	ldr	r3, [pc, #156]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f003 030c 	and.w	r3, r3, #12
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d102      	bne.n	8005f6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f64:	4b26      	ldr	r3, [pc, #152]	@ (8006000 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	e03e      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005f6a:	4b23      	ldr	r3, [pc, #140]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 030c 	and.w	r3, r3, #12
 8005f72:	2b0c      	cmp	r3, #12
 8005f74:	d136      	bne.n	8005fe4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f76:	4b20      	ldr	r3, [pc, #128]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f80:	4b1d      	ldr	r3, [pc, #116]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	091b      	lsrs	r3, r3, #4
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d10c      	bne.n	8005fae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f94:	4a1a      	ldr	r2, [pc, #104]	@ (8006000 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	4a16      	ldr	r2, [pc, #88]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f9e:	68d2      	ldr	r2, [r2, #12]
 8005fa0:	0a12      	lsrs	r2, r2, #8
 8005fa2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	617b      	str	r3, [r7, #20]
      break;
 8005fac:	e00c      	b.n	8005fc8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fae:	4a13      	ldr	r2, [pc, #76]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb6:	4a10      	ldr	r2, [pc, #64]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fb8:	68d2      	ldr	r2, [r2, #12]
 8005fba:	0a12      	lsrs	r2, r2, #8
 8005fbc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fc0:	fb02 f303 	mul.w	r3, r2, r3
 8005fc4:	617b      	str	r3, [r7, #20]
      break;
 8005fc6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	0e5b      	lsrs	r3, r3, #25
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe0:	613b      	str	r3, [r7, #16]
 8005fe2:	e001      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005fe8:	693b      	ldr	r3, [r7, #16]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	00f42400 	.word	0x00f42400
 8006000:	016e3600 	.word	0x016e3600

08006004 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006008:	4b03      	ldr	r3, [pc, #12]	@ (8006018 <HAL_RCC_GetHCLKFreq+0x14>)
 800600a:	681b      	ldr	r3, [r3, #0]
}
 800600c:	4618      	mov	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	2000000c 	.word	0x2000000c

0800601c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006020:	f7ff fff0 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006024:	4602      	mov	r2, r0
 8006026:	4b06      	ldr	r3, [pc, #24]	@ (8006040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	0a1b      	lsrs	r3, r3, #8
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	4904      	ldr	r1, [pc, #16]	@ (8006044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006032:	5ccb      	ldrb	r3, [r1, r3]
 8006034:	f003 031f 	and.w	r3, r3, #31
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800603c:	4618      	mov	r0, r3
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40021000 	.word	0x40021000
 8006044:	080099ac 	.word	0x080099ac

08006048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800604c:	f7ff ffda 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006050:	4602      	mov	r2, r0
 8006052:	4b06      	ldr	r3, [pc, #24]	@ (800606c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	0adb      	lsrs	r3, r3, #11
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	4904      	ldr	r1, [pc, #16]	@ (8006070 <HAL_RCC_GetPCLK2Freq+0x28>)
 800605e:	5ccb      	ldrb	r3, [r1, r3]
 8006060:	f003 031f 	and.w	r3, r3, #31
 8006064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006068:	4618      	mov	r0, r3
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40021000 	.word	0x40021000
 8006070:	080099ac 	.word	0x080099ac

08006074 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800607a:	4b1e      	ldr	r3, [pc, #120]	@ (80060f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006084:	4b1b      	ldr	r3, [pc, #108]	@ (80060f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	091b      	lsrs	r3, r3, #4
 800608a:	f003 030f 	and.w	r3, r3, #15
 800608e:	3301      	adds	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	2b03      	cmp	r3, #3
 8006096:	d10c      	bne.n	80060b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006098:	4a17      	ldr	r2, [pc, #92]	@ (80060f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a0:	4a14      	ldr	r2, [pc, #80]	@ (80060f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060a2:	68d2      	ldr	r2, [r2, #12]
 80060a4:	0a12      	lsrs	r2, r2, #8
 80060a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060aa:	fb02 f303 	mul.w	r3, r2, r3
 80060ae:	617b      	str	r3, [r7, #20]
    break;
 80060b0:	e00c      	b.n	80060cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060b2:	4a12      	ldr	r2, [pc, #72]	@ (80060fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ba:	4a0e      	ldr	r2, [pc, #56]	@ (80060f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060bc:	68d2      	ldr	r2, [r2, #12]
 80060be:	0a12      	lsrs	r2, r2, #8
 80060c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060c4:	fb02 f303 	mul.w	r3, r2, r3
 80060c8:	617b      	str	r3, [r7, #20]
    break;
 80060ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060cc:	4b09      	ldr	r3, [pc, #36]	@ (80060f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	0e5b      	lsrs	r3, r3, #25
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	3301      	adds	r3, #1
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80060e6:	687b      	ldr	r3, [r7, #4]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	40021000 	.word	0x40021000
 80060f8:	016e3600 	.word	0x016e3600
 80060fc:	00f42400 	.word	0x00f42400

08006100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006108:	2300      	movs	r3, #0
 800610a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800610c:	2300      	movs	r3, #0
 800610e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8098 	beq.w	800624e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800611e:	2300      	movs	r3, #0
 8006120:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006122:	4b43      	ldr	r3, [pc, #268]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10d      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800612e:	4b40      	ldr	r3, [pc, #256]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006132:	4a3f      	ldr	r2, [pc, #252]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006138:	6593      	str	r3, [r2, #88]	@ 0x58
 800613a:	4b3d      	ldr	r3, [pc, #244]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800613c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800613e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006142:	60bb      	str	r3, [r7, #8]
 8006144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006146:	2301      	movs	r3, #1
 8006148:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800614a:	4b3a      	ldr	r3, [pc, #232]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a39      	ldr	r2, [pc, #228]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006154:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006156:	f7fc fdb7 	bl	8002cc8 <HAL_GetTick>
 800615a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800615c:	e009      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800615e:	f7fc fdb3 	bl	8002cc8 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d902      	bls.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	74fb      	strb	r3, [r7, #19]
        break;
 8006170:	e005      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006172:	4b30      	ldr	r3, [pc, #192]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0ef      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800617e:	7cfb      	ldrb	r3, [r7, #19]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d159      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006184:	4b2a      	ldr	r3, [pc, #168]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800618a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800618e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d01e      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	429a      	cmp	r2, r3
 800619e:	d019      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061a0:	4b23      	ldr	r3, [pc, #140]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061ac:	4b20      	ldr	r3, [pc, #128]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061cc:	4a18      	ldr	r2, [pc, #96]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d016      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061de:	f7fc fd73 	bl	8002cc8 <HAL_GetTick>
 80061e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061e4:	e00b      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061e6:	f7fc fd6f 	bl	8002cc8 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d902      	bls.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	74fb      	strb	r3, [r7, #19]
            break;
 80061fc:	e006      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0ec      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800620c:	7cfb      	ldrb	r3, [r7, #19]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10b      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006212:	4b07      	ldr	r3, [pc, #28]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006218:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006220:	4903      	ldr	r1, [pc, #12]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006222:	4313      	orrs	r3, r2
 8006224:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006228:	e008      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800622a:	7cfb      	ldrb	r3, [r7, #19]
 800622c:	74bb      	strb	r3, [r7, #18]
 800622e:	e005      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006230:	40021000 	.word	0x40021000
 8006234:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006238:	7cfb      	ldrb	r3, [r7, #19]
 800623a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800623c:	7c7b      	ldrb	r3, [r7, #17]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d105      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006242:	4ba7      	ldr	r3, [pc, #668]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006246:	4aa6      	ldr	r2, [pc, #664]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006248:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800624c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800625a:	4ba1      	ldr	r3, [pc, #644]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800625c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006260:	f023 0203 	bic.w	r2, r3, #3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	499d      	ldr	r1, [pc, #628]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800626a:	4313      	orrs	r3, r2
 800626c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00a      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800627c:	4b98      	ldr	r3, [pc, #608]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800627e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006282:	f023 020c 	bic.w	r2, r3, #12
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	4995      	ldr	r1, [pc, #596]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800628c:	4313      	orrs	r3, r2
 800628e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0304 	and.w	r3, r3, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800629e:	4b90      	ldr	r3, [pc, #576]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	498c      	ldr	r1, [pc, #560]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0308 	and.w	r3, r3, #8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062c0:	4b87      	ldr	r3, [pc, #540]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	4984      	ldr	r1, [pc, #528]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0310 	and.w	r3, r3, #16
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062e2:	4b7f      	ldr	r3, [pc, #508]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	497b      	ldr	r1, [pc, #492]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006304:	4b76      	ldr	r3, [pc, #472]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800630a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	4973      	ldr	r1, [pc, #460]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006326:	4b6e      	ldr	r3, [pc, #440]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800632c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	496a      	ldr	r1, [pc, #424]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006348:	4b65      	ldr	r3, [pc, #404]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800634e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	4962      	ldr	r1, [pc, #392]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800636a:	4b5d      	ldr	r3, [pc, #372]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800636c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006370:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006378:	4959      	ldr	r1, [pc, #356]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800638c:	4b54      	ldr	r3, [pc, #336]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800638e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006392:	f023 0203 	bic.w	r2, r3, #3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639a:	4951      	ldr	r1, [pc, #324]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063ae:	4b4c      	ldr	r3, [pc, #304]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063bc:	4948      	ldr	r1, [pc, #288]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d015      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063d0:	4b43      	ldr	r3, [pc, #268]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063de:	4940      	ldr	r1, [pc, #256]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ee:	d105      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063f0:	4b3b      	ldr	r3, [pc, #236]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	4a3a      	ldr	r2, [pc, #232]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006404:	2b00      	cmp	r3, #0
 8006406:	d015      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006408:	4b35      	ldr	r3, [pc, #212]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800640a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800640e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006416:	4932      	ldr	r1, [pc, #200]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006418:	4313      	orrs	r3, r2
 800641a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006422:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006426:	d105      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006428:	4b2d      	ldr	r3, [pc, #180]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	4a2c      	ldr	r2, [pc, #176]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800642e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006432:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d015      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006440:	4b27      	ldr	r3, [pc, #156]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006446:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644e:	4924      	ldr	r1, [pc, #144]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800645e:	d105      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006460:	4b1f      	ldr	r3, [pc, #124]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	4a1e      	ldr	r2, [pc, #120]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800646a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d015      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006478:	4b19      	ldr	r3, [pc, #100]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800647a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006486:	4916      	ldr	r1, [pc, #88]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006488:	4313      	orrs	r3, r2
 800648a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006492:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006496:	d105      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006498:	4b11      	ldr	r3, [pc, #68]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	4a10      	ldr	r2, [pc, #64]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800649e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d019      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064b0:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064be:	4908      	ldr	r1, [pc, #32]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064ce:	d109      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064d0:	4b03      	ldr	r3, [pc, #12]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	4a02      	ldr	r2, [pc, #8]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064da:	60d3      	str	r3, [r2, #12]
 80064dc:	e002      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80064de:	bf00      	nop
 80064e0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d015      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80064f0:	4b29      	ldr	r3, [pc, #164]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064fe:	4926      	ldr	r1, [pc, #152]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800650a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800650e:	d105      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006510:	4b21      	ldr	r3, [pc, #132]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	4a20      	ldr	r2, [pc, #128]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800651a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d015      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006528:	4b1b      	ldr	r3, [pc, #108]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800652a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800652e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006536:	4918      	ldr	r1, [pc, #96]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006538:	4313      	orrs	r3, r2
 800653a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006546:	d105      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006548:	4b13      	ldr	r3, [pc, #76]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	4a12      	ldr	r2, [pc, #72]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800654e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006552:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d015      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006560:	4b0d      	ldr	r3, [pc, #52]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006562:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006566:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800656e:	490a      	ldr	r1, [pc, #40]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006570:	4313      	orrs	r3, r2
 8006572:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800657a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800657e:	d105      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006580:	4b05      	ldr	r3, [pc, #20]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	4a04      	ldr	r2, [pc, #16]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800658a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800658c:	7cbb      	ldrb	r3, [r7, #18]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	40021000 	.word	0x40021000

0800659c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e054      	b.n	8006658 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d111      	bne.n	80065de <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 fcfe 	bl	8007fc4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d102      	bne.n	80065d6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a23      	ldr	r2, [pc, #140]	@ (8006660 <HAL_TIM_Base_Init+0xc4>)
 80065d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4619      	mov	r1, r3
 80065f0:	4610      	mov	r0, r2
 80065f2:	f001 f847 	bl	8007684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	08002725 	.word	0x08002725

08006664 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b01      	cmp	r3, #1
 8006676:	d001      	beq.n	800667c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e04c      	b.n	8006716 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a26      	ldr	r2, [pc, #152]	@ (8006724 <HAL_TIM_Base_Start+0xc0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d022      	beq.n	80066d4 <HAL_TIM_Base_Start+0x70>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006696:	d01d      	beq.n	80066d4 <HAL_TIM_Base_Start+0x70>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a22      	ldr	r2, [pc, #136]	@ (8006728 <HAL_TIM_Base_Start+0xc4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d018      	beq.n	80066d4 <HAL_TIM_Base_Start+0x70>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a21      	ldr	r2, [pc, #132]	@ (800672c <HAL_TIM_Base_Start+0xc8>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d013      	beq.n	80066d4 <HAL_TIM_Base_Start+0x70>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006730 <HAL_TIM_Base_Start+0xcc>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00e      	beq.n	80066d4 <HAL_TIM_Base_Start+0x70>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006734 <HAL_TIM_Base_Start+0xd0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d009      	beq.n	80066d4 <HAL_TIM_Base_Start+0x70>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006738 <HAL_TIM_Base_Start+0xd4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d004      	beq.n	80066d4 <HAL_TIM_Base_Start+0x70>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1b      	ldr	r2, [pc, #108]	@ (800673c <HAL_TIM_Base_Start+0xd8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d115      	bne.n	8006700 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	4b19      	ldr	r3, [pc, #100]	@ (8006740 <HAL_TIM_Base_Start+0xdc>)
 80066dc:	4013      	ands	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b06      	cmp	r3, #6
 80066e4:	d015      	beq.n	8006712 <HAL_TIM_Base_Start+0xae>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066ec:	d011      	beq.n	8006712 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0201 	orr.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066fe:	e008      	b.n	8006712 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	e000      	b.n	8006714 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006712:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40012c00 	.word	0x40012c00
 8006728:	40000400 	.word	0x40000400
 800672c:	40000800 	.word	0x40000800
 8006730:	40000c00 	.word	0x40000c00
 8006734:	40013400 	.word	0x40013400
 8006738:	40014000 	.word	0x40014000
 800673c:	40015000 	.word	0x40015000
 8006740:	00010007 	.word	0x00010007

08006744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b01      	cmp	r3, #1
 8006756:	d001      	beq.n	800675c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e054      	b.n	8006806 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a26      	ldr	r2, [pc, #152]	@ (8006814 <HAL_TIM_Base_Start_IT+0xd0>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d022      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006786:	d01d      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a22      	ldr	r2, [pc, #136]	@ (8006818 <HAL_TIM_Base_Start_IT+0xd4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d018      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a21      	ldr	r2, [pc, #132]	@ (800681c <HAL_TIM_Base_Start_IT+0xd8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d013      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006820 <HAL_TIM_Base_Start_IT+0xdc>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00e      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006824 <HAL_TIM_Base_Start_IT+0xe0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d009      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006828 <HAL_TIM_Base_Start_IT+0xe4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d004      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1b      	ldr	r2, [pc, #108]	@ (800682c <HAL_TIM_Base_Start_IT+0xe8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d115      	bne.n	80067f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	4b19      	ldr	r3, [pc, #100]	@ (8006830 <HAL_TIM_Base_Start_IT+0xec>)
 80067cc:	4013      	ands	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b06      	cmp	r3, #6
 80067d4:	d015      	beq.n	8006802 <HAL_TIM_Base_Start_IT+0xbe>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067dc:	d011      	beq.n	8006802 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0201 	orr.w	r2, r2, #1
 80067ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ee:	e008      	b.n	8006802 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0201 	orr.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	e000      	b.n	8006804 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006802:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40000400 	.word	0x40000400
 800681c:	40000800 	.word	0x40000800
 8006820:	40000c00 	.word	0x40000c00
 8006824:	40013400 	.word	0x40013400
 8006828:	40014000 	.word	0x40014000
 800682c:	40015000 	.word	0x40015000
 8006830:	00010007 	.word	0x00010007

08006834 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e054      	b.n	80068f0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d111      	bne.n	8006876 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f001 fbb2 	bl	8007fc4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006864:	2b00      	cmp	r3, #0
 8006866:	d102      	bne.n	800686e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a23      	ldr	r2, [pc, #140]	@ (80068f8 <HAL_TIM_PWM_Init+0xc4>)
 800686c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2202      	movs	r2, #2
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3304      	adds	r3, #4
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f000 fefb 	bl	8007684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	080068fd 	.word	0x080068fd

080068fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d109      	bne.n	8006934 <HAL_TIM_PWM_Start+0x24>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b01      	cmp	r3, #1
 800692a:	bf14      	ite	ne
 800692c:	2301      	movne	r3, #1
 800692e:	2300      	moveq	r3, #0
 8006930:	b2db      	uxtb	r3, r3
 8006932:	e03c      	b.n	80069ae <HAL_TIM_PWM_Start+0x9e>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b04      	cmp	r3, #4
 8006938:	d109      	bne.n	800694e <HAL_TIM_PWM_Start+0x3e>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b01      	cmp	r3, #1
 8006944:	bf14      	ite	ne
 8006946:	2301      	movne	r3, #1
 8006948:	2300      	moveq	r3, #0
 800694a:	b2db      	uxtb	r3, r3
 800694c:	e02f      	b.n	80069ae <HAL_TIM_PWM_Start+0x9e>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b08      	cmp	r3, #8
 8006952:	d109      	bne.n	8006968 <HAL_TIM_PWM_Start+0x58>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b01      	cmp	r3, #1
 800695e:	bf14      	ite	ne
 8006960:	2301      	movne	r3, #1
 8006962:	2300      	moveq	r3, #0
 8006964:	b2db      	uxtb	r3, r3
 8006966:	e022      	b.n	80069ae <HAL_TIM_PWM_Start+0x9e>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	2b0c      	cmp	r3, #12
 800696c:	d109      	bne.n	8006982 <HAL_TIM_PWM_Start+0x72>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b01      	cmp	r3, #1
 8006978:	bf14      	ite	ne
 800697a:	2301      	movne	r3, #1
 800697c:	2300      	moveq	r3, #0
 800697e:	b2db      	uxtb	r3, r3
 8006980:	e015      	b.n	80069ae <HAL_TIM_PWM_Start+0x9e>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b10      	cmp	r3, #16
 8006986:	d109      	bne.n	800699c <HAL_TIM_PWM_Start+0x8c>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b01      	cmp	r3, #1
 8006992:	bf14      	ite	ne
 8006994:	2301      	movne	r3, #1
 8006996:	2300      	moveq	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	e008      	b.n	80069ae <HAL_TIM_PWM_Start+0x9e>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	bf14      	ite	ne
 80069a8:	2301      	movne	r3, #1
 80069aa:	2300      	moveq	r3, #0
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e0a6      	b.n	8006b04 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <HAL_TIM_PWM_Start+0xb6>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069c4:	e023      	b.n	8006a0e <HAL_TIM_PWM_Start+0xfe>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d104      	bne.n	80069d6 <HAL_TIM_PWM_Start+0xc6>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069d4:	e01b      	b.n	8006a0e <HAL_TIM_PWM_Start+0xfe>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d104      	bne.n	80069e6 <HAL_TIM_PWM_Start+0xd6>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069e4:	e013      	b.n	8006a0e <HAL_TIM_PWM_Start+0xfe>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b0c      	cmp	r3, #12
 80069ea:	d104      	bne.n	80069f6 <HAL_TIM_PWM_Start+0xe6>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069f4:	e00b      	b.n	8006a0e <HAL_TIM_PWM_Start+0xfe>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b10      	cmp	r3, #16
 80069fa:	d104      	bne.n	8006a06 <HAL_TIM_PWM_Start+0xf6>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a04:	e003      	b.n	8006a0e <HAL_TIM_PWM_Start+0xfe>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2201      	movs	r2, #1
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f001 faae 	bl	8007f78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a3a      	ldr	r2, [pc, #232]	@ (8006b0c <HAL_TIM_PWM_Start+0x1fc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d018      	beq.n	8006a58 <HAL_TIM_PWM_Start+0x148>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a39      	ldr	r2, [pc, #228]	@ (8006b10 <HAL_TIM_PWM_Start+0x200>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d013      	beq.n	8006a58 <HAL_TIM_PWM_Start+0x148>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a37      	ldr	r2, [pc, #220]	@ (8006b14 <HAL_TIM_PWM_Start+0x204>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00e      	beq.n	8006a58 <HAL_TIM_PWM_Start+0x148>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a36      	ldr	r2, [pc, #216]	@ (8006b18 <HAL_TIM_PWM_Start+0x208>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d009      	beq.n	8006a58 <HAL_TIM_PWM_Start+0x148>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a34      	ldr	r2, [pc, #208]	@ (8006b1c <HAL_TIM_PWM_Start+0x20c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d004      	beq.n	8006a58 <HAL_TIM_PWM_Start+0x148>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a33      	ldr	r2, [pc, #204]	@ (8006b20 <HAL_TIM_PWM_Start+0x210>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d101      	bne.n	8006a5c <HAL_TIM_PWM_Start+0x14c>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <HAL_TIM_PWM_Start+0x14e>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d007      	beq.n	8006a72 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a25      	ldr	r2, [pc, #148]	@ (8006b0c <HAL_TIM_PWM_Start+0x1fc>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d022      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x1b2>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a84:	d01d      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x1b2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a26      	ldr	r2, [pc, #152]	@ (8006b24 <HAL_TIM_PWM_Start+0x214>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d018      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x1b2>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a24      	ldr	r2, [pc, #144]	@ (8006b28 <HAL_TIM_PWM_Start+0x218>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d013      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x1b2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a23      	ldr	r2, [pc, #140]	@ (8006b2c <HAL_TIM_PWM_Start+0x21c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00e      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x1b2>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a19      	ldr	r2, [pc, #100]	@ (8006b10 <HAL_TIM_PWM_Start+0x200>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d009      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x1b2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a18      	ldr	r2, [pc, #96]	@ (8006b14 <HAL_TIM_PWM_Start+0x204>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d004      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x1b2>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a18      	ldr	r2, [pc, #96]	@ (8006b20 <HAL_TIM_PWM_Start+0x210>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d115      	bne.n	8006aee <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	4b19      	ldr	r3, [pc, #100]	@ (8006b30 <HAL_TIM_PWM_Start+0x220>)
 8006aca:	4013      	ands	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b06      	cmp	r3, #6
 8006ad2:	d015      	beq.n	8006b00 <HAL_TIM_PWM_Start+0x1f0>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ada:	d011      	beq.n	8006b00 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0201 	orr.w	r2, r2, #1
 8006aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aec:	e008      	b.n	8006b00 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0201 	orr.w	r2, r2, #1
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	e000      	b.n	8006b02 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40013400 	.word	0x40013400
 8006b14:	40014000 	.word	0x40014000
 8006b18:	40014400 	.word	0x40014400
 8006b1c:	40014800 	.word	0x40014800
 8006b20:	40015000 	.word	0x40015000
 8006b24:	40000400 	.word	0x40000400
 8006b28:	40000800 	.word	0x40000800
 8006b2c:	40000c00 	.word	0x40000c00
 8006b30:	00010007 	.word	0x00010007

08006b34 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e04c      	b.n	8006be2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d111      	bne.n	8006b78 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 fa31 	bl	8007fc4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d102      	bne.n	8006b70 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006bec <HAL_TIM_OnePulse_Init+0xb8>)
 8006b6e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3304      	adds	r3, #4
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	f000 fd7a 	bl	8007684 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0208 	bic.w	r2, r2, #8
 8006b9e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6819      	ldr	r1, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	08006bf1 	.word	0x08006bf1

08006bf0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e0a2      	b.n	8006d5e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d111      	bne.n	8006c48 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f001 f9c9 	bl	8007fc4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d102      	bne.n	8006c40 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a4a      	ldr	r2, [pc, #296]	@ (8006d68 <HAL_TIM_Encoder_Init+0x164>)
 8006c3e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006c5e:	f023 0307 	bic.w	r3, r3, #7
 8006c62:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f000 fd08 	bl	8007684 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c9c:	f023 0303 	bic.w	r3, r3, #3
 8006ca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	4313      	orrs	r3, r2
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006cba:	f023 030c 	bic.w	r3, r3, #12
 8006cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006cc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	021b      	lsls	r3, r3, #8
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	011a      	lsls	r2, r3, #4
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	031b      	lsls	r3, r3, #12
 8006cea:	4313      	orrs	r3, r2
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006cf8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006d00:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	080027e1 	.word	0x080027e1

08006d6c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d7c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d84:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d8c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d94:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d110      	bne.n	8006dbe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d102      	bne.n	8006da8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006da2:	7b7b      	ldrb	r3, [r7, #13]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d001      	beq.n	8006dac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e069      	b.n	8006e80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dbc:	e031      	b.n	8006e22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d110      	bne.n	8006de6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d102      	bne.n	8006dd0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006dca:	7b3b      	ldrb	r3, [r7, #12]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d001      	beq.n	8006dd4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e055      	b.n	8006e80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006de4:	e01d      	b.n	8006e22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d108      	bne.n	8006dfe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dec:	7bbb      	ldrb	r3, [r7, #14]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d105      	bne.n	8006dfe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006df2:	7b7b      	ldrb	r3, [r7, #13]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d102      	bne.n	8006dfe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006df8:	7b3b      	ldrb	r3, [r7, #12]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d001      	beq.n	8006e02 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e03e      	b.n	8006e80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2202      	movs	r2, #2
 8006e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2202      	movs	r2, #2
 8006e16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_TIM_Encoder_Start+0xc4>
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d008      	beq.n	8006e40 <HAL_TIM_Encoder_Start+0xd4>
 8006e2e:	e00f      	b.n	8006e50 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2201      	movs	r2, #1
 8006e36:	2100      	movs	r1, #0
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f001 f89d 	bl	8007f78 <TIM_CCxChannelCmd>
      break;
 8006e3e:	e016      	b.n	8006e6e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2201      	movs	r2, #1
 8006e46:	2104      	movs	r1, #4
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 f895 	bl	8007f78 <TIM_CCxChannelCmd>
      break;
 8006e4e:	e00e      	b.n	8006e6e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2201      	movs	r2, #1
 8006e56:	2100      	movs	r1, #0
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f001 f88d 	bl	8007f78 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2201      	movs	r2, #1
 8006e64:	2104      	movs	r1, #4
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 f886 	bl	8007f78 <TIM_CCxChannelCmd>
      break;
 8006e6c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f042 0201 	orr.w	r2, r2, #1
 8006e7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d026      	beq.n	8006ef8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d021      	beq.n	8006ef8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f06f 0202 	mvn.w	r2, #2
 8006ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	f003 0303 	and.w	r3, r3, #3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d005      	beq.n	8006ede <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
 8006edc:	e009      	b.n	8006ef2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f003 0304 	and.w	r3, r3, #4
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d026      	beq.n	8006f50 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d021      	beq.n	8006f50 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f06f 0204 	mvn.w	r2, #4
 8006f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2202      	movs	r2, #2
 8006f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d005      	beq.n	8006f36 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	4798      	blx	r3
 8006f34:	e009      	b.n	8006f4a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f003 0308 	and.w	r3, r3, #8
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d026      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d021      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f06f 0208 	mvn.w	r2, #8
 8006f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2204      	movs	r2, #4
 8006f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	4798      	blx	r3
 8006f8c:	e009      	b.n	8006fa2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 0310 	and.w	r3, r3, #16
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d026      	beq.n	8007000 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d021      	beq.n	8007000 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f06f 0210 	mvn.w	r2, #16
 8006fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2208      	movs	r2, #8
 8006fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d005      	beq.n	8006fe6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
 8006fe4:	e009      	b.n	8006ffa <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00e      	beq.n	8007028 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d009      	beq.n	8007028 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f06f 0201 	mvn.w	r2, #1
 800701c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800702e:	2b00      	cmp	r3, #0
 8007030:	d104      	bne.n	800703c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00e      	beq.n	800705a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007042:	2b00      	cmp	r3, #0
 8007044:	d009      	beq.n	800705a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800704e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00e      	beq.n	8007082 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800706a:	2b00      	cmp	r3, #0
 800706c:	d009      	beq.n	8007082 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00e      	beq.n	80070aa <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007092:	2b00      	cmp	r3, #0
 8007094:	d009      	beq.n	80070aa <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800709e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00e      	beq.n	80070d2 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f003 0320 	and.w	r3, r3, #32
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d009      	beq.n	80070d2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f06f 0220 	mvn.w	r2, #32
 80070c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00e      	beq.n	80070fa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80070ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00e      	beq.n	8007122 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d009      	beq.n	8007122 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00e      	beq.n	800714a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d009      	beq.n	800714a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800713e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00e      	beq.n	8007172 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d009      	beq.n	8007172 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007172:	bf00      	nop
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007196:	2302      	movs	r3, #2
 8007198:	e0ff      	b.n	800739a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b14      	cmp	r3, #20
 80071a6:	f200 80f0 	bhi.w	800738a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80071aa:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	08007205 	.word	0x08007205
 80071b4:	0800738b 	.word	0x0800738b
 80071b8:	0800738b 	.word	0x0800738b
 80071bc:	0800738b 	.word	0x0800738b
 80071c0:	08007245 	.word	0x08007245
 80071c4:	0800738b 	.word	0x0800738b
 80071c8:	0800738b 	.word	0x0800738b
 80071cc:	0800738b 	.word	0x0800738b
 80071d0:	08007287 	.word	0x08007287
 80071d4:	0800738b 	.word	0x0800738b
 80071d8:	0800738b 	.word	0x0800738b
 80071dc:	0800738b 	.word	0x0800738b
 80071e0:	080072c7 	.word	0x080072c7
 80071e4:	0800738b 	.word	0x0800738b
 80071e8:	0800738b 	.word	0x0800738b
 80071ec:	0800738b 	.word	0x0800738b
 80071f0:	08007309 	.word	0x08007309
 80071f4:	0800738b 	.word	0x0800738b
 80071f8:	0800738b 	.word	0x0800738b
 80071fc:	0800738b 	.word	0x0800738b
 8007200:	08007349 	.word	0x08007349
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68b9      	ldr	r1, [r7, #8]
 800720a:	4618      	mov	r0, r3
 800720c:	f000 faee 	bl	80077ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699a      	ldr	r2, [r3, #24]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0208 	orr.w	r2, r2, #8
 800721e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 0204 	bic.w	r2, r2, #4
 800722e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6999      	ldr	r1, [r3, #24]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	691a      	ldr	r2, [r3, #16]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	619a      	str	r2, [r3, #24]
      break;
 8007242:	e0a5      	b.n	8007390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68b9      	ldr	r1, [r7, #8]
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fb68 	bl	8007920 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800725e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699a      	ldr	r2, [r3, #24]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800726e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6999      	ldr	r1, [r3, #24]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	021a      	lsls	r2, r3, #8
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	619a      	str	r2, [r3, #24]
      break;
 8007284:	e084      	b.n	8007390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	4618      	mov	r0, r3
 800728e:	f000 fbdb 	bl	8007a48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	69da      	ldr	r2, [r3, #28]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f042 0208 	orr.w	r2, r2, #8
 80072a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69da      	ldr	r2, [r3, #28]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0204 	bic.w	r2, r2, #4
 80072b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69d9      	ldr	r1, [r3, #28]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	61da      	str	r2, [r3, #28]
      break;
 80072c4:	e064      	b.n	8007390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fc4d 	bl	8007b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69da      	ldr	r2, [r3, #28]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69da      	ldr	r2, [r3, #28]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69d9      	ldr	r1, [r3, #28]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	021a      	lsls	r2, r3, #8
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	61da      	str	r2, [r3, #28]
      break;
 8007306:	e043      	b.n	8007390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68b9      	ldr	r1, [r7, #8]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fcc0 	bl	8007c94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0208 	orr.w	r2, r2, #8
 8007322:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0204 	bic.w	r2, r2, #4
 8007332:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	691a      	ldr	r2, [r3, #16]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007346:	e023      	b.n	8007390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68b9      	ldr	r1, [r7, #8]
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fd0a 	bl	8007d68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007362:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007372:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	021a      	lsls	r2, r3, #8
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007388:	e002      	b.n	8007390 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	75fb      	strb	r3, [r7, #23]
      break;
 800738e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007398:	7dfb      	ldrb	r3, [r7, #23]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop

080073a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d101      	bne.n	80073c0 <HAL_TIM_ConfigClockSource+0x1c>
 80073bc:	2302      	movs	r3, #2
 80073be:	e0f6      	b.n	80075ae <HAL_TIM_ConfigClockSource+0x20a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80073de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80073e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a6f      	ldr	r2, [pc, #444]	@ (80075b8 <HAL_TIM_ConfigClockSource+0x214>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	f000 80c1 	beq.w	8007582 <HAL_TIM_ConfigClockSource+0x1de>
 8007400:	4a6d      	ldr	r2, [pc, #436]	@ (80075b8 <HAL_TIM_ConfigClockSource+0x214>)
 8007402:	4293      	cmp	r3, r2
 8007404:	f200 80c6 	bhi.w	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 8007408:	4a6c      	ldr	r2, [pc, #432]	@ (80075bc <HAL_TIM_ConfigClockSource+0x218>)
 800740a:	4293      	cmp	r3, r2
 800740c:	f000 80b9 	beq.w	8007582 <HAL_TIM_ConfigClockSource+0x1de>
 8007410:	4a6a      	ldr	r2, [pc, #424]	@ (80075bc <HAL_TIM_ConfigClockSource+0x218>)
 8007412:	4293      	cmp	r3, r2
 8007414:	f200 80be 	bhi.w	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 8007418:	4a69      	ldr	r2, [pc, #420]	@ (80075c0 <HAL_TIM_ConfigClockSource+0x21c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	f000 80b1 	beq.w	8007582 <HAL_TIM_ConfigClockSource+0x1de>
 8007420:	4a67      	ldr	r2, [pc, #412]	@ (80075c0 <HAL_TIM_ConfigClockSource+0x21c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	f200 80b6 	bhi.w	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 8007428:	4a66      	ldr	r2, [pc, #408]	@ (80075c4 <HAL_TIM_ConfigClockSource+0x220>)
 800742a:	4293      	cmp	r3, r2
 800742c:	f000 80a9 	beq.w	8007582 <HAL_TIM_ConfigClockSource+0x1de>
 8007430:	4a64      	ldr	r2, [pc, #400]	@ (80075c4 <HAL_TIM_ConfigClockSource+0x220>)
 8007432:	4293      	cmp	r3, r2
 8007434:	f200 80ae 	bhi.w	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 8007438:	4a63      	ldr	r2, [pc, #396]	@ (80075c8 <HAL_TIM_ConfigClockSource+0x224>)
 800743a:	4293      	cmp	r3, r2
 800743c:	f000 80a1 	beq.w	8007582 <HAL_TIM_ConfigClockSource+0x1de>
 8007440:	4a61      	ldr	r2, [pc, #388]	@ (80075c8 <HAL_TIM_ConfigClockSource+0x224>)
 8007442:	4293      	cmp	r3, r2
 8007444:	f200 80a6 	bhi.w	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 8007448:	4a60      	ldr	r2, [pc, #384]	@ (80075cc <HAL_TIM_ConfigClockSource+0x228>)
 800744a:	4293      	cmp	r3, r2
 800744c:	f000 8099 	beq.w	8007582 <HAL_TIM_ConfigClockSource+0x1de>
 8007450:	4a5e      	ldr	r2, [pc, #376]	@ (80075cc <HAL_TIM_ConfigClockSource+0x228>)
 8007452:	4293      	cmp	r3, r2
 8007454:	f200 809e 	bhi.w	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 8007458:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800745c:	f000 8091 	beq.w	8007582 <HAL_TIM_ConfigClockSource+0x1de>
 8007460:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007464:	f200 8096 	bhi.w	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 8007468:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800746c:	f000 8089 	beq.w	8007582 <HAL_TIM_ConfigClockSource+0x1de>
 8007470:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007474:	f200 808e 	bhi.w	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 8007478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800747c:	d03e      	beq.n	80074fc <HAL_TIM_ConfigClockSource+0x158>
 800747e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007482:	f200 8087 	bhi.w	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 8007486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800748a:	f000 8086 	beq.w	800759a <HAL_TIM_ConfigClockSource+0x1f6>
 800748e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007492:	d87f      	bhi.n	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 8007494:	2b70      	cmp	r3, #112	@ 0x70
 8007496:	d01a      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x12a>
 8007498:	2b70      	cmp	r3, #112	@ 0x70
 800749a:	d87b      	bhi.n	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 800749c:	2b60      	cmp	r3, #96	@ 0x60
 800749e:	d050      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0x19e>
 80074a0:	2b60      	cmp	r3, #96	@ 0x60
 80074a2:	d877      	bhi.n	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 80074a4:	2b50      	cmp	r3, #80	@ 0x50
 80074a6:	d03c      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0x17e>
 80074a8:	2b50      	cmp	r3, #80	@ 0x50
 80074aa:	d873      	bhi.n	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 80074ac:	2b40      	cmp	r3, #64	@ 0x40
 80074ae:	d058      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x1be>
 80074b0:	2b40      	cmp	r3, #64	@ 0x40
 80074b2:	d86f      	bhi.n	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 80074b4:	2b30      	cmp	r3, #48	@ 0x30
 80074b6:	d064      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x1de>
 80074b8:	2b30      	cmp	r3, #48	@ 0x30
 80074ba:	d86b      	bhi.n	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 80074bc:	2b20      	cmp	r3, #32
 80074be:	d060      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x1de>
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	d867      	bhi.n	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d05c      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x1de>
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	d05a      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x1de>
 80074cc:	e062      	b.n	8007594 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074de:	f000 fd2b 	bl	8007f38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80074f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	609a      	str	r2, [r3, #8]
      break;
 80074fa:	e04f      	b.n	800759c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800750c:	f000 fd14 	bl	8007f38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689a      	ldr	r2, [r3, #8]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800751e:	609a      	str	r2, [r3, #8]
      break;
 8007520:	e03c      	b.n	800759c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800752e:	461a      	mov	r2, r3
 8007530:	f000 fc86 	bl	8007e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2150      	movs	r1, #80	@ 0x50
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fcdf 	bl	8007efe <TIM_ITRx_SetConfig>
      break;
 8007540:	e02c      	b.n	800759c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800754e:	461a      	mov	r2, r3
 8007550:	f000 fca5 	bl	8007e9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2160      	movs	r1, #96	@ 0x60
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fccf 	bl	8007efe <TIM_ITRx_SetConfig>
      break;
 8007560:	e01c      	b.n	800759c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800756e:	461a      	mov	r2, r3
 8007570:	f000 fc66 	bl	8007e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2140      	movs	r1, #64	@ 0x40
 800757a:	4618      	mov	r0, r3
 800757c:	f000 fcbf 	bl	8007efe <TIM_ITRx_SetConfig>
      break;
 8007580:	e00c      	b.n	800759c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4619      	mov	r1, r3
 800758c:	4610      	mov	r0, r2
 800758e:	f000 fcb6 	bl	8007efe <TIM_ITRx_SetConfig>
      break;
 8007592:	e003      	b.n	800759c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	73fb      	strb	r3, [r7, #15]
      break;
 8007598:	e000      	b.n	800759c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800759a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	00100070 	.word	0x00100070
 80075bc:	00100060 	.word	0x00100060
 80075c0:	00100050 	.word	0x00100050
 80075c4:	00100040 	.word	0x00100040
 80075c8:	00100030 	.word	0x00100030
 80075cc:	00100020 	.word	0x00100020

080075d0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a4c      	ldr	r2, [pc, #304]	@ (80077c8 <TIM_Base_SetConfig+0x144>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d017      	beq.n	80076cc <TIM_Base_SetConfig+0x48>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076a2:	d013      	beq.n	80076cc <TIM_Base_SetConfig+0x48>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a49      	ldr	r2, [pc, #292]	@ (80077cc <TIM_Base_SetConfig+0x148>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d00f      	beq.n	80076cc <TIM_Base_SetConfig+0x48>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a48      	ldr	r2, [pc, #288]	@ (80077d0 <TIM_Base_SetConfig+0x14c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00b      	beq.n	80076cc <TIM_Base_SetConfig+0x48>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a47      	ldr	r2, [pc, #284]	@ (80077d4 <TIM_Base_SetConfig+0x150>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d007      	beq.n	80076cc <TIM_Base_SetConfig+0x48>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a46      	ldr	r2, [pc, #280]	@ (80077d8 <TIM_Base_SetConfig+0x154>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d003      	beq.n	80076cc <TIM_Base_SetConfig+0x48>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a45      	ldr	r2, [pc, #276]	@ (80077dc <TIM_Base_SetConfig+0x158>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d108      	bne.n	80076de <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a39      	ldr	r2, [pc, #228]	@ (80077c8 <TIM_Base_SetConfig+0x144>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d023      	beq.n	800772e <TIM_Base_SetConfig+0xaa>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ec:	d01f      	beq.n	800772e <TIM_Base_SetConfig+0xaa>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a36      	ldr	r2, [pc, #216]	@ (80077cc <TIM_Base_SetConfig+0x148>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d01b      	beq.n	800772e <TIM_Base_SetConfig+0xaa>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a35      	ldr	r2, [pc, #212]	@ (80077d0 <TIM_Base_SetConfig+0x14c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d017      	beq.n	800772e <TIM_Base_SetConfig+0xaa>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a34      	ldr	r2, [pc, #208]	@ (80077d4 <TIM_Base_SetConfig+0x150>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d013      	beq.n	800772e <TIM_Base_SetConfig+0xaa>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a33      	ldr	r2, [pc, #204]	@ (80077d8 <TIM_Base_SetConfig+0x154>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00f      	beq.n	800772e <TIM_Base_SetConfig+0xaa>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a33      	ldr	r2, [pc, #204]	@ (80077e0 <TIM_Base_SetConfig+0x15c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d00b      	beq.n	800772e <TIM_Base_SetConfig+0xaa>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a32      	ldr	r2, [pc, #200]	@ (80077e4 <TIM_Base_SetConfig+0x160>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d007      	beq.n	800772e <TIM_Base_SetConfig+0xaa>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a31      	ldr	r2, [pc, #196]	@ (80077e8 <TIM_Base_SetConfig+0x164>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d003      	beq.n	800772e <TIM_Base_SetConfig+0xaa>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a2c      	ldr	r2, [pc, #176]	@ (80077dc <TIM_Base_SetConfig+0x158>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d108      	bne.n	8007740 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4313      	orrs	r3, r2
 800773e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	689a      	ldr	r2, [r3, #8]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a18      	ldr	r2, [pc, #96]	@ (80077c8 <TIM_Base_SetConfig+0x144>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d013      	beq.n	8007794 <TIM_Base_SetConfig+0x110>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a1a      	ldr	r2, [pc, #104]	@ (80077d8 <TIM_Base_SetConfig+0x154>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d00f      	beq.n	8007794 <TIM_Base_SetConfig+0x110>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a1a      	ldr	r2, [pc, #104]	@ (80077e0 <TIM_Base_SetConfig+0x15c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d00b      	beq.n	8007794 <TIM_Base_SetConfig+0x110>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a19      	ldr	r2, [pc, #100]	@ (80077e4 <TIM_Base_SetConfig+0x160>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d007      	beq.n	8007794 <TIM_Base_SetConfig+0x110>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a18      	ldr	r2, [pc, #96]	@ (80077e8 <TIM_Base_SetConfig+0x164>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d003      	beq.n	8007794 <TIM_Base_SetConfig+0x110>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a13      	ldr	r2, [pc, #76]	@ (80077dc <TIM_Base_SetConfig+0x158>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d103      	bne.n	800779c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	691a      	ldr	r2, [r3, #16]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d105      	bne.n	80077ba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	f023 0201 	bic.w	r2, r3, #1
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	611a      	str	r2, [r3, #16]
  }
}
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	40012c00 	.word	0x40012c00
 80077cc:	40000400 	.word	0x40000400
 80077d0:	40000800 	.word	0x40000800
 80077d4:	40000c00 	.word	0x40000c00
 80077d8:	40013400 	.word	0x40013400
 80077dc:	40015000 	.word	0x40015000
 80077e0:	40014000 	.word	0x40014000
 80077e4:	40014400 	.word	0x40014400
 80077e8:	40014800 	.word	0x40014800

080077ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	f023 0201 	bic.w	r2, r3, #1
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800781a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800781e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f023 0303 	bic.w	r3, r3, #3
 8007826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f023 0302 	bic.w	r3, r3, #2
 8007838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	4313      	orrs	r3, r2
 8007842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a30      	ldr	r2, [pc, #192]	@ (8007908 <TIM_OC1_SetConfig+0x11c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d013      	beq.n	8007874 <TIM_OC1_SetConfig+0x88>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a2f      	ldr	r2, [pc, #188]	@ (800790c <TIM_OC1_SetConfig+0x120>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00f      	beq.n	8007874 <TIM_OC1_SetConfig+0x88>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a2e      	ldr	r2, [pc, #184]	@ (8007910 <TIM_OC1_SetConfig+0x124>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00b      	beq.n	8007874 <TIM_OC1_SetConfig+0x88>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a2d      	ldr	r2, [pc, #180]	@ (8007914 <TIM_OC1_SetConfig+0x128>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d007      	beq.n	8007874 <TIM_OC1_SetConfig+0x88>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a2c      	ldr	r2, [pc, #176]	@ (8007918 <TIM_OC1_SetConfig+0x12c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d003      	beq.n	8007874 <TIM_OC1_SetConfig+0x88>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a2b      	ldr	r2, [pc, #172]	@ (800791c <TIM_OC1_SetConfig+0x130>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d10c      	bne.n	800788e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f023 0308 	bic.w	r3, r3, #8
 800787a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	4313      	orrs	r3, r2
 8007884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f023 0304 	bic.w	r3, r3, #4
 800788c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a1d      	ldr	r2, [pc, #116]	@ (8007908 <TIM_OC1_SetConfig+0x11c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d013      	beq.n	80078be <TIM_OC1_SetConfig+0xd2>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a1c      	ldr	r2, [pc, #112]	@ (800790c <TIM_OC1_SetConfig+0x120>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00f      	beq.n	80078be <TIM_OC1_SetConfig+0xd2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007910 <TIM_OC1_SetConfig+0x124>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00b      	beq.n	80078be <TIM_OC1_SetConfig+0xd2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a1a      	ldr	r2, [pc, #104]	@ (8007914 <TIM_OC1_SetConfig+0x128>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d007      	beq.n	80078be <TIM_OC1_SetConfig+0xd2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a19      	ldr	r2, [pc, #100]	@ (8007918 <TIM_OC1_SetConfig+0x12c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d003      	beq.n	80078be <TIM_OC1_SetConfig+0xd2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a18      	ldr	r2, [pc, #96]	@ (800791c <TIM_OC1_SetConfig+0x130>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d111      	bne.n	80078e2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80078cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	4313      	orrs	r3, r2
 80078e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	621a      	str	r2, [r3, #32]
}
 80078fc:	bf00      	nop
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	40012c00 	.word	0x40012c00
 800790c:	40013400 	.word	0x40013400
 8007910:	40014000 	.word	0x40014000
 8007914:	40014400 	.word	0x40014400
 8007918:	40014800 	.word	0x40014800
 800791c:	40015000 	.word	0x40015000

08007920 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	f023 0210 	bic.w	r2, r3, #16
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800794e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800795a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	021b      	lsls	r3, r3, #8
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4313      	orrs	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f023 0320 	bic.w	r3, r3, #32
 800796e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4313      	orrs	r3, r2
 800797a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a2c      	ldr	r2, [pc, #176]	@ (8007a30 <TIM_OC2_SetConfig+0x110>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d007      	beq.n	8007994 <TIM_OC2_SetConfig+0x74>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a2b      	ldr	r2, [pc, #172]	@ (8007a34 <TIM_OC2_SetConfig+0x114>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d003      	beq.n	8007994 <TIM_OC2_SetConfig+0x74>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a2a      	ldr	r2, [pc, #168]	@ (8007a38 <TIM_OC2_SetConfig+0x118>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d10d      	bne.n	80079b0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800799a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	011b      	lsls	r3, r3, #4
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a1f      	ldr	r2, [pc, #124]	@ (8007a30 <TIM_OC2_SetConfig+0x110>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d013      	beq.n	80079e0 <TIM_OC2_SetConfig+0xc0>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007a34 <TIM_OC2_SetConfig+0x114>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d00f      	beq.n	80079e0 <TIM_OC2_SetConfig+0xc0>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a1e      	ldr	r2, [pc, #120]	@ (8007a3c <TIM_OC2_SetConfig+0x11c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d00b      	beq.n	80079e0 <TIM_OC2_SetConfig+0xc0>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a1d      	ldr	r2, [pc, #116]	@ (8007a40 <TIM_OC2_SetConfig+0x120>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d007      	beq.n	80079e0 <TIM_OC2_SetConfig+0xc0>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007a44 <TIM_OC2_SetConfig+0x124>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d003      	beq.n	80079e0 <TIM_OC2_SetConfig+0xc0>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a17      	ldr	r2, [pc, #92]	@ (8007a38 <TIM_OC2_SetConfig+0x118>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d113      	bne.n	8007a08 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80079e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80079ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	621a      	str	r2, [r3, #32]
}
 8007a22:	bf00      	nop
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	40012c00 	.word	0x40012c00
 8007a34:	40013400 	.word	0x40013400
 8007a38:	40015000 	.word	0x40015000
 8007a3c:	40014000 	.word	0x40014000
 8007a40:	40014400 	.word	0x40014400
 8007a44:	40014800 	.word	0x40014800

08007a48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f023 0303 	bic.w	r3, r3, #3
 8007a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	021b      	lsls	r3, r3, #8
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a2b      	ldr	r2, [pc, #172]	@ (8007b54 <TIM_OC3_SetConfig+0x10c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d007      	beq.n	8007aba <TIM_OC3_SetConfig+0x72>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a2a      	ldr	r2, [pc, #168]	@ (8007b58 <TIM_OC3_SetConfig+0x110>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d003      	beq.n	8007aba <TIM_OC3_SetConfig+0x72>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a29      	ldr	r2, [pc, #164]	@ (8007b5c <TIM_OC3_SetConfig+0x114>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d10d      	bne.n	8007ad6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	021b      	lsls	r3, r3, #8
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8007b54 <TIM_OC3_SetConfig+0x10c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d013      	beq.n	8007b06 <TIM_OC3_SetConfig+0xbe>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8007b58 <TIM_OC3_SetConfig+0x110>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d00f      	beq.n	8007b06 <TIM_OC3_SetConfig+0xbe>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b60 <TIM_OC3_SetConfig+0x118>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00b      	beq.n	8007b06 <TIM_OC3_SetConfig+0xbe>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a1c      	ldr	r2, [pc, #112]	@ (8007b64 <TIM_OC3_SetConfig+0x11c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d007      	beq.n	8007b06 <TIM_OC3_SetConfig+0xbe>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b68 <TIM_OC3_SetConfig+0x120>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d003      	beq.n	8007b06 <TIM_OC3_SetConfig+0xbe>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a16      	ldr	r2, [pc, #88]	@ (8007b5c <TIM_OC3_SetConfig+0x114>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d113      	bne.n	8007b2e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	011b      	lsls	r3, r3, #4
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	011b      	lsls	r3, r3, #4
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	621a      	str	r2, [r3, #32]
}
 8007b48:	bf00      	nop
 8007b4a:	371c      	adds	r7, #28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	40012c00 	.word	0x40012c00
 8007b58:	40013400 	.word	0x40013400
 8007b5c:	40015000 	.word	0x40015000
 8007b60:	40014000 	.word	0x40014000
 8007b64:	40014400 	.word	0x40014400
 8007b68:	40014800 	.word	0x40014800

08007b6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	021b      	lsls	r3, r3, #8
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	031b      	lsls	r3, r3, #12
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a2c      	ldr	r2, [pc, #176]	@ (8007c7c <TIM_OC4_SetConfig+0x110>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d007      	beq.n	8007be0 <TIM_OC4_SetConfig+0x74>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a2b      	ldr	r2, [pc, #172]	@ (8007c80 <TIM_OC4_SetConfig+0x114>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d003      	beq.n	8007be0 <TIM_OC4_SetConfig+0x74>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a2a      	ldr	r2, [pc, #168]	@ (8007c84 <TIM_OC4_SetConfig+0x118>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d10d      	bne.n	8007bfc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	031b      	lsls	r3, r3, #12
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8007c7c <TIM_OC4_SetConfig+0x110>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d013      	beq.n	8007c2c <TIM_OC4_SetConfig+0xc0>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a1e      	ldr	r2, [pc, #120]	@ (8007c80 <TIM_OC4_SetConfig+0x114>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d00f      	beq.n	8007c2c <TIM_OC4_SetConfig+0xc0>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007c88 <TIM_OC4_SetConfig+0x11c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d00b      	beq.n	8007c2c <TIM_OC4_SetConfig+0xc0>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a1d      	ldr	r2, [pc, #116]	@ (8007c8c <TIM_OC4_SetConfig+0x120>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d007      	beq.n	8007c2c <TIM_OC4_SetConfig+0xc0>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8007c90 <TIM_OC4_SetConfig+0x124>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d003      	beq.n	8007c2c <TIM_OC4_SetConfig+0xc0>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a17      	ldr	r2, [pc, #92]	@ (8007c84 <TIM_OC4_SetConfig+0x118>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d113      	bne.n	8007c54 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c32:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c3a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	019b      	lsls	r3, r3, #6
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	019b      	lsls	r3, r3, #6
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	621a      	str	r2, [r3, #32]
}
 8007c6e:	bf00      	nop
 8007c70:	371c      	adds	r7, #28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40012c00 	.word	0x40012c00
 8007c80:	40013400 	.word	0x40013400
 8007c84:	40015000 	.word	0x40015000
 8007c88:	40014000 	.word	0x40014000
 8007c8c:	40014400 	.word	0x40014400
 8007c90:	40014800 	.word	0x40014800

08007c94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007cd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	041b      	lsls	r3, r3, #16
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a19      	ldr	r2, [pc, #100]	@ (8007d50 <TIM_OC5_SetConfig+0xbc>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d013      	beq.n	8007d16 <TIM_OC5_SetConfig+0x82>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a18      	ldr	r2, [pc, #96]	@ (8007d54 <TIM_OC5_SetConfig+0xc0>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00f      	beq.n	8007d16 <TIM_OC5_SetConfig+0x82>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a17      	ldr	r2, [pc, #92]	@ (8007d58 <TIM_OC5_SetConfig+0xc4>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d00b      	beq.n	8007d16 <TIM_OC5_SetConfig+0x82>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a16      	ldr	r2, [pc, #88]	@ (8007d5c <TIM_OC5_SetConfig+0xc8>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d007      	beq.n	8007d16 <TIM_OC5_SetConfig+0x82>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a15      	ldr	r2, [pc, #84]	@ (8007d60 <TIM_OC5_SetConfig+0xcc>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d003      	beq.n	8007d16 <TIM_OC5_SetConfig+0x82>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a14      	ldr	r2, [pc, #80]	@ (8007d64 <TIM_OC5_SetConfig+0xd0>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d109      	bne.n	8007d2a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	021b      	lsls	r3, r3, #8
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	621a      	str	r2, [r3, #32]
}
 8007d44:	bf00      	nop
 8007d46:	371c      	adds	r7, #28
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	40012c00 	.word	0x40012c00
 8007d54:	40013400 	.word	0x40013400
 8007d58:	40014000 	.word	0x40014000
 8007d5c:	40014400 	.word	0x40014400
 8007d60:	40014800 	.word	0x40014800
 8007d64:	40015000 	.word	0x40015000

08007d68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a1b      	ldr	r3, [r3, #32]
 8007d7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	021b      	lsls	r3, r3, #8
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	051b      	lsls	r3, r3, #20
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8007e28 <TIM_OC6_SetConfig+0xc0>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d013      	beq.n	8007dec <TIM_OC6_SetConfig+0x84>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a19      	ldr	r2, [pc, #100]	@ (8007e2c <TIM_OC6_SetConfig+0xc4>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00f      	beq.n	8007dec <TIM_OC6_SetConfig+0x84>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a18      	ldr	r2, [pc, #96]	@ (8007e30 <TIM_OC6_SetConfig+0xc8>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d00b      	beq.n	8007dec <TIM_OC6_SetConfig+0x84>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a17      	ldr	r2, [pc, #92]	@ (8007e34 <TIM_OC6_SetConfig+0xcc>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d007      	beq.n	8007dec <TIM_OC6_SetConfig+0x84>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a16      	ldr	r2, [pc, #88]	@ (8007e38 <TIM_OC6_SetConfig+0xd0>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d003      	beq.n	8007dec <TIM_OC6_SetConfig+0x84>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a15      	ldr	r2, [pc, #84]	@ (8007e3c <TIM_OC6_SetConfig+0xd4>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d109      	bne.n	8007e00 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007df2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	029b      	lsls	r3, r3, #10
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	621a      	str	r2, [r3, #32]
}
 8007e1a:	bf00      	nop
 8007e1c:	371c      	adds	r7, #28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	40012c00 	.word	0x40012c00
 8007e2c:	40013400 	.word	0x40013400
 8007e30:	40014000 	.word	0x40014000
 8007e34:	40014400 	.word	0x40014400
 8007e38:	40014800 	.word	0x40014800
 8007e3c:	40015000 	.word	0x40015000

08007e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	f023 0201 	bic.w	r2, r3, #1
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f023 030a 	bic.w	r3, r3, #10
 8007e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	621a      	str	r2, [r3, #32]
}
 8007e92:	bf00      	nop
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b087      	sub	sp, #28
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	60b9      	str	r1, [r7, #8]
 8007ea8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	f023 0210 	bic.w	r2, r3, #16
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	031b      	lsls	r3, r3, #12
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007eda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	621a      	str	r2, [r3, #32]
}
 8007ef2:	bf00      	nop
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b085      	sub	sp, #20
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	f043 0307 	orr.w	r3, r3, #7
 8007f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	609a      	str	r2, [r3, #8]
}
 8007f2c:	bf00      	nop
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	021a      	lsls	r2, r3, #8
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	609a      	str	r2, [r3, #8]
}
 8007f6c:	bf00      	nop
 8007f6e:	371c      	adds	r7, #28
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f003 031f 	and.w	r3, r3, #31
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6a1a      	ldr	r2, [r3, #32]
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	43db      	mvns	r3, r3
 8007f9a:	401a      	ands	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a1a      	ldr	r2, [r3, #32]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f003 031f 	and.w	r3, r3, #31
 8007faa:	6879      	ldr	r1, [r7, #4]
 8007fac:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	621a      	str	r2, [r3, #32]
}
 8007fb6:	bf00      	nop
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
	...

08007fc4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a26      	ldr	r2, [pc, #152]	@ (8008068 <TIM_ResetCallback+0xa4>)
 8007fd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a25      	ldr	r2, [pc, #148]	@ (800806c <TIM_ResetCallback+0xa8>)
 8007fd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a24      	ldr	r2, [pc, #144]	@ (8008070 <TIM_ResetCallback+0xac>)
 8007fe0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a23      	ldr	r2, [pc, #140]	@ (8008074 <TIM_ResetCallback+0xb0>)
 8007fe8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a22      	ldr	r2, [pc, #136]	@ (8008078 <TIM_ResetCallback+0xb4>)
 8007ff0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a21      	ldr	r2, [pc, #132]	@ (800807c <TIM_ResetCallback+0xb8>)
 8007ff8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a20      	ldr	r2, [pc, #128]	@ (8008080 <TIM_ResetCallback+0xbc>)
 8008000:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a1f      	ldr	r2, [pc, #124]	@ (8008084 <TIM_ResetCallback+0xc0>)
 8008008:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a1e      	ldr	r2, [pc, #120]	@ (8008088 <TIM_ResetCallback+0xc4>)
 8008010:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a1d      	ldr	r2, [pc, #116]	@ (800808c <TIM_ResetCallback+0xc8>)
 8008018:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a1c      	ldr	r2, [pc, #112]	@ (8008090 <TIM_ResetCallback+0xcc>)
 8008020:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a1b      	ldr	r2, [pc, #108]	@ (8008094 <TIM_ResetCallback+0xd0>)
 8008028:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a1a      	ldr	r2, [pc, #104]	@ (8008098 <TIM_ResetCallback+0xd4>)
 8008030:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a19      	ldr	r2, [pc, #100]	@ (800809c <TIM_ResetCallback+0xd8>)
 8008038:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a18      	ldr	r2, [pc, #96]	@ (80080a0 <TIM_ResetCallback+0xdc>)
 8008040:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a17      	ldr	r2, [pc, #92]	@ (80080a4 <TIM_ResetCallback+0xe0>)
 8008048:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a16      	ldr	r2, [pc, #88]	@ (80080a8 <TIM_ResetCallback+0xe4>)
 8008050:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a15      	ldr	r2, [pc, #84]	@ (80080ac <TIM_ResetCallback+0xe8>)
 8008058:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	08001969 	.word	0x08001969
 800806c:	080075d1 	.word	0x080075d1
 8008070:	08007649 	.word	0x08007649
 8008074:	0800765d 	.word	0x0800765d
 8008078:	080075f9 	.word	0x080075f9
 800807c:	0800760d 	.word	0x0800760d
 8008080:	080075e5 	.word	0x080075e5
 8008084:	08007621 	.word	0x08007621
 8008088:	08007635 	.word	0x08007635
 800808c:	08007671 	.word	0x08007671
 8008090:	08008305 	.word	0x08008305
 8008094:	08008319 	.word	0x08008319
 8008098:	0800832d 	.word	0x0800832d
 800809c:	08008341 	.word	0x08008341
 80080a0:	08008355 	.word	0x08008355
 80080a4:	08008369 	.word	0x08008369
 80080a8:	0800837d 	.word	0x0800837d
 80080ac:	08008391 	.word	0x08008391

080080b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e074      	b.n	80081b2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a34      	ldr	r2, [pc, #208]	@ (80081c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d009      	beq.n	8008106 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a33      	ldr	r2, [pc, #204]	@ (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d004      	beq.n	8008106 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a31      	ldr	r2, [pc, #196]	@ (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d108      	bne.n	8008118 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800810c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	4313      	orrs	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800811e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	4313      	orrs	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a21      	ldr	r2, [pc, #132]	@ (80081c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d022      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008148:	d01d      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a1f      	ldr	r2, [pc, #124]	@ (80081cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d018      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a1d      	ldr	r2, [pc, #116]	@ (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d013      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a1c      	ldr	r2, [pc, #112]	@ (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d00e      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a15      	ldr	r2, [pc, #84]	@ (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d009      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a18      	ldr	r2, [pc, #96]	@ (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d004      	beq.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a11      	ldr	r2, [pc, #68]	@ (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d10c      	bne.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800818c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	4313      	orrs	r3, r2
 8008196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	40012c00 	.word	0x40012c00
 80081c4:	40013400 	.word	0x40013400
 80081c8:	40015000 	.word	0x40015000
 80081cc:	40000400 	.word	0x40000400
 80081d0:	40000800 	.word	0x40000800
 80081d4:	40000c00 	.word	0x40000c00
 80081d8:	40014000 	.word	0x40014000

080081dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d101      	bne.n	80081f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081f4:	2302      	movs	r3, #2
 80081f6:	e078      	b.n	80082ea <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	4313      	orrs	r3, r2
 800820c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	4313      	orrs	r3, r2
 800821a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	4313      	orrs	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4313      	orrs	r3, r2
 8008236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	4313      	orrs	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800825e:	4313      	orrs	r3, r2
 8008260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	041b      	lsls	r3, r3, #16
 800826e:	4313      	orrs	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	4313      	orrs	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a1c      	ldr	r2, [pc, #112]	@ (80082f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d009      	beq.n	800829e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a1b      	ldr	r2, [pc, #108]	@ (80082fc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d004      	beq.n	800829e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a19      	ldr	r2, [pc, #100]	@ (8008300 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d11c      	bne.n	80082d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a8:	051b      	lsls	r3, r3, #20
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	6a1b      	ldr	r3, [r3, #32]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	40012c00 	.word	0x40012c00
 80082fc:	40013400 	.word	0x40013400
 8008300:	40015000 	.word	0x40015000

08008304 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e050      	b.n	8008458 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d114      	bne.n	80083ea <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fbdb 	bl	8008b84 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d103      	bne.n	80083e0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a21      	ldr	r2, [pc, #132]	@ (8008460 <HAL_UART_Init+0xbc>)
 80083dc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2224      	movs	r2, #36	@ 0x24
 80083ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 0201 	bic.w	r2, r2, #1
 8008400:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008406:	2b00      	cmp	r3, #0
 8008408:	d002      	beq.n	8008410 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 ff08 	bl	8009220 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fc09 	bl	8008c28 <UART_SetConfig>
 8008416:	4603      	mov	r3, r0
 8008418:	2b01      	cmp	r3, #1
 800841a:	d101      	bne.n	8008420 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e01b      	b.n	8008458 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800842e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689a      	ldr	r2, [r3, #8]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800843e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0201 	orr.w	r2, r2, #1
 800844e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 ff87 	bl	8009364 <UART_CheckIdleState>
 8008456:	4603      	mov	r3, r0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	080028e9 	.word	0x080028e9

08008464 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b0ba      	sub	sp, #232	@ 0xe8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	69db      	ldr	r3, [r3, #28]
 8008472:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800848a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800848e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008492:	4013      	ands	r3, r2
 8008494:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008498:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800849c:	2b00      	cmp	r3, #0
 800849e:	d11b      	bne.n	80084d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d015      	beq.n	80084d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084b0:	f003 0320 	and.w	r3, r3, #32
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d105      	bne.n	80084c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d009      	beq.n	80084d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 82f3 	beq.w	8008ab4 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	4798      	blx	r3
      }
      return;
 80084d6:	e2ed      	b.n	8008ab4 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 8129 	beq.w	8008734 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80084e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80084e6:	4b90      	ldr	r3, [pc, #576]	@ (8008728 <HAL_UART_IRQHandler+0x2c4>)
 80084e8:	4013      	ands	r3, r2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d106      	bne.n	80084fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80084ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80084f2:	4b8e      	ldr	r3, [pc, #568]	@ (800872c <HAL_UART_IRQHandler+0x2c8>)
 80084f4:	4013      	ands	r3, r2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 811c 	beq.w	8008734 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008500:	f003 0301 	and.w	r3, r3, #1
 8008504:	2b00      	cmp	r3, #0
 8008506:	d011      	beq.n	800852c <HAL_UART_IRQHandler+0xc8>
 8008508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800850c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00b      	beq.n	800852c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2201      	movs	r2, #1
 800851a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008522:	f043 0201 	orr.w	r2, r3, #1
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800852c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008530:	f003 0302 	and.w	r3, r3, #2
 8008534:	2b00      	cmp	r3, #0
 8008536:	d011      	beq.n	800855c <HAL_UART_IRQHandler+0xf8>
 8008538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00b      	beq.n	800855c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2202      	movs	r2, #2
 800854a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008552:	f043 0204 	orr.w	r2, r3, #4
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800855c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	2b00      	cmp	r3, #0
 8008566:	d011      	beq.n	800858c <HAL_UART_IRQHandler+0x128>
 8008568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2204      	movs	r2, #4
 800857a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008582:	f043 0202 	orr.w	r2, r3, #2
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800858c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008590:	f003 0308 	and.w	r3, r3, #8
 8008594:	2b00      	cmp	r3, #0
 8008596:	d017      	beq.n	80085c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800859c:	f003 0320 	and.w	r3, r3, #32
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d105      	bne.n	80085b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80085a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80085a8:	4b5f      	ldr	r3, [pc, #380]	@ (8008728 <HAL_UART_IRQHandler+0x2c4>)
 80085aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00b      	beq.n	80085c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2208      	movs	r2, #8
 80085b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085be:	f043 0208 	orr.w	r2, r3, #8
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d012      	beq.n	80085fa <HAL_UART_IRQHandler+0x196>
 80085d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00c      	beq.n	80085fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085f0:	f043 0220 	orr.w	r2, r3, #32
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 8259 	beq.w	8008ab8 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800860a:	f003 0320 	and.w	r3, r3, #32
 800860e:	2b00      	cmp	r3, #0
 8008610:	d013      	beq.n	800863a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008616:	f003 0320 	and.w	r3, r3, #32
 800861a:	2b00      	cmp	r3, #0
 800861c:	d105      	bne.n	800862a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800861e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d007      	beq.n	800863a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008640:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800864e:	2b40      	cmp	r3, #64	@ 0x40
 8008650:	d005      	beq.n	800865e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008656:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800865a:	2b00      	cmp	r3, #0
 800865c:	d058      	beq.n	8008710 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 ff97 	bl	8009592 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800866e:	2b40      	cmp	r3, #64	@ 0x40
 8008670:	d148      	bne.n	8008704 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3308      	adds	r3, #8
 8008678:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008680:	e853 3f00 	ldrex	r3, [r3]
 8008684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008688:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800868c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008690:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	3308      	adds	r3, #8
 800869a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800869e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80086a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80086aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80086b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1d9      	bne.n	8008672 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d017      	beq.n	80086f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ce:	4a18      	ldr	r2, [pc, #96]	@ (8008730 <HAL_UART_IRQHandler+0x2cc>)
 80086d0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fc fbaf 	bl	8004e3c <HAL_DMA_Abort_IT>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d01f      	beq.n	8008724 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80086f2:	4610      	mov	r0, r2
 80086f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f6:	e015      	b.n	8008724 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008702:	e00f      	b.n	8008724 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800870e:	e009      	b.n	8008724 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008722:	e1c9      	b.n	8008ab8 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008724:	bf00      	nop
    return;
 8008726:	e1c7      	b.n	8008ab8 <HAL_UART_IRQHandler+0x654>
 8008728:	10000001 	.word	0x10000001
 800872c:	04000120 	.word	0x04000120
 8008730:	0800965f 	.word	0x0800965f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008738:	2b01      	cmp	r3, #1
 800873a:	f040 8157 	bne.w	80089ec <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800873e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008742:	f003 0310 	and.w	r3, r3, #16
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 8150 	beq.w	80089ec <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800874c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008750:	f003 0310 	and.w	r3, r3, #16
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 8149 	beq.w	80089ec <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2210      	movs	r2, #16
 8008760:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800876c:	2b40      	cmp	r3, #64	@ 0x40
 800876e:	f040 80bd 	bne.w	80088ec <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008780:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 8199 	beq.w	8008abc <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008790:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008794:	429a      	cmp	r2, r3
 8008796:	f080 8191 	bcs.w	8008abc <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0320 	and.w	r3, r3, #32
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f040 8087 	bne.w	80088c6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80087c4:	e853 3f00 	ldrex	r3, [r3]
 80087c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80087cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80087d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	461a      	mov	r2, r3
 80087de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80087e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80087ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80087fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1da      	bne.n	80087b8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3308      	adds	r3, #8
 8008808:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008812:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008814:	f023 0301 	bic.w	r3, r3, #1
 8008818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3308      	adds	r3, #8
 8008822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008826:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800882a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800882e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e1      	bne.n	8008802 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3308      	adds	r3, #8
 8008844:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008846:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800884e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008854:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3308      	adds	r3, #8
 800885e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008862:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008864:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008868:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e3      	bne.n	800883e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2220      	movs	r2, #32
 800887a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800888c:	e853 3f00 	ldrex	r3, [r3]
 8008890:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008894:	f023 0310 	bic.w	r3, r3, #16
 8008898:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088ae:	e841 2300 	strex	r3, r2, [r1]
 80088b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1e4      	bne.n	8008884 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fc fa62 	bl	8004d8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2202      	movs	r2, #2
 80088ca:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80088de:	b292      	uxth	r2, r2
 80088e0:	1a8a      	subs	r2, r1, r2
 80088e2:	b292      	uxth	r2, r2
 80088e4:	4611      	mov	r1, r2
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088ea:	e0e7      	b.n	8008abc <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008906:	b29b      	uxth	r3, r3
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 80d9 	beq.w	8008ac0 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800890e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 80d4 	beq.w	8008ac0 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008920:	e853 3f00 	ldrex	r3, [r3]
 8008924:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008928:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800892c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	461a      	mov	r2, r3
 8008936:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800893a:	647b      	str	r3, [r7, #68]	@ 0x44
 800893c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008940:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008942:	e841 2300 	strex	r3, r2, [r1]
 8008946:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1e4      	bne.n	8008918 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3308      	adds	r3, #8
 8008954:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	623b      	str	r3, [r7, #32]
   return(result);
 800895e:	6a3b      	ldr	r3, [r7, #32]
 8008960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008964:	f023 0301 	bic.w	r3, r3, #1
 8008968:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3308      	adds	r3, #8
 8008972:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008976:	633a      	str	r2, [r7, #48]	@ 0x30
 8008978:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800897c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1e1      	bne.n	800894e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2220      	movs	r2, #32
 800898e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 0310 	bic.w	r3, r3, #16
 80089b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80089c0:	61fb      	str	r3, [r7, #28]
 80089c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c4:	69b9      	ldr	r1, [r7, #24]
 80089c6:	69fa      	ldr	r2, [r7, #28]
 80089c8:	e841 2300 	strex	r3, r2, [r1]
 80089cc:	617b      	str	r3, [r7, #20]
   return(result);
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e4      	bne.n	800899e <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2202      	movs	r2, #2
 80089d8:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80089e0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80089e4:	4611      	mov	r1, r2
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089ea:	e069      	b.n	8008ac0 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d010      	beq.n	8008a1a <HAL_UART_IRQHandler+0x5b6>
 80089f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00a      	beq.n	8008a1a <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008a0c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a18:	e055      	b.n	8008ac6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d014      	beq.n	8008a50 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d105      	bne.n	8008a3e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d008      	beq.n	8008a50 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d03e      	beq.n	8008ac4 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	4798      	blx	r3
    }
    return;
 8008a4e:	e039      	b.n	8008ac4 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d009      	beq.n	8008a70 <HAL_UART_IRQHandler+0x60c>
 8008a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d003      	beq.n	8008a70 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fe10 	bl	800968e <UART_EndTransmit_IT>
    return;
 8008a6e:	e02a      	b.n	8008ac6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00b      	beq.n	8008a94 <HAL_UART_IRQHandler+0x630>
 8008a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a80:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a92:	e018      	b.n	8008ac6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d012      	beq.n	8008ac6 <HAL_UART_IRQHandler+0x662>
 8008aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da0e      	bge.n	8008ac6 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ab2:	e008      	b.n	8008ac6 <HAL_UART_IRQHandler+0x662>
      return;
 8008ab4:	bf00      	nop
 8008ab6:	e006      	b.n	8008ac6 <HAL_UART_IRQHandler+0x662>
    return;
 8008ab8:	bf00      	nop
 8008aba:	e004      	b.n	8008ac6 <HAL_UART_IRQHandler+0x662>
      return;
 8008abc:	bf00      	nop
 8008abe:	e002      	b.n	8008ac6 <HAL_UART_IRQHandler+0x662>
      return;
 8008ac0:	bf00      	nop
 8008ac2:	e000      	b.n	8008ac6 <HAL_UART_IRQHandler+0x662>
    return;
 8008ac4:	bf00      	nop
  }
}
 8008ac6:	37e8      	adds	r7, #232	@ 0xe8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	460b      	mov	r3, r1
 8008b76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8008bf8 <UART_InitCallbacksToDefault+0x74>)
 8008b90:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a19      	ldr	r2, [pc, #100]	@ (8008bfc <UART_InitCallbacksToDefault+0x78>)
 8008b98:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a18      	ldr	r2, [pc, #96]	@ (8008c00 <UART_InitCallbacksToDefault+0x7c>)
 8008ba0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a17      	ldr	r2, [pc, #92]	@ (8008c04 <UART_InitCallbacksToDefault+0x80>)
 8008ba8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a16      	ldr	r2, [pc, #88]	@ (8008c08 <UART_InitCallbacksToDefault+0x84>)
 8008bb0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a15      	ldr	r2, [pc, #84]	@ (8008c0c <UART_InitCallbacksToDefault+0x88>)
 8008bb8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a14      	ldr	r2, [pc, #80]	@ (8008c10 <UART_InitCallbacksToDefault+0x8c>)
 8008bc0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a13      	ldr	r2, [pc, #76]	@ (8008c14 <UART_InitCallbacksToDefault+0x90>)
 8008bc8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a12      	ldr	r2, [pc, #72]	@ (8008c18 <UART_InitCallbacksToDefault+0x94>)
 8008bd0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a11      	ldr	r2, [pc, #68]	@ (8008c1c <UART_InitCallbacksToDefault+0x98>)
 8008bd8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a10      	ldr	r2, [pc, #64]	@ (8008c20 <UART_InitCallbacksToDefault+0x9c>)
 8008be0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a0f      	ldr	r2, [pc, #60]	@ (8008c24 <UART_InitCallbacksToDefault+0xa0>)
 8008be8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	08008ae1 	.word	0x08008ae1
 8008bfc:	08008acd 	.word	0x08008acd
 8008c00:	08008b09 	.word	0x08008b09
 8008c04:	08008af5 	.word	0x08008af5
 8008c08:	08008b1d 	.word	0x08008b1d
 8008c0c:	08008b31 	.word	0x08008b31
 8008c10:	08008b45 	.word	0x08008b45
 8008c14:	08008b59 	.word	0x08008b59
 8008c18:	080096e9 	.word	0x080096e9
 8008c1c:	080096fd 	.word	0x080096fd
 8008c20:	08009711 	.word	0x08009711
 8008c24:	08008b6d 	.word	0x08008b6d

08008c28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c2c:	b08c      	sub	sp, #48	@ 0x30
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	431a      	orrs	r2, r3
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	431a      	orrs	r2, r3
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	69db      	ldr	r3, [r3, #28]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	4baa      	ldr	r3, [pc, #680]	@ (8008f00 <UART_SetConfig+0x2d8>)
 8008c58:	4013      	ands	r3, r2
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	6812      	ldr	r2, [r2, #0]
 8008c5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c60:	430b      	orrs	r3, r1
 8008c62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a9f      	ldr	r2, [pc, #636]	@ (8008f04 <UART_SetConfig+0x2dc>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d004      	beq.n	8008c94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c90:	4313      	orrs	r3, r2
 8008c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008c9e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	6812      	ldr	r2, [r2, #0]
 8008ca6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ca8:	430b      	orrs	r3, r1
 8008caa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb2:	f023 010f 	bic.w	r1, r3, #15
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a90      	ldr	r2, [pc, #576]	@ (8008f08 <UART_SetConfig+0x2e0>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d125      	bne.n	8008d18 <UART_SetConfig+0xf0>
 8008ccc:	4b8f      	ldr	r3, [pc, #572]	@ (8008f0c <UART_SetConfig+0x2e4>)
 8008cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cd2:	f003 0303 	and.w	r3, r3, #3
 8008cd6:	2b03      	cmp	r3, #3
 8008cd8:	d81a      	bhi.n	8008d10 <UART_SetConfig+0xe8>
 8008cda:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce0 <UART_SetConfig+0xb8>)
 8008cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce0:	08008cf1 	.word	0x08008cf1
 8008ce4:	08008d01 	.word	0x08008d01
 8008ce8:	08008cf9 	.word	0x08008cf9
 8008cec:	08008d09 	.word	0x08008d09
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cf6:	e116      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cfe:	e112      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008d00:	2304      	movs	r3, #4
 8008d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d06:	e10e      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008d08:	2308      	movs	r3, #8
 8008d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d0e:	e10a      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008d10:	2310      	movs	r3, #16
 8008d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d16:	e106      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a7c      	ldr	r2, [pc, #496]	@ (8008f10 <UART_SetConfig+0x2e8>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d138      	bne.n	8008d94 <UART_SetConfig+0x16c>
 8008d22:	4b7a      	ldr	r3, [pc, #488]	@ (8008f0c <UART_SetConfig+0x2e4>)
 8008d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d28:	f003 030c 	and.w	r3, r3, #12
 8008d2c:	2b0c      	cmp	r3, #12
 8008d2e:	d82d      	bhi.n	8008d8c <UART_SetConfig+0x164>
 8008d30:	a201      	add	r2, pc, #4	@ (adr r2, 8008d38 <UART_SetConfig+0x110>)
 8008d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d36:	bf00      	nop
 8008d38:	08008d6d 	.word	0x08008d6d
 8008d3c:	08008d8d 	.word	0x08008d8d
 8008d40:	08008d8d 	.word	0x08008d8d
 8008d44:	08008d8d 	.word	0x08008d8d
 8008d48:	08008d7d 	.word	0x08008d7d
 8008d4c:	08008d8d 	.word	0x08008d8d
 8008d50:	08008d8d 	.word	0x08008d8d
 8008d54:	08008d8d 	.word	0x08008d8d
 8008d58:	08008d75 	.word	0x08008d75
 8008d5c:	08008d8d 	.word	0x08008d8d
 8008d60:	08008d8d 	.word	0x08008d8d
 8008d64:	08008d8d 	.word	0x08008d8d
 8008d68:	08008d85 	.word	0x08008d85
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d72:	e0d8      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008d74:	2302      	movs	r3, #2
 8008d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d7a:	e0d4      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008d7c:	2304      	movs	r3, #4
 8008d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d82:	e0d0      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008d84:	2308      	movs	r3, #8
 8008d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d8a:	e0cc      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008d8c:	2310      	movs	r3, #16
 8008d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d92:	e0c8      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a5e      	ldr	r2, [pc, #376]	@ (8008f14 <UART_SetConfig+0x2ec>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d125      	bne.n	8008dea <UART_SetConfig+0x1c2>
 8008d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8008f0c <UART_SetConfig+0x2e4>)
 8008da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008da4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008da8:	2b30      	cmp	r3, #48	@ 0x30
 8008daa:	d016      	beq.n	8008dda <UART_SetConfig+0x1b2>
 8008dac:	2b30      	cmp	r3, #48	@ 0x30
 8008dae:	d818      	bhi.n	8008de2 <UART_SetConfig+0x1ba>
 8008db0:	2b20      	cmp	r3, #32
 8008db2:	d00a      	beq.n	8008dca <UART_SetConfig+0x1a2>
 8008db4:	2b20      	cmp	r3, #32
 8008db6:	d814      	bhi.n	8008de2 <UART_SetConfig+0x1ba>
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <UART_SetConfig+0x19a>
 8008dbc:	2b10      	cmp	r3, #16
 8008dbe:	d008      	beq.n	8008dd2 <UART_SetConfig+0x1aa>
 8008dc0:	e00f      	b.n	8008de2 <UART_SetConfig+0x1ba>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dc8:	e0ad      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008dca:	2302      	movs	r3, #2
 8008dcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dd0:	e0a9      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008dd2:	2304      	movs	r3, #4
 8008dd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dd8:	e0a5      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008dda:	2308      	movs	r3, #8
 8008ddc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008de0:	e0a1      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008de2:	2310      	movs	r3, #16
 8008de4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008de8:	e09d      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a4a      	ldr	r2, [pc, #296]	@ (8008f18 <UART_SetConfig+0x2f0>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d125      	bne.n	8008e40 <UART_SetConfig+0x218>
 8008df4:	4b45      	ldr	r3, [pc, #276]	@ (8008f0c <UART_SetConfig+0x2e4>)
 8008df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dfa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008dfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e00:	d016      	beq.n	8008e30 <UART_SetConfig+0x208>
 8008e02:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e04:	d818      	bhi.n	8008e38 <UART_SetConfig+0x210>
 8008e06:	2b80      	cmp	r3, #128	@ 0x80
 8008e08:	d00a      	beq.n	8008e20 <UART_SetConfig+0x1f8>
 8008e0a:	2b80      	cmp	r3, #128	@ 0x80
 8008e0c:	d814      	bhi.n	8008e38 <UART_SetConfig+0x210>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d002      	beq.n	8008e18 <UART_SetConfig+0x1f0>
 8008e12:	2b40      	cmp	r3, #64	@ 0x40
 8008e14:	d008      	beq.n	8008e28 <UART_SetConfig+0x200>
 8008e16:	e00f      	b.n	8008e38 <UART_SetConfig+0x210>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e1e:	e082      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008e20:	2302      	movs	r3, #2
 8008e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e26:	e07e      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008e28:	2304      	movs	r3, #4
 8008e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e2e:	e07a      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008e30:	2308      	movs	r3, #8
 8008e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e36:	e076      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e3e:	e072      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a35      	ldr	r2, [pc, #212]	@ (8008f1c <UART_SetConfig+0x2f4>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d12a      	bne.n	8008ea0 <UART_SetConfig+0x278>
 8008e4a:	4b30      	ldr	r3, [pc, #192]	@ (8008f0c <UART_SetConfig+0x2e4>)
 8008e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e58:	d01a      	beq.n	8008e90 <UART_SetConfig+0x268>
 8008e5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e5e:	d81b      	bhi.n	8008e98 <UART_SetConfig+0x270>
 8008e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e64:	d00c      	beq.n	8008e80 <UART_SetConfig+0x258>
 8008e66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e6a:	d815      	bhi.n	8008e98 <UART_SetConfig+0x270>
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d003      	beq.n	8008e78 <UART_SetConfig+0x250>
 8008e70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e74:	d008      	beq.n	8008e88 <UART_SetConfig+0x260>
 8008e76:	e00f      	b.n	8008e98 <UART_SetConfig+0x270>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e7e:	e052      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008e80:	2302      	movs	r3, #2
 8008e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e86:	e04e      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008e88:	2304      	movs	r3, #4
 8008e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e8e:	e04a      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008e90:	2308      	movs	r3, #8
 8008e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e96:	e046      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008e98:	2310      	movs	r3, #16
 8008e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e9e:	e042      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a17      	ldr	r2, [pc, #92]	@ (8008f04 <UART_SetConfig+0x2dc>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d13a      	bne.n	8008f20 <UART_SetConfig+0x2f8>
 8008eaa:	4b18      	ldr	r3, [pc, #96]	@ (8008f0c <UART_SetConfig+0x2e4>)
 8008eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008eb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008eb8:	d01a      	beq.n	8008ef0 <UART_SetConfig+0x2c8>
 8008eba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ebe:	d81b      	bhi.n	8008ef8 <UART_SetConfig+0x2d0>
 8008ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ec4:	d00c      	beq.n	8008ee0 <UART_SetConfig+0x2b8>
 8008ec6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008eca:	d815      	bhi.n	8008ef8 <UART_SetConfig+0x2d0>
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <UART_SetConfig+0x2b0>
 8008ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ed4:	d008      	beq.n	8008ee8 <UART_SetConfig+0x2c0>
 8008ed6:	e00f      	b.n	8008ef8 <UART_SetConfig+0x2d0>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ede:	e022      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ee6:	e01e      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008ee8:	2304      	movs	r3, #4
 8008eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eee:	e01a      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ef6:	e016      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008ef8:	2310      	movs	r3, #16
 8008efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008efe:	e012      	b.n	8008f26 <UART_SetConfig+0x2fe>
 8008f00:	cfff69f3 	.word	0xcfff69f3
 8008f04:	40008000 	.word	0x40008000
 8008f08:	40013800 	.word	0x40013800
 8008f0c:	40021000 	.word	0x40021000
 8008f10:	40004400 	.word	0x40004400
 8008f14:	40004800 	.word	0x40004800
 8008f18:	40004c00 	.word	0x40004c00
 8008f1c:	40005000 	.word	0x40005000
 8008f20:	2310      	movs	r3, #16
 8008f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4aae      	ldr	r2, [pc, #696]	@ (80091e4 <UART_SetConfig+0x5bc>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	f040 8097 	bne.w	8009060 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f36:	2b08      	cmp	r3, #8
 8008f38:	d823      	bhi.n	8008f82 <UART_SetConfig+0x35a>
 8008f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f40 <UART_SetConfig+0x318>)
 8008f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f40:	08008f65 	.word	0x08008f65
 8008f44:	08008f83 	.word	0x08008f83
 8008f48:	08008f6d 	.word	0x08008f6d
 8008f4c:	08008f83 	.word	0x08008f83
 8008f50:	08008f73 	.word	0x08008f73
 8008f54:	08008f83 	.word	0x08008f83
 8008f58:	08008f83 	.word	0x08008f83
 8008f5c:	08008f83 	.word	0x08008f83
 8008f60:	08008f7b 	.word	0x08008f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f64:	f7fd f85a 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8008f68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f6a:	e010      	b.n	8008f8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f6c:	4b9e      	ldr	r3, [pc, #632]	@ (80091e8 <UART_SetConfig+0x5c0>)
 8008f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f70:	e00d      	b.n	8008f8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f72:	f7fc ffe5 	bl	8005f40 <HAL_RCC_GetSysClockFreq>
 8008f76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f78:	e009      	b.n	8008f8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f80:	e005      	b.n	8008f8e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008f8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 8130 	beq.w	80091f6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9a:	4a94      	ldr	r2, [pc, #592]	@ (80091ec <UART_SetConfig+0x5c4>)
 8008f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fa8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	005b      	lsls	r3, r3, #1
 8008fb2:	4413      	add	r3, r2
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d305      	bcc.n	8008fc6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fc0:	69ba      	ldr	r2, [r7, #24]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d903      	bls.n	8008fce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008fcc:	e113      	b.n	80091f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	60bb      	str	r3, [r7, #8]
 8008fd4:	60fa      	str	r2, [r7, #12]
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fda:	4a84      	ldr	r2, [pc, #528]	@ (80091ec <UART_SetConfig+0x5c4>)
 8008fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	603b      	str	r3, [r7, #0]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ff0:	f7f7 fe00 	bl	8000bf4 <__aeabi_uldivmod>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	f04f 0200 	mov.w	r2, #0
 8009000:	f04f 0300 	mov.w	r3, #0
 8009004:	020b      	lsls	r3, r1, #8
 8009006:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800900a:	0202      	lsls	r2, r0, #8
 800900c:	6979      	ldr	r1, [r7, #20]
 800900e:	6849      	ldr	r1, [r1, #4]
 8009010:	0849      	lsrs	r1, r1, #1
 8009012:	2000      	movs	r0, #0
 8009014:	460c      	mov	r4, r1
 8009016:	4605      	mov	r5, r0
 8009018:	eb12 0804 	adds.w	r8, r2, r4
 800901c:	eb43 0905 	adc.w	r9, r3, r5
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	469a      	mov	sl, r3
 8009028:	4693      	mov	fp, r2
 800902a:	4652      	mov	r2, sl
 800902c:	465b      	mov	r3, fp
 800902e:	4640      	mov	r0, r8
 8009030:	4649      	mov	r1, r9
 8009032:	f7f7 fddf 	bl	8000bf4 <__aeabi_uldivmod>
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	4613      	mov	r3, r2
 800903c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009044:	d308      	bcc.n	8009058 <UART_SetConfig+0x430>
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800904c:	d204      	bcs.n	8009058 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6a3a      	ldr	r2, [r7, #32]
 8009054:	60da      	str	r2, [r3, #12]
 8009056:	e0ce      	b.n	80091f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800905e:	e0ca      	b.n	80091f6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	69db      	ldr	r3, [r3, #28]
 8009064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009068:	d166      	bne.n	8009138 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800906a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800906e:	2b08      	cmp	r3, #8
 8009070:	d827      	bhi.n	80090c2 <UART_SetConfig+0x49a>
 8009072:	a201      	add	r2, pc, #4	@ (adr r2, 8009078 <UART_SetConfig+0x450>)
 8009074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009078:	0800909d 	.word	0x0800909d
 800907c:	080090a5 	.word	0x080090a5
 8009080:	080090ad 	.word	0x080090ad
 8009084:	080090c3 	.word	0x080090c3
 8009088:	080090b3 	.word	0x080090b3
 800908c:	080090c3 	.word	0x080090c3
 8009090:	080090c3 	.word	0x080090c3
 8009094:	080090c3 	.word	0x080090c3
 8009098:	080090bb 	.word	0x080090bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800909c:	f7fc ffbe 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 80090a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090a2:	e014      	b.n	80090ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090a4:	f7fc ffd0 	bl	8006048 <HAL_RCC_GetPCLK2Freq>
 80090a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090aa:	e010      	b.n	80090ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090ac:	4b4e      	ldr	r3, [pc, #312]	@ (80091e8 <UART_SetConfig+0x5c0>)
 80090ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80090b0:	e00d      	b.n	80090ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090b2:	f7fc ff45 	bl	8005f40 <HAL_RCC_GetSysClockFreq>
 80090b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090b8:	e009      	b.n	80090ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80090c0:	e005      	b.n	80090ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80090cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 8090 	beq.w	80091f6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090da:	4a44      	ldr	r2, [pc, #272]	@ (80091ec <UART_SetConfig+0x5c4>)
 80090dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090e0:	461a      	mov	r2, r3
 80090e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80090e8:	005a      	lsls	r2, r3, #1
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	085b      	lsrs	r3, r3, #1
 80090f0:	441a      	add	r2, r3
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	2b0f      	cmp	r3, #15
 8009100:	d916      	bls.n	8009130 <UART_SetConfig+0x508>
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009108:	d212      	bcs.n	8009130 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	b29b      	uxth	r3, r3
 800910e:	f023 030f 	bic.w	r3, r3, #15
 8009112:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009114:	6a3b      	ldr	r3, [r7, #32]
 8009116:	085b      	lsrs	r3, r3, #1
 8009118:	b29b      	uxth	r3, r3
 800911a:	f003 0307 	and.w	r3, r3, #7
 800911e:	b29a      	uxth	r2, r3
 8009120:	8bfb      	ldrh	r3, [r7, #30]
 8009122:	4313      	orrs	r3, r2
 8009124:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	8bfa      	ldrh	r2, [r7, #30]
 800912c:	60da      	str	r2, [r3, #12]
 800912e:	e062      	b.n	80091f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009136:	e05e      	b.n	80091f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009138:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800913c:	2b08      	cmp	r3, #8
 800913e:	d828      	bhi.n	8009192 <UART_SetConfig+0x56a>
 8009140:	a201      	add	r2, pc, #4	@ (adr r2, 8009148 <UART_SetConfig+0x520>)
 8009142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009146:	bf00      	nop
 8009148:	0800916d 	.word	0x0800916d
 800914c:	08009175 	.word	0x08009175
 8009150:	0800917d 	.word	0x0800917d
 8009154:	08009193 	.word	0x08009193
 8009158:	08009183 	.word	0x08009183
 800915c:	08009193 	.word	0x08009193
 8009160:	08009193 	.word	0x08009193
 8009164:	08009193 	.word	0x08009193
 8009168:	0800918b 	.word	0x0800918b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800916c:	f7fc ff56 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8009170:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009172:	e014      	b.n	800919e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009174:	f7fc ff68 	bl	8006048 <HAL_RCC_GetPCLK2Freq>
 8009178:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800917a:	e010      	b.n	800919e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800917c:	4b1a      	ldr	r3, [pc, #104]	@ (80091e8 <UART_SetConfig+0x5c0>)
 800917e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009180:	e00d      	b.n	800919e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009182:	f7fc fedd 	bl	8005f40 <HAL_RCC_GetSysClockFreq>
 8009186:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009188:	e009      	b.n	800919e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800918a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800918e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009190:	e005      	b.n	800919e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800919c:	bf00      	nop
    }

    if (pclk != 0U)
 800919e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d028      	beq.n	80091f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a8:	4a10      	ldr	r2, [pc, #64]	@ (80091ec <UART_SetConfig+0x5c4>)
 80091aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ae:	461a      	mov	r2, r3
 80091b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	085b      	lsrs	r3, r3, #1
 80091bc:	441a      	add	r2, r3
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091c8:	6a3b      	ldr	r3, [r7, #32]
 80091ca:	2b0f      	cmp	r3, #15
 80091cc:	d910      	bls.n	80091f0 <UART_SetConfig+0x5c8>
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091d4:	d20c      	bcs.n	80091f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	b29a      	uxth	r2, r3
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60da      	str	r2, [r3, #12]
 80091e0:	e009      	b.n	80091f6 <UART_SetConfig+0x5ce>
 80091e2:	bf00      	nop
 80091e4:	40008000 	.word	0x40008000
 80091e8:	00f42400 	.word	0x00f42400
 80091ec:	080099b4 	.word	0x080099b4
      }
      else
      {
        ret = HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2201      	movs	r2, #1
 8009202:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2200      	movs	r2, #0
 800920a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	2200      	movs	r2, #0
 8009210:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009212:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009216:	4618      	mov	r0, r3
 8009218:	3730      	adds	r7, #48	@ 0x30
 800921a:	46bd      	mov	sp, r7
 800921c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800922c:	f003 0308 	and.w	r3, r3, #8
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00a      	beq.n	800924a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00a      	beq.n	800926c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	430a      	orrs	r2, r1
 800926a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009270:	f003 0302 	and.w	r3, r3, #2
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00a      	beq.n	800928e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	430a      	orrs	r2, r1
 800928c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009292:	f003 0304 	and.w	r3, r3, #4
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00a      	beq.n	80092b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	430a      	orrs	r2, r1
 80092ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b4:	f003 0310 	and.w	r3, r3, #16
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00a      	beq.n	80092d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	430a      	orrs	r2, r1
 80092d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d01a      	beq.n	8009336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800931a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800931e:	d10a      	bne.n	8009336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00a      	beq.n	8009358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	430a      	orrs	r2, r1
 8009356:	605a      	str	r2, [r3, #4]
  }
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b098      	sub	sp, #96	@ 0x60
 8009368:	af02      	add	r7, sp, #8
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009374:	f7f9 fca8 	bl	8002cc8 <HAL_GetTick>
 8009378:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 0308 	and.w	r3, r3, #8
 8009384:	2b08      	cmp	r3, #8
 8009386:	d12f      	bne.n	80093e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009388:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009390:	2200      	movs	r2, #0
 8009392:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f88e 	bl	80094b8 <UART_WaitOnFlagUntilTimeout>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d022      	beq.n	80093e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093aa:	e853 3f00 	ldrex	r3, [r3]
 80093ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	461a      	mov	r2, r3
 80093be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80093c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093c8:	e841 2300 	strex	r3, r2, [r1]
 80093cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e6      	bne.n	80093a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093e4:	2303      	movs	r3, #3
 80093e6:	e063      	b.n	80094b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0304 	and.w	r3, r3, #4
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	d149      	bne.n	800948a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093fe:	2200      	movs	r2, #0
 8009400:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f857 	bl	80094b8 <UART_WaitOnFlagUntilTimeout>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d03c      	beq.n	800948a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009418:	e853 3f00 	ldrex	r3, [r3]
 800941c:	623b      	str	r3, [r7, #32]
   return(result);
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009424:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	461a      	mov	r2, r3
 800942c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800942e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009430:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009432:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800943c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e6      	bne.n	8009410 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3308      	adds	r3, #8
 8009448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	e853 3f00 	ldrex	r3, [r3]
 8009450:	60fb      	str	r3, [r7, #12]
   return(result);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f023 0301 	bic.w	r3, r3, #1
 8009458:	64bb      	str	r3, [r7, #72]	@ 0x48
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3308      	adds	r3, #8
 8009460:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009462:	61fa      	str	r2, [r7, #28]
 8009464:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009466:	69b9      	ldr	r1, [r7, #24]
 8009468:	69fa      	ldr	r2, [r7, #28]
 800946a:	e841 2300 	strex	r3, r2, [r1]
 800946e:	617b      	str	r3, [r7, #20]
   return(result);
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1e5      	bne.n	8009442 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2220      	movs	r2, #32
 800947a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e012      	b.n	80094b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2220      	movs	r2, #32
 800948e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2220      	movs	r2, #32
 8009496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3758      	adds	r7, #88	@ 0x58
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	603b      	str	r3, [r7, #0]
 80094c4:	4613      	mov	r3, r2
 80094c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094c8:	e04f      	b.n	800956a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d0:	d04b      	beq.n	800956a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094d2:	f7f9 fbf9 	bl	8002cc8 <HAL_GetTick>
 80094d6:	4602      	mov	r2, r0
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	69ba      	ldr	r2, [r7, #24]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d302      	bcc.n	80094e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d101      	bne.n	80094ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e04e      	b.n	800958a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0304 	and.w	r3, r3, #4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d037      	beq.n	800956a <UART_WaitOnFlagUntilTimeout+0xb2>
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2b80      	cmp	r3, #128	@ 0x80
 80094fe:	d034      	beq.n	800956a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	2b40      	cmp	r3, #64	@ 0x40
 8009504:	d031      	beq.n	800956a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	69db      	ldr	r3, [r3, #28]
 800950c:	f003 0308 	and.w	r3, r3, #8
 8009510:	2b08      	cmp	r3, #8
 8009512:	d110      	bne.n	8009536 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2208      	movs	r2, #8
 800951a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 f838 	bl	8009592 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2208      	movs	r2, #8
 8009526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e029      	b.n	800958a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009540:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009544:	d111      	bne.n	800956a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800954e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f000 f81e 	bl	8009592 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2220      	movs	r2, #32
 800955a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e00f      	b.n	800958a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	69da      	ldr	r2, [r3, #28]
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	4013      	ands	r3, r2
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	429a      	cmp	r2, r3
 8009578:	bf0c      	ite	eq
 800957a:	2301      	moveq	r3, #1
 800957c:	2300      	movne	r3, #0
 800957e:	b2db      	uxtb	r3, r3
 8009580:	461a      	mov	r2, r3
 8009582:	79fb      	ldrb	r3, [r7, #7]
 8009584:	429a      	cmp	r2, r3
 8009586:	d0a0      	beq.n	80094ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009592:	b480      	push	{r7}
 8009594:	b095      	sub	sp, #84	@ 0x54
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	461a      	mov	r2, r3
 80095b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80095ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095c0:	e841 2300 	strex	r3, r2, [r1]
 80095c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e6      	bne.n	800959a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3308      	adds	r3, #8
 80095d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	e853 3f00 	ldrex	r3, [r3]
 80095da:	61fb      	str	r3, [r7, #28]
   return(result);
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095e2:	f023 0301 	bic.w	r3, r3, #1
 80095e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3308      	adds	r3, #8
 80095ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095f8:	e841 2300 	strex	r3, r2, [r1]
 80095fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e3      	bne.n	80095cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009608:	2b01      	cmp	r3, #1
 800960a:	d118      	bne.n	800963e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	e853 3f00 	ldrex	r3, [r3]
 8009618:	60bb      	str	r3, [r7, #8]
   return(result);
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	f023 0310 	bic.w	r3, r3, #16
 8009620:	647b      	str	r3, [r7, #68]	@ 0x44
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800962a:	61bb      	str	r3, [r7, #24]
 800962c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962e:	6979      	ldr	r1, [r7, #20]
 8009630:	69ba      	ldr	r2, [r7, #24]
 8009632:	e841 2300 	strex	r3, r2, [r1]
 8009636:	613b      	str	r3, [r7, #16]
   return(result);
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1e6      	bne.n	800960c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2220      	movs	r2, #32
 8009642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009652:	bf00      	nop
 8009654:	3754      	adds	r7, #84	@ 0x54
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800966a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b088      	sub	sp, #32
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	e853 3f00 	ldrex	r3, [r3]
 80096a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096aa:	61fb      	str	r3, [r7, #28]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	461a      	mov	r2, r3
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	61bb      	str	r3, [r7, #24]
 80096b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b8:	6979      	ldr	r1, [r7, #20]
 80096ba:	69ba      	ldr	r2, [r7, #24]
 80096bc:	e841 2300 	strex	r3, r2, [r1]
 80096c0:	613b      	str	r3, [r7, #16]
   return(result);
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1e6      	bne.n	8009696 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2220      	movs	r2, #32
 80096cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096e0:	bf00      	nop
 80096e2:	3720      	adds	r7, #32
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009732:	2b01      	cmp	r3, #1
 8009734:	d101      	bne.n	800973a <HAL_UARTEx_DisableFifoMode+0x16>
 8009736:	2302      	movs	r3, #2
 8009738:	e027      	b.n	800978a <HAL_UARTEx_DisableFifoMode+0x66>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2224      	movs	r2, #36	@ 0x24
 8009746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f022 0201 	bic.w	r2, r2, #1
 8009760:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009768:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2220      	movs	r2, #32
 800977c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b084      	sub	sp, #16
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d101      	bne.n	80097ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097aa:	2302      	movs	r3, #2
 80097ac:	e02d      	b.n	800980a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2224      	movs	r2, #36	@ 0x24
 80097ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0201 	bic.w	r2, r2, #1
 80097d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f850 	bl	8009890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009822:	2b01      	cmp	r3, #1
 8009824:	d101      	bne.n	800982a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009826:	2302      	movs	r3, #2
 8009828:	e02d      	b.n	8009886 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2224      	movs	r2, #36	@ 0x24
 8009836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0201 	bic.w	r2, r2, #1
 8009850:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f812 	bl	8009890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800989c:	2b00      	cmp	r3, #0
 800989e:	d108      	bne.n	80098b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098b0:	e031      	b.n	8009916 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098b2:	2308      	movs	r3, #8
 80098b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098b6:	2308      	movs	r3, #8
 80098b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	0e5b      	lsrs	r3, r3, #25
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f003 0307 	and.w	r3, r3, #7
 80098c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	0f5b      	lsrs	r3, r3, #29
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	f003 0307 	and.w	r3, r3, #7
 80098d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098da:	7bbb      	ldrb	r3, [r7, #14]
 80098dc:	7b3a      	ldrb	r2, [r7, #12]
 80098de:	4911      	ldr	r1, [pc, #68]	@ (8009924 <UARTEx_SetNbDataToProcess+0x94>)
 80098e0:	5c8a      	ldrb	r2, [r1, r2]
 80098e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098e6:	7b3a      	ldrb	r2, [r7, #12]
 80098e8:	490f      	ldr	r1, [pc, #60]	@ (8009928 <UARTEx_SetNbDataToProcess+0x98>)
 80098ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
 80098fa:	7b7a      	ldrb	r2, [r7, #13]
 80098fc:	4909      	ldr	r1, [pc, #36]	@ (8009924 <UARTEx_SetNbDataToProcess+0x94>)
 80098fe:	5c8a      	ldrb	r2, [r1, r2]
 8009900:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009904:	7b7a      	ldrb	r2, [r7, #13]
 8009906:	4908      	ldr	r1, [pc, #32]	@ (8009928 <UARTEx_SetNbDataToProcess+0x98>)
 8009908:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800990a:	fb93 f3f2 	sdiv	r3, r3, r2
 800990e:	b29a      	uxth	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009916:	bf00      	nop
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	080099cc 	.word	0x080099cc
 8009928:	080099d4 	.word	0x080099d4

0800992c <memset>:
 800992c:	4402      	add	r2, r0
 800992e:	4603      	mov	r3, r0
 8009930:	4293      	cmp	r3, r2
 8009932:	d100      	bne.n	8009936 <memset+0xa>
 8009934:	4770      	bx	lr
 8009936:	f803 1b01 	strb.w	r1, [r3], #1
 800993a:	e7f9      	b.n	8009930 <memset+0x4>

0800993c <__libc_init_array>:
 800993c:	b570      	push	{r4, r5, r6, lr}
 800993e:	4d0d      	ldr	r5, [pc, #52]	@ (8009974 <__libc_init_array+0x38>)
 8009940:	4c0d      	ldr	r4, [pc, #52]	@ (8009978 <__libc_init_array+0x3c>)
 8009942:	1b64      	subs	r4, r4, r5
 8009944:	10a4      	asrs	r4, r4, #2
 8009946:	2600      	movs	r6, #0
 8009948:	42a6      	cmp	r6, r4
 800994a:	d109      	bne.n	8009960 <__libc_init_array+0x24>
 800994c:	4d0b      	ldr	r5, [pc, #44]	@ (800997c <__libc_init_array+0x40>)
 800994e:	4c0c      	ldr	r4, [pc, #48]	@ (8009980 <__libc_init_array+0x44>)
 8009950:	f000 f818 	bl	8009984 <_init>
 8009954:	1b64      	subs	r4, r4, r5
 8009956:	10a4      	asrs	r4, r4, #2
 8009958:	2600      	movs	r6, #0
 800995a:	42a6      	cmp	r6, r4
 800995c:	d105      	bne.n	800996a <__libc_init_array+0x2e>
 800995e:	bd70      	pop	{r4, r5, r6, pc}
 8009960:	f855 3b04 	ldr.w	r3, [r5], #4
 8009964:	4798      	blx	r3
 8009966:	3601      	adds	r6, #1
 8009968:	e7ee      	b.n	8009948 <__libc_init_array+0xc>
 800996a:	f855 3b04 	ldr.w	r3, [r5], #4
 800996e:	4798      	blx	r3
 8009970:	3601      	adds	r6, #1
 8009972:	e7f2      	b.n	800995a <__libc_init_array+0x1e>
 8009974:	080099e4 	.word	0x080099e4
 8009978:	080099e4 	.word	0x080099e4
 800997c:	080099e4 	.word	0x080099e4
 8009980:	080099e8 	.word	0x080099e8

08009984 <_init>:
 8009984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009986:	bf00      	nop
 8009988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998a:	bc08      	pop	{r3}
 800998c:	469e      	mov	lr, r3
 800998e:	4770      	bx	lr

08009990 <_fini>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	bf00      	nop
 8009994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009996:	bc08      	pop	{r3}
 8009998:	469e      	mov	lr, r3
 800999a:	4770      	bx	lr


Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6f8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800b8d0  0800b8d0  0000c8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9e4  0800b9e4  0000d254  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9e4  0800b9e4  0000c9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9ec  0800b9ec  0000d254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9ec  0800b9ec  0000c9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b9f0  0800b9f0  0000c9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  0800b9f4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001488  20000258  0800bc48  0000d258  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200016e0  0800bc48  0000d6e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d254  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025914  00000000  00000000  0000d284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000417b  00000000  00000000  00032b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001920  00000000  00000000  00036d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001390  00000000  00000000  00038638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4bc  00000000  00000000  000399c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000255d3  00000000  00000000  00064e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117461  00000000  00000000  0008a457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a18b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d74  00000000  00000000  001a18fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001a8670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000258 	.word	0x20000258
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b8b8 	.word	0x0800b8b8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000025c 	.word	0x2000025c
 8000214:	0800b8b8 	.word	0x0800b8b8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b96a 	b.w	8000dd0 <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9d08      	ldr	r5, [sp, #32]
 8000b1a:	460c      	mov	r4, r1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d14e      	bne.n	8000bbe <__udivmoddi4+0xaa>
 8000b20:	4694      	mov	ip, r2
 8000b22:	458c      	cmp	ip, r1
 8000b24:	4686      	mov	lr, r0
 8000b26:	fab2 f282 	clz	r2, r2
 8000b2a:	d962      	bls.n	8000bf2 <__udivmoddi4+0xde>
 8000b2c:	b14a      	cbz	r2, 8000b42 <__udivmoddi4+0x2e>
 8000b2e:	f1c2 0320 	rsb	r3, r2, #32
 8000b32:	4091      	lsls	r1, r2
 8000b34:	fa20 f303 	lsr.w	r3, r0, r3
 8000b38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b3c:	4319      	orrs	r1, r3
 8000b3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b46:	fa1f f68c 	uxth.w	r6, ip
 8000b4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b52:	fb07 1114 	mls	r1, r7, r4, r1
 8000b56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b5a:	fb04 f106 	mul.w	r1, r4, r6
 8000b5e:	4299      	cmp	r1, r3
 8000b60:	d90a      	bls.n	8000b78 <__udivmoddi4+0x64>
 8000b62:	eb1c 0303 	adds.w	r3, ip, r3
 8000b66:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b6a:	f080 8112 	bcs.w	8000d92 <__udivmoddi4+0x27e>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 810f 	bls.w	8000d92 <__udivmoddi4+0x27e>
 8000b74:	3c02      	subs	r4, #2
 8000b76:	4463      	add	r3, ip
 8000b78:	1a59      	subs	r1, r3, r1
 8000b7a:	fa1f f38e 	uxth.w	r3, lr
 8000b7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b82:	fb07 1110 	mls	r1, r7, r0, r1
 8000b86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8a:	fb00 f606 	mul.w	r6, r0, r6
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x94>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b9a:	f080 80fc 	bcs.w	8000d96 <__udivmoddi4+0x282>
 8000b9e:	429e      	cmp	r6, r3
 8000ba0:	f240 80f9 	bls.w	8000d96 <__udivmoddi4+0x282>
 8000ba4:	4463      	add	r3, ip
 8000ba6:	3802      	subs	r0, #2
 8000ba8:	1b9b      	subs	r3, r3, r6
 8000baa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bae:	2100      	movs	r1, #0
 8000bb0:	b11d      	cbz	r5, 8000bba <__udivmoddi4+0xa6>
 8000bb2:	40d3      	lsrs	r3, r2
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d905      	bls.n	8000bce <__udivmoddi4+0xba>
 8000bc2:	b10d      	cbz	r5, 8000bc8 <__udivmoddi4+0xb4>
 8000bc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4608      	mov	r0, r1
 8000bcc:	e7f5      	b.n	8000bba <__udivmoddi4+0xa6>
 8000bce:	fab3 f183 	clz	r1, r3
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	d146      	bne.n	8000c64 <__udivmoddi4+0x150>
 8000bd6:	42a3      	cmp	r3, r4
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xcc>
 8000bda:	4290      	cmp	r0, r2
 8000bdc:	f0c0 80f0 	bcc.w	8000dc0 <__udivmoddi4+0x2ac>
 8000be0:	1a86      	subs	r6, r0, r2
 8000be2:	eb64 0303 	sbc.w	r3, r4, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	2d00      	cmp	r5, #0
 8000bea:	d0e6      	beq.n	8000bba <__udivmoddi4+0xa6>
 8000bec:	e9c5 6300 	strd	r6, r3, [r5]
 8000bf0:	e7e3      	b.n	8000bba <__udivmoddi4+0xa6>
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	f040 8090 	bne.w	8000d18 <__udivmoddi4+0x204>
 8000bf8:	eba1 040c 	sub.w	r4, r1, ip
 8000bfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c00:	fa1f f78c 	uxth.w	r7, ip
 8000c04:	2101      	movs	r1, #1
 8000c06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c16:	fb07 f006 	mul.w	r0, r7, r6
 8000c1a:	4298      	cmp	r0, r3
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x11c>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x11a>
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	f200 80cd 	bhi.w	8000dc8 <__udivmoddi4+0x2b4>
 8000c2e:	4626      	mov	r6, r4
 8000c30:	1a1c      	subs	r4, r3, r0
 8000c32:	fa1f f38e 	uxth.w	r3, lr
 8000c36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c42:	fb00 f707 	mul.w	r7, r0, r7
 8000c46:	429f      	cmp	r7, r3
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x148>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0x146>
 8000c54:	429f      	cmp	r7, r3
 8000c56:	f200 80b0 	bhi.w	8000dba <__udivmoddi4+0x2a6>
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	1bdb      	subs	r3, r3, r7
 8000c5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c62:	e7a5      	b.n	8000bb0 <__udivmoddi4+0x9c>
 8000c64:	f1c1 0620 	rsb	r6, r1, #32
 8000c68:	408b      	lsls	r3, r1
 8000c6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c6e:	431f      	orrs	r7, r3
 8000c70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c74:	fa04 f301 	lsl.w	r3, r4, r1
 8000c78:	ea43 030c 	orr.w	r3, r3, ip
 8000c7c:	40f4      	lsrs	r4, r6
 8000c7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c82:	0c38      	lsrs	r0, r7, #16
 8000c84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c88:	fbb4 fef0 	udiv	lr, r4, r0
 8000c8c:	fa1f fc87 	uxth.w	ip, r7
 8000c90:	fb00 441e 	mls	r4, r0, lr, r4
 8000c94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c98:	fb0e f90c 	mul.w	r9, lr, ip
 8000c9c:	45a1      	cmp	r9, r4
 8000c9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x1a6>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000caa:	f080 8084 	bcs.w	8000db6 <__udivmoddi4+0x2a2>
 8000cae:	45a1      	cmp	r9, r4
 8000cb0:	f240 8081 	bls.w	8000db6 <__udivmoddi4+0x2a2>
 8000cb4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cb8:	443c      	add	r4, r7
 8000cba:	eba4 0409 	sub.w	r4, r4, r9
 8000cbe:	fa1f f983 	uxth.w	r9, r3
 8000cc2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cc6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cd2:	45a4      	cmp	ip, r4
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x1d2>
 8000cd6:	193c      	adds	r4, r7, r4
 8000cd8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cdc:	d267      	bcs.n	8000dae <__udivmoddi4+0x29a>
 8000cde:	45a4      	cmp	ip, r4
 8000ce0:	d965      	bls.n	8000dae <__udivmoddi4+0x29a>
 8000ce2:	3b02      	subs	r3, #2
 8000ce4:	443c      	add	r4, r7
 8000ce6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cea:	fba0 9302 	umull	r9, r3, r0, r2
 8000cee:	eba4 040c 	sub.w	r4, r4, ip
 8000cf2:	429c      	cmp	r4, r3
 8000cf4:	46ce      	mov	lr, r9
 8000cf6:	469c      	mov	ip, r3
 8000cf8:	d351      	bcc.n	8000d9e <__udivmoddi4+0x28a>
 8000cfa:	d04e      	beq.n	8000d9a <__udivmoddi4+0x286>
 8000cfc:	b155      	cbz	r5, 8000d14 <__udivmoddi4+0x200>
 8000cfe:	ebb8 030e 	subs.w	r3, r8, lr
 8000d02:	eb64 040c 	sbc.w	r4, r4, ip
 8000d06:	fa04 f606 	lsl.w	r6, r4, r6
 8000d0a:	40cb      	lsrs	r3, r1
 8000d0c:	431e      	orrs	r6, r3
 8000d0e:	40cc      	lsrs	r4, r1
 8000d10:	e9c5 6400 	strd	r6, r4, [r5]
 8000d14:	2100      	movs	r1, #0
 8000d16:	e750      	b.n	8000bba <__udivmoddi4+0xa6>
 8000d18:	f1c2 0320 	rsb	r3, r2, #32
 8000d1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d24:	fa24 f303 	lsr.w	r3, r4, r3
 8000d28:	4094      	lsls	r4, r2
 8000d2a:	430c      	orrs	r4, r1
 8000d2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d40:	0c23      	lsrs	r3, r4, #16
 8000d42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d46:	fb00 f107 	mul.w	r1, r0, r7
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x24c>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d56:	d22c      	bcs.n	8000db2 <__udivmoddi4+0x29e>
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	d92a      	bls.n	8000db2 <__udivmoddi4+0x29e>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4463      	add	r3, ip
 8000d60:	1a5b      	subs	r3, r3, r1
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d68:	fb08 3311 	mls	r3, r8, r1, r3
 8000d6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d70:	fb01 f307 	mul.w	r3, r1, r7
 8000d74:	42a3      	cmp	r3, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x276>
 8000d78:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d80:	d213      	bcs.n	8000daa <__udivmoddi4+0x296>
 8000d82:	42a3      	cmp	r3, r4
 8000d84:	d911      	bls.n	8000daa <__udivmoddi4+0x296>
 8000d86:	3902      	subs	r1, #2
 8000d88:	4464      	add	r4, ip
 8000d8a:	1ae4      	subs	r4, r4, r3
 8000d8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d90:	e739      	b.n	8000c06 <__udivmoddi4+0xf2>
 8000d92:	4604      	mov	r4, r0
 8000d94:	e6f0      	b.n	8000b78 <__udivmoddi4+0x64>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e706      	b.n	8000ba8 <__udivmoddi4+0x94>
 8000d9a:	45c8      	cmp	r8, r9
 8000d9c:	d2ae      	bcs.n	8000cfc <__udivmoddi4+0x1e8>
 8000d9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000da2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000da6:	3801      	subs	r0, #1
 8000da8:	e7a8      	b.n	8000cfc <__udivmoddi4+0x1e8>
 8000daa:	4631      	mov	r1, r6
 8000dac:	e7ed      	b.n	8000d8a <__udivmoddi4+0x276>
 8000dae:	4603      	mov	r3, r0
 8000db0:	e799      	b.n	8000ce6 <__udivmoddi4+0x1d2>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e7d4      	b.n	8000d60 <__udivmoddi4+0x24c>
 8000db6:	46d6      	mov	lr, sl
 8000db8:	e77f      	b.n	8000cba <__udivmoddi4+0x1a6>
 8000dba:	4463      	add	r3, ip
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	e74d      	b.n	8000c5c <__udivmoddi4+0x148>
 8000dc0:	4606      	mov	r6, r0
 8000dc2:	4623      	mov	r3, r4
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e70f      	b.n	8000be8 <__udivmoddi4+0xd4>
 8000dc8:	3e02      	subs	r6, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	e730      	b.n	8000c30 <__udivmoddi4+0x11c>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_idiv0>:
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <Vacuum_Status>:
uint16_t countPlace = 0;
uint16_t state = 0;
uint8_t set_shelves_state = 0;
ModbusHandleTypedef hmodbus;

void Vacuum_Status(EFF* eff){
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    //Vacuum On
    if (registerFrame[0x02].U16 == 1){
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <Vacuum_Status+0x48>)
 8000dde:	889b      	ldrh	r3, [r3, #4]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d10b      	bne.n	8000dfc <Vacuum_Status+0x28>
        strcpy(Vacuum, "On");
 8000de4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <Vacuum_Status+0x4c>)
 8000de6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e24 <Vacuum_Status+0x50>)
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	4611      	mov	r1, r2
 8000dec:	8019      	strh	r1, [r3, #0]
 8000dee:	3302      	adds	r3, #2
 8000df0:	0c12      	lsrs	r2, r2, #16
 8000df2:	701a      	strb	r2, [r3, #0]
        eff -> solenoid_command[0] = 1;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2201      	movs	r2, #1
 8000df8:	709a      	strb	r2, [r3, #2]
    //Vacuum Off
    else if (registerFrame[0x02].U16 == 0){
        strcpy(Vacuum, "Off");
        eff -> solenoid_command[0] = 0;
    }
}
 8000dfa:	e009      	b.n	8000e10 <Vacuum_Status+0x3c>
    else if (registerFrame[0x02].U16 == 0){
 8000dfc:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <Vacuum_Status+0x48>)
 8000dfe:	889b      	ldrh	r3, [r3, #4]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d105      	bne.n	8000e10 <Vacuum_Status+0x3c>
        strcpy(Vacuum, "Off");
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <Vacuum_Status+0x4c>)
 8000e06:	4a08      	ldr	r2, [pc, #32]	@ (8000e28 <Vacuum_Status+0x54>)
 8000e08:	601a      	str	r2, [r3, #0]
        eff -> solenoid_command[0] = 0;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	709a      	strb	r2, [r3, #2]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	20000db4 	.word	0x20000db4
 8000e20:	20000000 	.word	0x20000000
 8000e24:	0800b8d0 	.word	0x0800b8d0
 8000e28:	0066664f 	.word	0x0066664f

08000e2c <Gripper_Movement_Status>:

void Gripper_Movement_Status(EFF* eff){
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
    //Movement Forward (push)
    if (registerFrame[0x03].U16 == 1){
 8000e34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <Gripper_Movement_Status+0xb4>)
 8000e36:	88db      	ldrh	r3, [r3, #6]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d123      	bne.n	8000e84 <Gripper_Movement_Status+0x58>
        strcpy(Gripper, "Forward");
 8000e3c:	4b29      	ldr	r3, [pc, #164]	@ (8000ee4 <Gripper_Movement_Status+0xb8>)
 8000e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ee8 <Gripper_Movement_Status+0xbc>)
 8000e40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e44:	e883 0003 	stmia.w	r3, {r0, r1}
        // if pull reed switch is activate
        if(eff -> actual_status[0] == 1 && eff -> actual_status[1] == 0){
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d10a      	bne.n	8000e66 <Gripper_Movement_Status+0x3a>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	785b      	ldrb	r3, [r3, #1]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d106      	bne.n	8000e66 <Gripper_Movement_Status+0x3a>
			eff -> solenoid_command[1] = 1;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 0;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	711a      	strb	r2, [r3, #4]
 8000e64:	e035      	b.n	8000ed2 <Gripper_Movement_Status+0xa6>
        }
        // if push reed switch is activate
        else if(eff -> actual_status[0] == 0 && eff -> actual_status[1] == 1){
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d131      	bne.n	8000ed2 <Gripper_Movement_Status+0xa6>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	785b      	ldrb	r3, [r3, #1]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d12d      	bne.n	8000ed2 <Gripper_Movement_Status+0xa6>
        	eff -> solenoid_command[1] = 0;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 0;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	711a      	strb	r2, [r3, #4]
        else if(eff -> actual_status[0] == 0 && eff -> actual_status[1] == 1){
        	eff -> solenoid_command[1] = 0;
			eff -> solenoid_command[2] = 1;
        }
    }
}
 8000e82:	e026      	b.n	8000ed2 <Gripper_Movement_Status+0xa6>
    else if (registerFrame[0x03].U16 == 0){
 8000e84:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <Gripper_Movement_Status+0xb4>)
 8000e86:	88db      	ldrh	r3, [r3, #6]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d122      	bne.n	8000ed2 <Gripper_Movement_Status+0xa6>
        strcpy(Gripper, "Backward");
 8000e8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <Gripper_Movement_Status+0xb8>)
 8000e8e:	4a17      	ldr	r2, [pc, #92]	@ (8000eec <Gripper_Movement_Status+0xc0>)
 8000e90:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e92:	c303      	stmia	r3!, {r0, r1}
 8000e94:	701a      	strb	r2, [r3, #0]
        if(eff -> actual_status[0] == 1 && eff -> actual_status[1] == 0){
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d10a      	bne.n	8000eb4 <Gripper_Movement_Status+0x88>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	785b      	ldrb	r3, [r3, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d106      	bne.n	8000eb4 <Gripper_Movement_Status+0x88>
			eff -> solenoid_command[1] = 0;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	711a      	strb	r2, [r3, #4]
 8000eb2:	e00e      	b.n	8000ed2 <Gripper_Movement_Status+0xa6>
        else if(eff -> actual_status[0] == 0 && eff -> actual_status[1] == 1){
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d10a      	bne.n	8000ed2 <Gripper_Movement_Status+0xa6>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	785b      	ldrb	r3, [r3, #1]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d106      	bne.n	8000ed2 <Gripper_Movement_Status+0xa6>
        	eff -> solenoid_command[1] = 0;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 1;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	711a      	strb	r2, [r3, #4]
}
 8000ed0:	e7ff      	b.n	8000ed2 <Gripper_Movement_Status+0xa6>
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000db4 	.word	0x20000db4
 8000ee4:	2000000c 	.word	0x2000000c
 8000ee8:	0800b8d4 	.word	0x0800b8d4
 8000eec:	0800b8dc 	.word	0x0800b8dc

08000ef0 <Set_Home>:
		state = registerFrame[0x10].U16;
		return 1;
	}else{return 0;}
}

void Set_Home(){
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
	if(registerFrame[0x10].U16 == 2){
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <Set_Home+0x28>)
 8000ef6:	8c1b      	ldrh	r3, [r3, #32]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d108      	bne.n	8000f0e <Set_Home+0x1e>
		state = 2;
 8000efc:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <Set_Home+0x2c>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	801a      	strh	r2, [r3, #0]
		strcpy(Home, "Homing...");
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <Set_Home+0x30>)
 8000f04:	4a07      	ldr	r2, [pc, #28]	@ (8000f24 <Set_Home+0x34>)
 8000f06:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f08:	c303      	stmia	r3!, {r0, r1}
 8000f0a:	801a      	strh	r2, [r3, #0]
 8000f0c:	e000      	b.n	8000f10 <Set_Home+0x20>
	}
	else{
		return;
 8000f0e:	bf00      	nop
//	if (Jogginghome == 1){
//		registerFrame[0x01].U16 = 0;
//	}


}
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	20000db4 	.word	0x20000db4
 8000f1c:	20000274 	.word	0x20000274
 8000f20:	20000020 	.word	0x20000020
 8000f24:	0800b8e8 	.word	0x0800b8e8

08000f28 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <modbus_1t5_Timeout+0x3c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2201      	movs	r2, #1
 8000f32:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f34:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <modbus_1t5_Timeout+0x3c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <modbus_1t5_Timeout+0x3c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <modbus_1t5_Timeout+0x3c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0201 	orr.w	r2, r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000750 	.word	0x20000750

08000f68 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <modbus_3t5_Timeout+0x1c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2201      	movs	r2, #1
 8000f76:	755a      	strb	r2, [r3, #21]

}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	20000750 	.word	0x20000750

08000f88 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f009 fb17 	bl	800a5c4 <HAL_UART_GetError>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b20      	cmp	r3, #32
 8000f9a:	d101      	bne.n	8000fa0 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000f9c:	f7ff ffc4 	bl	8000f28 <modbus_1t5_Timeout>

	}
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000fb2:	4a25      	ldr	r2, [pc, #148]	@ (8001048 <Modbus_init+0xa0>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000fb8:	4b23      	ldr	r3, [pc, #140]	@ (8001048 <Modbus_init+0xa0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	4a21      	ldr	r2, [pc, #132]	@ (800104c <Modbus_init+0xa4>)
 8000fc6:	210e      	movs	r1, #14
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f007 fd3f 	bl	8008a4c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	2110      	movs	r1, #16
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f009 fa9f 	bl	800a518 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f009 fab6 	bl	800a550 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	4a19      	ldr	r2, [pc, #100]	@ (8001050 <Modbus_init+0xa8>)
 8000fea:	2104      	movs	r1, #4
 8000fec:	4618      	mov	r0, r3
 8000fee:	f008 fd7d 	bl	8009aec <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <Modbus_init+0xa0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <Modbus_init+0xa0>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <Modbus_init+0xa0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001004:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001008:	4413      	add	r3, r2
 800100a:	3302      	adds	r3, #2
 800100c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001010:	4619      	mov	r1, r3
 8001012:	f008 fea5 	bl	8009d60 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <Modbus_init+0xa0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d10c      	bne.n	8001040 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <Modbus_init+0xa0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	4618      	mov	r0, r3
 800102e:	f006 fc39 	bl	80078a4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001032:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <Modbus_init+0xa0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f006 fe92 	bl	8007d64 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000750 	.word	0x20000750
 800104c:	08000f69 	.word	0x08000f69
 8001050:	08000f89 	.word	0x08000f89

08001054 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001060:	23ff      	movs	r3, #255	@ 0xff
 8001062:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001064:	23ff      	movs	r3, #255	@ 0xff
 8001066:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001068:	e013      	b.n	8001092 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	781a      	ldrb	r2, [r3, #0]
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	4053      	eors	r3, r2
 8001076:	b2db      	uxtb	r3, r3
 8001078:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800107a:	4a0f      	ldr	r2, [pc, #60]	@ (80010b8 <CRC16+0x64>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4413      	add	r3, r2
 8001080:	781a      	ldrb	r2, [r3, #0]
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	4053      	eors	r3, r2
 8001086:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001088:	4a0c      	ldr	r2, [pc, #48]	@ (80010bc <CRC16+0x68>)
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001092:	883b      	ldrh	r3, [r7, #0]
 8001094:	1e5a      	subs	r2, r3, #1
 8001096:	803a      	strh	r2, [r7, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1e6      	bne.n	800106a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	7bbb      	ldrb	r3, [r7, #14]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	b29b      	uxth	r3, r3
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	20000134 	.word	0x20000134
 80010bc:	20000034 	.word	0x20000034

080010c0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80010c6:	4b7e      	ldr	r3, [pc, #504]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	7ddb      	ldrb	r3, [r3, #23]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d80a      	bhi.n	80010e8 <Modbus_Protocal_Worker+0x28>
 80010d2:	a201      	add	r2, pc, #4	@ (adr r2, 80010d8 <Modbus_Protocal_Worker+0x18>)
 80010d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d8:	080010f3 	.word	0x080010f3
 80010dc:	08001287 	.word	0x08001287
 80010e0:	0800117f 	.word	0x0800117f
 80010e4:	080011c3 	.word	0x080011c3
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80010e8:	4b75      	ldr	r3, [pc, #468]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2201      	movs	r2, #1
 80010ee:	75da      	strb	r2, [r3, #23]
		break;
 80010f0:	e0e1      	b.n	80012b6 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80010f2:	4b73      	ldr	r3, [pc, #460]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d006      	beq.n	800110c <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80010fe:	4b70      	ldr	r3, [pc, #448]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2202      	movs	r2, #2
 8001104:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001106:	f000 f9cd 	bl	80014a4 <Modbus_Emission>
 800110a:	e018      	b.n	800113e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 800110c:	4b6c      	ldr	r3, [pc, #432]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001116:	4b6a      	ldr	r3, [pc, #424]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001120:	b29b      	uxth	r3, r3
 8001122:	429a      	cmp	r2, r3
 8001124:	d00b      	beq.n	800113e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001126:	4b66      	ldr	r3, [pc, #408]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2200      	movs	r2, #0
 800112c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800112e:	4b64      	ldr	r3, [pc, #400]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2200      	movs	r2, #0
 8001134:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001136:	4b62      	ldr	r3, [pc, #392]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2203      	movs	r2, #3
 800113c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800113e:	4b60      	ldr	r3, [pc, #384]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001148:	2b20      	cmp	r3, #32
 800114a:	f040 80ad 	bne.w	80012a8 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800114e:	4b5c      	ldr	r3, [pc, #368]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2200      	movs	r2, #0
 8001154:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001158:	4b59      	ldr	r3, [pc, #356]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800115e:	4b58      	ldr	r3, [pc, #352]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4b57      	ldr	r3, [pc, #348]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800116a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800116e:	4413      	add	r3, r2
 8001170:	3302      	adds	r3, #2
 8001172:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001176:	4619      	mov	r1, r3
 8001178:	f008 fdf2 	bl	8009d60 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 800117c:	e094      	b.n	80012a8 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800117e:	4b50      	ldr	r3, [pc, #320]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	7d1b      	ldrb	r3, [r3, #20]
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 8091 	beq.w	80012ac <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800118a:	4b4d      	ldr	r3, [pc, #308]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	22fe      	movs	r2, #254	@ 0xfe
 8001190:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001192:	4b4b      	ldr	r3, [pc, #300]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 800119c:	4b48      	ldr	r3, [pc, #288]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80011ac:	4b44      	ldr	r3, [pc, #272]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 80011ae:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80011b0:	1a8a      	subs	r2, r1, r2
 80011b2:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80011b4:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80011b8:	4b41      	ldr	r3, [pc, #260]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2204      	movs	r2, #4
 80011be:	75da      	strb	r2, [r3, #23]
		}
		break;
 80011c0:	e074      	b.n	80012ac <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80011c2:	4b3f      	ldr	r3, [pc, #252]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80011ca:	f113 0f02 	cmn.w	r3, #2
 80011ce:	d150      	bne.n	8001272 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80011d0:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2200      	movs	r2, #0
 80011d6:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80011d8:	4b39      	ldr	r3, [pc, #228]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80011e0:	4b37      	ldr	r3, [pc, #220]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011e8:	3b02      	subs	r3, #2
 80011ea:	4619      	mov	r1, r3
 80011ec:	4610      	mov	r0, r2
 80011ee:	f7ff ff31 	bl	8001054 <CRC16>
 80011f2:	4603      	mov	r3, r0
 80011f4:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011f6:	793a      	ldrb	r2, [r7, #4]
 80011f8:	4b31      	ldr	r3, [pc, #196]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 80011fa:	6819      	ldr	r1, [r3, #0]
 80011fc:	4b30      	ldr	r3, [pc, #192]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001204:	3b02      	subs	r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 800120c:	429a      	cmp	r2, r3
 800120e:	d10c      	bne.n	800122a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001210:	797a      	ldrb	r2, [r7, #5]
 8001212:	4b2b      	ldr	r3, [pc, #172]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001214:	6819      	ldr	r1, [r3, #0]
 8001216:	4b2a      	ldr	r3, [pc, #168]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800121e:	3b01      	subs	r3, #1
 8001220:	440b      	add	r3, r1
 8001222:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001226:	429a      	cmp	r2, r3
 8001228:	d004      	beq.n	8001234 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800122a:	4b25      	ldr	r3, [pc, #148]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	22ff      	movs	r2, #255	@ 0xff
 8001230:	759a      	strb	r2, [r3, #22]
				break;
 8001232:	e040      	b.n	80012b6 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001234:	4b22      	ldr	r3, [pc, #136]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800123c:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d113      	bne.n	800126e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001246:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800124e:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001256:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001258:	4b19      	ldr	r3, [pc, #100]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001260:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001262:	461a      	mov	r2, r3
 8001264:	f00a fb1a 	bl	800b89c <memcpy>

			//execute command
			Modbus_frame_response();
 8001268:	f000 f904 	bl	8001474 <Modbus_frame_response>
 800126c:	e001      	b.n	8001272 <Modbus_Protocal_Worker+0x1b2>
				break;
 800126e:	bf00      	nop
					}
		break;


	}
}
 8001270:	e021      	b.n	80012b6 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001272:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	7d5b      	ldrb	r3, [r3, #21]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d019      	beq.n	80012b0 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 800127c:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2201      	movs	r2, #1
 8001282:	75da      	strb	r2, [r3, #23]
		break;
 8001284:	e014      	b.n	80012b0 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001290:	2b20      	cmp	r3, #32
 8001292:	d10f      	bne.n	80012b4 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001294:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800129e:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <Modbus_Protocal_Worker+0x200>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2201      	movs	r2, #1
 80012a4:	75da      	strb	r2, [r3, #23]
		break;
 80012a6:	e005      	b.n	80012b4 <Modbus_Protocal_Worker+0x1f4>
		break;
 80012a8:	bf00      	nop
 80012aa:	e004      	b.n	80012b6 <Modbus_Protocal_Worker+0x1f6>
		break;
 80012ac:	bf00      	nop
 80012ae:	e002      	b.n	80012b6 <Modbus_Protocal_Worker+0x1f6>
		break;
 80012b0:	bf00      	nop
 80012b2:	e000      	b.n	80012b6 <Modbus_Protocal_Worker+0x1f6>
		break;
 80012b4:	bf00      	nop
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000750 	.word	0x20000750

080012c4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <modbusWrite1Register+0x7c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	7e5b      	ldrb	r3, [r3, #25]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001340 <modbusWrite1Register+0x7c>)
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	7e92      	ldrb	r2, [r2, #26]
 80012da:	4413      	add	r3, r2
 80012dc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80012de:	88fa      	ldrh	r2, [r7, #6]
 80012e0:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <modbusWrite1Register+0x7c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d903      	bls.n	80012f2 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80012ea:	2002      	movs	r0, #2
 80012ec:	f000 f8a0 	bl	8001430 <ModbusErrorReply>
			 return;
 80012f0:	e023      	b.n	800133a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <modbusWrite1Register+0x7c>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <modbusWrite1Register+0x7c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6859      	ldr	r1, [r3, #4]
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	440b      	add	r3, r1
 8001302:	7ed2      	ldrb	r2, [r2, #27]
 8001304:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <modbusWrite1Register+0x7c>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <modbusWrite1Register+0x7c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	440b      	add	r3, r1
 8001316:	7f12      	ldrb	r2, [r2, #28]
 8001318:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <modbusWrite1Register+0x7c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <modbusWrite1Register+0x7c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001328:	2208      	movs	r2, #8
 800132a:	4619      	mov	r1, r3
 800132c:	f00a fab6 	bl	800b89c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <modbusWrite1Register+0x7c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2205      	movs	r2, #5
 8001336:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000750 	.word	0x20000750

08001344 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800134a:	4b38      	ldr	r3, [pc, #224]	@ (800142c <modbusRead1Register+0xe8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	7edb      	ldrb	r3, [r3, #27]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b29b      	uxth	r3, r3
 8001354:	4a35      	ldr	r2, [pc, #212]	@ (800142c <modbusRead1Register+0xe8>)
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	7f12      	ldrb	r2, [r2, #28]
 800135a:	4413      	add	r3, r2
 800135c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800135e:	4b33      	ldr	r3, [pc, #204]	@ (800142c <modbusRead1Register+0xe8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	7e5b      	ldrb	r3, [r3, #25]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b29b      	uxth	r3, r3
 8001368:	4a30      	ldr	r2, [pc, #192]	@ (800142c <modbusRead1Register+0xe8>)
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	7e92      	ldrb	r2, [r2, #26]
 800136e:	4413      	add	r3, r2
 8001370:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <modbusRead1Register+0x3a>
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	2b7d      	cmp	r3, #125	@ 0x7d
 800137c:	d903      	bls.n	8001386 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800137e:	2003      	movs	r0, #3
 8001380:	f000 f856 	bl	8001430 <ModbusErrorReply>
		 return;
 8001384:	e04e      	b.n	8001424 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001386:	88ba      	ldrh	r2, [r7, #4]
 8001388:	4b28      	ldr	r3, [pc, #160]	@ (800142c <modbusRead1Register+0xe8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	429a      	cmp	r2, r3
 8001390:	d808      	bhi.n	80013a4 <modbusRead1Register+0x60>
 8001392:	88ba      	ldrh	r2, [r7, #4]
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	4413      	add	r3, r2
 8001398:	461a      	mov	r2, r3
 800139a:	4b24      	ldr	r3, [pc, #144]	@ (800142c <modbusRead1Register+0xe8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d903      	bls.n	80013ac <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013a4:	2002      	movs	r0, #2
 80013a6:	f000 f843 	bl	8001430 <ModbusErrorReply>
		 return;
 80013aa:	e03b      	b.n	8001424 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	@ (800142c <modbusRead1Register+0xe8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2203      	movs	r2, #3
 80013b2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <modbusRead1Register+0xe8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	0052      	lsls	r2, r2, #1
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80013c6:	2400      	movs	r4, #0
 80013c8:	e020      	b.n	800140c <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80013ca:	4b18      	ldr	r3, [pc, #96]	@ (800142c <modbusRead1Register+0xe8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	88bb      	ldrh	r3, [r7, #4]
 80013d2:	4423      	add	r3, r4
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	18d1      	adds	r1, r2, r3
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <modbusRead1Register+0xe8>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	1c63      	adds	r3, r4, #1
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	7849      	ldrb	r1, [r1, #1]
 80013e2:	4413      	add	r3, r2
 80013e4:	460a      	mov	r2, r1
 80013e6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <modbusRead1Register+0xe8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	88bb      	ldrh	r3, [r7, #4]
 80013f2:	4423      	add	r3, r4
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	18d1      	adds	r1, r2, r3
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <modbusRead1Register+0xe8>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	0063      	lsls	r3, r4, #1
 80013fe:	3303      	adds	r3, #3
 8001400:	7809      	ldrb	r1, [r1, #0]
 8001402:	4413      	add	r3, r2
 8001404:	460a      	mov	r2, r1
 8001406:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 800140a:	3401      	adds	r4, #1
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	429c      	cmp	r4, r3
 8001410:	dbdb      	blt.n	80013ca <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	3301      	adds	r3, #1
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b04      	ldr	r3, [pc, #16]	@ (800142c <modbusRead1Register+0xe8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0052      	lsls	r2, r2, #1
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bd90      	pop	{r4, r7, pc}
 800142a:	bf00      	nop
 800142c:	20000750 	.word	0x20000750

08001430 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800143a:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <ModbusErrorReply+0x40>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	7e1a      	ldrb	r2, [r3, #24]
 8001440:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <ModbusErrorReply+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800144e:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <ModbusErrorReply+0x40>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	79fa      	ldrb	r2, [r7, #7]
 8001454:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001458:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <ModbusErrorReply+0x40>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2202      	movs	r2, #2
 800145e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000750 	.word	0x20000750

08001474 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001478:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <Modbus_frame_response+0x2c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	7e1b      	ldrb	r3, [r3, #24]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d004      	beq.n	800148c <Modbus_frame_response+0x18>
 8001482:	2b06      	cmp	r3, #6
 8001484:	d105      	bne.n	8001492 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001486:	f7ff ff1d 	bl	80012c4 <modbusWrite1Register>
		break;
 800148a:	e006      	b.n	800149a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800148c:	f7ff ff5a 	bl	8001344 <modbusRead1Register>
		break;
 8001490:	e003      	b.n	800149a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff ffcc 	bl	8001430 <ModbusErrorReply>
		break;
 8001498:	bf00      	nop

	}
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000750 	.word	0x20000750

080014a4 <Modbus_Emission>:

void Modbus_Emission()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014aa:	4b38      	ldr	r3, [pc, #224]	@ (800158c <Modbus_Emission+0xe8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b4:	2b20      	cmp	r3, #32
 80014b6:	d15d      	bne.n	8001574 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80014b8:	4b34      	ldr	r3, [pc, #208]	@ (800158c <Modbus_Emission+0xe8>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b33      	ldr	r3, [pc, #204]	@ (800158c <Modbus_Emission+0xe8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80014c6:	4b31      	ldr	r3, [pc, #196]	@ (800158c <Modbus_Emission+0xe8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80014ce:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80014d0:	4b2e      	ldr	r3, [pc, #184]	@ (800158c <Modbus_Emission+0xe8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80014d8:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <Modbus_Emission+0xe8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80014e0:	461a      	mov	r2, r3
 80014e2:	f00a f9db 	bl	800b89c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014e6:	4b29      	ldr	r3, [pc, #164]	@ (800158c <Modbus_Emission+0xe8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b26      	ldr	r3, [pc, #152]	@ (800158c <Modbus_Emission+0xe8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3203      	adds	r2, #3
 80014f6:	b292      	uxth	r2, r2
 80014f8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014fc:	4b23      	ldr	r3, [pc, #140]	@ (800158c <Modbus_Emission+0xe8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001504:	4b21      	ldr	r3, [pc, #132]	@ (800158c <Modbus_Emission+0xe8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800150c:	3b02      	subs	r3, #2
 800150e:	4619      	mov	r1, r3
 8001510:	4610      	mov	r0, r2
 8001512:	f7ff fd9f 	bl	8001054 <CRC16>
 8001516:	4603      	mov	r3, r0
 8001518:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800151a:	4b1c      	ldr	r3, [pc, #112]	@ (800158c <Modbus_Emission+0xe8>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <Modbus_Emission+0xe8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001526:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001528:	7939      	ldrb	r1, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	460a      	mov	r2, r1
 800152e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001532:	4b16      	ldr	r3, [pc, #88]	@ (800158c <Modbus_Emission+0xe8>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <Modbus_Emission+0xe8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800153e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001540:	7979      	ldrb	r1, [r7, #5]
 8001542:	4413      	add	r3, r2
 8001544:	460a      	mov	r2, r1
 8001546:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <Modbus_Emission+0xe8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001554:	2b20      	cmp	r3, #32
 8001556:	d10d      	bne.n	8001574 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <Modbus_Emission+0xe8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <Modbus_Emission+0xe8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <Modbus_Emission+0xe8>)
 8001568:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800156a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800156e:	461a      	mov	r2, r3
 8001570:	f008 fb76 	bl	8009c60 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <Modbus_Emission+0xe8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2200      	movs	r2, #0
 800157a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 800157c:	4b03      	ldr	r3, [pc, #12]	@ (800158c <Modbus_Emission+0xe8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2200      	movs	r2, #0
 8001582:	755a      	strb	r2, [r3, #21]

}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000750 	.word	0x20000750

08001590 <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2232      	movs	r2, #50	@ 0x32
 800159e:	4619      	mov	r1, r3
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f003 f849 	bl	8004638 <HAL_ADC_Start_DMA>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <Update_eff>:
}

void Update_eff(EFF* eff, GPIO_TypeDef* GPIO_Pull, uint16_t GPIO_Pin_Pull,
		GPIO_TypeDef* GPIO_Push, uint16_t GPIO_Pin_Push, GPIO_TypeDef* GPIO_Vacuum,
		uint16_t GPIO_Pin_Vacuum)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	4613      	mov	r3, r2
 80015bc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_Vacuum, GPIO_Pin_Vacuum, eff -> solenoid_command[0]);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	789a      	ldrb	r2, [r3, #2]
 80015c2:	8c3b      	ldrh	r3, [r7, #32]
 80015c4:	4619      	mov	r1, r3
 80015c6:	69f8      	ldr	r0, [r7, #28]
 80015c8:	f005 f838 	bl	800663c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Pull, GPIO_Pin_Pull, eff -> solenoid_command[1]);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	78da      	ldrb	r2, [r3, #3]
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	4619      	mov	r1, r3
 80015d4:	68b8      	ldr	r0, [r7, #8]
 80015d6:	f005 f831 	bl	800663c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Push, GPIO_Pin_Push, eff -> solenoid_command[2]);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	791a      	ldrb	r2, [r3, #4]
 80015de:	8b3b      	ldrh	r3, [r7, #24]
 80015e0:	4619      	mov	r1, r3
 80015e2:	6838      	ldr	r0, [r7, #0]
 80015e4:	f005 f82a 	bl	800663c <HAL_GPIO_WritePin>
}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter){
 80015f0:	b5b0      	push	{r4, r5, r7, lr}
 80015f2:	b0b4      	sub	sp, #208	@ 0xd0
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	filter->Q = 0.1f;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a42      	ldr	r2, [pc, #264]	@ (8001704 <Kalman_Start+0x114>)
 80015fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 1.0f;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001606:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float a[16] = {1.0f, 0.000999981278535715f, -0.000114956304180341f, 7.18067814869762e-06f,
 800160a:	4b3f      	ldr	r3, [pc, #252]	@ (8001708 <Kalman_Start+0x118>)
 800160c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8001610:	461d      	mov	r5, r3
 8001612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001622:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                   0.0f, 0.999950617296464f,   -0.229910715302858f, 0.0143220709019020f,
	                   0.0f, 0.0f   ,   1.0f  , 0.0f,
	                   0.0f,-0.00496113160650046f, 0.000571883719539551f, 0.983689934032327f};

	float b[4] = {	1.90888950589463e-07f,
 8001626:	4b39      	ldr	r3, [pc, #228]	@ (800170c <Kalman_Start+0x11c>)
 8001628:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800162c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800162e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						0.000571883719539551f,
						0.0f,
						0.0789912369575374f};

	float c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001638:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800163c:	673b      	str	r3, [r7, #112]	@ 0x70
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	677b      	str	r3, [r7, #116]	@ 0x74
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	67bb      	str	r3, [r7, #120]	@ 0x78

	float g[4] = {0.0f,
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001650:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001654:	663b      	str	r3, [r7, #96]	@ 0x60
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	667b      	str	r3, [r7, #100]	@ 0x64
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	66bb      	str	r3, [r7, #104]	@ 0x68
					  1.0f,
					  0.0f,
					  0.0f};

	float iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8001662:	4b2b      	ldr	r3, [pc, #172]	@ (8001710 <Kalman_Start+0x120>)
 8001664:	f107 041c 	add.w	r4, r7, #28
 8001668:	461d      	mov	r5, r3
 800166a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800166c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001676:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800167a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800169c:	e029      	b.n	80016f2 <Kalman_Start+0x102>
	{
		filter->A[i] = a[i];
 800169e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	33d0      	adds	r3, #208	@ 0xd0
 80016a6:	443b      	add	r3, r7
 80016a8:	3b44      	subs	r3, #68	@ 0x44
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80016b2:	3314      	adds	r3, #20
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 80016ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	33d0      	adds	r3, #208	@ 0xd0
 80016c2:	443b      	add	r3, r7
 80016c4:	3bb4      	subs	r3, #180	@ 0xb4
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80016ce:	3398      	adds	r3, #152	@ 0x98
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80016dc:	3304      	adds	r3, #4
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 80016e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80016ec:	3301      	adds	r3, #1
 80016ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80016f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	ddd1      	ble.n	800169e <Kalman_Start+0xae>
	}

	for(i=0;i<4;i++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001700:	e044      	b.n	800178c <Kalman_Start+0x19c>
 8001702:	bf00      	nop
 8001704:	3dcccccd 	.word	0x3dcccccd
 8001708:	0800b914 	.word	0x0800b914
 800170c:	0800b954 	.word	0x0800b954
 8001710:	0800b964 	.word	0x0800b964
	{
		filter->X_k[i] = x_k[i];
 8001714:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	33d0      	adds	r3, #208	@ 0xd0
 800171c:	443b      	add	r3, r7
 800171e:	3bc4      	subs	r3, #196	@ 0xc4
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	601a      	str	r2, [r3, #0]
		filter->B[i] = b[i];
 800172e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	33d0      	adds	r3, #208	@ 0xd0
 8001736:	443b      	add	r3, r7
 8001738:	3b54      	subs	r3, #84	@ 0x54
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001742:	3324      	adds	r3, #36	@ 0x24
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 800174a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	33d0      	adds	r3, #208	@ 0xd0
 8001752:	443b      	add	r3, r7
 8001754:	3b64      	subs	r3, #100	@ 0x64
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800175e:	3328      	adds	r3, #40	@ 0x28
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8001766:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	33d0      	adds	r3, #208	@ 0xd0
 800176e:	443b      	add	r3, r7
 8001770:	3b74      	subs	r3, #116	@ 0x74
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800177a:	332c      	adds	r3, #44	@ 0x2c
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8001782:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001786:	3301      	adds	r3, #1
 8001788:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800178c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001790:	2b03      	cmp	r3, #3
 8001792:	ddbf      	ble.n	8001714 <Kalman_Start+0x124>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	2104      	movs	r1, #4
 80017a0:	f00a f838 	bl	800b814 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3310      	adds	r3, #16
 80017ae:	2204      	movs	r2, #4
 80017b0:	2104      	movs	r1, #4
 80017b2:	f00a f82f 	bl	800b814 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3350      	adds	r3, #80	@ 0x50
 80017c0:	2204      	movs	r2, #4
 80017c2:	2104      	movs	r1, #4
 80017c4:	f00a f826 	bl	800b814 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3390      	adds	r3, #144	@ 0x90
 80017d2:	2201      	movs	r2, #1
 80017d4:	2104      	movs	r1, #4
 80017d6:	f00a f81d 	bl	800b814 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	33a0      	adds	r3, #160	@ 0xa0
 80017e4:	2204      	movs	r2, #4
 80017e6:	2101      	movs	r1, #1
 80017e8:	f00a f814 	bl	800b814 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	33b0      	adds	r3, #176	@ 0xb0
 80017f6:	2201      	movs	r2, #1
 80017f8:	2104      	movs	r1, #4
 80017fa:	f00a f80b 	bl	800b814 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	33c8      	adds	r3, #200	@ 0xc8
 8001808:	2204      	movs	r2, #4
 800180a:	2104      	movs	r1, #4
 800180c:	f00a f802 	bl	800b814 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800181c:	2201      	movs	r2, #1
 800181e:	2104      	movs	r1, #4
 8001820:	f009 fff8 	bl	800b814 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8001830:	2204      	movs	r2, #4
 8001832:	2101      	movs	r1, #1
 8001834:	f009 ffee 	bl	800b814 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001844:	2204      	movs	r2, #4
 8001846:	2104      	movs	r1, #4
 8001848:	f009 ffe4 	bl	800b814 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001858:	2204      	movs	r2, #4
 800185a:	2104      	movs	r1, #4
 800185c:	f009 ffda 	bl	800b814 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800186c:	2201      	movs	r2, #1
 800186e:	2104      	movs	r1, #4
 8001870:	f009 ffd0 	bl	800b814 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001880:	2201      	movs	r2, #1
 8001882:	2104      	movs	r1, #4
 8001884:	f009 ffc6 	bl	800b814 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001894:	2204      	movs	r2, #4
 8001896:	2101      	movs	r1, #1
 8001898:	f009 ffbc 	bl	800b814 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80018a8:	2201      	movs	r2, #1
 80018aa:	2101      	movs	r1, #1
 80018ac:	f009 ffb2 	bl	800b814 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80018bc:	2201      	movs	r2, #1
 80018be:	2101      	movs	r1, #1
 80018c0:	f009 ffa8 	bl	800b814 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80018d0:	2201      	movs	r2, #1
 80018d2:	2104      	movs	r1, #4
 80018d4:	f009 ff9e 	bl	800b814 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80018e4:	2201      	movs	r2, #1
 80018e6:	2104      	movs	r1, #4
 80018e8:	f009 ff94 	bl	800b814 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80018f8:	2201      	movs	r2, #1
 80018fa:	2101      	movs	r1, #1
 80018fc:	f009 ff8a 	bl	800b814 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800190c:	2201      	movs	r2, #1
 800190e:	2101      	movs	r1, #1
 8001910:	f009 ff80 	bl	800b814 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8001920:	2201      	movs	r2, #1
 8001922:	2101      	movs	r1, #1
 8001924:	f009 ff76 	bl	800b814 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8001934:	2201      	movs	r2, #1
 8001936:	2104      	movs	r1, #4
 8001938:	f009 ff6c 	bl	800b814 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001948:	2201      	movs	r2, #1
 800194a:	2101      	movs	r1, #1
 800194c:	f009 ff62 	bl	800b814 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800195c:	2204      	movs	r2, #4
 800195e:	2104      	movs	r1, #4
 8001960:	f009 ff58 	bl	800b814 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	33c4      	adds	r3, #196	@ 0xc4
 800196e:	2201      	movs	r2, #1
 8001970:	2101      	movs	r1, #1
 8001972:	f009 ff4f 	bl	800b814 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8001982:	2201      	movs	r2, #1
 8001984:	2101      	movs	r1, #1
 8001986:	f009 ff45 	bl	800b814 <arm_mat_init_f32>
}
 800198a:	bf00      	nop
 800198c:	37d0      	adds	r7, #208	@ 0xd0
 800198e:	46bd      	mov	sp, r7
 8001990:	bdb0      	pop	{r4, r5, r7, pc}
 8001992:	bf00      	nop
 8001994:	0000      	movs	r0, r0
	...

08001998 <Update_lowpass>:
 *
 *  Created on: May 7, 2024
 *      Author: naker
 */
#include "lowpass.h"
void Update_lowpass(LOWPASS* lowpass, float input){
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	ed87 0a00 	vstr	s0, [r7]
	float x_n = input;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	60fb      	str	r3, [r7, #12]
	static float x_n_1 = 0.0;
	static float y_n_1 = 0.0;

	if(input == 0.0){
 80019a8:	edd7 7a00 	vldr	s15, [r7]
 80019ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b4:	d104      	bne.n	80019c0 <Update_lowpass+0x28>
		lowpass -> filtered_data = 0.0;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	e038      	b.n	8001a32 <Update_lowpass+0x9a>
	}
	else{
		lowpass -> filtered_data = 0.969 * y_n_1 + 0.0155 * x_n + 0.0155 * x_n_1;
 80019c0:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <Update_lowpass+0xc0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fd8b 	bl	80004e0 <__aeabi_f2d>
 80019ca:	a31f      	add	r3, pc, #124	@ (adr r3, 8001a48 <Update_lowpass+0xb0>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe fdde 	bl	8000590 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4614      	mov	r4, r2
 80019da:	461d      	mov	r5, r3
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f7fe fd7f 	bl	80004e0 <__aeabi_f2d>
 80019e2:	a31b      	add	r3, pc, #108	@ (adr r3, 8001a50 <Update_lowpass+0xb8>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fdd2 	bl	8000590 <__aeabi_dmul>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4620      	mov	r0, r4
 80019f2:	4629      	mov	r1, r5
 80019f4:	f7fe fc16 	bl	8000224 <__adddf3>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4614      	mov	r4, r2
 80019fe:	461d      	mov	r5, r3
 8001a00:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <Update_lowpass+0xc4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fd6b 	bl	80004e0 <__aeabi_f2d>
 8001a0a:	a311      	add	r3, pc, #68	@ (adr r3, 8001a50 <Update_lowpass+0xb8>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe fdbe 	bl	8000590 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f7fe fc02 	bl	8000224 <__adddf3>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7ff f80c 	bl	8000a44 <__aeabi_d2f>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	601a      	str	r2, [r3, #0]
	}
	x_n_1 = x_n;
 8001a32:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <Update_lowpass+0xc4>)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6013      	str	r3, [r2, #0]
	y_n_1 = lowpass -> filtered_data;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a06      	ldr	r2, [pc, #24]	@ (8001a58 <Update_lowpass+0xc0>)
 8001a3e:	6013      	str	r3, [r2, #0]

}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bdb0      	pop	{r4, r5, r7, pc}
 8001a48:	49ba5e35 	.word	0x49ba5e35
 8001a4c:	3fef020c 	.word	0x3fef020c
 8001a50:	c8b43958 	.word	0xc8b43958
 8001a54:	3f8fbe76 	.word	0x3f8fbe76
 8001a58:	20000754 	.word	0x20000754
 8001a5c:	20000758 	.word	0x20000758

08001a60 <Reset_lowpass>:
void Reset_lowpass(LOWPASS* lowpass){
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	lowpass -> filtered_data = 0.0;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a80:	b08a      	sub	sp, #40	@ 0x28
 8001a82:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a84:	f002 f96b 	bl	8003d5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a88:	f000 fac8 	bl	800201c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a8c:	f000 fd9c 	bl	80025c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a90:	f000 fd58 	bl	8002544 <MX_DMA_Init>
  MX_TIM1_Init();
 8001a94:	f000 fb84 	bl	80021a0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001a98:	f000 fc32 	bl	8002300 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a9c:	f000 fc7e 	bl	800239c <MX_TIM4_Init>
  MX_ADC1_Init();
 8001aa0:	f000 fb06 	bl	80020b0 <MX_ADC1_Init>
  MX_TIM16_Init();
 8001aa4:	f000 fcd0 	bl	8002448 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001aa8:	f000 fcfe 	bl	80024a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Modbus setting
  hmodbus.huart = &huart2;
 8001aac:	4ba5      	ldr	r3, [pc, #660]	@ (8001d44 <main+0x2c8>)
 8001aae:	4aa6      	ldr	r2, [pc, #664]	@ (8001d48 <main+0x2cc>)
 8001ab0:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8001ab2:	4ba4      	ldr	r3, [pc, #656]	@ (8001d44 <main+0x2c8>)
 8001ab4:	4aa5      	ldr	r2, [pc, #660]	@ (8001d4c <main+0x2d0>)
 8001ab6:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8001ab8:	4aa2      	ldr	r2, [pc, #648]	@ (8001d44 <main+0x2c8>)
 8001aba:	2315      	movs	r3, #21
 8001abc:	7013      	strb	r3, [r2, #0]
  hmodbus.RegisterSize =200;
 8001abe:	4ba1      	ldr	r3, [pc, #644]	@ (8001d44 <main+0x2c8>)
 8001ac0:	22c8      	movs	r2, #200	@ 0xc8
 8001ac2:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001ac4:	49a2      	ldr	r1, [pc, #648]	@ (8001d50 <main+0x2d4>)
 8001ac6:	489f      	ldr	r0, [pc, #636]	@ (8001d44 <main+0x2c8>)
 8001ac8:	f7ff fa6e 	bl	8000fa8 <Modbus_init>
  registerFrame[0x00].U16 = 22881; // Set default heart beat to "Ya"
 8001acc:	4aa0      	ldr	r2, [pc, #640]	@ (8001d50 <main+0x2d4>)
 8001ace:	f645 1361 	movw	r3, #22881	@ 0x5961
 8001ad2:	8013      	strh	r3, [r2, #0]

  // Update command timer
  HAL_TIM_Base_Start_IT(&main_loop_tim);
 8001ad4:	489f      	ldr	r0, [pc, #636]	@ (8001d54 <main+0x2d8>)
 8001ad6:	f005 fee5 	bl	80078a4 <HAL_TIM_Base_Start_IT>

  // PWM generator
  HAL_TIM_Base_Start(&pwm_tim);
 8001ada:	489f      	ldr	r0, [pc, #636]	@ (8001d58 <main+0x2dc>)
 8001adc:	f005 fe72 	bl	80077c4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&pwm_tim, pwm_channel);
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	489d      	ldr	r0, [pc, #628]	@ (8001d58 <main+0x2dc>)
 8001ae4:	f005 ffc4 	bl	8007a70 <HAL_TIM_PWM_Start>

  // Encoder reader
  HAL_TIM_Encoder_Start(&encoder_tim, encoder_channel);
 8001ae8:	213c      	movs	r1, #60	@ 0x3c
 8001aea:	489c      	ldr	r0, [pc, #624]	@ (8001d5c <main+0x2e0>)
 8001aec:	f006 fa7c 	bl	8007fe8 <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, encoder_ppr, encoder_frequency, encoder_cnt_period);
 8001af0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001af4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001af8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001afc:	4898      	ldr	r0, [pc, #608]	@ (8001d60 <main+0x2e4>)
 8001afe:	f001 f94e 	bl	8002d9e <QEI_init>

  // Current reader
  ADC_init(&current_adc, &current_sensor);
 8001b02:	4998      	ldr	r1, [pc, #608]	@ (8001d64 <main+0x2e8>)
 8001b04:	4898      	ldr	r0, [pc, #608]	@ (8001d68 <main+0x2ec>)
 8001b06:	f7ff fd43 	bl	8001590 <ADC_init>

  // Kalman filter
  Kalman_Start(&kalman);
 8001b0a:	4898      	ldr	r0, [pc, #608]	@ (8001d6c <main+0x2f0>)
 8001b0c:	f7ff fd70 	bl	80015f0 <Kalman_Start>

  // State initialize
  homing_init(&home);
 8001b10:	4897      	ldr	r0, [pc, #604]	@ (8001d70 <main+0x2f4>)
 8001b12:	f001 fb77 	bl	8003204 <homing_init>
  point_init(&point);
 8001b16:	4897      	ldr	r0, [pc, #604]	@ (8001d74 <main+0x2f8>)
 8001b18:	f001 fb63 	bl	80031e2 <point_init>
  emer_init(&emer);
 8001b1c:	4896      	ldr	r0, [pc, #600]	@ (8001d78 <main+0x2fc>)
 8001b1e:	f001 fdc2 	bl	80036a6 <emer_init>


  // PID initialize
  PID_init(&p_pid, p_kp_u, p_ki_u, p_kd_u, p_kp_d, p_ki_d, p_kd_d);
 8001b22:	4b96      	ldr	r3, [pc, #600]	@ (8001d7c <main+0x300>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	4b95      	ldr	r3, [pc, #596]	@ (8001d80 <main+0x304>)
 8001b2a:	ed93 7a00 	vldr	s14, [r3]
 8001b2e:	4b95      	ldr	r3, [pc, #596]	@ (8001d84 <main+0x308>)
 8001b30:	edd3 6a00 	vldr	s13, [r3]
 8001b34:	4b94      	ldr	r3, [pc, #592]	@ (8001d88 <main+0x30c>)
 8001b36:	ed93 6a00 	vldr	s12, [r3]
 8001b3a:	4b94      	ldr	r3, [pc, #592]	@ (8001d8c <main+0x310>)
 8001b3c:	edd3 5a00 	vldr	s11, [r3]
 8001b40:	4b93      	ldr	r3, [pc, #588]	@ (8001d90 <main+0x314>)
 8001b42:	ed93 5a00 	vldr	s10, [r3]
 8001b46:	eef0 2a45 	vmov.f32	s5, s10
 8001b4a:	eeb0 2a65 	vmov.f32	s4, s11
 8001b4e:	eef0 1a46 	vmov.f32	s3, s12
 8001b52:	eeb0 1a66 	vmov.f32	s2, s13
 8001b56:	eef0 0a47 	vmov.f32	s1, s14
 8001b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5e:	488d      	ldr	r0, [pc, #564]	@ (8001d94 <main+0x318>)
 8001b60:	f001 f80e 	bl	8002b80 <PID_init>
  PID_init(&v_pid, v_kp_u, v_ki_u, v_kd_u, v_kp_d, v_ki_d, v_kd_d);
 8001b64:	4b8c      	ldr	r3, [pc, #560]	@ (8001d98 <main+0x31c>)
 8001b66:	edd3 7a00 	vldr	s15, [r3]
 8001b6a:	4b8c      	ldr	r3, [pc, #560]	@ (8001d9c <main+0x320>)
 8001b6c:	ed93 7a00 	vldr	s14, [r3]
 8001b70:	4b8b      	ldr	r3, [pc, #556]	@ (8001da0 <main+0x324>)
 8001b72:	edd3 6a00 	vldr	s13, [r3]
 8001b76:	4b8b      	ldr	r3, [pc, #556]	@ (8001da4 <main+0x328>)
 8001b78:	ed93 6a00 	vldr	s12, [r3]
 8001b7c:	4b8a      	ldr	r3, [pc, #552]	@ (8001da8 <main+0x32c>)
 8001b7e:	edd3 5a00 	vldr	s11, [r3]
 8001b82:	4b8a      	ldr	r3, [pc, #552]	@ (8001dac <main+0x330>)
 8001b84:	ed93 5a00 	vldr	s10, [r3]
 8001b88:	eef0 2a45 	vmov.f32	s5, s10
 8001b8c:	eeb0 2a65 	vmov.f32	s4, s11
 8001b90:	eef0 1a46 	vmov.f32	s3, s12
 8001b94:	eeb0 1a66 	vmov.f32	s2, s13
 8001b98:	eef0 0a47 	vmov.f32	s1, s14
 8001b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba0:	4883      	ldr	r0, [pc, #524]	@ (8001db0 <main+0x334>)
 8001ba2:	f000 ffed 	bl	8002b80 <PID_init>

  //Set point
  setpoint = 0.0;
 8001ba6:	4983      	ldr	r1, [pc, #524]	@ (8001db4 <main+0x338>)
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	e9c1 2300 	strd	r2, r3, [r1]

  HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bba:	487f      	ldr	r0, [pc, #508]	@ (8001db8 <main+0x33c>)
 8001bbc:	f004 fd3e 	bl	800663c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(vacuum_gpio, vacuum_pin, RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2110      	movs	r1, #16
 8001bc4:	487d      	ldr	r0, [pc, #500]	@ (8001dbc <main+0x340>)
 8001bc6:	f004 fd39 	bl	800663c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(solenoid_pull_gpio, solenoid_pull_pin, RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bd0:	487a      	ldr	r0, [pc, #488]	@ (8001dbc <main+0x340>)
 8001bd2:	f004 fd33 	bl	800663c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(solenoid_push_gpio, solenoid_push_pin, RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be0:	f004 fd2c 	bl	800663c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(controller_error_gpio, controller_error_pin, RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2102      	movs	r1, #2
 8001be8:	4874      	ldr	r0, [pc, #464]	@ (8001dbc <main+0x340>)
 8001bea:	f004 fd27 	bl	800663c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motor_error_gpio, motor_error_pin, RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	4872      	ldr	r0, [pc, #456]	@ (8001dbc <main+0x340>)
 8001bf4:	f004 fd22 	bl	800663c <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Update modbus
		Modbus_Protocal_Worker();
 8001bf8:	f7ff fa62 	bl	80010c0 <Modbus_Protocal_Worker>
		// Routine
		registerFrame[0x04].U16 = eff.update_actual_status[0x04].U16;	// Gripper Movement Actual Status(0x10)
 8001bfc:	4b70      	ldr	r3, [pc, #448]	@ (8001dc0 <main+0x344>)
 8001bfe:	89db      	ldrh	r3, [r3, #14]
 8001c00:	4a53      	ldr	r2, [pc, #332]	@ (8001d50 <main+0x2d4>)
 8001c02:	8113      	strh	r3, [r2, #8]
		registerFrame[0x10].U16 = state;							// Z-axis Moving Status(0x10)
 8001c04:	4b6f      	ldr	r3, [pc, #444]	@ (8001dc4 <main+0x348>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	4a51      	ldr	r2, [pc, #324]	@ (8001d50 <main+0x2d4>)
 8001c0a:	8413      	strh	r3, [r2, #32]
		registerFrame[0x11].U16 = (uint16_t)(encoder.mm * 10);		// Z-axis Actual Position(0x11)
 8001c0c:	4b54      	ldr	r3, [pc, #336]	@ (8001d60 <main+0x2e4>)
 8001c0e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	4b6c      	ldr	r3, [pc, #432]	@ (8001dc8 <main+0x34c>)
 8001c18:	f7fe fcba 	bl	8000590 <__aeabi_dmul>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f7fe feee 	bl	8000a04 <__aeabi_d2uiz>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4a48      	ldr	r2, [pc, #288]	@ (8001d50 <main+0x2d4>)
 8001c2e:	8453      	strh	r3, [r2, #34]	@ 0x22
		registerFrame[0x12].U16 = (int16_t)(encoder.mmps * 10);		// Z-axis Actual Speed (0x12)
 8001c30:	4b4b      	ldr	r3, [pc, #300]	@ (8001d60 <main+0x2e4>)
 8001c32:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b63      	ldr	r3, [pc, #396]	@ (8001dc8 <main+0x34c>)
 8001c3c:	f7fe fca8 	bl	8000590 <__aeabi_dmul>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7fe feb4 	bl	80009b4 <__aeabi_d2iz>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4a3f      	ldr	r2, [pc, #252]	@ (8001d50 <main+0x2d4>)
 8001c54:	8493      	strh	r3, [r2, #36]	@ 0x24
		registerFrame[0x13].U16 = (int16_t)(encoder.mmpss * 10);	// Z-axis Acceleration(0x13)
 8001c56:	4b42      	ldr	r3, [pc, #264]	@ (8001d60 <main+0x2e4>)
 8001c58:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	4b59      	ldr	r3, [pc, #356]	@ (8001dc8 <main+0x34c>)
 8001c62:	f7fe fc95 	bl	8000590 <__aeabi_dmul>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7fe fea1 	bl	80009b4 <__aeabi_d2iz>
 8001c72:	4603      	mov	r3, r0
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4a35      	ldr	r2, [pc, #212]	@ (8001d50 <main+0x2d4>)
 8001c7a:	84d3      	strh	r3, [r2, #38]	@ 0x26
		registerFrame[0x40].U16 = (int16_t)(x_axis_position * 10);	// X-axis Actual Position(0x40)
 8001c7c:	4b53      	ldr	r3, [pc, #332]	@ (8001dcc <main+0x350>)
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c8e:	ee17 3a90 	vmov	r3, s15
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	4a2e      	ldr	r2, [pc, #184]	@ (8001d50 <main+0x2d4>)
 8001c98:	f8a2 3080 	strh.w	r3, [r2, #128]	@ 0x80
		if(registerFrame[0x00].U16 == 18537){
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d50 <main+0x2d4>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	f644 0269 	movw	r2, #18537	@ 0x4869
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d103      	bne.n	8001cb0 <main+0x234>
			registerFrame[0x00].U16 = 22881;
 8001ca8:	4a29      	ldr	r2, [pc, #164]	@ (8001d50 <main+0x2d4>)
 8001caa:	f645 1361 	movw	r3, #22881	@ 0x5961
 8001cae:	8013      	strh	r3, [r2, #0]
		}

		if(mode == WAIT){
 8001cb0:	4b47      	ldr	r3, [pc, #284]	@ (8001dd0 <main+0x354>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f040 8099 	bne.w	8001dec <main+0x370>

			// Update peripheral
			Vacuum_Status(&eff); // Vacuum
 8001cba:	4841      	ldr	r0, [pc, #260]	@ (8001dc0 <main+0x344>)
 8001cbc:	f7ff f88a 	bl	8000dd4 <Vacuum_Status>
			Gripper_Movement_Status(&eff); // End effector
 8001cc0:	483f      	ldr	r0, [pc, #252]	@ (8001dc0 <main+0x344>)
 8001cc2:	f7ff f8b3 	bl	8000e2c <Gripper_Movement_Status>
			// End effector update
			Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 8001cc6:	2310      	movs	r3, #16
 8001cc8:	9302      	str	r3, [sp, #8]
 8001cca:	4b3c      	ldr	r3, [pc, #240]	@ (8001dbc <main+0x340>)
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001cd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cdc:	4937      	ldr	r1, [pc, #220]	@ (8001dbc <main+0x340>)
 8001cde:	4838      	ldr	r0, [pc, #224]	@ (8001dc0 <main+0x344>)
 8001ce0:	f7ff fc65 	bl	80015ae <Update_eff>

			//  homing command from Homing button and Base system Check command
			if(home.homing_command == 0){
 8001ce4:	4b22      	ldr	r3, [pc, #136]	@ (8001d70 <main+0x2f4>)
 8001ce6:	789b      	ldrb	r3, [r3, #2]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d173      	bne.n	8001dd4 <main+0x358>
				Set_Home(); // Refresh homing command from base system
 8001cec:	f7ff f900 	bl	8000ef0 <Set_Home>
				if(state == 0b0010){
 8001cf0:	4b34      	ldr	r3, [pc, #208]	@ (8001dc4 <main+0x348>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d110      	bne.n	8001d1a <main+0x29e>
					// Have command from base system
					home.homing_command = 1;
 8001cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d70 <main+0x2f4>)
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	7093      	strb	r3, [r2, #2]
					registerFrame[0x01].U16 = 0b0000; // Reset data of base system status
 8001cfe:	4a14      	ldr	r2, [pc, #80]	@ (8001d50 <main+0x2d4>)
 8001d00:	2300      	movs	r3, #0
 8001d02:	8053      	strh	r3, [r2, #2]
					registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 8001d04:	4a12      	ldr	r2, [pc, #72]	@ (8001d50 <main+0x2d4>)
 8001d06:	2302      	movs	r3, #2
 8001d08:	8413      	strh	r3, [r2, #32]
					state = registerFrame[0x10].U16;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <main+0x2d4>)
 8001d0c:	8c1b      	ldrh	r3, [r3, #32]
 8001d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8001dc4 <main+0x348>)
 8001d10:	8013      	strh	r3, [r2, #0]
					mode = HOMING;
 8001d12:	4a2f      	ldr	r2, [pc, #188]	@ (8001dd0 <main+0x354>)
 8001d14:	2302      	movs	r3, #2
 8001d16:	8013      	strh	r3, [r2, #0]
 8001d18:	e068      	b.n	8001dec <main+0x370>
				}
				else if(HAL_GPIO_ReadPin(home_gpio, home_pin) == 1){
 8001d1a:	2140      	movs	r1, #64	@ 0x40
 8001d1c:	4826      	ldr	r0, [pc, #152]	@ (8001db8 <main+0x33c>)
 8001d1e:	f004 fc75 	bl	800660c <HAL_GPIO_ReadPin>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d161      	bne.n	8001dec <main+0x370>
					// Have command from home switch
					home.homing_command = 1;
 8001d28:	4a11      	ldr	r2, [pc, #68]	@ (8001d70 <main+0x2f4>)
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	7093      	strb	r3, [r2, #2]
					registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 8001d2e:	4a08      	ldr	r2, [pc, #32]	@ (8001d50 <main+0x2d4>)
 8001d30:	2302      	movs	r3, #2
 8001d32:	8413      	strh	r3, [r2, #32]
					state = registerFrame[0x10].U16;
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <main+0x2d4>)
 8001d36:	8c1b      	ldrh	r3, [r3, #32]
 8001d38:	4a22      	ldr	r2, [pc, #136]	@ (8001dc4 <main+0x348>)
 8001d3a:	8013      	strh	r3, [r2, #0]
					mode = HOMING;
 8001d3c:	4a24      	ldr	r2, [pc, #144]	@ (8001dd0 <main+0x354>)
 8001d3e:	2302      	movs	r3, #2
 8001d40:	8013      	strh	r3, [r2, #0]
 8001d42:	e053      	b.n	8001dec <main+0x370>
 8001d44:	20000278 	.word	0x20000278
 8001d48:	20000bb8 	.word	0x20000bb8
 8001d4c:	20000a8c 	.word	0x20000a8c
 8001d50:	20000db4 	.word	0x20000db4
 8001d54:	200008f4 	.word	0x200008f4
 8001d58:	20000828 	.word	0x20000828
 8001d5c:	200009c0 	.word	0x200009c0
 8001d60:	200011b0 	.word	0x200011b0
 8001d64:	200010dc 	.word	0x200010dc
 8001d68:	2000075c 	.word	0x2000075c
 8001d6c:	2000130c 	.word	0x2000130c
 8001d70:	20000d98 	.word	0x20000d98
 8001d74:	20000d90 	.word	0x20000d90
 8001d78:	20000db0 	.word	0x20000db0
 8001d7c:	200012e0 	.word	0x200012e0
 8001d80:	200012e4 	.word	0x200012e4
 8001d84:	200012e8 	.word	0x200012e8
 8001d88:	200012ec 	.word	0x200012ec
 8001d8c:	200012f0 	.word	0x200012f0
 8001d90:	200012f4 	.word	0x200012f4
 8001d94:	200012a0 	.word	0x200012a0
 8001d98:	20000234 	.word	0x20000234
 8001d9c:	20000238 	.word	0x20000238
 8001da0:	20001288 	.word	0x20001288
 8001da4:	2000023c 	.word	0x2000023c
 8001da8:	20000240 	.word	0x20000240
 8001dac:	2000128c 	.word	0x2000128c
 8001db0:	20001248 	.word	0x20001248
 8001db4:	20000d80 	.word	0x20000d80
 8001db8:	48000800 	.word	0x48000800
 8001dbc:	48000400 	.word	0x48000400
 8001dc0:	20000f44 	.word	0x20000f44
 8001dc4:	20000274 	.word	0x20000274
 8001dc8:	40240000 	.word	0x40240000
 8001dcc:	2000168c 	.word	0x2000168c
 8001dd0:	20000d88 	.word	0x20000d88
				}
			}
			else{
				// Nothing happen
				pwm_signal = 0;
 8001dd4:	4b82      	ldr	r3, [pc, #520]	@ (8001fe0 <main+0x564>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
				Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 8001dda:	4b81      	ldr	r3, [pc, #516]	@ (8001fe0 <main+0x564>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2302      	movs	r3, #2
 8001de2:	4a80      	ldr	r2, [pc, #512]	@ (8001fe4 <main+0x568>)
 8001de4:	2100      	movs	r1, #0
 8001de6:	4880      	ldr	r0, [pc, #512]	@ (8001fe8 <main+0x56c>)
 8001de8:	f000 ff42 	bl	8002c70 <Update_pwm>
			}
		}


		if(mode == RUNNING){
 8001dec:	4b7f      	ldr	r3, [pc, #508]	@ (8001fec <main+0x570>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	f040 80c5 	bne.w	8001f80 <main+0x504>
			if(testing == 1){
 8001df6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ff0 <main+0x574>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d16f      	bne.n	8001ede <main+0x462>
				Update_qei(&encoder, &htim4);
 8001dfe:	497d      	ldr	r1, [pc, #500]	@ (8001ff4 <main+0x578>)
 8001e00:	487d      	ldr	r0, [pc, #500]	@ (8001ff8 <main+0x57c>)
 8001e02:	f001 f849 	bl	8002e98 <Update_qei>
				Update_lowpass(&lowpass, encoder.mmps);
 8001e06:	4b7c      	ldr	r3, [pc, #496]	@ (8001ff8 <main+0x57c>)
 8001e08:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe fe18 	bl	8000a44 <__aeabi_d2f>
 8001e14:	4603      	mov	r3, r0
 8001e16:	ee00 3a10 	vmov	s0, r3
 8001e1a:	4878      	ldr	r0, [pc, #480]	@ (8001ffc <main+0x580>)
 8001e1c:	f7ff fdbc 	bl	8001998 <Update_lowpass>
				sensor[0] = __HAL_TIM_GET_COUNTER(&encoder_tim); // Encoder
 8001e20:	4b74      	ldr	r3, [pc, #464]	@ (8001ff4 <main+0x578>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	2200      	movs	r2, #0
 8001e28:	461c      	mov	r4, r3
 8001e2a:	4615      	mov	r5, r2
 8001e2c:	4b74      	ldr	r3, [pc, #464]	@ (8002000 <main+0x584>)
 8001e2e:	e9c3 4500 	strd	r4, r5, [r3]
				sensor[1] = HAL_GPIO_ReadPin(proximity_gpio, proximity_pin); // Proximity
 8001e32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e36:	4873      	ldr	r0, [pc, #460]	@ (8002004 <main+0x588>)
 8001e38:	f004 fbe8 	bl	800660c <HAL_GPIO_ReadPin>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2200      	movs	r2, #0
 8001e42:	4698      	mov	r8, r3
 8001e44:	4691      	mov	r9, r2
 8001e46:	4b6e      	ldr	r3, [pc, #440]	@ (8002000 <main+0x584>)
 8001e48:	e9c3 8902 	strd	r8, r9, [r3, #8]
				sensor[2] = HAL_GPIO_ReadPin(reed_pull_gpio, reed_pull_pin); // Reed switch pull
 8001e4c:	2180      	movs	r1, #128	@ 0x80
 8001e4e:	4865      	ldr	r0, [pc, #404]	@ (8001fe4 <main+0x568>)
 8001e50:	f004 fbdc 	bl	800660c <HAL_GPIO_ReadPin>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2200      	movs	r2, #0
 8001e5a:	469a      	mov	sl, r3
 8001e5c:	4693      	mov	fp, r2
 8001e5e:	4b68      	ldr	r3, [pc, #416]	@ (8002000 <main+0x584>)
 8001e60:	e9c3 ab04 	strd	sl, fp, [r3, #16]
				sensor[3] = HAL_GPIO_ReadPin(reed_push_gpio, reed_push_pin); // Reed switch push
 8001e64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e6c:	f004 fbce 	bl	800660c <HAL_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2200      	movs	r2, #0
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	617a      	str	r2, [r7, #20]
 8001e7a:	4b61      	ldr	r3, [pc, #388]	@ (8002000 <main+0x584>)
 8001e7c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001e80:	e9c3 1206 	strd	r1, r2, [r3, #24]
				sensor[4] = HAL_GPIO_ReadPin(emer_gpio, emer_pin); // Emergency button
 8001e84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e88:	485e      	ldr	r0, [pc, #376]	@ (8002004 <main+0x588>)
 8001e8a:	f004 fbbf 	bl	800660c <HAL_GPIO_ReadPin>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2200      	movs	r2, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	60fa      	str	r2, [r7, #12]
 8001e98:	4b59      	ldr	r3, [pc, #356]	@ (8002000 <main+0x584>)
 8001e9a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001e9e:	e9c3 1208 	strd	r1, r2, [r3, #32]
				sensor[5] = HAL_GPIO_ReadPin(home_gpio, home_pin); // Home button
 8001ea2:	2140      	movs	r1, #64	@ 0x40
 8001ea4:	484f      	ldr	r0, [pc, #316]	@ (8001fe4 <main+0x568>)
 8001ea6:	f004 fbb1 	bl	800660c <HAL_GPIO_ReadPin>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2200      	movs	r2, #0
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	4b52      	ldr	r3, [pc, #328]	@ (8002000 <main+0x584>)
 8001eb6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001eba:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
				Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 8001ebe:	2310      	movs	r3, #16
 8001ec0:	9302      	str	r3, [sp, #8]
 8001ec2:	4b50      	ldr	r3, [pc, #320]	@ (8002004 <main+0x588>)
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ed0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ed4:	494b      	ldr	r1, [pc, #300]	@ (8002004 <main+0x588>)
 8001ed6:	484c      	ldr	r0, [pc, #304]	@ (8002008 <main+0x58c>)
 8001ed8:	f7ff fb69 	bl	80015ae <Update_eff>
 8001edc:	e050      	b.n	8001f80 <main+0x504>
			}
			else if(testing == 0){
 8001ede:	4b44      	ldr	r3, [pc, #272]	@ (8001ff0 <main+0x574>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d14c      	bne.n	8001f80 <main+0x504>
				// Main controller loop
				if(is_update_encoder == 1 && !(state == 2)){
 8001ee6:	4b49      	ldr	r3, [pc, #292]	@ (800200c <main+0x590>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d117      	bne.n	8001f1e <main+0x4a2>
 8001eee:	4b48      	ldr	r3, [pc, #288]	@ (8002010 <main+0x594>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d013      	beq.n	8001f1e <main+0x4a2>
					Update_qei(&encoder, &htim4); // Update encoder
 8001ef6:	493f      	ldr	r1, [pc, #252]	@ (8001ff4 <main+0x578>)
 8001ef8:	483f      	ldr	r0, [pc, #252]	@ (8001ff8 <main+0x57c>)
 8001efa:	f000 ffcd 	bl	8002e98 <Update_qei>
//					kalman_velocity = SteadyStateKalmanFilter(&kalman, ((float)pwm_signal * 24.0)/65535.0, encoder.radps / 2.0);
//					kalman_velocity_z = kalman_velocity * 2.0 * 16.0 / (2.0 * M_PI);
					Update_lowpass(&lowpass, encoder.mmps);
 8001efe:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff8 <main+0x57c>)
 8001f00:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f7fe fd9c 	bl	8000a44 <__aeabi_d2f>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	ee00 3a10 	vmov	s0, r3
 8001f12:	483a      	ldr	r0, [pc, #232]	@ (8001ffc <main+0x580>)
 8001f14:	f7ff fd40 	bl	8001998 <Update_lowpass>
//
////					Update_position_control(setpoint_pos);
//					Update_velocity_control(setpoint_vel + p_output);
//					pwm_signal = v_output;
//					Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
					is_update_encoder = 0;
 8001f18:	4a3c      	ldr	r2, [pc, #240]	@ (800200c <main+0x590>)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	7013      	strb	r3, [r2, #0]
				}
				// Check command from base system status
				//  homing command from Homing button and Base system Check command
				Set_Home(); // Refresh homing command from base system
 8001f1e:	f7fe ffe7 	bl	8000ef0 <Set_Home>
				if(state == 0b0010){
 8001f22:	4b3b      	ldr	r3, [pc, #236]	@ (8002010 <main+0x594>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d113      	bne.n	8001f52 <main+0x4d6>
					// Have command from base system
					mode = HOMING; // Go to wait mode for Deactivate end effector
 8001f2a:	4a30      	ldr	r2, [pc, #192]	@ (8001fec <main+0x570>)
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	8013      	strh	r3, [r2, #0]
					home.homing_command = 1;
 8001f30:	4a38      	ldr	r2, [pc, #224]	@ (8002014 <main+0x598>)
 8001f32:	2301      	movs	r3, #1
 8001f34:	7093      	strb	r3, [r2, #2]
					registerFrame[0x01].U16 = 0b0000; // Reset data of base system status
 8001f36:	4a38      	ldr	r2, [pc, #224]	@ (8002018 <main+0x59c>)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	8053      	strh	r3, [r2, #2]
					registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 8001f3c:	4a36      	ldr	r2, [pc, #216]	@ (8002018 <main+0x59c>)
 8001f3e:	2302      	movs	r3, #2
 8001f40:	8413      	strh	r3, [r2, #32]
					state = registerFrame[0x10].U16 = 0b0010;
 8001f42:	4a35      	ldr	r2, [pc, #212]	@ (8002018 <main+0x59c>)
 8001f44:	2302      	movs	r3, #2
 8001f46:	8413      	strh	r3, [r2, #32]
 8001f48:	4b33      	ldr	r3, [pc, #204]	@ (8002018 <main+0x59c>)
 8001f4a:	8c1b      	ldrh	r3, [r3, #32]
 8001f4c:	4a30      	ldr	r2, [pc, #192]	@ (8002010 <main+0x594>)
 8001f4e:	8013      	strh	r3, [r2, #0]
 8001f50:	e016      	b.n	8001f80 <main+0x504>
				}
				else if(HAL_GPIO_ReadPin(home_gpio, home_pin) == 1){
 8001f52:	2140      	movs	r1, #64	@ 0x40
 8001f54:	4823      	ldr	r0, [pc, #140]	@ (8001fe4 <main+0x568>)
 8001f56:	f004 fb59 	bl	800660c <HAL_GPIO_ReadPin>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d10f      	bne.n	8001f80 <main+0x504>
					// Have command from home switch
					mode = HOMING;// Go to wait mode for Deactivate end effector
 8001f60:	4a22      	ldr	r2, [pc, #136]	@ (8001fec <main+0x570>)
 8001f62:	2302      	movs	r3, #2
 8001f64:	8013      	strh	r3, [r2, #0]
					home.homing_command = 1;
 8001f66:	4a2b      	ldr	r2, [pc, #172]	@ (8002014 <main+0x598>)
 8001f68:	2301      	movs	r3, #1
 8001f6a:	7093      	strb	r3, [r2, #2]
					registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 8001f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8002018 <main+0x59c>)
 8001f6e:	2302      	movs	r3, #2
 8001f70:	8413      	strh	r3, [r2, #32]
					state = registerFrame[0x10].U16 = 0b0010;
 8001f72:	4a29      	ldr	r2, [pc, #164]	@ (8002018 <main+0x59c>)
 8001f74:	2302      	movs	r3, #2
 8001f76:	8413      	strh	r3, [r2, #32]
 8001f78:	4b27      	ldr	r3, [pc, #156]	@ (8002018 <main+0x59c>)
 8001f7a:	8c1b      	ldrh	r3, [r3, #32]
 8001f7c:	4a24      	ldr	r2, [pc, #144]	@ (8002010 <main+0x594>)
 8001f7e:	8013      	strh	r3, [r2, #0]
//				Gripper_Movement_Status(&eff); // End effector
//				// End effector update
//				Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
//			}
		}
		if(mode == HOMING){
 8001f80:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <main+0x570>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d112      	bne.n	8001fae <main+0x532>
			if(home.is_home == 1){
 8001f88:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <main+0x598>)
 8001f8a:	78db      	ldrb	r3, [r3, #3]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d10e      	bne.n	8001fae <main+0x532>
				// Finish homing state
				home.is_home = 0;
 8001f90:	4a20      	ldr	r2, [pc, #128]	@ (8002014 <main+0x598>)
 8001f92:	2300      	movs	r3, #0
 8001f94:	70d3      	strb	r3, [r2, #3]
				registerFrame[0x10].U16 = 0b0000; // Reset data of moving status
 8001f96:	4a20      	ldr	r2, [pc, #128]	@ (8002018 <main+0x59c>)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	8413      	strh	r3, [r2, #32]
				state = registerFrame[0x10].U16;
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002018 <main+0x59c>)
 8001f9e:	8c1b      	ldrh	r3, [r3, #32]
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8002010 <main+0x594>)
 8001fa2:	8013      	strh	r3, [r2, #0]

				Reset_main_variable();
 8001fa4:	f000 fd48 	bl	8002a38 <Reset_main_variable>
				// Change Mode
				mode = RUNNING;
 8001fa8:	4a10      	ldr	r2, [pc, #64]	@ (8001fec <main+0x570>)
 8001faa:	2301      	movs	r3, #1
 8001fac:	8013      	strh	r3, [r2, #0]
			}
		}
		if(mode == EMERGENCY){
 8001fae:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <main+0x570>)
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	f47f ae20 	bne.w	8001bf8 <main+0x17c>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1){
 8001fb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fbc:	4811      	ldr	r0, [pc, #68]	@ (8002004 <main+0x588>)
 8001fbe:	f004 fb25 	bl	800660c <HAL_GPIO_ReadPin>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	f47f ae17 	bne.w	8001bf8 <main+0x17c>
				HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fd0:	4804      	ldr	r0, [pc, #16]	@ (8001fe4 <main+0x568>)
 8001fd2:	f004 fb33 	bl	800663c <HAL_GPIO_WritePin>
				mode = WAIT;
 8001fd6:	4a05      	ldr	r2, [pc, #20]	@ (8001fec <main+0x570>)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	8013      	strh	r3, [r2, #0]
		Modbus_Protocal_Worker();
 8001fdc:	e60c      	b.n	8001bf8 <main+0x17c>
 8001fde:	bf00      	nop
 8001fe0:	200011a8 	.word	0x200011a8
 8001fe4:	48000800 	.word	0x48000800
 8001fe8:	20000828 	.word	0x20000828
 8001fec:	20000d88 	.word	0x20000d88
 8001ff0:	20000db1 	.word	0x20000db1
 8001ff4:	200009c0 	.word	0x200009c0
 8001ff8:	200011b0 	.word	0x200011b0
 8001ffc:	20001240 	.word	0x20001240
 8002000:	20000d50 	.word	0x20000d50
 8002004:	48000400 	.word	0x48000400
 8002008:	20000f44 	.word	0x20000f44
 800200c:	200011ac 	.word	0x200011ac
 8002010:	20000274 	.word	0x20000274
 8002014:	20000d98 	.word	0x20000d98
 8002018:	20000db4 	.word	0x20000db4

0800201c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b094      	sub	sp, #80	@ 0x50
 8002020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	2238      	movs	r2, #56	@ 0x38
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f009 fc0a 	bl	800b844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800203e:	2000      	movs	r0, #0
 8002040:	f004 fb2c 	bl	800669c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002044:	2301      	movs	r3, #1
 8002046:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002048:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800204c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800204e:	2302      	movs	r3, #2
 8002050:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002052:	2303      	movs	r3, #3
 8002054:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8002056:	2306      	movs	r3, #6
 8002058:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800205a:	2355      	movs	r3, #85	@ 0x55
 800205c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800205e:	2302      	movs	r3, #2
 8002060:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002062:	2302      	movs	r3, #2
 8002064:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002066:	2302      	movs	r3, #2
 8002068:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800206a:	f107 0318 	add.w	r3, r7, #24
 800206e:	4618      	mov	r0, r3
 8002070:	f004 fbc8 	bl	8006804 <HAL_RCC_OscConfig>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800207a:	f000 fd7b 	bl	8002b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800207e:	230f      	movs	r3, #15
 8002080:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002082:	2303      	movs	r3, #3
 8002084:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	2104      	movs	r1, #4
 8002096:	4618      	mov	r0, r3
 8002098:	f004 fec6 	bl	8006e28 <HAL_RCC_ClockConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80020a2:	f000 fd67 	bl	8002b74 <Error_Handler>
  }
}
 80020a6:	bf00      	nop
 80020a8:	3750      	adds	r7, #80	@ 0x50
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08c      	sub	sp, #48	@ 0x30
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80020b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	2220      	movs	r2, #32
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f009 fbbb 	bl	800b844 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020ce:	4b32      	ldr	r3, [pc, #200]	@ (8002198 <MX_ADC1_Init+0xe8>)
 80020d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80020d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020d6:	4b30      	ldr	r3, [pc, #192]	@ (8002198 <MX_ADC1_Init+0xe8>)
 80020d8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80020dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020de:	4b2e      	ldr	r3, [pc, #184]	@ (8002198 <MX_ADC1_Init+0xe8>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002198 <MX_ADC1_Init+0xe8>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80020ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002198 <MX_ADC1_Init+0xe8>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020f0:	4b29      	ldr	r3, [pc, #164]	@ (8002198 <MX_ADC1_Init+0xe8>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020f6:	4b28      	ldr	r3, [pc, #160]	@ (8002198 <MX_ADC1_Init+0xe8>)
 80020f8:	2204      	movs	r2, #4
 80020fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80020fc:	4b26      	ldr	r3, [pc, #152]	@ (8002198 <MX_ADC1_Init+0xe8>)
 80020fe:	2200      	movs	r2, #0
 8002100:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002102:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <MX_ADC1_Init+0xe8>)
 8002104:	2201      	movs	r2, #1
 8002106:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002108:	4b23      	ldr	r3, [pc, #140]	@ (8002198 <MX_ADC1_Init+0xe8>)
 800210a:	2201      	movs	r2, #1
 800210c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800210e:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <MX_ADC1_Init+0xe8>)
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002116:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <MX_ADC1_Init+0xe8>)
 8002118:	2200      	movs	r2, #0
 800211a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800211c:	4b1e      	ldr	r3, [pc, #120]	@ (8002198 <MX_ADC1_Init+0xe8>)
 800211e:	2200      	movs	r2, #0
 8002120:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002122:	4b1d      	ldr	r3, [pc, #116]	@ (8002198 <MX_ADC1_Init+0xe8>)
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800212a:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <MX_ADC1_Init+0xe8>)
 800212c:	2200      	movs	r2, #0
 800212e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002130:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <MX_ADC1_Init+0xe8>)
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002138:	4817      	ldr	r0, [pc, #92]	@ (8002198 <MX_ADC1_Init+0xe8>)
 800213a:	f002 f8c1 	bl	80042c0 <HAL_ADC_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002144:	f000 fd16 	bl	8002b74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800214c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002150:	4619      	mov	r1, r3
 8002152:	4811      	ldr	r0, [pc, #68]	@ (8002198 <MX_ADC1_Init+0xe8>)
 8002154:	f003 fb8e 	bl	8005874 <HAL_ADCEx_MultiModeConfigChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800215e:	f000 fd09 	bl	8002b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002162:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <MX_ADC1_Init+0xec>)
 8002164:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002166:	2306      	movs	r3, #6
 8002168:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800216e:	237f      	movs	r3, #127	@ 0x7f
 8002170:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002172:	2304      	movs	r3, #4
 8002174:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	4619      	mov	r1, r3
 800217e:	4806      	ldr	r0, [pc, #24]	@ (8002198 <MX_ADC1_Init+0xe8>)
 8002180:	f002 fdb6 	bl	8004cf0 <HAL_ADC_ConfigChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800218a:	f000 fcf3 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	3730      	adds	r7, #48	@ 0x30
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000075c 	.word	0x2000075c
 800219c:	04300002 	.word	0x04300002

080021a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b09c      	sub	sp, #112	@ 0x70
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
 80021d0:	615a      	str	r2, [r3, #20]
 80021d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2234      	movs	r2, #52	@ 0x34
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f009 fb32 	bl	800b844 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021e0:	4b45      	ldr	r3, [pc, #276]	@ (80022f8 <MX_TIM1_Init+0x158>)
 80021e2:	4a46      	ldr	r2, [pc, #280]	@ (80022fc <MX_TIM1_Init+0x15c>)
 80021e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 80021e6:	4b44      	ldr	r3, [pc, #272]	@ (80022f8 <MX_TIM1_Init+0x158>)
 80021e8:	2203      	movs	r2, #3
 80021ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ec:	4b42      	ldr	r3, [pc, #264]	@ (80022f8 <MX_TIM1_Init+0x158>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021f2:	4b41      	ldr	r3, [pc, #260]	@ (80022f8 <MX_TIM1_Init+0x158>)
 80021f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fa:	4b3f      	ldr	r3, [pc, #252]	@ (80022f8 <MX_TIM1_Init+0x158>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002200:	4b3d      	ldr	r3, [pc, #244]	@ (80022f8 <MX_TIM1_Init+0x158>)
 8002202:	2200      	movs	r2, #0
 8002204:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002206:	4b3c      	ldr	r3, [pc, #240]	@ (80022f8 <MX_TIM1_Init+0x158>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800220c:	483a      	ldr	r0, [pc, #232]	@ (80022f8 <MX_TIM1_Init+0x158>)
 800220e:	f005 fa75 	bl	80076fc <HAL_TIM_Base_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002218:	f000 fcac 	bl	8002b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002220:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002222:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002226:	4619      	mov	r1, r3
 8002228:	4833      	ldr	r0, [pc, #204]	@ (80022f8 <MX_TIM1_Init+0x158>)
 800222a:	f006 fa9f 	bl	800876c <HAL_TIM_ConfigClockSource>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002234:	f000 fc9e 	bl	8002b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002238:	482f      	ldr	r0, [pc, #188]	@ (80022f8 <MX_TIM1_Init+0x158>)
 800223a:	f005 fbab 	bl	8007994 <HAL_TIM_PWM_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002244:	f000 fc96 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800224c:	2300      	movs	r3, #0
 800224e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002254:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002258:	4619      	mov	r1, r3
 800225a:	4827      	ldr	r0, [pc, #156]	@ (80022f8 <MX_TIM1_Init+0x158>)
 800225c:	f007 fa6c 	bl	8009738 <HAL_TIMEx_MasterConfigSynchronization>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002266:	f000 fc85 	bl	8002b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800226a:	2360      	movs	r3, #96	@ 0x60
 800226c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002272:	2300      	movs	r3, #0
 8002274:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002276:	2300      	movs	r3, #0
 8002278:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800227a:	2304      	movs	r3, #4
 800227c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002286:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800228a:	2200      	movs	r2, #0
 800228c:	4619      	mov	r1, r3
 800228e:	481a      	ldr	r0, [pc, #104]	@ (80022f8 <MX_TIM1_Init+0x158>)
 8002290:	f006 f958 	bl	8008544 <HAL_TIM_PWM_ConfigChannel>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800229a:	f000 fc6b 	bl	8002b74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80022bc:	2300      	movs	r3, #0
 80022be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80022c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80022ce:	2300      	movs	r3, #0
 80022d0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	4807      	ldr	r0, [pc, #28]	@ (80022f8 <MX_TIM1_Init+0x158>)
 80022dc:	f007 fac2 	bl	8009864 <HAL_TIMEx_ConfigBreakDeadTime>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80022e6:	f000 fc45 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022ea:	4803      	ldr	r0, [pc, #12]	@ (80022f8 <MX_TIM1_Init+0x158>)
 80022ec:	f001 fb6e 	bl	80039cc <HAL_TIM_MspPostInit>

}
 80022f0:	bf00      	nop
 80022f2:	3770      	adds	r7, #112	@ 0x70
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000828 	.word	0x20000828
 80022fc:	40012c00 	.word	0x40012c00

08002300 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002306:	f107 0310 	add.w	r3, r7, #16
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800231e:	4b1d      	ldr	r3, [pc, #116]	@ (8002394 <MX_TIM3_Init+0x94>)
 8002320:	4a1d      	ldr	r2, [pc, #116]	@ (8002398 <MX_TIM3_Init+0x98>)
 8002322:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8002324:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <MX_TIM3_Init+0x94>)
 8002326:	22a9      	movs	r2, #169	@ 0xa9
 8002328:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232a:	4b1a      	ldr	r3, [pc, #104]	@ (8002394 <MX_TIM3_Init+0x94>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002330:	4b18      	ldr	r3, [pc, #96]	@ (8002394 <MX_TIM3_Init+0x94>)
 8002332:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002336:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002338:	4b16      	ldr	r3, [pc, #88]	@ (8002394 <MX_TIM3_Init+0x94>)
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233e:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <MX_TIM3_Init+0x94>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002344:	4813      	ldr	r0, [pc, #76]	@ (8002394 <MX_TIM3_Init+0x94>)
 8002346:	f005 f9d9 	bl	80076fc <HAL_TIM_Base_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002350:	f000 fc10 	bl	8002b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002358:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	4619      	mov	r1, r3
 8002360:	480c      	ldr	r0, [pc, #48]	@ (8002394 <MX_TIM3_Init+0x94>)
 8002362:	f006 fa03 	bl	800876c <HAL_TIM_ConfigClockSource>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800236c:	f000 fc02 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002370:	2300      	movs	r3, #0
 8002372:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	4619      	mov	r1, r3
 800237c:	4805      	ldr	r0, [pc, #20]	@ (8002394 <MX_TIM3_Init+0x94>)
 800237e:	f007 f9db 	bl	8009738 <HAL_TIMEx_MasterConfigSynchronization>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002388:	f000 fbf4 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800238c:	bf00      	nop
 800238e:	3720      	adds	r7, #32
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200008f4 	.word	0x200008f4
 8002398:	40000400 	.word	0x40000400

0800239c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08c      	sub	sp, #48	@ 0x30
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	2224      	movs	r2, #36	@ 0x24
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f009 fa4a 	bl	800b844 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b0:	463b      	mov	r3, r7
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023ba:	4b21      	ldr	r3, [pc, #132]	@ (8002440 <MX_TIM4_Init+0xa4>)
 80023bc:	4a21      	ldr	r2, [pc, #132]	@ (8002444 <MX_TIM4_Init+0xa8>)
 80023be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002440 <MX_TIM4_Init+0xa4>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002440 <MX_TIM4_Init+0xa4>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002440 <MX_TIM4_Init+0xa4>)
 80023ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <MX_TIM4_Init+0xa4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023da:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <MX_TIM4_Init+0xa4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023e0:	2303      	movs	r3, #3
 80023e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023e4:	2300      	movs	r3, #0
 80023e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023e8:	2301      	movs	r3, #1
 80023ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 80023f0:	2303      	movs	r3, #3
 80023f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023f4:	2300      	movs	r3, #0
 80023f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023f8:	2301      	movs	r3, #1
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 3;
 8002400:	2303      	movs	r3, #3
 8002402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	4619      	mov	r1, r3
 800240a:	480d      	ldr	r0, [pc, #52]	@ (8002440 <MX_TIM4_Init+0xa4>)
 800240c:	f005 fd38 	bl	8007e80 <HAL_TIM_Encoder_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002416:	f000 fbad 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002422:	463b      	mov	r3, r7
 8002424:	4619      	mov	r1, r3
 8002426:	4806      	ldr	r0, [pc, #24]	@ (8002440 <MX_TIM4_Init+0xa4>)
 8002428:	f007 f986 	bl	8009738 <HAL_TIMEx_MasterConfigSynchronization>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002432:	f000 fb9f 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	3730      	adds	r7, #48	@ 0x30
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200009c0 	.word	0x200009c0
 8002444:	40000800 	.word	0x40000800

08002448 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800244c:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <MX_TIM16_Init+0x58>)
 800244e:	4a15      	ldr	r2, [pc, #84]	@ (80024a4 <MX_TIM16_Init+0x5c>)
 8002450:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002452:	4b13      	ldr	r3, [pc, #76]	@ (80024a0 <MX_TIM16_Init+0x58>)
 8002454:	22a9      	movs	r2, #169	@ 0xa9
 8002456:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002458:	4b11      	ldr	r3, [pc, #68]	@ (80024a0 <MX_TIM16_Init+0x58>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <MX_TIM16_Init+0x58>)
 8002460:	f240 4279 	movw	r2, #1145	@ 0x479
 8002464:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002466:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <MX_TIM16_Init+0x58>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800246c:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <MX_TIM16_Init+0x58>)
 800246e:	2200      	movs	r2, #0
 8002470:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002472:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <MX_TIM16_Init+0x58>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002478:	4809      	ldr	r0, [pc, #36]	@ (80024a0 <MX_TIM16_Init+0x58>)
 800247a:	f005 f93f 	bl	80076fc <HAL_TIM_Base_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002484:	f000 fb76 	bl	8002b74 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002488:	2108      	movs	r1, #8
 800248a:	4805      	ldr	r0, [pc, #20]	@ (80024a0 <MX_TIM16_Init+0x58>)
 800248c:	f005 fc02 	bl	8007c94 <HAL_TIM_OnePulse_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002496:	f000 fb6d 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000a8c 	.word	0x20000a8c
 80024a4:	40014400 	.word	0x40014400

080024a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024ac:	4b23      	ldr	r3, [pc, #140]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024ae:	4a24      	ldr	r2, [pc, #144]	@ (8002540 <MX_USART2_UART_Init+0x98>)
 80024b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80024b2:	4b22      	ldr	r3, [pc, #136]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024b4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80024b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80024ba:	4b20      	ldr	r3, [pc, #128]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024c0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024c2:	4b1e      	ldr	r3, [pc, #120]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80024c8:	4b1c      	ldr	r3, [pc, #112]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024d0:	4b1a      	ldr	r3, [pc, #104]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024d2:	220c      	movs	r2, #12
 80024d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d6:	4b19      	ldr	r3, [pc, #100]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024d8:	2200      	movs	r2, #0
 80024da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024dc:	4b17      	ldr	r3, [pc, #92]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024de:	2200      	movs	r2, #0
 80024e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024e2:	4b16      	ldr	r3, [pc, #88]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024e8:	4b14      	ldr	r3, [pc, #80]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ee:	4b13      	ldr	r3, [pc, #76]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024f4:	4811      	ldr	r0, [pc, #68]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024f6:	f007 fa99 	bl	8009a2c <HAL_UART_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002500:	f000 fb38 	bl	8002b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002504:	2100      	movs	r1, #0
 8002506:	480d      	ldr	r0, [pc, #52]	@ (800253c <MX_USART2_UART_Init+0x94>)
 8002508:	f009 f8b9 	bl	800b67e <HAL_UARTEx_SetTxFifoThreshold>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002512:	f000 fb2f 	bl	8002b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002516:	2100      	movs	r1, #0
 8002518:	4808      	ldr	r0, [pc, #32]	@ (800253c <MX_USART2_UART_Init+0x94>)
 800251a:	f009 f8ee 	bl	800b6fa <HAL_UARTEx_SetRxFifoThreshold>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002524:	f000 fb26 	bl	8002b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002528:	4804      	ldr	r0, [pc, #16]	@ (800253c <MX_USART2_UART_Init+0x94>)
 800252a:	f009 f86f 	bl	800b60c <HAL_UARTEx_DisableFifoMode>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002534:	f000 fb1e 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000bb8 	.word	0x20000bb8
 8002540:	40004400 	.word	0x40004400

08002544 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800254a:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <MX_DMA_Init+0x80>)
 800254c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800254e:	4a1d      	ldr	r2, [pc, #116]	@ (80025c4 <MX_DMA_Init+0x80>)
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	6493      	str	r3, [r2, #72]	@ 0x48
 8002556:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <MX_DMA_Init+0x80>)
 8002558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002562:	4b18      	ldr	r3, [pc, #96]	@ (80025c4 <MX_DMA_Init+0x80>)
 8002564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002566:	4a17      	ldr	r2, [pc, #92]	@ (80025c4 <MX_DMA_Init+0x80>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6493      	str	r3, [r2, #72]	@ 0x48
 800256e:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <MX_DMA_Init+0x80>)
 8002570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	200b      	movs	r0, #11
 8002580:	f003 fb5b 	bl	8005c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002584:	200b      	movs	r0, #11
 8002586:	f003 fb72 	bl	8005c6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	200c      	movs	r0, #12
 8002590:	f003 fb53 	bl	8005c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002594:	200c      	movs	r0, #12
 8002596:	f003 fb6a 	bl	8005c6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	200d      	movs	r0, #13
 80025a0:	f003 fb4b 	bl	8005c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80025a4:	200d      	movs	r0, #13
 80025a6:	f003 fb62 	bl	8005c6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	200e      	movs	r0, #14
 80025b0:	f003 fb43 	bl	8005c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80025b4:	200e      	movs	r0, #14
 80025b6:	f003 fb5a 	bl	8005c6e <HAL_NVIC_EnableIRQ>

}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000

080025c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	@ 0x28
 80025cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ce:	f107 0314 	add.w	r3, r7, #20
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025de:	4b67      	ldr	r3, [pc, #412]	@ (800277c <MX_GPIO_Init+0x1b4>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e2:	4a66      	ldr	r2, [pc, #408]	@ (800277c <MX_GPIO_Init+0x1b4>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ea:	4b64      	ldr	r3, [pc, #400]	@ (800277c <MX_GPIO_Init+0x1b4>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025f6:	4b61      	ldr	r3, [pc, #388]	@ (800277c <MX_GPIO_Init+0x1b4>)
 80025f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fa:	4a60      	ldr	r2, [pc, #384]	@ (800277c <MX_GPIO_Init+0x1b4>)
 80025fc:	f043 0320 	orr.w	r3, r3, #32
 8002600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002602:	4b5e      	ldr	r3, [pc, #376]	@ (800277c <MX_GPIO_Init+0x1b4>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b5b      	ldr	r3, [pc, #364]	@ (800277c <MX_GPIO_Init+0x1b4>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	4a5a      	ldr	r2, [pc, #360]	@ (800277c <MX_GPIO_Init+0x1b4>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261a:	4b58      	ldr	r3, [pc, #352]	@ (800277c <MX_GPIO_Init+0x1b4>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002626:	4b55      	ldr	r3, [pc, #340]	@ (800277c <MX_GPIO_Init+0x1b4>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	4a54      	ldr	r2, [pc, #336]	@ (800277c <MX_GPIO_Init+0x1b4>)
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002632:	4b52      	ldr	r3, [pc, #328]	@ (800277c <MX_GPIO_Init+0x1b4>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002644:	484e      	ldr	r0, [pc, #312]	@ (8002780 <MX_GPIO_Init+0x1b8>)
 8002646:	f003 fff9 	bl	800663c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 800264a:	2200      	movs	r2, #0
 800264c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002650:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002654:	f003 fff2 	bl	800663c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 8002658:	2200      	movs	r2, #0
 800265a:	f240 4116 	movw	r1, #1046	@ 0x416
 800265e:	4849      	ldr	r0, [pc, #292]	@ (8002784 <MX_GPIO_Init+0x1bc>)
 8002660:	f003 ffec 	bl	800663c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002664:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800266a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800266e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	4619      	mov	r1, r3
 800267a:	4841      	ldr	r0, [pc, #260]	@ (8002780 <MX_GPIO_Init+0x1b8>)
 800267c:	f003 fe44 	bl	8006308 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 8002680:	2302      	movs	r3, #2
 8002682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002684:	2301      	movs	r3, #1
 8002686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	2303      	movs	r3, #3
 800268e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	4619      	mov	r1, r3
 8002696:	483a      	ldr	r0, [pc, #232]	@ (8002780 <MX_GPIO_Init+0x1b8>)
 8002698:	f003 fe36 	bl	8006308 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 800269c:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80026a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a2:	2301      	movs	r3, #1
 80026a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026b8:	f003 fe26 	bl	8006308 <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 80026bc:	23f0      	movs	r3, #240	@ 0xf0
 80026be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	4619      	mov	r1, r3
 80026ce:	482c      	ldr	r0, [pc, #176]	@ (8002780 <MX_GPIO_Init+0x1b8>)
 80026d0:	f003 fe1a 	bl	8006308 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 80026d4:	f240 4316 	movw	r3, #1046	@ 0x416
 80026d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026da:	2301      	movs	r3, #1
 80026dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	4619      	mov	r1, r3
 80026ec:	4825      	ldr	r0, [pc, #148]	@ (8002784 <MX_GPIO_Init+0x1bc>)
 80026ee:	f003 fe0b 	bl	8006308 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin joy_switch_1_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|joy_switch_1_Pin;
 80026f2:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 80026f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4619      	mov	r1, r3
 8002706:	481f      	ldr	r0, [pc, #124]	@ (8002784 <MX_GPIO_Init+0x1bc>)
 8002708:	f003 fdfe 	bl	8006308 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Emergency_switch_Pin;
 800270c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002712:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_switch_GPIO_Port, &GPIO_InitStruct);
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	4619      	mov	r1, r3
 8002722:	4818      	ldr	r0, [pc, #96]	@ (8002784 <MX_GPIO_Init+0x1bc>)
 8002724:	f003 fdf0 	bl	8006308 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 8002728:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800272c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272e:	2301      	movs	r3, #1
 8002730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4619      	mov	r1, r3
 8002740:	480f      	ldr	r0, [pc, #60]	@ (8002780 <MX_GPIO_Init+0x1b8>)
 8002742:	f003 fde1 	bl	8006308 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 8002746:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800274a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274c:	2300      	movs	r3, #0
 800274e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4619      	mov	r1, r3
 800275a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800275e:	f003 fdd3 	bl	8006308 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	2028      	movs	r0, #40	@ 0x28
 8002768:	f003 fa67 	bl	8005c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800276c:	2028      	movs	r0, #40	@ 0x28
 800276e:	f003 fa7e 	bl	8005c6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002772:	bf00      	nop
 8002774:	3728      	adds	r7, #40	@ 0x28
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	48000800 	.word	0x48000800
 8002784:	48000400 	.word	0x48000400

08002788 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af04      	add	r7, sp, #16
 800278e:	6078      	str	r0, [r7, #4]
	// Run with 1000 Hz
	if(htim == &htim3){
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a44      	ldr	r2, [pc, #272]	@ (80028a4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	f040 8081 	bne.w	800289c <HAL_TIM_PeriodElapsedCallback+0x114>
		// Update encoder
		if(is_update_encoder == 0){
 800279a:	4b43      	ldr	r3, [pc, #268]	@ (80028a8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d102      	bne.n	80027a8 <HAL_TIM_PeriodElapsedCallback+0x20>
			is_update_encoder = 1;
 80027a2:	4b41      	ldr	r3, [pc, #260]	@ (80028a8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
		}
		if(mode == RUNNING){
 80027a8:	4b40      	ldr	r3, [pc, #256]	@ (80028ac <HAL_TIM_PeriodElapsedCallback+0x124>)
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d113      	bne.n	80027d8 <HAL_TIM_PeriodElapsedCallback+0x50>
			static uint8_t timestamp = 0;
			if(start_position_control == 0 && timestamp == 8){
 80027b0:	4b3f      	ldr	r3, [pc, #252]	@ (80028b0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <HAL_TIM_PeriodElapsedCallback+0x44>
 80027b8:	4b3e      	ldr	r3, [pc, #248]	@ (80028b4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d105      	bne.n	80027cc <HAL_TIM_PeriodElapsedCallback+0x44>
				start_position_control = 1;
 80027c0:	4b3b      	ldr	r3, [pc, #236]	@ (80028b0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
				timestamp = 0;
 80027c6:	4b3b      	ldr	r3, [pc, #236]	@ (80028b4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
			}
			timestamp++;
 80027cc:	4b39      	ldr	r3, [pc, #228]	@ (80028b4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b37      	ldr	r3, [pc, #220]	@ (80028b4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80027d6:	701a      	strb	r2, [r3, #0]
		}
		if(mode == HOMING){
 80027d8:	4b34      	ldr	r3, [pc, #208]	@ (80028ac <HAL_TIM_PeriodElapsedCallback+0x124>)
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d15d      	bne.n	800289c <HAL_TIM_PeriodElapsedCallback+0x114>
			// End effector position check
			if(home.homing_command == 1 && eff.actual_status[0] == 0 && eff.actual_status[1] == 1){
 80027e0:	4b35      	ldr	r3, [pc, #212]	@ (80028b8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80027e2:	789b      	ldrb	r3, [r3, #2]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d120      	bne.n	800282a <HAL_TIM_PeriodElapsedCallback+0xa2>
 80027e8:	4b34      	ldr	r3, [pc, #208]	@ (80028bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11c      	bne.n	800282a <HAL_TIM_PeriodElapsedCallback+0xa2>
 80027f0:	4b32      	ldr	r3, [pc, #200]	@ (80028bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 80027f2:	785b      	ldrb	r3, [r3, #1]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d118      	bne.n	800282a <HAL_TIM_PeriodElapsedCallback+0xa2>
				eff.solenoid_command[0] = 0;
 80027f8:	4b30      	ldr	r3, [pc, #192]	@ (80028bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	709a      	strb	r2, [r3, #2]
				eff.solenoid_command[1] = 0;
 80027fe:	4b2f      	ldr	r3, [pc, #188]	@ (80028bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002800:	2200      	movs	r2, #0
 8002802:	70da      	strb	r2, [r3, #3]
				eff.solenoid_command[2] = 1;
 8002804:	4b2d      	ldr	r3, [pc, #180]	@ (80028bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002806:	2201      	movs	r2, #1
 8002808:	711a      	strb	r2, [r3, #4]
				Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 800280a:	2310      	movs	r3, #16
 800280c:	9302      	str	r3, [sp, #8]
 800280e:	4b2c      	ldr	r3, [pc, #176]	@ (80028c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800281c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002820:	4927      	ldr	r1, [pc, #156]	@ (80028c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002822:	4826      	ldr	r0, [pc, #152]	@ (80028bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002824:	f7fe fec3 	bl	80015ae <Update_eff>
				return;
 8002828:	e038      	b.n	800289c <HAL_TIM_PeriodElapsedCallback+0x114>
			}
			if(home.homing_command == 1 && eff.actual_status[0] == 1 && eff.actual_status[1] == 0){
 800282a:	4b23      	ldr	r3, [pc, #140]	@ (80028b8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800282c:	789b      	ldrb	r3, [r3, #2]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d11f      	bne.n	8002872 <HAL_TIM_PeriodElapsedCallback+0xea>
 8002832:	4b22      	ldr	r3, [pc, #136]	@ (80028bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d11b      	bne.n	8002872 <HAL_TIM_PeriodElapsedCallback+0xea>
 800283a:	4b20      	ldr	r3, [pc, #128]	@ (80028bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 800283c:	785b      	ldrb	r3, [r3, #1]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d117      	bne.n	8002872 <HAL_TIM_PeriodElapsedCallback+0xea>
				eff.solenoid_command[0] = 0;
 8002842:	4b1e      	ldr	r3, [pc, #120]	@ (80028bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002844:	2200      	movs	r2, #0
 8002846:	709a      	strb	r2, [r3, #2]
				eff.solenoid_command[1] = 0;
 8002848:	4b1c      	ldr	r3, [pc, #112]	@ (80028bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 800284a:	2200      	movs	r2, #0
 800284c:	70da      	strb	r2, [r3, #3]
				eff.solenoid_command[2] = 0;
 800284e:	4b1b      	ldr	r3, [pc, #108]	@ (80028bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002850:	2200      	movs	r2, #0
 8002852:	711a      	strb	r2, [r3, #4]
				Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 8002854:	2310      	movs	r3, #16
 8002856:	9302      	str	r3, [sp, #8]
 8002858:	4b19      	ldr	r3, [pc, #100]	@ (80028c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800285a:	9301      	str	r3, [sp, #4]
 800285c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002866:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800286a:	4915      	ldr	r1, [pc, #84]	@ (80028c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800286c:	4813      	ldr	r0, [pc, #76]	@ (80028bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 800286e:	f7fe fe9e 	bl	80015ae <Update_eff>
			}
			// Homing state
			homing(&home, GPIOB, GPIO_PIN_12); // Homing function
 8002872:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002876:	4912      	ldr	r1, [pc, #72]	@ (80028c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002878:	480f      	ldr	r0, [pc, #60]	@ (80028b8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800287a:	f000 fce9 	bl	8003250 <homing>
			pwm_signal = home.pwm;
 800287e:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002880:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002884:	461a      	mov	r2, r3
 8002886:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002888:	601a      	str	r2, [r3, #0]
			Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 800288a:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	2302      	movs	r3, #2
 8002892:	4a0d      	ldr	r2, [pc, #52]	@ (80028c8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002894:	2100      	movs	r1, #0
 8002896:	480d      	ldr	r0, [pc, #52]	@ (80028cc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002898:	f000 f9ea 	bl	8002c70 <Update_pwm>
		}
	}
}
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	200008f4 	.word	0x200008f4
 80028a8:	200011ac 	.word	0x200011ac
 80028ac:	20000d88 	.word	0x20000d88
 80028b0:	20001308 	.word	0x20001308
 80028b4:	200016d8 	.word	0x200016d8
 80028b8:	20000d98 	.word	0x20000d98
 80028bc:	20000f44 	.word	0x20000f44
 80028c0:	48000400 	.word	0x48000400
 80028c4:	200011a8 	.word	0x200011a8
 80028c8:	48000800 	.word	0x48000800
 80028cc:	20000828 	.word	0x20000828

080028d0 <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af04      	add	r7, sp, #16
 80028d6:	4603      	mov	r3, r0
 80028d8:	80fb      	strh	r3, [r7, #6]
	// Activate and Deactivate testing mode
	if(GPIO_Pin == GPIO_PIN_13){
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028e0:	d154      	bne.n	800298c <HAL_GPIO_EXTI_Callback+0xbc>
		static uint8_t test = 0;
		if(test == 0){
 80028e2:	4b48      	ldr	r3, [pc, #288]	@ (8002a04 <HAL_GPIO_EXTI_Callback+0x134>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d124      	bne.n	8002934 <HAL_GPIO_EXTI_Callback+0x64>
			target_position = 500.0;
 80028ea:	4947      	ldr	r1, [pc, #284]	@ (8002a08 <HAL_GPIO_EXTI_Callback+0x138>)
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	4b46      	ldr	r3, [pc, #280]	@ (8002a0c <HAL_GPIO_EXTI_Callback+0x13c>)
 80028f2:	e9c1 2300 	strd	r2, r3, [r1]
			initial_position = encoder.mm;
 80028f6:	4b46      	ldr	r3, [pc, #280]	@ (8002a10 <HAL_GPIO_EXTI_Callback+0x140>)
 80028f8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80028fc:	4945      	ldr	r1, [pc, #276]	@ (8002a14 <HAL_GPIO_EXTI_Callback+0x144>)
 80028fe:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurveData.t = 0;
 8002902:	4945      	ldr	r1, [pc, #276]	@ (8002a18 <HAL_GPIO_EXTI_Callback+0x148>)
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			setpoint_pos = 0.0;
 8002910:	4942      	ldr	r1, [pc, #264]	@ (8002a1c <HAL_GPIO_EXTI_Callback+0x14c>)
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	e9c1 2300 	strd	r2, r3, [r1]
			setpoint_vel = 0.0;
 800291e:	4940      	ldr	r1, [pc, #256]	@ (8002a20 <HAL_GPIO_EXTI_Callback+0x150>)
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9c1 2300 	strd	r2, r3, [r1]
			test = 1;
 800292c:	4b35      	ldr	r3, [pc, #212]	@ (8002a04 <HAL_GPIO_EXTI_Callback+0x134>)
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e028      	b.n	8002986 <HAL_GPIO_EXTI_Callback+0xb6>
//			testing = 1;
		}
		else if(test == 1){
 8002934:	4b33      	ldr	r3, [pc, #204]	@ (8002a04 <HAL_GPIO_EXTI_Callback+0x134>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d124      	bne.n	8002986 <HAL_GPIO_EXTI_Callback+0xb6>
			initial_position = encoder.mm;
 800293c:	4b34      	ldr	r3, [pc, #208]	@ (8002a10 <HAL_GPIO_EXTI_Callback+0x140>)
 800293e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002942:	4934      	ldr	r1, [pc, #208]	@ (8002a14 <HAL_GPIO_EXTI_Callback+0x144>)
 8002944:	e9c1 2300 	strd	r2, r3, [r1]
			target_position = 0.0;
 8002948:	492f      	ldr	r1, [pc, #188]	@ (8002a08 <HAL_GPIO_EXTI_Callback+0x138>)
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurveData.t = 0.0;
 8002956:	4930      	ldr	r1, [pc, #192]	@ (8002a18 <HAL_GPIO_EXTI_Callback+0x148>)
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	e9c1 2306 	strd	r2, r3, [r1, #24]
			setpoint_pos = 0.0;
 8002964:	492d      	ldr	r1, [pc, #180]	@ (8002a1c <HAL_GPIO_EXTI_Callback+0x14c>)
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	e9c1 2300 	strd	r2, r3, [r1]
			setpoint_vel = 0.0;
 8002972:	492b      	ldr	r1, [pc, #172]	@ (8002a20 <HAL_GPIO_EXTI_Callback+0x150>)
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	e9c1 2300 	strd	r2, r3, [r1]
			test = 0;
 8002980:	4b20      	ldr	r3, [pc, #128]	@ (8002a04 <HAL_GPIO_EXTI_Callback+0x134>)
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
//			testing = 0;
		}
		mode = RUNNING;
 8002986:	4b27      	ldr	r3, [pc, #156]	@ (8002a24 <HAL_GPIO_EXTI_Callback+0x154>)
 8002988:	2201      	movs	r2, #1
 800298a:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_15){
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002992:	d132      	bne.n	80029fa <HAL_GPIO_EXTI_Callback+0x12a>
		// Emergency switch interrupted
		if(HAL_GPIO_ReadPin(emer_gpio, emer_pin) == 0){
 8002994:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002998:	4823      	ldr	r0, [pc, #140]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0x158>)
 800299a:	f003 fe37 	bl	800660c <HAL_GPIO_ReadPin>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d12a      	bne.n	80029fa <HAL_GPIO_EXTI_Callback+0x12a>
//
//			state = 0;
//			registerFrame[0x10].U16 = 0;
//			registerFrame[0x01].U16 = 0;

			Reset_main_variable();
 80029a4:	f000 f848 	bl	8002a38 <Reset_main_variable>

			// Stop motor
			Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, 0);
 80029a8:	2300      	movs	r3, #0
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2302      	movs	r3, #2
 80029ae:	4a1f      	ldr	r2, [pc, #124]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0x15c>)
 80029b0:	2100      	movs	r1, #0
 80029b2:	481f      	ldr	r0, [pc, #124]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0x160>)
 80029b4:	f000 f95c 	bl	8002c70 <Update_pwm>
			// Emergency light enable
			HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, SET);
 80029b8:	2201      	movs	r2, #1
 80029ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029be:	481b      	ldr	r0, [pc, #108]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0x15c>)
 80029c0:	f003 fe3c 	bl	800663c <HAL_GPIO_WritePin>
			// Deactivate end effector
			eff.solenoid_command[0] = 0;
 80029c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0x164>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	709a      	strb	r2, [r3, #2]
			eff.solenoid_command[1] = 0;
 80029ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0x164>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	70da      	strb	r2, [r3, #3]
			eff.solenoid_command[2] = 0;
 80029d0:	4b18      	ldr	r3, [pc, #96]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0x164>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	711a      	strb	r2, [r3, #4]
			Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 80029d6:	2310      	movs	r3, #16
 80029d8:	9302      	str	r3, [sp, #8]
 80029da:	4b13      	ldr	r3, [pc, #76]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0x158>)
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80029e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029ec:	490e      	ldr	r1, [pc, #56]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0x158>)
 80029ee:	4811      	ldr	r0, [pc, #68]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0x164>)
 80029f0:	f7fe fddd 	bl	80015ae <Update_eff>
			mode = EMERGENCY;
 80029f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <HAL_GPIO_EXTI_Callback+0x154>)
 80029f6:	2203      	movs	r2, #3
 80029f8:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200016d9 	.word	0x200016d9
 8002a08:	200016c0 	.word	0x200016c0
 8002a0c:	407f4000 	.word	0x407f4000
 8002a10:	200011b0 	.word	0x200011b0
 8002a14:	200016b8 	.word	0x200016b8
 8002a18:	20001690 	.word	0x20001690
 8002a1c:	200016c8 	.word	0x200016c8
 8002a20:	200016d0 	.word	0x200016d0
 8002a24:	20000d88 	.word	0x20000d88
 8002a28:	48000400 	.word	0x48000400
 8002a2c:	48000800 	.word	0x48000800
 8002a30:	20000828 	.word	0x20000828
 8002a34:	20000f44 	.word	0x20000f44

08002a38 <Reset_main_variable>:
	//input is pulse unit
	p_e = s - Get_mm(&encoder);
	p_output = Update_pid(&p_pid, p_e, 650.0, 650.0);
}
// Reset variable function
void Reset_main_variable(){
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
	// Reset point reset
	setpoint = 0.0;
 8002a3c:	4939      	ldr	r1, [pc, #228]	@ (8002b24 <Reset_main_variable+0xec>)
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset PWM signal
	pwm_signal = 0;
 8002a4a:	4b37      	ldr	r3, [pc, #220]	@ (8002b28 <Reset_main_variable+0xf0>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
	// Encoder compute enable
	is_update_encoder = 0;
 8002a50:	4b36      	ldr	r3, [pc, #216]	@ (8002b2c <Reset_main_variable+0xf4>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
	// Reset trajectory
	initial_position = 0.0;
 8002a56:	4936      	ldr	r1, [pc, #216]	@ (8002b30 <Reset_main_variable+0xf8>)
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	e9c1 2300 	strd	r2, r3, [r1]
	target_position = 0.0;
 8002a64:	4933      	ldr	r1, [pc, #204]	@ (8002b34 <Reset_main_variable+0xfc>)
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	e9c1 2300 	strd	r2, r3, [r1]
	evaScurveData.setposition = 0.0;
 8002a72:	4931      	ldr	r1, [pc, #196]	@ (8002b38 <Reset_main_variable+0x100>)
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	e9c1 2300 	strd	r2, r3, [r1]
	evaScurveData.setvelocity = 0.0;
 8002a80:	492d      	ldr	r1, [pc, #180]	@ (8002b38 <Reset_main_variable+0x100>)
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	evaScurveData.setacceleration = 0.0;
 8002a8e:	492a      	ldr	r1, [pc, #168]	@ (8002b38 <Reset_main_variable+0x100>)
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	e9c1 2304 	strd	r2, r3, [r1, #16]
	evaScurveData.t = 0.0;
 8002a9c:	4926      	ldr	r1, [pc, #152]	@ (8002b38 <Reset_main_variable+0x100>)
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	e9c1 2306 	strd	r2, r3, [r1, #24]
	// Reset homing data
	Reset_homing(&home);
 8002aaa:	4824      	ldr	r0, [pc, #144]	@ (8002b3c <Reset_main_variable+0x104>)
 8002aac:	f000 fdd2 	bl	8003654 <Reset_homing>
	// Reset state enable
	state = 0;
 8002ab0:	4b23      	ldr	r3, [pc, #140]	@ (8002b40 <Reset_main_variable+0x108>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	801a      	strh	r2, [r3, #0]
	ready = 0;
 8002ab6:	4b23      	ldr	r3, [pc, #140]	@ (8002b44 <Reset_main_variable+0x10c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
	test = 0;
 8002abc:	4922      	ldr	r1, [pc, #136]	@ (8002b48 <Reset_main_variable+0x110>)
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset MODBUS
	registerFrame[0x10].U16 = 0;
 8002aca:	4b20      	ldr	r3, [pc, #128]	@ (8002b4c <Reset_main_variable+0x114>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	841a      	strh	r2, [r3, #32]
	registerFrame[0x01].U16 = 0;
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b4c <Reset_main_variable+0x114>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	805a      	strh	r2, [r3, #2]
	// Reset encoder
	Reset_qei(&encoder, &htim4);
 8002ad6:	491e      	ldr	r1, [pc, #120]	@ (8002b50 <Reset_main_variable+0x118>)
 8002ad8:	481e      	ldr	r0, [pc, #120]	@ (8002b54 <Reset_main_variable+0x11c>)
 8002ada:	f000 fafb 	bl	80030d4 <Reset_qei>
	// Reset lowpass
	Reset_lowpass(&lowpass);
 8002ade:	481e      	ldr	r0, [pc, #120]	@ (8002b58 <Reset_main_variable+0x120>)
 8002ae0:	f7fe ffbe 	bl	8001a60 <Reset_lowpass>
	// Reset PID
	p_e = 0.0;
 8002ae4:	491d      	ldr	r1, [pc, #116]	@ (8002b5c <Reset_main_variable+0x124>)
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	e9c1 2300 	strd	r2, r3, [r1]
	p_output = 0.0;
 8002af2:	491b      	ldr	r1, [pc, #108]	@ (8002b60 <Reset_main_variable+0x128>)
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e9c1 2300 	strd	r2, r3, [r1]
	v_e = 0.0;
 8002b00:	4918      	ldr	r1, [pc, #96]	@ (8002b64 <Reset_main_variable+0x12c>)
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	e9c1 2300 	strd	r2, r3, [r1]
	v_output = 0;
 8002b0e:	4b16      	ldr	r3, [pc, #88]	@ (8002b68 <Reset_main_variable+0x130>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
	Reset_pid(&p_pid);
 8002b14:	4815      	ldr	r0, [pc, #84]	@ (8002b6c <Reset_main_variable+0x134>)
 8002b16:	f000 f87e 	bl	8002c16 <Reset_pid>
	Reset_pid(&v_pid);
 8002b1a:	4815      	ldr	r0, [pc, #84]	@ (8002b70 <Reset_main_variable+0x138>)
 8002b1c:	f000 f87b 	bl	8002c16 <Reset_pid>
}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000d80 	.word	0x20000d80
 8002b28:	200011a8 	.word	0x200011a8
 8002b2c:	200011ac 	.word	0x200011ac
 8002b30:	200016b8 	.word	0x200016b8
 8002b34:	200016c0 	.word	0x200016c0
 8002b38:	20001690 	.word	0x20001690
 8002b3c:	20000d98 	.word	0x20000d98
 8002b40:	20000274 	.word	0x20000274
 8002b44:	20000d8a 	.word	0x20000d8a
 8002b48:	20000d48 	.word	0x20000d48
 8002b4c:	20000db4 	.word	0x20000db4
 8002b50:	200009c0 	.word	0x200009c0
 8002b54:	200011b0 	.word	0x200011b0
 8002b58:	20001240 	.word	0x20001240
 8002b5c:	200012f8 	.word	0x200012f8
 8002b60:	20001300 	.word	0x20001300
 8002b64:	20001290 	.word	0x20001290
 8002b68:	20001298 	.word	0x20001298
 8002b6c:	200012a0 	.word	0x200012a0
 8002b70:	20001248 	.word	0x20001248

08002b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b78:	b672      	cpsid	i
}
 8002b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <Error_Handler+0x8>

08002b80 <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float _kp_u,  float _ki_u, float _kd_u,float _kp_d,  float _ki_d, float _kd_d){
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	@ 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	61f8      	str	r0, [r7, #28]
 8002b88:	ed87 0a06 	vstr	s0, [r7, #24]
 8002b8c:	edc7 0a05 	vstr	s1, [r7, #20]
 8002b90:	ed87 1a04 	vstr	s2, [r7, #16]
 8002b94:	edc7 1a03 	vstr	s3, [r7, #12]
 8002b98:	ed87 2a02 	vstr	s4, [r7, #8]
 8002b9c:	edc7 2a01 	vstr	s5, [r7, #4]
	pid -> kp_up = _kp_u;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	601a      	str	r2, [r3, #0]
	pid -> ki_up = _ki_u;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	605a      	str	r2, [r3, #4]
	pid -> kd_up = _kd_u;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	609a      	str	r2, [r3, #8]
	pid -> kp_down = _kp_d;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	60da      	str	r2, [r3, #12]
	pid -> ki_down = _ki_d;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	611a      	str	r2, [r3, #16]
	pid -> kd_down = _kd_d;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	615a      	str	r2, [r3, #20]
	pid -> y_n = 0.0;
 8002bc4:	69f9      	ldr	r1, [r7, #28]
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pid -> y_n_1 = 0.0;
 8002bd2:	69f9      	ldr	r1, [r7, #28]
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid -> e_n = 0.0;
 8002be0:	69f9      	ldr	r1, [r7, #28]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	pid -> e_n_1 = 0.0;
 8002bee:	69f9      	ldr	r1, [r7, #28]
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	pid -> e_n_2 = 0.0;
 8002bfc:	69f9      	ldr	r1, [r7, #28]
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8002c0a:	bf00      	nop
 8002c0c:	3724      	adds	r7, #36	@ 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <Reset_pid>:
	pid -> e_n_1 = pid -> e_n;
	pid -> y_n_1 = pid -> y_n;

	return pid -> y_n;
}
void Reset_pid(PID* pid){
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
	pid -> y_n = 0.0;
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pid -> y_n_1 = 0.0;
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid -> e_n = 0.0;
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	pid -> e_n_1 = 0.0;
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	pid -> e_n_2 = 0.0;
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 8002c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c74:	b08b      	sub	sp, #44	@ 0x2c
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c7a:	61fa      	str	r2, [r7, #28]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	460b      	mov	r3, r1
 8002c80:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002c82:	4613      	mov	r3, r2
 8002c84:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 8002c86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d111      	bne.n	8002cb0 <Update_pwm+0x40>
 8002c8c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002c8e:	f7fd fc15 	bl	80004bc <__aeabi_i2d>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	613a      	str	r2, [r7, #16]
 8002c98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	681c      	ldr	r4, [r3, #0]
 8002ca2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ca6:	f7fd fead 	bl	8000a04 <__aeabi_d2uiz>
 8002caa:	4603      	mov	r3, r0
 8002cac:	6363      	str	r3, [r4, #52]	@ 0x34
 8002cae:	e061      	b.n	8002d74 <Update_pwm+0x104>
 8002cb0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d111      	bne.n	8002cda <Update_pwm+0x6a>
 8002cb6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002cb8:	f7fd fc00 	bl	80004bc <__aeabi_i2d>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	60ba      	str	r2, [r7, #8]
 8002cc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cca:	681c      	ldr	r4, [r3, #0]
 8002ccc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cd0:	f7fd fe98 	bl	8000a04 <__aeabi_d2uiz>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002cd8:	e04c      	b.n	8002d74 <Update_pwm+0x104>
 8002cda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d111      	bne.n	8002d04 <Update_pwm+0x94>
 8002ce0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002ce2:	f7fd fbeb 	bl	80004bc <__aeabi_i2d>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	603a      	str	r2, [r7, #0]
 8002cec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	681c      	ldr	r4, [r3, #0]
 8002cf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cfa:	f7fd fe83 	bl	8000a04 <__aeabi_d2uiz>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002d02:	e037      	b.n	8002d74 <Update_pwm+0x104>
 8002d04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002d06:	2b0c      	cmp	r3, #12
 8002d08:	d110      	bne.n	8002d2c <Update_pwm+0xbc>
 8002d0a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002d0c:	f7fd fbd6 	bl	80004bc <__aeabi_i2d>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4615      	mov	r5, r2
 8002d16:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	681c      	ldr	r4, [r3, #0]
 8002d1e:	4628      	mov	r0, r5
 8002d20:	4631      	mov	r1, r6
 8002d22:	f7fd fe6f 	bl	8000a04 <__aeabi_d2uiz>
 8002d26:	4603      	mov	r3, r0
 8002d28:	6423      	str	r3, [r4, #64]	@ 0x40
 8002d2a:	e023      	b.n	8002d74 <Update_pwm+0x104>
 8002d2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d110      	bne.n	8002d54 <Update_pwm+0xe4>
 8002d32:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002d34:	f7fd fbc2 	bl	80004bc <__aeabi_i2d>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4692      	mov	sl, r2
 8002d3e:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d44:	681c      	ldr	r4, [r3, #0]
 8002d46:	4650      	mov	r0, sl
 8002d48:	4659      	mov	r1, fp
 8002d4a:	f7fd fe5b 	bl	8000a04 <__aeabi_d2uiz>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002d52:	e00f      	b.n	8002d74 <Update_pwm+0x104>
 8002d54:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002d56:	f7fd fbb1 	bl	80004bc <__aeabi_i2d>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4690      	mov	r8, r2
 8002d60:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	681c      	ldr	r4, [r3, #0]
 8002d68:	4640      	mov	r0, r8
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	f7fd fe4a 	bl	8000a04 <__aeabi_d2uiz>
 8002d70:	4603      	mov	r3, r0
 8002d72:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 8002d74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	da06      	bge.n	8002d88 <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 8002d7a:	8c3b      	ldrh	r3, [r7, #32]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4619      	mov	r1, r3
 8002d80:	69f8      	ldr	r0, [r7, #28]
 8002d82:	f003 fc5b 	bl	800663c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 8002d86:	e005      	b.n	8002d94 <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 8002d88:	8c3b      	ldrh	r3, [r7, #32]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	69f8      	ldr	r0, [r7, #28]
 8002d90:	f003 fc54 	bl	800663c <HAL_GPIO_WritePin>
}
 8002d94:	bf00      	nop
 8002d96:	372c      	adds	r7, #44	@ 0x2c
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002d9e <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8002dd0:	68f9      	ldr	r1, [r7, #12]
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8002dde:	68f9      	ldr	r1, [r7, #12]
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	qei -> rev = 0.0;
 8002dec:	68f9      	ldr	r1, [r7, #12]
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	qei -> mm = 0.0;
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> pps = 0.0;
 8002e08:	68f9      	ldr	r1, [r7, #12]
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	qei -> rpm = 0.0;
 8002e16:	68f9      	ldr	r1, [r7, #12]
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	qei -> radps = 0.0;
 8002e24:	68f9      	ldr	r1, [r7, #12]
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	qei -> mmps = 0.0;
 8002e32:	68f9      	ldr	r1, [r7, #12]
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	qei -> radpss = 0.0;
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	qei -> rpms = 0.0;
 8002e4e:	68f9      	ldr	r1, [r7, #12]
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	qei -> mmpss = 0.0;
 8002e5c:	68f9      	ldr	r1, [r7, #12]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	qei -> velocity_value[NEW] = 0;
 8002e6a:	68f9      	ldr	r1, [r7, #12]
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	qei -> velocity_value[OLD] = 0;
 8002e78:	68f9      	ldr	r1, [r7, #12]
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60

}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	0000      	movs	r0, r0
 8002e94:	0000      	movs	r0, r0
	...

08002e98 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 8002e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	0fd9      	lsrs	r1, r3, #31
 8002ec8:	440b      	add	r3, r1
 8002eca:	105b      	asrs	r3, r3, #1
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	dd06      	ble.n	8002ede <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	1ad2      	subs	r2, r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	425b      	negs	r3, r3
 8002ee8:	0fd9      	lsrs	r1, r3, #31
 8002eea:	440b      	add	r3, r1
 8002eec:	105b      	asrs	r3, r3, #1
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	da06      	bge.n	8002f00 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	441a      	add	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	615a      	str	r2, [r3, #20]
	}

	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	6949      	ldr	r1, [r1, #20]
 8002f0a:	17c8      	asrs	r0, r1, #31
 8002f0c:	460c      	mov	r4, r1
 8002f0e:	4605      	mov	r5, r0
 8002f10:	eb12 0804 	adds.w	r8, r2, r4
 8002f14:	eb43 0905 	adc.w	r9, r3, r5
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	e9c3 8906 	strd	r8, r9, [r3, #24]
//	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
	qei -> mm += (double)qei -> diff_counter_value * 16.0 / (double)(qei -> ppr); // for lead 16 mm.
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fac7 	bl	80004bc <__aeabi_i2d>
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	4b67      	ldr	r3, [pc, #412]	@ (80030d0 <Update_qei+0x238>)
 8002f34:	f7fd fb2c 	bl	8000590 <__aeabi_dmul>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4690      	mov	r8, r2
 8002f3e:	4699      	mov	r9, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd fab9 	bl	80004bc <__aeabi_i2d>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4640      	mov	r0, r8
 8002f50:	4649      	mov	r1, r9
 8002f52:	f7fd fc47 	bl	80007e4 <__aeabi_ddiv>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	f7fd f961 	bl	8000224 <__adddf3>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	// Update velocity at difference unit
	qei -> pps = qei -> diff_counter_value * (qei -> freq);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6852      	ldr	r2, [r2, #4]
 8002f74:	fb02 f303 	mul.w	r3, r2, r3
 8002f78:	17da      	asrs	r2, r3, #31
 8002f7a:	469a      	mov	sl, r3
 8002f7c:	4693      	mov	fp, r2
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
	qei -> radps = (double)(qei -> pps) * 2.0 * M_PI / (double)(qei -> ppr);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f7fd fad1 	bl	8000534 <__aeabi_l2d>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	f7fd f945 	bl	8000224 <__adddf3>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	a349      	add	r3, pc, #292	@ (adr r3, 80030c8 <Update_qei+0x230>)
 8002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa8:	f7fd faf2 	bl	8000590 <__aeabi_dmul>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4614      	mov	r4, r2
 8002fb2:	461d      	mov	r5, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fd fa7f 	bl	80004bc <__aeabi_i2d>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	f7fd fc0d 	bl	80007e4 <__aeabi_ddiv>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
//	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
	qei -> mmps = ((double)(qei -> pps) * 16.0) / (double)(qei -> ppr);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002fda:	4610      	mov	r0, r2
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f7fd faa9 	bl	8000534 <__aeabi_l2d>
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	4b3a      	ldr	r3, [pc, #232]	@ (80030d0 <Update_qei+0x238>)
 8002fe8:	f7fd fad2 	bl	8000590 <__aeabi_dmul>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4614      	mov	r4, r2
 8002ff2:	461d      	mov	r5, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd fa5f 	bl	80004bc <__aeabi_i2d>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4620      	mov	r0, r4
 8003004:	4629      	mov	r1, r5
 8003006:	f7fd fbed 	bl	80007e4 <__aeabi_ddiv>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

	// Update acceleration
	qei -> velocity_value[NEW] = qei -> pps;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	f7fd fa89 	bl	8000534 <__aeabi_l2d>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	qei -> diff_velocity_value = qei -> velocity_value[NEW] - qei -> velocity_value[OLD];
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8003038:	f7fd f8f2 	bl	8000220 <__aeabi_dsub>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	qei -> ppss = qei -> diff_velocity_value * (double)(qei -> freq);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	@ 0x68
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd fa33 	bl	80004bc <__aeabi_i2d>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4620      	mov	r0, r4
 800305c:	4629      	mov	r1, r5
 800305e:	f7fd fa97 	bl	8000590 <__aeabi_dmul>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
//	qei -> radpss = qei -> ppss * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rpms = qei -> ppss * 60.0 / (float)(qei -> ppr);
	qei -> mmpss = qei -> ppss * 16.0 / (double)(qei -> ppr); // Acceleration in mm/s^2
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	4b16      	ldr	r3, [pc, #88]	@ (80030d0 <Update_qei+0x238>)
 8003078:	f7fd fa8a 	bl	8000590 <__aeabi_dmul>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4614      	mov	r4, r2
 8003082:	461d      	mov	r5, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fa17 	bl	80004bc <__aeabi_i2d>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4620      	mov	r0, r4
 8003094:	4629      	mov	r1, r5
 8003096:	f7fd fba5 	bl	80007e4 <__aeabi_ddiv>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	611a      	str	r2, [r3, #16]
	qei -> velocity_value[OLD] = qei -> velocity_value[NEW];
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60

}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c2:	bf00      	nop
 80030c4:	f3af 8000 	nop.w
 80030c8:	54442d18 	.word	0x54442d18
 80030cc:	400921fb 	.word	0x400921fb
 80030d0:	40300000 	.word	0x40300000

080030d4 <Reset_qei>:

void Reset_qei(QEI* qei, TIM_HandleTypeDef* htim){
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
	qei -> counter_value[NEW] = 0;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	qei -> rev = 0.0;
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9c1 2308 	strd	r2, r3, [r1, #32]
	qei -> mm = 0.0;
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> pps = 0.0;
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	qei -> rpm = 0.0;
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	qei -> radps = 0.0;
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	qei -> mmps = 0.0;
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	qei -> ppss = 0;
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	qei -> rpms = 0.0;
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	qei -> radpss = 0.0;
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	qei -> mmpss = 0.0;
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	qei -> velocity_value[NEW] = 0;
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	qei -> velocity_value[OLD] = 0;
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	qei -> diff_velocity_value = 0;
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	HAL_TIM_Encoder_Stop(htim, TIM_CHANNEL_ALL);
 80031c2:	213c      	movs	r1, #60	@ 0x3c
 80031c4:	6838      	ldr	r0, [r7, #0]
 80031c6:	f004 ff9d 	bl	8008104 <HAL_TIM_Encoder_Stop>
	__HAL_TIM_SET_COUNTER(htim, 0);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2200      	movs	r2, #0
 80031d0:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 80031d2:	213c      	movs	r1, #60	@ 0x3c
 80031d4:	6838      	ldr	r0, [r7, #0]
 80031d6:	f004 ff07 	bl	8007fe8 <HAL_TIM_Encoder_Start>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <point_init>:
 *  Created on: May 3, 2024
 *      Author: naker
 */
#include "state.h"

void point_init(POINT* point){
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
	point -> goal = 0.0;
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <homing_init>:



void homing_init(HOME* home){
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	home -> homing_command = 0;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	709a      	strb	r2, [r3, #2]
	home -> homing_state[0] = 0;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
	home -> homing_state[1] = 0;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	705a      	strb	r2, [r3, #1]
	home -> is_home = 0;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	70da      	strb	r2, [r3, #3]
	home -> homing_first = 0;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	711a      	strb	r2, [r3, #4]
	home -> homing_sec = 0;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	715a      	strb	r2, [r3, #5]
	home -> homing_ts = 0;
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	home -> pwm = 0;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	821a      	strh	r2, [r3, #16]
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <homing>:
void homing(HOME* home, GPIO_TypeDef* GPIO_Prox, uint16_t GPIO_Pin_Prox)
{
 8003250:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	4613      	mov	r3, r2
 800325e:	80fb      	strh	r3, [r7, #6]
	// If we have homing command
	if(home -> homing_command == 1){
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	789b      	ldrb	r3, [r3, #2]
 8003264:	2b01      	cmp	r3, #1
 8003266:	f040 81ed 	bne.w	8003644 <homing+0x3f4>
		if(home -> homing_state[0] == 0){
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d125      	bne.n	80032be <homing+0x6e>
			// Homing state selection
			// Robot is not home but proximity is detecting
			if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && home -> is_home == 0){
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	4619      	mov	r1, r3
 8003276:	68b8      	ldr	r0, [r7, #8]
 8003278:	f003 f9c8 	bl	800660c <HAL_GPIO_ReadPin>
 800327c:	4603      	mov	r3, r0
 800327e:	2b01      	cmp	r3, #1
 8003280:	d107      	bne.n	8003292 <homing+0x42>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	78db      	ldrb	r3, [r3, #3]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <homing+0x42>
				home -> homing_state[1] = 1;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	705a      	strb	r2, [r3, #1]
 8003290:	e00e      	b.n	80032b0 <homing+0x60>
			}
			// Robot is not home and proximity isn't detecting
			else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && home -> is_home == 0){
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	4619      	mov	r1, r3
 8003296:	68b8      	ldr	r0, [r7, #8]
 8003298:	f003 f9b8 	bl	800660c <HAL_GPIO_ReadPin>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <homing+0x60>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	78db      	ldrb	r3, [r3, #3]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <homing+0x60>
				home -> homing_state[1] = 2;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2202      	movs	r2, #2
 80032ae:	705a      	strb	r2, [r3, #1]
			}
			if(home -> homing_state[1] != 0){
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	785b      	ldrb	r3, [r3, #1]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <homing+0x6e>
				// Set homing state
				home -> homing_state[0] = 1;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
			}
		}
		if(home -> homing_state[0] == 1){
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	f040 81bf 	bne.w	8003646 <homing+0x3f6>
			// Homing
			if(home -> homing_state[1] == 1){
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	785b      	ldrb	r3, [r3, #1]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	f040 80a7 	bne.w	8003420 <homing+0x1d0>
//				home -> state_check += 10;
				if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_first == 1 && home -> homing_sec == 1){
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	4619      	mov	r1, r3
 80032d6:	68b8      	ldr	r0, [r7, #8]
 80032d8:	f003 f998 	bl	800660c <HAL_GPIO_ReadPin>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d124      	bne.n	800332c <homing+0xdc>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	791b      	ldrb	r3, [r3, #4]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d120      	bne.n	800332c <homing+0xdc>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	795b      	ldrb	r3, [r3, #5]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d11c      	bne.n	800332c <homing+0xdc>
					home -> pwm = 0;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	821a      	strh	r2, [r3, #16]
					// Reset homing state and other
					home -> homing_ts = 0;
 80032f8:	68f9      	ldr	r1, [r7, #12]
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	e9c1 2302 	strd	r2, r3, [r1, #8]
					home -> homing_state[0] = 0;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
					home -> homing_state[1] = 0;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	705a      	strb	r2, [r3, #1]
					home -> homing_command = 0;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	709a      	strb	r2, [r3, #2]
					home -> homing_first = 0;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	711a      	strb	r2, [r3, #4]
					home -> homing_sec = 0;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	715a      	strb	r2, [r3, #5]
					home -> is_home = 1;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	70da      	strb	r2, [r3, #3]
					return;
 800332a:	e18c      	b.n	8003646 <homing+0x3f6>
				}
				else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1 && home -> homing_first == 1 && home -> homing_sec == 0 && home -> homing_ts >= 1500){
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	4619      	mov	r1, r3
 8003330:	68b8      	ldr	r0, [r7, #8]
 8003332:	f003 f96b 	bl	800660c <HAL_GPIO_ReadPin>
 8003336:	4603      	mov	r3, r0
 8003338:	2b01      	cmp	r3, #1
 800333a:	d118      	bne.n	800336e <homing+0x11e>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	791b      	ldrb	r3, [r3, #4]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d114      	bne.n	800336e <homing+0x11e>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	795b      	ldrb	r3, [r3, #5]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d110      	bne.n	800336e <homing+0x11e>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003352:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8003356:	428a      	cmp	r2, r1
 8003358:	f173 0300 	sbcs.w	r3, r3, #0
 800335c:	d307      	bcc.n	800336e <homing+0x11e>
					// Stop when proximity was detected
					home -> pwm = 14000;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 8003364:	821a      	strh	r2, [r3, #16]
					home -> homing_sec = 1;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	715a      	strb	r2, [r3, #5]
 800336c:	e04d      	b.n	800340a <homing+0x1ba>
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1 && home -> homing_first == 0 && home -> homing_ts >= 0 && home -> homing_ts < 1000){
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	4619      	mov	r1, r3
 8003372:	68b8      	ldr	r0, [r7, #8]
 8003374:	f003 f94a 	bl	800660c <HAL_GPIO_ReadPin>
 8003378:	4603      	mov	r3, r0
 800337a:	2b01      	cmp	r3, #1
 800337c:	d113      	bne.n	80033a6 <homing+0x156>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	791b      	ldrb	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <homing+0x156>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800338c:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8003390:	f173 0300 	sbcs.w	r3, r3, #0
 8003394:	d207      	bcs.n	80033a6 <homing+0x156>
					// Move upper
					home -> pwm = 14000;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 800339c:	821a      	strh	r2, [r3, #16]
					home -> homing_first = 1;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	711a      	strb	r2, [r3, #4]
 80033a4:	e031      	b.n	800340a <homing+0x1ba>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 200);
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_ts >= 1000 && home -> homing_ts < 1500){ // wait 1.0 secs
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	4619      	mov	r1, r3
 80033aa:	68b8      	ldr	r0, [r7, #8]
 80033ac:	f003 f92e 	bl	800660c <HAL_GPIO_ReadPin>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d114      	bne.n	80033e0 <homing+0x190>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80033bc:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 80033c0:	f173 0300 	sbcs.w	r3, r3, #0
 80033c4:	d30c      	bcc.n	80033e0 <homing+0x190>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80033cc:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80033d0:	428a      	cmp	r2, r1
 80033d2:	f173 0300 	sbcs.w	r3, r3, #0
 80033d6:	d203      	bcs.n	80033e0 <homing+0x190>
					// Stop
					home -> pwm = 0;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	821a      	strh	r2, [r3, #16]
 80033de:	e014      	b.n	800340a <homing+0x1ba>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_ts >= 1500){ // wait 1.25 secs
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	4619      	mov	r1, r3
 80033e4:	68b8      	ldr	r0, [r7, #8]
 80033e6:	f003 f911 	bl	800660c <HAL_GPIO_ReadPin>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10c      	bne.n	800340a <homing+0x1ba>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80033f6:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80033fa:	428a      	cmp	r2, r1
 80033fc:	f173 0300 	sbcs.w	r3, r3, #0
 8003400:	d303      	bcc.n	800340a <homing+0x1ba>
					// Move lower
					home -> pwm = -6000;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f64e 0290 	movw	r2, #59536	@ 0xe890
 8003408:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -120);
				}
				home -> homing_ts++;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003410:	f112 0801 	adds.w	r8, r2, #1
 8003414:	f143 0900 	adc.w	r9, r3, #0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800341e:	e112      	b.n	8003646 <homing+0x3f6>
			}
			else if(home -> homing_state[1] == 2){
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	785b      	ldrb	r3, [r3, #1]
 8003424:	2b02      	cmp	r3, #2
 8003426:	f040 810e 	bne.w	8003646 <homing+0x3f6>
				if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_first == 1 && home -> homing_sec == 1){
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	4619      	mov	r1, r3
 800342e:	68b8      	ldr	r0, [r7, #8]
 8003430:	f003 f8ec 	bl	800660c <HAL_GPIO_ReadPin>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d121      	bne.n	800347e <homing+0x22e>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	791b      	ldrb	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d11d      	bne.n	800347e <homing+0x22e>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	795b      	ldrb	r3, [r3, #5]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d119      	bne.n	800347e <homing+0x22e>
					home -> pwm = 0;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	821a      	strh	r2, [r3, #16]
					// Reset homing state and other
					home -> homing_ts = 0;
 8003450:	68f9      	ldr	r1, [r7, #12]
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	e9c1 2302 	strd	r2, r3, [r1, #8]
					home -> homing_state[0] = 0;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]
					home -> homing_state[1] = 0;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	705a      	strb	r2, [r3, #1]
					home -> homing_command = 0;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	709a      	strb	r2, [r3, #2]
					home -> homing_first = 0;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	711a      	strb	r2, [r3, #4]
					home -> is_home = 1;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	70da      	strb	r2, [r3, #3]
					return;
 800347c:	e0e3      	b.n	8003646 <homing+0x3f6>
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 1) && (home -> homing_sec == 0)){
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	4619      	mov	r1, r3
 8003482:	68b8      	ldr	r0, [r7, #8]
 8003484:	f003 f8c2 	bl	800660c <HAL_GPIO_ReadPin>
 8003488:	4603      	mov	r3, r0
 800348a:	2b01      	cmp	r3, #1
 800348c:	d130      	bne.n	80034f0 <homing+0x2a0>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	791b      	ldrb	r3, [r3, #4]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d12c      	bne.n	80034f0 <homing+0x2a0>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	795b      	ldrb	r3, [r3, #5]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d128      	bne.n	80034f0 <homing+0x2a0>
					// Stop when proximity was detected
					static uint8_t for_one = 1;
					if(home -> homing_sec == 0 && for_one == 1){
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	795b      	ldrb	r3, [r3, #5]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d110      	bne.n	80034c8 <homing+0x278>
 80034a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003650 <homing+0x400>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d10c      	bne.n	80034c8 <homing+0x278>
						home -> pwm = 0;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	821a      	strh	r2, [r3, #16]
						home -> homing_ts = 0;
 80034b4:	68f9      	ldr	r1, [r7, #12]
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	e9c1 2302 	strd	r2, r3, [r1, #8]
						for_one = 0;
 80034c2:	4b63      	ldr	r3, [pc, #396]	@ (8003650 <homing+0x400>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
					}
					if(home -> homing_ts >= 1000){
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80034ce:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 80034d2:	f173 0300 	sbcs.w	r3, r3, #0
 80034d6:	f0c0 80aa 	bcc.w	800362e <homing+0x3de>
						// Stop for 1 sec then move upper
						home -> pwm = 14000;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 80034e0:	821a      	strh	r2, [r3, #16]
						home -> homing_sec = 1;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	715a      	strb	r2, [r3, #5]
						for_one = 1;
 80034e8:	4b59      	ldr	r3, [pc, #356]	@ (8003650 <homing+0x400>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 1) && (home -> homing_sec == 0)){
 80034ee:	e09e      	b.n	800362e <homing+0x3de>
					}
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 0) && (home -> homing_sec == 0)){
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	4619      	mov	r1, r3
 80034f4:	68b8      	ldr	r0, [r7, #8]
 80034f6:	f003 f889 	bl	800660c <HAL_GPIO_ReadPin>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d11c      	bne.n	800353a <homing+0x2ea>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	791b      	ldrb	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d118      	bne.n	800353a <homing+0x2ea>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	795b      	ldrb	r3, [r3, #5]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d114      	bne.n	800353a <homing+0x2ea>
					// Stop when proximity was detected
					if(home -> homing_ts == 0){
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003516:	4313      	orrs	r3, r2
 8003518:	d102      	bne.n	8003520 <homing+0x2d0>
						home -> pwm = 0;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	821a      	strh	r2, [r3, #16]
					}
					if(home -> homing_ts >= 1000){ // stop 1 secs
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003526:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 800352a:	f173 0300 	sbcs.w	r3, r3, #0
 800352e:	d37f      	bcc.n	8003630 <homing+0x3e0>
						 // Move upper
						home -> pwm = 14000;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 8003536:	821a      	strh	r2, [r3, #16]
					if(home -> homing_ts >= 1000){ // stop 1 secs
 8003538:	e07a      	b.n	8003630 <homing+0x3e0>
					}
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 0) && (home -> homing_sec == 0) && (home -> homing_ts >= 1000)){
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	4619      	mov	r1, r3
 800353e:	68b8      	ldr	r0, [r7, #8]
 8003540:	f003 f864 	bl	800660c <HAL_GPIO_ReadPin>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d113      	bne.n	8003572 <homing+0x322>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	791b      	ldrb	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10f      	bne.n	8003572 <homing+0x322>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	795b      	ldrb	r3, [r3, #5]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <homing+0x322>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003560:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8003564:	f173 0300 	sbcs.w	r3, r3, #0
 8003568:	d303      	bcc.n	8003572 <homing+0x322>
					home -> homing_first = 1;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	711a      	strb	r2, [r3, #4]
 8003570:	e05e      	b.n	8003630 <homing+0x3e0>
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1) && (home -> homing_sec == 0) && home -> homing_ts >= 1500 && home -> homing_ts < 2500){
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	4619      	mov	r1, r3
 8003576:	68b8      	ldr	r0, [r7, #8]
 8003578:	f003 f848 	bl	800660c <HAL_GPIO_ReadPin>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d11d      	bne.n	80035be <homing+0x36e>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	791b      	ldrb	r3, [r3, #4]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d119      	bne.n	80035be <homing+0x36e>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	795b      	ldrb	r3, [r3, #5]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d115      	bne.n	80035be <homing+0x36e>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003598:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800359c:	428a      	cmp	r2, r1
 800359e:	f173 0300 	sbcs.w	r3, r3, #0
 80035a2:	d30c      	bcc.n	80035be <homing+0x36e>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80035aa:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80035ae:	428a      	cmp	r2, r1
 80035b0:	f173 0300 	sbcs.w	r3, r3, #0
 80035b4:	d203      	bcs.n	80035be <homing+0x36e>
					// Move upper for 0.5 sec then stop
					home -> pwm = 0;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	821a      	strh	r2, [r3, #16]
 80035bc:	e038      	b.n	8003630 <homing+0x3e0>
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1) && (home -> homing_sec == 0) && home -> homing_ts >= 2500){ // wait 1.25 secs
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	4619      	mov	r1, r3
 80035c2:	68b8      	ldr	r0, [r7, #8]
 80035c4:	f003 f822 	bl	800660c <HAL_GPIO_ReadPin>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d115      	bne.n	80035fa <homing+0x3aa>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	791b      	ldrb	r3, [r3, #4]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d111      	bne.n	80035fa <homing+0x3aa>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	795b      	ldrb	r3, [r3, #5]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10d      	bne.n	80035fa <homing+0x3aa>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80035e4:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80035e8:	428a      	cmp	r2, r1
 80035ea:	f173 0300 	sbcs.w	r3, r3, #0
 80035ee:	d304      	bcc.n	80035fa <homing+0x3aa>
					// After stop for 1 sec Move lower
					home -> pwm = -6000;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f64e 0290 	movw	r2, #59536	@ 0xe890
 80035f6:	821a      	strh	r2, [r3, #16]
 80035f8:	e01a      	b.n	8003630 <homing+0x3e0>
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 0) && (home -> homing_sec == 0) && home -> homing_ts == 0){
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	4619      	mov	r1, r3
 80035fe:	68b8      	ldr	r0, [r7, #8]
 8003600:	f003 f804 	bl	800660c <HAL_GPIO_ReadPin>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d112      	bne.n	8003630 <homing+0x3e0>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	791b      	ldrb	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10e      	bne.n	8003630 <homing+0x3e0>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	795b      	ldrb	r3, [r3, #5]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <homing+0x3e0>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003620:	4313      	orrs	r3, r2
 8003622:	d105      	bne.n	8003630 <homing+0x3e0>
					home -> pwm = -6000;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f64e 0290 	movw	r2, #59536	@ 0xe890
 800362a:	821a      	strh	r2, [r3, #16]
					return;
 800362c:	e00b      	b.n	8003646 <homing+0x3f6>
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 1) && (home -> homing_sec == 0)){
 800362e:	bf00      	nop
				}
				home -> homing_ts++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003636:	1c54      	adds	r4, r2, #1
 8003638:	f143 0500 	adc.w	r5, r3, #0
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	e9c3 4502 	strd	r4, r5, [r3, #8]
 8003642:	e000      	b.n	8003646 <homing+0x3f6>
			}
		}
	}
	// Nothing happen
	else{
		return;
 8003644:	bf00      	nop
	}
}
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800364e:	bf00      	nop
 8003650:	20000244 	.word	0x20000244

08003654 <Reset_homing>:
void Reset_homing(HOME* home){
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	home -> homing_state[0] = 0;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
	home -> homing_state[1] = 0;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	705a      	strb	r2, [r3, #1]
	home -> homing_command = 0;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	709a      	strb	r2, [r3, #2]
	home -> homing_first = 0;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	711a      	strb	r2, [r3, #4]
	home -> homing_sec = 0;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	715a      	strb	r2, [r3, #5]
	home -> homing_ts = 0;
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	e9c1 2302 	strd	r2, r3, [r1, #8]
	home -> is_home = 0;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	70da      	strb	r2, [r3, #3]
	home -> pwm = 0;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	821a      	strh	r2, [r3, #16]
	home -> state_check = 0;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	719a      	strb	r2, [r3, #6]
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <emer_init>:

void emer_init(EMER* emer){
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
	emer -> emer_state = 0;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003704 <HAL_MspInit+0x44>)
 80036c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003704 <HAL_MspInit+0x44>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80036d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <HAL_MspInit+0x44>)
 80036d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	607b      	str	r3, [r7, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	4b09      	ldr	r3, [pc, #36]	@ (8003704 <HAL_MspInit+0x44>)
 80036e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e2:	4a08      	ldr	r2, [pc, #32]	@ (8003704 <HAL_MspInit+0x44>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ea:	4b06      	ldr	r3, [pc, #24]	@ (8003704 <HAL_MspInit+0x44>)
 80036ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80036f6:	f003 f875 	bl	80067e4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000

08003708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b09e      	sub	sp, #120	@ 0x78
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003720:	f107 0310 	add.w	r3, r7, #16
 8003724:	2254      	movs	r2, #84	@ 0x54
 8003726:	2100      	movs	r1, #0
 8003728:	4618      	mov	r0, r3
 800372a:	f008 f88b 	bl	800b844 <memset>
  if(hadc->Instance==ADC1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003736:	d167      	bne.n	8003808 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003738:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800373c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800373e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003742:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003744:	f107 0310 	add.w	r3, r7, #16
 8003748:	4618      	mov	r0, r3
 800374a:	f003 fd89 	bl	8007260 <HAL_RCCEx_PeriphCLKConfig>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003754:	f7ff fa0e 	bl	8002b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003758:	4b2d      	ldr	r3, [pc, #180]	@ (8003810 <HAL_ADC_MspInit+0x108>)
 800375a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375c:	4a2c      	ldr	r2, [pc, #176]	@ (8003810 <HAL_ADC_MspInit+0x108>)
 800375e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003762:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003764:	4b2a      	ldr	r3, [pc, #168]	@ (8003810 <HAL_ADC_MspInit+0x108>)
 8003766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003768:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003770:	4b27      	ldr	r3, [pc, #156]	@ (8003810 <HAL_ADC_MspInit+0x108>)
 8003772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003774:	4a26      	ldr	r2, [pc, #152]	@ (8003810 <HAL_ADC_MspInit+0x108>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800377c:	4b24      	ldr	r3, [pc, #144]	@ (8003810 <HAL_ADC_MspInit+0x108>)
 800377e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 8003788:	2301      	movs	r3, #1
 800378a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800378c:	2303      	movs	r3, #3
 800378e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003790:	2300      	movs	r3, #0
 8003792:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8003794:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003798:	4619      	mov	r1, r3
 800379a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800379e:	f002 fdb3 	bl	8006308 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80037a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003814 <HAL_ADC_MspInit+0x10c>)
 80037a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003818 <HAL_ADC_MspInit+0x110>)
 80037a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80037a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003814 <HAL_ADC_MspInit+0x10c>)
 80037aa:	2205      	movs	r2, #5
 80037ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037ae:	4b19      	ldr	r3, [pc, #100]	@ (8003814 <HAL_ADC_MspInit+0x10c>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037b4:	4b17      	ldr	r3, [pc, #92]	@ (8003814 <HAL_ADC_MspInit+0x10c>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80037ba:	4b16      	ldr	r3, [pc, #88]	@ (8003814 <HAL_ADC_MspInit+0x10c>)
 80037bc:	2280      	movs	r2, #128	@ 0x80
 80037be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037c0:	4b14      	ldr	r3, [pc, #80]	@ (8003814 <HAL_ADC_MspInit+0x10c>)
 80037c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037c8:	4b12      	ldr	r3, [pc, #72]	@ (8003814 <HAL_ADC_MspInit+0x10c>)
 80037ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80037d0:	4b10      	ldr	r3, [pc, #64]	@ (8003814 <HAL_ADC_MspInit+0x10c>)
 80037d2:	2220      	movs	r2, #32
 80037d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80037d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003814 <HAL_ADC_MspInit+0x10c>)
 80037d8:	2200      	movs	r2, #0
 80037da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80037dc:	480d      	ldr	r0, [pc, #52]	@ (8003814 <HAL_ADC_MspInit+0x10c>)
 80037de:	f002 fa61 	bl	8005ca4 <HAL_DMA_Init>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80037e8:	f7ff f9c4 	bl	8002b74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a09      	ldr	r2, [pc, #36]	@ (8003814 <HAL_ADC_MspInit+0x10c>)
 80037f0:	655a      	str	r2, [r3, #84]	@ 0x54
 80037f2:	4a08      	ldr	r2, [pc, #32]	@ (8003814 <HAL_ADC_MspInit+0x10c>)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80037f8:	2200      	movs	r2, #0
 80037fa:	2100      	movs	r1, #0
 80037fc:	2012      	movs	r0, #18
 80037fe:	f002 fa1c 	bl	8005c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003802:	2012      	movs	r0, #18
 8003804:	f002 fa33 	bl	8005c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003808:	bf00      	nop
 800380a:	3778      	adds	r7, #120	@ 0x78
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40021000 	.word	0x40021000
 8003814:	200007c8 	.word	0x200007c8
 8003818:	40020008 	.word	0x40020008

0800381c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a3c      	ldr	r2, [pc, #240]	@ (800391c <HAL_TIM_Base_MspInit+0x100>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d13f      	bne.n	80038ae <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800382e:	4b3c      	ldr	r3, [pc, #240]	@ (8003920 <HAL_TIM_Base_MspInit+0x104>)
 8003830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003832:	4a3b      	ldr	r2, [pc, #236]	@ (8003920 <HAL_TIM_Base_MspInit+0x104>)
 8003834:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003838:	6613      	str	r3, [r2, #96]	@ 0x60
 800383a:	4b39      	ldr	r3, [pc, #228]	@ (8003920 <HAL_TIM_Base_MspInit+0x104>)
 800383c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel4;
 8003846:	4b37      	ldr	r3, [pc, #220]	@ (8003924 <HAL_TIM_Base_MspInit+0x108>)
 8003848:	4a37      	ldr	r2, [pc, #220]	@ (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 800384a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 800384c:	4b35      	ldr	r3, [pc, #212]	@ (8003924 <HAL_TIM_Base_MspInit+0x108>)
 800384e:	222a      	movs	r2, #42	@ 0x2a
 8003850:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003852:	4b34      	ldr	r3, [pc, #208]	@ (8003924 <HAL_TIM_Base_MspInit+0x108>)
 8003854:	2210      	movs	r2, #16
 8003856:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003858:	4b32      	ldr	r3, [pc, #200]	@ (8003924 <HAL_TIM_Base_MspInit+0x108>)
 800385a:	2200      	movs	r2, #0
 800385c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800385e:	4b31      	ldr	r3, [pc, #196]	@ (8003924 <HAL_TIM_Base_MspInit+0x108>)
 8003860:	2280      	movs	r2, #128	@ 0x80
 8003862:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003864:	4b2f      	ldr	r3, [pc, #188]	@ (8003924 <HAL_TIM_Base_MspInit+0x108>)
 8003866:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800386a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800386c:	4b2d      	ldr	r3, [pc, #180]	@ (8003924 <HAL_TIM_Base_MspInit+0x108>)
 800386e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003872:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003874:	4b2b      	ldr	r3, [pc, #172]	@ (8003924 <HAL_TIM_Base_MspInit+0x108>)
 8003876:	2200      	movs	r2, #0
 8003878:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800387a:	4b2a      	ldr	r3, [pc, #168]	@ (8003924 <HAL_TIM_Base_MspInit+0x108>)
 800387c:	2200      	movs	r2, #0
 800387e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003880:	4828      	ldr	r0, [pc, #160]	@ (8003924 <HAL_TIM_Base_MspInit+0x108>)
 8003882:	f002 fa0f 	bl	8005ca4 <HAL_DMA_Init>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 800388c:	f7ff f972 	bl	8002b74 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a24      	ldr	r2, [pc, #144]	@ (8003924 <HAL_TIM_Base_MspInit+0x108>)
 8003894:	625a      	str	r2, [r3, #36]	@ 0x24
 8003896:	4a23      	ldr	r2, [pc, #140]	@ (8003924 <HAL_TIM_Base_MspInit+0x108>)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800389c:	2200      	movs	r2, #0
 800389e:	2100      	movs	r1, #0
 80038a0:	2019      	movs	r0, #25
 80038a2:	f002 f9ca 	bl	8005c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80038a6:	2019      	movs	r0, #25
 80038a8:	f002 f9e1 	bl	8005c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80038ac:	e032      	b.n	8003914 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM3)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1e      	ldr	r2, [pc, #120]	@ (800392c <HAL_TIM_Base_MspInit+0x110>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d114      	bne.n	80038e2 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038b8:	4b19      	ldr	r3, [pc, #100]	@ (8003920 <HAL_TIM_Base_MspInit+0x104>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038bc:	4a18      	ldr	r2, [pc, #96]	@ (8003920 <HAL_TIM_Base_MspInit+0x104>)
 80038be:	f043 0302 	orr.w	r3, r3, #2
 80038c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80038c4:	4b16      	ldr	r3, [pc, #88]	@ (8003920 <HAL_TIM_Base_MspInit+0x104>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80038d0:	2200      	movs	r2, #0
 80038d2:	2100      	movs	r1, #0
 80038d4:	201d      	movs	r0, #29
 80038d6:	f002 f9b0 	bl	8005c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80038da:	201d      	movs	r0, #29
 80038dc:	f002 f9c7 	bl	8005c6e <HAL_NVIC_EnableIRQ>
}
 80038e0:	e018      	b.n	8003914 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM16)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a12      	ldr	r2, [pc, #72]	@ (8003930 <HAL_TIM_Base_MspInit+0x114>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d113      	bne.n	8003914 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80038ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003920 <HAL_TIM_Base_MspInit+0x104>)
 80038ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003920 <HAL_TIM_Base_MspInit+0x104>)
 80038f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80038f8:	4b09      	ldr	r3, [pc, #36]	@ (8003920 <HAL_TIM_Base_MspInit+0x104>)
 80038fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003904:	2200      	movs	r2, #0
 8003906:	2100      	movs	r1, #0
 8003908:	2019      	movs	r0, #25
 800390a:	f002 f996 	bl	8005c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800390e:	2019      	movs	r0, #25
 8003910:	f002 f9ad 	bl	8005c6e <HAL_NVIC_EnableIRQ>
}
 8003914:	bf00      	nop
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40012c00 	.word	0x40012c00
 8003920:	40021000 	.word	0x40021000
 8003924:	20000b58 	.word	0x20000b58
 8003928:	40020044 	.word	0x40020044
 800392c:	40000400 	.word	0x40000400
 8003930:	40014400 	.word	0x40014400

08003934 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	@ 0x28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393c:	f107 0314 	add.w	r3, r7, #20
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1c      	ldr	r2, [pc, #112]	@ (80039c4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d131      	bne.n	80039ba <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003956:	4b1c      	ldr	r3, [pc, #112]	@ (80039c8 <HAL_TIM_Encoder_MspInit+0x94>)
 8003958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395a:	4a1b      	ldr	r2, [pc, #108]	@ (80039c8 <HAL_TIM_Encoder_MspInit+0x94>)
 800395c:	f043 0304 	orr.w	r3, r3, #4
 8003960:	6593      	str	r3, [r2, #88]	@ 0x58
 8003962:	4b19      	ldr	r3, [pc, #100]	@ (80039c8 <HAL_TIM_Encoder_MspInit+0x94>)
 8003964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396e:	4b16      	ldr	r3, [pc, #88]	@ (80039c8 <HAL_TIM_Encoder_MspInit+0x94>)
 8003970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003972:	4a15      	ldr	r2, [pc, #84]	@ (80039c8 <HAL_TIM_Encoder_MspInit+0x94>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800397a:	4b13      	ldr	r3, [pc, #76]	@ (80039c8 <HAL_TIM_Encoder_MspInit+0x94>)
 800397c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8003986:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800398a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398c:	2302      	movs	r3, #2
 800398e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003990:	2300      	movs	r3, #0
 8003992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003994:	2300      	movs	r3, #0
 8003996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003998:	230a      	movs	r3, #10
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399c:	f107 0314 	add.w	r3, r7, #20
 80039a0:	4619      	mov	r1, r3
 80039a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039a6:	f002 fcaf 	bl	8006308 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80039aa:	2200      	movs	r2, #0
 80039ac:	2100      	movs	r1, #0
 80039ae:	201e      	movs	r0, #30
 80039b0:	f002 f943 	bl	8005c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039b4:	201e      	movs	r0, #30
 80039b6:	f002 f95a 	bl	8005c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80039ba:	bf00      	nop
 80039bc:	3728      	adds	r7, #40	@ 0x28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40000800 	.word	0x40000800
 80039c8:	40021000 	.word	0x40021000

080039cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d4:	f107 030c 	add.w	r3, r7, #12
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	60da      	str	r2, [r3, #12]
 80039e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a11      	ldr	r2, [pc, #68]	@ (8003a30 <HAL_TIM_MspPostInit+0x64>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d11b      	bne.n	8003a26 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ee:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <HAL_TIM_MspPostInit+0x68>)
 80039f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f2:	4a10      	ldr	r2, [pc, #64]	@ (8003a34 <HAL_TIM_MspPostInit+0x68>)
 80039f4:	f043 0304 	orr.w	r3, r3, #4
 80039f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003a34 <HAL_TIM_MspPostInit+0x68>)
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 8003a06:	2301      	movs	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003a16:	2302      	movs	r3, #2
 8003a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 8003a1a:	f107 030c 	add.w	r3, r7, #12
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4805      	ldr	r0, [pc, #20]	@ (8003a38 <HAL_TIM_MspPostInit+0x6c>)
 8003a22:	f002 fc71 	bl	8006308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a26:	bf00      	nop
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40012c00 	.word	0x40012c00
 8003a34:	40021000 	.word	0x40021000
 8003a38:	48000800 	.word	0x48000800

08003a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b09e      	sub	sp, #120	@ 0x78
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a44:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a54:	f107 0310 	add.w	r3, r7, #16
 8003a58:	2254      	movs	r2, #84	@ 0x54
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f007 fef1 	bl	800b844 <memset>
  if(huart->Instance==USART2)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a4d      	ldr	r2, [pc, #308]	@ (8003b9c <HAL_UART_MspInit+0x160>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	f040 8092 	bne.w	8003b92 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a72:	2300      	movs	r3, #0
 8003a74:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a76:	f107 0310 	add.w	r3, r7, #16
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f003 fbf0 	bl	8007260 <HAL_RCCEx_PeriphCLKConfig>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003a86:	f7ff f875 	bl	8002b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a8a:	4b45      	ldr	r3, [pc, #276]	@ (8003ba0 <HAL_UART_MspInit+0x164>)
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8e:	4a44      	ldr	r2, [pc, #272]	@ (8003ba0 <HAL_UART_MspInit+0x164>)
 8003a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a94:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a96:	4b42      	ldr	r3, [pc, #264]	@ (8003ba0 <HAL_UART_MspInit+0x164>)
 8003a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ba0 <HAL_UART_MspInit+0x164>)
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ba0 <HAL_UART_MspInit+0x164>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aae:	4b3c      	ldr	r3, [pc, #240]	@ (8003ba0 <HAL_UART_MspInit+0x164>)
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003aba:	230c      	movs	r3, #12
 8003abc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003aca:	2307      	movs	r3, #7
 8003acc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ace:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ad8:	f002 fc16 	bl	8006308 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003adc:	4b31      	ldr	r3, [pc, #196]	@ (8003ba4 <HAL_UART_MspInit+0x168>)
 8003ade:	4a32      	ldr	r2, [pc, #200]	@ (8003ba8 <HAL_UART_MspInit+0x16c>)
 8003ae0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003ae2:	4b30      	ldr	r3, [pc, #192]	@ (8003ba4 <HAL_UART_MspInit+0x168>)
 8003ae4:	221a      	movs	r2, #26
 8003ae6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8003ba4 <HAL_UART_MspInit+0x168>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aee:	4b2d      	ldr	r3, [pc, #180]	@ (8003ba4 <HAL_UART_MspInit+0x168>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003af4:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba4 <HAL_UART_MspInit+0x168>)
 8003af6:	2280      	movs	r2, #128	@ 0x80
 8003af8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003afa:	4b2a      	ldr	r3, [pc, #168]	@ (8003ba4 <HAL_UART_MspInit+0x168>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b00:	4b28      	ldr	r3, [pc, #160]	@ (8003ba4 <HAL_UART_MspInit+0x168>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003b06:	4b27      	ldr	r3, [pc, #156]	@ (8003ba4 <HAL_UART_MspInit+0x168>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b0c:	4b25      	ldr	r3, [pc, #148]	@ (8003ba4 <HAL_UART_MspInit+0x168>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003b12:	4824      	ldr	r0, [pc, #144]	@ (8003ba4 <HAL_UART_MspInit+0x168>)
 8003b14:	f002 f8c6 	bl	8005ca4 <HAL_DMA_Init>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003b1e:	f7ff f829 	bl	8002b74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba4 <HAL_UART_MspInit+0x168>)
 8003b26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba4 <HAL_UART_MspInit+0x168>)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8003b30:	4b1e      	ldr	r3, [pc, #120]	@ (8003bac <HAL_UART_MspInit+0x170>)
 8003b32:	4a1f      	ldr	r2, [pc, #124]	@ (8003bb0 <HAL_UART_MspInit+0x174>)
 8003b34:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003b36:	4b1d      	ldr	r3, [pc, #116]	@ (8003bac <HAL_UART_MspInit+0x170>)
 8003b38:	221b      	movs	r2, #27
 8003b3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bac <HAL_UART_MspInit+0x170>)
 8003b3e:	2210      	movs	r2, #16
 8003b40:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b42:	4b1a      	ldr	r3, [pc, #104]	@ (8003bac <HAL_UART_MspInit+0x170>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b48:	4b18      	ldr	r3, [pc, #96]	@ (8003bac <HAL_UART_MspInit+0x170>)
 8003b4a:	2280      	movs	r2, #128	@ 0x80
 8003b4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b4e:	4b17      	ldr	r3, [pc, #92]	@ (8003bac <HAL_UART_MspInit+0x170>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b54:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <HAL_UART_MspInit+0x170>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003b5a:	4b14      	ldr	r3, [pc, #80]	@ (8003bac <HAL_UART_MspInit+0x170>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b60:	4b12      	ldr	r3, [pc, #72]	@ (8003bac <HAL_UART_MspInit+0x170>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b66:	4811      	ldr	r0, [pc, #68]	@ (8003bac <HAL_UART_MspInit+0x170>)
 8003b68:	f002 f89c 	bl	8005ca4 <HAL_DMA_Init>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8003b72:	f7fe ffff 	bl	8002b74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a0c      	ldr	r2, [pc, #48]	@ (8003bac <HAL_UART_MspInit+0x170>)
 8003b7a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8003bac <HAL_UART_MspInit+0x170>)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b82:	2200      	movs	r2, #0
 8003b84:	2100      	movs	r1, #0
 8003b86:	2026      	movs	r0, #38	@ 0x26
 8003b88:	f002 f857 	bl	8005c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b8c:	2026      	movs	r0, #38	@ 0x26
 8003b8e:	f002 f86e 	bl	8005c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b92:	bf00      	nop
 8003b94:	3778      	adds	r7, #120	@ 0x78
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40004400 	.word	0x40004400
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	20000c84 	.word	0x20000c84
 8003ba8:	4002001c 	.word	0x4002001c
 8003bac:	20000ce4 	.word	0x20000ce4
 8003bb0:	40020030 	.word	0x40020030

08003bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bb8:	bf00      	nop
 8003bba:	e7fd      	b.n	8003bb8 <NMI_Handler+0x4>

08003bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bc0:	bf00      	nop
 8003bc2:	e7fd      	b.n	8003bc0 <HardFault_Handler+0x4>

08003bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bc8:	bf00      	nop
 8003bca:	e7fd      	b.n	8003bc8 <MemManage_Handler+0x4>

08003bcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bd0:	bf00      	nop
 8003bd2:	e7fd      	b.n	8003bd0 <BusFault_Handler+0x4>

08003bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bd8:	bf00      	nop
 8003bda:	e7fd      	b.n	8003bd8 <UsageFault_Handler+0x4>

08003bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bea:	b480      	push	{r7}
 8003bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c0a:	f000 f8fb 	bl	8003e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c18:	4802      	ldr	r0, [pc, #8]	@ (8003c24 <DMA1_Channel1_IRQHandler+0x10>)
 8003c1a:	f002 fa26 	bl	800606a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200007c8 	.word	0x200007c8

08003c28 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003c2c:	4802      	ldr	r0, [pc, #8]	@ (8003c38 <DMA1_Channel2_IRQHandler+0x10>)
 8003c2e:	f002 fa1c 	bl	800606a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000c84 	.word	0x20000c84

08003c3c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003c40:	4802      	ldr	r0, [pc, #8]	@ (8003c4c <DMA1_Channel3_IRQHandler+0x10>)
 8003c42:	f002 fa12 	bl	800606a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000ce4 	.word	0x20000ce4

08003c50 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003c54:	4802      	ldr	r0, [pc, #8]	@ (8003c60 <DMA1_Channel4_IRQHandler+0x10>)
 8003c56:	f002 fa08 	bl	800606a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000b58 	.word	0x20000b58

08003c64 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003c68:	4802      	ldr	r0, [pc, #8]	@ (8003c74 <ADC1_2_IRQHandler+0x10>)
 8003c6a:	f000 fdb9 	bl	80047e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003c6e:	bf00      	nop
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	2000075c 	.word	0x2000075c

08003c78 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c7c:	4803      	ldr	r0, [pc, #12]	@ (8003c8c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003c7e:	f004 fae8 	bl	8008252 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003c82:	4803      	ldr	r0, [pc, #12]	@ (8003c90 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003c84:	f004 fae5 	bl	8008252 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003c88:	bf00      	nop
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000828 	.word	0x20000828
 8003c90:	20000a8c 	.word	0x20000a8c

08003c94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c98:	4802      	ldr	r0, [pc, #8]	@ (8003ca4 <TIM3_IRQHandler+0x10>)
 8003c9a:	f004 fada 	bl	8008252 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c9e:	bf00      	nop
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200008f4 	.word	0x200008f4

08003ca8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003cac:	4802      	ldr	r0, [pc, #8]	@ (8003cb8 <TIM4_IRQHandler+0x10>)
 8003cae:	f004 fad0 	bl	8008252 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003cb2:	bf00      	nop
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	200009c0 	.word	0x200009c0

08003cbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003cc0:	4802      	ldr	r0, [pc, #8]	@ (8003ccc <USART2_IRQHandler+0x10>)
 8003cc2:	f006 f899 	bl	8009df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003cc6:	bf00      	nop
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000bb8 	.word	0x20000bb8

08003cd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003cd4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003cd8:	f002 fcc8 	bl	800666c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 8003cdc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003ce0:	f002 fcc4 	bl	800666c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ce4:	bf00      	nop
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003cec:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <SystemInit+0x20>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf2:	4a05      	ldr	r2, [pc, #20]	@ (8003d08 <SystemInit+0x20>)
 8003cf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	e000ed00 	.word	0xe000ed00

08003d0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d0c:	480d      	ldr	r0, [pc, #52]	@ (8003d44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d0e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d10:	f7ff ffea 	bl	8003ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d14:	480c      	ldr	r0, [pc, #48]	@ (8003d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d16:	490d      	ldr	r1, [pc, #52]	@ (8003d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <LoopForever+0xe>)
  movs r3, #0
 8003d1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003d1c:	e002      	b.n	8003d24 <LoopCopyDataInit>

08003d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d22:	3304      	adds	r3, #4

08003d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d28:	d3f9      	bcc.n	8003d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8003d58 <LoopForever+0x16>)
  movs r3, #0
 8003d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d30:	e001      	b.n	8003d36 <LoopFillZerobss>

08003d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d34:	3204      	adds	r2, #4

08003d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d38:	d3fb      	bcc.n	8003d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d3a:	f007 fd8b 	bl	800b854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d3e:	f7fd fe9d 	bl	8001a7c <main>

08003d42 <LoopForever>:

LoopForever:
    b LoopForever
 8003d42:	e7fe      	b.n	8003d42 <LoopForever>
  ldr   r0, =_estack
 8003d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d4c:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8003d50:	0800b9f4 	.word	0x0800b9f4
  ldr r2, =_sbss
 8003d54:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8003d58:	200016e0 	.word	0x200016e0

08003d5c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d5c:	e7fe      	b.n	8003d5c <ADC3_IRQHandler>

08003d5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d68:	2003      	movs	r0, #3
 8003d6a:	f001 ff5b 	bl	8005c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f000 f80e 	bl	8003d90 <HAL_InitTick>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	71fb      	strb	r3, [r7, #7]
 8003d7e:	e001      	b.n	8003d84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d80:	f7ff fc9e 	bl	80036c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d84:	79fb      	ldrb	r3, [r7, #7]

}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003d9c:	4b16      	ldr	r3, [pc, #88]	@ (8003df8 <HAL_InitTick+0x68>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d022      	beq.n	8003dea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <HAL_InitTick+0x6c>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4b13      	ldr	r3, [pc, #76]	@ (8003df8 <HAL_InitTick+0x68>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003db0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db8:	4618      	mov	r0, r3
 8003dba:	f001 ff66 	bl	8005c8a <HAL_SYSTICK_Config>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10f      	bne.n	8003de4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b0f      	cmp	r3, #15
 8003dc8:	d809      	bhi.n	8003dde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dca:	2200      	movs	r2, #0
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd2:	f001 ff32 	bl	8005c3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8003e00 <HAL_InitTick+0x70>)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	e007      	b.n	8003dee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
 8003de2:	e004      	b.n	8003dee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
 8003de8:	e001      	b.n	8003dee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20000250 	.word	0x20000250
 8003dfc:	20000248 	.word	0x20000248
 8003e00:	2000024c 	.word	0x2000024c

08003e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e08:	4b05      	ldr	r3, [pc, #20]	@ (8003e20 <HAL_IncTick+0x1c>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4b05      	ldr	r3, [pc, #20]	@ (8003e24 <HAL_IncTick+0x20>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4413      	add	r3, r2
 8003e12:	4a03      	ldr	r2, [pc, #12]	@ (8003e20 <HAL_IncTick+0x1c>)
 8003e14:	6013      	str	r3, [r2, #0]
}
 8003e16:	bf00      	nop
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	200016dc 	.word	0x200016dc
 8003e24:	20000250 	.word	0x20000250

08003e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e2c:	4b03      	ldr	r3, [pc, #12]	@ (8003e3c <HAL_GetTick+0x14>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	200016dc 	.word	0x200016dc

08003e40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	609a      	str	r2, [r3, #8]
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3360      	adds	r3, #96	@ 0x60
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4b08      	ldr	r3, [pc, #32]	@ (8003eec <LL_ADC_SetOffset+0x44>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003ee0:	bf00      	nop
 8003ee2:	371c      	adds	r7, #28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	03fff000 	.word	0x03fff000

08003ef0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3360      	adds	r3, #96	@ 0x60
 8003efe:	461a      	mov	r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	3360      	adds	r3, #96	@ 0x60
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b087      	sub	sp, #28
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3360      	adds	r3, #96	@ 0x60
 8003f62:	461a      	mov	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3360      	adds	r3, #96	@ 0x60
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	615a      	str	r2, [r3, #20]
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800400a:	b480      	push	{r7}
 800400c:	b087      	sub	sp, #28
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3330      	adds	r3, #48	@ 0x30
 800401a:	461a      	mov	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	4413      	add	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	211f      	movs	r1, #31
 8004036:	fa01 f303 	lsl.w	r3, r1, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	401a      	ands	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	0e9b      	lsrs	r3, r3, #26
 8004042:	f003 011f 	and.w	r1, r3, #31
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	fa01 f303 	lsl.w	r3, r1, r3
 8004050:	431a      	orrs	r2, r3
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004056:	bf00      	nop
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800406e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3314      	adds	r3, #20
 8004098:	461a      	mov	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	0e5b      	lsrs	r3, r3, #25
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	4413      	add	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	0d1b      	lsrs	r3, r3, #20
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	2107      	movs	r1, #7
 80040b6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ba:	43db      	mvns	r3, r3
 80040bc:	401a      	ands	r2, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	0d1b      	lsrs	r3, r3, #20
 80040c2:	f003 031f 	and.w	r3, r3, #31
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	fa01 f303 	lsl.w	r3, r1, r3
 80040cc:	431a      	orrs	r2, r3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f8:	43db      	mvns	r3, r3
 80040fa:	401a      	ands	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f003 0318 	and.w	r3, r3, #24
 8004102:	4908      	ldr	r1, [pc, #32]	@ (8004124 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004104:	40d9      	lsrs	r1, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	400b      	ands	r3, r1
 800410a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410e:	431a      	orrs	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	0007ffff 	.word	0x0007ffff

08004128 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 031f 	and.w	r3, r3, #31
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004170:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6093      	str	r3, [r2, #8]
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004194:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004198:	d101      	bne.n	800419e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80041bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80041c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041e8:	d101      	bne.n	80041ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800420c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004210:	f043 0201 	orr.w	r2, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <LL_ADC_IsEnabled+0x18>
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <LL_ADC_IsEnabled+0x1a>
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800425a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800425e:	f043 0204 	orr.w	r2, r3, #4
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b04      	cmp	r3, #4
 8004284:	d101      	bne.n	800428a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d101      	bne.n	80042b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042c0:	b590      	push	{r4, r7, lr}
 80042c2:	b089      	sub	sp, #36	@ 0x24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e1a9      	b.n	800462e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff fa0d 	bl	8003708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff ff3f 	bl	8004184 <LL_ADC_IsDeepPowerDownEnabled>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d004      	beq.n	8004316 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ff25 	bl	8004160 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff ff5a 	bl	80041d4 <LL_ADC_IsInternalRegulatorEnabled>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d115      	bne.n	8004352 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff ff3e 	bl	80041ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004330:	4b9c      	ldr	r3, [pc, #624]	@ (80045a4 <HAL_ADC_Init+0x2e4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	099b      	lsrs	r3, r3, #6
 8004336:	4a9c      	ldr	r2, [pc, #624]	@ (80045a8 <HAL_ADC_Init+0x2e8>)
 8004338:	fba2 2303 	umull	r2, r3, r2, r3
 800433c:	099b      	lsrs	r3, r3, #6
 800433e:	3301      	adds	r3, #1
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004344:	e002      	b.n	800434c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3b01      	subs	r3, #1
 800434a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f9      	bne.n	8004346 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff ff3c 	bl	80041d4 <LL_ADC_IsInternalRegulatorEnabled>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10d      	bne.n	800437e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004366:	f043 0210 	orr.w	r2, r3, #16
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff ff75 	bl	8004272 <LL_ADC_REG_IsConversionOngoing>
 8004388:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b00      	cmp	r3, #0
 8004394:	f040 8142 	bne.w	800461c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 813e 	bne.w	800461c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80043a8:	f043 0202 	orr.w	r2, r3, #2
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff ff35 	bl	8004224 <LL_ADC_IsEnabled>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d141      	bne.n	8004444 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043c8:	d004      	beq.n	80043d4 <HAL_ADC_Init+0x114>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a77      	ldr	r2, [pc, #476]	@ (80045ac <HAL_ADC_Init+0x2ec>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d10f      	bne.n	80043f4 <HAL_ADC_Init+0x134>
 80043d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80043d8:	f7ff ff24 	bl	8004224 <LL_ADC_IsEnabled>
 80043dc:	4604      	mov	r4, r0
 80043de:	4873      	ldr	r0, [pc, #460]	@ (80045ac <HAL_ADC_Init+0x2ec>)
 80043e0:	f7ff ff20 	bl	8004224 <LL_ADC_IsEnabled>
 80043e4:	4603      	mov	r3, r0
 80043e6:	4323      	orrs	r3, r4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e012      	b.n	800441a <HAL_ADC_Init+0x15a>
 80043f4:	486e      	ldr	r0, [pc, #440]	@ (80045b0 <HAL_ADC_Init+0x2f0>)
 80043f6:	f7ff ff15 	bl	8004224 <LL_ADC_IsEnabled>
 80043fa:	4604      	mov	r4, r0
 80043fc:	486d      	ldr	r0, [pc, #436]	@ (80045b4 <HAL_ADC_Init+0x2f4>)
 80043fe:	f7ff ff11 	bl	8004224 <LL_ADC_IsEnabled>
 8004402:	4603      	mov	r3, r0
 8004404:	431c      	orrs	r4, r3
 8004406:	486c      	ldr	r0, [pc, #432]	@ (80045b8 <HAL_ADC_Init+0x2f8>)
 8004408:	f7ff ff0c 	bl	8004224 <LL_ADC_IsEnabled>
 800440c:	4603      	mov	r3, r0
 800440e:	4323      	orrs	r3, r4
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf0c      	ite	eq
 8004414:	2301      	moveq	r3, #1
 8004416:	2300      	movne	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d012      	beq.n	8004444 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004426:	d004      	beq.n	8004432 <HAL_ADC_Init+0x172>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a5f      	ldr	r2, [pc, #380]	@ (80045ac <HAL_ADC_Init+0x2ec>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d101      	bne.n	8004436 <HAL_ADC_Init+0x176>
 8004432:	4a62      	ldr	r2, [pc, #392]	@ (80045bc <HAL_ADC_Init+0x2fc>)
 8004434:	e000      	b.n	8004438 <HAL_ADC_Init+0x178>
 8004436:	4a62      	ldr	r2, [pc, #392]	@ (80045c0 <HAL_ADC_Init+0x300>)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f7ff fcfe 	bl	8003e40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	7f5b      	ldrb	r3, [r3, #29]
 8004448:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800444e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004454:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800445a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004462:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004464:	4313      	orrs	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800446e:	2b01      	cmp	r3, #1
 8004470:	d106      	bne.n	8004480 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004476:	3b01      	subs	r3, #1
 8004478:	045b      	lsls	r3, r3, #17
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4313      	orrs	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004494:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4313      	orrs	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	4b48      	ldr	r3, [pc, #288]	@ (80045c4 <HAL_ADC_Init+0x304>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	69b9      	ldr	r1, [r7, #24]
 80044ac:	430b      	orrs	r3, r1
 80044ae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fee4 	bl	8004298 <LL_ADC_INJ_IsConversionOngoing>
 80044d0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d17f      	bne.n	80045d8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d17c      	bne.n	80045d8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80044e2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80044ea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044fa:	f023 0302 	bic.w	r3, r3, #2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	69b9      	ldr	r1, [r7, #24]
 8004504:	430b      	orrs	r3, r1
 8004506:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d017      	beq.n	8004540 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800451e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004528:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800452c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6911      	ldr	r1, [r2, #16]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	430b      	orrs	r3, r1
 800453a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800453e:	e013      	b.n	8004568 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800454e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004560:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004564:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800456e:	2b01      	cmp	r3, #1
 8004570:	d12a      	bne.n	80045c8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800457c:	f023 0304 	bic.w	r3, r3, #4
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004588:	4311      	orrs	r1, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800458e:	4311      	orrs	r1, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004594:	430a      	orrs	r2, r1
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	611a      	str	r2, [r3, #16]
 80045a2:	e019      	b.n	80045d8 <HAL_ADC_Init+0x318>
 80045a4:	20000248 	.word	0x20000248
 80045a8:	053e2d63 	.word	0x053e2d63
 80045ac:	50000100 	.word	0x50000100
 80045b0:	50000400 	.word	0x50000400
 80045b4:	50000500 	.word	0x50000500
 80045b8:	50000600 	.word	0x50000600
 80045bc:	50000300 	.word	0x50000300
 80045c0:	50000700 	.word	0x50000700
 80045c4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d10c      	bne.n	80045fa <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e6:	f023 010f 	bic.w	r1, r3, #15
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	1e5a      	subs	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80045f8:	e007      	b.n	800460a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 020f 	bic.w	r2, r2, #15
 8004608:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460e:	f023 0303 	bic.w	r3, r3, #3
 8004612:	f043 0201 	orr.w	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	65da      	str	r2, [r3, #92]	@ 0x5c
 800461a:	e007      	b.n	800462c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004620:	f043 0210 	orr.w	r2, r3, #16
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800462c:	7ffb      	ldrb	r3, [r7, #31]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3724      	adds	r7, #36	@ 0x24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd90      	pop	{r4, r7, pc}
 8004636:	bf00      	nop

08004638 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800464c:	d004      	beq.n	8004658 <HAL_ADC_Start_DMA+0x20>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a5a      	ldr	r2, [pc, #360]	@ (80047bc <HAL_ADC_Start_DMA+0x184>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d101      	bne.n	800465c <HAL_ADC_Start_DMA+0x24>
 8004658:	4b59      	ldr	r3, [pc, #356]	@ (80047c0 <HAL_ADC_Start_DMA+0x188>)
 800465a:	e000      	b.n	800465e <HAL_ADC_Start_DMA+0x26>
 800465c:	4b59      	ldr	r3, [pc, #356]	@ (80047c4 <HAL_ADC_Start_DMA+0x18c>)
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fd62 	bl	8004128 <LL_ADC_GetMultimode>
 8004664:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fe01 	bl	8004272 <LL_ADC_REG_IsConversionOngoing>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	f040 809b 	bne.w	80047ae <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_ADC_Start_DMA+0x4e>
 8004682:	2302      	movs	r3, #2
 8004684:	e096      	b.n	80047b4 <HAL_ADC_Start_DMA+0x17c>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a4d      	ldr	r2, [pc, #308]	@ (80047c8 <HAL_ADC_Start_DMA+0x190>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d008      	beq.n	80046aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b05      	cmp	r3, #5
 80046a2:	d002      	beq.n	80046aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	2b09      	cmp	r3, #9
 80046a8:	d17a      	bne.n	80047a0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 ff60 	bl	8005570 <ADC_Enable>
 80046b0:	4603      	mov	r3, r0
 80046b2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d16d      	bne.n	8004796 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a3a      	ldr	r2, [pc, #232]	@ (80047bc <HAL_ADC_Start_DMA+0x184>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d009      	beq.n	80046ec <HAL_ADC_Start_DMA+0xb4>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a3b      	ldr	r2, [pc, #236]	@ (80047cc <HAL_ADC_Start_DMA+0x194>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d002      	beq.n	80046e8 <HAL_ADC_Start_DMA+0xb0>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	e003      	b.n	80046f0 <HAL_ADC_Start_DMA+0xb8>
 80046e8:	4b39      	ldr	r3, [pc, #228]	@ (80047d0 <HAL_ADC_Start_DMA+0x198>)
 80046ea:	e001      	b.n	80046f0 <HAL_ADC_Start_DMA+0xb8>
 80046ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d002      	beq.n	80046fe <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d105      	bne.n	800470a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004702:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d006      	beq.n	8004724 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800471a:	f023 0206 	bic.w	r2, r3, #6
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	661a      	str	r2, [r3, #96]	@ 0x60
 8004722:	e002      	b.n	800472a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472e:	4a29      	ldr	r2, [pc, #164]	@ (80047d4 <HAL_ADC_Start_DMA+0x19c>)
 8004730:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004736:	4a28      	ldr	r2, [pc, #160]	@ (80047d8 <HAL_ADC_Start_DMA+0x1a0>)
 8004738:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473e:	4a27      	ldr	r2, [pc, #156]	@ (80047dc <HAL_ADC_Start_DMA+0x1a4>)
 8004740:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	221c      	movs	r2, #28
 8004748:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0210 	orr.w	r2, r2, #16
 8004760:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3340      	adds	r3, #64	@ 0x40
 800477c:	4619      	mov	r1, r3
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f001 fb37 	bl	8005df4 <HAL_DMA_Start_IT>
 8004786:	4603      	mov	r3, r0
 8004788:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fd5b 	bl	800424a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004794:	e00d      	b.n	80047b2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800479e:	e008      	b.n	80047b2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80047ac:	e001      	b.n	80047b2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
 80047b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80047b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	50000100 	.word	0x50000100
 80047c0:	50000300 	.word	0x50000300
 80047c4:	50000700 	.word	0x50000700
 80047c8:	50000600 	.word	0x50000600
 80047cc:	50000500 	.word	0x50000500
 80047d0:	50000400 	.word	0x50000400
 80047d4:	0800569d 	.word	0x0800569d
 80047d8:	08005775 	.word	0x08005775
 80047dc:	08005791 	.word	0x08005791

080047e0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	@ 0x28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80047e8:	2300      	movs	r3, #0
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004804:	d004      	beq.n	8004810 <HAL_ADC_IRQHandler+0x30>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a8e      	ldr	r2, [pc, #568]	@ (8004a44 <HAL_ADC_IRQHandler+0x264>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d101      	bne.n	8004814 <HAL_ADC_IRQHandler+0x34>
 8004810:	4b8d      	ldr	r3, [pc, #564]	@ (8004a48 <HAL_ADC_IRQHandler+0x268>)
 8004812:	e000      	b.n	8004816 <HAL_ADC_IRQHandler+0x36>
 8004814:	4b8d      	ldr	r3, [pc, #564]	@ (8004a4c <HAL_ADC_IRQHandler+0x26c>)
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fc86 	bl	8004128 <LL_ADC_GetMultimode>
 800481c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d017      	beq.n	8004858 <HAL_ADC_IRQHandler+0x78>
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d012      	beq.n	8004858 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	2b00      	cmp	r3, #0
 800483c:	d105      	bne.n	800484a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004842:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f001 f808 	bl	8005860 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2202      	movs	r2, #2
 8004856:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d004      	beq.n	800486c <HAL_ADC_IRQHandler+0x8c>
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10b      	bne.n	8004884 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8094 	beq.w	80049a0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 808e 	beq.w	80049a0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004894:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fb9f 	bl	8003fe4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d072      	beq.n	8004992 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a64      	ldr	r2, [pc, #400]	@ (8004a44 <HAL_ADC_IRQHandler+0x264>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d009      	beq.n	80048ca <HAL_ADC_IRQHandler+0xea>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a65      	ldr	r2, [pc, #404]	@ (8004a50 <HAL_ADC_IRQHandler+0x270>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d002      	beq.n	80048c6 <HAL_ADC_IRQHandler+0xe6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	e003      	b.n	80048ce <HAL_ADC_IRQHandler+0xee>
 80048c6:	4b63      	ldr	r3, [pc, #396]	@ (8004a54 <HAL_ADC_IRQHandler+0x274>)
 80048c8:	e001      	b.n	80048ce <HAL_ADC_IRQHandler+0xee>
 80048ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d008      	beq.n	80048e8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b05      	cmp	r3, #5
 80048e0:	d002      	beq.n	80048e8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b09      	cmp	r3, #9
 80048e6:	d104      	bne.n	80048f2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	623b      	str	r3, [r7, #32]
 80048f0:	e014      	b.n	800491c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a53      	ldr	r2, [pc, #332]	@ (8004a44 <HAL_ADC_IRQHandler+0x264>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d009      	beq.n	8004910 <HAL_ADC_IRQHandler+0x130>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a53      	ldr	r2, [pc, #332]	@ (8004a50 <HAL_ADC_IRQHandler+0x270>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d002      	beq.n	800490c <HAL_ADC_IRQHandler+0x12c>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	e003      	b.n	8004914 <HAL_ADC_IRQHandler+0x134>
 800490c:	4b51      	ldr	r3, [pc, #324]	@ (8004a54 <HAL_ADC_IRQHandler+0x274>)
 800490e:	e001      	b.n	8004914 <HAL_ADC_IRQHandler+0x134>
 8004910:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004914:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d135      	bne.n	8004992 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b08      	cmp	r3, #8
 8004932:	d12e      	bne.n	8004992 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fc9a 	bl	8004272 <LL_ADC_REG_IsConversionOngoing>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d11a      	bne.n	800497a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 020c 	bic.w	r2, r2, #12
 8004952:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004958:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004964:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d112      	bne.n	8004992 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004970:	f043 0201 	orr.w	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004978:	e00b      	b.n	8004992 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497e:	f043 0210 	orr.w	r2, r3, #16
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800498a:	f043 0201 	orr.w	r2, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f984 	bl	8004ca0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	220c      	movs	r2, #12
 800499e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d004      	beq.n	80049b4 <HAL_ADC_IRQHandler+0x1d4>
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10b      	bne.n	80049cc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 80b3 	beq.w	8004b26 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 80ad 	beq.w	8004b26 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049dc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff fb3a 	bl	8004062 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80049ee:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff faf5 	bl	8003fe4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80049fa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a10      	ldr	r2, [pc, #64]	@ (8004a44 <HAL_ADC_IRQHandler+0x264>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d009      	beq.n	8004a1a <HAL_ADC_IRQHandler+0x23a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a11      	ldr	r2, [pc, #68]	@ (8004a50 <HAL_ADC_IRQHandler+0x270>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d002      	beq.n	8004a16 <HAL_ADC_IRQHandler+0x236>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	e003      	b.n	8004a1e <HAL_ADC_IRQHandler+0x23e>
 8004a16:	4b0f      	ldr	r3, [pc, #60]	@ (8004a54 <HAL_ADC_IRQHandler+0x274>)
 8004a18:	e001      	b.n	8004a1e <HAL_ADC_IRQHandler+0x23e>
 8004a1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6812      	ldr	r2, [r2, #0]
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d008      	beq.n	8004a38 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2b06      	cmp	r3, #6
 8004a30:	d002      	beq.n	8004a38 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2b07      	cmp	r3, #7
 8004a36:	d10f      	bne.n	8004a58 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	623b      	str	r3, [r7, #32]
 8004a40:	e01f      	b.n	8004a82 <HAL_ADC_IRQHandler+0x2a2>
 8004a42:	bf00      	nop
 8004a44:	50000100 	.word	0x50000100
 8004a48:	50000300 	.word	0x50000300
 8004a4c:	50000700 	.word	0x50000700
 8004a50:	50000500 	.word	0x50000500
 8004a54:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a8b      	ldr	r2, [pc, #556]	@ (8004c8c <HAL_ADC_IRQHandler+0x4ac>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d009      	beq.n	8004a76 <HAL_ADC_IRQHandler+0x296>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a8a      	ldr	r2, [pc, #552]	@ (8004c90 <HAL_ADC_IRQHandler+0x4b0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d002      	beq.n	8004a72 <HAL_ADC_IRQHandler+0x292>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	e003      	b.n	8004a7a <HAL_ADC_IRQHandler+0x29a>
 8004a72:	4b88      	ldr	r3, [pc, #544]	@ (8004c94 <HAL_ADC_IRQHandler+0x4b4>)
 8004a74:	e001      	b.n	8004a7a <HAL_ADC_IRQHandler+0x29a>
 8004a76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004a7a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d047      	beq.n	8004b18 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d007      	beq.n	8004aa2 <HAL_ADC_IRQHandler+0x2c2>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d03f      	beq.n	8004b18 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d13a      	bne.n	8004b18 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aac:	2b40      	cmp	r3, #64	@ 0x40
 8004aae:	d133      	bne.n	8004b18 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d12e      	bne.n	8004b18 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff fbea 	bl	8004298 <LL_ADC_INJ_IsConversionOngoing>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d11a      	bne.n	8004b00 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ad8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ade:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d112      	bne.n	8004b18 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af6:	f043 0201 	orr.w	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004afe:	e00b      	b.n	8004b18 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b04:	f043 0210 	orr.w	r2, r3, #16
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b10:	f043 0201 	orr.w	r2, r3, #1
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fe79 	bl	8005810 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2260      	movs	r2, #96	@ 0x60
 8004b24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d011      	beq.n	8004b54 <HAL_ADC_IRQHandler+0x374>
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00c      	beq.n	8004b54 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f8be 	bl	8004cc8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2280      	movs	r2, #128	@ 0x80
 8004b52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d012      	beq.n	8004b84 <HAL_ADC_IRQHandler+0x3a4>
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00d      	beq.n	8004b84 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fe5f 	bl	8005838 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d012      	beq.n	8004bb4 <HAL_ADC_IRQHandler+0x3d4>
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00d      	beq.n	8004bb4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fe51 	bl	800584c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d043      	beq.n	8004c46 <HAL_ADC_IRQHandler+0x466>
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d03e      	beq.n	8004c46 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd4:	e021      	b.n	8004c1a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d015      	beq.n	8004c08 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004be4:	d004      	beq.n	8004bf0 <HAL_ADC_IRQHandler+0x410>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a28      	ldr	r2, [pc, #160]	@ (8004c8c <HAL_ADC_IRQHandler+0x4ac>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d101      	bne.n	8004bf4 <HAL_ADC_IRQHandler+0x414>
 8004bf0:	4b29      	ldr	r3, [pc, #164]	@ (8004c98 <HAL_ADC_IRQHandler+0x4b8>)
 8004bf2:	e000      	b.n	8004bf6 <HAL_ADC_IRQHandler+0x416>
 8004bf4:	4b29      	ldr	r3, [pc, #164]	@ (8004c9c <HAL_ADC_IRQHandler+0x4bc>)
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff faa4 	bl	8004144 <LL_ADC_GetMultiDMATransfer>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004c02:	2301      	movs	r3, #1
 8004c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c06:	e008      	b.n	8004c1a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004c16:	2301      	movs	r3, #1
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d10e      	bne.n	8004c3e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c24:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c30:	f043 0202 	orr.w	r2, r3, #2
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f84f 	bl	8004cdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2210      	movs	r2, #16
 8004c44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d018      	beq.n	8004c82 <HAL_ADC_IRQHandler+0x4a2>
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d013      	beq.n	8004c82 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c5e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c6a:	f043 0208 	orr.w	r2, r3, #8
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c7a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fdd1 	bl	8005824 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004c82:	bf00      	nop
 8004c84:	3728      	adds	r7, #40	@ 0x28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	50000100 	.word	0x50000100
 8004c90:	50000500 	.word	0x50000500
 8004c94:	50000400 	.word	0x50000400
 8004c98:	50000300 	.word	0x50000300
 8004c9c:	50000700 	.word	0x50000700

08004ca0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b0b6      	sub	sp, #216	@ 0xd8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d102      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x24>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	f000 bc13 	b.w	800553a <HAL_ADC_ConfigChannel+0x84a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff faa6 	bl	8004272 <LL_ADC_REG_IsConversionOngoing>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f040 83f3 	bne.w	8005514 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6859      	ldr	r1, [r3, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f7ff f965 	bl	800400a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fa94 	bl	8004272 <LL_ADC_REG_IsConversionOngoing>
 8004d4a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff faa0 	bl	8004298 <LL_ADC_INJ_IsConversionOngoing>
 8004d58:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f040 81d9 	bne.w	8005118 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f040 81d4 	bne.w	8005118 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d78:	d10f      	bne.n	8004d9a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2200      	movs	r2, #0
 8004d84:	4619      	mov	r1, r3
 8004d86:	f7ff f97f 	bl	8004088 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff f913 	bl	8003fbe <LL_ADC_SetSamplingTimeCommonConfig>
 8004d98:	e00e      	b.n	8004db8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6819      	ldr	r1, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	461a      	mov	r2, r3
 8004da8:	f7ff f96e 	bl	8004088 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2100      	movs	r1, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff f903 	bl	8003fbe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	695a      	ldr	r2, [r3, #20]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	08db      	lsrs	r3, r3, #3
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d022      	beq.n	8004e20 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6919      	ldr	r1, [r3, #16]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004dea:	f7ff f85d 	bl	8003ea8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6919      	ldr	r1, [r3, #16]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f7ff f8a9 	bl	8003f52 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6818      	ldr	r0, [r3, #0]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d102      	bne.n	8004e16 <HAL_ADC_ConfigChannel+0x126>
 8004e10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e14:	e000      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x128>
 8004e16:	2300      	movs	r3, #0
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f7ff f8b5 	bl	8003f88 <LL_ADC_SetOffsetSaturation>
 8004e1e:	e17b      	b.n	8005118 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff f862 	bl	8003ef0 <LL_ADC_GetOffsetChannel>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10a      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x15c>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff f857 	bl	8003ef0 <LL_ADC_GetOffsetChannel>
 8004e42:	4603      	mov	r3, r0
 8004e44:	0e9b      	lsrs	r3, r3, #26
 8004e46:	f003 021f 	and.w	r2, r3, #31
 8004e4a:	e01e      	b.n	8004e8a <HAL_ADC_ConfigChannel+0x19a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2100      	movs	r1, #0
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff f84c 	bl	8003ef0 <LL_ADC_GetOffsetChannel>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004e62:	fa93 f3a3 	rbit	r3, r3
 8004e66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004e7a:	2320      	movs	r3, #32
 8004e7c:	e004      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004e7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e82:	fab3 f383 	clz	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <HAL_ADC_ConfigChannel+0x1b2>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	0e9b      	lsrs	r3, r3, #26
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	e018      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x1e4>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004eae:	fa93 f3a3 	rbit	r3, r3
 8004eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004eba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004ebe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004ec6:	2320      	movs	r3, #32
 8004ec8:	e004      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004eca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ece:	fab3 f383 	clz	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d106      	bne.n	8004ee6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2200      	movs	r2, #0
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff f81b 	bl	8003f1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2101      	movs	r1, #1
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fe ffff 	bl	8003ef0 <LL_ADC_GetOffsetChannel>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <HAL_ADC_ConfigChannel+0x222>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2101      	movs	r1, #1
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe fff4 	bl	8003ef0 <LL_ADC_GetOffsetChannel>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	0e9b      	lsrs	r3, r3, #26
 8004f0c:	f003 021f 	and.w	r2, r3, #31
 8004f10:	e01e      	b.n	8004f50 <HAL_ADC_ConfigChannel+0x260>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2101      	movs	r1, #1
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fe ffe9 	bl	8003ef0 <LL_ADC_GetOffsetChannel>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f28:	fa93 f3a3 	rbit	r3, r3
 8004f2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004f30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004f38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004f40:	2320      	movs	r3, #32
 8004f42:	e004      	b.n	8004f4e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004f44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f48:	fab3 f383 	clz	r3, r3
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d105      	bne.n	8004f68 <HAL_ADC_ConfigChannel+0x278>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	0e9b      	lsrs	r3, r3, #26
 8004f62:	f003 031f 	and.w	r3, r3, #31
 8004f66:	e018      	b.n	8004f9a <HAL_ADC_ConfigChannel+0x2aa>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f74:	fa93 f3a3 	rbit	r3, r3
 8004f78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004f7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004f8c:	2320      	movs	r3, #32
 8004f8e:	e004      	b.n	8004f9a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f94:	fab3 f383 	clz	r3, r3
 8004f98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d106      	bne.n	8004fac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fe ffb8 	bl	8003f1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2102      	movs	r1, #2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fe ff9c 	bl	8003ef0 <LL_ADC_GetOffsetChannel>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10a      	bne.n	8004fd8 <HAL_ADC_ConfigChannel+0x2e8>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fe ff91 	bl	8003ef0 <LL_ADC_GetOffsetChannel>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	0e9b      	lsrs	r3, r3, #26
 8004fd2:	f003 021f 	and.w	r2, r3, #31
 8004fd6:	e01e      	b.n	8005016 <HAL_ADC_ConfigChannel+0x326>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2102      	movs	r1, #2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fe ff86 	bl	8003ef0 <LL_ADC_GetOffsetChannel>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fee:	fa93 f3a3 	rbit	r3, r3
 8004ff2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ffa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004ffe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005006:	2320      	movs	r3, #32
 8005008:	e004      	b.n	8005014 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800500a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800500e:	fab3 f383 	clz	r3, r3
 8005012:	b2db      	uxtb	r3, r3
 8005014:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800501e:	2b00      	cmp	r3, #0
 8005020:	d105      	bne.n	800502e <HAL_ADC_ConfigChannel+0x33e>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	0e9b      	lsrs	r3, r3, #26
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	e016      	b.n	800505c <HAL_ADC_ConfigChannel+0x36c>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005036:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800503a:	fa93 f3a3 	rbit	r3, r3
 800503e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005040:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005042:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005046:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800504e:	2320      	movs	r3, #32
 8005050:	e004      	b.n	800505c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005052:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005056:	fab3 f383 	clz	r3, r3
 800505a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800505c:	429a      	cmp	r2, r3
 800505e:	d106      	bne.n	800506e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2200      	movs	r2, #0
 8005066:	2102      	movs	r1, #2
 8005068:	4618      	mov	r0, r3
 800506a:	f7fe ff57 	bl	8003f1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2103      	movs	r1, #3
 8005074:	4618      	mov	r0, r3
 8005076:	f7fe ff3b 	bl	8003ef0 <LL_ADC_GetOffsetChannel>
 800507a:	4603      	mov	r3, r0
 800507c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10a      	bne.n	800509a <HAL_ADC_ConfigChannel+0x3aa>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2103      	movs	r1, #3
 800508a:	4618      	mov	r0, r3
 800508c:	f7fe ff30 	bl	8003ef0 <LL_ADC_GetOffsetChannel>
 8005090:	4603      	mov	r3, r0
 8005092:	0e9b      	lsrs	r3, r3, #26
 8005094:	f003 021f 	and.w	r2, r3, #31
 8005098:	e017      	b.n	80050ca <HAL_ADC_ConfigChannel+0x3da>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2103      	movs	r1, #3
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fe ff25 	bl	8003ef0 <LL_ADC_GetOffsetChannel>
 80050a6:	4603      	mov	r3, r0
 80050a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050ac:	fa93 f3a3 	rbit	r3, r3
 80050b0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80050b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050b4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80050b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80050bc:	2320      	movs	r3, #32
 80050be:	e003      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80050c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050c2:	fab3 f383 	clz	r3, r3
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d105      	bne.n	80050e2 <HAL_ADC_ConfigChannel+0x3f2>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	0e9b      	lsrs	r3, r3, #26
 80050dc:	f003 031f 	and.w	r3, r3, #31
 80050e0:	e011      	b.n	8005106 <HAL_ADC_ConfigChannel+0x416>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050ea:	fa93 f3a3 	rbit	r3, r3
 80050ee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80050f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80050f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80050fa:	2320      	movs	r3, #32
 80050fc:	e003      	b.n	8005106 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80050fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005100:	fab3 f383 	clz	r3, r3
 8005104:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005106:	429a      	cmp	r2, r3
 8005108:	d106      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2200      	movs	r2, #0
 8005110:	2103      	movs	r1, #3
 8005112:	4618      	mov	r0, r3
 8005114:	f7fe ff02 	bl	8003f1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff f881 	bl	8004224 <LL_ADC_IsEnabled>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	f040 813d 	bne.w	80053a4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6819      	ldr	r1, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	461a      	mov	r2, r3
 8005138:	f7fe ffd2 	bl	80040e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	4aa2      	ldr	r2, [pc, #648]	@ (80053cc <HAL_ADC_ConfigChannel+0x6dc>)
 8005142:	4293      	cmp	r3, r2
 8005144:	f040 812e 	bne.w	80053a4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10b      	bne.n	8005170 <HAL_ADC_ConfigChannel+0x480>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	0e9b      	lsrs	r3, r3, #26
 800515e:	3301      	adds	r3, #1
 8005160:	f003 031f 	and.w	r3, r3, #31
 8005164:	2b09      	cmp	r3, #9
 8005166:	bf94      	ite	ls
 8005168:	2301      	movls	r3, #1
 800516a:	2300      	movhi	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	e019      	b.n	80051a4 <HAL_ADC_ConfigChannel+0x4b4>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005178:	fa93 f3a3 	rbit	r3, r3
 800517c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800517e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005180:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005188:	2320      	movs	r3, #32
 800518a:	e003      	b.n	8005194 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800518c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800518e:	fab3 f383 	clz	r3, r3
 8005192:	b2db      	uxtb	r3, r3
 8005194:	3301      	adds	r3, #1
 8005196:	f003 031f 	and.w	r3, r3, #31
 800519a:	2b09      	cmp	r3, #9
 800519c:	bf94      	ite	ls
 800519e:	2301      	movls	r3, #1
 80051a0:	2300      	movhi	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d079      	beq.n	800529c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d107      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x4d4>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	0e9b      	lsrs	r3, r3, #26
 80051ba:	3301      	adds	r3, #1
 80051bc:	069b      	lsls	r3, r3, #26
 80051be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051c2:	e015      	b.n	80051f0 <HAL_ADC_ConfigChannel+0x500>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051cc:	fa93 f3a3 	rbit	r3, r3
 80051d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80051d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80051d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80051dc:	2320      	movs	r3, #32
 80051de:	e003      	b.n	80051e8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80051e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051e2:	fab3 f383 	clz	r3, r3
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	3301      	adds	r3, #1
 80051ea:	069b      	lsls	r3, r3, #26
 80051ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d109      	bne.n	8005210 <HAL_ADC_ConfigChannel+0x520>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	0e9b      	lsrs	r3, r3, #26
 8005202:	3301      	adds	r3, #1
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	2101      	movs	r1, #1
 800520a:	fa01 f303 	lsl.w	r3, r1, r3
 800520e:	e017      	b.n	8005240 <HAL_ADC_ConfigChannel+0x550>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005216:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005218:	fa93 f3a3 	rbit	r3, r3
 800521c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800521e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005220:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005228:	2320      	movs	r3, #32
 800522a:	e003      	b.n	8005234 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800522c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800522e:	fab3 f383 	clz	r3, r3
 8005232:	b2db      	uxtb	r3, r3
 8005234:	3301      	adds	r3, #1
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	2101      	movs	r1, #1
 800523c:	fa01 f303 	lsl.w	r3, r1, r3
 8005240:	ea42 0103 	orr.w	r1, r2, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <HAL_ADC_ConfigChannel+0x576>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	0e9b      	lsrs	r3, r3, #26
 8005256:	3301      	adds	r3, #1
 8005258:	f003 021f 	and.w	r2, r3, #31
 800525c:	4613      	mov	r3, r2
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	4413      	add	r3, r2
 8005262:	051b      	lsls	r3, r3, #20
 8005264:	e018      	b.n	8005298 <HAL_ADC_ConfigChannel+0x5a8>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526e:	fa93 f3a3 	rbit	r3, r3
 8005272:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005276:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800527e:	2320      	movs	r3, #32
 8005280:	e003      	b.n	800528a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005284:	fab3 f383 	clz	r3, r3
 8005288:	b2db      	uxtb	r3, r3
 800528a:	3301      	adds	r3, #1
 800528c:	f003 021f 	and.w	r2, r3, #31
 8005290:	4613      	mov	r3, r2
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	4413      	add	r3, r2
 8005296:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005298:	430b      	orrs	r3, r1
 800529a:	e07e      	b.n	800539a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d107      	bne.n	80052b8 <HAL_ADC_ConfigChannel+0x5c8>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	0e9b      	lsrs	r3, r3, #26
 80052ae:	3301      	adds	r3, #1
 80052b0:	069b      	lsls	r3, r3, #26
 80052b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80052b6:	e015      	b.n	80052e4 <HAL_ADC_ConfigChannel+0x5f4>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c0:	fa93 f3a3 	rbit	r3, r3
 80052c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80052c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80052d0:	2320      	movs	r3, #32
 80052d2:	e003      	b.n	80052dc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	fab3 f383 	clz	r3, r3
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	3301      	adds	r3, #1
 80052de:	069b      	lsls	r3, r3, #26
 80052e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d109      	bne.n	8005304 <HAL_ADC_ConfigChannel+0x614>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	0e9b      	lsrs	r3, r3, #26
 80052f6:	3301      	adds	r3, #1
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	2101      	movs	r1, #1
 80052fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005302:	e017      	b.n	8005334 <HAL_ADC_ConfigChannel+0x644>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	fa93 f3a3 	rbit	r3, r3
 8005310:	61fb      	str	r3, [r7, #28]
  return result;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800531c:	2320      	movs	r3, #32
 800531e:	e003      	b.n	8005328 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005322:	fab3 f383 	clz	r3, r3
 8005326:	b2db      	uxtb	r3, r3
 8005328:	3301      	adds	r3, #1
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	2101      	movs	r1, #1
 8005330:	fa01 f303 	lsl.w	r3, r1, r3
 8005334:	ea42 0103 	orr.w	r1, r2, r3
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10d      	bne.n	8005360 <HAL_ADC_ConfigChannel+0x670>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	0e9b      	lsrs	r3, r3, #26
 800534a:	3301      	adds	r3, #1
 800534c:	f003 021f 	and.w	r2, r3, #31
 8005350:	4613      	mov	r3, r2
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	4413      	add	r3, r2
 8005356:	3b1e      	subs	r3, #30
 8005358:	051b      	lsls	r3, r3, #20
 800535a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800535e:	e01b      	b.n	8005398 <HAL_ADC_ConfigChannel+0x6a8>
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	fa93 f3a3 	rbit	r3, r3
 800536c:	613b      	str	r3, [r7, #16]
  return result;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005378:	2320      	movs	r3, #32
 800537a:	e003      	b.n	8005384 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	fab3 f383 	clz	r3, r3
 8005382:	b2db      	uxtb	r3, r3
 8005384:	3301      	adds	r3, #1
 8005386:	f003 021f 	and.w	r2, r3, #31
 800538a:	4613      	mov	r3, r2
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	4413      	add	r3, r2
 8005390:	3b1e      	subs	r3, #30
 8005392:	051b      	lsls	r3, r3, #20
 8005394:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005398:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800539e:	4619      	mov	r1, r3
 80053a0:	f7fe fe72 	bl	8004088 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b09      	ldr	r3, [pc, #36]	@ (80053d0 <HAL_ADC_ConfigChannel+0x6e0>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 80be 	beq.w	800552e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053ba:	d004      	beq.n	80053c6 <HAL_ADC_ConfigChannel+0x6d6>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a04      	ldr	r2, [pc, #16]	@ (80053d4 <HAL_ADC_ConfigChannel+0x6e4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d10a      	bne.n	80053dc <HAL_ADC_ConfigChannel+0x6ec>
 80053c6:	4b04      	ldr	r3, [pc, #16]	@ (80053d8 <HAL_ADC_ConfigChannel+0x6e8>)
 80053c8:	e009      	b.n	80053de <HAL_ADC_ConfigChannel+0x6ee>
 80053ca:	bf00      	nop
 80053cc:	407f0000 	.word	0x407f0000
 80053d0:	80080000 	.word	0x80080000
 80053d4:	50000100 	.word	0x50000100
 80053d8:	50000300 	.word	0x50000300
 80053dc:	4b59      	ldr	r3, [pc, #356]	@ (8005544 <HAL_ADC_ConfigChannel+0x854>)
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fe fd54 	bl	8003e8c <LL_ADC_GetCommonPathInternalCh>
 80053e4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a56      	ldr	r2, [pc, #344]	@ (8005548 <HAL_ADC_ConfigChannel+0x858>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d004      	beq.n	80053fc <HAL_ADC_ConfigChannel+0x70c>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a55      	ldr	r2, [pc, #340]	@ (800554c <HAL_ADC_ConfigChannel+0x85c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d13a      	bne.n	8005472 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80053fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005400:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d134      	bne.n	8005472 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005410:	d005      	beq.n	800541e <HAL_ADC_ConfigChannel+0x72e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a4e      	ldr	r2, [pc, #312]	@ (8005550 <HAL_ADC_ConfigChannel+0x860>)
 8005418:	4293      	cmp	r3, r2
 800541a:	f040 8085 	bne.w	8005528 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005426:	d004      	beq.n	8005432 <HAL_ADC_ConfigChannel+0x742>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a49      	ldr	r2, [pc, #292]	@ (8005554 <HAL_ADC_ConfigChannel+0x864>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d101      	bne.n	8005436 <HAL_ADC_ConfigChannel+0x746>
 8005432:	4a49      	ldr	r2, [pc, #292]	@ (8005558 <HAL_ADC_ConfigChannel+0x868>)
 8005434:	e000      	b.n	8005438 <HAL_ADC_ConfigChannel+0x748>
 8005436:	4a43      	ldr	r2, [pc, #268]	@ (8005544 <HAL_ADC_ConfigChannel+0x854>)
 8005438:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800543c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f7fe fd0f 	bl	8003e66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005448:	4b44      	ldr	r3, [pc, #272]	@ (800555c <HAL_ADC_ConfigChannel+0x86c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	099b      	lsrs	r3, r3, #6
 800544e:	4a44      	ldr	r2, [pc, #272]	@ (8005560 <HAL_ADC_ConfigChannel+0x870>)
 8005450:	fba2 2303 	umull	r2, r3, r2, r3
 8005454:	099b      	lsrs	r3, r3, #6
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	4613      	mov	r3, r2
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005462:	e002      	b.n	800546a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3b01      	subs	r3, #1
 8005468:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1f9      	bne.n	8005464 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005470:	e05a      	b.n	8005528 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a3b      	ldr	r2, [pc, #236]	@ (8005564 <HAL_ADC_ConfigChannel+0x874>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d125      	bne.n	80054c8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800547c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005480:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d11f      	bne.n	80054c8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a31      	ldr	r2, [pc, #196]	@ (8005554 <HAL_ADC_ConfigChannel+0x864>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d104      	bne.n	800549c <HAL_ADC_ConfigChannel+0x7ac>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a34      	ldr	r2, [pc, #208]	@ (8005568 <HAL_ADC_ConfigChannel+0x878>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d047      	beq.n	800552c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054a4:	d004      	beq.n	80054b0 <HAL_ADC_ConfigChannel+0x7c0>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005554 <HAL_ADC_ConfigChannel+0x864>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d101      	bne.n	80054b4 <HAL_ADC_ConfigChannel+0x7c4>
 80054b0:	4a29      	ldr	r2, [pc, #164]	@ (8005558 <HAL_ADC_ConfigChannel+0x868>)
 80054b2:	e000      	b.n	80054b6 <HAL_ADC_ConfigChannel+0x7c6>
 80054b4:	4a23      	ldr	r2, [pc, #140]	@ (8005544 <HAL_ADC_ConfigChannel+0x854>)
 80054b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054be:	4619      	mov	r1, r3
 80054c0:	4610      	mov	r0, r2
 80054c2:	f7fe fcd0 	bl	8003e66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80054c6:	e031      	b.n	800552c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a27      	ldr	r2, [pc, #156]	@ (800556c <HAL_ADC_ConfigChannel+0x87c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d12d      	bne.n	800552e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80054d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d127      	bne.n	800552e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005554 <HAL_ADC_ConfigChannel+0x864>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d022      	beq.n	800552e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054f0:	d004      	beq.n	80054fc <HAL_ADC_ConfigChannel+0x80c>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a17      	ldr	r2, [pc, #92]	@ (8005554 <HAL_ADC_ConfigChannel+0x864>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d101      	bne.n	8005500 <HAL_ADC_ConfigChannel+0x810>
 80054fc:	4a16      	ldr	r2, [pc, #88]	@ (8005558 <HAL_ADC_ConfigChannel+0x868>)
 80054fe:	e000      	b.n	8005502 <HAL_ADC_ConfigChannel+0x812>
 8005500:	4a10      	ldr	r2, [pc, #64]	@ (8005544 <HAL_ADC_ConfigChannel+0x854>)
 8005502:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005506:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800550a:	4619      	mov	r1, r3
 800550c:	4610      	mov	r0, r2
 800550e:	f7fe fcaa 	bl	8003e66 <LL_ADC_SetCommonPathInternalCh>
 8005512:	e00c      	b.n	800552e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005518:	f043 0220 	orr.w	r2, r3, #32
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005526:	e002      	b.n	800552e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005528:	bf00      	nop
 800552a:	e000      	b.n	800552e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800552c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005536:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800553a:	4618      	mov	r0, r3
 800553c:	37d8      	adds	r7, #216	@ 0xd8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	50000700 	.word	0x50000700
 8005548:	c3210000 	.word	0xc3210000
 800554c:	90c00010 	.word	0x90c00010
 8005550:	50000600 	.word	0x50000600
 8005554:	50000100 	.word	0x50000100
 8005558:	50000300 	.word	0x50000300
 800555c:	20000248 	.word	0x20000248
 8005560:	053e2d63 	.word	0x053e2d63
 8005564:	c7520000 	.word	0xc7520000
 8005568:	50000500 	.word	0x50000500
 800556c:	cb840000 	.word	0xcb840000

08005570 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005578:	2300      	movs	r3, #0
 800557a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe fe4f 	bl	8004224 <LL_ADC_IsEnabled>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d176      	bne.n	800567a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	4b3c      	ldr	r3, [pc, #240]	@ (8005684 <ADC_Enable+0x114>)
 8005594:	4013      	ands	r3, r2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00d      	beq.n	80055b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559e:	f043 0210 	orr.w	r2, r3, #16
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055aa:	f043 0201 	orr.w	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e062      	b.n	800567c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe fe1e 	bl	80041fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055c8:	d004      	beq.n	80055d4 <ADC_Enable+0x64>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a2e      	ldr	r2, [pc, #184]	@ (8005688 <ADC_Enable+0x118>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d101      	bne.n	80055d8 <ADC_Enable+0x68>
 80055d4:	4b2d      	ldr	r3, [pc, #180]	@ (800568c <ADC_Enable+0x11c>)
 80055d6:	e000      	b.n	80055da <ADC_Enable+0x6a>
 80055d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005690 <ADC_Enable+0x120>)
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fe fc56 	bl	8003e8c <LL_ADC_GetCommonPathInternalCh>
 80055e0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80055e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d013      	beq.n	8005612 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005694 <ADC_Enable+0x124>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	099b      	lsrs	r3, r3, #6
 80055f0:	4a29      	ldr	r2, [pc, #164]	@ (8005698 <ADC_Enable+0x128>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	099b      	lsrs	r3, r3, #6
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	4613      	mov	r3, r2
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005604:	e002      	b.n	800560c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	3b01      	subs	r3, #1
 800560a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1f9      	bne.n	8005606 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005612:	f7fe fc09 	bl	8003e28 <HAL_GetTick>
 8005616:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005618:	e028      	b.n	800566c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f7fe fe00 	bl	8004224 <LL_ADC_IsEnabled>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d104      	bne.n	8005634 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f7fe fde4 	bl	80041fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005634:	f7fe fbf8 	bl	8003e28 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d914      	bls.n	800566c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b01      	cmp	r3, #1
 800564e:	d00d      	beq.n	800566c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005654:	f043 0210 	orr.w	r2, r3, #16
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005660:	f043 0201 	orr.w	r2, r3, #1
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e007      	b.n	800567c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b01      	cmp	r3, #1
 8005678:	d1cf      	bne.n	800561a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	8000003f 	.word	0x8000003f
 8005688:	50000100 	.word	0x50000100
 800568c:	50000300 	.word	0x50000300
 8005690:	50000700 	.word	0x50000700
 8005694:	20000248 	.word	0x20000248
 8005698:	053e2d63 	.word	0x053e2d63

0800569c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d14b      	bne.n	800574e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d021      	beq.n	8005714 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe fc85 	bl	8003fe4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d032      	beq.n	8005746 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d12b      	bne.n	8005746 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d11f      	bne.n	8005746 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800570a:	f043 0201 	orr.w	r2, r3, #1
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005712:	e018      	b.n	8005746 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d111      	bne.n	8005746 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005726:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005732:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d105      	bne.n	8005746 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800573e:	f043 0201 	orr.w	r2, r3, #1
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f7ff faaa 	bl	8004ca0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800574c:	e00e      	b.n	800576c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7ff fabe 	bl	8004cdc <HAL_ADC_ErrorCallback>
}
 8005760:	e004      	b.n	800576c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	4798      	blx	r3
}
 800576c:	bf00      	nop
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005780:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff fa96 	bl	8004cb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005788:	bf00      	nop
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ae:	f043 0204 	orr.w	r2, r3, #4
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f7ff fa90 	bl	8004cdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057bc:	bf00      	nop
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <LL_ADC_IsEnabled>:
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <LL_ADC_IsEnabled+0x18>
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <LL_ADC_IsEnabled+0x1a>
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <LL_ADC_REG_IsConversionOngoing>:
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d101      	bne.n	8005802 <LL_ADC_REG_IsConversionOngoing+0x18>
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005874:	b590      	push	{r4, r7, lr}
 8005876:	b0a1      	sub	sp, #132	@ 0x84
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800588e:	2302      	movs	r3, #2
 8005890:	e0e7      	b.n	8005a62 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800589a:	2300      	movs	r3, #0
 800589c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800589e:	2300      	movs	r3, #0
 80058a0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058aa:	d102      	bne.n	80058b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80058ac:	4b6f      	ldr	r3, [pc, #444]	@ (8005a6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80058ae:	60bb      	str	r3, [r7, #8]
 80058b0:	e009      	b.n	80058c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a6e      	ldr	r2, [pc, #440]	@ (8005a70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d102      	bne.n	80058c2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80058bc:	4b6d      	ldr	r3, [pc, #436]	@ (8005a74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80058be:	60bb      	str	r3, [r7, #8]
 80058c0:	e001      	b.n	80058c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80058c2:	2300      	movs	r3, #0
 80058c4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10b      	bne.n	80058e4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d0:	f043 0220 	orr.w	r2, r3, #32
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0be      	b.n	8005a62 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff ff7f 	bl	80057ea <LL_ADC_REG_IsConversionOngoing>
 80058ec:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff ff79 	bl	80057ea <LL_ADC_REG_IsConversionOngoing>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f040 80a0 	bne.w	8005a40 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005900:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005902:	2b00      	cmp	r3, #0
 8005904:	f040 809c 	bne.w	8005a40 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005910:	d004      	beq.n	800591c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a55      	ldr	r2, [pc, #340]	@ (8005a6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d101      	bne.n	8005920 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800591c:	4b56      	ldr	r3, [pc, #344]	@ (8005a78 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800591e:	e000      	b.n	8005922 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005920:	4b56      	ldr	r3, [pc, #344]	@ (8005a7c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005922:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d04b      	beq.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800592c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	6859      	ldr	r1, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800593e:	035b      	lsls	r3, r3, #13
 8005940:	430b      	orrs	r3, r1
 8005942:	431a      	orrs	r2, r3
 8005944:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005946:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005950:	d004      	beq.n	800595c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a45      	ldr	r2, [pc, #276]	@ (8005a6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d10f      	bne.n	800597c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800595c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005960:	f7ff ff30 	bl	80057c4 <LL_ADC_IsEnabled>
 8005964:	4604      	mov	r4, r0
 8005966:	4841      	ldr	r0, [pc, #260]	@ (8005a6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005968:	f7ff ff2c 	bl	80057c4 <LL_ADC_IsEnabled>
 800596c:	4603      	mov	r3, r0
 800596e:	4323      	orrs	r3, r4
 8005970:	2b00      	cmp	r3, #0
 8005972:	bf0c      	ite	eq
 8005974:	2301      	moveq	r3, #1
 8005976:	2300      	movne	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	e012      	b.n	80059a2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800597c:	483c      	ldr	r0, [pc, #240]	@ (8005a70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800597e:	f7ff ff21 	bl	80057c4 <LL_ADC_IsEnabled>
 8005982:	4604      	mov	r4, r0
 8005984:	483b      	ldr	r0, [pc, #236]	@ (8005a74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005986:	f7ff ff1d 	bl	80057c4 <LL_ADC_IsEnabled>
 800598a:	4603      	mov	r3, r0
 800598c:	431c      	orrs	r4, r3
 800598e:	483c      	ldr	r0, [pc, #240]	@ (8005a80 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005990:	f7ff ff18 	bl	80057c4 <LL_ADC_IsEnabled>
 8005994:	4603      	mov	r3, r0
 8005996:	4323      	orrs	r3, r4
 8005998:	2b00      	cmp	r3, #0
 800599a:	bf0c      	ite	eq
 800599c:	2301      	moveq	r3, #1
 800599e:	2300      	movne	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d056      	beq.n	8005a54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80059a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80059ae:	f023 030f 	bic.w	r3, r3, #15
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	6811      	ldr	r1, [r2, #0]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	6892      	ldr	r2, [r2, #8]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	431a      	orrs	r2, r3
 80059be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059c0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80059c2:	e047      	b.n	8005a54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80059c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80059cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059d8:	d004      	beq.n	80059e4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a23      	ldr	r2, [pc, #140]	@ (8005a6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d10f      	bne.n	8005a04 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80059e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80059e8:	f7ff feec 	bl	80057c4 <LL_ADC_IsEnabled>
 80059ec:	4604      	mov	r4, r0
 80059ee:	481f      	ldr	r0, [pc, #124]	@ (8005a6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80059f0:	f7ff fee8 	bl	80057c4 <LL_ADC_IsEnabled>
 80059f4:	4603      	mov	r3, r0
 80059f6:	4323      	orrs	r3, r4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	bf0c      	ite	eq
 80059fc:	2301      	moveq	r3, #1
 80059fe:	2300      	movne	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	e012      	b.n	8005a2a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005a04:	481a      	ldr	r0, [pc, #104]	@ (8005a70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005a06:	f7ff fedd 	bl	80057c4 <LL_ADC_IsEnabled>
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	4819      	ldr	r0, [pc, #100]	@ (8005a74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005a0e:	f7ff fed9 	bl	80057c4 <LL_ADC_IsEnabled>
 8005a12:	4603      	mov	r3, r0
 8005a14:	431c      	orrs	r4, r3
 8005a16:	481a      	ldr	r0, [pc, #104]	@ (8005a80 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005a18:	f7ff fed4 	bl	80057c4 <LL_ADC_IsEnabled>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	4323      	orrs	r3, r4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bf0c      	ite	eq
 8005a24:	2301      	moveq	r3, #1
 8005a26:	2300      	movne	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d012      	beq.n	8005a54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005a2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005a36:	f023 030f 	bic.w	r3, r3, #15
 8005a3a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005a3c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a3e:	e009      	b.n	8005a54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a44:	f043 0220 	orr.w	r2, r3, #32
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005a52:	e000      	b.n	8005a56 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a5e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3784      	adds	r7, #132	@ 0x84
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd90      	pop	{r4, r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	50000100 	.word	0x50000100
 8005a70:	50000400 	.word	0x50000400
 8005a74:	50000500 	.word	0x50000500
 8005a78:	50000300 	.word	0x50000300
 8005a7c:	50000700 	.word	0x50000700
 8005a80:	50000600 	.word	0x50000600

08005a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a94:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005aac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ab6:	4a04      	ldr	r2, [pc, #16]	@ (8005ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	60d3      	str	r3, [r2, #12]
}
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	e000ed00 	.word	0xe000ed00

08005acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ad0:	4b04      	ldr	r3, [pc, #16]	@ (8005ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	0a1b      	lsrs	r3, r3, #8
 8005ad6:	f003 0307 	and.w	r3, r3, #7
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	e000ed00 	.word	0xe000ed00

08005ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4603      	mov	r3, r0
 8005af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	db0b      	blt.n	8005b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	f003 021f 	and.w	r2, r3, #31
 8005b00:	4907      	ldr	r1, [pc, #28]	@ (8005b20 <__NVIC_EnableIRQ+0x38>)
 8005b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	2001      	movs	r0, #1
 8005b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	e000e100 	.word	0xe000e100

08005b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	6039      	str	r1, [r7, #0]
 8005b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	db0a      	blt.n	8005b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	490c      	ldr	r1, [pc, #48]	@ (8005b70 <__NVIC_SetPriority+0x4c>)
 8005b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b42:	0112      	lsls	r2, r2, #4
 8005b44:	b2d2      	uxtb	r2, r2
 8005b46:	440b      	add	r3, r1
 8005b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b4c:	e00a      	b.n	8005b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	4908      	ldr	r1, [pc, #32]	@ (8005b74 <__NVIC_SetPriority+0x50>)
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	3b04      	subs	r3, #4
 8005b5c:	0112      	lsls	r2, r2, #4
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	440b      	add	r3, r1
 8005b62:	761a      	strb	r2, [r3, #24]
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	e000e100 	.word	0xe000e100
 8005b74:	e000ed00 	.word	0xe000ed00

08005b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b089      	sub	sp, #36	@ 0x24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f1c3 0307 	rsb	r3, r3, #7
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	bf28      	it	cs
 8005b96:	2304      	movcs	r3, #4
 8005b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	2b06      	cmp	r3, #6
 8005ba0:	d902      	bls.n	8005ba8 <NVIC_EncodePriority+0x30>
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	3b03      	subs	r3, #3
 8005ba6:	e000      	b.n	8005baa <NVIC_EncodePriority+0x32>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bac:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43da      	mvns	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	401a      	ands	r2, r3
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bca:	43d9      	mvns	r1, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bd0:	4313      	orrs	r3, r2
         );
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3724      	adds	r7, #36	@ 0x24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
	...

08005be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bf0:	d301      	bcc.n	8005bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e00f      	b.n	8005c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8005c20 <SysTick_Config+0x40>)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bfe:	210f      	movs	r1, #15
 8005c00:	f04f 30ff 	mov.w	r0, #4294967295
 8005c04:	f7ff ff8e 	bl	8005b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c08:	4b05      	ldr	r3, [pc, #20]	@ (8005c20 <SysTick_Config+0x40>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c0e:	4b04      	ldr	r3, [pc, #16]	@ (8005c20 <SysTick_Config+0x40>)
 8005c10:	2207      	movs	r2, #7
 8005c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	e000e010 	.word	0xe000e010

08005c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff ff29 	bl	8005a84 <__NVIC_SetPriorityGrouping>
}
 8005c32:	bf00      	nop
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b086      	sub	sp, #24
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	4603      	mov	r3, r0
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	607a      	str	r2, [r7, #4]
 8005c46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c48:	f7ff ff40 	bl	8005acc <__NVIC_GetPriorityGrouping>
 8005c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	6978      	ldr	r0, [r7, #20]
 8005c54:	f7ff ff90 	bl	8005b78 <NVIC_EncodePriority>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c5e:	4611      	mov	r1, r2
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff ff5f 	bl	8005b24 <__NVIC_SetPriority>
}
 8005c66:	bf00      	nop
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	4603      	mov	r3, r0
 8005c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff ff33 	bl	8005ae8 <__NVIC_EnableIRQ>
}
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b082      	sub	sp, #8
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff ffa4 	bl	8005be0 <SysTick_Config>
 8005c98:	4603      	mov	r3, r0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e08d      	b.n	8005dd2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	4b47      	ldr	r3, [pc, #284]	@ (8005ddc <HAL_DMA_Init+0x138>)
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d80f      	bhi.n	8005ce2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	4b45      	ldr	r3, [pc, #276]	@ (8005de0 <HAL_DMA_Init+0x13c>)
 8005cca:	4413      	add	r3, r2
 8005ccc:	4a45      	ldr	r2, [pc, #276]	@ (8005de4 <HAL_DMA_Init+0x140>)
 8005cce:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd2:	091b      	lsrs	r3, r3, #4
 8005cd4:	009a      	lsls	r2, r3, #2
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a42      	ldr	r2, [pc, #264]	@ (8005de8 <HAL_DMA_Init+0x144>)
 8005cde:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ce0:	e00e      	b.n	8005d00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	4b40      	ldr	r3, [pc, #256]	@ (8005dec <HAL_DMA_Init+0x148>)
 8005cea:	4413      	add	r3, r2
 8005cec:	4a3d      	ldr	r2, [pc, #244]	@ (8005de4 <HAL_DMA_Init+0x140>)
 8005cee:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf2:	091b      	lsrs	r3, r3, #4
 8005cf4:	009a      	lsls	r2, r3, #2
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a3c      	ldr	r2, [pc, #240]	@ (8005df0 <HAL_DMA_Init+0x14c>)
 8005cfe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fa76 	bl	8006244 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d60:	d102      	bne.n	8005d68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d7c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d010      	beq.n	8005da8 <HAL_DMA_Init+0x104>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d80c      	bhi.n	8005da8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa96 	bl	80062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	e008      	b.n	8005dba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40020407 	.word	0x40020407
 8005de0:	bffdfff8 	.word	0xbffdfff8
 8005de4:	cccccccd 	.word	0xcccccccd
 8005de8:	40020000 	.word	0x40020000
 8005dec:	bffdfbf8 	.word	0xbffdfbf8
 8005df0:	40020400 	.word	0x40020400

08005df4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_DMA_Start_IT+0x20>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e066      	b.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d155      	bne.n	8005ed4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0201 	bic.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 f9bb 	bl	80061c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d008      	beq.n	8005e6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 020e 	orr.w	r2, r2, #14
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	e00f      	b.n	8005e8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0204 	bic.w	r2, r2, #4
 8005e7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 020a 	orr.w	r2, r2, #10
 8005e8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d007      	beq.n	8005eaa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ea4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ea8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ec0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 0201 	orr.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	e005      	b.n	8005ee0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005edc:	2302      	movs	r3, #2
 8005ede:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d005      	beq.n	8005f0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2204      	movs	r2, #4
 8005f06:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	73fb      	strb	r3, [r7, #15]
 8005f0c:	e037      	b.n	8005f7e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 020e 	bic.w	r2, r2, #14
 8005f1c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f2c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0201 	bic.w	r2, r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f42:	f003 021f 	and.w	r2, r3, #31
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f50:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f5a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00c      	beq.n	8005f7e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f72:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f7c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d00d      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2204      	movs	r2, #4
 8005fb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
 8005fce:	e047      	b.n	8006060 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 020e 	bic.w	r2, r2, #14
 8005fde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ffa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006004:	f003 021f 	and.w	r2, r3, #31
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600c:	2101      	movs	r1, #1
 800600e:	fa01 f202 	lsl.w	r2, r1, r2
 8006012:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800601c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00c      	beq.n	8006040 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006030:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006034:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800603e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	4798      	blx	r3
    }
  }
  return status;
 8006060:	7bfb      	ldrb	r3, [r7, #15]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006086:	f003 031f 	and.w	r3, r3, #31
 800608a:	2204      	movs	r2, #4
 800608c:	409a      	lsls	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4013      	ands	r3, r2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d026      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x7a>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d021      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d107      	bne.n	80060be <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0204 	bic.w	r2, r2, #4
 80060bc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c2:	f003 021f 	and.w	r2, r3, #31
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ca:	2104      	movs	r1, #4
 80060cc:	fa01 f202 	lsl.w	r2, r1, r2
 80060d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d071      	beq.n	80061be <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80060e2:	e06c      	b.n	80061be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e8:	f003 031f 	and.w	r3, r3, #31
 80060ec:	2202      	movs	r2, #2
 80060ee:	409a      	lsls	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d02e      	beq.n	8006156 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d029      	beq.n	8006156 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10b      	bne.n	8006128 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 020a 	bic.w	r2, r2, #10
 800611e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612c:	f003 021f 	and.w	r2, r3, #31
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006134:	2102      	movs	r1, #2
 8006136:	fa01 f202 	lsl.w	r2, r1, r2
 800613a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006148:	2b00      	cmp	r3, #0
 800614a:	d038      	beq.n	80061be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006154:	e033      	b.n	80061be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615a:	f003 031f 	and.w	r3, r3, #31
 800615e:	2208      	movs	r2, #8
 8006160:	409a      	lsls	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4013      	ands	r3, r2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d02a      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b00      	cmp	r3, #0
 8006172:	d025      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 020e 	bic.w	r2, r2, #14
 8006182:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006188:	f003 021f 	and.w	r2, r3, #31
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006190:	2101      	movs	r1, #1
 8006192:	fa01 f202 	lsl.w	r2, r1, r2
 8006196:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d004      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80061be:	bf00      	nop
 80061c0:	bf00      	nop
}
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80061de:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80061f0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f6:	f003 021f 	and.w	r2, r3, #31
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fe:	2101      	movs	r1, #1
 8006200:	fa01 f202 	lsl.w	r2, r1, r2
 8006204:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	2b10      	cmp	r3, #16
 8006214:	d108      	bne.n	8006228 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006226:	e007      	b.n	8006238 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	60da      	str	r2, [r3, #12]
}
 8006238:	bf00      	nop
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	4b16      	ldr	r3, [pc, #88]	@ (80062ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006254:	429a      	cmp	r2, r3
 8006256:	d802      	bhi.n	800625e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006258:	4b15      	ldr	r3, [pc, #84]	@ (80062b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e001      	b.n	8006262 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800625e:	4b15      	ldr	r3, [pc, #84]	@ (80062b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006260:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	3b08      	subs	r3, #8
 800626e:	4a12      	ldr	r2, [pc, #72]	@ (80062b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006270:	fba2 2303 	umull	r2, r3, r2, r3
 8006274:	091b      	lsrs	r3, r3, #4
 8006276:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800627c:	089b      	lsrs	r3, r3, #2
 800627e:	009a      	lsls	r2, r3, #2
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	4413      	add	r3, r2
 8006284:	461a      	mov	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a0b      	ldr	r2, [pc, #44]	@ (80062bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800628e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f003 031f 	and.w	r3, r3, #31
 8006296:	2201      	movs	r2, #1
 8006298:	409a      	lsls	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40020407 	.word	0x40020407
 80062b0:	40020800 	.word	0x40020800
 80062b4:	40020820 	.word	0x40020820
 80062b8:	cccccccd 	.word	0xcccccccd
 80062bc:	40020880 	.word	0x40020880

080062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	461a      	mov	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a08      	ldr	r2, [pc, #32]	@ (8006304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80062e2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	2201      	movs	r2, #1
 80062ee:	409a      	lsls	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	1000823f 	.word	0x1000823f
 8006304:	40020940 	.word	0x40020940

08006308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006312:	2300      	movs	r3, #0
 8006314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006316:	e15a      	b.n	80065ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	2101      	movs	r1, #1
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	fa01 f303 	lsl.w	r3, r1, r3
 8006324:	4013      	ands	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 814c 	beq.w	80065c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	2b01      	cmp	r3, #1
 800633a:	d005      	beq.n	8006348 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006344:	2b02      	cmp	r3, #2
 8006346:	d130      	bne.n	80063aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	2203      	movs	r2, #3
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	43db      	mvns	r3, r3
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4013      	ands	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800637e:	2201      	movs	r2, #1
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	fa02 f303 	lsl.w	r3, r2, r3
 8006386:	43db      	mvns	r3, r3
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4013      	ands	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	091b      	lsrs	r3, r3, #4
 8006394:	f003 0201 	and.w	r2, r3, #1
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	fa02 f303 	lsl.w	r3, r2, r3
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f003 0303 	and.w	r3, r3, #3
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d017      	beq.n	80063e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	2203      	movs	r2, #3
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	43db      	mvns	r3, r3
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	4013      	ands	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d123      	bne.n	800643a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	08da      	lsrs	r2, r3, #3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3208      	adds	r2, #8
 80063fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	220f      	movs	r2, #15
 800640a:	fa02 f303 	lsl.w	r3, r2, r3
 800640e:	43db      	mvns	r3, r3
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4013      	ands	r3, r2
 8006414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	08da      	lsrs	r2, r3, #3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3208      	adds	r2, #8
 8006434:	6939      	ldr	r1, [r7, #16]
 8006436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	2203      	movs	r2, #3
 8006446:	fa02 f303 	lsl.w	r3, r2, r3
 800644a:	43db      	mvns	r3, r3
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4013      	ands	r3, r2
 8006450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f003 0203 	and.w	r2, r3, #3
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 80a6 	beq.w	80065c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800647c:	4b5b      	ldr	r3, [pc, #364]	@ (80065ec <HAL_GPIO_Init+0x2e4>)
 800647e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006480:	4a5a      	ldr	r2, [pc, #360]	@ (80065ec <HAL_GPIO_Init+0x2e4>)
 8006482:	f043 0301 	orr.w	r3, r3, #1
 8006486:	6613      	str	r3, [r2, #96]	@ 0x60
 8006488:	4b58      	ldr	r3, [pc, #352]	@ (80065ec <HAL_GPIO_Init+0x2e4>)
 800648a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	60bb      	str	r3, [r7, #8]
 8006492:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006494:	4a56      	ldr	r2, [pc, #344]	@ (80065f0 <HAL_GPIO_Init+0x2e8>)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	089b      	lsrs	r3, r3, #2
 800649a:	3302      	adds	r3, #2
 800649c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f003 0303 	and.w	r3, r3, #3
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	220f      	movs	r2, #15
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	43db      	mvns	r3, r3
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4013      	ands	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80064be:	d01f      	beq.n	8006500 <HAL_GPIO_Init+0x1f8>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a4c      	ldr	r2, [pc, #304]	@ (80065f4 <HAL_GPIO_Init+0x2ec>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d019      	beq.n	80064fc <HAL_GPIO_Init+0x1f4>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a4b      	ldr	r2, [pc, #300]	@ (80065f8 <HAL_GPIO_Init+0x2f0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d013      	beq.n	80064f8 <HAL_GPIO_Init+0x1f0>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a4a      	ldr	r2, [pc, #296]	@ (80065fc <HAL_GPIO_Init+0x2f4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00d      	beq.n	80064f4 <HAL_GPIO_Init+0x1ec>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a49      	ldr	r2, [pc, #292]	@ (8006600 <HAL_GPIO_Init+0x2f8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d007      	beq.n	80064f0 <HAL_GPIO_Init+0x1e8>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a48      	ldr	r2, [pc, #288]	@ (8006604 <HAL_GPIO_Init+0x2fc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d101      	bne.n	80064ec <HAL_GPIO_Init+0x1e4>
 80064e8:	2305      	movs	r3, #5
 80064ea:	e00a      	b.n	8006502 <HAL_GPIO_Init+0x1fa>
 80064ec:	2306      	movs	r3, #6
 80064ee:	e008      	b.n	8006502 <HAL_GPIO_Init+0x1fa>
 80064f0:	2304      	movs	r3, #4
 80064f2:	e006      	b.n	8006502 <HAL_GPIO_Init+0x1fa>
 80064f4:	2303      	movs	r3, #3
 80064f6:	e004      	b.n	8006502 <HAL_GPIO_Init+0x1fa>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e002      	b.n	8006502 <HAL_GPIO_Init+0x1fa>
 80064fc:	2301      	movs	r3, #1
 80064fe:	e000      	b.n	8006502 <HAL_GPIO_Init+0x1fa>
 8006500:	2300      	movs	r3, #0
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	f002 0203 	and.w	r2, r2, #3
 8006508:	0092      	lsls	r2, r2, #2
 800650a:	4093      	lsls	r3, r2
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006512:	4937      	ldr	r1, [pc, #220]	@ (80065f0 <HAL_GPIO_Init+0x2e8>)
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	089b      	lsrs	r3, r3, #2
 8006518:	3302      	adds	r3, #2
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006520:	4b39      	ldr	r3, [pc, #228]	@ (8006608 <HAL_GPIO_Init+0x300>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	43db      	mvns	r3, r3
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4013      	ands	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006544:	4a30      	ldr	r2, [pc, #192]	@ (8006608 <HAL_GPIO_Init+0x300>)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800654a:	4b2f      	ldr	r3, [pc, #188]	@ (8006608 <HAL_GPIO_Init+0x300>)
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	43db      	mvns	r3, r3
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4013      	ands	r3, r2
 8006558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800656e:	4a26      	ldr	r2, [pc, #152]	@ (8006608 <HAL_GPIO_Init+0x300>)
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006574:	4b24      	ldr	r3, [pc, #144]	@ (8006608 <HAL_GPIO_Init+0x300>)
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	43db      	mvns	r3, r3
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4013      	ands	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006598:	4a1b      	ldr	r2, [pc, #108]	@ (8006608 <HAL_GPIO_Init+0x300>)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800659e:	4b1a      	ldr	r3, [pc, #104]	@ (8006608 <HAL_GPIO_Init+0x300>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	43db      	mvns	r3, r3
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4013      	ands	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80065c2:	4a11      	ldr	r2, [pc, #68]	@ (8006608 <HAL_GPIO_Init+0x300>)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	3301      	adds	r3, #1
 80065cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	fa22 f303 	lsr.w	r3, r2, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f47f ae9d 	bne.w	8006318 <HAL_GPIO_Init+0x10>
  }
}
 80065de:	bf00      	nop
 80065e0:	bf00      	nop
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	40021000 	.word	0x40021000
 80065f0:	40010000 	.word	0x40010000
 80065f4:	48000400 	.word	0x48000400
 80065f8:	48000800 	.word	0x48000800
 80065fc:	48000c00 	.word	0x48000c00
 8006600:	48001000 	.word	0x48001000
 8006604:	48001400 	.word	0x48001400
 8006608:	40010400 	.word	0x40010400

0800660c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	887b      	ldrh	r3, [r7, #2]
 800661e:	4013      	ands	r3, r2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006624:	2301      	movs	r3, #1
 8006626:	73fb      	strb	r3, [r7, #15]
 8006628:	e001      	b.n	800662e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	807b      	strh	r3, [r7, #2]
 8006648:	4613      	mov	r3, r2
 800664a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800664c:	787b      	ldrb	r3, [r7, #1]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006652:	887a      	ldrh	r2, [r7, #2]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006658:	e002      	b.n	8006660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800665a:	887a      	ldrh	r2, [r7, #2]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006676:	4b08      	ldr	r3, [pc, #32]	@ (8006698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	88fb      	ldrh	r3, [r7, #6]
 800667c:	4013      	ands	r3, r2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d006      	beq.n	8006690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006682:	4a05      	ldr	r2, [pc, #20]	@ (8006698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006688:	88fb      	ldrh	r3, [r7, #6]
 800668a:	4618      	mov	r0, r3
 800668c:	f7fc f920 	bl	80028d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40010400 	.word	0x40010400

0800669c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d141      	bne.n	800672e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066aa:	4b4b      	ldr	r3, [pc, #300]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80066b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066b6:	d131      	bne.n	800671c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066b8:	4b47      	ldr	r3, [pc, #284]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066be:	4a46      	ldr	r2, [pc, #280]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066c8:	4b43      	ldr	r3, [pc, #268]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80066d0:	4a41      	ldr	r2, [pc, #260]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80066d8:	4b40      	ldr	r3, [pc, #256]	@ (80067dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2232      	movs	r2, #50	@ 0x32
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	4a3f      	ldr	r2, [pc, #252]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80066e4:	fba2 2303 	umull	r2, r3, r2, r3
 80066e8:	0c9b      	lsrs	r3, r3, #18
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066ee:	e002      	b.n	80066f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066f6:	4b38      	ldr	r3, [pc, #224]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006702:	d102      	bne.n	800670a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1f2      	bne.n	80066f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800670a:	4b33      	ldr	r3, [pc, #204]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006716:	d158      	bne.n	80067ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e057      	b.n	80067cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800671c:	4b2e      	ldr	r3, [pc, #184]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800671e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006722:	4a2d      	ldr	r2, [pc, #180]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006728:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800672c:	e04d      	b.n	80067ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006734:	d141      	bne.n	80067ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006736:	4b28      	ldr	r3, [pc, #160]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800673e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006742:	d131      	bne.n	80067a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006744:	4b24      	ldr	r3, [pc, #144]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800674a:	4a23      	ldr	r2, [pc, #140]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800674c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006750:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006754:	4b20      	ldr	r3, [pc, #128]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800675c:	4a1e      	ldr	r2, [pc, #120]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800675e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006762:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006764:	4b1d      	ldr	r3, [pc, #116]	@ (80067dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2232      	movs	r2, #50	@ 0x32
 800676a:	fb02 f303 	mul.w	r3, r2, r3
 800676e:	4a1c      	ldr	r2, [pc, #112]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006770:	fba2 2303 	umull	r2, r3, r2, r3
 8006774:	0c9b      	lsrs	r3, r3, #18
 8006776:	3301      	adds	r3, #1
 8006778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800677a:	e002      	b.n	8006782 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	3b01      	subs	r3, #1
 8006780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006782:	4b15      	ldr	r3, [pc, #84]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800678a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800678e:	d102      	bne.n	8006796 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f2      	bne.n	800677c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006796:	4b10      	ldr	r3, [pc, #64]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800679e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a2:	d112      	bne.n	80067ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e011      	b.n	80067cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067a8:	4b0b      	ldr	r3, [pc, #44]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067ae:	4a0a      	ldr	r2, [pc, #40]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80067b8:	e007      	b.n	80067ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80067ba:	4b07      	ldr	r3, [pc, #28]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80067c2:	4a05      	ldr	r2, [pc, #20]	@ (80067d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80067c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	40007000 	.word	0x40007000
 80067dc:	20000248 	.word	0x20000248
 80067e0:	431bde83 	.word	0x431bde83

080067e4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80067e8:	4b05      	ldr	r3, [pc, #20]	@ (8006800 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	4a04      	ldr	r2, [pc, #16]	@ (8006800 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80067ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067f2:	6093      	str	r3, [r2, #8]
}
 80067f4:	bf00      	nop
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40007000 	.word	0x40007000

08006804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e2fe      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d075      	beq.n	800690e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006822:	4b97      	ldr	r3, [pc, #604]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 030c 	and.w	r3, r3, #12
 800682a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800682c:	4b94      	ldr	r3, [pc, #592]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b0c      	cmp	r3, #12
 800683a:	d102      	bne.n	8006842 <HAL_RCC_OscConfig+0x3e>
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2b03      	cmp	r3, #3
 8006840:	d002      	beq.n	8006848 <HAL_RCC_OscConfig+0x44>
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b08      	cmp	r3, #8
 8006846:	d10b      	bne.n	8006860 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006848:	4b8d      	ldr	r3, [pc, #564]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d05b      	beq.n	800690c <HAL_RCC_OscConfig+0x108>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d157      	bne.n	800690c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e2d9      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006868:	d106      	bne.n	8006878 <HAL_RCC_OscConfig+0x74>
 800686a:	4b85      	ldr	r3, [pc, #532]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a84      	ldr	r2, [pc, #528]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 8006870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	e01d      	b.n	80068b4 <HAL_RCC_OscConfig+0xb0>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006880:	d10c      	bne.n	800689c <HAL_RCC_OscConfig+0x98>
 8006882:	4b7f      	ldr	r3, [pc, #508]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a7e      	ldr	r2, [pc, #504]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 8006888:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	4b7c      	ldr	r3, [pc, #496]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a7b      	ldr	r2, [pc, #492]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 8006894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	e00b      	b.n	80068b4 <HAL_RCC_OscConfig+0xb0>
 800689c:	4b78      	ldr	r3, [pc, #480]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a77      	ldr	r2, [pc, #476]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 80068a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	4b75      	ldr	r3, [pc, #468]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a74      	ldr	r2, [pc, #464]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 80068ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d013      	beq.n	80068e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068bc:	f7fd fab4 	bl	8003e28 <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068c4:	f7fd fab0 	bl	8003e28 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b64      	cmp	r3, #100	@ 0x64
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e29e      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0f0      	beq.n	80068c4 <HAL_RCC_OscConfig+0xc0>
 80068e2:	e014      	b.n	800690e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e4:	f7fd faa0 	bl	8003e28 <HAL_GetTick>
 80068e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068ea:	e008      	b.n	80068fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068ec:	f7fd fa9c 	bl	8003e28 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b64      	cmp	r3, #100	@ 0x64
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e28a      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068fe:	4b60      	ldr	r3, [pc, #384]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1f0      	bne.n	80068ec <HAL_RCC_OscConfig+0xe8>
 800690a:	e000      	b.n	800690e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800690c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d075      	beq.n	8006a06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800691a:	4b59      	ldr	r3, [pc, #356]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 030c 	and.w	r3, r3, #12
 8006922:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006924:	4b56      	ldr	r3, [pc, #344]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f003 0303 	and.w	r3, r3, #3
 800692c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	2b0c      	cmp	r3, #12
 8006932:	d102      	bne.n	800693a <HAL_RCC_OscConfig+0x136>
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2b02      	cmp	r3, #2
 8006938:	d002      	beq.n	8006940 <HAL_RCC_OscConfig+0x13c>
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	2b04      	cmp	r3, #4
 800693e:	d11f      	bne.n	8006980 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006940:	4b4f      	ldr	r3, [pc, #316]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <HAL_RCC_OscConfig+0x154>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e25d      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006958:	4b49      	ldr	r3, [pc, #292]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	061b      	lsls	r3, r3, #24
 8006966:	4946      	ldr	r1, [pc, #280]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 8006968:	4313      	orrs	r3, r2
 800696a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800696c:	4b45      	ldr	r3, [pc, #276]	@ (8006a84 <HAL_RCC_OscConfig+0x280>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4618      	mov	r0, r3
 8006972:	f7fd fa0d 	bl	8003d90 <HAL_InitTick>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d043      	beq.n	8006a04 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e249      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d023      	beq.n	80069d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006988:	4b3d      	ldr	r3, [pc, #244]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a3c      	ldr	r2, [pc, #240]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 800698e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006994:	f7fd fa48 	bl	8003e28 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800699c:	f7fd fa44 	bl	8003e28 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e232      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069ae:	4b34      	ldr	r3, [pc, #208]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f0      	beq.n	800699c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ba:	4b31      	ldr	r3, [pc, #196]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	061b      	lsls	r3, r3, #24
 80069c8:	492d      	ldr	r1, [pc, #180]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	604b      	str	r3, [r1, #4]
 80069ce:	e01a      	b.n	8006a06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 80069d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7fd fa24 	bl	8003e28 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069e4:	f7fd fa20 	bl	8003e28 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e20e      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069f6:	4b22      	ldr	r3, [pc, #136]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f0      	bne.n	80069e4 <HAL_RCC_OscConfig+0x1e0>
 8006a02:	e000      	b.n	8006a06 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d041      	beq.n	8006a96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d01c      	beq.n	8006a54 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a1a:	4b19      	ldr	r3, [pc, #100]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 8006a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a20:	4a17      	ldr	r2, [pc, #92]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 8006a22:	f043 0301 	orr.w	r3, r3, #1
 8006a26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2a:	f7fd f9fd 	bl	8003e28 <HAL_GetTick>
 8006a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a30:	e008      	b.n	8006a44 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a32:	f7fd f9f9 	bl	8003e28 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e1e7      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a44:	4b0e      	ldr	r3, [pc, #56]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 8006a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0ef      	beq.n	8006a32 <HAL_RCC_OscConfig+0x22e>
 8006a52:	e020      	b.n	8006a96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a54:	4b0a      	ldr	r3, [pc, #40]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 8006a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a5a:	4a09      	ldr	r2, [pc, #36]	@ (8006a80 <HAL_RCC_OscConfig+0x27c>)
 8006a5c:	f023 0301 	bic.w	r3, r3, #1
 8006a60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a64:	f7fd f9e0 	bl	8003e28 <HAL_GetTick>
 8006a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a6a:	e00d      	b.n	8006a88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a6c:	f7fd f9dc 	bl	8003e28 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d906      	bls.n	8006a88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e1ca      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
 8006a7e:	bf00      	nop
 8006a80:	40021000 	.word	0x40021000
 8006a84:	2000024c 	.word	0x2000024c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a88:	4b8c      	ldr	r3, [pc, #560]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1ea      	bne.n	8006a6c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 80a6 	beq.w	8006bf0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006aa8:	4b84      	ldr	r3, [pc, #528]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x2b4>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <HAL_RCC_OscConfig+0x2b6>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00d      	beq.n	8006ada <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006abe:	4b7f      	ldr	r3, [pc, #508]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006aca:	4b7c      	ldr	r3, [pc, #496]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ada:	4b79      	ldr	r3, [pc, #484]	@ (8006cc0 <HAL_RCC_OscConfig+0x4bc>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d118      	bne.n	8006b18 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ae6:	4b76      	ldr	r3, [pc, #472]	@ (8006cc0 <HAL_RCC_OscConfig+0x4bc>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a75      	ldr	r2, [pc, #468]	@ (8006cc0 <HAL_RCC_OscConfig+0x4bc>)
 8006aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006af2:	f7fd f999 	bl	8003e28 <HAL_GetTick>
 8006af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006af8:	e008      	b.n	8006b0c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006afa:	f7fd f995 	bl	8003e28 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d901      	bls.n	8006b0c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e183      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b0c:	4b6c      	ldr	r3, [pc, #432]	@ (8006cc0 <HAL_RCC_OscConfig+0x4bc>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0f0      	beq.n	8006afa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d108      	bne.n	8006b32 <HAL_RCC_OscConfig+0x32e>
 8006b20:	4b66      	ldr	r3, [pc, #408]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b26:	4a65      	ldr	r2, [pc, #404]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006b28:	f043 0301 	orr.w	r3, r3, #1
 8006b2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b30:	e024      	b.n	8006b7c <HAL_RCC_OscConfig+0x378>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	2b05      	cmp	r3, #5
 8006b38:	d110      	bne.n	8006b5c <HAL_RCC_OscConfig+0x358>
 8006b3a:	4b60      	ldr	r3, [pc, #384]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b40:	4a5e      	ldr	r2, [pc, #376]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006b42:	f043 0304 	orr.w	r3, r3, #4
 8006b46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b50:	4a5a      	ldr	r2, [pc, #360]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006b52:	f043 0301 	orr.w	r3, r3, #1
 8006b56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b5a:	e00f      	b.n	8006b7c <HAL_RCC_OscConfig+0x378>
 8006b5c:	4b57      	ldr	r3, [pc, #348]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b62:	4a56      	ldr	r2, [pc, #344]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006b64:	f023 0301 	bic.w	r3, r3, #1
 8006b68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b6c:	4b53      	ldr	r3, [pc, #332]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b72:	4a52      	ldr	r2, [pc, #328]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006b74:	f023 0304 	bic.w	r3, r3, #4
 8006b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d016      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b84:	f7fd f950 	bl	8003e28 <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b8a:	e00a      	b.n	8006ba2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b8c:	f7fd f94c 	bl	8003e28 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e138      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ba2:	4b46      	ldr	r3, [pc, #280]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0ed      	beq.n	8006b8c <HAL_RCC_OscConfig+0x388>
 8006bb0:	e015      	b.n	8006bde <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb2:	f7fd f939 	bl	8003e28 <HAL_GetTick>
 8006bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006bb8:	e00a      	b.n	8006bd0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bba:	f7fd f935 	bl	8003e28 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e121      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006bd0:	4b3a      	ldr	r3, [pc, #232]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1ed      	bne.n	8006bba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bde:	7ffb      	ldrb	r3, [r7, #31]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d105      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006be4:	4b35      	ldr	r3, [pc, #212]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006be8:	4a34      	ldr	r2, [pc, #208]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006bea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0320 	and.w	r3, r3, #32
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d03c      	beq.n	8006c76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01c      	beq.n	8006c3e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c04:	4b2d      	ldr	r3, [pc, #180]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006c0c:	f043 0301 	orr.w	r3, r3, #1
 8006c10:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c14:	f7fd f908 	bl	8003e28 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c1c:	f7fd f904 	bl	8003e28 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e0f2      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c2e:	4b23      	ldr	r3, [pc, #140]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006c30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0ef      	beq.n	8006c1c <HAL_RCC_OscConfig+0x418>
 8006c3c:	e01b      	b.n	8006c76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006c40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c44:	4a1d      	ldr	r2, [pc, #116]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006c46:	f023 0301 	bic.w	r3, r3, #1
 8006c4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c4e:	f7fd f8eb 	bl	8003e28 <HAL_GetTick>
 8006c52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c54:	e008      	b.n	8006c68 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c56:	f7fd f8e7 	bl	8003e28 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d901      	bls.n	8006c68 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e0d5      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c68:	4b14      	ldr	r3, [pc, #80]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1ef      	bne.n	8006c56 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 80c9 	beq.w	8006e12 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c80:	4b0e      	ldr	r3, [pc, #56]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 030c 	and.w	r3, r3, #12
 8006c88:	2b0c      	cmp	r3, #12
 8006c8a:	f000 8083 	beq.w	8006d94 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d15e      	bne.n	8006d54 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c96:	4b09      	ldr	r3, [pc, #36]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a08      	ldr	r2, [pc, #32]	@ (8006cbc <HAL_RCC_OscConfig+0x4b8>)
 8006c9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca2:	f7fd f8c1 	bl	8003e28 <HAL_GetTick>
 8006ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ca8:	e00c      	b.n	8006cc4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006caa:	f7fd f8bd 	bl	8003e28 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d905      	bls.n	8006cc4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e0ab      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cc4:	4b55      	ldr	r3, [pc, #340]	@ (8006e1c <HAL_RCC_OscConfig+0x618>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1ec      	bne.n	8006caa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cd0:	4b52      	ldr	r3, [pc, #328]	@ (8006e1c <HAL_RCC_OscConfig+0x618>)
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	4b52      	ldr	r3, [pc, #328]	@ (8006e20 <HAL_RCC_OscConfig+0x61c>)
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	6a11      	ldr	r1, [r2, #32]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ce0:	3a01      	subs	r2, #1
 8006ce2:	0112      	lsls	r2, r2, #4
 8006ce4:	4311      	orrs	r1, r2
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006cea:	0212      	lsls	r2, r2, #8
 8006cec:	4311      	orrs	r1, r2
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006cf2:	0852      	lsrs	r2, r2, #1
 8006cf4:	3a01      	subs	r2, #1
 8006cf6:	0552      	lsls	r2, r2, #21
 8006cf8:	4311      	orrs	r1, r2
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006cfe:	0852      	lsrs	r2, r2, #1
 8006d00:	3a01      	subs	r2, #1
 8006d02:	0652      	lsls	r2, r2, #25
 8006d04:	4311      	orrs	r1, r2
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006d0a:	06d2      	lsls	r2, r2, #27
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	4943      	ldr	r1, [pc, #268]	@ (8006e1c <HAL_RCC_OscConfig+0x618>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d14:	4b41      	ldr	r3, [pc, #260]	@ (8006e1c <HAL_RCC_OscConfig+0x618>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a40      	ldr	r2, [pc, #256]	@ (8006e1c <HAL_RCC_OscConfig+0x618>)
 8006d1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d1e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d20:	4b3e      	ldr	r3, [pc, #248]	@ (8006e1c <HAL_RCC_OscConfig+0x618>)
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	4a3d      	ldr	r2, [pc, #244]	@ (8006e1c <HAL_RCC_OscConfig+0x618>)
 8006d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2c:	f7fd f87c 	bl	8003e28 <HAL_GetTick>
 8006d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d32:	e008      	b.n	8006d46 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d34:	f7fd f878 	bl	8003e28 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e066      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d46:	4b35      	ldr	r3, [pc, #212]	@ (8006e1c <HAL_RCC_OscConfig+0x618>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0f0      	beq.n	8006d34 <HAL_RCC_OscConfig+0x530>
 8006d52:	e05e      	b.n	8006e12 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d54:	4b31      	ldr	r3, [pc, #196]	@ (8006e1c <HAL_RCC_OscConfig+0x618>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a30      	ldr	r2, [pc, #192]	@ (8006e1c <HAL_RCC_OscConfig+0x618>)
 8006d5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d60:	f7fd f862 	bl	8003e28 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d68:	f7fd f85e 	bl	8003e28 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e04c      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d7a:	4b28      	ldr	r3, [pc, #160]	@ (8006e1c <HAL_RCC_OscConfig+0x618>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f0      	bne.n	8006d68 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006d86:	4b25      	ldr	r3, [pc, #148]	@ (8006e1c <HAL_RCC_OscConfig+0x618>)
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	4924      	ldr	r1, [pc, #144]	@ (8006e1c <HAL_RCC_OscConfig+0x618>)
 8006d8c:	4b25      	ldr	r3, [pc, #148]	@ (8006e24 <HAL_RCC_OscConfig+0x620>)
 8006d8e:	4013      	ands	r3, r2
 8006d90:	60cb      	str	r3, [r1, #12]
 8006d92:	e03e      	b.n	8006e12 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d101      	bne.n	8006da0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e039      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006da0:	4b1e      	ldr	r3, [pc, #120]	@ (8006e1c <HAL_RCC_OscConfig+0x618>)
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f003 0203 	and.w	r2, r3, #3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d12c      	bne.n	8006e0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d123      	bne.n	8006e0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d11b      	bne.n	8006e0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d113      	bne.n	8006e0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df0:	085b      	lsrs	r3, r3, #1
 8006df2:	3b01      	subs	r3, #1
 8006df4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d109      	bne.n	8006e0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	3b01      	subs	r3, #1
 8006e08:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d001      	beq.n	8006e12 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e000      	b.n	8006e14 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3720      	adds	r7, #32
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40021000 	.word	0x40021000
 8006e20:	019f800c 	.word	0x019f800c
 8006e24:	feeefffc 	.word	0xfeeefffc

08006e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e11e      	b.n	800707e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e40:	4b91      	ldr	r3, [pc, #580]	@ (8007088 <HAL_RCC_ClockConfig+0x260>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d910      	bls.n	8006e70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e4e:	4b8e      	ldr	r3, [pc, #568]	@ (8007088 <HAL_RCC_ClockConfig+0x260>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f023 020f 	bic.w	r2, r3, #15
 8006e56:	498c      	ldr	r1, [pc, #560]	@ (8007088 <HAL_RCC_ClockConfig+0x260>)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e5e:	4b8a      	ldr	r3, [pc, #552]	@ (8007088 <HAL_RCC_ClockConfig+0x260>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d001      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e106      	b.n	800707e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d073      	beq.n	8006f64 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d129      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e84:	4b81      	ldr	r3, [pc, #516]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e0f4      	b.n	800707e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006e94:	f000 f99e 	bl	80071d4 <RCC_GetSysClockFreqFromPLLSource>
 8006e98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	4a7c      	ldr	r2, [pc, #496]	@ (8007090 <HAL_RCC_ClockConfig+0x268>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d93f      	bls.n	8006f22 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006ea2:	4b7a      	ldr	r3, [pc, #488]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d009      	beq.n	8006ec2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d033      	beq.n	8006f22 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d12f      	bne.n	8006f22 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ec2:	4b72      	ldr	r3, [pc, #456]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006eca:	4a70      	ldr	r2, [pc, #448]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ed0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006ed2:	2380      	movs	r3, #128	@ 0x80
 8006ed4:	617b      	str	r3, [r7, #20]
 8006ed6:	e024      	b.n	8006f22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d107      	bne.n	8006ef0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d109      	bne.n	8006f00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e0c6      	b.n	800707e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ef0:	4b66      	ldr	r3, [pc, #408]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e0be      	b.n	800707e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006f00:	f000 f8ce 	bl	80070a0 <HAL_RCC_GetSysClockFreq>
 8006f04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	4a61      	ldr	r2, [pc, #388]	@ (8007090 <HAL_RCC_ClockConfig+0x268>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d909      	bls.n	8006f22 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f0e:	4b5f      	ldr	r3, [pc, #380]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f16:	4a5d      	ldr	r2, [pc, #372]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006f1e:	2380      	movs	r3, #128	@ 0x80
 8006f20:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f22:	4b5a      	ldr	r3, [pc, #360]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f023 0203 	bic.w	r2, r3, #3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	4957      	ldr	r1, [pc, #348]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f34:	f7fc ff78 	bl	8003e28 <HAL_GetTick>
 8006f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f3a:	e00a      	b.n	8006f52 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f3c:	f7fc ff74 	bl	8003e28 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e095      	b.n	800707e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f52:	4b4e      	ldr	r3, [pc, #312]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f003 020c 	and.w	r2, r3, #12
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d1eb      	bne.n	8006f3c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d023      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f7c:	4b43      	ldr	r3, [pc, #268]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	4a42      	ldr	r2, [pc, #264]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006f82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006f86:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0308 	and.w	r3, r3, #8
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d007      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006f94:	4b3d      	ldr	r3, [pc, #244]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006f9c:	4a3b      	ldr	r2, [pc, #236]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006f9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006fa2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fa4:	4b39      	ldr	r3, [pc, #228]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	4936      	ldr	r1, [pc, #216]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	608b      	str	r3, [r1, #8]
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2b80      	cmp	r3, #128	@ 0x80
 8006fbc:	d105      	bne.n	8006fca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006fbe:	4b33      	ldr	r3, [pc, #204]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	4a32      	ldr	r2, [pc, #200]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8006fc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fc8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fca:	4b2f      	ldr	r3, [pc, #188]	@ (8007088 <HAL_RCC_ClockConfig+0x260>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d21d      	bcs.n	8007014 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8007088 <HAL_RCC_ClockConfig+0x260>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f023 020f 	bic.w	r2, r3, #15
 8006fe0:	4929      	ldr	r1, [pc, #164]	@ (8007088 <HAL_RCC_ClockConfig+0x260>)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006fe8:	f7fc ff1e 	bl	8003e28 <HAL_GetTick>
 8006fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fee:	e00a      	b.n	8007006 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ff0:	f7fc ff1a 	bl	8003e28 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d901      	bls.n	8007006 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e03b      	b.n	800707e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007006:	4b20      	ldr	r3, [pc, #128]	@ (8007088 <HAL_RCC_ClockConfig+0x260>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 030f 	and.w	r3, r3, #15
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d1ed      	bne.n	8006ff0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d008      	beq.n	8007032 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007020:	4b1a      	ldr	r3, [pc, #104]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	4917      	ldr	r1, [pc, #92]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 800702e:	4313      	orrs	r3, r2
 8007030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0308 	and.w	r3, r3, #8
 800703a:	2b00      	cmp	r3, #0
 800703c:	d009      	beq.n	8007052 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800703e:	4b13      	ldr	r3, [pc, #76]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	490f      	ldr	r1, [pc, #60]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 800704e:	4313      	orrs	r3, r2
 8007050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007052:	f000 f825 	bl	80070a0 <HAL_RCC_GetSysClockFreq>
 8007056:	4602      	mov	r2, r0
 8007058:	4b0c      	ldr	r3, [pc, #48]	@ (800708c <HAL_RCC_ClockConfig+0x264>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	091b      	lsrs	r3, r3, #4
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	490c      	ldr	r1, [pc, #48]	@ (8007094 <HAL_RCC_ClockConfig+0x26c>)
 8007064:	5ccb      	ldrb	r3, [r1, r3]
 8007066:	f003 031f 	and.w	r3, r3, #31
 800706a:	fa22 f303 	lsr.w	r3, r2, r3
 800706e:	4a0a      	ldr	r2, [pc, #40]	@ (8007098 <HAL_RCC_ClockConfig+0x270>)
 8007070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007072:	4b0a      	ldr	r3, [pc, #40]	@ (800709c <HAL_RCC_ClockConfig+0x274>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f7fc fe8a 	bl	8003d90 <HAL_InitTick>
 800707c:	4603      	mov	r3, r0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	40022000 	.word	0x40022000
 800708c:	40021000 	.word	0x40021000
 8007090:	04c4b400 	.word	0x04c4b400
 8007094:	0800b9a4 	.word	0x0800b9a4
 8007098:	20000248 	.word	0x20000248
 800709c:	2000024c 	.word	0x2000024c

080070a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80070a6:	4b2c      	ldr	r3, [pc, #176]	@ (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f003 030c 	and.w	r3, r3, #12
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d102      	bne.n	80070b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80070b2:	4b2a      	ldr	r3, [pc, #168]	@ (800715c <HAL_RCC_GetSysClockFreq+0xbc>)
 80070b4:	613b      	str	r3, [r7, #16]
 80070b6:	e047      	b.n	8007148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80070b8:	4b27      	ldr	r3, [pc, #156]	@ (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f003 030c 	and.w	r3, r3, #12
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d102      	bne.n	80070ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80070c4:	4b26      	ldr	r3, [pc, #152]	@ (8007160 <HAL_RCC_GetSysClockFreq+0xc0>)
 80070c6:	613b      	str	r3, [r7, #16]
 80070c8:	e03e      	b.n	8007148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80070ca:	4b23      	ldr	r3, [pc, #140]	@ (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 030c 	and.w	r3, r3, #12
 80070d2:	2b0c      	cmp	r3, #12
 80070d4:	d136      	bne.n	8007144 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070d6:	4b20      	ldr	r3, [pc, #128]	@ (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	091b      	lsrs	r3, r3, #4
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	3301      	adds	r3, #1
 80070ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d10c      	bne.n	800710e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007160 <HAL_RCC_GetSysClockFreq+0xc0>)
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fc:	4a16      	ldr	r2, [pc, #88]	@ (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070fe:	68d2      	ldr	r2, [r2, #12]
 8007100:	0a12      	lsrs	r2, r2, #8
 8007102:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007106:	fb02 f303 	mul.w	r3, r2, r3
 800710a:	617b      	str	r3, [r7, #20]
      break;
 800710c:	e00c      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800710e:	4a13      	ldr	r2, [pc, #76]	@ (800715c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	fbb2 f3f3 	udiv	r3, r2, r3
 8007116:	4a10      	ldr	r2, [pc, #64]	@ (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007118:	68d2      	ldr	r2, [r2, #12]
 800711a:	0a12      	lsrs	r2, r2, #8
 800711c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007120:	fb02 f303 	mul.w	r3, r2, r3
 8007124:	617b      	str	r3, [r7, #20]
      break;
 8007126:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007128:	4b0b      	ldr	r3, [pc, #44]	@ (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	0e5b      	lsrs	r3, r3, #25
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	3301      	adds	r3, #1
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007140:	613b      	str	r3, [r7, #16]
 8007142:	e001      	b.n	8007148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007148:	693b      	ldr	r3, [r7, #16]
}
 800714a:	4618      	mov	r0, r3
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40021000 	.word	0x40021000
 800715c:	00f42400 	.word	0x00f42400
 8007160:	016e3600 	.word	0x016e3600

08007164 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007168:	4b03      	ldr	r3, [pc, #12]	@ (8007178 <HAL_RCC_GetHCLKFreq+0x14>)
 800716a:	681b      	ldr	r3, [r3, #0]
}
 800716c:	4618      	mov	r0, r3
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20000248 	.word	0x20000248

0800717c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007180:	f7ff fff0 	bl	8007164 <HAL_RCC_GetHCLKFreq>
 8007184:	4602      	mov	r2, r0
 8007186:	4b06      	ldr	r3, [pc, #24]	@ (80071a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	0a1b      	lsrs	r3, r3, #8
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	4904      	ldr	r1, [pc, #16]	@ (80071a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007192:	5ccb      	ldrb	r3, [r1, r3]
 8007194:	f003 031f 	and.w	r3, r3, #31
 8007198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800719c:	4618      	mov	r0, r3
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	40021000 	.word	0x40021000
 80071a4:	0800b9b4 	.word	0x0800b9b4

080071a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80071ac:	f7ff ffda 	bl	8007164 <HAL_RCC_GetHCLKFreq>
 80071b0:	4602      	mov	r2, r0
 80071b2:	4b06      	ldr	r3, [pc, #24]	@ (80071cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	0adb      	lsrs	r3, r3, #11
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	4904      	ldr	r1, [pc, #16]	@ (80071d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80071be:	5ccb      	ldrb	r3, [r1, r3]
 80071c0:	f003 031f 	and.w	r3, r3, #31
 80071c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	40021000 	.word	0x40021000
 80071d0:	0800b9b4 	.word	0x0800b9b4

080071d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071da:	4b1e      	ldr	r3, [pc, #120]	@ (8007254 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007254 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	091b      	lsrs	r3, r3, #4
 80071ea:	f003 030f 	and.w	r3, r3, #15
 80071ee:	3301      	adds	r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d10c      	bne.n	8007212 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071f8:	4a17      	ldr	r2, [pc, #92]	@ (8007258 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007200:	4a14      	ldr	r2, [pc, #80]	@ (8007254 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007202:	68d2      	ldr	r2, [r2, #12]
 8007204:	0a12      	lsrs	r2, r2, #8
 8007206:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800720a:	fb02 f303 	mul.w	r3, r2, r3
 800720e:	617b      	str	r3, [r7, #20]
    break;
 8007210:	e00c      	b.n	800722c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007212:	4a12      	ldr	r2, [pc, #72]	@ (800725c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	fbb2 f3f3 	udiv	r3, r2, r3
 800721a:	4a0e      	ldr	r2, [pc, #56]	@ (8007254 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800721c:	68d2      	ldr	r2, [r2, #12]
 800721e:	0a12      	lsrs	r2, r2, #8
 8007220:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007224:	fb02 f303 	mul.w	r3, r2, r3
 8007228:	617b      	str	r3, [r7, #20]
    break;
 800722a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800722c:	4b09      	ldr	r3, [pc, #36]	@ (8007254 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	0e5b      	lsrs	r3, r3, #25
 8007232:	f003 0303 	and.w	r3, r3, #3
 8007236:	3301      	adds	r3, #1
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	fbb2 f3f3 	udiv	r3, r2, r3
 8007244:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007246:	687b      	ldr	r3, [r7, #4]
}
 8007248:	4618      	mov	r0, r3
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	40021000 	.word	0x40021000
 8007258:	016e3600 	.word	0x016e3600
 800725c:	00f42400 	.word	0x00f42400

08007260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007268:	2300      	movs	r3, #0
 800726a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800726c:	2300      	movs	r3, #0
 800726e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 8098 	beq.w	80073ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800727e:	2300      	movs	r3, #0
 8007280:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007282:	4b43      	ldr	r3, [pc, #268]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10d      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800728e:	4b40      	ldr	r3, [pc, #256]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007292:	4a3f      	ldr	r2, [pc, #252]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007298:	6593      	str	r3, [r2, #88]	@ 0x58
 800729a:	4b3d      	ldr	r3, [pc, #244]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800729c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800729e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072a2:	60bb      	str	r3, [r7, #8]
 80072a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072a6:	2301      	movs	r3, #1
 80072a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072aa:	4b3a      	ldr	r3, [pc, #232]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a39      	ldr	r2, [pc, #228]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80072b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072b6:	f7fc fdb7 	bl	8003e28 <HAL_GetTick>
 80072ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072bc:	e009      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072be:	f7fc fdb3 	bl	8003e28 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d902      	bls.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	74fb      	strb	r3, [r7, #19]
        break;
 80072d0:	e005      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072d2:	4b30      	ldr	r3, [pc, #192]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d0ef      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80072de:	7cfb      	ldrb	r3, [r7, #19]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d159      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80072e4:	4b2a      	ldr	r3, [pc, #168]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d01e      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d019      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007300:	4b23      	ldr	r3, [pc, #140]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800730a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800730c:	4b20      	ldr	r3, [pc, #128]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800730e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007312:	4a1f      	ldr	r2, [pc, #124]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007318:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800731c:	4b1c      	ldr	r3, [pc, #112]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800731e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007322:	4a1b      	ldr	r2, [pc, #108]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007324:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800732c:	4a18      	ldr	r2, [pc, #96]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d016      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733e:	f7fc fd73 	bl	8003e28 <HAL_GetTick>
 8007342:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007344:	e00b      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007346:	f7fc fd6f 	bl	8003e28 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007354:	4293      	cmp	r3, r2
 8007356:	d902      	bls.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	74fb      	strb	r3, [r7, #19]
            break;
 800735c:	e006      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800735e:	4b0c      	ldr	r3, [pc, #48]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0ec      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800736c:	7cfb      	ldrb	r3, [r7, #19]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10b      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007372:	4b07      	ldr	r3, [pc, #28]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007378:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007380:	4903      	ldr	r1, [pc, #12]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007382:	4313      	orrs	r3, r2
 8007384:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007388:	e008      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800738a:	7cfb      	ldrb	r3, [r7, #19]
 800738c:	74bb      	strb	r3, [r7, #18]
 800738e:	e005      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007390:	40021000 	.word	0x40021000
 8007394:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007398:	7cfb      	ldrb	r3, [r7, #19]
 800739a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800739c:	7c7b      	ldrb	r3, [r7, #17]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d105      	bne.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073a2:	4ba7      	ldr	r3, [pc, #668]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a6:	4aa6      	ldr	r2, [pc, #664]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073ba:	4ba1      	ldr	r3, [pc, #644]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c0:	f023 0203 	bic.w	r2, r3, #3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	499d      	ldr	r1, [pc, #628]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00a      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073dc:	4b98      	ldr	r3, [pc, #608]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e2:	f023 020c 	bic.w	r2, r3, #12
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	4995      	ldr	r1, [pc, #596]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0304 	and.w	r3, r3, #4
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073fe:	4b90      	ldr	r3, [pc, #576]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007404:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	498c      	ldr	r1, [pc, #560]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800740e:	4313      	orrs	r3, r2
 8007410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007420:	4b87      	ldr	r3, [pc, #540]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007426:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	4984      	ldr	r1, [pc, #528]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007430:	4313      	orrs	r3, r2
 8007432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0310 	and.w	r3, r3, #16
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007442:	4b7f      	ldr	r3, [pc, #508]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007448:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	497b      	ldr	r1, [pc, #492]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007452:	4313      	orrs	r3, r2
 8007454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00a      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007464:	4b76      	ldr	r3, [pc, #472]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800746a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	4973      	ldr	r1, [pc, #460]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007474:	4313      	orrs	r3, r2
 8007476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007486:	4b6e      	ldr	r3, [pc, #440]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800748c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	496a      	ldr	r1, [pc, #424]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007496:	4313      	orrs	r3, r2
 8007498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074a8:	4b65      	ldr	r3, [pc, #404]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	4962      	ldr	r1, [pc, #392]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074ca:	4b5d      	ldr	r3, [pc, #372]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d8:	4959      	ldr	r1, [pc, #356]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00a      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074ec:	4b54      	ldr	r3, [pc, #336]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074f2:	f023 0203 	bic.w	r2, r3, #3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fa:	4951      	ldr	r1, [pc, #324]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800750e:	4b4c      	ldr	r3, [pc, #304]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007514:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751c:	4948      	ldr	r1, [pc, #288]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800752c:	2b00      	cmp	r3, #0
 800752e:	d015      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007530:	4b43      	ldr	r3, [pc, #268]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007536:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800753e:	4940      	ldr	r1, [pc, #256]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007540:	4313      	orrs	r3, r2
 8007542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800754e:	d105      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007550:	4b3b      	ldr	r3, [pc, #236]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	4a3a      	ldr	r2, [pc, #232]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800755a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007564:	2b00      	cmp	r3, #0
 8007566:	d015      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007568:	4b35      	ldr	r3, [pc, #212]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800756e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007576:	4932      	ldr	r1, [pc, #200]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007578:	4313      	orrs	r3, r2
 800757a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007582:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007586:	d105      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007588:	4b2d      	ldr	r3, [pc, #180]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	4a2c      	ldr	r2, [pc, #176]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800758e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007592:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d015      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075a0:	4b27      	ldr	r3, [pc, #156]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ae:	4924      	ldr	r1, [pc, #144]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075be:	d105      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075c0:	4b1f      	ldr	r3, [pc, #124]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	4a1e      	ldr	r2, [pc, #120]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d015      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075d8:	4b19      	ldr	r3, [pc, #100]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e6:	4916      	ldr	r1, [pc, #88]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075f6:	d105      	bne.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075f8:	4b11      	ldr	r3, [pc, #68]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	4a10      	ldr	r2, [pc, #64]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007602:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d019      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007610:	4b0b      	ldr	r3, [pc, #44]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007616:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761e:	4908      	ldr	r1, [pc, #32]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007620:	4313      	orrs	r3, r2
 8007622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800762e:	d109      	bne.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007630:	4b03      	ldr	r3, [pc, #12]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	4a02      	ldr	r2, [pc, #8]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800763a:	60d3      	str	r3, [r2, #12]
 800763c:	e002      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800763e:	bf00      	nop
 8007640:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d015      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007650:	4b29      	ldr	r3, [pc, #164]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007656:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765e:	4926      	ldr	r1, [pc, #152]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007660:	4313      	orrs	r3, r2
 8007662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800766a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800766e:	d105      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007670:	4b21      	ldr	r3, [pc, #132]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	4a20      	ldr	r2, [pc, #128]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800767a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d015      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007688:	4b1b      	ldr	r3, [pc, #108]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800768a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800768e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007696:	4918      	ldr	r1, [pc, #96]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007698:	4313      	orrs	r3, r2
 800769a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076a6:	d105      	bne.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80076a8:	4b13      	ldr	r3, [pc, #76]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	4a12      	ldr	r2, [pc, #72]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d015      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80076c0:	4b0d      	ldr	r3, [pc, #52]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ce:	490a      	ldr	r1, [pc, #40]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076d0:	4313      	orrs	r3, r2
 80076d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076de:	d105      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076e0:	4b05      	ldr	r3, [pc, #20]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	4a04      	ldr	r2, [pc, #16]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80076e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80076ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	40021000 	.word	0x40021000

080076fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e054      	b.n	80077b8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d111      	bne.n	800773e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 ff92 	bl	800964c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a23      	ldr	r2, [pc, #140]	@ (80077c0 <HAL_TIM_Base_Init+0xc4>)
 8007734:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2202      	movs	r2, #2
 8007742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3304      	adds	r3, #4
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f001 fadb 	bl	8008d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	0800381d 	.word	0x0800381d

080077c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d001      	beq.n	80077dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e04c      	b.n	8007876 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a26      	ldr	r2, [pc, #152]	@ (8007884 <HAL_TIM_Base_Start+0xc0>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d022      	beq.n	8007834 <HAL_TIM_Base_Start+0x70>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077f6:	d01d      	beq.n	8007834 <HAL_TIM_Base_Start+0x70>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a22      	ldr	r2, [pc, #136]	@ (8007888 <HAL_TIM_Base_Start+0xc4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d018      	beq.n	8007834 <HAL_TIM_Base_Start+0x70>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a21      	ldr	r2, [pc, #132]	@ (800788c <HAL_TIM_Base_Start+0xc8>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d013      	beq.n	8007834 <HAL_TIM_Base_Start+0x70>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a1f      	ldr	r2, [pc, #124]	@ (8007890 <HAL_TIM_Base_Start+0xcc>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d00e      	beq.n	8007834 <HAL_TIM_Base_Start+0x70>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a1e      	ldr	r2, [pc, #120]	@ (8007894 <HAL_TIM_Base_Start+0xd0>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d009      	beq.n	8007834 <HAL_TIM_Base_Start+0x70>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a1c      	ldr	r2, [pc, #112]	@ (8007898 <HAL_TIM_Base_Start+0xd4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d004      	beq.n	8007834 <HAL_TIM_Base_Start+0x70>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a1b      	ldr	r2, [pc, #108]	@ (800789c <HAL_TIM_Base_Start+0xd8>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d115      	bne.n	8007860 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689a      	ldr	r2, [r3, #8]
 800783a:	4b19      	ldr	r3, [pc, #100]	@ (80078a0 <HAL_TIM_Base_Start+0xdc>)
 800783c:	4013      	ands	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b06      	cmp	r3, #6
 8007844:	d015      	beq.n	8007872 <HAL_TIM_Base_Start+0xae>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800784c:	d011      	beq.n	8007872 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f042 0201 	orr.w	r2, r2, #1
 800785c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800785e:	e008      	b.n	8007872 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0201 	orr.w	r2, r2, #1
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	e000      	b.n	8007874 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007872:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	40012c00 	.word	0x40012c00
 8007888:	40000400 	.word	0x40000400
 800788c:	40000800 	.word	0x40000800
 8007890:	40000c00 	.word	0x40000c00
 8007894:	40013400 	.word	0x40013400
 8007898:	40014000 	.word	0x40014000
 800789c:	40015000 	.word	0x40015000
 80078a0:	00010007 	.word	0x00010007

080078a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d001      	beq.n	80078bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e054      	b.n	8007966 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a26      	ldr	r2, [pc, #152]	@ (8007974 <HAL_TIM_Base_Start_IT+0xd0>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d022      	beq.n	8007924 <HAL_TIM_Base_Start_IT+0x80>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e6:	d01d      	beq.n	8007924 <HAL_TIM_Base_Start_IT+0x80>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a22      	ldr	r2, [pc, #136]	@ (8007978 <HAL_TIM_Base_Start_IT+0xd4>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d018      	beq.n	8007924 <HAL_TIM_Base_Start_IT+0x80>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a21      	ldr	r2, [pc, #132]	@ (800797c <HAL_TIM_Base_Start_IT+0xd8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d013      	beq.n	8007924 <HAL_TIM_Base_Start_IT+0x80>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a1f      	ldr	r2, [pc, #124]	@ (8007980 <HAL_TIM_Base_Start_IT+0xdc>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d00e      	beq.n	8007924 <HAL_TIM_Base_Start_IT+0x80>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a1e      	ldr	r2, [pc, #120]	@ (8007984 <HAL_TIM_Base_Start_IT+0xe0>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d009      	beq.n	8007924 <HAL_TIM_Base_Start_IT+0x80>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a1c      	ldr	r2, [pc, #112]	@ (8007988 <HAL_TIM_Base_Start_IT+0xe4>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d004      	beq.n	8007924 <HAL_TIM_Base_Start_IT+0x80>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a1b      	ldr	r2, [pc, #108]	@ (800798c <HAL_TIM_Base_Start_IT+0xe8>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d115      	bne.n	8007950 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689a      	ldr	r2, [r3, #8]
 800792a:	4b19      	ldr	r3, [pc, #100]	@ (8007990 <HAL_TIM_Base_Start_IT+0xec>)
 800792c:	4013      	ands	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b06      	cmp	r3, #6
 8007934:	d015      	beq.n	8007962 <HAL_TIM_Base_Start_IT+0xbe>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800793c:	d011      	beq.n	8007962 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f042 0201 	orr.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800794e:	e008      	b.n	8007962 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f042 0201 	orr.w	r2, r2, #1
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	e000      	b.n	8007964 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007962:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	40012c00 	.word	0x40012c00
 8007978:	40000400 	.word	0x40000400
 800797c:	40000800 	.word	0x40000800
 8007980:	40000c00 	.word	0x40000c00
 8007984:	40013400 	.word	0x40013400
 8007988:	40014000 	.word	0x40014000
 800798c:	40015000 	.word	0x40015000
 8007990:	00010007 	.word	0x00010007

08007994 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e054      	b.n	8007a50 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d111      	bne.n	80079d6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 fe46 	bl	800964c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d102      	bne.n	80079ce <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a23      	ldr	r2, [pc, #140]	@ (8007a58 <HAL_TIM_PWM_Init+0xc4>)
 80079cc:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2202      	movs	r2, #2
 80079da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3304      	adds	r3, #4
 80079e6:	4619      	mov	r1, r3
 80079e8:	4610      	mov	r0, r2
 80079ea:	f001 f98f 	bl	8008d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	08007a5d 	.word	0x08007a5d

08007a5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d109      	bne.n	8007a94 <HAL_TIM_PWM_Start+0x24>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	bf14      	ite	ne
 8007a8c:	2301      	movne	r3, #1
 8007a8e:	2300      	moveq	r3, #0
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	e03c      	b.n	8007b0e <HAL_TIM_PWM_Start+0x9e>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	d109      	bne.n	8007aae <HAL_TIM_PWM_Start+0x3e>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	bf14      	ite	ne
 8007aa6:	2301      	movne	r3, #1
 8007aa8:	2300      	moveq	r3, #0
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	e02f      	b.n	8007b0e <HAL_TIM_PWM_Start+0x9e>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	d109      	bne.n	8007ac8 <HAL_TIM_PWM_Start+0x58>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	bf14      	ite	ne
 8007ac0:	2301      	movne	r3, #1
 8007ac2:	2300      	moveq	r3, #0
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	e022      	b.n	8007b0e <HAL_TIM_PWM_Start+0x9e>
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2b0c      	cmp	r3, #12
 8007acc:	d109      	bne.n	8007ae2 <HAL_TIM_PWM_Start+0x72>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	bf14      	ite	ne
 8007ada:	2301      	movne	r3, #1
 8007adc:	2300      	moveq	r3, #0
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	e015      	b.n	8007b0e <HAL_TIM_PWM_Start+0x9e>
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b10      	cmp	r3, #16
 8007ae6:	d109      	bne.n	8007afc <HAL_TIM_PWM_Start+0x8c>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	bf14      	ite	ne
 8007af4:	2301      	movne	r3, #1
 8007af6:	2300      	moveq	r3, #0
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	e008      	b.n	8007b0e <HAL_TIM_PWM_Start+0x9e>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e0a6      	b.n	8007c64 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d104      	bne.n	8007b26 <HAL_TIM_PWM_Start+0xb6>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b24:	e023      	b.n	8007b6e <HAL_TIM_PWM_Start+0xfe>
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d104      	bne.n	8007b36 <HAL_TIM_PWM_Start+0xc6>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b34:	e01b      	b.n	8007b6e <HAL_TIM_PWM_Start+0xfe>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d104      	bne.n	8007b46 <HAL_TIM_PWM_Start+0xd6>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b44:	e013      	b.n	8007b6e <HAL_TIM_PWM_Start+0xfe>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b0c      	cmp	r3, #12
 8007b4a:	d104      	bne.n	8007b56 <HAL_TIM_PWM_Start+0xe6>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b54:	e00b      	b.n	8007b6e <HAL_TIM_PWM_Start+0xfe>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b10      	cmp	r3, #16
 8007b5a:	d104      	bne.n	8007b66 <HAL_TIM_PWM_Start+0xf6>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b64:	e003      	b.n	8007b6e <HAL_TIM_PWM_Start+0xfe>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2201      	movs	r2, #1
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f001 fd42 	bl	8009600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a3a      	ldr	r2, [pc, #232]	@ (8007c6c <HAL_TIM_PWM_Start+0x1fc>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d018      	beq.n	8007bb8 <HAL_TIM_PWM_Start+0x148>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a39      	ldr	r2, [pc, #228]	@ (8007c70 <HAL_TIM_PWM_Start+0x200>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d013      	beq.n	8007bb8 <HAL_TIM_PWM_Start+0x148>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a37      	ldr	r2, [pc, #220]	@ (8007c74 <HAL_TIM_PWM_Start+0x204>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d00e      	beq.n	8007bb8 <HAL_TIM_PWM_Start+0x148>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a36      	ldr	r2, [pc, #216]	@ (8007c78 <HAL_TIM_PWM_Start+0x208>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d009      	beq.n	8007bb8 <HAL_TIM_PWM_Start+0x148>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a34      	ldr	r2, [pc, #208]	@ (8007c7c <HAL_TIM_PWM_Start+0x20c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d004      	beq.n	8007bb8 <HAL_TIM_PWM_Start+0x148>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a33      	ldr	r2, [pc, #204]	@ (8007c80 <HAL_TIM_PWM_Start+0x210>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d101      	bne.n	8007bbc <HAL_TIM_PWM_Start+0x14c>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e000      	b.n	8007bbe <HAL_TIM_PWM_Start+0x14e>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d007      	beq.n	8007bd2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bd0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a25      	ldr	r2, [pc, #148]	@ (8007c6c <HAL_TIM_PWM_Start+0x1fc>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d022      	beq.n	8007c22 <HAL_TIM_PWM_Start+0x1b2>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007be4:	d01d      	beq.n	8007c22 <HAL_TIM_PWM_Start+0x1b2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a26      	ldr	r2, [pc, #152]	@ (8007c84 <HAL_TIM_PWM_Start+0x214>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d018      	beq.n	8007c22 <HAL_TIM_PWM_Start+0x1b2>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a24      	ldr	r2, [pc, #144]	@ (8007c88 <HAL_TIM_PWM_Start+0x218>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d013      	beq.n	8007c22 <HAL_TIM_PWM_Start+0x1b2>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a23      	ldr	r2, [pc, #140]	@ (8007c8c <HAL_TIM_PWM_Start+0x21c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d00e      	beq.n	8007c22 <HAL_TIM_PWM_Start+0x1b2>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a19      	ldr	r2, [pc, #100]	@ (8007c70 <HAL_TIM_PWM_Start+0x200>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d009      	beq.n	8007c22 <HAL_TIM_PWM_Start+0x1b2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a18      	ldr	r2, [pc, #96]	@ (8007c74 <HAL_TIM_PWM_Start+0x204>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d004      	beq.n	8007c22 <HAL_TIM_PWM_Start+0x1b2>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a18      	ldr	r2, [pc, #96]	@ (8007c80 <HAL_TIM_PWM_Start+0x210>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d115      	bne.n	8007c4e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689a      	ldr	r2, [r3, #8]
 8007c28:	4b19      	ldr	r3, [pc, #100]	@ (8007c90 <HAL_TIM_PWM_Start+0x220>)
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b06      	cmp	r3, #6
 8007c32:	d015      	beq.n	8007c60 <HAL_TIM_PWM_Start+0x1f0>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c3a:	d011      	beq.n	8007c60 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f042 0201 	orr.w	r2, r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4c:	e008      	b.n	8007c60 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f042 0201 	orr.w	r2, r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	e000      	b.n	8007c62 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	40012c00 	.word	0x40012c00
 8007c70:	40013400 	.word	0x40013400
 8007c74:	40014000 	.word	0x40014000
 8007c78:	40014400 	.word	0x40014400
 8007c7c:	40014800 	.word	0x40014800
 8007c80:	40015000 	.word	0x40015000
 8007c84:	40000400 	.word	0x40000400
 8007c88:	40000800 	.word	0x40000800
 8007c8c:	40000c00 	.word	0x40000c00
 8007c90:	00010007 	.word	0x00010007

08007c94 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e04c      	b.n	8007d42 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d111      	bne.n	8007cd8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 fcc5 	bl	800964c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d102      	bne.n	8007cd0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8007d4c <HAL_TIM_OnePulse_Init+0xb8>)
 8007cce:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4619      	mov	r1, r3
 8007cea:	4610      	mov	r0, r2
 8007cec:	f001 f80e 	bl	8008d0c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 0208 	bic.w	r2, r2, #8
 8007cfe:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6819      	ldr	r1, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	08007d51 	.word	0x08007d51

08007d50 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d8c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d108      	bne.n	8007da6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d105      	bne.n	8007da6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d9a:	7b7b      	ldrb	r3, [r7, #13]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d102      	bne.n	8007da6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007da0:	7b3b      	ldrb	r3, [r7, #12]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d001      	beq.n	8007daa <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e059      	b.n	8007e5e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2202      	movs	r2, #2
 8007dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2202      	movs	r2, #2
 8007db6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f042 0202 	orr.w	r2, r2, #2
 8007dd8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68da      	ldr	r2, [r3, #12]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f042 0204 	orr.w	r2, r2, #4
 8007de8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2201      	movs	r2, #1
 8007df0:	2100      	movs	r1, #0
 8007df2:	4618      	mov	r0, r3
 8007df4:	f001 fc04 	bl	8009600 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	2104      	movs	r1, #4
 8007e00:	4618      	mov	r0, r3
 8007e02:	f001 fbfd 	bl	8009600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a17      	ldr	r2, [pc, #92]	@ (8007e68 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d018      	beq.n	8007e42 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a15      	ldr	r2, [pc, #84]	@ (8007e6c <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d013      	beq.n	8007e42 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a14      	ldr	r2, [pc, #80]	@ (8007e70 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d00e      	beq.n	8007e42 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a12      	ldr	r2, [pc, #72]	@ (8007e74 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d009      	beq.n	8007e42 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a11      	ldr	r2, [pc, #68]	@ (8007e78 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d004      	beq.n	8007e42 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a0f      	ldr	r2, [pc, #60]	@ (8007e7c <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d101      	bne.n	8007e46 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007e46:	2300      	movs	r3, #0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d007      	beq.n	8007e5c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	40012c00 	.word	0x40012c00
 8007e6c:	40013400 	.word	0x40013400
 8007e70:	40014000 	.word	0x40014000
 8007e74:	40014400 	.word	0x40014400
 8007e78:	40014800 	.word	0x40014800
 8007e7c:	40015000 	.word	0x40015000

08007e80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e0a2      	b.n	8007fda <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d111      	bne.n	8007ec4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f001 fbcf 	bl	800964c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d102      	bne.n	8007ebc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a4a      	ldr	r2, [pc, #296]	@ (8007fe4 <HAL_TIM_Encoder_Init+0x164>)
 8007eba:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	6812      	ldr	r2, [r2, #0]
 8007ed6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007eda:	f023 0307 	bic.w	r3, r3, #7
 8007ede:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4610      	mov	r0, r2
 8007eec:	f000 ff0e 	bl	8008d0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f18:	f023 0303 	bic.w	r3, r3, #3
 8007f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	689a      	ldr	r2, [r3, #8]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	021b      	lsls	r3, r3, #8
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007f36:	f023 030c 	bic.w	r3, r3, #12
 8007f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	68da      	ldr	r2, [r3, #12]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	4313      	orrs	r3, r2
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	011a      	lsls	r2, r3, #4
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	031b      	lsls	r3, r3, #12
 8007f66:	4313      	orrs	r3, r2
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007f74:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007f7c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	011b      	lsls	r3, r3, #4
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	08003935 	.word	0x08003935

08007fe8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ff8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008000:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008008:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008010:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d110      	bne.n	800803a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d102      	bne.n	8008024 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800801e:	7b7b      	ldrb	r3, [r7, #13]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d001      	beq.n	8008028 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e069      	b.n	80080fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008038:	e031      	b.n	800809e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b04      	cmp	r3, #4
 800803e:	d110      	bne.n	8008062 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d102      	bne.n	800804c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008046:	7b3b      	ldrb	r3, [r7, #12]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d001      	beq.n	8008050 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e055      	b.n	80080fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008060:	e01d      	b.n	800809e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d108      	bne.n	800807a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d105      	bne.n	800807a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800806e:	7b7b      	ldrb	r3, [r7, #13]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d102      	bne.n	800807a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008074:	7b3b      	ldrb	r3, [r7, #12]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d001      	beq.n	800807e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e03e      	b.n	80080fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2202      	movs	r2, #2
 800808a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2202      	movs	r2, #2
 8008092:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2202      	movs	r2, #2
 800809a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <HAL_TIM_Encoder_Start+0xc4>
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	d008      	beq.n	80080bc <HAL_TIM_Encoder_Start+0xd4>
 80080aa:	e00f      	b.n	80080cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2201      	movs	r2, #1
 80080b2:	2100      	movs	r1, #0
 80080b4:	4618      	mov	r0, r3
 80080b6:	f001 faa3 	bl	8009600 <TIM_CCxChannelCmd>
      break;
 80080ba:	e016      	b.n	80080ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2201      	movs	r2, #1
 80080c2:	2104      	movs	r1, #4
 80080c4:	4618      	mov	r0, r3
 80080c6:	f001 fa9b 	bl	8009600 <TIM_CCxChannelCmd>
      break;
 80080ca:	e00e      	b.n	80080ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2201      	movs	r2, #1
 80080d2:	2100      	movs	r1, #0
 80080d4:	4618      	mov	r0, r3
 80080d6:	f001 fa93 	bl	8009600 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2201      	movs	r2, #1
 80080e0:	2104      	movs	r1, #4
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 fa8c 	bl	8009600 <TIM_CCxChannelCmd>
      break;
 80080e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f042 0201 	orr.w	r2, r2, #1
 80080f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <HAL_TIM_Encoder_Stop+0x18>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2b04      	cmp	r3, #4
 8008118:	d008      	beq.n	800812c <HAL_TIM_Encoder_Stop+0x28>
 800811a:	e00f      	b.n	800813c <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2200      	movs	r2, #0
 8008122:	2100      	movs	r1, #0
 8008124:	4618      	mov	r0, r3
 8008126:	f001 fa6b 	bl	8009600 <TIM_CCxChannelCmd>
      break;
 800812a:	e016      	b.n	800815a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2200      	movs	r2, #0
 8008132:	2104      	movs	r1, #4
 8008134:	4618      	mov	r0, r3
 8008136:	f001 fa63 	bl	8009600 <TIM_CCxChannelCmd>
      break;
 800813a:	e00e      	b.n	800815a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2200      	movs	r2, #0
 8008142:	2100      	movs	r1, #0
 8008144:	4618      	mov	r0, r3
 8008146:	f001 fa5b 	bl	8009600 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2200      	movs	r2, #0
 8008150:	2104      	movs	r1, #4
 8008152:	4618      	mov	r0, r3
 8008154:	f001 fa54 	bl	8009600 <TIM_CCxChannelCmd>
      break;
 8008158:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6a1a      	ldr	r2, [r3, #32]
 8008160:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008164:	4013      	ands	r3, r2
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10f      	bne.n	800818a <HAL_TIM_Encoder_Stop+0x86>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6a1a      	ldr	r2, [r3, #32]
 8008170:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008174:	4013      	ands	r3, r2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d107      	bne.n	800818a <HAL_TIM_Encoder_Stop+0x86>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 0201 	bic.w	r2, r2, #1
 8008188:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <HAL_TIM_Encoder_Stop+0x92>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b04      	cmp	r3, #4
 8008194:	d148      	bne.n	8008228 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d104      	bne.n	80081a6 <HAL_TIM_Encoder_Stop+0xa2>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081a4:	e023      	b.n	80081ee <HAL_TIM_Encoder_Stop+0xea>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b04      	cmp	r3, #4
 80081aa:	d104      	bne.n	80081b6 <HAL_TIM_Encoder_Stop+0xb2>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081b4:	e01b      	b.n	80081ee <HAL_TIM_Encoder_Stop+0xea>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d104      	bne.n	80081c6 <HAL_TIM_Encoder_Stop+0xc2>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081c4:	e013      	b.n	80081ee <HAL_TIM_Encoder_Stop+0xea>
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b0c      	cmp	r3, #12
 80081ca:	d104      	bne.n	80081d6 <HAL_TIM_Encoder_Stop+0xd2>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081d4:	e00b      	b.n	80081ee <HAL_TIM_Encoder_Stop+0xea>
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b10      	cmp	r3, #16
 80081da:	d104      	bne.n	80081e6 <HAL_TIM_Encoder_Stop+0xe2>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081e4:	e003      	b.n	80081ee <HAL_TIM_Encoder_Stop+0xea>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d104      	bne.n	80081fe <HAL_TIM_Encoder_Stop+0xfa>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081fc:	e024      	b.n	8008248 <HAL_TIM_Encoder_Stop+0x144>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b04      	cmp	r3, #4
 8008202:	d104      	bne.n	800820e <HAL_TIM_Encoder_Stop+0x10a>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800820c:	e01c      	b.n	8008248 <HAL_TIM_Encoder_Stop+0x144>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b08      	cmp	r3, #8
 8008212:	d104      	bne.n	800821e <HAL_TIM_Encoder_Stop+0x11a>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800821c:	e014      	b.n	8008248 <HAL_TIM_Encoder_Stop+0x144>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8008226:	e00f      	b.n	8008248 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f003 0302 	and.w	r3, r3, #2
 8008270:	2b00      	cmp	r3, #0
 8008272:	d026      	beq.n	80082c2 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f003 0302 	and.w	r3, r3, #2
 800827a:	2b00      	cmp	r3, #0
 800827c:	d021      	beq.n	80082c2 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f06f 0202 	mvn.w	r2, #2
 8008286:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	f003 0303 	and.w	r3, r3, #3
 8008298:	2b00      	cmp	r3, #0
 800829a:	d005      	beq.n	80082a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	4798      	blx	r3
 80082a6:	e009      	b.n	80082bc <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f003 0304 	and.w	r3, r3, #4
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d026      	beq.n	800831a <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d021      	beq.n	800831a <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f06f 0204 	mvn.w	r2, #4
 80082de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2202      	movs	r2, #2
 80082e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
 80082fe:	e009      	b.n	8008314 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f003 0308 	and.w	r3, r3, #8
 8008320:	2b00      	cmp	r3, #0
 8008322:	d026      	beq.n	8008372 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f003 0308 	and.w	r3, r3, #8
 800832a:	2b00      	cmp	r3, #0
 800832c:	d021      	beq.n	8008372 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f06f 0208 	mvn.w	r2, #8
 8008336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2204      	movs	r2, #4
 800833c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	f003 0303 	and.w	r3, r3, #3
 8008348:	2b00      	cmp	r3, #0
 800834a:	d005      	beq.n	8008358 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	4798      	blx	r3
 8008356:	e009      	b.n	800836c <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	f003 0310 	and.w	r3, r3, #16
 8008378:	2b00      	cmp	r3, #0
 800837a:	d026      	beq.n	80083ca <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f003 0310 	and.w	r3, r3, #16
 8008382:	2b00      	cmp	r3, #0
 8008384:	d021      	beq.n	80083ca <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f06f 0210 	mvn.w	r2, #16
 800838e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2208      	movs	r2, #8
 8008394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69db      	ldr	r3, [r3, #28]
 800839c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d005      	beq.n	80083b0 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	4798      	blx	r3
 80083ae:	e009      	b.n	80083c4 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f003 0301 	and.w	r3, r3, #1
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00e      	beq.n	80083f2 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d009      	beq.n	80083f2 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f06f 0201 	mvn.w	r2, #1
 80083e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d104      	bne.n	8008406 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00e      	beq.n	8008424 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800840c:	2b00      	cmp	r3, #0
 800840e:	d009      	beq.n	8008424 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00e      	beq.n	800844c <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008434:	2b00      	cmp	r3, #0
 8008436:	d009      	beq.n	800844c <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00e      	beq.n	8008474 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800845c:	2b00      	cmp	r3, #0
 800845e:	d009      	beq.n	8008474 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f003 0320 	and.w	r3, r3, #32
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00e      	beq.n	800849c <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b00      	cmp	r3, #0
 8008486:	d009      	beq.n	800849c <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f06f 0220 	mvn.w	r2, #32
 8008490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00e      	beq.n	80084c4 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d009      	beq.n	80084c4 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80084b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00e      	beq.n	80084ec <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d009      	beq.n	80084ec <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80084e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00e      	beq.n	8008514 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d009      	beq.n	8008514 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00e      	beq.n	800853c <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d009      	beq.n	800853c <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800853c:	bf00      	nop
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800855a:	2b01      	cmp	r3, #1
 800855c:	d101      	bne.n	8008562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800855e:	2302      	movs	r3, #2
 8008560:	e0ff      	b.n	8008762 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b14      	cmp	r3, #20
 800856e:	f200 80f0 	bhi.w	8008752 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008572:	a201      	add	r2, pc, #4	@ (adr r2, 8008578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	080085cd 	.word	0x080085cd
 800857c:	08008753 	.word	0x08008753
 8008580:	08008753 	.word	0x08008753
 8008584:	08008753 	.word	0x08008753
 8008588:	0800860d 	.word	0x0800860d
 800858c:	08008753 	.word	0x08008753
 8008590:	08008753 	.word	0x08008753
 8008594:	08008753 	.word	0x08008753
 8008598:	0800864f 	.word	0x0800864f
 800859c:	08008753 	.word	0x08008753
 80085a0:	08008753 	.word	0x08008753
 80085a4:	08008753 	.word	0x08008753
 80085a8:	0800868f 	.word	0x0800868f
 80085ac:	08008753 	.word	0x08008753
 80085b0:	08008753 	.word	0x08008753
 80085b4:	08008753 	.word	0x08008753
 80085b8:	080086d1 	.word	0x080086d1
 80085bc:	08008753 	.word	0x08008753
 80085c0:	08008753 	.word	0x08008753
 80085c4:	08008753 	.word	0x08008753
 80085c8:	08008711 	.word	0x08008711
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68b9      	ldr	r1, [r7, #8]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 fc4e 	bl	8008e74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	699a      	ldr	r2, [r3, #24]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f042 0208 	orr.w	r2, r2, #8
 80085e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	699a      	ldr	r2, [r3, #24]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 0204 	bic.w	r2, r2, #4
 80085f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	6999      	ldr	r1, [r3, #24]
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	691a      	ldr	r2, [r3, #16]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	619a      	str	r2, [r3, #24]
      break;
 800860a:	e0a5      	b.n	8008758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68b9      	ldr	r1, [r7, #8]
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fcc8 	bl	8008fa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699a      	ldr	r2, [r3, #24]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	699a      	ldr	r2, [r3, #24]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6999      	ldr	r1, [r3, #24]
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	021a      	lsls	r2, r3, #8
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	430a      	orrs	r2, r1
 800864a:	619a      	str	r2, [r3, #24]
      break;
 800864c:	e084      	b.n	8008758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68b9      	ldr	r1, [r7, #8]
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fd3b 	bl	80090d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	69da      	ldr	r2, [r3, #28]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f042 0208 	orr.w	r2, r2, #8
 8008668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	69da      	ldr	r2, [r3, #28]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f022 0204 	bic.w	r2, r2, #4
 8008678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	69d9      	ldr	r1, [r3, #28]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	691a      	ldr	r2, [r3, #16]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	430a      	orrs	r2, r1
 800868a:	61da      	str	r2, [r3, #28]
      break;
 800868c:	e064      	b.n	8008758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68b9      	ldr	r1, [r7, #8]
 8008694:	4618      	mov	r0, r3
 8008696:	f000 fdad 	bl	80091f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	69da      	ldr	r2, [r3, #28]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	69da      	ldr	r2, [r3, #28]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	69d9      	ldr	r1, [r3, #28]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	021a      	lsls	r2, r3, #8
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	430a      	orrs	r2, r1
 80086cc:	61da      	str	r2, [r3, #28]
      break;
 80086ce:	e043      	b.n	8008758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68b9      	ldr	r1, [r7, #8]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 fe20 	bl	800931c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0208 	orr.w	r2, r2, #8
 80086ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f022 0204 	bic.w	r2, r2, #4
 80086fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	691a      	ldr	r2, [r3, #16]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800870e:	e023      	b.n	8008758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fe6a 	bl	80093f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800872a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800873a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	021a      	lsls	r2, r3, #8
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008750:	e002      	b.n	8008758 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	75fb      	strb	r3, [r7, #23]
      break;
 8008756:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008760:	7dfb      	ldrb	r3, [r7, #23]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3718      	adds	r7, #24
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop

0800876c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <HAL_TIM_ConfigClockSource+0x1c>
 8008784:	2302      	movs	r3, #2
 8008786:	e0f6      	b.n	8008976 <HAL_TIM_ConfigClockSource+0x20a>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80087a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80087aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a6f      	ldr	r2, [pc, #444]	@ (8008980 <HAL_TIM_ConfigClockSource+0x214>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	f000 80c1 	beq.w	800894a <HAL_TIM_ConfigClockSource+0x1de>
 80087c8:	4a6d      	ldr	r2, [pc, #436]	@ (8008980 <HAL_TIM_ConfigClockSource+0x214>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	f200 80c6 	bhi.w	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 80087d0:	4a6c      	ldr	r2, [pc, #432]	@ (8008984 <HAL_TIM_ConfigClockSource+0x218>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	f000 80b9 	beq.w	800894a <HAL_TIM_ConfigClockSource+0x1de>
 80087d8:	4a6a      	ldr	r2, [pc, #424]	@ (8008984 <HAL_TIM_ConfigClockSource+0x218>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	f200 80be 	bhi.w	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 80087e0:	4a69      	ldr	r2, [pc, #420]	@ (8008988 <HAL_TIM_ConfigClockSource+0x21c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	f000 80b1 	beq.w	800894a <HAL_TIM_ConfigClockSource+0x1de>
 80087e8:	4a67      	ldr	r2, [pc, #412]	@ (8008988 <HAL_TIM_ConfigClockSource+0x21c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	f200 80b6 	bhi.w	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 80087f0:	4a66      	ldr	r2, [pc, #408]	@ (800898c <HAL_TIM_ConfigClockSource+0x220>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	f000 80a9 	beq.w	800894a <HAL_TIM_ConfigClockSource+0x1de>
 80087f8:	4a64      	ldr	r2, [pc, #400]	@ (800898c <HAL_TIM_ConfigClockSource+0x220>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	f200 80ae 	bhi.w	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 8008800:	4a63      	ldr	r2, [pc, #396]	@ (8008990 <HAL_TIM_ConfigClockSource+0x224>)
 8008802:	4293      	cmp	r3, r2
 8008804:	f000 80a1 	beq.w	800894a <HAL_TIM_ConfigClockSource+0x1de>
 8008808:	4a61      	ldr	r2, [pc, #388]	@ (8008990 <HAL_TIM_ConfigClockSource+0x224>)
 800880a:	4293      	cmp	r3, r2
 800880c:	f200 80a6 	bhi.w	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 8008810:	4a60      	ldr	r2, [pc, #384]	@ (8008994 <HAL_TIM_ConfigClockSource+0x228>)
 8008812:	4293      	cmp	r3, r2
 8008814:	f000 8099 	beq.w	800894a <HAL_TIM_ConfigClockSource+0x1de>
 8008818:	4a5e      	ldr	r2, [pc, #376]	@ (8008994 <HAL_TIM_ConfigClockSource+0x228>)
 800881a:	4293      	cmp	r3, r2
 800881c:	f200 809e 	bhi.w	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 8008820:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008824:	f000 8091 	beq.w	800894a <HAL_TIM_ConfigClockSource+0x1de>
 8008828:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800882c:	f200 8096 	bhi.w	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 8008830:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008834:	f000 8089 	beq.w	800894a <HAL_TIM_ConfigClockSource+0x1de>
 8008838:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800883c:	f200 808e 	bhi.w	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 8008840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008844:	d03e      	beq.n	80088c4 <HAL_TIM_ConfigClockSource+0x158>
 8008846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800884a:	f200 8087 	bhi.w	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 800884e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008852:	f000 8086 	beq.w	8008962 <HAL_TIM_ConfigClockSource+0x1f6>
 8008856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800885a:	d87f      	bhi.n	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 800885c:	2b70      	cmp	r3, #112	@ 0x70
 800885e:	d01a      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x12a>
 8008860:	2b70      	cmp	r3, #112	@ 0x70
 8008862:	d87b      	bhi.n	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 8008864:	2b60      	cmp	r3, #96	@ 0x60
 8008866:	d050      	beq.n	800890a <HAL_TIM_ConfigClockSource+0x19e>
 8008868:	2b60      	cmp	r3, #96	@ 0x60
 800886a:	d877      	bhi.n	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 800886c:	2b50      	cmp	r3, #80	@ 0x50
 800886e:	d03c      	beq.n	80088ea <HAL_TIM_ConfigClockSource+0x17e>
 8008870:	2b50      	cmp	r3, #80	@ 0x50
 8008872:	d873      	bhi.n	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 8008874:	2b40      	cmp	r3, #64	@ 0x40
 8008876:	d058      	beq.n	800892a <HAL_TIM_ConfigClockSource+0x1be>
 8008878:	2b40      	cmp	r3, #64	@ 0x40
 800887a:	d86f      	bhi.n	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 800887c:	2b30      	cmp	r3, #48	@ 0x30
 800887e:	d064      	beq.n	800894a <HAL_TIM_ConfigClockSource+0x1de>
 8008880:	2b30      	cmp	r3, #48	@ 0x30
 8008882:	d86b      	bhi.n	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 8008884:	2b20      	cmp	r3, #32
 8008886:	d060      	beq.n	800894a <HAL_TIM_ConfigClockSource+0x1de>
 8008888:	2b20      	cmp	r3, #32
 800888a:	d867      	bhi.n	800895c <HAL_TIM_ConfigClockSource+0x1f0>
 800888c:	2b00      	cmp	r3, #0
 800888e:	d05c      	beq.n	800894a <HAL_TIM_ConfigClockSource+0x1de>
 8008890:	2b10      	cmp	r3, #16
 8008892:	d05a      	beq.n	800894a <HAL_TIM_ConfigClockSource+0x1de>
 8008894:	e062      	b.n	800895c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088a6:	f000 fe8b 	bl	80095c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80088b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	609a      	str	r2, [r3, #8]
      break;
 80088c2:	e04f      	b.n	8008964 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088d4:	f000 fe74 	bl	80095c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689a      	ldr	r2, [r3, #8]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80088e6:	609a      	str	r2, [r3, #8]
      break;
 80088e8:	e03c      	b.n	8008964 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088f6:	461a      	mov	r2, r3
 80088f8:	f000 fde6 	bl	80094c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2150      	movs	r1, #80	@ 0x50
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fe3f 	bl	8009586 <TIM_ITRx_SetConfig>
      break;
 8008908:	e02c      	b.n	8008964 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008916:	461a      	mov	r2, r3
 8008918:	f000 fe05 	bl	8009526 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2160      	movs	r1, #96	@ 0x60
 8008922:	4618      	mov	r0, r3
 8008924:	f000 fe2f 	bl	8009586 <TIM_ITRx_SetConfig>
      break;
 8008928:	e01c      	b.n	8008964 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008936:	461a      	mov	r2, r3
 8008938:	f000 fdc6 	bl	80094c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2140      	movs	r1, #64	@ 0x40
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fe1f 	bl	8009586 <TIM_ITRx_SetConfig>
      break;
 8008948:	e00c      	b.n	8008964 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4619      	mov	r1, r3
 8008954:	4610      	mov	r0, r2
 8008956:	f000 fe16 	bl	8009586 <TIM_ITRx_SetConfig>
      break;
 800895a:	e003      	b.n	8008964 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	73fb      	strb	r3, [r7, #15]
      break;
 8008960:	e000      	b.n	8008964 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008962:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008974:	7bfb      	ldrb	r3, [r7, #15]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	00100070 	.word	0x00100070
 8008984:	00100060 	.word	0x00100060
 8008988:	00100050 	.word	0x00100050
 800898c:	00100040 	.word	0x00100040
 8008990:	00100030 	.word	0x00100030
 8008994:	00100020 	.word	0x00100020

08008998 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	460b      	mov	r3, r1
 8008a56:	607a      	str	r2, [r7, #4]
 8008a58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e14a      	b.n	8008cfe <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	f040 80dd 	bne.w	8008c30 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008a76:	7afb      	ldrb	r3, [r7, #11]
 8008a78:	2b1f      	cmp	r3, #31
 8008a7a:	f200 80d6 	bhi.w	8008c2a <HAL_TIM_RegisterCallback+0x1de>
 8008a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a84 <HAL_TIM_RegisterCallback+0x38>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008b05 	.word	0x08008b05
 8008a88:	08008b0d 	.word	0x08008b0d
 8008a8c:	08008b15 	.word	0x08008b15
 8008a90:	08008b1d 	.word	0x08008b1d
 8008a94:	08008b25 	.word	0x08008b25
 8008a98:	08008b2d 	.word	0x08008b2d
 8008a9c:	08008b35 	.word	0x08008b35
 8008aa0:	08008b3d 	.word	0x08008b3d
 8008aa4:	08008b45 	.word	0x08008b45
 8008aa8:	08008b4d 	.word	0x08008b4d
 8008aac:	08008b55 	.word	0x08008b55
 8008ab0:	08008b5d 	.word	0x08008b5d
 8008ab4:	08008b65 	.word	0x08008b65
 8008ab8:	08008b6d 	.word	0x08008b6d
 8008abc:	08008b77 	.word	0x08008b77
 8008ac0:	08008b81 	.word	0x08008b81
 8008ac4:	08008b8b 	.word	0x08008b8b
 8008ac8:	08008b95 	.word	0x08008b95
 8008acc:	08008b9f 	.word	0x08008b9f
 8008ad0:	08008ba9 	.word	0x08008ba9
 8008ad4:	08008bb3 	.word	0x08008bb3
 8008ad8:	08008bbd 	.word	0x08008bbd
 8008adc:	08008bc7 	.word	0x08008bc7
 8008ae0:	08008bd1 	.word	0x08008bd1
 8008ae4:	08008bdb 	.word	0x08008bdb
 8008ae8:	08008be5 	.word	0x08008be5
 8008aec:	08008bef 	.word	0x08008bef
 8008af0:	08008bf9 	.word	0x08008bf9
 8008af4:	08008c03 	.word	0x08008c03
 8008af8:	08008c0d 	.word	0x08008c0d
 8008afc:	08008c17 	.word	0x08008c17
 8008b00:	08008c21 	.word	0x08008c21
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008b0a:	e0f7      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008b12:	e0f3      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008b1a:	e0ef      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008b22:	e0eb      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008b2a:	e0e7      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008b32:	e0e3      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008b3a:	e0df      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008b42:	e0db      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008b4a:	e0d7      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008b52:	e0d3      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008b5a:	e0cf      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008b62:	e0cb      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008b6a:	e0c7      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008b74:	e0c2      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008b7e:	e0bd      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008b88:	e0b8      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008b92:	e0b3      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008b9c:	e0ae      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008ba6:	e0a9      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008bb0:	e0a4      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008bba:	e09f      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008bc4:	e09a      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008bce:	e095      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008bd8:	e090      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008be2:	e08b      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008bec:	e086      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008bf6:	e081      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008c00:	e07c      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008c0a:	e077      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008c14:	e072      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008c1e:	e06d      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008c28:	e068      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	75fb      	strb	r3, [r7, #23]
        break;
 8008c2e:	e065      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d15d      	bne.n	8008cf8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008c3c:	7afb      	ldrb	r3, [r7, #11]
 8008c3e:	2b0d      	cmp	r3, #13
 8008c40:	d857      	bhi.n	8008cf2 <HAL_TIM_RegisterCallback+0x2a6>
 8008c42:	a201      	add	r2, pc, #4	@ (adr r2, 8008c48 <HAL_TIM_RegisterCallback+0x1fc>)
 8008c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c48:	08008c81 	.word	0x08008c81
 8008c4c:	08008c89 	.word	0x08008c89
 8008c50:	08008c91 	.word	0x08008c91
 8008c54:	08008c99 	.word	0x08008c99
 8008c58:	08008ca1 	.word	0x08008ca1
 8008c5c:	08008ca9 	.word	0x08008ca9
 8008c60:	08008cb1 	.word	0x08008cb1
 8008c64:	08008cb9 	.word	0x08008cb9
 8008c68:	08008cc1 	.word	0x08008cc1
 8008c6c:	08008cc9 	.word	0x08008cc9
 8008c70:	08008cd1 	.word	0x08008cd1
 8008c74:	08008cd9 	.word	0x08008cd9
 8008c78:	08008ce1 	.word	0x08008ce1
 8008c7c:	08008ce9 	.word	0x08008ce9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008c86:	e039      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008c8e:	e035      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008c96:	e031      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008c9e:	e02d      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008ca6:	e029      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008cae:	e025      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008cb6:	e021      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008cbe:	e01d      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008cc6:	e019      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008cce:	e015      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008cd6:	e011      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008cde:	e00d      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008ce6:	e009      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008cf0:	e004      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	75fb      	strb	r3, [r7, #23]
        break;
 8008cf6:	e001      	b.n	8008cfc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	371c      	adds	r7, #28
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop

08008d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a4c      	ldr	r2, [pc, #304]	@ (8008e50 <TIM_Base_SetConfig+0x144>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d017      	beq.n	8008d54 <TIM_Base_SetConfig+0x48>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d2a:	d013      	beq.n	8008d54 <TIM_Base_SetConfig+0x48>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a49      	ldr	r2, [pc, #292]	@ (8008e54 <TIM_Base_SetConfig+0x148>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d00f      	beq.n	8008d54 <TIM_Base_SetConfig+0x48>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a48      	ldr	r2, [pc, #288]	@ (8008e58 <TIM_Base_SetConfig+0x14c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d00b      	beq.n	8008d54 <TIM_Base_SetConfig+0x48>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a47      	ldr	r2, [pc, #284]	@ (8008e5c <TIM_Base_SetConfig+0x150>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d007      	beq.n	8008d54 <TIM_Base_SetConfig+0x48>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a46      	ldr	r2, [pc, #280]	@ (8008e60 <TIM_Base_SetConfig+0x154>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d003      	beq.n	8008d54 <TIM_Base_SetConfig+0x48>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a45      	ldr	r2, [pc, #276]	@ (8008e64 <TIM_Base_SetConfig+0x158>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d108      	bne.n	8008d66 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a39      	ldr	r2, [pc, #228]	@ (8008e50 <TIM_Base_SetConfig+0x144>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d023      	beq.n	8008db6 <TIM_Base_SetConfig+0xaa>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d74:	d01f      	beq.n	8008db6 <TIM_Base_SetConfig+0xaa>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a36      	ldr	r2, [pc, #216]	@ (8008e54 <TIM_Base_SetConfig+0x148>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d01b      	beq.n	8008db6 <TIM_Base_SetConfig+0xaa>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a35      	ldr	r2, [pc, #212]	@ (8008e58 <TIM_Base_SetConfig+0x14c>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d017      	beq.n	8008db6 <TIM_Base_SetConfig+0xaa>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a34      	ldr	r2, [pc, #208]	@ (8008e5c <TIM_Base_SetConfig+0x150>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d013      	beq.n	8008db6 <TIM_Base_SetConfig+0xaa>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a33      	ldr	r2, [pc, #204]	@ (8008e60 <TIM_Base_SetConfig+0x154>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d00f      	beq.n	8008db6 <TIM_Base_SetConfig+0xaa>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a33      	ldr	r2, [pc, #204]	@ (8008e68 <TIM_Base_SetConfig+0x15c>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d00b      	beq.n	8008db6 <TIM_Base_SetConfig+0xaa>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a32      	ldr	r2, [pc, #200]	@ (8008e6c <TIM_Base_SetConfig+0x160>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d007      	beq.n	8008db6 <TIM_Base_SetConfig+0xaa>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a31      	ldr	r2, [pc, #196]	@ (8008e70 <TIM_Base_SetConfig+0x164>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d003      	beq.n	8008db6 <TIM_Base_SetConfig+0xaa>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a2c      	ldr	r2, [pc, #176]	@ (8008e64 <TIM_Base_SetConfig+0x158>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d108      	bne.n	8008dc8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	689a      	ldr	r2, [r3, #8]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a18      	ldr	r2, [pc, #96]	@ (8008e50 <TIM_Base_SetConfig+0x144>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d013      	beq.n	8008e1c <TIM_Base_SetConfig+0x110>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a1a      	ldr	r2, [pc, #104]	@ (8008e60 <TIM_Base_SetConfig+0x154>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d00f      	beq.n	8008e1c <TIM_Base_SetConfig+0x110>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8008e68 <TIM_Base_SetConfig+0x15c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d00b      	beq.n	8008e1c <TIM_Base_SetConfig+0x110>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a19      	ldr	r2, [pc, #100]	@ (8008e6c <TIM_Base_SetConfig+0x160>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d007      	beq.n	8008e1c <TIM_Base_SetConfig+0x110>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a18      	ldr	r2, [pc, #96]	@ (8008e70 <TIM_Base_SetConfig+0x164>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d003      	beq.n	8008e1c <TIM_Base_SetConfig+0x110>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a13      	ldr	r2, [pc, #76]	@ (8008e64 <TIM_Base_SetConfig+0x158>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d103      	bne.n	8008e24 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	691a      	ldr	r2, [r3, #16]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d105      	bne.n	8008e42 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f023 0201 	bic.w	r2, r3, #1
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	611a      	str	r2, [r3, #16]
  }
}
 8008e42:	bf00      	nop
 8008e44:	3714      	adds	r7, #20
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	40012c00 	.word	0x40012c00
 8008e54:	40000400 	.word	0x40000400
 8008e58:	40000800 	.word	0x40000800
 8008e5c:	40000c00 	.word	0x40000c00
 8008e60:	40013400 	.word	0x40013400
 8008e64:	40015000 	.word	0x40015000
 8008e68:	40014000 	.word	0x40014000
 8008e6c:	40014400 	.word	0x40014400
 8008e70:	40014800 	.word	0x40014800

08008e74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a1b      	ldr	r3, [r3, #32]
 8008e88:	f023 0201 	bic.w	r2, r3, #1
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	699b      	ldr	r3, [r3, #24]
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f023 0303 	bic.w	r3, r3, #3
 8008eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f023 0302 	bic.w	r3, r3, #2
 8008ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a30      	ldr	r2, [pc, #192]	@ (8008f90 <TIM_OC1_SetConfig+0x11c>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d013      	beq.n	8008efc <TIM_OC1_SetConfig+0x88>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8008f94 <TIM_OC1_SetConfig+0x120>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d00f      	beq.n	8008efc <TIM_OC1_SetConfig+0x88>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a2e      	ldr	r2, [pc, #184]	@ (8008f98 <TIM_OC1_SetConfig+0x124>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d00b      	beq.n	8008efc <TIM_OC1_SetConfig+0x88>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8008f9c <TIM_OC1_SetConfig+0x128>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d007      	beq.n	8008efc <TIM_OC1_SetConfig+0x88>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a2c      	ldr	r2, [pc, #176]	@ (8008fa0 <TIM_OC1_SetConfig+0x12c>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d003      	beq.n	8008efc <TIM_OC1_SetConfig+0x88>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a2b      	ldr	r2, [pc, #172]	@ (8008fa4 <TIM_OC1_SetConfig+0x130>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d10c      	bne.n	8008f16 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f023 0308 	bic.w	r3, r3, #8
 8008f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f023 0304 	bic.w	r3, r3, #4
 8008f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a1d      	ldr	r2, [pc, #116]	@ (8008f90 <TIM_OC1_SetConfig+0x11c>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d013      	beq.n	8008f46 <TIM_OC1_SetConfig+0xd2>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a1c      	ldr	r2, [pc, #112]	@ (8008f94 <TIM_OC1_SetConfig+0x120>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d00f      	beq.n	8008f46 <TIM_OC1_SetConfig+0xd2>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a1b      	ldr	r2, [pc, #108]	@ (8008f98 <TIM_OC1_SetConfig+0x124>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d00b      	beq.n	8008f46 <TIM_OC1_SetConfig+0xd2>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a1a      	ldr	r2, [pc, #104]	@ (8008f9c <TIM_OC1_SetConfig+0x128>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d007      	beq.n	8008f46 <TIM_OC1_SetConfig+0xd2>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a19      	ldr	r2, [pc, #100]	@ (8008fa0 <TIM_OC1_SetConfig+0x12c>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d003      	beq.n	8008f46 <TIM_OC1_SetConfig+0xd2>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a18      	ldr	r2, [pc, #96]	@ (8008fa4 <TIM_OC1_SetConfig+0x130>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d111      	bne.n	8008f6a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	685a      	ldr	r2, [r3, #4]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	621a      	str	r2, [r3, #32]
}
 8008f84:	bf00      	nop
 8008f86:	371c      	adds	r7, #28
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	40012c00 	.word	0x40012c00
 8008f94:	40013400 	.word	0x40013400
 8008f98:	40014000 	.word	0x40014000
 8008f9c:	40014400 	.word	0x40014400
 8008fa0:	40014800 	.word	0x40014800
 8008fa4:	40015000 	.word	0x40015000

08008fa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b087      	sub	sp, #28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a1b      	ldr	r3, [r3, #32]
 8008fbc:	f023 0210 	bic.w	r2, r3, #16
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	021b      	lsls	r3, r3, #8
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	f023 0320 	bic.w	r3, r3, #32
 8008ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	011b      	lsls	r3, r3, #4
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	4313      	orrs	r3, r2
 8009002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a2c      	ldr	r2, [pc, #176]	@ (80090b8 <TIM_OC2_SetConfig+0x110>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d007      	beq.n	800901c <TIM_OC2_SetConfig+0x74>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a2b      	ldr	r2, [pc, #172]	@ (80090bc <TIM_OC2_SetConfig+0x114>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d003      	beq.n	800901c <TIM_OC2_SetConfig+0x74>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a2a      	ldr	r2, [pc, #168]	@ (80090c0 <TIM_OC2_SetConfig+0x118>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d10d      	bne.n	8009038 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	011b      	lsls	r3, r3, #4
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	4313      	orrs	r3, r2
 800902e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009036:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a1f      	ldr	r2, [pc, #124]	@ (80090b8 <TIM_OC2_SetConfig+0x110>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d013      	beq.n	8009068 <TIM_OC2_SetConfig+0xc0>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a1e      	ldr	r2, [pc, #120]	@ (80090bc <TIM_OC2_SetConfig+0x114>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d00f      	beq.n	8009068 <TIM_OC2_SetConfig+0xc0>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a1e      	ldr	r2, [pc, #120]	@ (80090c4 <TIM_OC2_SetConfig+0x11c>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d00b      	beq.n	8009068 <TIM_OC2_SetConfig+0xc0>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a1d      	ldr	r2, [pc, #116]	@ (80090c8 <TIM_OC2_SetConfig+0x120>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d007      	beq.n	8009068 <TIM_OC2_SetConfig+0xc0>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a1c      	ldr	r2, [pc, #112]	@ (80090cc <TIM_OC2_SetConfig+0x124>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d003      	beq.n	8009068 <TIM_OC2_SetConfig+0xc0>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a17      	ldr	r2, [pc, #92]	@ (80090c0 <TIM_OC2_SetConfig+0x118>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d113      	bne.n	8009090 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800906e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	4313      	orrs	r3, r2
 8009082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	693a      	ldr	r2, [r7, #16]
 800908c:	4313      	orrs	r3, r2
 800908e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	621a      	str	r2, [r3, #32]
}
 80090aa:	bf00      	nop
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	40012c00 	.word	0x40012c00
 80090bc:	40013400 	.word	0x40013400
 80090c0:	40015000 	.word	0x40015000
 80090c4:	40014000 	.word	0x40014000
 80090c8:	40014400 	.word	0x40014400
 80090cc:	40014800 	.word	0x40014800

080090d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a1b      	ldr	r3, [r3, #32]
 80090e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f023 0303 	bic.w	r3, r3, #3
 800910a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	4313      	orrs	r3, r2
 8009114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800911c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	021b      	lsls	r3, r3, #8
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	4313      	orrs	r3, r2
 8009128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a2b      	ldr	r2, [pc, #172]	@ (80091dc <TIM_OC3_SetConfig+0x10c>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d007      	beq.n	8009142 <TIM_OC3_SetConfig+0x72>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a2a      	ldr	r2, [pc, #168]	@ (80091e0 <TIM_OC3_SetConfig+0x110>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d003      	beq.n	8009142 <TIM_OC3_SetConfig+0x72>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a29      	ldr	r2, [pc, #164]	@ (80091e4 <TIM_OC3_SetConfig+0x114>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d10d      	bne.n	800915e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	021b      	lsls	r3, r3, #8
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	4313      	orrs	r3, r2
 8009154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800915c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a1e      	ldr	r2, [pc, #120]	@ (80091dc <TIM_OC3_SetConfig+0x10c>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d013      	beq.n	800918e <TIM_OC3_SetConfig+0xbe>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a1d      	ldr	r2, [pc, #116]	@ (80091e0 <TIM_OC3_SetConfig+0x110>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d00f      	beq.n	800918e <TIM_OC3_SetConfig+0xbe>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a1d      	ldr	r2, [pc, #116]	@ (80091e8 <TIM_OC3_SetConfig+0x118>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d00b      	beq.n	800918e <TIM_OC3_SetConfig+0xbe>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a1c      	ldr	r2, [pc, #112]	@ (80091ec <TIM_OC3_SetConfig+0x11c>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d007      	beq.n	800918e <TIM_OC3_SetConfig+0xbe>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a1b      	ldr	r2, [pc, #108]	@ (80091f0 <TIM_OC3_SetConfig+0x120>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d003      	beq.n	800918e <TIM_OC3_SetConfig+0xbe>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a16      	ldr	r2, [pc, #88]	@ (80091e4 <TIM_OC3_SetConfig+0x114>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d113      	bne.n	80091b6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800919c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	011b      	lsls	r3, r3, #4
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	621a      	str	r2, [r3, #32]
}
 80091d0:	bf00      	nop
 80091d2:	371c      	adds	r7, #28
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	40012c00 	.word	0x40012c00
 80091e0:	40013400 	.word	0x40013400
 80091e4:	40015000 	.word	0x40015000
 80091e8:	40014000 	.word	0x40014000
 80091ec:	40014400 	.word	0x40014400
 80091f0:	40014800 	.word	0x40014800

080091f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a1b      	ldr	r3, [r3, #32]
 8009202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a1b      	ldr	r3, [r3, #32]
 8009208:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	69db      	ldr	r3, [r3, #28]
 800921a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800922e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	021b      	lsls	r3, r3, #8
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	031b      	lsls	r3, r3, #12
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	4313      	orrs	r3, r2
 800924e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a2c      	ldr	r2, [pc, #176]	@ (8009304 <TIM_OC4_SetConfig+0x110>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d007      	beq.n	8009268 <TIM_OC4_SetConfig+0x74>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a2b      	ldr	r2, [pc, #172]	@ (8009308 <TIM_OC4_SetConfig+0x114>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d003      	beq.n	8009268 <TIM_OC4_SetConfig+0x74>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a2a      	ldr	r2, [pc, #168]	@ (800930c <TIM_OC4_SetConfig+0x118>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d10d      	bne.n	8009284 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800926e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	031b      	lsls	r3, r3, #12
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	4313      	orrs	r3, r2
 800927a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009282:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a1f      	ldr	r2, [pc, #124]	@ (8009304 <TIM_OC4_SetConfig+0x110>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d013      	beq.n	80092b4 <TIM_OC4_SetConfig+0xc0>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a1e      	ldr	r2, [pc, #120]	@ (8009308 <TIM_OC4_SetConfig+0x114>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d00f      	beq.n	80092b4 <TIM_OC4_SetConfig+0xc0>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a1e      	ldr	r2, [pc, #120]	@ (8009310 <TIM_OC4_SetConfig+0x11c>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d00b      	beq.n	80092b4 <TIM_OC4_SetConfig+0xc0>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a1d      	ldr	r2, [pc, #116]	@ (8009314 <TIM_OC4_SetConfig+0x120>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d007      	beq.n	80092b4 <TIM_OC4_SetConfig+0xc0>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009318 <TIM_OC4_SetConfig+0x124>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d003      	beq.n	80092b4 <TIM_OC4_SetConfig+0xc0>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a17      	ldr	r2, [pc, #92]	@ (800930c <TIM_OC4_SetConfig+0x118>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d113      	bne.n	80092dc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092ba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80092c2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	019b      	lsls	r3, r3, #6
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	019b      	lsls	r3, r3, #6
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	4313      	orrs	r3, r2
 80092da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	621a      	str	r2, [r3, #32]
}
 80092f6:	bf00      	nop
 80092f8:	371c      	adds	r7, #28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	40012c00 	.word	0x40012c00
 8009308:	40013400 	.word	0x40013400
 800930c:	40015000 	.word	0x40015000
 8009310:	40014000 	.word	0x40014000
 8009314:	40014400 	.word	0x40014400
 8009318:	40014800 	.word	0x40014800

0800931c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a1b      	ldr	r3, [r3, #32]
 8009330:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800934a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800934e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	4313      	orrs	r3, r2
 8009358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009360:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	041b      	lsls	r3, r3, #16
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	4313      	orrs	r3, r2
 800936c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a19      	ldr	r2, [pc, #100]	@ (80093d8 <TIM_OC5_SetConfig+0xbc>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d013      	beq.n	800939e <TIM_OC5_SetConfig+0x82>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a18      	ldr	r2, [pc, #96]	@ (80093dc <TIM_OC5_SetConfig+0xc0>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d00f      	beq.n	800939e <TIM_OC5_SetConfig+0x82>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a17      	ldr	r2, [pc, #92]	@ (80093e0 <TIM_OC5_SetConfig+0xc4>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d00b      	beq.n	800939e <TIM_OC5_SetConfig+0x82>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a16      	ldr	r2, [pc, #88]	@ (80093e4 <TIM_OC5_SetConfig+0xc8>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d007      	beq.n	800939e <TIM_OC5_SetConfig+0x82>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a15      	ldr	r2, [pc, #84]	@ (80093e8 <TIM_OC5_SetConfig+0xcc>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d003      	beq.n	800939e <TIM_OC5_SetConfig+0x82>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a14      	ldr	r2, [pc, #80]	@ (80093ec <TIM_OC5_SetConfig+0xd0>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d109      	bne.n	80093b2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	021b      	lsls	r3, r3, #8
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	621a      	str	r2, [r3, #32]
}
 80093cc:	bf00      	nop
 80093ce:	371c      	adds	r7, #28
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	40012c00 	.word	0x40012c00
 80093dc:	40013400 	.word	0x40013400
 80093e0:	40014000 	.word	0x40014000
 80093e4:	40014400 	.word	0x40014400
 80093e8:	40014800 	.word	0x40014800
 80093ec:	40015000 	.word	0x40015000

080093f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b087      	sub	sp, #28
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a1b      	ldr	r3, [r3, #32]
 8009404:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800941e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	021b      	lsls	r3, r3, #8
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	4313      	orrs	r3, r2
 800942e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	051b      	lsls	r3, r3, #20
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	4313      	orrs	r3, r2
 8009442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a1a      	ldr	r2, [pc, #104]	@ (80094b0 <TIM_OC6_SetConfig+0xc0>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d013      	beq.n	8009474 <TIM_OC6_SetConfig+0x84>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a19      	ldr	r2, [pc, #100]	@ (80094b4 <TIM_OC6_SetConfig+0xc4>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d00f      	beq.n	8009474 <TIM_OC6_SetConfig+0x84>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a18      	ldr	r2, [pc, #96]	@ (80094b8 <TIM_OC6_SetConfig+0xc8>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d00b      	beq.n	8009474 <TIM_OC6_SetConfig+0x84>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a17      	ldr	r2, [pc, #92]	@ (80094bc <TIM_OC6_SetConfig+0xcc>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d007      	beq.n	8009474 <TIM_OC6_SetConfig+0x84>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a16      	ldr	r2, [pc, #88]	@ (80094c0 <TIM_OC6_SetConfig+0xd0>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d003      	beq.n	8009474 <TIM_OC6_SetConfig+0x84>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a15      	ldr	r2, [pc, #84]	@ (80094c4 <TIM_OC6_SetConfig+0xd4>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d109      	bne.n	8009488 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800947a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	695b      	ldr	r3, [r3, #20]
 8009480:	029b      	lsls	r3, r3, #10
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	4313      	orrs	r3, r2
 8009486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	685a      	ldr	r2, [r3, #4]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	621a      	str	r2, [r3, #32]
}
 80094a2:	bf00      	nop
 80094a4:	371c      	adds	r7, #28
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	40012c00 	.word	0x40012c00
 80094b4:	40013400 	.word	0x40013400
 80094b8:	40014000 	.word	0x40014000
 80094bc:	40014400 	.word	0x40014400
 80094c0:	40014800 	.word	0x40014800
 80094c4:	40015000 	.word	0x40015000

080094c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b087      	sub	sp, #28
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6a1b      	ldr	r3, [r3, #32]
 80094d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	f023 0201 	bic.w	r2, r3, #1
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80094f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f023 030a 	bic.w	r3, r3, #10
 8009504:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009506:	697a      	ldr	r2, [r7, #20]
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	4313      	orrs	r3, r2
 800950c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	621a      	str	r2, [r3, #32]
}
 800951a:	bf00      	nop
 800951c:	371c      	adds	r7, #28
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009526:	b480      	push	{r7}
 8009528:	b087      	sub	sp, #28
 800952a:	af00      	add	r7, sp, #0
 800952c:	60f8      	str	r0, [r7, #12]
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	f023 0210 	bic.w	r2, r3, #16
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009550:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	031b      	lsls	r3, r3, #12
 8009556:	693a      	ldr	r2, [r7, #16]
 8009558:	4313      	orrs	r3, r2
 800955a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009562:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	011b      	lsls	r3, r3, #4
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	4313      	orrs	r3, r2
 800956c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	621a      	str	r2, [r3, #32]
}
 800957a:	bf00      	nop
 800957c:	371c      	adds	r7, #28
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr

08009586 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009586:	b480      	push	{r7}
 8009588:	b085      	sub	sp, #20
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800959c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	f043 0307 	orr.w	r3, r3, #7
 80095ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	609a      	str	r2, [r3, #8]
}
 80095b4:	bf00      	nop
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80095da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	021a      	lsls	r2, r3, #8
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	431a      	orrs	r2, r3
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	697a      	ldr	r2, [r7, #20]
 80095f2:	609a      	str	r2, [r3, #8]
}
 80095f4:	bf00      	nop
 80095f6:	371c      	adds	r7, #28
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009600:	b480      	push	{r7}
 8009602:	b087      	sub	sp, #28
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	f003 031f 	and.w	r3, r3, #31
 8009612:	2201      	movs	r2, #1
 8009614:	fa02 f303 	lsl.w	r3, r2, r3
 8009618:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6a1a      	ldr	r2, [r3, #32]
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	43db      	mvns	r3, r3
 8009622:	401a      	ands	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6a1a      	ldr	r2, [r3, #32]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	f003 031f 	and.w	r3, r3, #31
 8009632:	6879      	ldr	r1, [r7, #4]
 8009634:	fa01 f303 	lsl.w	r3, r1, r3
 8009638:	431a      	orrs	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	621a      	str	r2, [r3, #32]
}
 800963e:	bf00      	nop
 8009640:	371c      	adds	r7, #28
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
	...

0800964c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a26      	ldr	r2, [pc, #152]	@ (80096f0 <TIM_ResetCallback+0xa4>)
 8009658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a25      	ldr	r2, [pc, #148]	@ (80096f4 <TIM_ResetCallback+0xa8>)
 8009660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a24      	ldr	r2, [pc, #144]	@ (80096f8 <TIM_ResetCallback+0xac>)
 8009668:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a23      	ldr	r2, [pc, #140]	@ (80096fc <TIM_ResetCallback+0xb0>)
 8009670:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a22      	ldr	r2, [pc, #136]	@ (8009700 <TIM_ResetCallback+0xb4>)
 8009678:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a21      	ldr	r2, [pc, #132]	@ (8009704 <TIM_ResetCallback+0xb8>)
 8009680:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a20      	ldr	r2, [pc, #128]	@ (8009708 <TIM_ResetCallback+0xbc>)
 8009688:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a1f      	ldr	r2, [pc, #124]	@ (800970c <TIM_ResetCallback+0xc0>)
 8009690:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a1e      	ldr	r2, [pc, #120]	@ (8009710 <TIM_ResetCallback+0xc4>)
 8009698:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a1d      	ldr	r2, [pc, #116]	@ (8009714 <TIM_ResetCallback+0xc8>)
 80096a0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009718 <TIM_ResetCallback+0xcc>)
 80096a8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a1b      	ldr	r2, [pc, #108]	@ (800971c <TIM_ResetCallback+0xd0>)
 80096b0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a1a      	ldr	r2, [pc, #104]	@ (8009720 <TIM_ResetCallback+0xd4>)
 80096b8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a19      	ldr	r2, [pc, #100]	@ (8009724 <TIM_ResetCallback+0xd8>)
 80096c0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a18      	ldr	r2, [pc, #96]	@ (8009728 <TIM_ResetCallback+0xdc>)
 80096c8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a17      	ldr	r2, [pc, #92]	@ (800972c <TIM_ResetCallback+0xe0>)
 80096d0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a16      	ldr	r2, [pc, #88]	@ (8009730 <TIM_ResetCallback+0xe4>)
 80096d8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a15      	ldr	r2, [pc, #84]	@ (8009734 <TIM_ResetCallback+0xe8>)
 80096e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	08002789 	.word	0x08002789
 80096f4:	08008999 	.word	0x08008999
 80096f8:	08008a11 	.word	0x08008a11
 80096fc:	08008a25 	.word	0x08008a25
 8009700:	080089c1 	.word	0x080089c1
 8009704:	080089d5 	.word	0x080089d5
 8009708:	080089ad 	.word	0x080089ad
 800970c:	080089e9 	.word	0x080089e9
 8009710:	080089fd 	.word	0x080089fd
 8009714:	08008a39 	.word	0x08008a39
 8009718:	0800998d 	.word	0x0800998d
 800971c:	080099a1 	.word	0x080099a1
 8009720:	080099b5 	.word	0x080099b5
 8009724:	080099c9 	.word	0x080099c9
 8009728:	080099dd 	.word	0x080099dd
 800972c:	080099f1 	.word	0x080099f1
 8009730:	08009a05 	.word	0x08009a05
 8009734:	08009a19 	.word	0x08009a19

08009738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009748:	2b01      	cmp	r3, #1
 800974a:	d101      	bne.n	8009750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800974c:	2302      	movs	r3, #2
 800974e:	e074      	b.n	800983a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2202      	movs	r2, #2
 800975c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a34      	ldr	r2, [pc, #208]	@ (8009848 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d009      	beq.n	800978e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a33      	ldr	r2, [pc, #204]	@ (800984c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d004      	beq.n	800978e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a31      	ldr	r2, [pc, #196]	@ (8009850 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d108      	bne.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009794:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	4313      	orrs	r3, r2
 800979e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80097a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a21      	ldr	r2, [pc, #132]	@ (8009848 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d022      	beq.n	800980e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097d0:	d01d      	beq.n	800980e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009854 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d018      	beq.n	800980e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009858 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d013      	beq.n	800980e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a1c      	ldr	r2, [pc, #112]	@ (800985c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d00e      	beq.n	800980e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a15      	ldr	r2, [pc, #84]	@ (800984c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d009      	beq.n	800980e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a18      	ldr	r2, [pc, #96]	@ (8009860 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d004      	beq.n	800980e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a11      	ldr	r2, [pc, #68]	@ (8009850 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d10c      	bne.n	8009828 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	4313      	orrs	r3, r2
 800981e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	40012c00 	.word	0x40012c00
 800984c:	40013400 	.word	0x40013400
 8009850:	40015000 	.word	0x40015000
 8009854:	40000400 	.word	0x40000400
 8009858:	40000800 	.word	0x40000800
 800985c:	40000c00 	.word	0x40000c00
 8009860:	40014000 	.word	0x40014000

08009864 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800986e:	2300      	movs	r3, #0
 8009870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009878:	2b01      	cmp	r3, #1
 800987a:	d101      	bne.n	8009880 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800987c:	2302      	movs	r3, #2
 800987e:	e078      	b.n	8009972 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	4313      	orrs	r3, r2
 8009894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4313      	orrs	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	695b      	ldr	r3, [r3, #20]
 80098d8:	4313      	orrs	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098e6:	4313      	orrs	r3, r2
 80098e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	041b      	lsls	r3, r3, #16
 80098f6:	4313      	orrs	r3, r2
 80098f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	4313      	orrs	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a1c      	ldr	r2, [pc, #112]	@ (8009980 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d009      	beq.n	8009926 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a1b      	ldr	r2, [pc, #108]	@ (8009984 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d004      	beq.n	8009926 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a19      	ldr	r2, [pc, #100]	@ (8009988 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d11c      	bne.n	8009960 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009930:	051b      	lsls	r3, r3, #20
 8009932:	4313      	orrs	r3, r2
 8009934:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	6a1b      	ldr	r3, [r3, #32]
 8009940:	4313      	orrs	r3, r2
 8009942:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800994e:	4313      	orrs	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800995c:	4313      	orrs	r3, r2
 800995e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	40012c00 	.word	0x40012c00
 8009984:	40013400 	.word	0x40013400
 8009988:	40015000 	.word	0x40015000

0800998c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e050      	b.n	8009ae0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d114      	bne.n	8009a72 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fdc5 	bl	800a5e0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d103      	bne.n	8009a68 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a21      	ldr	r2, [pc, #132]	@ (8009ae8 <HAL_UART_Init+0xbc>)
 8009a64:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2224      	movs	r2, #36	@ 0x24
 8009a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f022 0201 	bic.w	r2, r2, #1
 8009a88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d002      	beq.n	8009a98 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f001 f8f2 	bl	800ac7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fdf3 	bl	800a684 <UART_SetConfig>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d101      	bne.n	8009aa8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e01b      	b.n	8009ae0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	685a      	ldr	r2, [r3, #4]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	689a      	ldr	r2, [r3, #8]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f042 0201 	orr.w	r2, r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f001 f971 	bl	800adc0 <UART_CheckIdleState>
 8009ade:	4603      	mov	r3, r0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	08003a3d 	.word	0x08003a3d

08009aec <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	460b      	mov	r3, r1
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d109      	bne.n	8009b18 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e09c      	b.n	8009c52 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b1e:	2b20      	cmp	r3, #32
 8009b20:	d16c      	bne.n	8009bfc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009b22:	7afb      	ldrb	r3, [r7, #11]
 8009b24:	2b0c      	cmp	r3, #12
 8009b26:	d85e      	bhi.n	8009be6 <HAL_UART_RegisterCallback+0xfa>
 8009b28:	a201      	add	r2, pc, #4	@ (adr r2, 8009b30 <HAL_UART_RegisterCallback+0x44>)
 8009b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2e:	bf00      	nop
 8009b30:	08009b65 	.word	0x08009b65
 8009b34:	08009b6f 	.word	0x08009b6f
 8009b38:	08009b79 	.word	0x08009b79
 8009b3c:	08009b83 	.word	0x08009b83
 8009b40:	08009b8d 	.word	0x08009b8d
 8009b44:	08009b97 	.word	0x08009b97
 8009b48:	08009ba1 	.word	0x08009ba1
 8009b4c:	08009bab 	.word	0x08009bab
 8009b50:	08009bb5 	.word	0x08009bb5
 8009b54:	08009bbf 	.word	0x08009bbf
 8009b58:	08009bc9 	.word	0x08009bc9
 8009b5c:	08009bd3 	.word	0x08009bd3
 8009b60:	08009bdd 	.word	0x08009bdd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009b6c:	e070      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009b76:	e06b      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009b80:	e066      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009b8a:	e061      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009b94:	e05c      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009b9e:	e057      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009ba8:	e052      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009bb2:	e04d      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009bbc:	e048      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009bc6:	e043      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009bd0:	e03e      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009bda:	e039      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009be4:	e034      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	75fb      	strb	r3, [r7, #23]
        break;
 8009bfa:	e029      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d11a      	bne.n	8009c3c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009c06:	7afb      	ldrb	r3, [r7, #11]
 8009c08:	2b0b      	cmp	r3, #11
 8009c0a:	d002      	beq.n	8009c12 <HAL_UART_RegisterCallback+0x126>
 8009c0c:	2b0c      	cmp	r3, #12
 8009c0e:	d005      	beq.n	8009c1c <HAL_UART_RegisterCallback+0x130>
 8009c10:	e009      	b.n	8009c26 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009c1a:	e019      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009c24:	e014      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c2c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	75fb      	strb	r3, [r7, #23]
        break;
 8009c3a:	e009      	b.n	8009c50 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	371c      	adds	r7, #28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop

08009c60 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b08a      	sub	sp, #40	@ 0x28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c74:	2b20      	cmp	r3, #32
 8009c76:	d167      	bne.n	8009d48 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <HAL_UART_Transmit_DMA+0x24>
 8009c7e:	88fb      	ldrh	r3, [r7, #6]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d101      	bne.n	8009c88 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e060      	b.n	8009d4a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	88fa      	ldrh	r2, [r7, #6]
 8009c92:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	88fa      	ldrh	r2, [r7, #6]
 8009c9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2221      	movs	r2, #33	@ 0x21
 8009caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d028      	beq.n	8009d08 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cba:	4a26      	ldr	r2, [pc, #152]	@ (8009d54 <HAL_UART_Transmit_DMA+0xf4>)
 8009cbc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cc2:	4a25      	ldr	r2, [pc, #148]	@ (8009d58 <HAL_UART_Transmit_DMA+0xf8>)
 8009cc4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cca:	4a24      	ldr	r2, [pc, #144]	@ (8009d5c <HAL_UART_Transmit_DMA+0xfc>)
 8009ccc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cde:	4619      	mov	r1, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	3328      	adds	r3, #40	@ 0x28
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	88fb      	ldrh	r3, [r7, #6]
 8009cea:	f7fc f883 	bl	8005df4 <HAL_DMA_Start_IT>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d009      	beq.n	8009d08 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2210      	movs	r2, #16
 8009cf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2220      	movs	r2, #32
 8009d00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e020      	b.n	8009d4a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2240      	movs	r2, #64	@ 0x40
 8009d0e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3308      	adds	r3, #8
 8009d16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	e853 3f00 	ldrex	r3, [r3]
 8009d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	3308      	adds	r3, #8
 8009d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d30:	623a      	str	r2, [r7, #32]
 8009d32:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d34:	69f9      	ldr	r1, [r7, #28]
 8009d36:	6a3a      	ldr	r2, [r7, #32]
 8009d38:	e841 2300 	strex	r3, r2, [r1]
 8009d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1e5      	bne.n	8009d10 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009d44:	2300      	movs	r3, #0
 8009d46:	e000      	b.n	8009d4a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009d48:	2302      	movs	r3, #2
  }
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3728      	adds	r7, #40	@ 0x28
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	0800b28b 	.word	0x0800b28b
 8009d58:	0800b329 	.word	0x0800b329
 8009d5c:	0800b4c3 	.word	0x0800b4c3

08009d60 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08a      	sub	sp, #40	@ 0x28
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	d137      	bne.n	8009de8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d002      	beq.n	8009d84 <HAL_UART_Receive_DMA+0x24>
 8009d7e:	88fb      	ldrh	r3, [r7, #6]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d101      	bne.n	8009d88 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e030      	b.n	8009dea <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a18      	ldr	r2, [pc, #96]	@ (8009df4 <HAL_UART_Receive_DMA+0x94>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d01f      	beq.n	8009dd8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d018      	beq.n	8009dd8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	e853 3f00 	ldrex	r3, [r3]
 8009db2:	613b      	str	r3, [r7, #16]
   return(result);
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc4:	623b      	str	r3, [r7, #32]
 8009dc6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc8:	69f9      	ldr	r1, [r7, #28]
 8009dca:	6a3a      	ldr	r2, [r7, #32]
 8009dcc:	e841 2300 	strex	r3, r2, [r1]
 8009dd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1e6      	bne.n	8009da6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009dd8:	88fb      	ldrh	r3, [r7, #6]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	68b9      	ldr	r1, [r7, #8]
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f001 f906 	bl	800aff0 <UART_Start_Receive_DMA>
 8009de4:	4603      	mov	r3, r0
 8009de6:	e000      	b.n	8009dea <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009de8:	2302      	movs	r3, #2
  }
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3728      	adds	r7, #40	@ 0x28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	40008000 	.word	0x40008000

08009df8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b0ba      	sub	sp, #232	@ 0xe8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009e22:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009e26:	4013      	ands	r3, r2
 8009e28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009e2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d11b      	bne.n	8009e6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e38:	f003 0320 	and.w	r3, r3, #32
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d015      	beq.n	8009e6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e44:	f003 0320 	and.w	r3, r3, #32
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d105      	bne.n	8009e58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d009      	beq.n	8009e6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 82f3 	beq.w	800a448 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	4798      	blx	r3
      }
      return;
 8009e6a:	e2ed      	b.n	800a448 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009e6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f000 8129 	beq.w	800a0c8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009e76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009e7a:	4b90      	ldr	r3, [pc, #576]	@ (800a0bc <HAL_UART_IRQHandler+0x2c4>)
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d106      	bne.n	8009e90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009e82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009e86:	4b8e      	ldr	r3, [pc, #568]	@ (800a0c0 <HAL_UART_IRQHandler+0x2c8>)
 8009e88:	4013      	ands	r3, r2
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 811c 	beq.w	800a0c8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e94:	f003 0301 	and.w	r3, r3, #1
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d011      	beq.n	8009ec0 <HAL_UART_IRQHandler+0xc8>
 8009e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00b      	beq.n	8009ec0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2201      	movs	r2, #1
 8009eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009eb6:	f043 0201 	orr.w	r2, r3, #1
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ec4:	f003 0302 	and.w	r3, r3, #2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d011      	beq.n	8009ef0 <HAL_UART_IRQHandler+0xf8>
 8009ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00b      	beq.n	8009ef0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2202      	movs	r2, #2
 8009ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ee6:	f043 0204 	orr.w	r2, r3, #4
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ef4:	f003 0304 	and.w	r3, r3, #4
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d011      	beq.n	8009f20 <HAL_UART_IRQHandler+0x128>
 8009efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00b      	beq.n	8009f20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2204      	movs	r2, #4
 8009f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f16:	f043 0202 	orr.w	r2, r3, #2
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f24:	f003 0308 	and.w	r3, r3, #8
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d017      	beq.n	8009f5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f30:	f003 0320 	and.w	r3, r3, #32
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d105      	bne.n	8009f44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009f38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009f3c:	4b5f      	ldr	r3, [pc, #380]	@ (800a0bc <HAL_UART_IRQHandler+0x2c4>)
 8009f3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00b      	beq.n	8009f5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2208      	movs	r2, #8
 8009f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f52:	f043 0208 	orr.w	r2, r3, #8
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d012      	beq.n	8009f8e <HAL_UART_IRQHandler+0x196>
 8009f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00c      	beq.n	8009f8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f84:	f043 0220 	orr.w	r2, r3, #32
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 8259 	beq.w	800a44c <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f9e:	f003 0320 	and.w	r3, r3, #32
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d013      	beq.n	8009fce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009faa:	f003 0320 	and.w	r3, r3, #32
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d105      	bne.n	8009fbe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d007      	beq.n	8009fce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d003      	beq.n	8009fce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fe2:	2b40      	cmp	r3, #64	@ 0x40
 8009fe4:	d005      	beq.n	8009ff2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009fea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d058      	beq.n	800a0a4 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f001 f8e3 	bl	800b1be <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a002:	2b40      	cmp	r3, #64	@ 0x40
 800a004:	d148      	bne.n	800a098 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	3308      	adds	r3, #8
 800a00c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a010:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a01c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a020:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a024:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3308      	adds	r3, #8
 800a02e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a032:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a036:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a03e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a042:	e841 2300 	strex	r3, r2, [r1]
 800a046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a04a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1d9      	bne.n	800a006 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d017      	beq.n	800a08c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a062:	4a18      	ldr	r2, [pc, #96]	@ (800a0c4 <HAL_UART_IRQHandler+0x2cc>)
 800a064:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fb ff95 	bl	8005f9c <HAL_DMA_Abort_IT>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d01f      	beq.n	800a0b8 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a07e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a086:	4610      	mov	r0, r2
 800a088:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a08a:	e015      	b.n	800a0b8 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a096:	e00f      	b.n	800a0b8 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0a2:	e009      	b.n	800a0b8 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a0b6:	e1c9      	b.n	800a44c <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0b8:	bf00      	nop
    return;
 800a0ba:	e1c7      	b.n	800a44c <HAL_UART_IRQHandler+0x654>
 800a0bc:	10000001 	.word	0x10000001
 800a0c0:	04000120 	.word	0x04000120
 800a0c4:	0800b547 	.word	0x0800b547

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	f040 8157 	bne.w	800a380 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a0d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0d6:	f003 0310 	and.w	r3, r3, #16
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f000 8150 	beq.w	800a380 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0e4:	f003 0310 	and.w	r3, r3, #16
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 8149 	beq.w	800a380 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2210      	movs	r2, #16
 800a0f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a100:	2b40      	cmp	r3, #64	@ 0x40
 800a102:	f040 80bd 	bne.w	800a280 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a114:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f000 8199 	beq.w	800a450 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a124:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a128:	429a      	cmp	r2, r3
 800a12a:	f080 8191 	bcs.w	800a450 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a134:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b00      	cmp	r3, #0
 800a148:	f040 8087 	bne.w	800a25a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a154:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a158:	e853 3f00 	ldrex	r3, [r3]
 800a15c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a160:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a168:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	461a      	mov	r2, r3
 800a172:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a176:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a17a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a182:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a186:	e841 2300 	strex	r3, r2, [r1]
 800a18a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a18e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1da      	bne.n	800a14c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3308      	adds	r3, #8
 800a19c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a1a0:	e853 3f00 	ldrex	r3, [r3]
 800a1a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a1a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1a8:	f023 0301 	bic.w	r3, r3, #1
 800a1ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	3308      	adds	r3, #8
 800a1b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a1ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a1be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a1c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a1c6:	e841 2300 	strex	r3, r2, [r1]
 800a1ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a1cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e1      	bne.n	800a196 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3308      	adds	r3, #8
 800a1d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1dc:	e853 3f00 	ldrex	r3, [r3]
 800a1e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a1e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	3308      	adds	r3, #8
 800a1f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a1f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a1f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a1fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a1fe:	e841 2300 	strex	r3, r2, [r1]
 800a202:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a204:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1e3      	bne.n	800a1d2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2220      	movs	r2, #32
 800a20e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a220:	e853 3f00 	ldrex	r3, [r3]
 800a224:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a228:	f023 0310 	bic.w	r3, r3, #16
 800a22c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	461a      	mov	r2, r3
 800a236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a23a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a23c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a240:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a242:	e841 2300 	strex	r3, r2, [r1]
 800a246:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a248:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1e4      	bne.n	800a218 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a254:	4618      	mov	r0, r3
 800a256:	f7fb fe48 	bl	8005eea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2202      	movs	r2, #2
 800a25e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a272:	b292      	uxth	r2, r2
 800a274:	1a8a      	subs	r2, r1, r2
 800a276:	b292      	uxth	r2, r2
 800a278:	4611      	mov	r1, r2
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a27e:	e0e7      	b.n	800a450 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 80d9 	beq.w	800a454 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800a2a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f000 80d4 	beq.w	800a454 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b4:	e853 3f00 	ldrex	r3, [r3]
 800a2b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a2ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2d0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a2d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2d6:	e841 2300 	strex	r3, r2, [r1]
 800a2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a2dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1e4      	bne.n	800a2ac <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	3308      	adds	r3, #8
 800a2e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ec:	e853 3f00 	ldrex	r3, [r3]
 800a2f0:	623b      	str	r3, [r7, #32]
   return(result);
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2f8:	f023 0301 	bic.w	r3, r3, #1
 800a2fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3308      	adds	r3, #8
 800a306:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a30a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a30c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a312:	e841 2300 	strex	r3, r2, [r1]
 800a316:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1e1      	bne.n	800a2e2 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2220      	movs	r2, #32
 800a322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	e853 3f00 	ldrex	r3, [r3]
 800a33e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f023 0310 	bic.w	r3, r3, #16
 800a346:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a354:	61fb      	str	r3, [r7, #28]
 800a356:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a358:	69b9      	ldr	r1, [r7, #24]
 800a35a:	69fa      	ldr	r2, [r7, #28]
 800a35c:	e841 2300 	strex	r3, r2, [r1]
 800a360:	617b      	str	r3, [r7, #20]
   return(result);
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1e4      	bne.n	800a332 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2202      	movs	r2, #2
 800a36c:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a374:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a378:	4611      	mov	r1, r2
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a37e:	e069      	b.n	800a454 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d010      	beq.n	800a3ae <HAL_UART_IRQHandler+0x5b6>
 800a38c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a390:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00a      	beq.n	800a3ae <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a3a0:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a3ac:	e055      	b.n	800a45a <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a3ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d014      	beq.n	800a3e4 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a3ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d105      	bne.n	800a3d2 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a3c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d008      	beq.n	800a3e4 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d03e      	beq.n	800a458 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	4798      	blx	r3
    }
    return;
 800a3e2:	e039      	b.n	800a458 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a3e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d009      	beq.n	800a404 <HAL_UART_IRQHandler+0x60c>
 800a3f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d003      	beq.n	800a404 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f001 f8ba 	bl	800b576 <UART_EndTransmit_IT>
    return;
 800a402:	e02a      	b.n	800a45a <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a408:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00b      	beq.n	800a428 <HAL_UART_IRQHandler+0x630>
 800a410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a414:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d005      	beq.n	800a428 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a426:	e018      	b.n	800a45a <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a42c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a430:	2b00      	cmp	r3, #0
 800a432:	d012      	beq.n	800a45a <HAL_UART_IRQHandler+0x662>
 800a434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	da0e      	bge.n	800a45a <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a446:	e008      	b.n	800a45a <HAL_UART_IRQHandler+0x662>
      return;
 800a448:	bf00      	nop
 800a44a:	e006      	b.n	800a45a <HAL_UART_IRQHandler+0x662>
    return;
 800a44c:	bf00      	nop
 800a44e:	e004      	b.n	800a45a <HAL_UART_IRQHandler+0x662>
      return;
 800a450:	bf00      	nop
 800a452:	e002      	b.n	800a45a <HAL_UART_IRQHandler+0x662>
      return;
 800a454:	bf00      	nop
 800a456:	e000      	b.n	800a45a <HAL_UART_IRQHandler+0x662>
    return;
 800a458:	bf00      	nop
  }
}
 800a45a:	37e8      	adds	r7, #232	@ 0xe8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a09      	ldr	r2, [pc, #36]	@ (800a54c <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d009      	beq.n	800a540 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	430a      	orrs	r2, r1
 800a53e:	615a      	str	r2, [r3, #20]
  }
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr
 800a54c:	40008000 	.word	0x40008000

0800a550 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a18      	ldr	r2, [pc, #96]	@ (800a5c0 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d027      	beq.n	800a5b2 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a568:	2b20      	cmp	r3, #32
 800a56a:	d120      	bne.n	800a5ae <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a572:	2b01      	cmp	r3, #1
 800a574:	d101      	bne.n	800a57a <HAL_UART_EnableReceiverTimeout+0x2a>
 800a576:	2302      	movs	r3, #2
 800a578:	e01c      	b.n	800a5b4 <HAL_UART_EnableReceiverTimeout+0x64>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2224      	movs	r2, #36	@ 0x24
 800a586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	685a      	ldr	r2, [r3, #4]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a598:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2220      	movs	r2, #32
 800a59e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	e002      	b.n	800a5b4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	e000      	b.n	800a5b4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
  }
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	40008000 	.word	0x40008000

0800a5c4 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	370c      	adds	r7, #12
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
	...

0800a5e0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4a1a      	ldr	r2, [pc, #104]	@ (800a654 <UART_InitCallbacksToDefault+0x74>)
 800a5ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4a19      	ldr	r2, [pc, #100]	@ (800a658 <UART_InitCallbacksToDefault+0x78>)
 800a5f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4a18      	ldr	r2, [pc, #96]	@ (800a65c <UART_InitCallbacksToDefault+0x7c>)
 800a5fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4a17      	ldr	r2, [pc, #92]	@ (800a660 <UART_InitCallbacksToDefault+0x80>)
 800a604:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a16      	ldr	r2, [pc, #88]	@ (800a664 <UART_InitCallbacksToDefault+0x84>)
 800a60c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a15      	ldr	r2, [pc, #84]	@ (800a668 <UART_InitCallbacksToDefault+0x88>)
 800a614:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a14      	ldr	r2, [pc, #80]	@ (800a66c <UART_InitCallbacksToDefault+0x8c>)
 800a61c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a13      	ldr	r2, [pc, #76]	@ (800a670 <UART_InitCallbacksToDefault+0x90>)
 800a624:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a12      	ldr	r2, [pc, #72]	@ (800a674 <UART_InitCallbacksToDefault+0x94>)
 800a62c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a11      	ldr	r2, [pc, #68]	@ (800a678 <UART_InitCallbacksToDefault+0x98>)
 800a634:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a10      	ldr	r2, [pc, #64]	@ (800a67c <UART_InitCallbacksToDefault+0x9c>)
 800a63c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a0f      	ldr	r2, [pc, #60]	@ (800a680 <UART_InitCallbacksToDefault+0xa0>)
 800a644:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	0800a475 	.word	0x0800a475
 800a658:	0800a461 	.word	0x0800a461
 800a65c:	0800a49d 	.word	0x0800a49d
 800a660:	0800a489 	.word	0x0800a489
 800a664:	0800a4b1 	.word	0x0800a4b1
 800a668:	0800a4c5 	.word	0x0800a4c5
 800a66c:	0800a4d9 	.word	0x0800a4d9
 800a670:	0800a4ed 	.word	0x0800a4ed
 800a674:	0800b5d1 	.word	0x0800b5d1
 800a678:	0800b5e5 	.word	0x0800b5e5
 800a67c:	0800b5f9 	.word	0x0800b5f9
 800a680:	0800a501 	.word	0x0800a501

0800a684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a688:	b08c      	sub	sp, #48	@ 0x30
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	431a      	orrs	r2, r3
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	69db      	ldr	r3, [r3, #28]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	4baa      	ldr	r3, [pc, #680]	@ (800a95c <UART_SetConfig+0x2d8>)
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	6812      	ldr	r2, [r2, #0]
 800a6ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6bc:	430b      	orrs	r3, r1
 800a6be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	68da      	ldr	r2, [r3, #12]
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	430a      	orrs	r2, r1
 800a6d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a9f      	ldr	r2, [pc, #636]	@ (800a960 <UART_SetConfig+0x2dc>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d004      	beq.n	800a6f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a6fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	6812      	ldr	r2, [r2, #0]
 800a702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a704:	430b      	orrs	r3, r1
 800a706:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a70e:	f023 010f 	bic.w	r1, r3, #15
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	430a      	orrs	r2, r1
 800a71c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a90      	ldr	r2, [pc, #576]	@ (800a964 <UART_SetConfig+0x2e0>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d125      	bne.n	800a774 <UART_SetConfig+0xf0>
 800a728:	4b8f      	ldr	r3, [pc, #572]	@ (800a968 <UART_SetConfig+0x2e4>)
 800a72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a72e:	f003 0303 	and.w	r3, r3, #3
 800a732:	2b03      	cmp	r3, #3
 800a734:	d81a      	bhi.n	800a76c <UART_SetConfig+0xe8>
 800a736:	a201      	add	r2, pc, #4	@ (adr r2, 800a73c <UART_SetConfig+0xb8>)
 800a738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73c:	0800a74d 	.word	0x0800a74d
 800a740:	0800a75d 	.word	0x0800a75d
 800a744:	0800a755 	.word	0x0800a755
 800a748:	0800a765 	.word	0x0800a765
 800a74c:	2301      	movs	r3, #1
 800a74e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a752:	e116      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a754:	2302      	movs	r3, #2
 800a756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a75a:	e112      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a75c:	2304      	movs	r3, #4
 800a75e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a762:	e10e      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a764:	2308      	movs	r3, #8
 800a766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a76a:	e10a      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a76c:	2310      	movs	r3, #16
 800a76e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a772:	e106      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a7c      	ldr	r2, [pc, #496]	@ (800a96c <UART_SetConfig+0x2e8>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d138      	bne.n	800a7f0 <UART_SetConfig+0x16c>
 800a77e:	4b7a      	ldr	r3, [pc, #488]	@ (800a968 <UART_SetConfig+0x2e4>)
 800a780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a784:	f003 030c 	and.w	r3, r3, #12
 800a788:	2b0c      	cmp	r3, #12
 800a78a:	d82d      	bhi.n	800a7e8 <UART_SetConfig+0x164>
 800a78c:	a201      	add	r2, pc, #4	@ (adr r2, 800a794 <UART_SetConfig+0x110>)
 800a78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a792:	bf00      	nop
 800a794:	0800a7c9 	.word	0x0800a7c9
 800a798:	0800a7e9 	.word	0x0800a7e9
 800a79c:	0800a7e9 	.word	0x0800a7e9
 800a7a0:	0800a7e9 	.word	0x0800a7e9
 800a7a4:	0800a7d9 	.word	0x0800a7d9
 800a7a8:	0800a7e9 	.word	0x0800a7e9
 800a7ac:	0800a7e9 	.word	0x0800a7e9
 800a7b0:	0800a7e9 	.word	0x0800a7e9
 800a7b4:	0800a7d1 	.word	0x0800a7d1
 800a7b8:	0800a7e9 	.word	0x0800a7e9
 800a7bc:	0800a7e9 	.word	0x0800a7e9
 800a7c0:	0800a7e9 	.word	0x0800a7e9
 800a7c4:	0800a7e1 	.word	0x0800a7e1
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ce:	e0d8      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7d6:	e0d4      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a7d8:	2304      	movs	r3, #4
 800a7da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7de:	e0d0      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a7e0:	2308      	movs	r3, #8
 800a7e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7e6:	e0cc      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a7e8:	2310      	movs	r3, #16
 800a7ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ee:	e0c8      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a5e      	ldr	r2, [pc, #376]	@ (800a970 <UART_SetConfig+0x2ec>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d125      	bne.n	800a846 <UART_SetConfig+0x1c2>
 800a7fa:	4b5b      	ldr	r3, [pc, #364]	@ (800a968 <UART_SetConfig+0x2e4>)
 800a7fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a800:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a804:	2b30      	cmp	r3, #48	@ 0x30
 800a806:	d016      	beq.n	800a836 <UART_SetConfig+0x1b2>
 800a808:	2b30      	cmp	r3, #48	@ 0x30
 800a80a:	d818      	bhi.n	800a83e <UART_SetConfig+0x1ba>
 800a80c:	2b20      	cmp	r3, #32
 800a80e:	d00a      	beq.n	800a826 <UART_SetConfig+0x1a2>
 800a810:	2b20      	cmp	r3, #32
 800a812:	d814      	bhi.n	800a83e <UART_SetConfig+0x1ba>
 800a814:	2b00      	cmp	r3, #0
 800a816:	d002      	beq.n	800a81e <UART_SetConfig+0x19a>
 800a818:	2b10      	cmp	r3, #16
 800a81a:	d008      	beq.n	800a82e <UART_SetConfig+0x1aa>
 800a81c:	e00f      	b.n	800a83e <UART_SetConfig+0x1ba>
 800a81e:	2300      	movs	r3, #0
 800a820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a824:	e0ad      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a826:	2302      	movs	r3, #2
 800a828:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a82c:	e0a9      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a82e:	2304      	movs	r3, #4
 800a830:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a834:	e0a5      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a836:	2308      	movs	r3, #8
 800a838:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a83c:	e0a1      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a83e:	2310      	movs	r3, #16
 800a840:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a844:	e09d      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a4a      	ldr	r2, [pc, #296]	@ (800a974 <UART_SetConfig+0x2f0>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d125      	bne.n	800a89c <UART_SetConfig+0x218>
 800a850:	4b45      	ldr	r3, [pc, #276]	@ (800a968 <UART_SetConfig+0x2e4>)
 800a852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a856:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a85a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a85c:	d016      	beq.n	800a88c <UART_SetConfig+0x208>
 800a85e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a860:	d818      	bhi.n	800a894 <UART_SetConfig+0x210>
 800a862:	2b80      	cmp	r3, #128	@ 0x80
 800a864:	d00a      	beq.n	800a87c <UART_SetConfig+0x1f8>
 800a866:	2b80      	cmp	r3, #128	@ 0x80
 800a868:	d814      	bhi.n	800a894 <UART_SetConfig+0x210>
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d002      	beq.n	800a874 <UART_SetConfig+0x1f0>
 800a86e:	2b40      	cmp	r3, #64	@ 0x40
 800a870:	d008      	beq.n	800a884 <UART_SetConfig+0x200>
 800a872:	e00f      	b.n	800a894 <UART_SetConfig+0x210>
 800a874:	2300      	movs	r3, #0
 800a876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a87a:	e082      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a87c:	2302      	movs	r3, #2
 800a87e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a882:	e07e      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a884:	2304      	movs	r3, #4
 800a886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a88a:	e07a      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a88c:	2308      	movs	r3, #8
 800a88e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a892:	e076      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a894:	2310      	movs	r3, #16
 800a896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a89a:	e072      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a35      	ldr	r2, [pc, #212]	@ (800a978 <UART_SetConfig+0x2f4>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d12a      	bne.n	800a8fc <UART_SetConfig+0x278>
 800a8a6:	4b30      	ldr	r3, [pc, #192]	@ (800a968 <UART_SetConfig+0x2e4>)
 800a8a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8b4:	d01a      	beq.n	800a8ec <UART_SetConfig+0x268>
 800a8b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8ba:	d81b      	bhi.n	800a8f4 <UART_SetConfig+0x270>
 800a8bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8c0:	d00c      	beq.n	800a8dc <UART_SetConfig+0x258>
 800a8c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8c6:	d815      	bhi.n	800a8f4 <UART_SetConfig+0x270>
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d003      	beq.n	800a8d4 <UART_SetConfig+0x250>
 800a8cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8d0:	d008      	beq.n	800a8e4 <UART_SetConfig+0x260>
 800a8d2:	e00f      	b.n	800a8f4 <UART_SetConfig+0x270>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8da:	e052      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a8dc:	2302      	movs	r3, #2
 800a8de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8e2:	e04e      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a8e4:	2304      	movs	r3, #4
 800a8e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8ea:	e04a      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a8ec:	2308      	movs	r3, #8
 800a8ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8f2:	e046      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a8f4:	2310      	movs	r3, #16
 800a8f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8fa:	e042      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a17      	ldr	r2, [pc, #92]	@ (800a960 <UART_SetConfig+0x2dc>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d13a      	bne.n	800a97c <UART_SetConfig+0x2f8>
 800a906:	4b18      	ldr	r3, [pc, #96]	@ (800a968 <UART_SetConfig+0x2e4>)
 800a908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a90c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a910:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a914:	d01a      	beq.n	800a94c <UART_SetConfig+0x2c8>
 800a916:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a91a:	d81b      	bhi.n	800a954 <UART_SetConfig+0x2d0>
 800a91c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a920:	d00c      	beq.n	800a93c <UART_SetConfig+0x2b8>
 800a922:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a926:	d815      	bhi.n	800a954 <UART_SetConfig+0x2d0>
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d003      	beq.n	800a934 <UART_SetConfig+0x2b0>
 800a92c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a930:	d008      	beq.n	800a944 <UART_SetConfig+0x2c0>
 800a932:	e00f      	b.n	800a954 <UART_SetConfig+0x2d0>
 800a934:	2300      	movs	r3, #0
 800a936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a93a:	e022      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a93c:	2302      	movs	r3, #2
 800a93e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a942:	e01e      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a944:	2304      	movs	r3, #4
 800a946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a94a:	e01a      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a94c:	2308      	movs	r3, #8
 800a94e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a952:	e016      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a954:	2310      	movs	r3, #16
 800a956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a95a:	e012      	b.n	800a982 <UART_SetConfig+0x2fe>
 800a95c:	cfff69f3 	.word	0xcfff69f3
 800a960:	40008000 	.word	0x40008000
 800a964:	40013800 	.word	0x40013800
 800a968:	40021000 	.word	0x40021000
 800a96c:	40004400 	.word	0x40004400
 800a970:	40004800 	.word	0x40004800
 800a974:	40004c00 	.word	0x40004c00
 800a978:	40005000 	.word	0x40005000
 800a97c:	2310      	movs	r3, #16
 800a97e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4aae      	ldr	r2, [pc, #696]	@ (800ac40 <UART_SetConfig+0x5bc>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	f040 8097 	bne.w	800aabc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a98e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a992:	2b08      	cmp	r3, #8
 800a994:	d823      	bhi.n	800a9de <UART_SetConfig+0x35a>
 800a996:	a201      	add	r2, pc, #4	@ (adr r2, 800a99c <UART_SetConfig+0x318>)
 800a998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99c:	0800a9c1 	.word	0x0800a9c1
 800a9a0:	0800a9df 	.word	0x0800a9df
 800a9a4:	0800a9c9 	.word	0x0800a9c9
 800a9a8:	0800a9df 	.word	0x0800a9df
 800a9ac:	0800a9cf 	.word	0x0800a9cf
 800a9b0:	0800a9df 	.word	0x0800a9df
 800a9b4:	0800a9df 	.word	0x0800a9df
 800a9b8:	0800a9df 	.word	0x0800a9df
 800a9bc:	0800a9d7 	.word	0x0800a9d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9c0:	f7fc fbdc 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 800a9c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9c6:	e010      	b.n	800a9ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a9c8:	4b9e      	ldr	r3, [pc, #632]	@ (800ac44 <UART_SetConfig+0x5c0>)
 800a9ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9cc:	e00d      	b.n	800a9ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9ce:	f7fc fb67 	bl	80070a0 <HAL_RCC_GetSysClockFreq>
 800a9d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9d4:	e009      	b.n	800a9ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9dc:	e005      	b.n	800a9ea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a9e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f000 8130 	beq.w	800ac52 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f6:	4a94      	ldr	r2, [pc, #592]	@ (800ac48 <UART_SetConfig+0x5c4>)
 800a9f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa00:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	685a      	ldr	r2, [r3, #4]
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	005b      	lsls	r3, r3, #1
 800aa0e:	4413      	add	r3, r2
 800aa10:	69ba      	ldr	r2, [r7, #24]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d305      	bcc.n	800aa22 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa1c:	69ba      	ldr	r2, [r7, #24]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d903      	bls.n	800aa2a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aa28:	e113      	b.n	800ac52 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	60bb      	str	r3, [r7, #8]
 800aa30:	60fa      	str	r2, [r7, #12]
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa36:	4a84      	ldr	r2, [pc, #528]	@ (800ac48 <UART_SetConfig+0x5c4>)
 800aa38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	2200      	movs	r2, #0
 800aa40:	603b      	str	r3, [r7, #0]
 800aa42:	607a      	str	r2, [r7, #4]
 800aa44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa4c:	f7f6 f84a 	bl	8000ae4 <__aeabi_uldivmod>
 800aa50:	4602      	mov	r2, r0
 800aa52:	460b      	mov	r3, r1
 800aa54:	4610      	mov	r0, r2
 800aa56:	4619      	mov	r1, r3
 800aa58:	f04f 0200 	mov.w	r2, #0
 800aa5c:	f04f 0300 	mov.w	r3, #0
 800aa60:	020b      	lsls	r3, r1, #8
 800aa62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa66:	0202      	lsls	r2, r0, #8
 800aa68:	6979      	ldr	r1, [r7, #20]
 800aa6a:	6849      	ldr	r1, [r1, #4]
 800aa6c:	0849      	lsrs	r1, r1, #1
 800aa6e:	2000      	movs	r0, #0
 800aa70:	460c      	mov	r4, r1
 800aa72:	4605      	mov	r5, r0
 800aa74:	eb12 0804 	adds.w	r8, r2, r4
 800aa78:	eb43 0905 	adc.w	r9, r3, r5
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	469a      	mov	sl, r3
 800aa84:	4693      	mov	fp, r2
 800aa86:	4652      	mov	r2, sl
 800aa88:	465b      	mov	r3, fp
 800aa8a:	4640      	mov	r0, r8
 800aa8c:	4649      	mov	r1, r9
 800aa8e:	f7f6 f829 	bl	8000ae4 <__aeabi_uldivmod>
 800aa92:	4602      	mov	r2, r0
 800aa94:	460b      	mov	r3, r1
 800aa96:	4613      	mov	r3, r2
 800aa98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aaa0:	d308      	bcc.n	800aab4 <UART_SetConfig+0x430>
 800aaa2:	6a3b      	ldr	r3, [r7, #32]
 800aaa4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aaa8:	d204      	bcs.n	800aab4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	6a3a      	ldr	r2, [r7, #32]
 800aab0:	60da      	str	r2, [r3, #12]
 800aab2:	e0ce      	b.n	800ac52 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aaba:	e0ca      	b.n	800ac52 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aac4:	d166      	bne.n	800ab94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800aac6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aaca:	2b08      	cmp	r3, #8
 800aacc:	d827      	bhi.n	800ab1e <UART_SetConfig+0x49a>
 800aace:	a201      	add	r2, pc, #4	@ (adr r2, 800aad4 <UART_SetConfig+0x450>)
 800aad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad4:	0800aaf9 	.word	0x0800aaf9
 800aad8:	0800ab01 	.word	0x0800ab01
 800aadc:	0800ab09 	.word	0x0800ab09
 800aae0:	0800ab1f 	.word	0x0800ab1f
 800aae4:	0800ab0f 	.word	0x0800ab0f
 800aae8:	0800ab1f 	.word	0x0800ab1f
 800aaec:	0800ab1f 	.word	0x0800ab1f
 800aaf0:	0800ab1f 	.word	0x0800ab1f
 800aaf4:	0800ab17 	.word	0x0800ab17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaf8:	f7fc fb40 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 800aafc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aafe:	e014      	b.n	800ab2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab00:	f7fc fb52 	bl	80071a8 <HAL_RCC_GetPCLK2Freq>
 800ab04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab06:	e010      	b.n	800ab2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab08:	4b4e      	ldr	r3, [pc, #312]	@ (800ac44 <UART_SetConfig+0x5c0>)
 800ab0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab0c:	e00d      	b.n	800ab2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab0e:	f7fc fac7 	bl	80070a0 <HAL_RCC_GetSysClockFreq>
 800ab12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab14:	e009      	b.n	800ab2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab1c:	e005      	b.n	800ab2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ab28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f000 8090 	beq.w	800ac52 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab36:	4a44      	ldr	r2, [pc, #272]	@ (800ac48 <UART_SetConfig+0x5c4>)
 800ab38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab40:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab44:	005a      	lsls	r2, r3, #1
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	085b      	lsrs	r3, r3, #1
 800ab4c:	441a      	add	r2, r3
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab58:	6a3b      	ldr	r3, [r7, #32]
 800ab5a:	2b0f      	cmp	r3, #15
 800ab5c:	d916      	bls.n	800ab8c <UART_SetConfig+0x508>
 800ab5e:	6a3b      	ldr	r3, [r7, #32]
 800ab60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab64:	d212      	bcs.n	800ab8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab66:	6a3b      	ldr	r3, [r7, #32]
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	f023 030f 	bic.w	r3, r3, #15
 800ab6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab70:	6a3b      	ldr	r3, [r7, #32]
 800ab72:	085b      	lsrs	r3, r3, #1
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	f003 0307 	and.w	r3, r3, #7
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	8bfb      	ldrh	r3, [r7, #30]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	8bfa      	ldrh	r2, [r7, #30]
 800ab88:	60da      	str	r2, [r3, #12]
 800ab8a:	e062      	b.n	800ac52 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ab92:	e05e      	b.n	800ac52 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ab98:	2b08      	cmp	r3, #8
 800ab9a:	d828      	bhi.n	800abee <UART_SetConfig+0x56a>
 800ab9c:	a201      	add	r2, pc, #4	@ (adr r2, 800aba4 <UART_SetConfig+0x520>)
 800ab9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba2:	bf00      	nop
 800aba4:	0800abc9 	.word	0x0800abc9
 800aba8:	0800abd1 	.word	0x0800abd1
 800abac:	0800abd9 	.word	0x0800abd9
 800abb0:	0800abef 	.word	0x0800abef
 800abb4:	0800abdf 	.word	0x0800abdf
 800abb8:	0800abef 	.word	0x0800abef
 800abbc:	0800abef 	.word	0x0800abef
 800abc0:	0800abef 	.word	0x0800abef
 800abc4:	0800abe7 	.word	0x0800abe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abc8:	f7fc fad8 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 800abcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abce:	e014      	b.n	800abfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abd0:	f7fc faea 	bl	80071a8 <HAL_RCC_GetPCLK2Freq>
 800abd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abd6:	e010      	b.n	800abfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abd8:	4b1a      	ldr	r3, [pc, #104]	@ (800ac44 <UART_SetConfig+0x5c0>)
 800abda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800abdc:	e00d      	b.n	800abfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abde:	f7fc fa5f 	bl	80070a0 <HAL_RCC_GetSysClockFreq>
 800abe2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abe4:	e009      	b.n	800abfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800abec:	e005      	b.n	800abfa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800abee:	2300      	movs	r3, #0
 800abf0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800abf8:	bf00      	nop
    }

    if (pclk != 0U)
 800abfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d028      	beq.n	800ac52 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac04:	4a10      	ldr	r2, [pc, #64]	@ (800ac48 <UART_SetConfig+0x5c4>)
 800ac06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	085b      	lsrs	r3, r3, #1
 800ac18:	441a      	add	r2, r3
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	2b0f      	cmp	r3, #15
 800ac28:	d910      	bls.n	800ac4c <UART_SetConfig+0x5c8>
 800ac2a:	6a3b      	ldr	r3, [r7, #32]
 800ac2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac30:	d20c      	bcs.n	800ac4c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	60da      	str	r2, [r3, #12]
 800ac3c:	e009      	b.n	800ac52 <UART_SetConfig+0x5ce>
 800ac3e:	bf00      	nop
 800ac40:	40008000 	.word	0x40008000
 800ac44:	00f42400 	.word	0x00f42400
 800ac48:	0800b9bc 	.word	0x0800b9bc
      }
      else
      {
        ret = HAL_ERROR;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	2200      	movs	r2, #0
 800ac66:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ac6e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3730      	adds	r7, #48	@ 0x30
 800ac76:	46bd      	mov	sp, r7
 800ac78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ac7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac88:	f003 0308 	and.w	r3, r3, #8
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00a      	beq.n	800aca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	430a      	orrs	r2, r1
 800aca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acaa:	f003 0301 	and.w	r3, r3, #1
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00a      	beq.n	800acc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	430a      	orrs	r2, r1
 800acc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800accc:	f003 0302 	and.w	r3, r3, #2
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00a      	beq.n	800acea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	430a      	orrs	r2, r1
 800ace8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acee:	f003 0304 	and.w	r3, r3, #4
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d00a      	beq.n	800ad0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	430a      	orrs	r2, r1
 800ad0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad10:	f003 0310 	and.w	r3, r3, #16
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00a      	beq.n	800ad2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	430a      	orrs	r2, r1
 800ad2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad32:	f003 0320 	and.w	r3, r3, #32
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00a      	beq.n	800ad50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	430a      	orrs	r2, r1
 800ad4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d01a      	beq.n	800ad92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	430a      	orrs	r2, r1
 800ad70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad7a:	d10a      	bne.n	800ad92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	430a      	orrs	r2, r1
 800ad90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00a      	beq.n	800adb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	430a      	orrs	r2, r1
 800adb2:	605a      	str	r2, [r3, #4]
  }
}
 800adb4:	bf00      	nop
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b098      	sub	sp, #96	@ 0x60
 800adc4:	af02      	add	r7, sp, #8
 800adc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800add0:	f7f9 f82a 	bl	8003e28 <HAL_GetTick>
 800add4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0308 	and.w	r3, r3, #8
 800ade0:	2b08      	cmp	r3, #8
 800ade2:	d12f      	bne.n	800ae44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ade4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adec:	2200      	movs	r2, #0
 800adee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f88e 	bl	800af14 <UART_WaitOnFlagUntilTimeout>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d022      	beq.n	800ae44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae06:	e853 3f00 	ldrex	r3, [r3]
 800ae0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae12:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae24:	e841 2300 	strex	r3, r2, [r1]
 800ae28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1e6      	bne.n	800adfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2220      	movs	r2, #32
 800ae34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae40:	2303      	movs	r3, #3
 800ae42:	e063      	b.n	800af0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 0304 	and.w	r3, r3, #4
 800ae4e:	2b04      	cmp	r3, #4
 800ae50:	d149      	bne.n	800aee6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 f857 	bl	800af14 <UART_WaitOnFlagUntilTimeout>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d03c      	beq.n	800aee6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae74:	e853 3f00 	ldrex	r3, [r3]
 800ae78:	623b      	str	r3, [r7, #32]
   return(result);
 800ae7a:	6a3b      	ldr	r3, [r7, #32]
 800ae7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae92:	e841 2300 	strex	r3, r2, [r1]
 800ae96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1e6      	bne.n	800ae6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	3308      	adds	r3, #8
 800aea4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	e853 3f00 	ldrex	r3, [r3]
 800aeac:	60fb      	str	r3, [r7, #12]
   return(result);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f023 0301 	bic.w	r3, r3, #1
 800aeb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	3308      	adds	r3, #8
 800aebc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aebe:	61fa      	str	r2, [r7, #28]
 800aec0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec2:	69b9      	ldr	r1, [r7, #24]
 800aec4:	69fa      	ldr	r2, [r7, #28]
 800aec6:	e841 2300 	strex	r3, r2, [r1]
 800aeca:	617b      	str	r3, [r7, #20]
   return(result);
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1e5      	bne.n	800ae9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2220      	movs	r2, #32
 800aed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aee2:	2303      	movs	r3, #3
 800aee4:	e012      	b.n	800af0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2220      	movs	r2, #32
 800aeea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2220      	movs	r2, #32
 800aef2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3758      	adds	r7, #88	@ 0x58
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	603b      	str	r3, [r7, #0]
 800af20:	4613      	mov	r3, r2
 800af22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af24:	e04f      	b.n	800afc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af2c:	d04b      	beq.n	800afc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af2e:	f7f8 ff7b 	bl	8003e28 <HAL_GetTick>
 800af32:	4602      	mov	r2, r0
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	69ba      	ldr	r2, [r7, #24]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d302      	bcc.n	800af44 <UART_WaitOnFlagUntilTimeout+0x30>
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d101      	bne.n	800af48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800af44:	2303      	movs	r3, #3
 800af46:	e04e      	b.n	800afe6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 0304 	and.w	r3, r3, #4
 800af52:	2b00      	cmp	r3, #0
 800af54:	d037      	beq.n	800afc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	2b80      	cmp	r3, #128	@ 0x80
 800af5a:	d034      	beq.n	800afc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	2b40      	cmp	r3, #64	@ 0x40
 800af60:	d031      	beq.n	800afc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	69db      	ldr	r3, [r3, #28]
 800af68:	f003 0308 	and.w	r3, r3, #8
 800af6c:	2b08      	cmp	r3, #8
 800af6e:	d110      	bne.n	800af92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2208      	movs	r2, #8
 800af76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f000 f920 	bl	800b1be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2208      	movs	r2, #8
 800af82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	e029      	b.n	800afe6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	69db      	ldr	r3, [r3, #28]
 800af98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800afa0:	d111      	bne.n	800afc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800afaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f000 f906 	bl	800b1be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2220      	movs	r2, #32
 800afb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e00f      	b.n	800afe6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	69da      	ldr	r2, [r3, #28]
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	4013      	ands	r3, r2
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	bf0c      	ite	eq
 800afd6:	2301      	moveq	r3, #1
 800afd8:	2300      	movne	r3, #0
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	461a      	mov	r2, r3
 800afde:	79fb      	ldrb	r3, [r7, #7]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d0a0      	beq.n	800af26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
	...

0800aff0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b096      	sub	sp, #88	@ 0x58
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	4613      	mov	r3, r2
 800affc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	88fa      	ldrh	r2, [r7, #6]
 800b008:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2222      	movs	r2, #34	@ 0x22
 800b018:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b022:	2b00      	cmp	r3, #0
 800b024:	d02d      	beq.n	800b082 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b02c:	4a40      	ldr	r2, [pc, #256]	@ (800b130 <UART_Start_Receive_DMA+0x140>)
 800b02e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b036:	4a3f      	ldr	r2, [pc, #252]	@ (800b134 <UART_Start_Receive_DMA+0x144>)
 800b038:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b040:	4a3d      	ldr	r2, [pc, #244]	@ (800b138 <UART_Start_Receive_DMA+0x148>)
 800b042:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b04a:	2200      	movs	r2, #0
 800b04c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	3324      	adds	r3, #36	@ 0x24
 800b05a:	4619      	mov	r1, r3
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b060:	461a      	mov	r2, r3
 800b062:	88fb      	ldrh	r3, [r7, #6]
 800b064:	f7fa fec6 	bl	8005df4 <HAL_DMA_Start_IT>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d009      	beq.n	800b082 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2210      	movs	r2, #16
 800b072:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2220      	movs	r2, #32
 800b07a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	e051      	b.n	800b126 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d018      	beq.n	800b0bc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b092:	e853 3f00 	ldrex	r3, [r3]
 800b096:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b09e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0aa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b0ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0b0:	e841 2300 	strex	r3, r2, [r1]
 800b0b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b0b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1e6      	bne.n	800b08a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	3308      	adds	r3, #8
 800b0c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c6:	e853 3f00 	ldrex	r3, [r3]
 800b0ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ce:	f043 0301 	orr.w	r3, r3, #1
 800b0d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3308      	adds	r3, #8
 800b0da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b0dc:	637a      	str	r2, [r7, #52]	@ 0x34
 800b0de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b0e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0e4:	e841 2300 	strex	r3, r2, [r1]
 800b0e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1e5      	bne.n	800b0bc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	3308      	adds	r3, #8
 800b0f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	e853 3f00 	ldrex	r3, [r3]
 800b0fe:	613b      	str	r3, [r7, #16]
   return(result);
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	3308      	adds	r3, #8
 800b10e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b110:	623a      	str	r2, [r7, #32]
 800b112:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b114:	69f9      	ldr	r1, [r7, #28]
 800b116:	6a3a      	ldr	r2, [r7, #32]
 800b118:	e841 2300 	strex	r3, r2, [r1]
 800b11c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d1e5      	bne.n	800b0f0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3758      	adds	r7, #88	@ 0x58
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	0800b349 	.word	0x0800b349
 800b134:	0800b47d 	.word	0x0800b47d
 800b138:	0800b4c3 	.word	0x0800b4c3

0800b13c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b08f      	sub	sp, #60	@ 0x3c
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14a:	6a3b      	ldr	r3, [r7, #32]
 800b14c:	e853 3f00 	ldrex	r3, [r3]
 800b150:	61fb      	str	r3, [r7, #28]
   return(result);
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b158:	637b      	str	r3, [r7, #52]	@ 0x34
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	461a      	mov	r2, r3
 800b160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b164:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b166:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b168:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b16a:	e841 2300 	strex	r3, r2, [r1]
 800b16e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b172:	2b00      	cmp	r3, #0
 800b174:	d1e6      	bne.n	800b144 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	3308      	adds	r3, #8
 800b17c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	e853 3f00 	ldrex	r3, [r3]
 800b184:	60bb      	str	r3, [r7, #8]
   return(result);
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b18c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	3308      	adds	r3, #8
 800b194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b196:	61ba      	str	r2, [r7, #24]
 800b198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19a:	6979      	ldr	r1, [r7, #20]
 800b19c:	69ba      	ldr	r2, [r7, #24]
 800b19e:	e841 2300 	strex	r3, r2, [r1]
 800b1a2:	613b      	str	r3, [r7, #16]
   return(result);
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1e5      	bne.n	800b176 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2220      	movs	r2, #32
 800b1ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b1b2:	bf00      	nop
 800b1b4:	373c      	adds	r7, #60	@ 0x3c
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr

0800b1be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1be:	b480      	push	{r7}
 800b1c0:	b095      	sub	sp, #84	@ 0x54
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ce:	e853 3f00 	ldrex	r3, [r3]
 800b1d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b1ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b1ec:	e841 2300 	strex	r3, r2, [r1]
 800b1f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1e6      	bne.n	800b1c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	3308      	adds	r3, #8
 800b1fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	e853 3f00 	ldrex	r3, [r3]
 800b206:	61fb      	str	r3, [r7, #28]
   return(result);
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b20e:	f023 0301 	bic.w	r3, r3, #1
 800b212:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3308      	adds	r3, #8
 800b21a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b21c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b21e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b224:	e841 2300 	strex	r3, r2, [r1]
 800b228:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1e3      	bne.n	800b1f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b234:	2b01      	cmp	r3, #1
 800b236:	d118      	bne.n	800b26a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	e853 3f00 	ldrex	r3, [r3]
 800b244:	60bb      	str	r3, [r7, #8]
   return(result);
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	f023 0310 	bic.w	r3, r3, #16
 800b24c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	461a      	mov	r2, r3
 800b254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b256:	61bb      	str	r3, [r7, #24]
 800b258:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25a:	6979      	ldr	r1, [r7, #20]
 800b25c:	69ba      	ldr	r2, [r7, #24]
 800b25e:	e841 2300 	strex	r3, r2, [r1]
 800b262:	613b      	str	r3, [r7, #16]
   return(result);
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1e6      	bne.n	800b238 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2220      	movs	r2, #32
 800b26e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b27e:	bf00      	nop
 800b280:	3754      	adds	r7, #84	@ 0x54
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr

0800b28a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b090      	sub	sp, #64	@ 0x40
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b296:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 0320 	and.w	r3, r3, #32
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d137      	bne.n	800b316 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b2a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3308      	adds	r3, #8
 800b2b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b8:	e853 3f00 	ldrex	r3, [r3]
 800b2bc:	623b      	str	r3, [r7, #32]
   return(result);
 800b2be:	6a3b      	ldr	r3, [r7, #32]
 800b2c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b2c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b2c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	3308      	adds	r3, #8
 800b2cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2d6:	e841 2300 	strex	r3, r2, [r1]
 800b2da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1e5      	bne.n	800b2ae <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	e853 3f00 	ldrex	r3, [r3]
 800b2ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b300:	61fb      	str	r3, [r7, #28]
 800b302:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b304:	69b9      	ldr	r1, [r7, #24]
 800b306:	69fa      	ldr	r2, [r7, #28]
 800b308:	e841 2300 	strex	r3, r2, [r1]
 800b30c:	617b      	str	r3, [r7, #20]
   return(result);
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1e6      	bne.n	800b2e2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b314:	e004      	b.n	800b320 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b318:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b31c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b31e:	4798      	blx	r3
}
 800b320:	bf00      	nop
 800b322:	3740      	adds	r7, #64	@ 0x40
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b334:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b340:	bf00      	nop
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b09c      	sub	sp, #112	@ 0x70
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b354:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f003 0320 	and.w	r3, r3, #32
 800b360:	2b00      	cmp	r3, #0
 800b362:	d171      	bne.n	800b448 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b366:	2200      	movs	r2, #0
 800b368:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b36c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b374:	e853 3f00 	ldrex	r3, [r3]
 800b378:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b37a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b37c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b380:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b382:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	461a      	mov	r2, r3
 800b388:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b38a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b38c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b390:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b392:	e841 2300 	strex	r3, r2, [r1]
 800b396:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1e6      	bne.n	800b36c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b39e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	3308      	adds	r3, #8
 800b3a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a8:	e853 3f00 	ldrex	r3, [r3]
 800b3ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b3ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3b0:	f023 0301 	bic.w	r3, r3, #1
 800b3b4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b3b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	3308      	adds	r3, #8
 800b3bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b3be:	647a      	str	r2, [r7, #68]	@ 0x44
 800b3c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b3c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b3c6:	e841 2300 	strex	r3, r2, [r1]
 800b3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b3cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1e5      	bne.n	800b39e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	3308      	adds	r3, #8
 800b3d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3dc:	e853 3f00 	ldrex	r3, [r3]
 800b3e0:	623b      	str	r3, [r7, #32]
   return(result);
 800b3e2:	6a3b      	ldr	r3, [r7, #32]
 800b3e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3e8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b3ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	3308      	adds	r3, #8
 800b3f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b3f2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b3f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3fa:	e841 2300 	strex	r3, r2, [r1]
 800b3fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1e5      	bne.n	800b3d2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b406:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b408:	2220      	movs	r2, #32
 800b40a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b40e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b412:	2b01      	cmp	r3, #1
 800b414:	d118      	bne.n	800b448 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	e853 3f00 	ldrex	r3, [r3]
 800b422:	60fb      	str	r3, [r7, #12]
   return(result);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f023 0310 	bic.w	r3, r3, #16
 800b42a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b42c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	461a      	mov	r2, r3
 800b432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b434:	61fb      	str	r3, [r7, #28]
 800b436:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b438:	69b9      	ldr	r1, [r7, #24]
 800b43a:	69fa      	ldr	r2, [r7, #28]
 800b43c:	e841 2300 	strex	r3, r2, [r1]
 800b440:	617b      	str	r3, [r7, #20]
   return(result);
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1e6      	bne.n	800b416 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b44a:	2200      	movs	r2, #0
 800b44c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b44e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b452:	2b01      	cmp	r3, #1
 800b454:	d109      	bne.n	800b46a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b458:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b45c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b45e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b462:	4611      	mov	r1, r2
 800b464:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b466:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b468:	e004      	b.n	800b474 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b46a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b46c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b470:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b472:	4798      	blx	r3
}
 800b474:	bf00      	nop
 800b476:	3770      	adds	r7, #112	@ 0x70
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b488:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2201      	movs	r2, #1
 800b48e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b494:	2b01      	cmp	r3, #1
 800b496:	d10b      	bne.n	800b4b0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b4a4:	0852      	lsrs	r2, r2, #1
 800b4a6:	b292      	uxth	r2, r2
 800b4a8:	4611      	mov	r1, r2
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4ae:	e004      	b.n	800b4ba <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	4798      	blx	r3
}
 800b4ba:	bf00      	nop
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b086      	sub	sp, #24
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4ea:	2b80      	cmp	r3, #128	@ 0x80
 800b4ec:	d109      	bne.n	800b502 <UART_DMAError+0x40>
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	2b21      	cmp	r3, #33	@ 0x21
 800b4f2:	d106      	bne.n	800b502 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b4fc:	6978      	ldr	r0, [r7, #20]
 800b4fe:	f7ff fe1d 	bl	800b13c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b50c:	2b40      	cmp	r3, #64	@ 0x40
 800b50e:	d109      	bne.n	800b524 <UART_DMAError+0x62>
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2b22      	cmp	r3, #34	@ 0x22
 800b514:	d106      	bne.n	800b524 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	2200      	movs	r2, #0
 800b51a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b51e:	6978      	ldr	r0, [r7, #20]
 800b520:	f7ff fe4d 	bl	800b1be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b52a:	f043 0210 	orr.w	r2, r3, #16
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b53a:	6978      	ldr	r0, [r7, #20]
 800b53c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b53e:	bf00      	nop
 800b540:	3718      	adds	r7, #24
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b084      	sub	sp, #16
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b552:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b56e:	bf00      	nop
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b088      	sub	sp, #32
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	e853 3f00 	ldrex	r3, [r3]
 800b58a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b592:	61fb      	str	r3, [r7, #28]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	461a      	mov	r2, r3
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	61bb      	str	r3, [r7, #24]
 800b59e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a0:	6979      	ldr	r1, [r7, #20]
 800b5a2:	69ba      	ldr	r2, [r7, #24]
 800b5a4:	e841 2300 	strex	r3, r2, [r1]
 800b5a8:	613b      	str	r3, [r7, #16]
   return(result);
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1e6      	bne.n	800b57e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2220      	movs	r2, #32
 800b5b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5c8:	bf00      	nop
 800b5ca:	3720      	adds	r7, #32
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d101      	bne.n	800b622 <HAL_UARTEx_DisableFifoMode+0x16>
 800b61e:	2302      	movs	r3, #2
 800b620:	e027      	b.n	800b672 <HAL_UARTEx_DisableFifoMode+0x66>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2224      	movs	r2, #36	@ 0x24
 800b62e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f022 0201 	bic.w	r2, r2, #1
 800b648:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b650:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2220      	movs	r2, #32
 800b664:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3714      	adds	r7, #20
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr

0800b67e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b084      	sub	sp, #16
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d101      	bne.n	800b696 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b692:	2302      	movs	r3, #2
 800b694:	e02d      	b.n	800b6f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2201      	movs	r2, #1
 800b69a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2224      	movs	r2, #36	@ 0x24
 800b6a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f022 0201 	bic.w	r2, r2, #1
 800b6bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	683a      	ldr	r2, [r7, #0]
 800b6ce:	430a      	orrs	r2, r1
 800b6d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f850 	bl	800b778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2220      	movs	r2, #32
 800b6e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b084      	sub	sp, #16
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d101      	bne.n	800b712 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b70e:	2302      	movs	r3, #2
 800b710:	e02d      	b.n	800b76e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2201      	movs	r2, #1
 800b716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2224      	movs	r2, #36	@ 0x24
 800b71e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f022 0201 	bic.w	r2, r2, #1
 800b738:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	430a      	orrs	r2, r1
 800b74c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f812 	bl	800b778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2220      	movs	r2, #32
 800b760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
	...

0800b778 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b784:	2b00      	cmp	r3, #0
 800b786:	d108      	bne.n	800b79a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b798:	e031      	b.n	800b7fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b79a:	2308      	movs	r3, #8
 800b79c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b79e:	2308      	movs	r3, #8
 800b7a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	0e5b      	lsrs	r3, r3, #25
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	f003 0307 	and.w	r3, r3, #7
 800b7b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	0f5b      	lsrs	r3, r3, #29
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	f003 0307 	and.w	r3, r3, #7
 800b7c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7c2:	7bbb      	ldrb	r3, [r7, #14]
 800b7c4:	7b3a      	ldrb	r2, [r7, #12]
 800b7c6:	4911      	ldr	r1, [pc, #68]	@ (800b80c <UARTEx_SetNbDataToProcess+0x94>)
 800b7c8:	5c8a      	ldrb	r2, [r1, r2]
 800b7ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b7ce:	7b3a      	ldrb	r2, [r7, #12]
 800b7d0:	490f      	ldr	r1, [pc, #60]	@ (800b810 <UARTEx_SetNbDataToProcess+0x98>)
 800b7d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
 800b7e2:	7b7a      	ldrb	r2, [r7, #13]
 800b7e4:	4909      	ldr	r1, [pc, #36]	@ (800b80c <UARTEx_SetNbDataToProcess+0x94>)
 800b7e6:	5c8a      	ldrb	r2, [r1, r2]
 800b7e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b7ec:	7b7a      	ldrb	r2, [r7, #13]
 800b7ee:	4908      	ldr	r1, [pc, #32]	@ (800b810 <UARTEx_SetNbDataToProcess+0x98>)
 800b7f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b7fe:	bf00      	nop
 800b800:	3714      	adds	r7, #20
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	0800b9d4 	.word	0x0800b9d4
 800b810:	0800b9dc 	.word	0x0800b9dc

0800b814 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800b814:	b480      	push	{r7}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	607b      	str	r3, [r7, #4]
 800b81e:	460b      	mov	r3, r1
 800b820:	817b      	strh	r3, [r7, #10]
 800b822:	4613      	mov	r3, r2
 800b824:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	897a      	ldrh	r2, [r7, #10]
 800b82a:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	893a      	ldrh	r2, [r7, #8]
 800b830:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	605a      	str	r2, [r3, #4]
}
 800b838:	bf00      	nop
 800b83a:	3714      	adds	r7, #20
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <memset>:
 800b844:	4402      	add	r2, r0
 800b846:	4603      	mov	r3, r0
 800b848:	4293      	cmp	r3, r2
 800b84a:	d100      	bne.n	800b84e <memset+0xa>
 800b84c:	4770      	bx	lr
 800b84e:	f803 1b01 	strb.w	r1, [r3], #1
 800b852:	e7f9      	b.n	800b848 <memset+0x4>

0800b854 <__libc_init_array>:
 800b854:	b570      	push	{r4, r5, r6, lr}
 800b856:	4d0d      	ldr	r5, [pc, #52]	@ (800b88c <__libc_init_array+0x38>)
 800b858:	4c0d      	ldr	r4, [pc, #52]	@ (800b890 <__libc_init_array+0x3c>)
 800b85a:	1b64      	subs	r4, r4, r5
 800b85c:	10a4      	asrs	r4, r4, #2
 800b85e:	2600      	movs	r6, #0
 800b860:	42a6      	cmp	r6, r4
 800b862:	d109      	bne.n	800b878 <__libc_init_array+0x24>
 800b864:	4d0b      	ldr	r5, [pc, #44]	@ (800b894 <__libc_init_array+0x40>)
 800b866:	4c0c      	ldr	r4, [pc, #48]	@ (800b898 <__libc_init_array+0x44>)
 800b868:	f000 f826 	bl	800b8b8 <_init>
 800b86c:	1b64      	subs	r4, r4, r5
 800b86e:	10a4      	asrs	r4, r4, #2
 800b870:	2600      	movs	r6, #0
 800b872:	42a6      	cmp	r6, r4
 800b874:	d105      	bne.n	800b882 <__libc_init_array+0x2e>
 800b876:	bd70      	pop	{r4, r5, r6, pc}
 800b878:	f855 3b04 	ldr.w	r3, [r5], #4
 800b87c:	4798      	blx	r3
 800b87e:	3601      	adds	r6, #1
 800b880:	e7ee      	b.n	800b860 <__libc_init_array+0xc>
 800b882:	f855 3b04 	ldr.w	r3, [r5], #4
 800b886:	4798      	blx	r3
 800b888:	3601      	adds	r6, #1
 800b88a:	e7f2      	b.n	800b872 <__libc_init_array+0x1e>
 800b88c:	0800b9ec 	.word	0x0800b9ec
 800b890:	0800b9ec 	.word	0x0800b9ec
 800b894:	0800b9ec 	.word	0x0800b9ec
 800b898:	0800b9f0 	.word	0x0800b9f0

0800b89c <memcpy>:
 800b89c:	440a      	add	r2, r1
 800b89e:	4291      	cmp	r1, r2
 800b8a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8a4:	d100      	bne.n	800b8a8 <memcpy+0xc>
 800b8a6:	4770      	bx	lr
 800b8a8:	b510      	push	{r4, lr}
 800b8aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8b2:	4291      	cmp	r1, r2
 800b8b4:	d1f9      	bne.n	800b8aa <memcpy+0xe>
 800b8b6:	bd10      	pop	{r4, pc}

0800b8b8 <_init>:
 800b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ba:	bf00      	nop
 800b8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8be:	bc08      	pop	{r3}
 800b8c0:	469e      	mov	lr, r3
 800b8c2:	4770      	bx	lr

0800b8c4 <_fini>:
 800b8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c6:	bf00      	nop
 800b8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ca:	bc08      	pop	{r3}
 800b8cc:	469e      	mov	lr, r3
 800b8ce:	4770      	bx	lr

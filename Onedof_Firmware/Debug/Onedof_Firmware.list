
Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbc8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800cda0  0800cda0  0000dda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ceb4  0800ceb4  0000e2d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ceb4  0800ceb4  0000deb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cebc  0800cebc  0000e2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cebc  0800cebc  0000debc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cec0  0800cec0  0000dec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  0800cec4  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001638  200002d0  0800d194  0000e2d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001908  0800d194  0000e908  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e2d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025d3d  00000000  00000000  0000e300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000427d  00000000  00000000  0003403d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  000382c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ab  00000000  00000000  00039c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b77b  00000000  00000000  0003afb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002639d  00000000  00000000  0006672e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001175a9  00000000  00000000  0008cacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a4074  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070cc  00000000  00000000  001a40b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001ab184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002d0 	.word	0x200002d0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cd88 	.word	0x0800cd88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002d4 	.word	0x200002d4
 8000214:	0800cd88 	.word	0x0800cd88

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b96a 	b.w	8000f0c <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	460c      	mov	r4, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14e      	bne.n	8000cfa <__udivmoddi4+0xaa>
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	458c      	cmp	ip, r1
 8000c60:	4686      	mov	lr, r0
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	d962      	bls.n	8000d2e <__udivmoddi4+0xde>
 8000c68:	b14a      	cbz	r2, 8000c7e <__udivmoddi4+0x2e>
 8000c6a:	f1c2 0320 	rsb	r3, r2, #32
 8000c6e:	4091      	lsls	r1, r2
 8000c70:	fa20 f303 	lsr.w	r3, r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f f68c 	uxth.w	r6, ip
 8000c86:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c96:	fb04 f106 	mul.w	r1, r4, r6
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x64>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ca6:	f080 8112 	bcs.w	8000ece <__udivmoddi4+0x27e>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 810f 	bls.w	8000ece <__udivmoddi4+0x27e>
 8000cb0:	3c02      	subs	r4, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a59      	subs	r1, r3, r1
 8000cb6:	fa1f f38e 	uxth.w	r3, lr
 8000cba:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbe:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc6:	fb00 f606 	mul.w	r6, r0, r6
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	d90a      	bls.n	8000ce4 <__udivmoddi4+0x94>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd6:	f080 80fc 	bcs.w	8000ed2 <__udivmoddi4+0x282>
 8000cda:	429e      	cmp	r6, r3
 8000cdc:	f240 80f9 	bls.w	8000ed2 <__udivmoddi4+0x282>
 8000ce0:	4463      	add	r3, ip
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cea:	2100      	movs	r1, #0
 8000cec:	b11d      	cbz	r5, 8000cf6 <__udivmoddi4+0xa6>
 8000cee:	40d3      	lsrs	r3, r2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d905      	bls.n	8000d0a <__udivmoddi4+0xba>
 8000cfe:	b10d      	cbz	r5, 8000d04 <__udivmoddi4+0xb4>
 8000d00:	e9c5 0100 	strd	r0, r1, [r5]
 8000d04:	2100      	movs	r1, #0
 8000d06:	4608      	mov	r0, r1
 8000d08:	e7f5      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d0a:	fab3 f183 	clz	r1, r3
 8000d0e:	2900      	cmp	r1, #0
 8000d10:	d146      	bne.n	8000da0 <__udivmoddi4+0x150>
 8000d12:	42a3      	cmp	r3, r4
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xcc>
 8000d16:	4290      	cmp	r0, r2
 8000d18:	f0c0 80f0 	bcc.w	8000efc <__udivmoddi4+0x2ac>
 8000d1c:	1a86      	subs	r6, r0, r2
 8000d1e:	eb64 0303 	sbc.w	r3, r4, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d0e6      	beq.n	8000cf6 <__udivmoddi4+0xa6>
 8000d28:	e9c5 6300 	strd	r6, r3, [r5]
 8000d2c:	e7e3      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	f040 8090 	bne.w	8000e54 <__udivmoddi4+0x204>
 8000d34:	eba1 040c 	sub.w	r4, r1, ip
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	2101      	movs	r1, #1
 8000d42:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d4a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb07 f006 	mul.w	r0, r7, r6
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x11c>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x11a>
 8000d64:	4298      	cmp	r0, r3
 8000d66:	f200 80cd 	bhi.w	8000f04 <__udivmoddi4+0x2b4>
 8000d6a:	4626      	mov	r6, r4
 8000d6c:	1a1c      	subs	r4, r3, r0
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d76:	fb08 4410 	mls	r4, r8, r0, r4
 8000d7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7e:	fb00 f707 	mul.w	r7, r0, r7
 8000d82:	429f      	cmp	r7, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x148>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x146>
 8000d90:	429f      	cmp	r7, r3
 8000d92:	f200 80b0 	bhi.w	8000ef6 <__udivmoddi4+0x2a6>
 8000d96:	4620      	mov	r0, r4
 8000d98:	1bdb      	subs	r3, r3, r7
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0x9c>
 8000da0:	f1c1 0620 	rsb	r6, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 f706 	lsr.w	r7, r2, r6
 8000daa:	431f      	orrs	r7, r3
 8000dac:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db0:	fa04 f301 	lsl.w	r3, r4, r1
 8000db4:	ea43 030c 	orr.w	r3, r3, ip
 8000db8:	40f4      	lsrs	r4, r6
 8000dba:	fa00 f801 	lsl.w	r8, r0, r1
 8000dbe:	0c38      	lsrs	r0, r7, #16
 8000dc0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dc4:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd4:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd8:	45a1      	cmp	r9, r4
 8000dda:	fa02 f201 	lsl.w	r2, r2, r1
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x1a6>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000de6:	f080 8084 	bcs.w	8000ef2 <__udivmoddi4+0x2a2>
 8000dea:	45a1      	cmp	r9, r4
 8000dec:	f240 8081 	bls.w	8000ef2 <__udivmoddi4+0x2a2>
 8000df0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	eba4 0409 	sub.w	r4, r4, r9
 8000dfa:	fa1f f983 	uxth.w	r9, r3
 8000dfe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e02:	fb00 4413 	mls	r4, r0, r3, r4
 8000e06:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x1d2>
 8000e12:	193c      	adds	r4, r7, r4
 8000e14:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e18:	d267      	bcs.n	8000eea <__udivmoddi4+0x29a>
 8000e1a:	45a4      	cmp	ip, r4
 8000e1c:	d965      	bls.n	8000eea <__udivmoddi4+0x29a>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	443c      	add	r4, r7
 8000e22:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e26:	fba0 9302 	umull	r9, r3, r0, r2
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	429c      	cmp	r4, r3
 8000e30:	46ce      	mov	lr, r9
 8000e32:	469c      	mov	ip, r3
 8000e34:	d351      	bcc.n	8000eda <__udivmoddi4+0x28a>
 8000e36:	d04e      	beq.n	8000ed6 <__udivmoddi4+0x286>
 8000e38:	b155      	cbz	r5, 8000e50 <__udivmoddi4+0x200>
 8000e3a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e3e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e42:	fa04 f606 	lsl.w	r6, r4, r6
 8000e46:	40cb      	lsrs	r3, r1
 8000e48:	431e      	orrs	r6, r3
 8000e4a:	40cc      	lsrs	r4, r1
 8000e4c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e50:	2100      	movs	r1, #0
 8000e52:	e750      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000e54:	f1c2 0320 	rsb	r3, r2, #32
 8000e58:	fa20 f103 	lsr.w	r1, r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa24 f303 	lsr.w	r3, r4, r3
 8000e64:	4094      	lsls	r4, r2
 8000e66:	430c      	orrs	r4, r1
 8000e68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e6c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e78:	fb08 3110 	mls	r1, r8, r0, r3
 8000e7c:	0c23      	lsrs	r3, r4, #16
 8000e7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e82:	fb00 f107 	mul.w	r1, r0, r7
 8000e86:	4299      	cmp	r1, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x24c>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e92:	d22c      	bcs.n	8000eee <__udivmoddi4+0x29e>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	d92a      	bls.n	8000eee <__udivmoddi4+0x29e>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1a5b      	subs	r3, r3, r1
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ea4:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eac:	fb01 f307 	mul.w	r3, r1, r7
 8000eb0:	42a3      	cmp	r3, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x276>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ebc:	d213      	bcs.n	8000ee6 <__udivmoddi4+0x296>
 8000ebe:	42a3      	cmp	r3, r4
 8000ec0:	d911      	bls.n	8000ee6 <__udivmoddi4+0x296>
 8000ec2:	3902      	subs	r1, #2
 8000ec4:	4464      	add	r4, ip
 8000ec6:	1ae4      	subs	r4, r4, r3
 8000ec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ecc:	e739      	b.n	8000d42 <__udivmoddi4+0xf2>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	e6f0      	b.n	8000cb4 <__udivmoddi4+0x64>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e706      	b.n	8000ce4 <__udivmoddi4+0x94>
 8000ed6:	45c8      	cmp	r8, r9
 8000ed8:	d2ae      	bcs.n	8000e38 <__udivmoddi4+0x1e8>
 8000eda:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ede:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ee2:	3801      	subs	r0, #1
 8000ee4:	e7a8      	b.n	8000e38 <__udivmoddi4+0x1e8>
 8000ee6:	4631      	mov	r1, r6
 8000ee8:	e7ed      	b.n	8000ec6 <__udivmoddi4+0x276>
 8000eea:	4603      	mov	r3, r0
 8000eec:	e799      	b.n	8000e22 <__udivmoddi4+0x1d2>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e7d4      	b.n	8000e9c <__udivmoddi4+0x24c>
 8000ef2:	46d6      	mov	lr, sl
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1a6>
 8000ef6:	4463      	add	r3, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e74d      	b.n	8000d98 <__udivmoddi4+0x148>
 8000efc:	4606      	mov	r6, r0
 8000efe:	4623      	mov	r3, r4
 8000f00:	4608      	mov	r0, r1
 8000f02:	e70f      	b.n	8000d24 <__udivmoddi4+0xd4>
 8000f04:	3e02      	subs	r6, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	e730      	b.n	8000d6c <__udivmoddi4+0x11c>
 8000f0a:	bf00      	nop

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <Vacuum_Status>:
uint16_t countPlace = 0;
uint16_t state = 0;
uint8_t set_shelves_state = 0;
ModbusHandleTypedef hmodbus;

void Vacuum_Status(EFF* eff){
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    //Vacuum On
    if (registerFrame[0x02].U16 == 1){
 8000f18:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <Vacuum_Status+0x48>)
 8000f1a:	889b      	ldrh	r3, [r3, #4]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d10b      	bne.n	8000f38 <Vacuum_Status+0x28>
        strcpy(Vacuum, "On");
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <Vacuum_Status+0x4c>)
 8000f22:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <Vacuum_Status+0x50>)
 8000f24:	6812      	ldr	r2, [r2, #0]
 8000f26:	4611      	mov	r1, r2
 8000f28:	8019      	strh	r1, [r3, #0]
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	0c12      	lsrs	r2, r2, #16
 8000f2e:	701a      	strb	r2, [r3, #0]
        eff -> solenoid_command[0] = 1;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	709a      	strb	r2, [r3, #2]
    //Vacuum Off
    else if (registerFrame[0x02].U16 == 0){
        strcpy(Vacuum, "Off");
        eff -> solenoid_command[0] = 0;
    }
}
 8000f36:	e009      	b.n	8000f4c <Vacuum_Status+0x3c>
    else if (registerFrame[0x02].U16 == 0){
 8000f38:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <Vacuum_Status+0x48>)
 8000f3a:	889b      	ldrh	r3, [r3, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d105      	bne.n	8000f4c <Vacuum_Status+0x3c>
        strcpy(Vacuum, "Off");
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <Vacuum_Status+0x4c>)
 8000f42:	4a08      	ldr	r2, [pc, #32]	@ (8000f64 <Vacuum_Status+0x54>)
 8000f44:	601a      	str	r2, [r3, #0]
        eff -> solenoid_command[0] = 0;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	709a      	strb	r2, [r3, #2]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	20000e44 	.word	0x20000e44
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	0800cda0 	.word	0x0800cda0
 8000f64:	0066664f 	.word	0x0066664f

08000f68 <Gripper_Movement_Status>:

void Gripper_Movement_Status(EFF* eff){
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
    //Movement Forward (push)
    if (registerFrame[0x03].U16 == 1){
 8000f70:	4b2a      	ldr	r3, [pc, #168]	@ (800101c <Gripper_Movement_Status+0xb4>)
 8000f72:	88db      	ldrh	r3, [r3, #6]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d123      	bne.n	8000fc0 <Gripper_Movement_Status+0x58>
        strcpy(Gripper, "Forward");
 8000f78:	4b29      	ldr	r3, [pc, #164]	@ (8001020 <Gripper_Movement_Status+0xb8>)
 8000f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8001024 <Gripper_Movement_Status+0xbc>)
 8000f7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f80:	e883 0003 	stmia.w	r3, {r0, r1}
        // if pull reed switch is activate
        if(eff -> actual_status[0] == 1 && eff -> actual_status[1] == 0){
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d10a      	bne.n	8000fa2 <Gripper_Movement_Status+0x3a>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	785b      	ldrb	r3, [r3, #1]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d106      	bne.n	8000fa2 <Gripper_Movement_Status+0x3a>
			eff -> solenoid_command[1] = 1;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 0;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	711a      	strb	r2, [r3, #4]
 8000fa0:	e035      	b.n	800100e <Gripper_Movement_Status+0xa6>
        }
        // if push reed switch is activate
        else if(eff -> actual_status[0] == 0 && eff -> actual_status[1] == 1){
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d131      	bne.n	800100e <Gripper_Movement_Status+0xa6>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	785b      	ldrb	r3, [r3, #1]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d12d      	bne.n	800100e <Gripper_Movement_Status+0xa6>
        	eff -> solenoid_command[1] = 0;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 0;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	711a      	strb	r2, [r3, #4]
        else if(eff -> actual_status[0] == 0 && eff -> actual_status[1] == 1){
        	eff -> solenoid_command[1] = 0;
			eff -> solenoid_command[2] = 1;
        }
    }
}
 8000fbe:	e026      	b.n	800100e <Gripper_Movement_Status+0xa6>
    else if (registerFrame[0x03].U16 == 0){
 8000fc0:	4b16      	ldr	r3, [pc, #88]	@ (800101c <Gripper_Movement_Status+0xb4>)
 8000fc2:	88db      	ldrh	r3, [r3, #6]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d122      	bne.n	800100e <Gripper_Movement_Status+0xa6>
        strcpy(Gripper, "Backward");
 8000fc8:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <Gripper_Movement_Status+0xb8>)
 8000fca:	4a17      	ldr	r2, [pc, #92]	@ (8001028 <Gripper_Movement_Status+0xc0>)
 8000fcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fce:	c303      	stmia	r3!, {r0, r1}
 8000fd0:	701a      	strb	r2, [r3, #0]
        if(eff -> actual_status[0] == 1 && eff -> actual_status[1] == 0){
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d10a      	bne.n	8000ff0 <Gripper_Movement_Status+0x88>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	785b      	ldrb	r3, [r3, #1]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d106      	bne.n	8000ff0 <Gripper_Movement_Status+0x88>
			eff -> solenoid_command[1] = 0;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	711a      	strb	r2, [r3, #4]
 8000fee:	e00e      	b.n	800100e <Gripper_Movement_Status+0xa6>
        else if(eff -> actual_status[0] == 0 && eff -> actual_status[1] == 1){
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10a      	bne.n	800100e <Gripper_Movement_Status+0xa6>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	785b      	ldrb	r3, [r3, #1]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d106      	bne.n	800100e <Gripper_Movement_Status+0xa6>
        	eff -> solenoid_command[1] = 0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 1;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	711a      	strb	r2, [r3, #4]
}
 800100c:	e7ff      	b.n	800100e <Gripper_Movement_Status+0xa6>
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000e44 	.word	0x20000e44
 8001020:	2000000c 	.word	0x2000000c
 8001024:	0800cda4 	.word	0x0800cda4
 8001028:	0800cdac 	.word	0x0800cdac

0800102c <Set_Home>:
		state = registerFrame[0x10].U16;
		return 1;
	}else{return 0;}
}

void Set_Home(){
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
	if(registerFrame[0x10].U16 == 2){
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <Set_Home+0x28>)
 8001032:	8c1b      	ldrh	r3, [r3, #32]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d108      	bne.n	800104a <Set_Home+0x1e>
		state = 2;
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <Set_Home+0x2c>)
 800103a:	2202      	movs	r2, #2
 800103c:	801a      	strh	r2, [r3, #0]
		strcpy(Home, "Homing...");
 800103e:	4b07      	ldr	r3, [pc, #28]	@ (800105c <Set_Home+0x30>)
 8001040:	4a07      	ldr	r2, [pc, #28]	@ (8001060 <Set_Home+0x34>)
 8001042:	ca07      	ldmia	r2, {r0, r1, r2}
 8001044:	c303      	stmia	r3!, {r0, r1}
 8001046:	801a      	strh	r2, [r3, #0]
 8001048:	e000      	b.n	800104c <Set_Home+0x20>
	}
	else{
		return;
 800104a:	bf00      	nop
//	if (Jogginghome == 1){
//		registerFrame[0x01].U16 = 0;
//	}


}
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	20000e44 	.word	0x20000e44
 8001058:	200002ec 	.word	0x200002ec
 800105c:	20000020 	.word	0x20000020
 8001060:	0800cdb8 	.word	0x0800cdb8

08001064 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001068:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <modbus_1t5_Timeout+0x3c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2201      	movs	r2, #1
 800106e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001070:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <modbus_1t5_Timeout+0x3c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <modbus_1t5_Timeout+0x3c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <modbus_1t5_Timeout+0x3c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0201 	orr.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	200007c8 	.word	0x200007c8

080010a4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <modbus_3t5_Timeout+0x1c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2201      	movs	r2, #1
 80010b2:	755a      	strb	r2, [r3, #21]

}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	200007c8 	.word	0x200007c8

080010c4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f00a fb59 	bl	800b784 <HAL_UART_GetError>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b20      	cmp	r3, #32
 80010d6:	d101      	bne.n	80010dc <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80010d8:	f7ff ffc4 	bl	8001064 <modbus_1t5_Timeout>

	}
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80010ee:	4a25      	ldr	r2, [pc, #148]	@ (8001184 <Modbus_init+0xa0>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80010f4:	4b23      	ldr	r3, [pc, #140]	@ (8001184 <Modbus_init+0xa0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	4a21      	ldr	r2, [pc, #132]	@ (8001188 <Modbus_init+0xa4>)
 8001102:	210e      	movs	r1, #14
 8001104:	4618      	mov	r0, r3
 8001106:	f008 fd81 	bl	8009c0c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	2110      	movs	r1, #16
 8001110:	4618      	mov	r0, r3
 8001112:	f00a fae1 	bl	800b6d8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	4618      	mov	r0, r3
 800111c:	f00a faf8 	bl	800b710 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4a19      	ldr	r2, [pc, #100]	@ (800118c <Modbus_init+0xa8>)
 8001126:	2104      	movs	r1, #4
 8001128:	4618      	mov	r0, r3
 800112a:	f009 fdbf 	bl	800acac <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <Modbus_init+0xa0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001134:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <Modbus_init+0xa0>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <Modbus_init+0xa0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001140:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001144:	4413      	add	r3, r2
 8001146:	3302      	adds	r3, #2
 8001148:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800114c:	4619      	mov	r1, r3
 800114e:	f009 fee7 	bl	800af20 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <Modbus_init+0xa0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d10c      	bne.n	800117c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <Modbus_init+0xa0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	4618      	mov	r0, r3
 800116a:	f007 fc7b 	bl	8008a64 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800116e:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <Modbus_init+0xa0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f007 fed4 	bl	8008f24 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200007c8 	.word	0x200007c8
 8001188:	080010a5 	.word	0x080010a5
 800118c:	080010c5 	.word	0x080010c5

08001190 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800119c:	23ff      	movs	r3, #255	@ 0xff
 800119e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80011a0:	23ff      	movs	r3, #255	@ 0xff
 80011a2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80011a4:	e013      	b.n	80011ce <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	4053      	eors	r3, r2
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80011b6:	4a0f      	ldr	r2, [pc, #60]	@ (80011f4 <CRC16+0x64>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4413      	add	r3, r2
 80011bc:	781a      	ldrb	r2, [r3, #0]
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	4053      	eors	r3, r2
 80011c2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80011c4:	4a0c      	ldr	r2, [pc, #48]	@ (80011f8 <CRC16+0x68>)
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80011ce:	883b      	ldrh	r3, [r7, #0]
 80011d0:	1e5a      	subs	r2, r3, #1
 80011d2:	803a      	strh	r2, [r7, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1e6      	bne.n	80011a6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b21a      	sxth	r2, r3
 80011de:	7bbb      	ldrb	r3, [r7, #14]
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	b29b      	uxth	r3, r3
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	20000134 	.word	0x20000134
 80011f8:	20000034 	.word	0x20000034

080011fc <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001202:	4b7e      	ldr	r3, [pc, #504]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	7ddb      	ldrb	r3, [r3, #23]
 8001208:	3b01      	subs	r3, #1
 800120a:	2b03      	cmp	r3, #3
 800120c:	d80a      	bhi.n	8001224 <Modbus_Protocal_Worker+0x28>
 800120e:	a201      	add	r2, pc, #4	@ (adr r2, 8001214 <Modbus_Protocal_Worker+0x18>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	0800122f 	.word	0x0800122f
 8001218:	080013c3 	.word	0x080013c3
 800121c:	080012bb 	.word	0x080012bb
 8001220:	080012ff 	.word	0x080012ff
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001224:	4b75      	ldr	r3, [pc, #468]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2201      	movs	r2, #1
 800122a:	75da      	strb	r2, [r3, #23]
		break;
 800122c:	e0e1      	b.n	80013f2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800122e:	4b73      	ldr	r3, [pc, #460]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800123a:	4b70      	ldr	r3, [pc, #448]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2202      	movs	r2, #2
 8001240:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001242:	f000 f9cd 	bl	80015e0 <Modbus_Emission>
 8001246:	e018      	b.n	800127a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001248:	4b6c      	ldr	r3, [pc, #432]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001252:	4b6a      	ldr	r3, [pc, #424]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800125c:	b29b      	uxth	r3, r3
 800125e:	429a      	cmp	r2, r3
 8001260:	d00b      	beq.n	800127a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001262:	4b66      	ldr	r3, [pc, #408]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2200      	movs	r2, #0
 8001268:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800126a:	4b64      	ldr	r3, [pc, #400]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001272:	4b62      	ldr	r3, [pc, #392]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2203      	movs	r2, #3
 8001278:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800127a:	4b60      	ldr	r3, [pc, #384]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001284:	2b20      	cmp	r3, #32
 8001286:	f040 80ad 	bne.w	80013e4 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800128a:	4b5c      	ldr	r3, [pc, #368]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001294:	4b59      	ldr	r3, [pc, #356]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800129a:	4b58      	ldr	r3, [pc, #352]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4b57      	ldr	r3, [pc, #348]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80012a6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80012aa:	4413      	add	r3, r2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012b2:	4619      	mov	r1, r3
 80012b4:	f009 fe34 	bl	800af20 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80012b8:	e094      	b.n	80013e4 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80012ba:	4b50      	ldr	r3, [pc, #320]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	7d1b      	ldrb	r3, [r3, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 8091 	beq.w	80013e8 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80012c6:	4b4d      	ldr	r3, [pc, #308]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	22fe      	movs	r2, #254	@ 0xfe
 80012cc:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80012ce:	4b4b      	ldr	r3, [pc, #300]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 80012d8:	4b48      	ldr	r3, [pc, #288]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80012e8:	4b44      	ldr	r3, [pc, #272]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 80012ea:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80012ec:	1a8a      	subs	r2, r1, r2
 80012ee:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80012f0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80012f4:	4b41      	ldr	r3, [pc, #260]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2204      	movs	r2, #4
 80012fa:	75da      	strb	r2, [r3, #23]
		}
		break;
 80012fc:	e074      	b.n	80013e8 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80012fe:	4b3f      	ldr	r3, [pc, #252]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001306:	f113 0f02 	cmn.w	r3, #2
 800130a:	d150      	bne.n	80013ae <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800130c:	4b3b      	ldr	r3, [pc, #236]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001314:	4b39      	ldr	r3, [pc, #228]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800131c:	4b37      	ldr	r3, [pc, #220]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001324:	3b02      	subs	r3, #2
 8001326:	4619      	mov	r1, r3
 8001328:	4610      	mov	r0, r2
 800132a:	f7ff ff31 	bl	8001190 <CRC16>
 800132e:	4603      	mov	r3, r0
 8001330:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001332:	793a      	ldrb	r2, [r7, #4]
 8001334:	4b31      	ldr	r3, [pc, #196]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001336:	6819      	ldr	r1, [r3, #0]
 8001338:	4b30      	ldr	r3, [pc, #192]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001340:	3b02      	subs	r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001348:	429a      	cmp	r2, r3
 800134a:	d10c      	bne.n	8001366 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800134c:	797a      	ldrb	r2, [r7, #5]
 800134e:	4b2b      	ldr	r3, [pc, #172]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001350:	6819      	ldr	r1, [r3, #0]
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800135a:	3b01      	subs	r3, #1
 800135c:	440b      	add	r3, r1
 800135e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001362:	429a      	cmp	r2, r3
 8001364:	d004      	beq.n	8001370 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001366:	4b25      	ldr	r3, [pc, #148]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	22ff      	movs	r2, #255	@ 0xff
 800136c:	759a      	strb	r2, [r3, #22]
				break;
 800136e:	e040      	b.n	80013f2 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001370:	4b22      	ldr	r3, [pc, #136]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001378:	4b20      	ldr	r3, [pc, #128]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d113      	bne.n	80013aa <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001382:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800138a:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001392:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001394:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800139c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800139e:	461a      	mov	r2, r3
 80013a0:	f00b fb62 	bl	800ca68 <memcpy>

			//execute command
			Modbus_frame_response();
 80013a4:	f000 f904 	bl	80015b0 <Modbus_frame_response>
 80013a8:	e001      	b.n	80013ae <Modbus_Protocal_Worker+0x1b2>
				break;
 80013aa:	bf00      	nop
					}
		break;


	}
}
 80013ac:	e021      	b.n	80013f2 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80013ae:	4b13      	ldr	r3, [pc, #76]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	7d5b      	ldrb	r3, [r3, #21]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d019      	beq.n	80013ec <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80013b8:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2201      	movs	r2, #1
 80013be:	75da      	strb	r2, [r3, #23]
		break;
 80013c0:	e014      	b.n	80013ec <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013cc:	2b20      	cmp	r3, #32
 80013ce:	d10f      	bne.n	80013f0 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <Modbus_Protocal_Worker+0x200>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2201      	movs	r2, #1
 80013e0:	75da      	strb	r2, [r3, #23]
		break;
 80013e2:	e005      	b.n	80013f0 <Modbus_Protocal_Worker+0x1f4>
		break;
 80013e4:	bf00      	nop
 80013e6:	e004      	b.n	80013f2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80013e8:	bf00      	nop
 80013ea:	e002      	b.n	80013f2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80013ec:	bf00      	nop
 80013ee:	e000      	b.n	80013f2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80013f0:	bf00      	nop
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200007c8 	.word	0x200007c8

08001400 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001406:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <modbusWrite1Register+0x7c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	7e5b      	ldrb	r3, [r3, #25]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	b29b      	uxth	r3, r3
 8001410:	4a1a      	ldr	r2, [pc, #104]	@ (800147c <modbusWrite1Register+0x7c>)
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	7e92      	ldrb	r2, [r2, #26]
 8001416:	4413      	add	r3, r2
 8001418:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800141a:	88fa      	ldrh	r2, [r7, #6]
 800141c:	4b17      	ldr	r3, [pc, #92]	@ (800147c <modbusWrite1Register+0x7c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	429a      	cmp	r2, r3
 8001424:	d903      	bls.n	800142e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001426:	2002      	movs	r0, #2
 8001428:	f000 f8a0 	bl	800156c <ModbusErrorReply>
			 return;
 800142c:	e023      	b.n	8001476 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800142e:	4b13      	ldr	r3, [pc, #76]	@ (800147c <modbusWrite1Register+0x7c>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4b12      	ldr	r3, [pc, #72]	@ (800147c <modbusWrite1Register+0x7c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6859      	ldr	r1, [r3, #4]
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	440b      	add	r3, r1
 800143e:	7ed2      	ldrb	r2, [r2, #27]
 8001440:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <modbusWrite1Register+0x7c>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <modbusWrite1Register+0x7c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	440b      	add	r3, r1
 8001452:	7f12      	ldrb	r2, [r2, #28]
 8001454:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <modbusWrite1Register+0x7c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800145e:	4b07      	ldr	r3, [pc, #28]	@ (800147c <modbusWrite1Register+0x7c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001464:	2208      	movs	r2, #8
 8001466:	4619      	mov	r1, r3
 8001468:	f00b fafe 	bl	800ca68 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800146c:	4b03      	ldr	r3, [pc, #12]	@ (800147c <modbusWrite1Register+0x7c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2205      	movs	r2, #5
 8001472:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200007c8 	.word	0x200007c8

08001480 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001486:	4b38      	ldr	r3, [pc, #224]	@ (8001568 <modbusRead1Register+0xe8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	7edb      	ldrb	r3, [r3, #27]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	b29b      	uxth	r3, r3
 8001490:	4a35      	ldr	r2, [pc, #212]	@ (8001568 <modbusRead1Register+0xe8>)
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	7f12      	ldrb	r2, [r2, #28]
 8001496:	4413      	add	r3, r2
 8001498:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800149a:	4b33      	ldr	r3, [pc, #204]	@ (8001568 <modbusRead1Register+0xe8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	7e5b      	ldrb	r3, [r3, #25]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4a30      	ldr	r2, [pc, #192]	@ (8001568 <modbusRead1Register+0xe8>)
 80014a6:	6812      	ldr	r2, [r2, #0]
 80014a8:	7e92      	ldrb	r2, [r2, #26]
 80014aa:	4413      	add	r3, r2
 80014ac:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <modbusRead1Register+0x3a>
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	2b7d      	cmp	r3, #125	@ 0x7d
 80014b8:	d903      	bls.n	80014c2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80014ba:	2003      	movs	r0, #3
 80014bc:	f000 f856 	bl	800156c <ModbusErrorReply>
		 return;
 80014c0:	e04e      	b.n	8001560 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80014c2:	88ba      	ldrh	r2, [r7, #4]
 80014c4:	4b28      	ldr	r3, [pc, #160]	@ (8001568 <modbusRead1Register+0xe8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d808      	bhi.n	80014e0 <modbusRead1Register+0x60>
 80014ce:	88ba      	ldrh	r2, [r7, #4]
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	4413      	add	r3, r2
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b24      	ldr	r3, [pc, #144]	@ (8001568 <modbusRead1Register+0xe8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d903      	bls.n	80014e8 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014e0:	2002      	movs	r0, #2
 80014e2:	f000 f843 	bl	800156c <ModbusErrorReply>
		 return;
 80014e6:	e03b      	b.n	8001560 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80014e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001568 <modbusRead1Register+0xe8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2203      	movs	r2, #3
 80014ee:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <modbusRead1Register+0xe8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	0052      	lsls	r2, r2, #1
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001502:	2400      	movs	r4, #0
 8001504:	e020      	b.n	8001548 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001506:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <modbusRead1Register+0xe8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4423      	add	r3, r4
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <modbusRead1Register+0xe8>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	1c63      	adds	r3, r4, #1
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	7849      	ldrb	r1, [r1, #1]
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001526:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <modbusRead1Register+0xe8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	88bb      	ldrh	r3, [r7, #4]
 800152e:	4423      	add	r3, r4
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	18d1      	adds	r1, r2, r3
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <modbusRead1Register+0xe8>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	0063      	lsls	r3, r4, #1
 800153a:	3303      	adds	r3, #3
 800153c:	7809      	ldrb	r1, [r1, #0]
 800153e:	4413      	add	r3, r2
 8001540:	460a      	mov	r2, r1
 8001542:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001546:	3401      	adds	r4, #1
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	429c      	cmp	r4, r3
 800154c:	dbdb      	blt.n	8001506 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	3301      	adds	r3, #1
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <modbusRead1Register+0xe8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0052      	lsls	r2, r2, #1
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bd90      	pop	{r4, r7, pc}
 8001566:	bf00      	nop
 8001568:	200007c8 	.word	0x200007c8

0800156c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <ModbusErrorReply+0x40>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	7e1a      	ldrb	r2, [r3, #24]
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <ModbusErrorReply+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <ModbusErrorReply+0x40>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	79fa      	ldrb	r2, [r7, #7]
 8001590:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001594:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <ModbusErrorReply+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2202      	movs	r2, #2
 800159a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	200007c8 	.word	0x200007c8

080015b0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80015b4:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <Modbus_frame_response+0x2c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	7e1b      	ldrb	r3, [r3, #24]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d004      	beq.n	80015c8 <Modbus_frame_response+0x18>
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d105      	bne.n	80015ce <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80015c2:	f7ff ff1d 	bl	8001400 <modbusWrite1Register>
		break;
 80015c6:	e006      	b.n	80015d6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80015c8:	f7ff ff5a 	bl	8001480 <modbusRead1Register>
		break;
 80015cc:	e003      	b.n	80015d6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f7ff ffcc 	bl	800156c <ModbusErrorReply>
		break;
 80015d4:	bf00      	nop

	}
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200007c8 	.word	0x200007c8

080015e0 <Modbus_Emission>:

void Modbus_Emission()
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015e6:	4b38      	ldr	r3, [pc, #224]	@ (80016c8 <Modbus_Emission+0xe8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015f0:	2b20      	cmp	r3, #32
 80015f2:	d15d      	bne.n	80016b0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80015f4:	4b34      	ldr	r3, [pc, #208]	@ (80016c8 <Modbus_Emission+0xe8>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b33      	ldr	r3, [pc, #204]	@ (80016c8 <Modbus_Emission+0xe8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	7812      	ldrb	r2, [r2, #0]
 80015fe:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001602:	4b31      	ldr	r3, [pc, #196]	@ (80016c8 <Modbus_Emission+0xe8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800160a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800160c:	4b2e      	ldr	r3, [pc, #184]	@ (80016c8 <Modbus_Emission+0xe8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001614:	4b2c      	ldr	r3, [pc, #176]	@ (80016c8 <Modbus_Emission+0xe8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 800161c:	461a      	mov	r2, r3
 800161e:	f00b fa23 	bl	800ca68 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001622:	4b29      	ldr	r3, [pc, #164]	@ (80016c8 <Modbus_Emission+0xe8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800162a:	461a      	mov	r2, r3
 800162c:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <Modbus_Emission+0xe8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3203      	adds	r2, #3
 8001632:	b292      	uxth	r2, r2
 8001634:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001638:	4b23      	ldr	r3, [pc, #140]	@ (80016c8 <Modbus_Emission+0xe8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001640:	4b21      	ldr	r3, [pc, #132]	@ (80016c8 <Modbus_Emission+0xe8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001648:	3b02      	subs	r3, #2
 800164a:	4619      	mov	r1, r3
 800164c:	4610      	mov	r0, r2
 800164e:	f7ff fd9f 	bl	8001190 <CRC16>
 8001652:	4603      	mov	r3, r0
 8001654:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001656:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <Modbus_Emission+0xe8>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <Modbus_Emission+0xe8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001662:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001664:	7939      	ldrb	r1, [r7, #4]
 8001666:	4413      	add	r3, r2
 8001668:	460a      	mov	r2, r1
 800166a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800166e:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <Modbus_Emission+0xe8>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <Modbus_Emission+0xe8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800167a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800167c:	7979      	ldrb	r1, [r7, #5]
 800167e:	4413      	add	r3, r2
 8001680:	460a      	mov	r2, r1
 8001682:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <Modbus_Emission+0xe8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001690:	2b20      	cmp	r3, #32
 8001692:	d10d      	bne.n	80016b0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <Modbus_Emission+0xe8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <Modbus_Emission+0xe8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <Modbus_Emission+0xe8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80016a6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80016aa:	461a      	mov	r2, r3
 80016ac:	f009 fbb8 	bl	800ae20 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <Modbus_Emission+0xe8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2200      	movs	r2, #0
 80016b6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80016b8:	4b03      	ldr	r3, [pc, #12]	@ (80016c8 <Modbus_Emission+0xe8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2200      	movs	r2, #0
 80016be:	755a      	strb	r2, [r3, #21]

}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200007c8 	.word	0x200007c8

080016cc <trapezoidalGeneration>:
 *      Author: naker
 */
#include "Trapezoidal.h"

void trapezoidalGeneration(trapezoidalGen* genTrapezoidal, double initial_position, double target_position,
		double vel_max, double acc_max){
 80016cc:	b5b0      	push	{r4, r5, r7, lr}
 80016ce:	b092      	sub	sp, #72	@ 0x48
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6278      	str	r0, [r7, #36]	@ 0x24
 80016d4:	ed87 0b06 	vstr	d0, [r7, #24]
 80016d8:	ed87 1b04 	vstr	d1, [r7, #16]
 80016dc:	ed87 2b02 	vstr	d2, [r7, #8]
 80016e0:	ed87 3b00 	vstr	d3, [r7]
	// Set parameters
	double distance = 0.0; // qf-qi
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double d_acc = 0.0; // acc and dcc distancea
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double vel_peak = 0.0;
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	uint8_t pattern = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	genTrapezoidal -> total_time = 0.0;
 800170e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	genTrapezoidal -> t0 = 0.0;
 800171c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9c1 2300 	strd	r2, r3, [r1]
	genTrapezoidal -> t1 = 0.0;
 800172a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	e9c1 2302 	strd	r2, r3, [r1, #8]
	genTrapezoidal -> t2 = 0.0;
 8001738:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	e9c1 2304 	strd	r2, r3, [r1, #16]
	genTrapezoidal -> t3 = 0.0;
 8001746:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9c1 2306 	strd	r2, r3, [r1, #24]
	genTrapezoidal -> initial_position = initial_position;
 8001754:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001756:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800175a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	genTrapezoidal -> final_position = target_position;
 800175e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001760:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001764:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	// Calculate distance
	distance = fabs((target_position - initial_position));
 8001768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800176c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001770:	f7fe fd56 	bl	8000220 <__aeabi_dsub>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4611      	mov	r1, r2
 800177a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800177c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001780:	63fb      	str	r3, [r7, #60]	@ 0x3c
	d_acc = ((vel_max * vel_max) / acc_max);
 8001782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001786:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800178a:	f7fe ff01 	bl	8000590 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800179a:	f7ff f823 	bl	80007e4 <__aeabi_ddiv>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	// Direction choose
	if((target_position - initial_position) >= 0){
 80017a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017ae:	f7fe fd37 	bl	8000220 <__aeabi_dsub>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	f7ff f96b 	bl	8000a9c <__aeabi_dcmpge>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <trapezoidalGeneration+0x10a>
		// Move down
		genTrapezoidal -> dir = 1;
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80017d4:	e016      	b.n	8001804 <trapezoidalGeneration+0x138>
	}
	else if((target_position - initial_position) < 0){
 80017d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017de:	f7fe fd1f 	bl	8000220 <__aeabi_dsub>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	f7ff f93f 	bl	8000a74 <__aeabi_dcmplt>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <trapezoidalGeneration+0x138>
		// Move up
		genTrapezoidal -> dir = -1;
 80017fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fe:	22ff      	movs	r2, #255	@ 0xff
 8001800:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}

	// Find trajectory pattern
	if(distance <= d_acc){
 8001804:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001808:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800180c:	f7ff f93c 	bl	8000a88 <__aeabi_dcmple>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <trapezoidalGeneration+0x152>
		// Not reach max velocity
		pattern = 1;
 8001816:	2301      	movs	r3, #1
 8001818:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800181c:	e00b      	b.n	8001836 <trapezoidalGeneration+0x16a>
	}
	else if(distance > d_acc){
 800181e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001822:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001826:	f7ff f943 	bl	8000ab0 <__aeabi_dcmpgt>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <trapezoidalGeneration+0x16a>
		// Reach max velocity
		pattern = 2;
 8001830:	2302      	movs	r3, #2
 8001832:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	switch(pattern){
 8001836:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800183a:	2b01      	cmp	r3, #1
 800183c:	d002      	beq.n	8001844 <trapezoidalGeneration+0x178>
 800183e:	2b02      	cmp	r3, #2
 8001840:	d045      	beq.n	80018ce <trapezoidalGeneration+0x202>
		genTrapezoidal -> t2 = genTrapezoidal -> t1 + ((distance - d_acc) / vel_max);
		genTrapezoidal -> t3 = genTrapezoidal -> t2 + genTrapezoidal -> t1;
		genTrapezoidal -> total_time = genTrapezoidal -> t3;
		break;
	default:
		break;
 8001842:	e086      	b.n	8001952 <trapezoidalGeneration+0x286>
		vel_peak = sqrt(2 * acc_max * distance);
 8001844:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	f7fe fcea 	bl	8000224 <__adddf3>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800185c:	f7fe fe98 	bl	8000590 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	ec43 2b17 	vmov	d7, r2, r3
 8001868:	eeb0 0a47 	vmov.f32	s0, s14
 800186c:	eef0 0a67 	vmov.f32	s1, s15
 8001870:	f00b f908 	bl	800ca84 <sqrt>
 8001874:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
		genTrapezoidal -> t0 = 0.0;
 8001878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	e9c1 2300 	strd	r2, r3, [r1]
		genTrapezoidal -> t1 = vel_peak / acc_max;
 8001886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800188a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800188e:	f7fe ffa9 	bl	80007e4 <__aeabi_ddiv>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001898:	e9c1 2302 	strd	r2, r3, [r1, #8]
		genTrapezoidal -> t2 = genTrapezoidal -> t1 + genTrapezoidal -> t1;
 800189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	f7fe fcbd 	bl	8000224 <__adddf3>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		genTrapezoidal -> t3 = genTrapezoidal -> t2;
 80018b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
		genTrapezoidal -> total_time = genTrapezoidal -> t3;
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018c8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		break;
 80018cc:	e041      	b.n	8001952 <trapezoidalGeneration+0x286>
		genTrapezoidal -> t0 = 0.0;
 80018ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	e9c1 2300 	strd	r2, r3, [r1]
		genTrapezoidal -> t1 = vel_max / acc_max;
 80018dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018e4:	f7fe ff7e 	bl	80007e4 <__aeabi_ddiv>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
		genTrapezoidal -> t2 = genTrapezoidal -> t1 + ((distance - d_acc) / vel_max);
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80018f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80018fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001900:	f7fe fc8e 	bl	8000220 <__aeabi_dsub>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001910:	f7fe ff68 	bl	80007e4 <__aeabi_ddiv>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4620      	mov	r0, r4
 800191a:	4629      	mov	r1, r5
 800191c:	f7fe fc82 	bl	8000224 <__adddf3>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001926:	e9c1 2304 	strd	r2, r3, [r1, #16]
		genTrapezoidal -> t3 = genTrapezoidal -> t2 + genTrapezoidal -> t1;
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001936:	f7fe fc75 	bl	8000224 <__adddf3>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001940:	e9c1 2306 	strd	r2, r3, [r1, #24]
		genTrapezoidal -> total_time = genTrapezoidal -> t3;
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800194a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800194c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		break;
 8001950:	bf00      	nop
	}
	if(distance == 0){
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800195e:	f7ff f87f 	bl	8000a60 <__aeabi_dcmpeq>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d100      	bne.n	800196a <trapezoidalGeneration+0x29e>
		genTrapezoidal -> total_time = 0.0;
	}
}
 8001968:	e006      	b.n	8001978 <trapezoidalGeneration+0x2ac>
		genTrapezoidal -> total_time = 0.0;
 800196a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
}
 8001978:	bf00      	nop
 800197a:	3748      	adds	r7, #72	@ 0x48
 800197c:	46bd      	mov	sp, r7
 800197e:	bdb0      	pop	{r4, r5, r7, pc}

08001980 <trapezoidalComputation>:

void trapezoidalComputation(trapezoidalCompute* computeTrapezoidal, trapezoidalGen* genTrapezoidal, double vel_max, double acc_max){
 8001980:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	6178      	str	r0, [r7, #20]
 800198a:	6139      	str	r1, [r7, #16]
 800198c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001990:	ed87 1b00 	vstr	d1, [r7]

	static double p_i, v_i = 0.0;
	static uint8_t pass_1, pass_2, pass_3 = 1;
	computeTrapezoidal -> t += 1.0/1000.0; // plus time every 0.001 sec or 1000 hz
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	e9d3 0100 	ldrd	r0, r1, [r3]
 800199a:	a3a3      	add	r3, pc, #652	@ (adr r3, 8001c28 <trapezoidalComputation+0x2a8>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7fe fc40 	bl	8000224 <__adddf3>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	6979      	ldr	r1, [r7, #20]
 80019aa:	e9c1 2300 	strd	r2, r3, [r1]
	computeTrapezoidal -> is_finish = 0;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2200      	movs	r2, #0
 80019b2:	721a      	strb	r2, [r3, #8]
	if(genTrapezoidal -> t2 != genTrapezoidal -> t3){
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019c0:	f7ff f84e 	bl	8000a60 <__aeabi_dcmpeq>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f040 820e 	bne.w	8001de8 <trapezoidalComputation+0x468>
		if((genTrapezoidal -> t0 <= computeTrapezoidal -> t) && (computeTrapezoidal -> t <= genTrapezoidal -> t1)){
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7ff f856 	bl	8000a88 <__aeabi_dcmple>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80ae 	beq.w	8001b40 <trapezoidalComputation+0x1c0>
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019f0:	f7ff f84a 	bl	8000a88 <__aeabi_dcmple>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80a2 	beq.w	8001b40 <trapezoidalComputation+0x1c0>
			if(pass_1 == 1){
 80019fc:	4b84      	ldr	r3, [pc, #528]	@ (8001c10 <trapezoidalComputation+0x290>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d112      	bne.n	8001a2a <trapezoidalComputation+0xaa>
				p_i = genTrapezoidal -> initial_position;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001a0a:	4982      	ldr	r1, [pc, #520]	@ (8001c14 <trapezoidalComputation+0x294>)
 8001a0c:	e9c1 2300 	strd	r2, r3, [r1]
				v_i = 0.0;
 8001a10:	4981      	ldr	r1, [pc, #516]	@ (8001c18 <trapezoidalComputation+0x298>)
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9c1 2300 	strd	r2, r3, [r1]
				pass_1 = 0;
 8001a1e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c10 <trapezoidalComputation+0x290>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
				pass_2 = 1;
 8001a24:	4b7d      	ldr	r3, [pc, #500]	@ (8001c1c <trapezoidalComputation+0x29c>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
			}
			computeTrapezoidal -> set_pos = p_i  + (v_i * (computeTrapezoidal -> t - genTrapezoidal -> t0)) + ((genTrapezoidal -> dir * 0.5 * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t0)  * (computeTrapezoidal -> t - genTrapezoidal -> t0)));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a36:	f7fe fbf3 	bl	8000220 <__aeabi_dsub>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	4b75      	ldr	r3, [pc, #468]	@ (8001c18 <trapezoidalComputation+0x298>)
 8001a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a48:	f7fe fda2 	bl	8000590 <__aeabi_dmul>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	4b6f      	ldr	r3, [pc, #444]	@ (8001c14 <trapezoidalComputation+0x294>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	f7fe fbe3 	bl	8000224 <__adddf3>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4614      	mov	r4, r2
 8001a64:	461d      	mov	r5, r3
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd25 	bl	80004bc <__aeabi_i2d>
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	4b6a      	ldr	r3, [pc, #424]	@ (8001c20 <trapezoidalComputation+0x2a0>)
 8001a78:	f7fe fd8a 	bl	8000590 <__aeabi_dmul>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a88:	f7fe fd82 	bl	8000590 <__aeabi_dmul>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4690      	mov	r8, r2
 8001a92:	4699      	mov	r9, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fbbe 	bl	8000220 <__aeabi_dsub>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4640      	mov	r0, r8
 8001aaa:	4649      	mov	r1, r9
 8001aac:	f7fe fd70 	bl	8000590 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4690      	mov	r8, r2
 8001ab6:	4699      	mov	r9, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac4:	f7fe fbac 	bl	8000220 <__aeabi_dsub>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4640      	mov	r0, r8
 8001ace:	4649      	mov	r1, r9
 8001ad0:	f7fe fd5e 	bl	8000590 <__aeabi_dmul>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4620      	mov	r0, r4
 8001ada:	4629      	mov	r1, r5
 8001adc:	f7fe fba2 	bl	8000224 <__adddf3>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	6979      	ldr	r1, [r7, #20]
 8001ae6:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidal -> set_vel = v_i + (genTrapezoidal -> dir * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t0));
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fce3 	bl	80004bc <__aeabi_i2d>
 8001af6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001afa:	f7fe fd49 	bl	8000590 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4614      	mov	r4, r2
 8001b04:	461d      	mov	r5, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fb85 	bl	8000220 <__aeabi_dsub>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fd37 	bl	8000590 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c18 <trapezoidalComputation+0x298>)
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	f7fe fb78 	bl	8000224 <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	6979      	ldr	r1, [r7, #20]
 8001b3a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001b3e:	e30d      	b.n	800215c <trapezoidalComputation+0x7dc>
		}
		else if((genTrapezoidal -> t1 < computeTrapezoidal -> t) && (computeTrapezoidal -> t <= genTrapezoidal -> t2)){
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	f7fe ff92 	bl	8000a74 <__aeabi_dcmplt>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d06c      	beq.n	8001c30 <trapezoidalComputation+0x2b0>
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b62:	f7fe ff91 	bl	8000a88 <__aeabi_dcmple>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d061      	beq.n	8001c30 <trapezoidalComputation+0x2b0>
			if(pass_2 == 1){
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c1c <trapezoidalComputation+0x29c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d111      	bne.n	8001b98 <trapezoidalComputation+0x218>
				p_i = computeTrapezoidal -> set_pos;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b7a:	4926      	ldr	r1, [pc, #152]	@ (8001c14 <trapezoidalComputation+0x294>)
 8001b7c:	e9c1 2300 	strd	r2, r3, [r1]
				v_i = computeTrapezoidal -> set_vel;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b86:	4924      	ldr	r1, [pc, #144]	@ (8001c18 <trapezoidalComputation+0x298>)
 8001b88:	e9c1 2300 	strd	r2, r3, [r1]
				pass_2 = 0;
 8001b8c:	4b23      	ldr	r3, [pc, #140]	@ (8001c1c <trapezoidalComputation+0x29c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
				pass_3 = 1;
 8001b92:	4b24      	ldr	r3, [pc, #144]	@ (8001c24 <trapezoidalComputation+0x2a4>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
			}
			computeTrapezoidal -> set_pos = p_i + ((genTrapezoidal -> dir * vel_max * (computeTrapezoidal -> t - genTrapezoidal -> t1)));
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fc8c 	bl	80004bc <__aeabi_i2d>
 8001ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ba8:	f7fe fcf2 	bl	8000590 <__aeabi_dmul>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	461d      	mov	r5, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001bc0:	f7fe fb2e 	bl	8000220 <__aeabi_dsub>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4620      	mov	r0, r4
 8001bca:	4629      	mov	r1, r5
 8001bcc:	f7fe fce0 	bl	8000590 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <trapezoidalComputation+0x294>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7fe fb21 	bl	8000224 <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	6979      	ldr	r1, [r7, #20]
 8001be8:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidal -> set_vel = vel_max * genTrapezoidal -> dir;
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fc62 	bl	80004bc <__aeabi_i2d>
 8001bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bfc:	f7fe fcc8 	bl	8000590 <__aeabi_dmul>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	6979      	ldr	r1, [r7, #20]
 8001c06:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001c0a:	e2a7      	b.n	800215c <trapezoidalComputation+0x7dc>
 8001c0c:	f3af 8000 	nop.w
 8001c10:	200007cc 	.word	0x200007cc
 8001c14:	200007d0 	.word	0x200007d0
 8001c18:	200007d8 	.word	0x200007d8
 8001c1c:	200007e0 	.word	0x200007e0
 8001c20:	3fe00000 	.word	0x3fe00000
 8001c24:	20000234 	.word	0x20000234
 8001c28:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c2c:	3f50624d 	.word	0x3f50624d
		}
		else if((genTrapezoidal -> t2 < computeTrapezoidal -> t) && (computeTrapezoidal -> t <= genTrapezoidal -> t3)){
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3c:	f7fe ff1a 	bl	8000a74 <__aeabi_dcmplt>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 80aa 	beq.w	8001d9c <trapezoidalComputation+0x41c>
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c54:	f7fe ff18 	bl	8000a88 <__aeabi_dcmple>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 809e 	beq.w	8001d9c <trapezoidalComputation+0x41c>
			if(pass_3 == 1){
 8001c60:	4b67      	ldr	r3, [pc, #412]	@ (8001e00 <trapezoidalComputation+0x480>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d10e      	bne.n	8001c86 <trapezoidalComputation+0x306>
				p_i = computeTrapezoidal -> set_pos;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c6e:	4965      	ldr	r1, [pc, #404]	@ (8001e04 <trapezoidalComputation+0x484>)
 8001c70:	e9c1 2300 	strd	r2, r3, [r1]
				v_i = computeTrapezoidal -> set_vel;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c7a:	4963      	ldr	r1, [pc, #396]	@ (8001e08 <trapezoidalComputation+0x488>)
 8001c7c:	e9c1 2300 	strd	r2, r3, [r1]
				pass_3 = 0;
 8001c80:	4b5f      	ldr	r3, [pc, #380]	@ (8001e00 <trapezoidalComputation+0x480>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
			}
			computeTrapezoidal -> set_pos = p_i + (v_i * (computeTrapezoidal -> t - genTrapezoidal -> t2)) - ((genTrapezoidal -> dir * 0.5 * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t2)) * (computeTrapezoidal -> t - genTrapezoidal -> t2));
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c92:	f7fe fac5 	bl	8000220 <__aeabi_dsub>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001e08 <trapezoidalComputation+0x488>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fc74 	bl	8000590 <__aeabi_dmul>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4b54      	ldr	r3, [pc, #336]	@ (8001e04 <trapezoidalComputation+0x484>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	f7fe fab5 	bl	8000224 <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4614      	mov	r4, r2
 8001cc0:	461d      	mov	r5, r3
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fbf7 	bl	80004bc <__aeabi_i2d>
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	4b4e      	ldr	r3, [pc, #312]	@ (8001e0c <trapezoidalComputation+0x48c>)
 8001cd4:	f7fe fc5c 	bl	8000590 <__aeabi_dmul>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ce4:	f7fe fc54 	bl	8000590 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4690      	mov	r8, r2
 8001cee:	4699      	mov	r9, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001cfc:	f7fe fa90 	bl	8000220 <__aeabi_dsub>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4640      	mov	r0, r8
 8001d06:	4649      	mov	r1, r9
 8001d08:	f7fe fc42 	bl	8000590 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4690      	mov	r8, r2
 8001d12:	4699      	mov	r9, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d20:	f7fe fa7e 	bl	8000220 <__aeabi_dsub>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4640      	mov	r0, r8
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	f7fe fc30 	bl	8000590 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4620      	mov	r0, r4
 8001d36:	4629      	mov	r1, r5
 8001d38:	f7fe fa72 	bl	8000220 <__aeabi_dsub>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	6979      	ldr	r1, [r7, #20]
 8001d42:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidal -> set_vel = v_i - (genTrapezoidal -> dir * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t2));
 8001d46:	4b30      	ldr	r3, [pc, #192]	@ (8001e08 <trapezoidalComputation+0x488>)
 8001d48:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fbb2 	bl	80004bc <__aeabi_i2d>
 8001d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d5c:	f7fe fc18 	bl	8000590 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4690      	mov	r8, r2
 8001d66:	4699      	mov	r9, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d74:	f7fe fa54 	bl	8000220 <__aeabi_dsub>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4640      	mov	r0, r8
 8001d7e:	4649      	mov	r1, r9
 8001d80:	f7fe fc06 	bl	8000590 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f7fe fa48 	bl	8000220 <__aeabi_dsub>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	6979      	ldr	r1, [r7, #20]
 8001d96:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001d9a:	e1df      	b.n	800215c <trapezoidalComputation+0x7dc>
		}
		else if(genTrapezoidal -> t3 < computeTrapezoidal -> t){
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fe64 	bl	8000a74 <__aeabi_dcmplt>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d100      	bne.n	8001db4 <trapezoidalComputation+0x434>
			computeTrapezoidal -> set_pos = genTrapezoidal -> final_position;
			computeTrapezoidal -> set_vel = 0.0;
			computeTrapezoidal -> is_finish = 1;
		}
	}
}
 8001db2:	e1d3      	b.n	800215c <trapezoidalComputation+0x7dc>
			pass_1 = 1;
 8001db4:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <trapezoidalComputation+0x490>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
			pass_2 = 1;
 8001dba:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <trapezoidalComputation+0x494>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
			pass_3 = 1;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <trapezoidalComputation+0x480>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
			computeTrapezoidal -> set_pos = genTrapezoidal -> final_position;
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001dcc:	6979      	ldr	r1, [r7, #20]
 8001dce:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidal -> set_vel = 0.0;
 8001dd2:	6979      	ldr	r1, [r7, #20]
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9c1 2304 	strd	r2, r3, [r1, #16]
			computeTrapezoidal -> is_finish = 1;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2201      	movs	r2, #1
 8001de4:	721a      	strb	r2, [r3, #8]
}
 8001de6:	e1b9      	b.n	800215c <trapezoidalComputation+0x7dc>
	else if(genTrapezoidal -> t2 == genTrapezoidal -> t3){
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001df4:	f7fe fe34 	bl	8000a60 <__aeabi_dcmpeq>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10c      	bne.n	8001e18 <trapezoidalComputation+0x498>
}
 8001dfe:	e1ad      	b.n	800215c <trapezoidalComputation+0x7dc>
 8001e00:	20000234 	.word	0x20000234
 8001e04:	200007d0 	.word	0x200007d0
 8001e08:	200007d8 	.word	0x200007d8
 8001e0c:	3fe00000 	.word	0x3fe00000
 8001e10:	200007cc 	.word	0x200007cc
 8001e14:	200007e0 	.word	0x200007e0
		if((genTrapezoidal -> t0 <= computeTrapezoidal -> t) && (computeTrapezoidal -> t <= genTrapezoidal -> t1)){
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e24:	f7fe fe30 	bl	8000a88 <__aeabi_dcmple>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80af 	beq.w	8001f8e <trapezoidalComputation+0x60e>
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e3c:	f7fe fe24 	bl	8000a88 <__aeabi_dcmple>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80a3 	beq.w	8001f8e <trapezoidalComputation+0x60e>
			if(pass_1 == 1){
 8001e48:	4bb2      	ldr	r3, [pc, #712]	@ (8002114 <trapezoidalComputation+0x794>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d113      	bne.n	8001e78 <trapezoidalComputation+0x4f8>
				p_i = 0.0;
 8001e50:	49b1      	ldr	r1, [pc, #708]	@ (8002118 <trapezoidalComputation+0x798>)
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	e9c1 2300 	strd	r2, r3, [r1]
				v_i = 0.0;
 8001e5e:	49af      	ldr	r1, [pc, #700]	@ (800211c <trapezoidalComputation+0x79c>)
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9c1 2300 	strd	r2, r3, [r1]
				pass_1 = 0;
 8001e6c:	4ba9      	ldr	r3, [pc, #676]	@ (8002114 <trapezoidalComputation+0x794>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
				pass_2 = 1;
 8001e72:	4bab      	ldr	r3, [pc, #684]	@ (8002120 <trapezoidalComputation+0x7a0>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
			computeTrapezoidal -> set_pos = p_i + (v_i * (computeTrapezoidal -> t - genTrapezoidal -> t0)) + ((genTrapezoidal -> dir * 0.5 * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t0) * (computeTrapezoidal -> t - genTrapezoidal -> t0)));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	f7fe f9cc 	bl	8000220 <__aeabi_dsub>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4ba2      	ldr	r3, [pc, #648]	@ (800211c <trapezoidalComputation+0x79c>)
 8001e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e96:	f7fe fb7b 	bl	8000590 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4b9d      	ldr	r3, [pc, #628]	@ (8002118 <trapezoidalComputation+0x798>)
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	f7fe f9bc 	bl	8000224 <__adddf3>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	461d      	mov	r5, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fafe 	bl	80004bc <__aeabi_i2d>
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	4b97      	ldr	r3, [pc, #604]	@ (8002124 <trapezoidalComputation+0x7a4>)
 8001ec6:	f7fe fb63 	bl	8000590 <__aeabi_dmul>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ed6:	f7fe fb5b 	bl	8000590 <__aeabi_dmul>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4690      	mov	r8, r2
 8001ee0:	4699      	mov	r9, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eee:	f7fe f997 	bl	8000220 <__aeabi_dsub>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4640      	mov	r0, r8
 8001ef8:	4649      	mov	r1, r9
 8001efa:	f7fe fb49 	bl	8000590 <__aeabi_dmul>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4690      	mov	r8, r2
 8001f04:	4699      	mov	r9, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	f7fe f985 	bl	8000220 <__aeabi_dsub>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4640      	mov	r0, r8
 8001f1c:	4649      	mov	r1, r9
 8001f1e:	f7fe fb37 	bl	8000590 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4620      	mov	r0, r4
 8001f28:	4629      	mov	r1, r5
 8001f2a:	f7fe f97b 	bl	8000224 <__adddf3>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	6979      	ldr	r1, [r7, #20]
 8001f34:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidal -> set_vel = v_i + (genTrapezoidal -> dir * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t0));
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fabc 	bl	80004bc <__aeabi_i2d>
 8001f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f48:	f7fe fb22 	bl	8000590 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4614      	mov	r4, r2
 8001f52:	461d      	mov	r5, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe f95e 	bl	8000220 <__aeabi_dsub>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4620      	mov	r0, r4
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	f7fe fb10 	bl	8000590 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	4b68      	ldr	r3, [pc, #416]	@ (800211c <trapezoidalComputation+0x79c>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	f7fe f951 	bl	8000224 <__adddf3>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	6979      	ldr	r1, [r7, #20]
 8001f88:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001f8c:	e0e6      	b.n	800215c <trapezoidalComputation+0x7dc>
		else if((genTrapezoidal -> t1 < computeTrapezoidal -> t) && (computeTrapezoidal -> t <= genTrapezoidal -> t2)){
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe fd6b 	bl	8000a74 <__aeabi_dcmplt>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80aa 	beq.w	80020fa <trapezoidalComputation+0x77a>
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fb2:	f7fe fd69 	bl	8000a88 <__aeabi_dcmple>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 809e 	beq.w	80020fa <trapezoidalComputation+0x77a>
			if(pass_2 == 1){
 8001fbe:	4b58      	ldr	r3, [pc, #352]	@ (8002120 <trapezoidalComputation+0x7a0>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10e      	bne.n	8001fe4 <trapezoidalComputation+0x664>
				p_i = computeTrapezoidal -> set_pos;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001fcc:	4952      	ldr	r1, [pc, #328]	@ (8002118 <trapezoidalComputation+0x798>)
 8001fce:	e9c1 2300 	strd	r2, r3, [r1]
				v_i = computeTrapezoidal -> set_vel;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fd8:	4950      	ldr	r1, [pc, #320]	@ (800211c <trapezoidalComputation+0x79c>)
 8001fda:	e9c1 2300 	strd	r2, r3, [r1]
				pass_2 = 0;
 8001fde:	4b50      	ldr	r3, [pc, #320]	@ (8002120 <trapezoidalComputation+0x7a0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
			computeTrapezoidal -> set_pos = p_i + (v_i * (computeTrapezoidal -> t - genTrapezoidal -> t1)) - ((genTrapezoidal -> dir * 0.5 * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t1) * (computeTrapezoidal -> t - genTrapezoidal -> t1)));
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ff0:	f7fe f916 	bl	8000220 <__aeabi_dsub>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4b47      	ldr	r3, [pc, #284]	@ (800211c <trapezoidalComputation+0x79c>)
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	f7fe fac5 	bl	8000590 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	4b42      	ldr	r3, [pc, #264]	@ (8002118 <trapezoidalComputation+0x798>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe f906 	bl	8000224 <__adddf3>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4614      	mov	r4, r2
 800201e:	461d      	mov	r5, r3
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fa48 	bl	80004bc <__aeabi_i2d>
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	4b3c      	ldr	r3, [pc, #240]	@ (8002124 <trapezoidalComputation+0x7a4>)
 8002032:	f7fe faad 	bl	8000590 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002042:	f7fe faa5 	bl	8000590 <__aeabi_dmul>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4690      	mov	r8, r2
 800204c:	4699      	mov	r9, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800205a:	f7fe f8e1 	bl	8000220 <__aeabi_dsub>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4640      	mov	r0, r8
 8002064:	4649      	mov	r1, r9
 8002066:	f7fe fa93 	bl	8000590 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4690      	mov	r8, r2
 8002070:	4699      	mov	r9, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800207e:	f7fe f8cf 	bl	8000220 <__aeabi_dsub>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4640      	mov	r0, r8
 8002088:	4649      	mov	r1, r9
 800208a:	f7fe fa81 	bl	8000590 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4620      	mov	r0, r4
 8002094:	4629      	mov	r1, r5
 8002096:	f7fe f8c3 	bl	8000220 <__aeabi_dsub>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	6979      	ldr	r1, [r7, #20]
 80020a0:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidal -> set_vel = v_i - (genTrapezoidal -> dir * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t1));
 80020a4:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <trapezoidalComputation+0x79c>)
 80020a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fa03 	bl	80004bc <__aeabi_i2d>
 80020b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020ba:	f7fe fa69 	bl	8000590 <__aeabi_dmul>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4690      	mov	r8, r2
 80020c4:	4699      	mov	r9, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020d2:	f7fe f8a5 	bl	8000220 <__aeabi_dsub>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4640      	mov	r0, r8
 80020dc:	4649      	mov	r1, r9
 80020de:	f7fe fa57 	bl	8000590 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4620      	mov	r0, r4
 80020e8:	4629      	mov	r1, r5
 80020ea:	f7fe f899 	bl	8000220 <__aeabi_dsub>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	6979      	ldr	r1, [r7, #20]
 80020f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80020f8:	e030      	b.n	800215c <trapezoidalComputation+0x7dc>
		else if(genTrapezoidal -> t2 < computeTrapezoidal -> t){
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	f7fe fcb5 	bl	8000a74 <__aeabi_dcmplt>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10b      	bne.n	8002128 <trapezoidalComputation+0x7a8>
}
 8002110:	e024      	b.n	800215c <trapezoidalComputation+0x7dc>
 8002112:	bf00      	nop
 8002114:	200007cc 	.word	0x200007cc
 8002118:	200007d0 	.word	0x200007d0
 800211c:	200007d8 	.word	0x200007d8
 8002120:	200007e0 	.word	0x200007e0
 8002124:	3fe00000 	.word	0x3fe00000
			pass_1 = 1;
 8002128:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <trapezoidalComputation+0x7e8>)
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
			pass_2 = 1;
 800212e:	4b0f      	ldr	r3, [pc, #60]	@ (800216c <trapezoidalComputation+0x7ec>)
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
			pass_3 = 1;
 8002134:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <trapezoidalComputation+0x7f0>)
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
			computeTrapezoidal -> set_pos = genTrapezoidal -> final_position;
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002140:	6979      	ldr	r1, [r7, #20]
 8002142:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidal -> set_vel = 0.0;
 8002146:	6979      	ldr	r1, [r7, #20]
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9c1 2304 	strd	r2, r3, [r1, #16]
			computeTrapezoidal -> is_finish = 1;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2201      	movs	r2, #1
 8002158:	721a      	strb	r2, [r3, #8]
}
 800215a:	e7ff      	b.n	800215c <trapezoidalComputation+0x7dc>
 800215c:	bf00      	nop
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002166:	bf00      	nop
 8002168:	200007cc 	.word	0x200007cc
 800216c:	200007e0 	.word	0x200007e0
 8002170:	20000234 	.word	0x20000234

08002174 <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2232      	movs	r2, #50	@ 0x32
 8002182:	4619      	mov	r1, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f003 fb37 	bl	80057f8 <HAL_ADC_Start_DMA>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <Update_eff>:
}

void Update_eff(EFF* eff, GPIO_TypeDef* GPIO_Pull, uint16_t GPIO_Pin_Pull,
		GPIO_TypeDef* GPIO_Push, uint16_t GPIO_Pin_Push, GPIO_TypeDef* GPIO_Vacuum,
		uint16_t GPIO_Pin_Vacuum)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	4613      	mov	r3, r2
 80021a0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_Vacuum, GPIO_Pin_Vacuum, eff -> solenoid_command[0]);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	789a      	ldrb	r2, [r3, #2]
 80021a6:	8c3b      	ldrh	r3, [r7, #32]
 80021a8:	4619      	mov	r1, r3
 80021aa:	69f8      	ldr	r0, [r7, #28]
 80021ac:	f005 fb26 	bl	80077fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Pull, GPIO_Pin_Pull, eff -> solenoid_command[1]);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	78da      	ldrb	r2, [r3, #3]
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	4619      	mov	r1, r3
 80021b8:	68b8      	ldr	r0, [r7, #8]
 80021ba:	f005 fb1f 	bl	80077fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Push, GPIO_Pin_Push, eff -> solenoid_command[2]);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	791a      	ldrb	r2, [r3, #4]
 80021c2:	8b3b      	ldrh	r3, [r7, #24]
 80021c4:	4619      	mov	r1, r3
 80021c6:	6838      	ldr	r0, [r7, #0]
 80021c8:	f005 fb18 	bl	80077fc <HAL_GPIO_WritePin>
}
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter){
 80021d4:	b5b0      	push	{r4, r5, r7, lr}
 80021d6:	b0b4      	sub	sp, #208	@ 0xd0
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	filter->Q = 0.1f;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a42      	ldr	r2, [pc, #264]	@ (80022e8 <Kalman_Start+0x114>)
 80021e0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 1.0f;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80021ea:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float a[16] = {1.0f, 0.000999981278535715f, -0.000114956304180341f, 7.18067814869762e-06f,
 80021ee:	4b3f      	ldr	r3, [pc, #252]	@ (80022ec <Kalman_Start+0x118>)
 80021f0:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80021f4:	461d      	mov	r5, r3
 80021f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002202:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002206:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                   0.0f, 0.999950617296464f,   -0.229910715302858f, 0.0143220709019020f,
	                   0.0f, 0.0f   ,   1.0f  , 0.0f,
	                   0.0f,-0.00496113160650046f, 0.000571883719539551f, 0.983689934032327f};

	float b[4] = {	1.90888950589463e-07f,
 800220a:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <Kalman_Start+0x11c>)
 800220c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8002210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						0.000571883719539551f,
						0.0f,
						0.0789912369575374f};

	float c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800221c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002220:	673b      	str	r3, [r7, #112]	@ 0x70
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	677b      	str	r3, [r7, #116]	@ 0x74
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	67bb      	str	r3, [r7, #120]	@ 0x78

	float g[4] = {0.0f,
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002234:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002238:	663b      	str	r3, [r7, #96]	@ 0x60
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	66bb      	str	r3, [r7, #104]	@ 0x68
					  1.0f,
					  0.0f,
					  0.0f};

	float iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8002246:	4b2b      	ldr	r3, [pc, #172]	@ (80022f4 <Kalman_Start+0x120>)
 8002248:	f107 041c 	add.w	r4, r7, #28
 800224c:	461d      	mov	r5, r3
 800224e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800225a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800225e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 800227a:	2300      	movs	r3, #0
 800227c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002280:	e029      	b.n	80022d6 <Kalman_Start+0x102>
	{
		filter->A[i] = a[i];
 8002282:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	33d0      	adds	r3, #208	@ 0xd0
 800228a:	443b      	add	r3, r7
 800228c:	3b44      	subs	r3, #68	@ 0x44
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002296:	3314      	adds	r3, #20
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 800229e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	33d0      	adds	r3, #208	@ 0xd0
 80022a6:	443b      	add	r3, r7
 80022a8:	3bb4      	subs	r3, #180	@ 0xb4
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022b2:	3398      	adds	r3, #152	@ 0x98
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022c0:	3304      	adds	r3, #4
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 80022cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022d0:	3301      	adds	r3, #1
 80022d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80022d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022da:	2b0f      	cmp	r3, #15
 80022dc:	ddd1      	ble.n	8002282 <Kalman_Start+0xae>
	}

	for(i=0;i<4;i++)
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80022e4:	e044      	b.n	8002370 <Kalman_Start+0x19c>
 80022e6:	bf00      	nop
 80022e8:	3dcccccd 	.word	0x3dcccccd
 80022ec:	0800cde4 	.word	0x0800cde4
 80022f0:	0800ce24 	.word	0x0800ce24
 80022f4:	0800ce34 	.word	0x0800ce34
	{
		filter->X_k[i] = x_k[i];
 80022f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	33d0      	adds	r3, #208	@ 0xd0
 8002300:	443b      	add	r3, r7
 8002302:	3bc4      	subs	r3, #196	@ 0xc4
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	601a      	str	r2, [r3, #0]
		filter->B[i] = b[i];
 8002312:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	33d0      	adds	r3, #208	@ 0xd0
 800231a:	443b      	add	r3, r7
 800231c:	3b54      	subs	r3, #84	@ 0x54
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002326:	3324      	adds	r3, #36	@ 0x24
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 800232e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	33d0      	adds	r3, #208	@ 0xd0
 8002336:	443b      	add	r3, r7
 8002338:	3b64      	subs	r3, #100	@ 0x64
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002342:	3328      	adds	r3, #40	@ 0x28
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 800234a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	33d0      	adds	r3, #208	@ 0xd0
 8002352:	443b      	add	r3, r7
 8002354:	3b74      	subs	r3, #116	@ 0x74
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800235e:	332c      	adds	r3, #44	@ 0x2c
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8002366:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800236a:	3301      	adds	r3, #1
 800236c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002370:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002374:	2b03      	cmp	r3, #3
 8002376:	ddbf      	ble.n	80022f8 <Kalman_Start+0x124>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	2104      	movs	r1, #4
 8002384:	f00a fb26 	bl	800c9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3310      	adds	r3, #16
 8002392:	2204      	movs	r2, #4
 8002394:	2104      	movs	r1, #4
 8002396:	f00a fb1d 	bl	800c9d4 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3350      	adds	r3, #80	@ 0x50
 80023a4:	2204      	movs	r2, #4
 80023a6:	2104      	movs	r1, #4
 80023a8:	f00a fb14 	bl	800c9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3390      	adds	r3, #144	@ 0x90
 80023b6:	2201      	movs	r2, #1
 80023b8:	2104      	movs	r1, #4
 80023ba:	f00a fb0b 	bl	800c9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	33a0      	adds	r3, #160	@ 0xa0
 80023c8:	2204      	movs	r2, #4
 80023ca:	2101      	movs	r1, #1
 80023cc:	f00a fb02 	bl	800c9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	33b0      	adds	r3, #176	@ 0xb0
 80023da:	2201      	movs	r2, #1
 80023dc:	2104      	movs	r1, #4
 80023de:	f00a faf9 	bl	800c9d4 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	33c8      	adds	r3, #200	@ 0xc8
 80023ec:	2204      	movs	r2, #4
 80023ee:	2104      	movs	r1, #4
 80023f0:	f00a faf0 	bl	800c9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002400:	2201      	movs	r2, #1
 8002402:	2104      	movs	r1, #4
 8002404:	f00a fae6 	bl	800c9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002414:	2204      	movs	r2, #4
 8002416:	2101      	movs	r1, #1
 8002418:	f00a fadc 	bl	800c9d4 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002428:	2204      	movs	r2, #4
 800242a:	2104      	movs	r1, #4
 800242c:	f00a fad2 	bl	800c9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800243c:	2204      	movs	r2, #4
 800243e:	2104      	movs	r1, #4
 8002440:	f00a fac8 	bl	800c9d4 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8002450:	2201      	movs	r2, #1
 8002452:	2104      	movs	r1, #4
 8002454:	f00a fabe 	bl	800c9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8002464:	2201      	movs	r2, #1
 8002466:	2104      	movs	r1, #4
 8002468:	f00a fab4 	bl	800c9d4 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002478:	2204      	movs	r2, #4
 800247a:	2101      	movs	r1, #1
 800247c:	f00a faaa 	bl	800c9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800248c:	2201      	movs	r2, #1
 800248e:	2101      	movs	r1, #1
 8002490:	f00a faa0 	bl	800c9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80024a0:	2201      	movs	r2, #1
 80024a2:	2101      	movs	r1, #1
 80024a4:	f00a fa96 	bl	800c9d4 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80024b4:	2201      	movs	r2, #1
 80024b6:	2104      	movs	r1, #4
 80024b8:	f00a fa8c 	bl	800c9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80024c8:	2201      	movs	r2, #1
 80024ca:	2104      	movs	r1, #4
 80024cc:	f00a fa82 	bl	800c9d4 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80024dc:	2201      	movs	r2, #1
 80024de:	2101      	movs	r1, #1
 80024e0:	f00a fa78 	bl	800c9d4 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80024f0:	2201      	movs	r2, #1
 80024f2:	2101      	movs	r1, #1
 80024f4:	f00a fa6e 	bl	800c9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8002504:	2201      	movs	r2, #1
 8002506:	2101      	movs	r1, #1
 8002508:	f00a fa64 	bl	800c9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8002518:	2201      	movs	r2, #1
 800251a:	2104      	movs	r1, #4
 800251c:	f00a fa5a 	bl	800c9d4 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800252c:	2201      	movs	r2, #1
 800252e:	2101      	movs	r1, #1
 8002530:	f00a fa50 	bl	800c9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002540:	2204      	movs	r2, #4
 8002542:	2104      	movs	r1, #4
 8002544:	f00a fa46 	bl	800c9d4 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	33c4      	adds	r3, #196	@ 0xc4
 8002552:	2201      	movs	r2, #1
 8002554:	2101      	movs	r1, #1
 8002556:	f00a fa3d 	bl	800c9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8002566:	2201      	movs	r2, #1
 8002568:	2101      	movs	r1, #1
 800256a:	f00a fa33 	bl	800c9d4 <arm_mat_init_f32>
}
 800256e:	bf00      	nop
 8002570:	37d0      	adds	r7, #208	@ 0xd0
 8002572:	46bd      	mov	sp, r7
 8002574:	bdb0      	pop	{r4, r5, r7, pc}
 8002576:	bf00      	nop

08002578 <Update_lowpass>:
 *
 *  Created on: May 7, 2024
 *      Author: naker
 */
#include "lowpass.h"
void Update_lowpass(LOWPASS* lowpass, float input){
 8002578:	b5b0      	push	{r4, r5, r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	ed87 0a00 	vstr	s0, [r7]
	float x_n = input;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	60fb      	str	r3, [r7, #12]
	static float x_n_1 = 0.0;
	static float y_n_1 = 0.0;

	if(input == 0.0){
 8002588:	edd7 7a00 	vldr	s15, [r7]
 800258c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002594:	d107      	bne.n	80025a6 <Update_lowpass+0x2e>
		lowpass -> filtered_data = 0.0;
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9c1 2300 	strd	r2, r3, [r1]
 80025a4:	e034      	b.n	8002610 <Update_lowpass+0x98>
	}
	else{
		lowpass -> filtered_data = 0.969 * y_n_1 + 0.0155 * x_n + 0.0155 * x_n_1;
 80025a6:	4b28      	ldr	r3, [pc, #160]	@ (8002648 <Update_lowpass+0xd0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd ff98 	bl	80004e0 <__aeabi_f2d>
 80025b0:	a321      	add	r3, pc, #132	@ (adr r3, 8002638 <Update_lowpass+0xc0>)
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	f7fd ffeb 	bl	8000590 <__aeabi_dmul>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4614      	mov	r4, r2
 80025c0:	461d      	mov	r5, r3
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f7fd ff8c 	bl	80004e0 <__aeabi_f2d>
 80025c8:	a31d      	add	r3, pc, #116	@ (adr r3, 8002640 <Update_lowpass+0xc8>)
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	f7fd ffdf 	bl	8000590 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4620      	mov	r0, r4
 80025d8:	4629      	mov	r1, r5
 80025da:	f7fd fe23 	bl	8000224 <__adddf3>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4614      	mov	r4, r2
 80025e4:	461d      	mov	r5, r3
 80025e6:	4b19      	ldr	r3, [pc, #100]	@ (800264c <Update_lowpass+0xd4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ff78 	bl	80004e0 <__aeabi_f2d>
 80025f0:	a313      	add	r3, pc, #76	@ (adr r3, 8002640 <Update_lowpass+0xc8>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fd ffcb 	bl	8000590 <__aeabi_dmul>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4620      	mov	r0, r4
 8002600:	4629      	mov	r1, r5
 8002602:	f7fd fe0f 	bl	8000224 <__adddf3>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	e9c1 2300 	strd	r2, r3, [r1]
	}
	x_n_1 = x_n;
 8002610:	4a0e      	ldr	r2, [pc, #56]	@ (800264c <Update_lowpass+0xd4>)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6013      	str	r3, [r2, #0]
	y_n_1 = lowpass -> filtered_data;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f7fe faae 	bl	8000b80 <__aeabi_d2f>
 8002624:	4603      	mov	r3, r0
 8002626:	4a08      	ldr	r2, [pc, #32]	@ (8002648 <Update_lowpass+0xd0>)
 8002628:	6013      	str	r3, [r2, #0]

}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bdb0      	pop	{r4, r5, r7, pc}
 8002632:	bf00      	nop
 8002634:	f3af 8000 	nop.w
 8002638:	49ba5e35 	.word	0x49ba5e35
 800263c:	3fef020c 	.word	0x3fef020c
 8002640:	c8b43958 	.word	0xc8b43958
 8002644:	3f8fbe76 	.word	0x3f8fbe76
 8002648:	200007e4 	.word	0x200007e4
 800264c:	200007e8 	.word	0x200007e8

08002650 <Reset_lowpass>:
void Reset_lowpass(LOWPASS* lowpass){
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	lowpass -> filtered_data = 0.0;
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002678:	b08a      	sub	sp, #40	@ 0x28
 800267a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800267c:	f002 fc4f 	bl	8004f1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002680:	f000 fb4e 	bl	8002d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002684:	f000 fe22 	bl	80032cc <MX_GPIO_Init>
  MX_DMA_Init();
 8002688:	f000 fdde 	bl	8003248 <MX_DMA_Init>
  MX_TIM1_Init();
 800268c:	f000 fc0a 	bl	8002ea4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002690:	f000 fcb8 	bl	8003004 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002694:	f000 fd04 	bl	80030a0 <MX_TIM4_Init>
  MX_ADC1_Init();
 8002698:	f000 fb8c 	bl	8002db4 <MX_ADC1_Init>
  MX_TIM16_Init();
 800269c:	f000 fd56 	bl	800314c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80026a0:	f000 fd84 	bl	80031ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Modbus setting
  hmodbus.huart = &huart2;
 80026a4:	4ba5      	ldr	r3, [pc, #660]	@ (800293c <main+0x2c8>)
 80026a6:	4aa6      	ldr	r2, [pc, #664]	@ (8002940 <main+0x2cc>)
 80026a8:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80026aa:	4ba4      	ldr	r3, [pc, #656]	@ (800293c <main+0x2c8>)
 80026ac:	4aa5      	ldr	r2, [pc, #660]	@ (8002944 <main+0x2d0>)
 80026ae:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80026b0:	4aa2      	ldr	r2, [pc, #648]	@ (800293c <main+0x2c8>)
 80026b2:	2315      	movs	r3, #21
 80026b4:	7013      	strb	r3, [r2, #0]
  hmodbus.RegisterSize =200;
 80026b6:	4ba1      	ldr	r3, [pc, #644]	@ (800293c <main+0x2c8>)
 80026b8:	22c8      	movs	r2, #200	@ 0xc8
 80026ba:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80026bc:	49a2      	ldr	r1, [pc, #648]	@ (8002948 <main+0x2d4>)
 80026be:	489f      	ldr	r0, [pc, #636]	@ (800293c <main+0x2c8>)
 80026c0:	f7fe fd10 	bl	80010e4 <Modbus_init>
  registerFrame[0x00].U16 = 22881; // Set default heart beat to "Ya"
 80026c4:	4aa0      	ldr	r2, [pc, #640]	@ (8002948 <main+0x2d4>)
 80026c6:	f645 1361 	movw	r3, #22881	@ 0x5961
 80026ca:	8013      	strh	r3, [r2, #0]

  // Update command timer
  HAL_TIM_Base_Start_IT(&main_loop_tim);
 80026cc:	489f      	ldr	r0, [pc, #636]	@ (800294c <main+0x2d8>)
 80026ce:	f006 f9c9 	bl	8008a64 <HAL_TIM_Base_Start_IT>

  // PWM generator
  HAL_TIM_Base_Start(&pwm_tim);
 80026d2:	489f      	ldr	r0, [pc, #636]	@ (8002950 <main+0x2dc>)
 80026d4:	f006 f956 	bl	8008984 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&pwm_tim, pwm_channel);
 80026d8:	2100      	movs	r1, #0
 80026da:	489d      	ldr	r0, [pc, #628]	@ (8002950 <main+0x2dc>)
 80026dc:	f006 faa8 	bl	8008c30 <HAL_TIM_PWM_Start>

  // Encoder reader
  HAL_TIM_Encoder_Start(&encoder_tim, encoder_channel);
 80026e0:	213c      	movs	r1, #60	@ 0x3c
 80026e2:	489c      	ldr	r0, [pc, #624]	@ (8002954 <main+0x2e0>)
 80026e4:	f006 fd60 	bl	80091a8 <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, encoder_ppr, encoder_frequency, encoder_cnt_period);
 80026e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026f4:	4898      	ldr	r0, [pc, #608]	@ (8002958 <main+0x2e4>)
 80026f6:	f001 fc0f 	bl	8003f18 <QEI_init>

  // Current reader
  ADC_init(&current_adc, &current_sensor);
 80026fa:	4998      	ldr	r1, [pc, #608]	@ (800295c <main+0x2e8>)
 80026fc:	4898      	ldr	r0, [pc, #608]	@ (8002960 <main+0x2ec>)
 80026fe:	f7ff fd39 	bl	8002174 <ADC_init>

  // Kalman filter
  Kalman_Start(&kalman);
 8002702:	4898      	ldr	r0, [pc, #608]	@ (8002964 <main+0x2f0>)
 8002704:	f7ff fd66 	bl	80021d4 <Kalman_Start>

  // State initialize
  homing_init(&home);
 8002708:	4897      	ldr	r0, [pc, #604]	@ (8002968 <main+0x2f4>)
 800270a:	f001 fe49 	bl	80043a0 <homing_init>
  point_init(&point);
 800270e:	4897      	ldr	r0, [pc, #604]	@ (800296c <main+0x2f8>)
 8002710:	f001 fe35 	bl	800437e <point_init>
  emer_init(&emer);
 8002714:	4896      	ldr	r0, [pc, #600]	@ (8002970 <main+0x2fc>)
 8002716:	f002 f8a6 	bl	8004866 <emer_init>


  // PID initialize
  PID_init(&p_pid, p_kp_u, p_ki_u, p_kd_u, p_kp_d, p_ki_d, p_kd_d);
 800271a:	4b96      	ldr	r3, [pc, #600]	@ (8002974 <main+0x300>)
 800271c:	edd3 7a00 	vldr	s15, [r3]
 8002720:	4b95      	ldr	r3, [pc, #596]	@ (8002978 <main+0x304>)
 8002722:	ed93 7a00 	vldr	s14, [r3]
 8002726:	4b95      	ldr	r3, [pc, #596]	@ (800297c <main+0x308>)
 8002728:	edd3 6a00 	vldr	s13, [r3]
 800272c:	4b94      	ldr	r3, [pc, #592]	@ (8002980 <main+0x30c>)
 800272e:	ed93 6a00 	vldr	s12, [r3]
 8002732:	4b94      	ldr	r3, [pc, #592]	@ (8002984 <main+0x310>)
 8002734:	edd3 5a00 	vldr	s11, [r3]
 8002738:	4b93      	ldr	r3, [pc, #588]	@ (8002988 <main+0x314>)
 800273a:	ed93 5a00 	vldr	s10, [r3]
 800273e:	eef0 2a45 	vmov.f32	s5, s10
 8002742:	eeb0 2a65 	vmov.f32	s4, s11
 8002746:	eef0 1a46 	vmov.f32	s3, s12
 800274a:	eeb0 1a66 	vmov.f32	s2, s13
 800274e:	eef0 0a47 	vmov.f32	s1, s14
 8002752:	eeb0 0a67 	vmov.f32	s0, s15
 8002756:	488d      	ldr	r0, [pc, #564]	@ (800298c <main+0x318>)
 8002758:	f001 f8fe 	bl	8003958 <PID_init>
  PID_init(&v_pid, v_kp_u, v_ki_u, v_kd_u, v_kp_d, v_ki_d, v_kd_d);
 800275c:	4b8c      	ldr	r3, [pc, #560]	@ (8002990 <main+0x31c>)
 800275e:	edd3 7a00 	vldr	s15, [r3]
 8002762:	4b8c      	ldr	r3, [pc, #560]	@ (8002994 <main+0x320>)
 8002764:	ed93 7a00 	vldr	s14, [r3]
 8002768:	4b8b      	ldr	r3, [pc, #556]	@ (8002998 <main+0x324>)
 800276a:	edd3 6a00 	vldr	s13, [r3]
 800276e:	4b8b      	ldr	r3, [pc, #556]	@ (800299c <main+0x328>)
 8002770:	ed93 6a00 	vldr	s12, [r3]
 8002774:	4b8a      	ldr	r3, [pc, #552]	@ (80029a0 <main+0x32c>)
 8002776:	edd3 5a00 	vldr	s11, [r3]
 800277a:	4b8a      	ldr	r3, [pc, #552]	@ (80029a4 <main+0x330>)
 800277c:	ed93 5a00 	vldr	s10, [r3]
 8002780:	eef0 2a45 	vmov.f32	s5, s10
 8002784:	eeb0 2a65 	vmov.f32	s4, s11
 8002788:	eef0 1a46 	vmov.f32	s3, s12
 800278c:	eeb0 1a66 	vmov.f32	s2, s13
 8002790:	eef0 0a47 	vmov.f32	s1, s14
 8002794:	eeb0 0a67 	vmov.f32	s0, s15
 8002798:	4883      	ldr	r0, [pc, #524]	@ (80029a8 <main+0x334>)
 800279a:	f001 f8dd 	bl	8003958 <PID_init>

  //Set point
  setpoint = 0.0;
 800279e:	4983      	ldr	r1, [pc, #524]	@ (80029ac <main+0x338>)
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	e9c1 2300 	strd	r2, r3, [r1]

  HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, RESET);
 80027ac:	2200      	movs	r2, #0
 80027ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027b2:	487f      	ldr	r0, [pc, #508]	@ (80029b0 <main+0x33c>)
 80027b4:	f005 f822 	bl	80077fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(vacuum_gpio, vacuum_pin, RESET);
 80027b8:	2200      	movs	r2, #0
 80027ba:	2110      	movs	r1, #16
 80027bc:	487d      	ldr	r0, [pc, #500]	@ (80029b4 <main+0x340>)
 80027be:	f005 f81d 	bl	80077fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(solenoid_pull_gpio, solenoid_pull_pin, RESET);
 80027c2:	2200      	movs	r2, #0
 80027c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027c8:	487a      	ldr	r0, [pc, #488]	@ (80029b4 <main+0x340>)
 80027ca:	f005 f817 	bl	80077fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(solenoid_push_gpio, solenoid_push_pin, RESET);
 80027ce:	2200      	movs	r2, #0
 80027d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027d8:	f005 f810 	bl	80077fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(controller_error_gpio, controller_error_pin, RESET);
 80027dc:	2200      	movs	r2, #0
 80027de:	2102      	movs	r1, #2
 80027e0:	4874      	ldr	r0, [pc, #464]	@ (80029b4 <main+0x340>)
 80027e2:	f005 f80b 	bl	80077fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motor_error_gpio, motor_error_pin, RESET);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2104      	movs	r1, #4
 80027ea:	4872      	ldr	r0, [pc, #456]	@ (80029b4 <main+0x340>)
 80027ec:	f005 f806 	bl	80077fc <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Update modbus
		Modbus_Protocal_Worker();
 80027f0:	f7fe fd04 	bl	80011fc <Modbus_Protocal_Worker>
		// Routine
		registerFrame[0x04].U16 = eff.update_actual_status[0x04].U16;	// Gripper Movement Actual Status(0x10)
 80027f4:	4b70      	ldr	r3, [pc, #448]	@ (80029b8 <main+0x344>)
 80027f6:	89db      	ldrh	r3, [r3, #14]
 80027f8:	4a53      	ldr	r2, [pc, #332]	@ (8002948 <main+0x2d4>)
 80027fa:	8113      	strh	r3, [r2, #8]
		registerFrame[0x10].U16 = state;							// Z-axis Moving Status(0x10)
 80027fc:	4b6f      	ldr	r3, [pc, #444]	@ (80029bc <main+0x348>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	4a51      	ldr	r2, [pc, #324]	@ (8002948 <main+0x2d4>)
 8002802:	8413      	strh	r3, [r2, #32]
		registerFrame[0x11].U16 = (uint16_t)(encoder.mm * 10);		// Z-axis Actual Position(0x11)
 8002804:	4b54      	ldr	r3, [pc, #336]	@ (8002958 <main+0x2e4>)
 8002806:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	4b6c      	ldr	r3, [pc, #432]	@ (80029c0 <main+0x34c>)
 8002810:	f7fd febe 	bl	8000590 <__aeabi_dmul>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	f7fe f990 	bl	8000b40 <__aeabi_d2uiz>
 8002820:	4603      	mov	r3, r0
 8002822:	b29b      	uxth	r3, r3
 8002824:	4a48      	ldr	r2, [pc, #288]	@ (8002948 <main+0x2d4>)
 8002826:	8453      	strh	r3, [r2, #34]	@ 0x22
		registerFrame[0x12].U16 = (int16_t)(encoder.mmps * 10);		// Z-axis Actual Speed (0x12)
 8002828:	4b4b      	ldr	r3, [pc, #300]	@ (8002958 <main+0x2e4>)
 800282a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	4b63      	ldr	r3, [pc, #396]	@ (80029c0 <main+0x34c>)
 8002834:	f7fd feac 	bl	8000590 <__aeabi_dmul>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	f7fe f956 	bl	8000af0 <__aeabi_d2iz>
 8002844:	4603      	mov	r3, r0
 8002846:	b21b      	sxth	r3, r3
 8002848:	b29b      	uxth	r3, r3
 800284a:	4a3f      	ldr	r2, [pc, #252]	@ (8002948 <main+0x2d4>)
 800284c:	8493      	strh	r3, [r2, #36]	@ 0x24
		registerFrame[0x13].U16 = (int16_t)(encoder.mmpss * 10);	// Z-axis Acceleration(0x13)
 800284e:	4b42      	ldr	r3, [pc, #264]	@ (8002958 <main+0x2e4>)
 8002850:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	4b59      	ldr	r3, [pc, #356]	@ (80029c0 <main+0x34c>)
 800285a:	f7fd fe99 	bl	8000590 <__aeabi_dmul>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f7fe f943 	bl	8000af0 <__aeabi_d2iz>
 800286a:	4603      	mov	r3, r0
 800286c:	b21b      	sxth	r3, r3
 800286e:	b29b      	uxth	r3, r3
 8002870:	4a35      	ldr	r2, [pc, #212]	@ (8002948 <main+0x2d4>)
 8002872:	84d3      	strh	r3, [r2, #38]	@ 0x26
		registerFrame[0x40].U16 = (int16_t)(x_axis_position * 10);	// X-axis Actual Position(0x40)
 8002874:	4b53      	ldr	r3, [pc, #332]	@ (80029c4 <main+0x350>)
 8002876:	edd3 7a00 	vldr	s15, [r3]
 800287a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800287e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002886:	ee17 3a90 	vmov	r3, s15
 800288a:	b21b      	sxth	r3, r3
 800288c:	b29b      	uxth	r3, r3
 800288e:	4a2e      	ldr	r2, [pc, #184]	@ (8002948 <main+0x2d4>)
 8002890:	f8a2 3080 	strh.w	r3, [r2, #128]	@ 0x80
		if(registerFrame[0x00].U16 == 18537){
 8002894:	4b2c      	ldr	r3, [pc, #176]	@ (8002948 <main+0x2d4>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	f644 0269 	movw	r2, #18537	@ 0x4869
 800289c:	4293      	cmp	r3, r2
 800289e:	d103      	bne.n	80028a8 <main+0x234>
			registerFrame[0x00].U16 = 22881;
 80028a0:	4a29      	ldr	r2, [pc, #164]	@ (8002948 <main+0x2d4>)
 80028a2:	f645 1361 	movw	r3, #22881	@ 0x5961
 80028a6:	8013      	strh	r3, [r2, #0]
		}

		if(mode == WAIT){
 80028a8:	4b47      	ldr	r3, [pc, #284]	@ (80029c8 <main+0x354>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f040 8099 	bne.w	80029e4 <main+0x370>

			// Update peripheral
			Vacuum_Status(&eff); // Vacuum
 80028b2:	4841      	ldr	r0, [pc, #260]	@ (80029b8 <main+0x344>)
 80028b4:	f7fe fb2c 	bl	8000f10 <Vacuum_Status>
			Gripper_Movement_Status(&eff); // End effector
 80028b8:	483f      	ldr	r0, [pc, #252]	@ (80029b8 <main+0x344>)
 80028ba:	f7fe fb55 	bl	8000f68 <Gripper_Movement_Status>
			// End effector update
			Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 80028be:	2310      	movs	r3, #16
 80028c0:	9302      	str	r3, [sp, #8]
 80028c2:	4b3c      	ldr	r3, [pc, #240]	@ (80029b4 <main+0x340>)
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80028d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d4:	4937      	ldr	r1, [pc, #220]	@ (80029b4 <main+0x340>)
 80028d6:	4838      	ldr	r0, [pc, #224]	@ (80029b8 <main+0x344>)
 80028d8:	f7ff fc5b 	bl	8002192 <Update_eff>

			//  homing command from Homing button and Base system Check command
			if(home.homing_command == 0){
 80028dc:	4b22      	ldr	r3, [pc, #136]	@ (8002968 <main+0x2f4>)
 80028de:	789b      	ldrb	r3, [r3, #2]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d173      	bne.n	80029cc <main+0x358>
				Set_Home(); // Refresh homing command from base system
 80028e4:	f7fe fba2 	bl	800102c <Set_Home>
				if(state == 0b0010){
 80028e8:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <main+0x348>)
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d110      	bne.n	8002912 <main+0x29e>
					// Have command from base system
					home.homing_command = 1;
 80028f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002968 <main+0x2f4>)
 80028f2:	2301      	movs	r3, #1
 80028f4:	7093      	strb	r3, [r2, #2]
					registerFrame[0x01].U16 = 0b0000; // Reset data of base system status
 80028f6:	4a14      	ldr	r2, [pc, #80]	@ (8002948 <main+0x2d4>)
 80028f8:	2300      	movs	r3, #0
 80028fa:	8053      	strh	r3, [r2, #2]
					registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 80028fc:	4a12      	ldr	r2, [pc, #72]	@ (8002948 <main+0x2d4>)
 80028fe:	2302      	movs	r3, #2
 8002900:	8413      	strh	r3, [r2, #32]
					state = registerFrame[0x10].U16;
 8002902:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <main+0x2d4>)
 8002904:	8c1b      	ldrh	r3, [r3, #32]
 8002906:	4a2d      	ldr	r2, [pc, #180]	@ (80029bc <main+0x348>)
 8002908:	8013      	strh	r3, [r2, #0]
					mode = HOMING;
 800290a:	4a2f      	ldr	r2, [pc, #188]	@ (80029c8 <main+0x354>)
 800290c:	2302      	movs	r3, #2
 800290e:	8013      	strh	r3, [r2, #0]
 8002910:	e068      	b.n	80029e4 <main+0x370>
				}
				else if(HAL_GPIO_ReadPin(home_gpio, home_pin) == 1){
 8002912:	2140      	movs	r1, #64	@ 0x40
 8002914:	4826      	ldr	r0, [pc, #152]	@ (80029b0 <main+0x33c>)
 8002916:	f004 ff59 	bl	80077cc <HAL_GPIO_ReadPin>
 800291a:	4603      	mov	r3, r0
 800291c:	2b01      	cmp	r3, #1
 800291e:	d161      	bne.n	80029e4 <main+0x370>
					// Have command from home switch
					home.homing_command = 1;
 8002920:	4a11      	ldr	r2, [pc, #68]	@ (8002968 <main+0x2f4>)
 8002922:	2301      	movs	r3, #1
 8002924:	7093      	strb	r3, [r2, #2]
					registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 8002926:	4a08      	ldr	r2, [pc, #32]	@ (8002948 <main+0x2d4>)
 8002928:	2302      	movs	r3, #2
 800292a:	8413      	strh	r3, [r2, #32]
					state = registerFrame[0x10].U16;
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <main+0x2d4>)
 800292e:	8c1b      	ldrh	r3, [r3, #32]
 8002930:	4a22      	ldr	r2, [pc, #136]	@ (80029bc <main+0x348>)
 8002932:	8013      	strh	r3, [r2, #0]
					mode = HOMING;
 8002934:	4a24      	ldr	r2, [pc, #144]	@ (80029c8 <main+0x354>)
 8002936:	2302      	movs	r3, #2
 8002938:	8013      	strh	r3, [r2, #0]
 800293a:	e053      	b.n	80029e4 <main+0x370>
 800293c:	200002f0 	.word	0x200002f0
 8002940:	20000c48 	.word	0x20000c48
 8002944:	20000b1c 	.word	0x20000b1c
 8002948:	20000e44 	.word	0x20000e44
 800294c:	20000984 	.word	0x20000984
 8002950:	200008b8 	.word	0x200008b8
 8002954:	20000a50 	.word	0x20000a50
 8002958:	20001240 	.word	0x20001240
 800295c:	2000116c 	.word	0x2000116c
 8002960:	200007ec 	.word	0x200007ec
 8002964:	20001394 	.word	0x20001394
 8002968:	20000e28 	.word	0x20000e28
 800296c:	20000e20 	.word	0x20000e20
 8002970:	20000e40 	.word	0x20000e40
 8002974:	20000248 	.word	0x20000248
 8002978:	20001370 	.word	0x20001370
 800297c:	20001374 	.word	0x20001374
 8002980:	2000024c 	.word	0x2000024c
 8002984:	20001378 	.word	0x20001378
 8002988:	2000137c 	.word	0x2000137c
 800298c:	20001330 	.word	0x20001330
 8002990:	20000238 	.word	0x20000238
 8002994:	2000023c 	.word	0x2000023c
 8002998:	20001318 	.word	0x20001318
 800299c:	20000240 	.word	0x20000240
 80029a0:	20000244 	.word	0x20000244
 80029a4:	2000131c 	.word	0x2000131c
 80029a8:	200012d8 	.word	0x200012d8
 80029ac:	20000e10 	.word	0x20000e10
 80029b0:	48000800 	.word	0x48000800
 80029b4:	48000400 	.word	0x48000400
 80029b8:	20000fd4 	.word	0x20000fd4
 80029bc:	200002ec 	.word	0x200002ec
 80029c0:	40240000 	.word	0x40240000
 80029c4:	20001714 	.word	0x20001714
 80029c8:	20000e18 	.word	0x20000e18
				}
			}
			else{
				// Nothing happen
				pwm_signal = 0;
 80029cc:	4b91      	ldr	r3, [pc, #580]	@ (8002c14 <main+0x5a0>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
				Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 80029d2:	4b90      	ldr	r3, [pc, #576]	@ (8002c14 <main+0x5a0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2302      	movs	r3, #2
 80029da:	4a8f      	ldr	r2, [pc, #572]	@ (8002c18 <main+0x5a4>)
 80029dc:	2100      	movs	r1, #0
 80029de:	488f      	ldr	r0, [pc, #572]	@ (8002c1c <main+0x5a8>)
 80029e0:	f001 fa03 	bl	8003dea <Update_pwm>
			}
		}


		if(mode == RUNNING){
 80029e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002c20 <main+0x5ac>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	f040 815e 	bne.w	8002caa <main+0x636>
			if(testing == 1){
 80029ee:	4b8d      	ldr	r3, [pc, #564]	@ (8002c24 <main+0x5b0>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d16f      	bne.n	8002ad6 <main+0x462>
				Update_qei(&encoder, &htim4);
 80029f6:	498c      	ldr	r1, [pc, #560]	@ (8002c28 <main+0x5b4>)
 80029f8:	488c      	ldr	r0, [pc, #560]	@ (8002c2c <main+0x5b8>)
 80029fa:	f001 fb09 	bl	8004010 <Update_qei>
				Update_lowpass(&lowpass, encoder.mmps);
 80029fe:	4b8b      	ldr	r3, [pc, #556]	@ (8002c2c <main+0x5b8>)
 8002a00:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	f7fe f8ba 	bl	8000b80 <__aeabi_d2f>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	ee00 3a10 	vmov	s0, r3
 8002a12:	4887      	ldr	r0, [pc, #540]	@ (8002c30 <main+0x5bc>)
 8002a14:	f7ff fdb0 	bl	8002578 <Update_lowpass>
				sensor[0] = __HAL_TIM_GET_COUNTER(&encoder_tim); // Encoder
 8002a18:	4b83      	ldr	r3, [pc, #524]	@ (8002c28 <main+0x5b4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	2200      	movs	r2, #0
 8002a20:	461c      	mov	r4, r3
 8002a22:	4615      	mov	r5, r2
 8002a24:	4b83      	ldr	r3, [pc, #524]	@ (8002c34 <main+0x5c0>)
 8002a26:	e9c3 4500 	strd	r4, r5, [r3]
				sensor[1] = HAL_GPIO_ReadPin(proximity_gpio, proximity_pin); // Proximity
 8002a2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a2e:	4882      	ldr	r0, [pc, #520]	@ (8002c38 <main+0x5c4>)
 8002a30:	f004 fecc 	bl	80077cc <HAL_GPIO_ReadPin>
 8002a34:	4603      	mov	r3, r0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2200      	movs	r2, #0
 8002a3a:	4698      	mov	r8, r3
 8002a3c:	4691      	mov	r9, r2
 8002a3e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c34 <main+0x5c0>)
 8002a40:	e9c3 8902 	strd	r8, r9, [r3, #8]
				sensor[2] = HAL_GPIO_ReadPin(reed_pull_gpio, reed_pull_pin); // Reed switch pull
 8002a44:	2180      	movs	r1, #128	@ 0x80
 8002a46:	4874      	ldr	r0, [pc, #464]	@ (8002c18 <main+0x5a4>)
 8002a48:	f004 fec0 	bl	80077cc <HAL_GPIO_ReadPin>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2200      	movs	r2, #0
 8002a52:	469a      	mov	sl, r3
 8002a54:	4693      	mov	fp, r2
 8002a56:	4b77      	ldr	r3, [pc, #476]	@ (8002c34 <main+0x5c0>)
 8002a58:	e9c3 ab04 	strd	sl, fp, [r3, #16]
				sensor[3] = HAL_GPIO_ReadPin(reed_push_gpio, reed_push_pin); // Reed switch push
 8002a5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a64:	f004 feb2 	bl	80077cc <HAL_GPIO_ReadPin>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	617a      	str	r2, [r7, #20]
 8002a72:	4b70      	ldr	r3, [pc, #448]	@ (8002c34 <main+0x5c0>)
 8002a74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002a78:	e9c3 1206 	strd	r1, r2, [r3, #24]
				sensor[4] = HAL_GPIO_ReadPin(emer_gpio, emer_pin); // Emergency button
 8002a7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a80:	486d      	ldr	r0, [pc, #436]	@ (8002c38 <main+0x5c4>)
 8002a82:	f004 fea3 	bl	80077cc <HAL_GPIO_ReadPin>
 8002a86:	4603      	mov	r3, r0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	60fa      	str	r2, [r7, #12]
 8002a90:	4b68      	ldr	r3, [pc, #416]	@ (8002c34 <main+0x5c0>)
 8002a92:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002a96:	e9c3 1208 	strd	r1, r2, [r3, #32]
				sensor[5] = HAL_GPIO_ReadPin(home_gpio, home_pin); // Home button
 8002a9a:	2140      	movs	r1, #64	@ 0x40
 8002a9c:	485e      	ldr	r0, [pc, #376]	@ (8002c18 <main+0x5a4>)
 8002a9e:	f004 fe95 	bl	80077cc <HAL_GPIO_ReadPin>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	4b61      	ldr	r3, [pc, #388]	@ (8002c34 <main+0x5c0>)
 8002aae:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002ab2:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
				Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	9302      	str	r3, [sp, #8]
 8002aba:	4b5f      	ldr	r3, [pc, #380]	@ (8002c38 <main+0x5c4>)
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002ac8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002acc:	495a      	ldr	r1, [pc, #360]	@ (8002c38 <main+0x5c4>)
 8002ace:	485b      	ldr	r0, [pc, #364]	@ (8002c3c <main+0x5c8>)
 8002ad0:	f7ff fb5f 	bl	8002192 <Update_eff>
 8002ad4:	e0e9      	b.n	8002caa <main+0x636>
			}
			else if(testing == 0){
 8002ad6:	4b53      	ldr	r3, [pc, #332]	@ (8002c24 <main+0x5b0>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 80e5 	bne.w	8002caa <main+0x636>
				// Main controller loop
				if(is_update_encoder == 1 && !(state == 2)){
 8002ae0:	4b57      	ldr	r3, [pc, #348]	@ (8002c40 <main+0x5cc>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d17a      	bne.n	8002bde <main+0x56a>
 8002ae8:	4b56      	ldr	r3, [pc, #344]	@ (8002c44 <main+0x5d0>)
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d076      	beq.n	8002bde <main+0x56a>
					Update_qei(&encoder, &htim4); // Update encoder
 8002af0:	494d      	ldr	r1, [pc, #308]	@ (8002c28 <main+0x5b4>)
 8002af2:	484e      	ldr	r0, [pc, #312]	@ (8002c2c <main+0x5b8>)
 8002af4:	f001 fa8c 	bl	8004010 <Update_qei>
//					kalman_velocity = SteadyStateKalmanFilter(&kalman, ((float)pwm_signal * 24.0)/65535.0, encoder.radps / 2.0);
//					kalman_velocity_z = kalman_velocity * 2.0 * 16.0 / (2.0 * M_PI);
					Update_lowpass(&lowpass, encoder.mmps);
 8002af8:	4b4c      	ldr	r3, [pc, #304]	@ (8002c2c <main+0x5b8>)
 8002afa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002afe:	4610      	mov	r0, r2
 8002b00:	4619      	mov	r1, r3
 8002b02:	f7fe f83d 	bl	8000b80 <__aeabi_d2f>
 8002b06:	4603      	mov	r3, r0
 8002b08:	ee00 3a10 	vmov	s0, r3
 8002b0c:	4848      	ldr	r0, [pc, #288]	@ (8002c30 <main+0x5bc>)
 8002b0e:	f7ff fd33 	bl	8002578 <Update_lowpass>

//					Trajectory_Generator(&genScurveData, initial_position, target_position, max_velocity, max_acceleration, max_jerk); // Generate trajectory
//					Trajectory_Evaluated(&genScurveData, &evaScurveData, initial_position, target_position, max_velocity, max_acceleration, max_jerk); // Evaluate trajectory
					trapezoidalGeneration(&genTrapezoidalData, initial_position, target_position, max_velocity, max_acceleration);
 8002b12:	4b4d      	ldr	r3, [pc, #308]	@ (8002c48 <main+0x5d4>)
 8002b14:	ed93 7b00 	vldr	d7, [r3]
 8002b18:	4b4c      	ldr	r3, [pc, #304]	@ (8002c4c <main+0x5d8>)
 8002b1a:	ed93 6b00 	vldr	d6, [r3]
 8002b1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002c50 <main+0x5dc>)
 8002b20:	ed93 5b00 	vldr	d5, [r3]
 8002b24:	4b4b      	ldr	r3, [pc, #300]	@ (8002c54 <main+0x5e0>)
 8002b26:	ed93 4b00 	vldr	d4, [r3]
 8002b2a:	eeb0 3a44 	vmov.f32	s6, s8
 8002b2e:	eef0 3a64 	vmov.f32	s7, s9
 8002b32:	eeb0 2a45 	vmov.f32	s4, s10
 8002b36:	eef0 2a65 	vmov.f32	s5, s11
 8002b3a:	eeb0 1a46 	vmov.f32	s2, s12
 8002b3e:	eef0 1a66 	vmov.f32	s3, s13
 8002b42:	eeb0 0a47 	vmov.f32	s0, s14
 8002b46:	eef0 0a67 	vmov.f32	s1, s15
 8002b4a:	4843      	ldr	r0, [pc, #268]	@ (8002c58 <main+0x5e4>)
 8002b4c:	f7fe fdbe 	bl	80016cc <trapezoidalGeneration>
					trapezoidalComputation(&computeTrapezoidalData, &genTrapezoidalData, max_velocity, max_acceleration);
 8002b50:	4b3f      	ldr	r3, [pc, #252]	@ (8002c50 <main+0x5dc>)
 8002b52:	ed93 7b00 	vldr	d7, [r3]
 8002b56:	4b3f      	ldr	r3, [pc, #252]	@ (8002c54 <main+0x5e0>)
 8002b58:	ed93 6b00 	vldr	d6, [r3]
 8002b5c:	eeb0 1a46 	vmov.f32	s2, s12
 8002b60:	eef0 1a66 	vmov.f32	s3, s13
 8002b64:	eeb0 0a47 	vmov.f32	s0, s14
 8002b68:	eef0 0a67 	vmov.f32	s1, s15
 8002b6c:	493a      	ldr	r1, [pc, #232]	@ (8002c58 <main+0x5e4>)
 8002b6e:	483b      	ldr	r0, [pc, #236]	@ (8002c5c <main+0x5e8>)
 8002b70:	f7fe ff06 	bl	8001980 <trapezoidalComputation>
//
//					setpoint_pos = evaScurveData.setposition; // Position set point
//					setpoint_vel = evaScurveData.setvelocity; // Feed forward velocity
					setpoint_pos = computeTrapezoidalData.set_pos;
 8002b74:	4b39      	ldr	r3, [pc, #228]	@ (8002c5c <main+0x5e8>)
 8002b76:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002b7a:	4939      	ldr	r1, [pc, #228]	@ (8002c60 <main+0x5ec>)
 8002b7c:	e9c1 2300 	strd	r2, r3, [r1]
					setpoint_vel = computeTrapezoidalData.set_vel;
 8002b80:	4b36      	ldr	r3, [pc, #216]	@ (8002c5c <main+0x5e8>)
 8002b82:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002b86:	4937      	ldr	r1, [pc, #220]	@ (8002c64 <main+0x5f0>)
 8002b88:	e9c1 2300 	strd	r2, r3, [r1]
					if(start_position_control == 1){
 8002b8c:	4b36      	ldr	r3, [pc, #216]	@ (8002c68 <main+0x5f4>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d102      	bne.n	8002b9a <main+0x526>
//						Update_position_control(setpoint_pos);
						start_position_control = 0;
 8002b94:	4a34      	ldr	r2, [pc, #208]	@ (8002c68 <main+0x5f4>)
 8002b96:	2300      	movs	r3, #0
 8002b98:	7013      	strb	r3, [r2, #0]
					}
					Update_velocity_control(setpoint_vel + p_output);
 8002b9a:	4b32      	ldr	r3, [pc, #200]	@ (8002c64 <main+0x5f0>)
 8002b9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ba0:	4b32      	ldr	r3, [pc, #200]	@ (8002c6c <main+0x5f8>)
 8002ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba6:	f7fd fb3d 	bl	8000224 <__adddf3>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	ec43 2b17 	vmov	d7, r2, r3
 8002bb2:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb6:	eef0 0a67 	vmov.f32	s1, s15
 8002bba:	f000 fdcf 	bl	800375c <Update_velocity_control>
					pwm_signal = v_output;
 8002bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002c70 <main+0x5fc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a14      	ldr	r2, [pc, #80]	@ (8002c14 <main+0x5a0>)
 8002bc4:	6013      	str	r3, [r2, #0]
					Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 8002bc6:	4b13      	ldr	r3, [pc, #76]	@ (8002c14 <main+0x5a0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2302      	movs	r3, #2
 8002bce:	4a12      	ldr	r2, [pc, #72]	@ (8002c18 <main+0x5a4>)
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4812      	ldr	r0, [pc, #72]	@ (8002c1c <main+0x5a8>)
 8002bd4:	f001 f909 	bl	8003dea <Update_pwm>
					is_update_encoder = 0;
 8002bd8:	4a19      	ldr	r2, [pc, #100]	@ (8002c40 <main+0x5cc>)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	7013      	strb	r3, [r2, #0]
				}
				// Check command from base system status
				//  homing command from Homing button and Base system Check command
				Set_Home(); // Refresh homing command from base system
 8002bde:	f7fe fa25 	bl	800102c <Set_Home>
				if(state == 0b0010){
 8002be2:	4b18      	ldr	r3, [pc, #96]	@ (8002c44 <main+0x5d0>)
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d148      	bne.n	8002c7c <main+0x608>
					// Have command from base system
					mode = HOMING; // Go to wait mode for Deactivate end effector
 8002bea:	4a0d      	ldr	r2, [pc, #52]	@ (8002c20 <main+0x5ac>)
 8002bec:	2302      	movs	r3, #2
 8002bee:	8013      	strh	r3, [r2, #0]
					home.homing_command = 1;
 8002bf0:	4a20      	ldr	r2, [pc, #128]	@ (8002c74 <main+0x600>)
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	7093      	strb	r3, [r2, #2]
					registerFrame[0x01].U16 = 0b0000; // Reset data of base system status
 8002bf6:	4a20      	ldr	r2, [pc, #128]	@ (8002c78 <main+0x604>)
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	8053      	strh	r3, [r2, #2]
					registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 8002bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8002c78 <main+0x604>)
 8002bfe:	2302      	movs	r3, #2
 8002c00:	8413      	strh	r3, [r2, #32]
					state = registerFrame[0x10].U16 = 0b0010;
 8002c02:	4a1d      	ldr	r2, [pc, #116]	@ (8002c78 <main+0x604>)
 8002c04:	2302      	movs	r3, #2
 8002c06:	8413      	strh	r3, [r2, #32]
 8002c08:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <main+0x604>)
 8002c0a:	8c1b      	ldrh	r3, [r3, #32]
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c44 <main+0x5d0>)
 8002c0e:	8013      	strh	r3, [r2, #0]
 8002c10:	e04b      	b.n	8002caa <main+0x636>
 8002c12:	bf00      	nop
 8002c14:	20001238 	.word	0x20001238
 8002c18:	48000800 	.word	0x48000800
 8002c1c:	200008b8 	.word	0x200008b8
 8002c20:	20000e18 	.word	0x20000e18
 8002c24:	20000e41 	.word	0x20000e41
 8002c28:	20000a50 	.word	0x20000a50
 8002c2c:	20001240 	.word	0x20001240
 8002c30:	200012d0 	.word	0x200012d0
 8002c34:	20000de0 	.word	0x20000de0
 8002c38:	48000400 	.word	0x48000400
 8002c3c:	20000fd4 	.word	0x20000fd4
 8002c40:	2000123c 	.word	0x2000123c
 8002c44:	200002ec 	.word	0x200002ec
 8002c48:	200017a8 	.word	0x200017a8
 8002c4c:	200017b0 	.word	0x200017b0
 8002c50:	20000250 	.word	0x20000250
 8002c54:	20000258 	.word	0x20000258
 8002c58:	20001740 	.word	0x20001740
 8002c5c:	20001788 	.word	0x20001788
 8002c60:	200017b8 	.word	0x200017b8
 8002c64:	200017c0 	.word	0x200017c0
 8002c68:	20001390 	.word	0x20001390
 8002c6c:	20001388 	.word	0x20001388
 8002c70:	20001328 	.word	0x20001328
 8002c74:	20000e28 	.word	0x20000e28
 8002c78:	20000e44 	.word	0x20000e44
				}
				else if(HAL_GPIO_ReadPin(home_gpio, home_pin) == 1){
 8002c7c:	2140      	movs	r1, #64	@ 0x40
 8002c7e:	4822      	ldr	r0, [pc, #136]	@ (8002d08 <main+0x694>)
 8002c80:	f004 fda4 	bl	80077cc <HAL_GPIO_ReadPin>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d10f      	bne.n	8002caa <main+0x636>
					// Have command from home switch
					mode = HOMING;// Go to wait mode for Deactivate end effector
 8002c8a:	4a20      	ldr	r2, [pc, #128]	@ (8002d0c <main+0x698>)
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	8013      	strh	r3, [r2, #0]
					home.homing_command = 1;
 8002c90:	4a1f      	ldr	r2, [pc, #124]	@ (8002d10 <main+0x69c>)
 8002c92:	2301      	movs	r3, #1
 8002c94:	7093      	strb	r3, [r2, #2]
					registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 8002c96:	4a1f      	ldr	r2, [pc, #124]	@ (8002d14 <main+0x6a0>)
 8002c98:	2302      	movs	r3, #2
 8002c9a:	8413      	strh	r3, [r2, #32]
					state = registerFrame[0x10].U16 = 0b0010;
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d14 <main+0x6a0>)
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	8413      	strh	r3, [r2, #32]
 8002ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d14 <main+0x6a0>)
 8002ca4:	8c1b      	ldrh	r3, [r3, #32]
 8002ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d18 <main+0x6a4>)
 8002ca8:	8013      	strh	r3, [r2, #0]
//				Gripper_Movement_Status(&eff); // End effector
//				// End effector update
//				Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
//			}
		}
		if(mode == HOMING){
 8002caa:	4b18      	ldr	r3, [pc, #96]	@ (8002d0c <main+0x698>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d112      	bne.n	8002cd8 <main+0x664>
			if(home.is_home == 1){
 8002cb2:	4b17      	ldr	r3, [pc, #92]	@ (8002d10 <main+0x69c>)
 8002cb4:	78db      	ldrb	r3, [r3, #3]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d10e      	bne.n	8002cd8 <main+0x664>
				// Finish homing state
				home.is_home = 0;
 8002cba:	4a15      	ldr	r2, [pc, #84]	@ (8002d10 <main+0x69c>)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	70d3      	strb	r3, [r2, #3]
				registerFrame[0x10].U16 = 0b0000; // Reset data of moving status
 8002cc0:	4a14      	ldr	r2, [pc, #80]	@ (8002d14 <main+0x6a0>)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	8413      	strh	r3, [r2, #32]
				state = registerFrame[0x10].U16;
 8002cc6:	4b13      	ldr	r3, [pc, #76]	@ (8002d14 <main+0x6a0>)
 8002cc8:	8c1b      	ldrh	r3, [r3, #32]
 8002cca:	4a13      	ldr	r2, [pc, #76]	@ (8002d18 <main+0x6a4>)
 8002ccc:	8013      	strh	r3, [r2, #0]

				Reset_main_variable();
 8002cce:	f000 fd87 	bl	80037e0 <Reset_main_variable>
				// Change Mode
				mode = RUNNING;
 8002cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8002d0c <main+0x698>)
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	8013      	strh	r3, [r2, #0]
			}
		}
		if(mode == EMERGENCY){
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <main+0x698>)
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	f47f ad87 	bne.w	80027f0 <main+0x17c>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1){
 8002ce2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ce6:	480d      	ldr	r0, [pc, #52]	@ (8002d1c <main+0x6a8>)
 8002ce8:	f004 fd70 	bl	80077cc <HAL_GPIO_ReadPin>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	f47f ad7e 	bne.w	80027f0 <main+0x17c>
				HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, RESET);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002cfa:	4803      	ldr	r0, [pc, #12]	@ (8002d08 <main+0x694>)
 8002cfc:	f004 fd7e 	bl	80077fc <HAL_GPIO_WritePin>
				mode = WAIT;
 8002d00:	4a02      	ldr	r2, [pc, #8]	@ (8002d0c <main+0x698>)
 8002d02:	2300      	movs	r3, #0
 8002d04:	8013      	strh	r3, [r2, #0]
		Modbus_Protocal_Worker();
 8002d06:	e573      	b.n	80027f0 <main+0x17c>
 8002d08:	48000800 	.word	0x48000800
 8002d0c:	20000e18 	.word	0x20000e18
 8002d10:	20000e28 	.word	0x20000e28
 8002d14:	20000e44 	.word	0x20000e44
 8002d18:	200002ec 	.word	0x200002ec
 8002d1c:	48000400 	.word	0x48000400

08002d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b094      	sub	sp, #80	@ 0x50
 8002d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d26:	f107 0318 	add.w	r3, r7, #24
 8002d2a:	2238      	movs	r2, #56	@ 0x38
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f009 fe68 	bl	800ca04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002d42:	2000      	movs	r0, #0
 8002d44:	f004 fd8a 	bl	800785c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d50:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d52:	2302      	movs	r3, #2
 8002d54:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d56:	2303      	movs	r3, #3
 8002d58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8002d5a:	2306      	movs	r3, #6
 8002d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002d5e:	2355      	movs	r3, #85	@ 0x55
 8002d60:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d62:	2302      	movs	r3, #2
 8002d64:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d66:	2302      	movs	r3, #2
 8002d68:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d6e:	f107 0318 	add.w	r3, r7, #24
 8002d72:	4618      	mov	r0, r3
 8002d74:	f004 fe26 	bl	80079c4 <HAL_RCC_OscConfig>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002d7e:	f000 fde5 	bl	800394c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d82:	230f      	movs	r3, #15
 8002d84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d86:	2303      	movs	r3, #3
 8002d88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2104      	movs	r1, #4
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f005 f924 	bl	8007fe8 <HAL_RCC_ClockConfig>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002da6:	f000 fdd1 	bl	800394c <Error_Handler>
  }
}
 8002daa:	bf00      	nop
 8002dac:	3750      	adds	r7, #80	@ 0x50
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08c      	sub	sp, #48	@ 0x30
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	2220      	movs	r2, #32
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f009 fe19 	bl	800ca04 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002dd2:	4b32      	ldr	r3, [pc, #200]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002dd4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002dd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002dda:	4b30      	ldr	r3, [pc, #192]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002ddc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002de0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002de2:	4b2e      	ldr	r3, [pc, #184]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002de8:	4b2c      	ldr	r3, [pc, #176]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002dee:	4b2b      	ldr	r3, [pc, #172]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002df4:	4b29      	ldr	r3, [pc, #164]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dfa:	4b28      	ldr	r3, [pc, #160]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e00:	4b26      	ldr	r3, [pc, #152]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e06:	4b25      	ldr	r3, [pc, #148]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002e0c:	4b23      	ldr	r3, [pc, #140]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e12:	4b22      	ldr	r3, [pc, #136]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e1a:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e20:	4b1e      	ldr	r3, [pc, #120]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e26:	4b1d      	ldr	r3, [pc, #116]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002e34:	4b19      	ldr	r3, [pc, #100]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e3c:	4817      	ldr	r0, [pc, #92]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002e3e:	f002 fb1f 	bl	8005480 <HAL_ADC_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002e48:	f000 fd80 	bl	800394c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e54:	4619      	mov	r1, r3
 8002e56:	4811      	ldr	r0, [pc, #68]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002e58:	f003 fdec 	bl	8006a34 <HAL_ADCEx_MultiModeConfigChannel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002e62:	f000 fd73 	bl	800394c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002e66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <MX_ADC1_Init+0xec>)
 8002e68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e6a:	2306      	movs	r3, #6
 8002e6c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e72:	237f      	movs	r3, #127	@ 0x7f
 8002e74:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e76:	2304      	movs	r3, #4
 8002e78:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	4806      	ldr	r0, [pc, #24]	@ (8002e9c <MX_ADC1_Init+0xe8>)
 8002e84:	f003 f814 	bl	8005eb0 <HAL_ADC_ConfigChannel>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002e8e:	f000 fd5d 	bl	800394c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e92:	bf00      	nop
 8002e94:	3730      	adds	r7, #48	@ 0x30
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200007ec 	.word	0x200007ec
 8002ea0:	04300002 	.word	0x04300002

08002ea4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b09c      	sub	sp, #112	@ 0x70
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eaa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ec4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
 8002ed4:	615a      	str	r2, [r3, #20]
 8002ed6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ed8:	1d3b      	adds	r3, r7, #4
 8002eda:	2234      	movs	r2, #52	@ 0x34
 8002edc:	2100      	movs	r1, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f009 fd90 	bl	800ca04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ee4:	4b45      	ldr	r3, [pc, #276]	@ (8002ffc <MX_TIM1_Init+0x158>)
 8002ee6:	4a46      	ldr	r2, [pc, #280]	@ (8003000 <MX_TIM1_Init+0x15c>)
 8002ee8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8002eea:	4b44      	ldr	r3, [pc, #272]	@ (8002ffc <MX_TIM1_Init+0x158>)
 8002eec:	2203      	movs	r2, #3
 8002eee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef0:	4b42      	ldr	r3, [pc, #264]	@ (8002ffc <MX_TIM1_Init+0x158>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ef6:	4b41      	ldr	r3, [pc, #260]	@ (8002ffc <MX_TIM1_Init+0x158>)
 8002ef8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002efc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efe:	4b3f      	ldr	r3, [pc, #252]	@ (8002ffc <MX_TIM1_Init+0x158>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f04:	4b3d      	ldr	r3, [pc, #244]	@ (8002ffc <MX_TIM1_Init+0x158>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002ffc <MX_TIM1_Init+0x158>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f10:	483a      	ldr	r0, [pc, #232]	@ (8002ffc <MX_TIM1_Init+0x158>)
 8002f12:	f005 fcd3 	bl	80088bc <HAL_TIM_Base_Init>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002f1c:	f000 fd16 	bl	800394c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f24:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f26:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4833      	ldr	r0, [pc, #204]	@ (8002ffc <MX_TIM1_Init+0x158>)
 8002f2e:	f006 fcfd 	bl	800992c <HAL_TIM_ConfigClockSource>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002f38:	f000 fd08 	bl	800394c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f3c:	482f      	ldr	r0, [pc, #188]	@ (8002ffc <MX_TIM1_Init+0x158>)
 8002f3e:	f005 fe09 	bl	8008b54 <HAL_TIM_PWM_Init>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002f48:	f000 fd00 	bl	800394c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f50:	2300      	movs	r3, #0
 8002f52:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4827      	ldr	r0, [pc, #156]	@ (8002ffc <MX_TIM1_Init+0x158>)
 8002f60:	f007 fcca 	bl	800a8f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002f6a:	f000 fcef 	bl	800394c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f6e:	2360      	movs	r3, #96	@ 0x60
 8002f70:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f76:	2300      	movs	r3, #0
 8002f78:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002f7e:	2304      	movs	r3, #4
 8002f80:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f82:	2300      	movs	r3, #0
 8002f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f8a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f8e:	2200      	movs	r2, #0
 8002f90:	4619      	mov	r1, r3
 8002f92:	481a      	ldr	r0, [pc, #104]	@ (8002ffc <MX_TIM1_Init+0x158>)
 8002f94:	f006 fbb6 	bl	8009704 <HAL_TIM_PWM_ConfigChannel>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002f9e:	f000 fcd5 	bl	800394c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002fc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4807      	ldr	r0, [pc, #28]	@ (8002ffc <MX_TIM1_Init+0x158>)
 8002fe0:	f007 fd20 	bl	800aa24 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8002fea:	f000 fcaf 	bl	800394c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002fee:	4803      	ldr	r0, [pc, #12]	@ (8002ffc <MX_TIM1_Init+0x158>)
 8002ff0:	f001 fdcc 	bl	8004b8c <HAL_TIM_MspPostInit>

}
 8002ff4:	bf00      	nop
 8002ff6:	3770      	adds	r7, #112	@ 0x70
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	200008b8 	.word	0x200008b8
 8003000:	40012c00 	.word	0x40012c00

08003004 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800300a:	f107 0310 	add.w	r3, r7, #16
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	609a      	str	r2, [r3, #8]
 8003016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003022:	4b1d      	ldr	r3, [pc, #116]	@ (8003098 <MX_TIM3_Init+0x94>)
 8003024:	4a1d      	ldr	r2, [pc, #116]	@ (800309c <MX_TIM3_Init+0x98>)
 8003026:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8003028:	4b1b      	ldr	r3, [pc, #108]	@ (8003098 <MX_TIM3_Init+0x94>)
 800302a:	22a9      	movs	r2, #169	@ 0xa9
 800302c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800302e:	4b1a      	ldr	r3, [pc, #104]	@ (8003098 <MX_TIM3_Init+0x94>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003034:	4b18      	ldr	r3, [pc, #96]	@ (8003098 <MX_TIM3_Init+0x94>)
 8003036:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800303a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800303c:	4b16      	ldr	r3, [pc, #88]	@ (8003098 <MX_TIM3_Init+0x94>)
 800303e:	2200      	movs	r2, #0
 8003040:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <MX_TIM3_Init+0x94>)
 8003044:	2200      	movs	r2, #0
 8003046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003048:	4813      	ldr	r0, [pc, #76]	@ (8003098 <MX_TIM3_Init+0x94>)
 800304a:	f005 fc37 	bl	80088bc <HAL_TIM_Base_Init>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003054:	f000 fc7a 	bl	800394c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003058:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800305c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800305e:	f107 0310 	add.w	r3, r7, #16
 8003062:	4619      	mov	r1, r3
 8003064:	480c      	ldr	r0, [pc, #48]	@ (8003098 <MX_TIM3_Init+0x94>)
 8003066:	f006 fc61 	bl	800992c <HAL_TIM_ConfigClockSource>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003070:	f000 fc6c 	bl	800394c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003074:	2300      	movs	r3, #0
 8003076:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800307c:	1d3b      	adds	r3, r7, #4
 800307e:	4619      	mov	r1, r3
 8003080:	4805      	ldr	r0, [pc, #20]	@ (8003098 <MX_TIM3_Init+0x94>)
 8003082:	f007 fc39 	bl	800a8f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800308c:	f000 fc5e 	bl	800394c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003090:	bf00      	nop
 8003092:	3720      	adds	r7, #32
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000984 	.word	0x20000984
 800309c:	40000400 	.word	0x40000400

080030a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08c      	sub	sp, #48	@ 0x30
 80030a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80030a6:	f107 030c 	add.w	r3, r7, #12
 80030aa:	2224      	movs	r2, #36	@ 0x24
 80030ac:	2100      	movs	r1, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f009 fca8 	bl	800ca04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030b4:	463b      	mov	r3, r7
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80030be:	4b21      	ldr	r3, [pc, #132]	@ (8003144 <MX_TIM4_Init+0xa4>)
 80030c0:	4a21      	ldr	r2, [pc, #132]	@ (8003148 <MX_TIM4_Init+0xa8>)
 80030c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80030c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003144 <MX_TIM4_Init+0xa4>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003144 <MX_TIM4_Init+0xa4>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80030d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003144 <MX_TIM4_Init+0xa4>)
 80030d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003144 <MX_TIM4_Init+0xa4>)
 80030da:	2200      	movs	r2, #0
 80030dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030de:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <MX_TIM4_Init+0xa4>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80030e4:	2303      	movs	r3, #3
 80030e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80030ec:	2301      	movs	r3, #1
 80030ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 80030f4:	2303      	movs	r3, #3
 80030f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030f8:	2300      	movs	r3, #0
 80030fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030fc:	2301      	movs	r3, #1
 80030fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003100:	2300      	movs	r3, #0
 8003102:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 3;
 8003104:	2303      	movs	r3, #3
 8003106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003108:	f107 030c 	add.w	r3, r7, #12
 800310c:	4619      	mov	r1, r3
 800310e:	480d      	ldr	r0, [pc, #52]	@ (8003144 <MX_TIM4_Init+0xa4>)
 8003110:	f005 ff96 	bl	8009040 <HAL_TIM_Encoder_Init>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800311a:	f000 fc17 	bl	800394c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800311e:	2300      	movs	r3, #0
 8003120:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003126:	463b      	mov	r3, r7
 8003128:	4619      	mov	r1, r3
 800312a:	4806      	ldr	r0, [pc, #24]	@ (8003144 <MX_TIM4_Init+0xa4>)
 800312c:	f007 fbe4 	bl	800a8f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003136:	f000 fc09 	bl	800394c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800313a:	bf00      	nop
 800313c:	3730      	adds	r7, #48	@ 0x30
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000a50 	.word	0x20000a50
 8003148:	40000800 	.word	0x40000800

0800314c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003150:	4b14      	ldr	r3, [pc, #80]	@ (80031a4 <MX_TIM16_Init+0x58>)
 8003152:	4a15      	ldr	r2, [pc, #84]	@ (80031a8 <MX_TIM16_Init+0x5c>)
 8003154:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003156:	4b13      	ldr	r3, [pc, #76]	@ (80031a4 <MX_TIM16_Init+0x58>)
 8003158:	22a9      	movs	r2, #169	@ 0xa9
 800315a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800315c:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <MX_TIM16_Init+0x58>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8003162:	4b10      	ldr	r3, [pc, #64]	@ (80031a4 <MX_TIM16_Init+0x58>)
 8003164:	f240 4279 	movw	r2, #1145	@ 0x479
 8003168:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800316a:	4b0e      	ldr	r3, [pc, #56]	@ (80031a4 <MX_TIM16_Init+0x58>)
 800316c:	2200      	movs	r2, #0
 800316e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003170:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <MX_TIM16_Init+0x58>)
 8003172:	2200      	movs	r2, #0
 8003174:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003176:	4b0b      	ldr	r3, [pc, #44]	@ (80031a4 <MX_TIM16_Init+0x58>)
 8003178:	2200      	movs	r2, #0
 800317a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800317c:	4809      	ldr	r0, [pc, #36]	@ (80031a4 <MX_TIM16_Init+0x58>)
 800317e:	f005 fb9d 	bl	80088bc <HAL_TIM_Base_Init>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003188:	f000 fbe0 	bl	800394c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800318c:	2108      	movs	r1, #8
 800318e:	4805      	ldr	r0, [pc, #20]	@ (80031a4 <MX_TIM16_Init+0x58>)
 8003190:	f005 fe60 	bl	8008e54 <HAL_TIM_OnePulse_Init>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800319a:	f000 fbd7 	bl	800394c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000b1c 	.word	0x20000b1c
 80031a8:	40014400 	.word	0x40014400

080031ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031b0:	4b23      	ldr	r3, [pc, #140]	@ (8003240 <MX_USART2_UART_Init+0x94>)
 80031b2:	4a24      	ldr	r2, [pc, #144]	@ (8003244 <MX_USART2_UART_Init+0x98>)
 80031b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80031b6:	4b22      	ldr	r3, [pc, #136]	@ (8003240 <MX_USART2_UART_Init+0x94>)
 80031b8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80031bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80031be:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <MX_USART2_UART_Init+0x94>)
 80031c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031c4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003240 <MX_USART2_UART_Init+0x94>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80031cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003240 <MX_USART2_UART_Init+0x94>)
 80031ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003240 <MX_USART2_UART_Init+0x94>)
 80031d6:	220c      	movs	r2, #12
 80031d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031da:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <MX_USART2_UART_Init+0x94>)
 80031dc:	2200      	movs	r2, #0
 80031de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031e0:	4b17      	ldr	r3, [pc, #92]	@ (8003240 <MX_USART2_UART_Init+0x94>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031e6:	4b16      	ldr	r3, [pc, #88]	@ (8003240 <MX_USART2_UART_Init+0x94>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031ec:	4b14      	ldr	r3, [pc, #80]	@ (8003240 <MX_USART2_UART_Init+0x94>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031f2:	4b13      	ldr	r3, [pc, #76]	@ (8003240 <MX_USART2_UART_Init+0x94>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031f8:	4811      	ldr	r0, [pc, #68]	@ (8003240 <MX_USART2_UART_Init+0x94>)
 80031fa:	f007 fcf7 	bl	800abec <HAL_UART_Init>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003204:	f000 fba2 	bl	800394c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003208:	2100      	movs	r1, #0
 800320a:	480d      	ldr	r0, [pc, #52]	@ (8003240 <MX_USART2_UART_Init+0x94>)
 800320c:	f009 fb17 	bl	800c83e <HAL_UARTEx_SetTxFifoThreshold>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003216:	f000 fb99 	bl	800394c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800321a:	2100      	movs	r1, #0
 800321c:	4808      	ldr	r0, [pc, #32]	@ (8003240 <MX_USART2_UART_Init+0x94>)
 800321e:	f009 fb4c 	bl	800c8ba <HAL_UARTEx_SetRxFifoThreshold>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003228:	f000 fb90 	bl	800394c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800322c:	4804      	ldr	r0, [pc, #16]	@ (8003240 <MX_USART2_UART_Init+0x94>)
 800322e:	f009 facd 	bl	800c7cc <HAL_UARTEx_DisableFifoMode>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003238:	f000 fb88 	bl	800394c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000c48 	.word	0x20000c48
 8003244:	40004400 	.word	0x40004400

08003248 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800324e:	4b1e      	ldr	r3, [pc, #120]	@ (80032c8 <MX_DMA_Init+0x80>)
 8003250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003252:	4a1d      	ldr	r2, [pc, #116]	@ (80032c8 <MX_DMA_Init+0x80>)
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	6493      	str	r3, [r2, #72]	@ 0x48
 800325a:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <MX_DMA_Init+0x80>)
 800325c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	607b      	str	r3, [r7, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003266:	4b18      	ldr	r3, [pc, #96]	@ (80032c8 <MX_DMA_Init+0x80>)
 8003268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326a:	4a17      	ldr	r2, [pc, #92]	@ (80032c8 <MX_DMA_Init+0x80>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	6493      	str	r3, [r2, #72]	@ 0x48
 8003272:	4b15      	ldr	r3, [pc, #84]	@ (80032c8 <MX_DMA_Init+0x80>)
 8003274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800327e:	2200      	movs	r2, #0
 8003280:	2100      	movs	r1, #0
 8003282:	200b      	movs	r0, #11
 8003284:	f003 fdb9 	bl	8006dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003288:	200b      	movs	r0, #11
 800328a:	f003 fdd0 	bl	8006e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800328e:	2200      	movs	r2, #0
 8003290:	2100      	movs	r1, #0
 8003292:	200c      	movs	r0, #12
 8003294:	f003 fdb1 	bl	8006dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003298:	200c      	movs	r0, #12
 800329a:	f003 fdc8 	bl	8006e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	2100      	movs	r1, #0
 80032a2:	200d      	movs	r0, #13
 80032a4:	f003 fda9 	bl	8006dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80032a8:	200d      	movs	r0, #13
 80032aa:	f003 fdc0 	bl	8006e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2100      	movs	r1, #0
 80032b2:	200e      	movs	r0, #14
 80032b4:	f003 fda1 	bl	8006dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80032b8:	200e      	movs	r0, #14
 80032ba:	f003 fdb8 	bl	8006e2e <HAL_NVIC_EnableIRQ>

}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000

080032cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	@ 0x28
 80032d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	60da      	str	r2, [r3, #12]
 80032e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e2:	4b67      	ldr	r3, [pc, #412]	@ (8003480 <MX_GPIO_Init+0x1b4>)
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	4a66      	ldr	r2, [pc, #408]	@ (8003480 <MX_GPIO_Init+0x1b4>)
 80032e8:	f043 0304 	orr.w	r3, r3, #4
 80032ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032ee:	4b64      	ldr	r3, [pc, #400]	@ (8003480 <MX_GPIO_Init+0x1b4>)
 80032f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032fa:	4b61      	ldr	r3, [pc, #388]	@ (8003480 <MX_GPIO_Init+0x1b4>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fe:	4a60      	ldr	r2, [pc, #384]	@ (8003480 <MX_GPIO_Init+0x1b4>)
 8003300:	f043 0320 	orr.w	r3, r3, #32
 8003304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003306:	4b5e      	ldr	r3, [pc, #376]	@ (8003480 <MX_GPIO_Init+0x1b4>)
 8003308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003312:	4b5b      	ldr	r3, [pc, #364]	@ (8003480 <MX_GPIO_Init+0x1b4>)
 8003314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003316:	4a5a      	ldr	r2, [pc, #360]	@ (8003480 <MX_GPIO_Init+0x1b4>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800331e:	4b58      	ldr	r3, [pc, #352]	@ (8003480 <MX_GPIO_Init+0x1b4>)
 8003320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800332a:	4b55      	ldr	r3, [pc, #340]	@ (8003480 <MX_GPIO_Init+0x1b4>)
 800332c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332e:	4a54      	ldr	r2, [pc, #336]	@ (8003480 <MX_GPIO_Init+0x1b4>)
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003336:	4b52      	ldr	r3, [pc, #328]	@ (8003480 <MX_GPIO_Init+0x1b4>)
 8003338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 8003342:	2200      	movs	r2, #0
 8003344:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003348:	484e      	ldr	r0, [pc, #312]	@ (8003484 <MX_GPIO_Init+0x1b8>)
 800334a:	f004 fa57 	bl	80077fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 800334e:	2200      	movs	r2, #0
 8003350:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8003354:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003358:	f004 fa50 	bl	80077fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 800335c:	2200      	movs	r2, #0
 800335e:	f240 4116 	movw	r1, #1046	@ 0x416
 8003362:	4849      	ldr	r0, [pc, #292]	@ (8003488 <MX_GPIO_Init+0x1bc>)
 8003364:	f004 fa4a 	bl	80077fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003368:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800336c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800336e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	4619      	mov	r1, r3
 800337e:	4841      	ldr	r0, [pc, #260]	@ (8003484 <MX_GPIO_Init+0x1b8>)
 8003380:	f004 f8a2 	bl	80074c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 8003384:	2302      	movs	r3, #2
 8003386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003388:	2301      	movs	r3, #1
 800338a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338c:	2300      	movs	r3, #0
 800338e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003390:	2303      	movs	r3, #3
 8003392:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	4619      	mov	r1, r3
 800339a:	483a      	ldr	r0, [pc, #232]	@ (8003484 <MX_GPIO_Init+0x1b8>)
 800339c:	f004 f894 	bl	80074c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 80033a0:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80033a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a6:	2301      	movs	r3, #1
 80033a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ae:	2300      	movs	r3, #0
 80033b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b2:	f107 0314 	add.w	r3, r7, #20
 80033b6:	4619      	mov	r1, r3
 80033b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033bc:	f004 f884 	bl	80074c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 80033c0:	23f0      	movs	r3, #240	@ 0xf0
 80033c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	4619      	mov	r1, r3
 80033d2:	482c      	ldr	r0, [pc, #176]	@ (8003484 <MX_GPIO_Init+0x1b8>)
 80033d4:	f004 f878 	bl	80074c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 80033d8:	f240 4316 	movw	r3, #1046	@ 0x416
 80033dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033de:	2301      	movs	r3, #1
 80033e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ea:	f107 0314 	add.w	r3, r7, #20
 80033ee:	4619      	mov	r1, r3
 80033f0:	4825      	ldr	r0, [pc, #148]	@ (8003488 <MX_GPIO_Init+0x1bc>)
 80033f2:	f004 f869 	bl	80074c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin joy_switch_1_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|joy_switch_1_Pin;
 80033f6:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 80033fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003404:	f107 0314 	add.w	r3, r7, #20
 8003408:	4619      	mov	r1, r3
 800340a:	481f      	ldr	r0, [pc, #124]	@ (8003488 <MX_GPIO_Init+0x1bc>)
 800340c:	f004 f85c 	bl	80074c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Emergency_switch_Pin;
 8003410:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003416:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800341a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_switch_GPIO_Port, &GPIO_InitStruct);
 8003420:	f107 0314 	add.w	r3, r7, #20
 8003424:	4619      	mov	r1, r3
 8003426:	4818      	ldr	r0, [pc, #96]	@ (8003488 <MX_GPIO_Init+0x1bc>)
 8003428:	f004 f84e 	bl	80074c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 800342c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003432:	2301      	movs	r3, #1
 8003434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343a:	2300      	movs	r3, #0
 800343c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 800343e:	f107 0314 	add.w	r3, r7, #20
 8003442:	4619      	mov	r1, r3
 8003444:	480f      	ldr	r0, [pc, #60]	@ (8003484 <MX_GPIO_Init+0x1b8>)
 8003446:	f004 f83f 	bl	80074c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 800344a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800344e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003450:	2300      	movs	r3, #0
 8003452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	4619      	mov	r1, r3
 800345e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003462:	f004 f831 	bl	80074c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2100      	movs	r1, #0
 800346a:	2028      	movs	r0, #40	@ 0x28
 800346c:	f003 fcc5 	bl	8006dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003470:	2028      	movs	r0, #40	@ 0x28
 8003472:	f003 fcdc 	bl	8006e2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003476:	bf00      	nop
 8003478:	3728      	adds	r7, #40	@ 0x28
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	48000800 	.word	0x48000800
 8003488:	48000400 	.word	0x48000400

0800348c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af04      	add	r7, sp, #16
 8003492:	6078      	str	r0, [r7, #4]
	// Run with 1000 Hz
	if(htim == &htim3){
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a44      	ldr	r2, [pc, #272]	@ (80035a8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	f040 8081 	bne.w	80035a0 <HAL_TIM_PeriodElapsedCallback+0x114>
		// Update encoder
		if(is_update_encoder == 0){
 800349e:	4b43      	ldr	r3, [pc, #268]	@ (80035ac <HAL_TIM_PeriodElapsedCallback+0x120>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d102      	bne.n	80034ac <HAL_TIM_PeriodElapsedCallback+0x20>
			is_update_encoder = 1;
 80034a6:	4b41      	ldr	r3, [pc, #260]	@ (80035ac <HAL_TIM_PeriodElapsedCallback+0x120>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]

		}
		if(mode == RUNNING){
 80034ac:	4b40      	ldr	r3, [pc, #256]	@ (80035b0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d113      	bne.n	80034dc <HAL_TIM_PeriodElapsedCallback+0x50>
			static uint8_t timestamp = 0;
			if(start_position_control == 0 && timestamp == 10){
 80034b4:	4b3f      	ldr	r3, [pc, #252]	@ (80035b4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HAL_TIM_PeriodElapsedCallback+0x44>
 80034bc:	4b3e      	ldr	r3, [pc, #248]	@ (80035b8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b0a      	cmp	r3, #10
 80034c2:	d105      	bne.n	80034d0 <HAL_TIM_PeriodElapsedCallback+0x44>
				start_position_control = 1;
 80034c4:	4b3b      	ldr	r3, [pc, #236]	@ (80035b4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	701a      	strb	r2, [r3, #0]
				timestamp = 0;
 80034ca:	4b3b      	ldr	r3, [pc, #236]	@ (80035b8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
			}
			timestamp++;
 80034d0:	4b39      	ldr	r3, [pc, #228]	@ (80035b8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	3301      	adds	r3, #1
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	4b37      	ldr	r3, [pc, #220]	@ (80035b8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80034da:	701a      	strb	r2, [r3, #0]
		}
		if(mode == HOMING){
 80034dc:	4b34      	ldr	r3, [pc, #208]	@ (80035b0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d15d      	bne.n	80035a0 <HAL_TIM_PeriodElapsedCallback+0x114>
			// End effector position check
			if(home.homing_command == 1 && eff.actual_status[0] == 0 && eff.actual_status[1] == 1){
 80034e4:	4b35      	ldr	r3, [pc, #212]	@ (80035bc <HAL_TIM_PeriodElapsedCallback+0x130>)
 80034e6:	789b      	ldrb	r3, [r3, #2]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d120      	bne.n	800352e <HAL_TIM_PeriodElapsedCallback+0xa2>
 80034ec:	4b34      	ldr	r3, [pc, #208]	@ (80035c0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d11c      	bne.n	800352e <HAL_TIM_PeriodElapsedCallback+0xa2>
 80034f4:	4b32      	ldr	r3, [pc, #200]	@ (80035c0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d118      	bne.n	800352e <HAL_TIM_PeriodElapsedCallback+0xa2>
				eff.solenoid_command[0] = 0;
 80034fc:	4b30      	ldr	r3, [pc, #192]	@ (80035c0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80034fe:	2200      	movs	r2, #0
 8003500:	709a      	strb	r2, [r3, #2]
				eff.solenoid_command[1] = 0;
 8003502:	4b2f      	ldr	r3, [pc, #188]	@ (80035c0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003504:	2200      	movs	r2, #0
 8003506:	70da      	strb	r2, [r3, #3]
				eff.solenoid_command[2] = 1;
 8003508:	4b2d      	ldr	r3, [pc, #180]	@ (80035c0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800350a:	2201      	movs	r2, #1
 800350c:	711a      	strb	r2, [r3, #4]
				Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 800350e:	2310      	movs	r3, #16
 8003510:	9302      	str	r3, [sp, #8]
 8003512:	4b2c      	ldr	r3, [pc, #176]	@ (80035c4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003520:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003524:	4927      	ldr	r1, [pc, #156]	@ (80035c4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003526:	4826      	ldr	r0, [pc, #152]	@ (80035c0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003528:	f7fe fe33 	bl	8002192 <Update_eff>
				return;
 800352c:	e038      	b.n	80035a0 <HAL_TIM_PeriodElapsedCallback+0x114>
			}
			if(home.homing_command == 1 && eff.actual_status[0] == 1 && eff.actual_status[1] == 0){
 800352e:	4b23      	ldr	r3, [pc, #140]	@ (80035bc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003530:	789b      	ldrb	r3, [r3, #2]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d11f      	bne.n	8003576 <HAL_TIM_PeriodElapsedCallback+0xea>
 8003536:	4b22      	ldr	r3, [pc, #136]	@ (80035c0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d11b      	bne.n	8003576 <HAL_TIM_PeriodElapsedCallback+0xea>
 800353e:	4b20      	ldr	r3, [pc, #128]	@ (80035c0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003540:	785b      	ldrb	r3, [r3, #1]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d117      	bne.n	8003576 <HAL_TIM_PeriodElapsedCallback+0xea>
				eff.solenoid_command[0] = 0;
 8003546:	4b1e      	ldr	r3, [pc, #120]	@ (80035c0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003548:	2200      	movs	r2, #0
 800354a:	709a      	strb	r2, [r3, #2]
				eff.solenoid_command[1] = 0;
 800354c:	4b1c      	ldr	r3, [pc, #112]	@ (80035c0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800354e:	2200      	movs	r2, #0
 8003550:	70da      	strb	r2, [r3, #3]
				eff.solenoid_command[2] = 0;
 8003552:	4b1b      	ldr	r3, [pc, #108]	@ (80035c0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003554:	2200      	movs	r2, #0
 8003556:	711a      	strb	r2, [r3, #4]
				Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 8003558:	2310      	movs	r3, #16
 800355a:	9302      	str	r3, [sp, #8]
 800355c:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800356a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800356e:	4915      	ldr	r1, [pc, #84]	@ (80035c4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003570:	4813      	ldr	r0, [pc, #76]	@ (80035c0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003572:	f7fe fe0e 	bl	8002192 <Update_eff>
			}
			// Homing state
			homing(&home, GPIOB, GPIO_PIN_12); // Homing function
 8003576:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800357a:	4912      	ldr	r1, [pc, #72]	@ (80035c4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800357c:	480f      	ldr	r0, [pc, #60]	@ (80035bc <HAL_TIM_PeriodElapsedCallback+0x130>)
 800357e:	f000 ff35 	bl	80043ec <homing>
			pwm_signal = home.pwm;
 8003582:	4b0e      	ldr	r3, [pc, #56]	@ (80035bc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003584:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003588:	461a      	mov	r2, r3
 800358a:	4b0f      	ldr	r3, [pc, #60]	@ (80035c8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800358c:	601a      	str	r2, [r3, #0]
			Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 800358e:	4b0e      	ldr	r3, [pc, #56]	@ (80035c8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2302      	movs	r3, #2
 8003596:	4a0d      	ldr	r2, [pc, #52]	@ (80035cc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003598:	2100      	movs	r1, #0
 800359a:	480d      	ldr	r0, [pc, #52]	@ (80035d0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800359c:	f000 fc25 	bl	8003dea <Update_pwm>
		}
	}
}
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000984 	.word	0x20000984
 80035ac:	2000123c 	.word	0x2000123c
 80035b0:	20000e18 	.word	0x20000e18
 80035b4:	20001390 	.word	0x20001390
 80035b8:	200017c8 	.word	0x200017c8
 80035bc:	20000e28 	.word	0x20000e28
 80035c0:	20000fd4 	.word	0x20000fd4
 80035c4:	48000400 	.word	0x48000400
 80035c8:	20001238 	.word	0x20001238
 80035cc:	48000800 	.word	0x48000800
 80035d0:	200008b8 	.word	0x200008b8

080035d4 <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af04      	add	r7, sp, #16
 80035da:	4603      	mov	r3, r0
 80035dc:	80fb      	strh	r3, [r7, #6]
	// Activate and Deactivate testing mode
	if(GPIO_Pin == GPIO_PIN_13){
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035e4:	d161      	bne.n	80036aa <HAL_GPIO_EXTI_Callback+0xd6>
		static uint8_t test = 0;
		if(test == 0){
 80035e6:	4b4e      	ldr	r3, [pc, #312]	@ (8003720 <HAL_GPIO_EXTI_Callback+0x14c>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d12b      	bne.n	8003646 <HAL_GPIO_EXTI_Callback+0x72>
			target_position = 500.0;
 80035ee:	494d      	ldr	r1, [pc, #308]	@ (8003724 <HAL_GPIO_EXTI_Callback+0x150>)
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	4b4c      	ldr	r3, [pc, #304]	@ (8003728 <HAL_GPIO_EXTI_Callback+0x154>)
 80035f6:	e9c1 2300 	strd	r2, r3, [r1]
			initial_position = encoder.mm;
 80035fa:	4b4c      	ldr	r3, [pc, #304]	@ (800372c <HAL_GPIO_EXTI_Callback+0x158>)
 80035fc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003600:	494b      	ldr	r1, [pc, #300]	@ (8003730 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003602:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurveData.t = 0;
 8003606:	494b      	ldr	r1, [pc, #300]	@ (8003734 <HAL_GPIO_EXTI_Callback+0x160>)
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidalData.t = 0.0;
 8003614:	4948      	ldr	r1, [pc, #288]	@ (8003738 <HAL_GPIO_EXTI_Callback+0x164>)
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	e9c1 2300 	strd	r2, r3, [r1]
			setpoint_pos = 0.0;
 8003622:	4946      	ldr	r1, [pc, #280]	@ (800373c <HAL_GPIO_EXTI_Callback+0x168>)
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	e9c1 2300 	strd	r2, r3, [r1]
			setpoint_vel = 0.0;
 8003630:	4943      	ldr	r1, [pc, #268]	@ (8003740 <HAL_GPIO_EXTI_Callback+0x16c>)
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9c1 2300 	strd	r2, r3, [r1]
			test = 1;
 800363e:	4b38      	ldr	r3, [pc, #224]	@ (8003720 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003640:	2201      	movs	r2, #1
 8003642:	701a      	strb	r2, [r3, #0]
 8003644:	e02e      	b.n	80036a4 <HAL_GPIO_EXTI_Callback+0xd0>
//			testing = 1;
		}
		else if(test == 1){
 8003646:	4b36      	ldr	r3, [pc, #216]	@ (8003720 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d12a      	bne.n	80036a4 <HAL_GPIO_EXTI_Callback+0xd0>
			initial_position = encoder.mm;
 800364e:	4b37      	ldr	r3, [pc, #220]	@ (800372c <HAL_GPIO_EXTI_Callback+0x158>)
 8003650:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003654:	4936      	ldr	r1, [pc, #216]	@ (8003730 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003656:	e9c1 2300 	strd	r2, r3, [r1]
			target_position = 10.0;
 800365a:	4932      	ldr	r1, [pc, #200]	@ (8003724 <HAL_GPIO_EXTI_Callback+0x150>)
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	4b38      	ldr	r3, [pc, #224]	@ (8003744 <HAL_GPIO_EXTI_Callback+0x170>)
 8003662:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurveData.t = 0.0;
 8003666:	4933      	ldr	r1, [pc, #204]	@ (8003734 <HAL_GPIO_EXTI_Callback+0x160>)
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidalData.t = 0.0;
 8003674:	4930      	ldr	r1, [pc, #192]	@ (8003738 <HAL_GPIO_EXTI_Callback+0x164>)
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	e9c1 2300 	strd	r2, r3, [r1]
			setpoint_pos = 0.0;
 8003682:	492e      	ldr	r1, [pc, #184]	@ (800373c <HAL_GPIO_EXTI_Callback+0x168>)
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	e9c1 2300 	strd	r2, r3, [r1]
			setpoint_vel = 0.0;
 8003690:	492b      	ldr	r1, [pc, #172]	@ (8003740 <HAL_GPIO_EXTI_Callback+0x16c>)
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	e9c1 2300 	strd	r2, r3, [r1]
			test = 0;
 800369e:	4b20      	ldr	r3, [pc, #128]	@ (8003720 <HAL_GPIO_EXTI_Callback+0x14c>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
//			testing = 0;
		}
		mode = RUNNING;
 80036a4:	4b28      	ldr	r3, [pc, #160]	@ (8003748 <HAL_GPIO_EXTI_Callback+0x174>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_15){
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036b0:	d132      	bne.n	8003718 <HAL_GPIO_EXTI_Callback+0x144>
		// Emergency switch interrupted
		if(HAL_GPIO_ReadPin(emer_gpio, emer_pin) == 0){
 80036b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036b6:	4825      	ldr	r0, [pc, #148]	@ (800374c <HAL_GPIO_EXTI_Callback+0x178>)
 80036b8:	f004 f888 	bl	80077cc <HAL_GPIO_ReadPin>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d12a      	bne.n	8003718 <HAL_GPIO_EXTI_Callback+0x144>
//
//			state = 0;
//			registerFrame[0x10].U16 = 0;
//			registerFrame[0x01].U16 = 0;

			Reset_main_variable();
 80036c2:	f000 f88d 	bl	80037e0 <Reset_main_variable>

			// Stop motor
			Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, 0);
 80036c6:	2300      	movs	r3, #0
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	2302      	movs	r3, #2
 80036cc:	4a20      	ldr	r2, [pc, #128]	@ (8003750 <HAL_GPIO_EXTI_Callback+0x17c>)
 80036ce:	2100      	movs	r1, #0
 80036d0:	4820      	ldr	r0, [pc, #128]	@ (8003754 <HAL_GPIO_EXTI_Callback+0x180>)
 80036d2:	f000 fb8a 	bl	8003dea <Update_pwm>
			// Emergency light enable
			HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, SET);
 80036d6:	2201      	movs	r2, #1
 80036d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036dc:	481c      	ldr	r0, [pc, #112]	@ (8003750 <HAL_GPIO_EXTI_Callback+0x17c>)
 80036de:	f004 f88d 	bl	80077fc <HAL_GPIO_WritePin>
			// Deactivate end effector
			eff.solenoid_command[0] = 0;
 80036e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003758 <HAL_GPIO_EXTI_Callback+0x184>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	709a      	strb	r2, [r3, #2]
			eff.solenoid_command[1] = 0;
 80036e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <HAL_GPIO_EXTI_Callback+0x184>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	70da      	strb	r2, [r3, #3]
			eff.solenoid_command[2] = 0;
 80036ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003758 <HAL_GPIO_EXTI_Callback+0x184>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	711a      	strb	r2, [r3, #4]
			Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 80036f4:	2310      	movs	r3, #16
 80036f6:	9302      	str	r3, [sp, #8]
 80036f8:	4b14      	ldr	r3, [pc, #80]	@ (800374c <HAL_GPIO_EXTI_Callback+0x178>)
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003706:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800370a:	4910      	ldr	r1, [pc, #64]	@ (800374c <HAL_GPIO_EXTI_Callback+0x178>)
 800370c:	4812      	ldr	r0, [pc, #72]	@ (8003758 <HAL_GPIO_EXTI_Callback+0x184>)
 800370e:	f7fe fd40 	bl	8002192 <Update_eff>
			mode = EMERGENCY;
 8003712:	4b0d      	ldr	r3, [pc, #52]	@ (8003748 <HAL_GPIO_EXTI_Callback+0x174>)
 8003714:	2203      	movs	r2, #3
 8003716:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200017c9 	.word	0x200017c9
 8003724:	200017b0 	.word	0x200017b0
 8003728:	407f4000 	.word	0x407f4000
 800372c:	20001240 	.word	0x20001240
 8003730:	200017a8 	.word	0x200017a8
 8003734:	20001718 	.word	0x20001718
 8003738:	20001788 	.word	0x20001788
 800373c:	200017b8 	.word	0x200017b8
 8003740:	200017c0 	.word	0x200017c0
 8003744:	40240000 	.word	0x40240000
 8003748:	20000e18 	.word	0x20000e18
 800374c:	48000400 	.word	0x48000400
 8003750:	48000800 	.word	0x48000800
 8003754:	200008b8 	.word	0x200008b8
 8003758:	20000fd4 	.word	0x20000fd4

0800375c <Update_velocity_control>:
// Torque control update
void Update_torque_control(double s){

}
// Velocity control update
void Update_velocity_control(double s){
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	ed87 0b00 	vstr	d0, [r7]
	// input is millimeter unit
//	v_e = s - lowpass.filtered_data;
	v_e = s - Get_mmps(&encoder);
 8003766:	4819      	ldr	r0, [pc, #100]	@ (80037cc <Update_velocity_control+0x70>)
 8003768:	f000 fdf7 	bl	800435a <Get_mmps>
 800376c:	ec53 2b10 	vmov	r2, r3, d0
 8003770:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003774:	f7fc fd54 	bl	8000220 <__aeabi_dsub>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4914      	ldr	r1, [pc, #80]	@ (80037d0 <Update_velocity_control+0x74>)
 800377e:	e9c1 2300 	strd	r2, r3, [r1]
	v_output = (int32_t)floor((Update_pid(&v_pid, v_e, 65535.0, 65535.0)));
 8003782:	4b13      	ldr	r3, [pc, #76]	@ (80037d0 <Update_velocity_control+0x74>)
 8003784:	ed93 7b00 	vldr	d7, [r3]
 8003788:	eddf 1a12 	vldr	s3, [pc, #72]	@ 80037d4 <Update_velocity_control+0x78>
 800378c:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 80037d4 <Update_velocity_control+0x78>
 8003790:	eeb0 0a47 	vmov.f32	s0, s14
 8003794:	eef0 0a67 	vmov.f32	s1, s15
 8003798:	480f      	ldr	r0, [pc, #60]	@ (80037d8 <Update_velocity_control+0x7c>)
 800379a:	f000 f928 	bl	80039ee <Update_pid>
 800379e:	eeb0 7a40 	vmov.f32	s14, s0
 80037a2:	eef0 7a60 	vmov.f32	s15, s1
 80037a6:	eeb0 0a47 	vmov.f32	s0, s14
 80037aa:	eef0 0a67 	vmov.f32	s1, s15
 80037ae:	f009 fa6f 	bl	800cc90 <floor>
 80037b2:	ec53 2b10 	vmov	r2, r3, d0
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	f7fd f999 	bl	8000af0 <__aeabi_d2iz>
 80037be:	4603      	mov	r3, r0
 80037c0:	4a06      	ldr	r2, [pc, #24]	@ (80037dc <Update_velocity_control+0x80>)
 80037c2:	6013      	str	r3, [r2, #0]
}
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20001240 	.word	0x20001240
 80037d0:	20001320 	.word	0x20001320
 80037d4:	477fff00 	.word	0x477fff00
 80037d8:	200012d8 	.word	0x200012d8
 80037dc:	20001328 	.word	0x20001328

080037e0 <Reset_main_variable>:
	//input is pulse unit
	p_e = s - Get_mm(&encoder);
	p_output = Update_pid(&p_pid, p_e, 650.0, 650.0);
}
// Reset variable function
void Reset_main_variable(){
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
	// Reset point reset
	setpoint = 0.0;
 80037e4:	4944      	ldr	r1, [pc, #272]	@ (80038f8 <Reset_main_variable+0x118>)
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset PWM signal
	pwm_signal = 0;
 80037f2:	4b42      	ldr	r3, [pc, #264]	@ (80038fc <Reset_main_variable+0x11c>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
	// Encoder compute enable
	is_update_encoder = 0;
 80037f8:	4b41      	ldr	r3, [pc, #260]	@ (8003900 <Reset_main_variable+0x120>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
	// Reset trajectory
	initial_position = 0.0;
 80037fe:	4941      	ldr	r1, [pc, #260]	@ (8003904 <Reset_main_variable+0x124>)
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	e9c1 2300 	strd	r2, r3, [r1]
	target_position = 0.0;
 800380c:	493e      	ldr	r1, [pc, #248]	@ (8003908 <Reset_main_variable+0x128>)
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	e9c1 2300 	strd	r2, r3, [r1]
	evaScurveData.setposition = 0.0;
 800381a:	493c      	ldr	r1, [pc, #240]	@ (800390c <Reset_main_variable+0x12c>)
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9c1 2300 	strd	r2, r3, [r1]
	evaScurveData.setvelocity = 0.0;
 8003828:	4938      	ldr	r1, [pc, #224]	@ (800390c <Reset_main_variable+0x12c>)
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9c1 2302 	strd	r2, r3, [r1, #8]
	evaScurveData.setacceleration = 0.0;
 8003836:	4935      	ldr	r1, [pc, #212]	@ (800390c <Reset_main_variable+0x12c>)
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	e9c1 2304 	strd	r2, r3, [r1, #16]
	evaScurveData.t = 0.0;
 8003844:	4931      	ldr	r1, [pc, #196]	@ (800390c <Reset_main_variable+0x12c>)
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	computeTrapezoidalData.set_pos = 0.0;
 8003852:	492f      	ldr	r1, [pc, #188]	@ (8003910 <Reset_main_variable+0x130>)
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	computeTrapezoidalData.set_vel = 0.0;
 8003860:	492b      	ldr	r1, [pc, #172]	@ (8003910 <Reset_main_variable+0x130>)
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	computeTrapezoidalData.t = 0.0;
 800386e:	4928      	ldr	r1, [pc, #160]	@ (8003910 <Reset_main_variable+0x130>)
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset homing data
	Reset_homing(&home);
 800387c:	4825      	ldr	r0, [pc, #148]	@ (8003914 <Reset_main_variable+0x134>)
 800387e:	f000 ffc9 	bl	8004814 <Reset_homing>
	// Reset state enable
	state = 0;
 8003882:	4b25      	ldr	r3, [pc, #148]	@ (8003918 <Reset_main_variable+0x138>)
 8003884:	2200      	movs	r2, #0
 8003886:	801a      	strh	r2, [r3, #0]
	ready = 0;
 8003888:	4b24      	ldr	r3, [pc, #144]	@ (800391c <Reset_main_variable+0x13c>)
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
	test = 0;
 800388e:	4924      	ldr	r1, [pc, #144]	@ (8003920 <Reset_main_variable+0x140>)
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset MODBUS
	registerFrame[0x10].U16 = 0;
 800389c:	4b21      	ldr	r3, [pc, #132]	@ (8003924 <Reset_main_variable+0x144>)
 800389e:	2200      	movs	r2, #0
 80038a0:	841a      	strh	r2, [r3, #32]
	registerFrame[0x01].U16 = 0;
 80038a2:	4b20      	ldr	r3, [pc, #128]	@ (8003924 <Reset_main_variable+0x144>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	805a      	strh	r2, [r3, #2]
	// Reset encoder
	Reset_qei(&encoder, &htim4);
 80038a8:	491f      	ldr	r1, [pc, #124]	@ (8003928 <Reset_main_variable+0x148>)
 80038aa:	4820      	ldr	r0, [pc, #128]	@ (800392c <Reset_main_variable+0x14c>)
 80038ac:	f000 fcce 	bl	800424c <Reset_qei>
	// Reset lowpass
	Reset_lowpass(&lowpass);
 80038b0:	481f      	ldr	r0, [pc, #124]	@ (8003930 <Reset_main_variable+0x150>)
 80038b2:	f7fe fecd 	bl	8002650 <Reset_lowpass>
	// Reset PID
	p_e = 0.0;
 80038b6:	491f      	ldr	r1, [pc, #124]	@ (8003934 <Reset_main_variable+0x154>)
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	e9c1 2300 	strd	r2, r3, [r1]
	p_output = 0.0;
 80038c4:	491c      	ldr	r1, [pc, #112]	@ (8003938 <Reset_main_variable+0x158>)
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	e9c1 2300 	strd	r2, r3, [r1]
	v_e = 0.0;
 80038d2:	491a      	ldr	r1, [pc, #104]	@ (800393c <Reset_main_variable+0x15c>)
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	e9c1 2300 	strd	r2, r3, [r1]
	v_output = 0;
 80038e0:	4b17      	ldr	r3, [pc, #92]	@ (8003940 <Reset_main_variable+0x160>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
	Reset_pid(&p_pid);
 80038e6:	4817      	ldr	r0, [pc, #92]	@ (8003944 <Reset_main_variable+0x164>)
 80038e8:	f000 fa52 	bl	8003d90 <Reset_pid>
	Reset_pid(&v_pid);
 80038ec:	4816      	ldr	r0, [pc, #88]	@ (8003948 <Reset_main_variable+0x168>)
 80038ee:	f000 fa4f 	bl	8003d90 <Reset_pid>
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000e10 	.word	0x20000e10
 80038fc:	20001238 	.word	0x20001238
 8003900:	2000123c 	.word	0x2000123c
 8003904:	200017a8 	.word	0x200017a8
 8003908:	200017b0 	.word	0x200017b0
 800390c:	20001718 	.word	0x20001718
 8003910:	20001788 	.word	0x20001788
 8003914:	20000e28 	.word	0x20000e28
 8003918:	200002ec 	.word	0x200002ec
 800391c:	20000e1a 	.word	0x20000e1a
 8003920:	20000dd8 	.word	0x20000dd8
 8003924:	20000e44 	.word	0x20000e44
 8003928:	20000a50 	.word	0x20000a50
 800392c:	20001240 	.word	0x20001240
 8003930:	200012d0 	.word	0x200012d0
 8003934:	20001380 	.word	0x20001380
 8003938:	20001388 	.word	0x20001388
 800393c:	20001320 	.word	0x20001320
 8003940:	20001328 	.word	0x20001328
 8003944:	20001330 	.word	0x20001330
 8003948:	200012d8 	.word	0x200012d8

0800394c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003950:	b672      	cpsid	i
}
 8003952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003954:	bf00      	nop
 8003956:	e7fd      	b.n	8003954 <Error_Handler+0x8>

08003958 <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float _kp_u,  float _ki_u, float _kd_u,float _kp_d,  float _ki_d, float _kd_d){
 8003958:	b480      	push	{r7}
 800395a:	b089      	sub	sp, #36	@ 0x24
 800395c:	af00      	add	r7, sp, #0
 800395e:	61f8      	str	r0, [r7, #28]
 8003960:	ed87 0a06 	vstr	s0, [r7, #24]
 8003964:	edc7 0a05 	vstr	s1, [r7, #20]
 8003968:	ed87 1a04 	vstr	s2, [r7, #16]
 800396c:	edc7 1a03 	vstr	s3, [r7, #12]
 8003970:	ed87 2a02 	vstr	s4, [r7, #8]
 8003974:	edc7 2a01 	vstr	s5, [r7, #4]
	pid -> kp_up = _kp_u;
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	601a      	str	r2, [r3, #0]
	pid -> ki_up = _ki_u;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	605a      	str	r2, [r3, #4]
	pid -> kd_up = _kd_u;
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	609a      	str	r2, [r3, #8]
	pid -> kp_down = _kp_d;
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	60da      	str	r2, [r3, #12]
	pid -> ki_down = _ki_d;
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	611a      	str	r2, [r3, #16]
	pid -> kd_down = _kd_d;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	615a      	str	r2, [r3, #20]
	pid -> y_n = 0.0;
 800399c:	69f9      	ldr	r1, [r7, #28]
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pid -> y_n_1 = 0.0;
 80039aa:	69f9      	ldr	r1, [r7, #28]
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid -> e_n = 0.0;
 80039b8:	69f9      	ldr	r1, [r7, #28]
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	pid -> e_n_1 = 0.0;
 80039c6:	69f9      	ldr	r1, [r7, #28]
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	pid -> e_n_2 = 0.0;
 80039d4:	69f9      	ldr	r1, [r7, #28]
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 80039e2:	bf00      	nop
 80039e4:	3724      	adds	r7, #36	@ 0x24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <Update_pid>:
double Update_pid(PID *pid, double error, float pid_sat, float plant_sat) {
 80039ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039f2:	b089      	sub	sp, #36	@ 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6178      	str	r0, [r7, #20]
 80039f8:	ed87 0b02 	vstr	d0, [r7, #8]
 80039fc:	ed87 1a04 	vstr	s2, [r7, #16]
 8003a00:	edc7 1a01 	vstr	s3, [r7, #4]

	float e_n = error; // error[n]
 8003a04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a08:	f7fd f8ba 	bl	8000b80 <__aeabi_d2f>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	61fb      	str	r3, [r7, #28]

	// For upcase
	if(e_n >= 0){
 8003a10:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1c:	f2c0 80ab 	blt.w	8003b76 <Update_pid+0x188>
		if(!(((pid -> y_n >= pid_sat) && e_n > 0) || ((pid -> y_n <= -(pid_sat)) && e_n < 0 ))){
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003a26:	6938      	ldr	r0, [r7, #16]
 8003a28:	f7fc fd5a 	bl	80004e0 <__aeabi_f2d>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	2101      	movs	r1, #1
 8003a32:	460e      	mov	r6, r1
 8003a34:	4620      	mov	r0, r4
 8003a36:	4629      	mov	r1, r5
 8003a38:	f7fd f830 	bl	8000a9c <__aeabi_dcmpge>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <Update_pid+0x58>
 8003a42:	2300      	movs	r3, #0
 8003a44:	461e      	mov	r6, r3
 8003a46:	b2f3      	uxtb	r3, r6
 8003a48:	f083 0301 	eor.w	r3, r3, #1
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10f      	bne.n	8003a72 <Update_pid+0x84>
 8003a52:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5e:	bfcc      	ite	gt
 8003a60:	2301      	movgt	r3, #1
 8003a62:	2300      	movle	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f083 0301 	eor.w	r3, r3, #1
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8135 	beq.w	8003cdc <Update_pid+0x2ee>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003a78:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a7c:	eef1 7a67 	vneg.f32	s15, s15
 8003a80:	ee17 3a90 	vmov	r3, s15
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fc fd2b 	bl	80004e0 <__aeabi_f2d>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	2101      	movs	r1, #1
 8003a90:	460e      	mov	r6, r1
 8003a92:	4620      	mov	r0, r4
 8003a94:	4629      	mov	r1, r5
 8003a96:	f7fc fff7 	bl	8000a88 <__aeabi_dcmple>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <Update_pid+0xb6>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	461e      	mov	r6, r3
 8003aa4:	b2f3      	uxtb	r3, r6
 8003aa6:	f083 0301 	eor.w	r3, r3, #1
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10f      	bne.n	8003ad0 <Update_pid+0xe2>
 8003ab0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ab4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abc:	bf4c      	ite	mi
 8003abe:	2301      	movmi	r3, #1
 8003ac0:	2300      	movpl	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f083 0301 	eor.w	r3, r3, #1
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8106 	beq.w	8003cdc <Update_pid+0x2ee>
			pid -> y_n += ((pid -> kp_up + pid -> ki_up + pid -> kd_up) * e_n)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	ed93 7a00 	vldr	s14, [r3]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ae2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003aec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003af0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af8:	ee17 0a90 	vmov	r0, s15
 8003afc:	f7fc fcf0 	bl	80004e0 <__aeabi_f2d>
 8003b00:	4680      	mov	r8, r0
 8003b02:	4689      	mov	r9, r1
							- ((pid -> kp_up + (2 * pid -> kd_up)) * pid -> e_n_1)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	ed93 7a00 	vldr	s14, [r3]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b18:	ee17 0a90 	vmov	r0, s15
 8003b1c:	f7fc fce0 	bl	80004e0 <__aeabi_f2d>
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003b26:	f7fc fd33 	bl	8000590 <__aeabi_dmul>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4640      	mov	r0, r8
 8003b30:	4649      	mov	r1, r9
 8003b32:	f7fc fb75 	bl	8000220 <__aeabi_dsub>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4690      	mov	r8, r2
 8003b3c:	4699      	mov	r9, r3
							+ (pid -> kd_up * pid -> e_n_2);
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fc fccc 	bl	80004e0 <__aeabi_f2d>
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003b4e:	f7fc fd1f 	bl	8000590 <__aeabi_dmul>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4640      	mov	r0, r8
 8003b58:	4649      	mov	r1, r9
 8003b5a:	f7fc fb63 	bl	8000224 <__adddf3>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
			pid -> y_n += ((pid -> kp_up + pid -> ki_up + pid -> kd_up) * e_n)
 8003b62:	4620      	mov	r0, r4
 8003b64:	4629      	mov	r1, r5
 8003b66:	f7fc fb5d 	bl	8000224 <__adddf3>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	6979      	ldr	r1, [r7, #20]
 8003b70:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8003b74:	e0b2      	b.n	8003cdc <Update_pid+0x2ee>
		}
	}
	// For down case
	else if(e_n < 0){
 8003b76:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b82:	f140 80ab 	bpl.w	8003cdc <Update_pid+0x2ee>
		if(!(((pid -> y_n >= pid_sat) && e_n > 0) || ((pid -> y_n <= -(pid_sat)) && e_n < 0 ))){
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003b8c:	6938      	ldr	r0, [r7, #16]
 8003b8e:	f7fc fca7 	bl	80004e0 <__aeabi_f2d>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	2101      	movs	r1, #1
 8003b98:	460e      	mov	r6, r1
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	f7fc ff7d 	bl	8000a9c <__aeabi_dcmpge>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <Update_pid+0x1be>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	461e      	mov	r6, r3
 8003bac:	b2f3      	uxtb	r3, r6
 8003bae:	f083 0301 	eor.w	r3, r3, #1
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10f      	bne.n	8003bd8 <Update_pid+0x1ea>
 8003bb8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc4:	bfcc      	ite	gt
 8003bc6:	2301      	movgt	r3, #1
 8003bc8:	2300      	movle	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f083 0301 	eor.w	r3, r3, #1
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8082 	beq.w	8003cdc <Update_pid+0x2ee>
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003bde:	edd7 7a04 	vldr	s15, [r7, #16]
 8003be2:	eef1 7a67 	vneg.f32	s15, s15
 8003be6:	ee17 3a90 	vmov	r3, s15
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fc fc78 	bl	80004e0 <__aeabi_f2d>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	460e      	mov	r6, r1
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	f7fc ff44 	bl	8000a88 <__aeabi_dcmple>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <Update_pid+0x21c>
 8003c06:	2300      	movs	r3, #0
 8003c08:	461e      	mov	r6, r3
 8003c0a:	b2f3      	uxtb	r3, r6
 8003c0c:	f083 0301 	eor.w	r3, r3, #1
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10e      	bne.n	8003c34 <Update_pid+0x246>
 8003c16:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c22:	bf4c      	ite	mi
 8003c24:	2301      	movmi	r3, #1
 8003c26:	2300      	movpl	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f083 0301 	eor.w	r3, r3, #1
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d053      	beq.n	8003cdc <Update_pid+0x2ee>
			pid -> y_n =	pid -> y_n_1
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
							+ ((pid -> kp_down + pid -> ki_down + pid -> kd_down) * e_n)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c54:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5c:	ee17 0a90 	vmov	r0, s15
 8003c60:	f7fc fc3e 	bl	80004e0 <__aeabi_f2d>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fc fada 	bl	8000224 <__adddf3>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
							- ((pid -> kp_down + (2 * pid -> kd_down)) * pid -> e_n_1)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c8c:	ee17 0a90 	vmov	r0, s15
 8003c90:	f7fc fc26 	bl	80004e0 <__aeabi_f2d>
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003c9a:	f7fc fc79 	bl	8000590 <__aeabi_dmul>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	f7fc fabb 	bl	8000220 <__aeabi_dsub>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4614      	mov	r4, r2
 8003cb0:	461d      	mov	r5, r3
							+ (pid -> kd_down * pid -> e_n_2);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fc fc12 	bl	80004e0 <__aeabi_f2d>
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003cc2:	f7fc fc65 	bl	8000590 <__aeabi_dmul>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4620      	mov	r0, r4
 8003ccc:	4629      	mov	r1, r5
 8003cce:	f7fc faa9 	bl	8000224 <__adddf3>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
			pid -> y_n =	pid -> y_n_1
 8003cd6:	6979      	ldr	r1, [r7, #20]
 8003cd8:	e9c1 2306 	strd	r2, r3, [r1, #24]
		}
	}

	if(pid -> y_n >= pid_sat){
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003ce2:	6938      	ldr	r0, [r7, #16]
 8003ce4:	f7fc fbfc 	bl	80004e0 <__aeabi_f2d>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4620      	mov	r0, r4
 8003cee:	4629      	mov	r1, r5
 8003cf0:	f7fc fed4 	bl	8000a9c <__aeabi_dcmpge>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <Update_pid+0x31e>
		pid -> y_n = pid_sat;
 8003cfa:	6938      	ldr	r0, [r7, #16]
 8003cfc:	f7fc fbf0 	bl	80004e0 <__aeabi_f2d>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	6979      	ldr	r1, [r7, #20]
 8003d06:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8003d0a:	e022      	b.n	8003d52 <Update_pid+0x364>

	}else if(pid -> y_n < -pid_sat){
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003d12:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d16:	eef1 7a67 	vneg.f32	s15, s15
 8003d1a:	ee17 3a90 	vmov	r3, s15
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fc fbde 	bl	80004e0 <__aeabi_f2d>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4620      	mov	r0, r4
 8003d2a:	4629      	mov	r1, r5
 8003d2c:	f7fc fea2 	bl	8000a74 <__aeabi_dcmplt>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00d      	beq.n	8003d52 <Update_pid+0x364>
		pid -> y_n = -pid_sat;
 8003d36:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d3a:	eef1 7a67 	vneg.f32	s15, s15
 8003d3e:	ee17 3a90 	vmov	r3, s15
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fc fbcc 	bl	80004e0 <__aeabi_f2d>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	6979      	ldr	r1, [r7, #20]
 8003d4e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}

	pid -> e_n_2 = pid -> e_n_1;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003d58:	6979      	ldr	r1, [r7, #20]
 8003d5a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	pid -> e_n_1 = pid -> e_n;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003d64:	6979      	ldr	r1, [r7, #20]
 8003d66:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	pid -> y_n_1 = pid -> y_n;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d70:	6979      	ldr	r1, [r7, #20]
 8003d72:	e9c1 2308 	strd	r2, r3, [r1, #32]

	return pid -> y_n;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d7c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003d80:	eeb0 0a47 	vmov.f32	s0, s14
 8003d84:	eef0 0a67 	vmov.f32	s1, s15
 8003d88:	3724      	adds	r7, #36	@ 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003d90 <Reset_pid>:
void Reset_pid(PID* pid){
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	pid -> y_n = 0.0;
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pid -> y_n_1 = 0.0;
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid -> e_n = 0.0;
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	pid -> e_n_1 = 0.0;
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	pid -> e_n_2 = 0.0;
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 8003dea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dee:	b08b      	sub	sp, #44	@ 0x2c
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6278      	str	r0, [r7, #36]	@ 0x24
 8003df4:	61fa      	str	r2, [r7, #28]
 8003df6:	461a      	mov	r2, r3
 8003df8:	460b      	mov	r3, r1
 8003dfa:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 8003e00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d111      	bne.n	8003e2a <Update_pwm+0x40>
 8003e06:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003e08:	f7fc fb58 	bl	80004bc <__aeabi_i2d>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	613a      	str	r2, [r7, #16]
 8003e12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	681c      	ldr	r4, [r3, #0]
 8003e1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e20:	f7fc fe8e 	bl	8000b40 <__aeabi_d2uiz>
 8003e24:	4603      	mov	r3, r0
 8003e26:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e28:	e061      	b.n	8003eee <Update_pwm+0x104>
 8003e2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d111      	bne.n	8003e54 <Update_pwm+0x6a>
 8003e30:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003e32:	f7fc fb43 	bl	80004bc <__aeabi_i2d>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	60ba      	str	r2, [r7, #8]
 8003e3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	681c      	ldr	r4, [r3, #0]
 8003e46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e4a:	f7fc fe79 	bl	8000b40 <__aeabi_d2uiz>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003e52:	e04c      	b.n	8003eee <Update_pwm+0x104>
 8003e54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d111      	bne.n	8003e7e <Update_pwm+0x94>
 8003e5a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003e5c:	f7fc fb2e 	bl	80004bc <__aeabi_i2d>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	603a      	str	r2, [r7, #0]
 8003e66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e6a:	607b      	str	r3, [r7, #4]
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6e:	681c      	ldr	r4, [r3, #0]
 8003e70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e74:	f7fc fe64 	bl	8000b40 <__aeabi_d2uiz>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8003e7c:	e037      	b.n	8003eee <Update_pwm+0x104>
 8003e7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e80:	2b0c      	cmp	r3, #12
 8003e82:	d110      	bne.n	8003ea6 <Update_pwm+0xbc>
 8003e84:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003e86:	f7fc fb19 	bl	80004bc <__aeabi_i2d>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4615      	mov	r5, r2
 8003e90:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	681c      	ldr	r4, [r3, #0]
 8003e98:	4628      	mov	r0, r5
 8003e9a:	4631      	mov	r1, r6
 8003e9c:	f7fc fe50 	bl	8000b40 <__aeabi_d2uiz>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	6423      	str	r3, [r4, #64]	@ 0x40
 8003ea4:	e023      	b.n	8003eee <Update_pwm+0x104>
 8003ea6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d110      	bne.n	8003ece <Update_pwm+0xe4>
 8003eac:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003eae:	f7fc fb05 	bl	80004bc <__aeabi_i2d>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4692      	mov	sl, r2
 8003eb8:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	681c      	ldr	r4, [r3, #0]
 8003ec0:	4650      	mov	r0, sl
 8003ec2:	4659      	mov	r1, fp
 8003ec4:	f7fc fe3c 	bl	8000b40 <__aeabi_d2uiz>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003ecc:	e00f      	b.n	8003eee <Update_pwm+0x104>
 8003ece:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003ed0:	f7fc faf4 	bl	80004bc <__aeabi_i2d>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4690      	mov	r8, r2
 8003eda:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	681c      	ldr	r4, [r3, #0]
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	f7fc fe2b 	bl	8000b40 <__aeabi_d2uiz>
 8003eea:	4603      	mov	r3, r0
 8003eec:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 8003eee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	da06      	bge.n	8003f02 <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 8003ef4:	8c3b      	ldrh	r3, [r7, #32]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	4619      	mov	r1, r3
 8003efa:	69f8      	ldr	r0, [r7, #28]
 8003efc:	f003 fc7e 	bl	80077fc <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 8003f00:	e005      	b.n	8003f0e <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 8003f02:	8c3b      	ldrh	r3, [r7, #32]
 8003f04:	2201      	movs	r2, #1
 8003f06:	4619      	mov	r1, r3
 8003f08:	69f8      	ldr	r0, [r7, #28]
 8003f0a:	f003 fc77 	bl	80077fc <HAL_GPIO_WritePin>
}
 8003f0e:	bf00      	nop
 8003f10:	372c      	adds	r7, #44	@ 0x2c
 8003f12:	46bd      	mov	sp, r7
 8003f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003f18 <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8003f4a:	68f9      	ldr	r1, [r7, #12]
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8003f58:	68f9      	ldr	r1, [r7, #12]
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	qei -> rev = 0.0;
 8003f66:	68f9      	ldr	r1, [r7, #12]
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	e9c1 2308 	strd	r2, r3, [r1, #32]
	qei -> mm = 0.0;
 8003f74:	68f9      	ldr	r1, [r7, #12]
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> pps = 0.0;
 8003f82:	68f9      	ldr	r1, [r7, #12]
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	qei -> rpm = 0.0;
 8003f90:	68f9      	ldr	r1, [r7, #12]
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	qei -> radps = 0.0;
 8003f9e:	68f9      	ldr	r1, [r7, #12]
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	qei -> mmps = 0.0;
 8003fac:	68f9      	ldr	r1, [r7, #12]
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	qei -> radpss = 0.0;
 8003fba:	68f9      	ldr	r1, [r7, #12]
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	qei -> rpms = 0.0;
 8003fc8:	68f9      	ldr	r1, [r7, #12]
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	qei -> mmpss = 0.0;
 8003fd6:	68f9      	ldr	r1, [r7, #12]
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	qei -> velocity_value[NEW] = 0;
 8003fe4:	68f9      	ldr	r1, [r7, #12]
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	qei -> velocity_value[OLD] = 0;
 8003ff2:	68f9      	ldr	r1, [r7, #12]
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60

}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	0000      	movs	r0, r0
	...

08004010 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 8004010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	461a      	mov	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	0fd9      	lsrs	r1, r3, #31
 8004040:	440b      	add	r3, r1
 8004042:	105b      	asrs	r3, r3, #1
 8004044:	429a      	cmp	r2, r3
 8004046:	dd06      	ble.n	8004056 <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	1ad2      	subs	r2, r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	425b      	negs	r3, r3
 8004060:	0fd9      	lsrs	r1, r3, #31
 8004062:	440b      	add	r3, r1
 8004064:	105b      	asrs	r3, r3, #1
 8004066:	429a      	cmp	r2, r3
 8004068:	da06      	bge.n	8004078 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	441a      	add	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	615a      	str	r2, [r3, #20]
	}

	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	6949      	ldr	r1, [r1, #20]
 8004082:	17c8      	asrs	r0, r1, #31
 8004084:	460c      	mov	r4, r1
 8004086:	4605      	mov	r5, r0
 8004088:	eb12 0804 	adds.w	r8, r2, r4
 800408c:	eb43 0905 	adc.w	r9, r3, r5
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	e9c3 8906 	strd	r8, r9, [r3, #24]
//	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
	qei -> mm += (double)qei -> diff_counter_value * 16.0 / (double)(qei -> ppr); // for lead 16 mm.
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fc fa0b 	bl	80004bc <__aeabi_i2d>
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	4b67      	ldr	r3, [pc, #412]	@ (8004248 <Update_qei+0x238>)
 80040ac:	f7fc fa70 	bl	8000590 <__aeabi_dmul>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4690      	mov	r8, r2
 80040b6:	4699      	mov	r9, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc f9fd 	bl	80004bc <__aeabi_i2d>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4640      	mov	r0, r8
 80040c8:	4649      	mov	r1, r9
 80040ca:	f7fc fb8b 	bl	80007e4 <__aeabi_ddiv>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4620      	mov	r0, r4
 80040d4:	4629      	mov	r1, r5
 80040d6:	f7fc f8a5 	bl	8000224 <__adddf3>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	// Update velocity at difference unit
	qei -> pps = qei -> diff_counter_value * (qei -> freq);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6852      	ldr	r2, [r2, #4]
 80040ec:	fb02 f303 	mul.w	r3, r2, r3
 80040f0:	17da      	asrs	r2, r3, #31
 80040f2:	469a      	mov	sl, r3
 80040f4:	4693      	mov	fp, r2
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
	qei -> radps = (double)(qei -> pps) * 2.0 * M_PI / (double)(qei -> ppr);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8004102:	4610      	mov	r0, r2
 8004104:	4619      	mov	r1, r3
 8004106:	f7fc fa15 	bl	8000534 <__aeabi_l2d>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	f7fc f889 	bl	8000224 <__adddf3>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4610      	mov	r0, r2
 8004118:	4619      	mov	r1, r3
 800411a:	a349      	add	r3, pc, #292	@ (adr r3, 8004240 <Update_qei+0x230>)
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	f7fc fa36 	bl	8000590 <__aeabi_dmul>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4614      	mov	r4, r2
 800412a:	461d      	mov	r5, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc f9c3 	bl	80004bc <__aeabi_i2d>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4620      	mov	r0, r4
 800413c:	4629      	mov	r1, r5
 800413e:	f7fc fb51 	bl	80007e4 <__aeabi_ddiv>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
//	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
	qei -> mmps = ((double)(qei -> pps) * 16.0) / (double)(qei -> ppr);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8004152:	4610      	mov	r0, r2
 8004154:	4619      	mov	r1, r3
 8004156:	f7fc f9ed 	bl	8000534 <__aeabi_l2d>
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	4b3a      	ldr	r3, [pc, #232]	@ (8004248 <Update_qei+0x238>)
 8004160:	f7fc fa16 	bl	8000590 <__aeabi_dmul>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4614      	mov	r4, r2
 800416a:	461d      	mov	r5, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f7fc f9a3 	bl	80004bc <__aeabi_i2d>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4620      	mov	r0, r4
 800417c:	4629      	mov	r1, r5
 800417e:	f7fc fb31 	bl	80007e4 <__aeabi_ddiv>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

	// Update acceleration
	qei -> velocity_value[NEW] = qei -> pps;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	f7fc f9cd 	bl	8000534 <__aeabi_l2d>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	qei -> diff_velocity_value = qei -> velocity_value[NEW] - qei -> velocity_value[OLD];
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80041b0:	f7fc f836 	bl	8000220 <__aeabi_dsub>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	qei -> ppss = qei -> diff_velocity_value * (double)(qei -> freq);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	@ 0x68
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fc f977 	bl	80004bc <__aeabi_i2d>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4620      	mov	r0, r4
 80041d4:	4629      	mov	r1, r5
 80041d6:	f7fc f9db 	bl	8000590 <__aeabi_dmul>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
//	qei -> radpss = qei -> ppss * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rpms = qei -> ppss * 60.0 / (float)(qei -> ppr);
	qei -> mmpss = qei -> ppss * 16.0 / (double)(qei -> ppr); // Acceleration in mm/s^2
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	4b16      	ldr	r3, [pc, #88]	@ (8004248 <Update_qei+0x238>)
 80041f0:	f7fc f9ce 	bl	8000590 <__aeabi_dmul>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4614      	mov	r4, r2
 80041fa:	461d      	mov	r5, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f7fc f95b 	bl	80004bc <__aeabi_i2d>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4620      	mov	r0, r4
 800420c:	4629      	mov	r1, r5
 800420e:	f7fc fae9 	bl	80007e4 <__aeabi_ddiv>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	611a      	str	r2, [r3, #16]
	qei -> velocity_value[OLD] = qei -> velocity_value[NEW];
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60

}
 8004230:	bf00      	nop
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800423a:	bf00      	nop
 800423c:	f3af 8000 	nop.w
 8004240:	54442d18 	.word	0x54442d18
 8004244:	400921fb 	.word	0x400921fb
 8004248:	40300000 	.word	0x40300000

0800424c <Reset_qei>:

void Reset_qei(QEI* qei, TIM_HandleTypeDef* htim){
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
	qei -> counter_value[NEW] = 0;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	qei -> rev = 0.0;
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	qei -> mm = 0.0;
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> pps = 0.0;
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	qei -> rpm = 0.0;
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	qei -> radps = 0.0;
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	qei -> mmps = 0.0;
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	qei -> ppss = 0;
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	qei -> rpms = 0.0;
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	qei -> radpss = 0.0;
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	qei -> mmpss = 0.0;
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	qei -> velocity_value[NEW] = 0;
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	qei -> velocity_value[OLD] = 0;
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	qei -> diff_velocity_value = 0;
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	HAL_TIM_Encoder_Stop(htim, TIM_CHANNEL_ALL);
 800433a:	213c      	movs	r1, #60	@ 0x3c
 800433c:	6838      	ldr	r0, [r7, #0]
 800433e:	f004 ffc1 	bl	80092c4 <HAL_TIM_Encoder_Stop>
	__HAL_TIM_SET_COUNTER(htim, 0);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2200      	movs	r2, #0
 8004348:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 800434a:	213c      	movs	r1, #60	@ 0x3c
 800434c:	6838      	ldr	r0, [r7, #0]
 800434e:	f004 ff2b 	bl	80091a8 <HAL_TIM_Encoder_Start>
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <Get_mmps>:

double Get_mmps(QEI* qei){
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
	return qei -> mmps;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8004368:	ec43 2b17 	vmov	d7, r2, r3
}
 800436c:	eeb0 0a47 	vmov.f32	s0, s14
 8004370:	eef0 0a67 	vmov.f32	s1, s15
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <point_init>:
 *  Created on: May 3, 2024
 *      Author: naker
 */
#include "state.h"

void point_init(POINT* point){
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
	point -> goal = 0.0;
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <homing_init>:



void homing_init(HOME* home){
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	home -> homing_command = 0;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	709a      	strb	r2, [r3, #2]
	home -> homing_state[0] = 0;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
	home -> homing_state[1] = 0;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	705a      	strb	r2, [r3, #1]
	home -> is_home = 0;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	70da      	strb	r2, [r3, #3]
	home -> homing_first = 0;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	711a      	strb	r2, [r3, #4]
	home -> homing_sec = 0;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	715a      	strb	r2, [r3, #5]
	home -> homing_ts = 0;
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	home -> pwm = 0;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	821a      	strh	r2, [r3, #16]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <homing>:
void homing(HOME* home, GPIO_TypeDef* GPIO_Prox, uint16_t GPIO_Pin_Prox)
{
 80043ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	4613      	mov	r3, r2
 80043fa:	80fb      	strh	r3, [r7, #6]
	// If we have homing command
	if(home -> homing_command == 1){
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	789b      	ldrb	r3, [r3, #2]
 8004400:	2b01      	cmp	r3, #1
 8004402:	f040 81ff 	bne.w	8004804 <homing+0x418>
		if(home -> homing_state[0] == 0){
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d125      	bne.n	800445a <homing+0x6e>
			// Homing state selection
			// Robot is not home but proximity is detecting
			if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && home -> is_home == 0){
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	4619      	mov	r1, r3
 8004412:	68b8      	ldr	r0, [r7, #8]
 8004414:	f003 f9da 	bl	80077cc <HAL_GPIO_ReadPin>
 8004418:	4603      	mov	r3, r0
 800441a:	2b01      	cmp	r3, #1
 800441c:	d107      	bne.n	800442e <homing+0x42>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	78db      	ldrb	r3, [r3, #3]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <homing+0x42>
				home -> homing_state[1] = 1;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	705a      	strb	r2, [r3, #1]
 800442c:	e00e      	b.n	800444c <homing+0x60>
			}
			// Robot is not home and proximity isn't detecting
			else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && home -> is_home == 0){
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	4619      	mov	r1, r3
 8004432:	68b8      	ldr	r0, [r7, #8]
 8004434:	f003 f9ca 	bl	80077cc <HAL_GPIO_ReadPin>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <homing+0x60>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	78db      	ldrb	r3, [r3, #3]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <homing+0x60>
				home -> homing_state[1] = 2;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2202      	movs	r2, #2
 800444a:	705a      	strb	r2, [r3, #1]
			}
			if(home -> homing_state[1] != 0){
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	785b      	ldrb	r3, [r3, #1]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <homing+0x6e>
				// Set homing state
				home -> homing_state[0] = 1;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2201      	movs	r2, #1
 8004458:	701a      	strb	r2, [r3, #0]
			}
		}
		if(home -> homing_state[0] == 1){
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	f040 81d1 	bne.w	8004806 <homing+0x41a>
			// Homing
			if(home -> homing_state[1] == 1){
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	2b01      	cmp	r3, #1
 800446a:	f040 80b0 	bne.w	80045ce <homing+0x1e2>
//				home -> state_check += 10;
				if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_first == 1 && home -> homing_sec == 1){
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	4619      	mov	r1, r3
 8004472:	68b8      	ldr	r0, [r7, #8]
 8004474:	f003 f9aa 	bl	80077cc <HAL_GPIO_ReadPin>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d12d      	bne.n	80044da <homing+0xee>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	791b      	ldrb	r3, [r3, #4]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d129      	bne.n	80044da <homing+0xee>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	795b      	ldrb	r3, [r3, #5]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d125      	bne.n	80044da <homing+0xee>
					if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0){
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	4619      	mov	r1, r3
 8004492:	68b8      	ldr	r0, [r7, #8]
 8004494:	f003 f99a 	bl	80077cc <HAL_GPIO_ReadPin>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	f040 808c 	bne.w	80045b8 <homing+0x1cc>
						// Check Proximity again
						home -> pwm = 0;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	821a      	strh	r2, [r3, #16]
						// Reset homing state and other
						home -> homing_ts = 0;
 80044a6:	68f9      	ldr	r1, [r7, #12]
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
						home -> homing_state[0] = 0;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	701a      	strb	r2, [r3, #0]
						home -> homing_state[1] = 0;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	705a      	strb	r2, [r3, #1]
						home -> homing_command = 0;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	709a      	strb	r2, [r3, #2]
						home -> homing_first = 0;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	711a      	strb	r2, [r3, #4]
						home -> homing_sec = 0;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	715a      	strb	r2, [r3, #5]
						home -> is_home = 1;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	70da      	strb	r2, [r3, #3]
						return;
 80044d8:	e195      	b.n	8004806 <homing+0x41a>
					}
				}
				else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1 && home -> homing_first == 1 && home -> homing_sec == 0 && home -> homing_ts >= 1500){
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	4619      	mov	r1, r3
 80044de:	68b8      	ldr	r0, [r7, #8]
 80044e0:	f003 f974 	bl	80077cc <HAL_GPIO_ReadPin>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d118      	bne.n	800451c <homing+0x130>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	791b      	ldrb	r3, [r3, #4]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d114      	bne.n	800451c <homing+0x130>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	795b      	ldrb	r3, [r3, #5]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d110      	bne.n	800451c <homing+0x130>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004500:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8004504:	428a      	cmp	r2, r1
 8004506:	f173 0300 	sbcs.w	r3, r3, #0
 800450a:	d307      	bcc.n	800451c <homing+0x130>
					// Stop when proximity was detected
					home -> pwm = 14000;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 8004512:	821a      	strh	r2, [r3, #16]
					home -> homing_sec = 1;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	715a      	strb	r2, [r3, #5]
 800451a:	e04d      	b.n	80045b8 <homing+0x1cc>
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1 && home -> homing_first == 0 && home -> homing_ts >= 0 && home -> homing_ts < 1000){
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	4619      	mov	r1, r3
 8004520:	68b8      	ldr	r0, [r7, #8]
 8004522:	f003 f953 	bl	80077cc <HAL_GPIO_ReadPin>
 8004526:	4603      	mov	r3, r0
 8004528:	2b01      	cmp	r3, #1
 800452a:	d113      	bne.n	8004554 <homing+0x168>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	791b      	ldrb	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10f      	bne.n	8004554 <homing+0x168>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800453a:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 800453e:	f173 0300 	sbcs.w	r3, r3, #0
 8004542:	d207      	bcs.n	8004554 <homing+0x168>
					// Move upper
					home -> pwm = 14000;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 800454a:	821a      	strh	r2, [r3, #16]
					home -> homing_first = 1;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	711a      	strb	r2, [r3, #4]
 8004552:	e031      	b.n	80045b8 <homing+0x1cc>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 200);
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_ts >= 1000 && home -> homing_ts < 1500){ // wait 1.0 secs
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	4619      	mov	r1, r3
 8004558:	68b8      	ldr	r0, [r7, #8]
 800455a:	f003 f937 	bl	80077cc <HAL_GPIO_ReadPin>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d114      	bne.n	800458e <homing+0x1a2>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800456a:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 800456e:	f173 0300 	sbcs.w	r3, r3, #0
 8004572:	d30c      	bcc.n	800458e <homing+0x1a2>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800457a:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800457e:	428a      	cmp	r2, r1
 8004580:	f173 0300 	sbcs.w	r3, r3, #0
 8004584:	d203      	bcs.n	800458e <homing+0x1a2>
					// Stop
					home -> pwm = 0;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	821a      	strh	r2, [r3, #16]
 800458c:	e014      	b.n	80045b8 <homing+0x1cc>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_ts >= 1500){ // wait 1.25 secs
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	4619      	mov	r1, r3
 8004592:	68b8      	ldr	r0, [r7, #8]
 8004594:	f003 f91a 	bl	80077cc <HAL_GPIO_ReadPin>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10c      	bne.n	80045b8 <homing+0x1cc>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80045a4:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80045a8:	428a      	cmp	r2, r1
 80045aa:	f173 0300 	sbcs.w	r3, r3, #0
 80045ae:	d303      	bcc.n	80045b8 <homing+0x1cc>
					// Move lower
					home -> pwm = -6000;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f64e 0290 	movw	r2, #59536	@ 0xe890
 80045b6:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -120);
				}
				home -> homing_ts++;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80045be:	f112 0801 	adds.w	r8, r2, #1
 80045c2:	f143 0900 	adc.w	r9, r3, #0
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80045cc:	e11b      	b.n	8004806 <homing+0x41a>
			}
			else if(home -> homing_state[1] == 2){
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	785b      	ldrb	r3, [r3, #1]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	f040 8117 	bne.w	8004806 <homing+0x41a>
				if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_first == 1 && home -> homing_sec == 1){
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	4619      	mov	r1, r3
 80045dc:	68b8      	ldr	r0, [r7, #8]
 80045de:	f003 f8f5 	bl	80077cc <HAL_GPIO_ReadPin>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d12a      	bne.n	800463e <homing+0x252>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	791b      	ldrb	r3, [r3, #4]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d126      	bne.n	800463e <homing+0x252>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	795b      	ldrb	r3, [r3, #5]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d122      	bne.n	800463e <homing+0x252>
					if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0){
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	4619      	mov	r1, r3
 80045fc:	68b8      	ldr	r0, [r7, #8]
 80045fe:	f003 f8e5 	bl	80077cc <HAL_GPIO_ReadPin>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	f040 80f3 	bne.w	80047f0 <homing+0x404>
						// Check Proximity again
						home -> pwm = 0;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	821a      	strh	r2, [r3, #16]
						// Reset homing state and other
						home -> homing_ts = 0;
 8004610:	68f9      	ldr	r1, [r7, #12]
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	e9c1 2302 	strd	r2, r3, [r1, #8]
						home -> homing_state[0] = 0;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	701a      	strb	r2, [r3, #0]
						home -> homing_state[1] = 0;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	705a      	strb	r2, [r3, #1]
						home -> homing_command = 0;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	709a      	strb	r2, [r3, #2]
						home -> homing_first = 0;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	711a      	strb	r2, [r3, #4]
						home -> is_home = 1;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	70da      	strb	r2, [r3, #3]
						return;
 800463c:	e0e3      	b.n	8004806 <homing+0x41a>
					}
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 1) && (home -> homing_sec == 0)){
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	4619      	mov	r1, r3
 8004642:	68b8      	ldr	r0, [r7, #8]
 8004644:	f003 f8c2 	bl	80077cc <HAL_GPIO_ReadPin>
 8004648:	4603      	mov	r3, r0
 800464a:	2b01      	cmp	r3, #1
 800464c:	d130      	bne.n	80046b0 <homing+0x2c4>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	791b      	ldrb	r3, [r3, #4]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d12c      	bne.n	80046b0 <homing+0x2c4>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	795b      	ldrb	r3, [r3, #5]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d128      	bne.n	80046b0 <homing+0x2c4>
					// Stop when proximity was detected
					static uint8_t for_one = 1;
					if(home -> homing_sec == 0 && for_one == 1){
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	795b      	ldrb	r3, [r3, #5]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d110      	bne.n	8004688 <homing+0x29c>
 8004666:	4b6a      	ldr	r3, [pc, #424]	@ (8004810 <homing+0x424>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d10c      	bne.n	8004688 <homing+0x29c>
						home -> pwm = 0;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	821a      	strh	r2, [r3, #16]
						home -> homing_ts = 0;
 8004674:	68f9      	ldr	r1, [r7, #12]
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	e9c1 2302 	strd	r2, r3, [r1, #8]
						for_one = 0;
 8004682:	4b63      	ldr	r3, [pc, #396]	@ (8004810 <homing+0x424>)
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
					}
					if(home -> homing_ts >= 1000){
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800468e:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8004692:	f173 0300 	sbcs.w	r3, r3, #0
 8004696:	f0c0 80aa 	bcc.w	80047ee <homing+0x402>
						// Stop for 1 sec then move upper
						home -> pwm = 14000;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 80046a0:	821a      	strh	r2, [r3, #16]
						home -> homing_sec = 1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	715a      	strb	r2, [r3, #5]
						for_one = 1;
 80046a8:	4b59      	ldr	r3, [pc, #356]	@ (8004810 <homing+0x424>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	701a      	strb	r2, [r3, #0]
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 1) && (home -> homing_sec == 0)){
 80046ae:	e09e      	b.n	80047ee <homing+0x402>
					}
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 0) && (home -> homing_sec == 0)){
 80046b0:	88fb      	ldrh	r3, [r7, #6]
 80046b2:	4619      	mov	r1, r3
 80046b4:	68b8      	ldr	r0, [r7, #8]
 80046b6:	f003 f889 	bl	80077cc <HAL_GPIO_ReadPin>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d11c      	bne.n	80046fa <homing+0x30e>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	791b      	ldrb	r3, [r3, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d118      	bne.n	80046fa <homing+0x30e>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	795b      	ldrb	r3, [r3, #5]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d114      	bne.n	80046fa <homing+0x30e>
					// Stop when proximity was detected
					if(home -> homing_ts == 0){
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	d102      	bne.n	80046e0 <homing+0x2f4>
						home -> pwm = 0;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	821a      	strh	r2, [r3, #16]
					}
					if(home -> homing_ts >= 1000){ // stop 1 secs
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80046e6:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 80046ea:	f173 0300 	sbcs.w	r3, r3, #0
 80046ee:	d37f      	bcc.n	80047f0 <homing+0x404>
						 // Move upper
						home -> pwm = 14000;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 80046f6:	821a      	strh	r2, [r3, #16]
					if(home -> homing_ts >= 1000){ // stop 1 secs
 80046f8:	e07a      	b.n	80047f0 <homing+0x404>
					}
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 0) && (home -> homing_sec == 0) && (home -> homing_ts >= 1000)){
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	4619      	mov	r1, r3
 80046fe:	68b8      	ldr	r0, [r7, #8]
 8004700:	f003 f864 	bl	80077cc <HAL_GPIO_ReadPin>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d113      	bne.n	8004732 <homing+0x346>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	791b      	ldrb	r3, [r3, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10f      	bne.n	8004732 <homing+0x346>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	795b      	ldrb	r3, [r3, #5]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10b      	bne.n	8004732 <homing+0x346>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004720:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8004724:	f173 0300 	sbcs.w	r3, r3, #0
 8004728:	d303      	bcc.n	8004732 <homing+0x346>
					home -> homing_first = 1;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	711a      	strb	r2, [r3, #4]
 8004730:	e05e      	b.n	80047f0 <homing+0x404>
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1) && (home -> homing_sec == 0) && home -> homing_ts >= 1500 && home -> homing_ts < 2500){
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	4619      	mov	r1, r3
 8004736:	68b8      	ldr	r0, [r7, #8]
 8004738:	f003 f848 	bl	80077cc <HAL_GPIO_ReadPin>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d11d      	bne.n	800477e <homing+0x392>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	791b      	ldrb	r3, [r3, #4]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d119      	bne.n	800477e <homing+0x392>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	795b      	ldrb	r3, [r3, #5]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d115      	bne.n	800477e <homing+0x392>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004758:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800475c:	428a      	cmp	r2, r1
 800475e:	f173 0300 	sbcs.w	r3, r3, #0
 8004762:	d30c      	bcc.n	800477e <homing+0x392>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800476a:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 800476e:	428a      	cmp	r2, r1
 8004770:	f173 0300 	sbcs.w	r3, r3, #0
 8004774:	d203      	bcs.n	800477e <homing+0x392>
					// Move upper for 0.5 sec then stop
					home -> pwm = 0;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	821a      	strh	r2, [r3, #16]
 800477c:	e038      	b.n	80047f0 <homing+0x404>
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1) && (home -> homing_sec == 0) && home -> homing_ts >= 2500){ // wait 1.25 secs
 800477e:	88fb      	ldrh	r3, [r7, #6]
 8004780:	4619      	mov	r1, r3
 8004782:	68b8      	ldr	r0, [r7, #8]
 8004784:	f003 f822 	bl	80077cc <HAL_GPIO_ReadPin>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d115      	bne.n	80047ba <homing+0x3ce>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	791b      	ldrb	r3, [r3, #4]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d111      	bne.n	80047ba <homing+0x3ce>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	795b      	ldrb	r3, [r3, #5]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10d      	bne.n	80047ba <homing+0x3ce>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80047a4:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80047a8:	428a      	cmp	r2, r1
 80047aa:	f173 0300 	sbcs.w	r3, r3, #0
 80047ae:	d304      	bcc.n	80047ba <homing+0x3ce>
					// After stop for 1 sec Move lower
					home -> pwm = -6000;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f64e 0290 	movw	r2, #59536	@ 0xe890
 80047b6:	821a      	strh	r2, [r3, #16]
 80047b8:	e01a      	b.n	80047f0 <homing+0x404>
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 0) && (home -> homing_sec == 0) && home -> homing_ts == 0){
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	4619      	mov	r1, r3
 80047be:	68b8      	ldr	r0, [r7, #8]
 80047c0:	f003 f804 	bl	80077cc <HAL_GPIO_ReadPin>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d112      	bne.n	80047f0 <homing+0x404>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	791b      	ldrb	r3, [r3, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10e      	bne.n	80047f0 <homing+0x404>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	795b      	ldrb	r3, [r3, #5]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10a      	bne.n	80047f0 <homing+0x404>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	d105      	bne.n	80047f0 <homing+0x404>
					home -> pwm = -6000;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f64e 0290 	movw	r2, #59536	@ 0xe890
 80047ea:	821a      	strh	r2, [r3, #16]
					return;
 80047ec:	e00b      	b.n	8004806 <homing+0x41a>
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 1) && (home -> homing_sec == 0)){
 80047ee:	bf00      	nop
				}
				home -> homing_ts++;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80047f6:	1c54      	adds	r4, r2, #1
 80047f8:	f143 0500 	adc.w	r5, r3, #0
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	e9c3 4502 	strd	r4, r5, [r3, #8]
 8004802:	e000      	b.n	8004806 <homing+0x41a>
			}
		}
	}
	// Nothing happen
	else{
		return;
 8004804:	bf00      	nop
	}
}
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800480e:	bf00      	nop
 8004810:	20000260 	.word	0x20000260

08004814 <Reset_homing>:
void Reset_homing(HOME* home){
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
	home -> homing_state[0] = 0;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
	home -> homing_state[1] = 0;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	705a      	strb	r2, [r3, #1]
	home -> homing_command = 0;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	709a      	strb	r2, [r3, #2]
	home -> homing_first = 0;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	711a      	strb	r2, [r3, #4]
	home -> homing_sec = 0;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	715a      	strb	r2, [r3, #5]
	home -> homing_ts = 0;
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9c1 2302 	strd	r2, r3, [r1, #8]
	home -> is_home = 0;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	70da      	strb	r2, [r3, #3]
	home -> pwm = 0;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	821a      	strh	r2, [r3, #16]
	home -> state_check = 0;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	719a      	strb	r2, [r3, #6]
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <emer_init>:

void emer_init(EMER* emer){
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
	emer -> emer_state = 0;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004886:	4b0f      	ldr	r3, [pc, #60]	@ (80048c4 <HAL_MspInit+0x44>)
 8004888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800488a:	4a0e      	ldr	r2, [pc, #56]	@ (80048c4 <HAL_MspInit+0x44>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	6613      	str	r3, [r2, #96]	@ 0x60
 8004892:	4b0c      	ldr	r3, [pc, #48]	@ (80048c4 <HAL_MspInit+0x44>)
 8004894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	607b      	str	r3, [r7, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800489e:	4b09      	ldr	r3, [pc, #36]	@ (80048c4 <HAL_MspInit+0x44>)
 80048a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a2:	4a08      	ldr	r2, [pc, #32]	@ (80048c4 <HAL_MspInit+0x44>)
 80048a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80048aa:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <HAL_MspInit+0x44>)
 80048ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80048b6:	f003 f875 	bl	80079a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000

080048c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b09e      	sub	sp, #120	@ 0x78
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048e0:	f107 0310 	add.w	r3, r7, #16
 80048e4:	2254      	movs	r2, #84	@ 0x54
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f008 f88b 	bl	800ca04 <memset>
  if(hadc->Instance==ADC1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048f6:	d167      	bne.n	80049c8 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80048f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80048fe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004902:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004904:	f107 0310 	add.w	r3, r7, #16
 8004908:	4618      	mov	r0, r3
 800490a:	f003 fd89 	bl	8008420 <HAL_RCCEx_PeriphCLKConfig>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004914:	f7ff f81a 	bl	800394c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004918:	4b2d      	ldr	r3, [pc, #180]	@ (80049d0 <HAL_ADC_MspInit+0x108>)
 800491a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491c:	4a2c      	ldr	r2, [pc, #176]	@ (80049d0 <HAL_ADC_MspInit+0x108>)
 800491e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004922:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004924:	4b2a      	ldr	r3, [pc, #168]	@ (80049d0 <HAL_ADC_MspInit+0x108>)
 8004926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004930:	4b27      	ldr	r3, [pc, #156]	@ (80049d0 <HAL_ADC_MspInit+0x108>)
 8004932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004934:	4a26      	ldr	r2, [pc, #152]	@ (80049d0 <HAL_ADC_MspInit+0x108>)
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800493c:	4b24      	ldr	r3, [pc, #144]	@ (80049d0 <HAL_ADC_MspInit+0x108>)
 800493e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 8004948:	2301      	movs	r3, #1
 800494a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800494c:	2303      	movs	r3, #3
 800494e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004950:	2300      	movs	r3, #0
 8004952:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8004954:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004958:	4619      	mov	r1, r3
 800495a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800495e:	f002 fdb3 	bl	80074c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004962:	4b1c      	ldr	r3, [pc, #112]	@ (80049d4 <HAL_ADC_MspInit+0x10c>)
 8004964:	4a1c      	ldr	r2, [pc, #112]	@ (80049d8 <HAL_ADC_MspInit+0x110>)
 8004966:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004968:	4b1a      	ldr	r3, [pc, #104]	@ (80049d4 <HAL_ADC_MspInit+0x10c>)
 800496a:	2205      	movs	r2, #5
 800496c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800496e:	4b19      	ldr	r3, [pc, #100]	@ (80049d4 <HAL_ADC_MspInit+0x10c>)
 8004970:	2200      	movs	r2, #0
 8004972:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004974:	4b17      	ldr	r3, [pc, #92]	@ (80049d4 <HAL_ADC_MspInit+0x10c>)
 8004976:	2200      	movs	r2, #0
 8004978:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800497a:	4b16      	ldr	r3, [pc, #88]	@ (80049d4 <HAL_ADC_MspInit+0x10c>)
 800497c:	2280      	movs	r2, #128	@ 0x80
 800497e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004980:	4b14      	ldr	r3, [pc, #80]	@ (80049d4 <HAL_ADC_MspInit+0x10c>)
 8004982:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004986:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004988:	4b12      	ldr	r3, [pc, #72]	@ (80049d4 <HAL_ADC_MspInit+0x10c>)
 800498a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800498e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004990:	4b10      	ldr	r3, [pc, #64]	@ (80049d4 <HAL_ADC_MspInit+0x10c>)
 8004992:	2220      	movs	r2, #32
 8004994:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004996:	4b0f      	ldr	r3, [pc, #60]	@ (80049d4 <HAL_ADC_MspInit+0x10c>)
 8004998:	2200      	movs	r2, #0
 800499a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800499c:	480d      	ldr	r0, [pc, #52]	@ (80049d4 <HAL_ADC_MspInit+0x10c>)
 800499e:	f002 fa61 	bl	8006e64 <HAL_DMA_Init>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80049a8:	f7fe ffd0 	bl	800394c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a09      	ldr	r2, [pc, #36]	@ (80049d4 <HAL_ADC_MspInit+0x10c>)
 80049b0:	655a      	str	r2, [r3, #84]	@ 0x54
 80049b2:	4a08      	ldr	r2, [pc, #32]	@ (80049d4 <HAL_ADC_MspInit+0x10c>)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80049b8:	2200      	movs	r2, #0
 80049ba:	2100      	movs	r1, #0
 80049bc:	2012      	movs	r0, #18
 80049be:	f002 fa1c 	bl	8006dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80049c2:	2012      	movs	r0, #18
 80049c4:	f002 fa33 	bl	8006e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80049c8:	bf00      	nop
 80049ca:	3778      	adds	r7, #120	@ 0x78
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40021000 	.word	0x40021000
 80049d4:	20000858 	.word	0x20000858
 80049d8:	40020008 	.word	0x40020008

080049dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a3c      	ldr	r2, [pc, #240]	@ (8004adc <HAL_TIM_Base_MspInit+0x100>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d13f      	bne.n	8004a6e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049ee:	4b3c      	ldr	r3, [pc, #240]	@ (8004ae0 <HAL_TIM_Base_MspInit+0x104>)
 80049f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f2:	4a3b      	ldr	r2, [pc, #236]	@ (8004ae0 <HAL_TIM_Base_MspInit+0x104>)
 80049f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80049f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80049fa:	4b39      	ldr	r3, [pc, #228]	@ (8004ae0 <HAL_TIM_Base_MspInit+0x104>)
 80049fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel4;
 8004a06:	4b37      	ldr	r3, [pc, #220]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x108>)
 8004a08:	4a37      	ldr	r2, [pc, #220]	@ (8004ae8 <HAL_TIM_Base_MspInit+0x10c>)
 8004a0a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8004a0c:	4b35      	ldr	r3, [pc, #212]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x108>)
 8004a0e:	222a      	movs	r2, #42	@ 0x2a
 8004a10:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a12:	4b34      	ldr	r3, [pc, #208]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x108>)
 8004a14:	2210      	movs	r2, #16
 8004a16:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a18:	4b32      	ldr	r3, [pc, #200]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x108>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004a1e:	4b31      	ldr	r3, [pc, #196]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x108>)
 8004a20:	2280      	movs	r2, #128	@ 0x80
 8004a22:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a24:	4b2f      	ldr	r3, [pc, #188]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x108>)
 8004a26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a2a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x108>)
 8004a2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a32:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8004a34:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x108>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x108>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8004a40:	4828      	ldr	r0, [pc, #160]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x108>)
 8004a42:	f002 fa0f 	bl	8006e64 <HAL_DMA_Init>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8004a4c:	f7fe ff7e 	bl	800394c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a24      	ldr	r2, [pc, #144]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x108>)
 8004a54:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a56:	4a23      	ldr	r2, [pc, #140]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x108>)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2100      	movs	r1, #0
 8004a60:	2019      	movs	r0, #25
 8004a62:	f002 f9ca 	bl	8006dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004a66:	2019      	movs	r0, #25
 8004a68:	f002 f9e1 	bl	8006e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004a6c:	e032      	b.n	8004ad4 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM3)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1e      	ldr	r2, [pc, #120]	@ (8004aec <HAL_TIM_Base_MspInit+0x110>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d114      	bne.n	8004aa2 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a78:	4b19      	ldr	r3, [pc, #100]	@ (8004ae0 <HAL_TIM_Base_MspInit+0x104>)
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a7c:	4a18      	ldr	r2, [pc, #96]	@ (8004ae0 <HAL_TIM_Base_MspInit+0x104>)
 8004a7e:	f043 0302 	orr.w	r3, r3, #2
 8004a82:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a84:	4b16      	ldr	r3, [pc, #88]	@ (8004ae0 <HAL_TIM_Base_MspInit+0x104>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004a90:	2200      	movs	r2, #0
 8004a92:	2100      	movs	r1, #0
 8004a94:	201d      	movs	r0, #29
 8004a96:	f002 f9b0 	bl	8006dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a9a:	201d      	movs	r0, #29
 8004a9c:	f002 f9c7 	bl	8006e2e <HAL_NVIC_EnableIRQ>
}
 8004aa0:	e018      	b.n	8004ad4 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM16)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a12      	ldr	r2, [pc, #72]	@ (8004af0 <HAL_TIM_Base_MspInit+0x114>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d113      	bne.n	8004ad4 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004aac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae0 <HAL_TIM_Base_MspInit+0x104>)
 8004aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8004ae0 <HAL_TIM_Base_MspInit+0x104>)
 8004ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ab6:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ab8:	4b09      	ldr	r3, [pc, #36]	@ (8004ae0 <HAL_TIM_Base_MspInit+0x104>)
 8004aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	2019      	movs	r0, #25
 8004aca:	f002 f996 	bl	8006dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004ace:	2019      	movs	r0, #25
 8004ad0:	f002 f9ad 	bl	8006e2e <HAL_NVIC_EnableIRQ>
}
 8004ad4:	bf00      	nop
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	20000be8 	.word	0x20000be8
 8004ae8:	40020044 	.word	0x40020044
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40014400 	.word	0x40014400

08004af4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	@ 0x28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004afc:	f107 0314 	add.w	r3, r7, #20
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	609a      	str	r2, [r3, #8]
 8004b08:	60da      	str	r2, [r3, #12]
 8004b0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1c      	ldr	r2, [pc, #112]	@ (8004b84 <HAL_TIM_Encoder_MspInit+0x90>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d131      	bne.n	8004b7a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b16:	4b1c      	ldr	r3, [pc, #112]	@ (8004b88 <HAL_TIM_Encoder_MspInit+0x94>)
 8004b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004b88 <HAL_TIM_Encoder_MspInit+0x94>)
 8004b1c:	f043 0304 	orr.w	r3, r3, #4
 8004b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b22:	4b19      	ldr	r3, [pc, #100]	@ (8004b88 <HAL_TIM_Encoder_MspInit+0x94>)
 8004b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b2e:	4b16      	ldr	r3, [pc, #88]	@ (8004b88 <HAL_TIM_Encoder_MspInit+0x94>)
 8004b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b32:	4a15      	ldr	r2, [pc, #84]	@ (8004b88 <HAL_TIM_Encoder_MspInit+0x94>)
 8004b34:	f043 0301 	orr.w	r3, r3, #1
 8004b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b3a:	4b13      	ldr	r3, [pc, #76]	@ (8004b88 <HAL_TIM_Encoder_MspInit+0x94>)
 8004b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8004b46:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b50:	2300      	movs	r3, #0
 8004b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b54:	2300      	movs	r3, #0
 8004b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004b58:	230a      	movs	r3, #10
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b5c:	f107 0314 	add.w	r3, r7, #20
 8004b60:	4619      	mov	r1, r3
 8004b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b66:	f002 fcaf 	bl	80074c8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	201e      	movs	r0, #30
 8004b70:	f002 f943 	bl	8006dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004b74:	201e      	movs	r0, #30
 8004b76:	f002 f95a 	bl	8006e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004b7a:	bf00      	nop
 8004b7c:	3728      	adds	r7, #40	@ 0x28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40000800 	.word	0x40000800
 8004b88:	40021000 	.word	0x40021000

08004b8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b94:	f107 030c 	add.w	r3, r7, #12
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a11      	ldr	r2, [pc, #68]	@ (8004bf0 <HAL_TIM_MspPostInit+0x64>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d11b      	bne.n	8004be6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bae:	4b11      	ldr	r3, [pc, #68]	@ (8004bf4 <HAL_TIM_MspPostInit+0x68>)
 8004bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb2:	4a10      	ldr	r2, [pc, #64]	@ (8004bf4 <HAL_TIM_MspPostInit+0x68>)
 8004bb4:	f043 0304 	orr.w	r3, r3, #4
 8004bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bba:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf4 <HAL_TIM_MspPostInit+0x68>)
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bca:	2302      	movs	r3, #2
 8004bcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 8004bda:	f107 030c 	add.w	r3, r7, #12
 8004bde:	4619      	mov	r1, r3
 8004be0:	4805      	ldr	r0, [pc, #20]	@ (8004bf8 <HAL_TIM_MspPostInit+0x6c>)
 8004be2:	f002 fc71 	bl	80074c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004be6:	bf00      	nop
 8004be8:	3720      	adds	r7, #32
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	48000800 	.word	0x48000800

08004bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b09e      	sub	sp, #120	@ 0x78
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c04:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	605a      	str	r2, [r3, #4]
 8004c0e:	609a      	str	r2, [r3, #8]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c14:	f107 0310 	add.w	r3, r7, #16
 8004c18:	2254      	movs	r2, #84	@ 0x54
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f007 fef1 	bl	800ca04 <memset>
  if(huart->Instance==USART2)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a4d      	ldr	r2, [pc, #308]	@ (8004d5c <HAL_UART_MspInit+0x160>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	f040 8092 	bne.w	8004d52 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c36:	f107 0310 	add.w	r3, r7, #16
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f003 fbf0 	bl	8008420 <HAL_RCCEx_PeriphCLKConfig>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004c46:	f7fe fe81 	bl	800394c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c4a:	4b45      	ldr	r3, [pc, #276]	@ (8004d60 <HAL_UART_MspInit+0x164>)
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4e:	4a44      	ldr	r2, [pc, #272]	@ (8004d60 <HAL_UART_MspInit+0x164>)
 8004c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c56:	4b42      	ldr	r3, [pc, #264]	@ (8004d60 <HAL_UART_MspInit+0x164>)
 8004c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c62:	4b3f      	ldr	r3, [pc, #252]	@ (8004d60 <HAL_UART_MspInit+0x164>)
 8004c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c66:	4a3e      	ldr	r2, [pc, #248]	@ (8004d60 <HAL_UART_MspInit+0x164>)
 8004c68:	f043 0301 	orr.w	r3, r3, #1
 8004c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d60 <HAL_UART_MspInit+0x164>)
 8004c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004c7a:	230c      	movs	r3, #12
 8004c7c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7e:	2302      	movs	r3, #2
 8004c80:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c86:	2300      	movs	r3, #0
 8004c88:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c8a:	2307      	movs	r3, #7
 8004c8c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004c92:	4619      	mov	r1, r3
 8004c94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c98:	f002 fc16 	bl	80074c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8004c9c:	4b31      	ldr	r3, [pc, #196]	@ (8004d64 <HAL_UART_MspInit+0x168>)
 8004c9e:	4a32      	ldr	r2, [pc, #200]	@ (8004d68 <HAL_UART_MspInit+0x16c>)
 8004ca0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004ca2:	4b30      	ldr	r3, [pc, #192]	@ (8004d64 <HAL_UART_MspInit+0x168>)
 8004ca4:	221a      	movs	r2, #26
 8004ca6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8004d64 <HAL_UART_MspInit+0x168>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cae:	4b2d      	ldr	r3, [pc, #180]	@ (8004d64 <HAL_UART_MspInit+0x168>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8004d64 <HAL_UART_MspInit+0x168>)
 8004cb6:	2280      	movs	r2, #128	@ 0x80
 8004cb8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cba:	4b2a      	ldr	r3, [pc, #168]	@ (8004d64 <HAL_UART_MspInit+0x168>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cc0:	4b28      	ldr	r3, [pc, #160]	@ (8004d64 <HAL_UART_MspInit+0x168>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004cc6:	4b27      	ldr	r3, [pc, #156]	@ (8004d64 <HAL_UART_MspInit+0x168>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ccc:	4b25      	ldr	r3, [pc, #148]	@ (8004d64 <HAL_UART_MspInit+0x168>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004cd2:	4824      	ldr	r0, [pc, #144]	@ (8004d64 <HAL_UART_MspInit+0x168>)
 8004cd4:	f002 f8c6 	bl	8006e64 <HAL_DMA_Init>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004cde:	f7fe fe35 	bl	800394c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d64 <HAL_UART_MspInit+0x168>)
 8004ce6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004cea:	4a1e      	ldr	r2, [pc, #120]	@ (8004d64 <HAL_UART_MspInit+0x168>)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8004cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8004d6c <HAL_UART_MspInit+0x170>)
 8004cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d70 <HAL_UART_MspInit+0x174>)
 8004cf4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8004d6c <HAL_UART_MspInit+0x170>)
 8004cf8:	221b      	movs	r2, #27
 8004cfa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8004d6c <HAL_UART_MspInit+0x170>)
 8004cfe:	2210      	movs	r2, #16
 8004d00:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d02:	4b1a      	ldr	r3, [pc, #104]	@ (8004d6c <HAL_UART_MspInit+0x170>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d08:	4b18      	ldr	r3, [pc, #96]	@ (8004d6c <HAL_UART_MspInit+0x170>)
 8004d0a:	2280      	movs	r2, #128	@ 0x80
 8004d0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d0e:	4b17      	ldr	r3, [pc, #92]	@ (8004d6c <HAL_UART_MspInit+0x170>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d14:	4b15      	ldr	r3, [pc, #84]	@ (8004d6c <HAL_UART_MspInit+0x170>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004d1a:	4b14      	ldr	r3, [pc, #80]	@ (8004d6c <HAL_UART_MspInit+0x170>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d20:	4b12      	ldr	r3, [pc, #72]	@ (8004d6c <HAL_UART_MspInit+0x170>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004d26:	4811      	ldr	r0, [pc, #68]	@ (8004d6c <HAL_UART_MspInit+0x170>)
 8004d28:	f002 f89c 	bl	8006e64 <HAL_DMA_Init>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8004d32:	f7fe fe0b 	bl	800394c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a0c      	ldr	r2, [pc, #48]	@ (8004d6c <HAL_UART_MspInit+0x170>)
 8004d3a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d6c <HAL_UART_MspInit+0x170>)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004d42:	2200      	movs	r2, #0
 8004d44:	2100      	movs	r1, #0
 8004d46:	2026      	movs	r0, #38	@ 0x26
 8004d48:	f002 f857 	bl	8006dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d4c:	2026      	movs	r0, #38	@ 0x26
 8004d4e:	f002 f86e 	bl	8006e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d52:	bf00      	nop
 8004d54:	3778      	adds	r7, #120	@ 0x78
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40004400 	.word	0x40004400
 8004d60:	40021000 	.word	0x40021000
 8004d64:	20000d14 	.word	0x20000d14
 8004d68:	4002001c 	.word	0x4002001c
 8004d6c:	20000d74 	.word	0x20000d74
 8004d70:	40020030 	.word	0x40020030

08004d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d78:	bf00      	nop
 8004d7a:	e7fd      	b.n	8004d78 <NMI_Handler+0x4>

08004d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d80:	bf00      	nop
 8004d82:	e7fd      	b.n	8004d80 <HardFault_Handler+0x4>

08004d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d88:	bf00      	nop
 8004d8a:	e7fd      	b.n	8004d88 <MemManage_Handler+0x4>

08004d8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d90:	bf00      	nop
 8004d92:	e7fd      	b.n	8004d90 <BusFault_Handler+0x4>

08004d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d98:	bf00      	nop
 8004d9a:	e7fd      	b.n	8004d98 <UsageFault_Handler+0x4>

08004d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004daa:	b480      	push	{r7}
 8004dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dae:	bf00      	nop
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dbc:	bf00      	nop
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dca:	f000 f8fb 	bl	8004fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dce:	bf00      	nop
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004dd8:	4802      	ldr	r0, [pc, #8]	@ (8004de4 <DMA1_Channel1_IRQHandler+0x10>)
 8004dda:	f002 fa26 	bl	800722a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004dde:	bf00      	nop
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000858 	.word	0x20000858

08004de8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004dec:	4802      	ldr	r0, [pc, #8]	@ (8004df8 <DMA1_Channel2_IRQHandler+0x10>)
 8004dee:	f002 fa1c 	bl	800722a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004df2:	bf00      	nop
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000d14 	.word	0x20000d14

08004dfc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004e00:	4802      	ldr	r0, [pc, #8]	@ (8004e0c <DMA1_Channel3_IRQHandler+0x10>)
 8004e02:	f002 fa12 	bl	800722a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004e06:	bf00      	nop
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000d74 	.word	0x20000d74

08004e10 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8004e14:	4802      	ldr	r0, [pc, #8]	@ (8004e20 <DMA1_Channel4_IRQHandler+0x10>)
 8004e16:	f002 fa08 	bl	800722a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004e1a:	bf00      	nop
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000be8 	.word	0x20000be8

08004e24 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e28:	4802      	ldr	r0, [pc, #8]	@ (8004e34 <ADC1_2_IRQHandler+0x10>)
 8004e2a:	f000 fdb9 	bl	80059a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004e2e:	bf00      	nop
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	200007ec 	.word	0x200007ec

08004e38 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e3c:	4803      	ldr	r0, [pc, #12]	@ (8004e4c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004e3e:	f004 fae8 	bl	8009412 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004e42:	4803      	ldr	r0, [pc, #12]	@ (8004e50 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004e44:	f004 fae5 	bl	8009412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004e48:	bf00      	nop
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	200008b8 	.word	0x200008b8
 8004e50:	20000b1c 	.word	0x20000b1c

08004e54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004e58:	4802      	ldr	r0, [pc, #8]	@ (8004e64 <TIM3_IRQHandler+0x10>)
 8004e5a:	f004 fada 	bl	8009412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000984 	.word	0x20000984

08004e68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004e6c:	4802      	ldr	r0, [pc, #8]	@ (8004e78 <TIM4_IRQHandler+0x10>)
 8004e6e:	f004 fad0 	bl	8009412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004e72:	bf00      	nop
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20000a50 	.word	0x20000a50

08004e7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e80:	4802      	ldr	r0, [pc, #8]	@ (8004e8c <USART2_IRQHandler+0x10>)
 8004e82:	f006 f899 	bl	800afb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e86:	bf00      	nop
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000c48 	.word	0x20000c48

08004e90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004e94:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004e98:	f002 fcc8 	bl	800782c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 8004e9c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004ea0:	f002 fcc4 	bl	800782c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004ea4:	bf00      	nop
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004eac:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <SystemInit+0x20>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb2:	4a05      	ldr	r2, [pc, #20]	@ (8004ec8 <SystemInit+0x20>)
 8004eb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004eb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ebc:	bf00      	nop
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	e000ed00 	.word	0xe000ed00

08004ecc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004ecc:	480d      	ldr	r0, [pc, #52]	@ (8004f04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004ece:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ed0:	f7ff ffea 	bl	8004ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ed4:	480c      	ldr	r0, [pc, #48]	@ (8004f08 <LoopForever+0x6>)
  ldr r1, =_edata
 8004ed6:	490d      	ldr	r1, [pc, #52]	@ (8004f0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8004f10 <LoopForever+0xe>)
  movs r3, #0
 8004eda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004edc:	e002      	b.n	8004ee4 <LoopCopyDataInit>

08004ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ee2:	3304      	adds	r3, #4

08004ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ee8:	d3f9      	bcc.n	8004ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004eea:	4a0a      	ldr	r2, [pc, #40]	@ (8004f14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004eec:	4c0a      	ldr	r4, [pc, #40]	@ (8004f18 <LoopForever+0x16>)
  movs r3, #0
 8004eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ef0:	e001      	b.n	8004ef6 <LoopFillZerobss>

08004ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ef4:	3204      	adds	r2, #4

08004ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ef8:	d3fb      	bcc.n	8004ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004efa:	f007 fd91 	bl	800ca20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004efe:	f7fd fbb9 	bl	8002674 <main>

08004f02 <LoopForever>:

LoopForever:
    b LoopForever
 8004f02:	e7fe      	b.n	8004f02 <LoopForever>
  ldr   r0, =_estack
 8004f04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f0c:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8004f10:	0800cec4 	.word	0x0800cec4
  ldr r2, =_sbss
 8004f14:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8004f18:	20001908 	.word	0x20001908

08004f1c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004f1c:	e7fe      	b.n	8004f1c <ADC3_IRQHandler>

08004f1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b082      	sub	sp, #8
 8004f22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f28:	2003      	movs	r0, #3
 8004f2a:	f001 ff5b 	bl	8006de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f000 f80e 	bl	8004f50 <HAL_InitTick>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	71fb      	strb	r3, [r7, #7]
 8004f3e:	e001      	b.n	8004f44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f40:	f7ff fc9e 	bl	8004880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f44:	79fb      	ldrb	r3, [r7, #7]

}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004f5c:	4b16      	ldr	r3, [pc, #88]	@ (8004fb8 <HAL_InitTick+0x68>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d022      	beq.n	8004faa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004f64:	4b15      	ldr	r3, [pc, #84]	@ (8004fbc <HAL_InitTick+0x6c>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b13      	ldr	r3, [pc, #76]	@ (8004fb8 <HAL_InitTick+0x68>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f001 ff66 	bl	8006e4a <HAL_SYSTICK_Config>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10f      	bne.n	8004fa4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b0f      	cmp	r3, #15
 8004f88:	d809      	bhi.n	8004f9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f92:	f001 ff32 	bl	8006dfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f96:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc0 <HAL_InitTick+0x70>)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	e007      	b.n	8004fae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	73fb      	strb	r3, [r7, #15]
 8004fa2:	e004      	b.n	8004fae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
 8004fa8:	e001      	b.n	8004fae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	2000026c 	.word	0x2000026c
 8004fbc:	20000264 	.word	0x20000264
 8004fc0:	20000268 	.word	0x20000268

08004fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fc8:	4b05      	ldr	r3, [pc, #20]	@ (8004fe0 <HAL_IncTick+0x1c>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	4b05      	ldr	r3, [pc, #20]	@ (8004fe4 <HAL_IncTick+0x20>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	4a03      	ldr	r2, [pc, #12]	@ (8004fe0 <HAL_IncTick+0x1c>)
 8004fd4:	6013      	str	r3, [r2, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	200017cc 	.word	0x200017cc
 8004fe4:	2000026c 	.word	0x2000026c

08004fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return uwTick;
 8004fec:	4b03      	ldr	r3, [pc, #12]	@ (8004ffc <HAL_GetTick+0x14>)
 8004fee:	681b      	ldr	r3, [r3, #0]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	200017cc 	.word	0x200017cc

08005000 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	609a      	str	r2, [r3, #8]
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	609a      	str	r2, [r3, #8]
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3360      	adds	r3, #96	@ 0x60
 800507a:	461a      	mov	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	4b08      	ldr	r3, [pc, #32]	@ (80050ac <LL_ADC_SetOffset+0x44>)
 800508a:	4013      	ands	r3, r2
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	4313      	orrs	r3, r2
 8005098:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80050a0:	bf00      	nop
 80050a2:	371c      	adds	r7, #28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	03fff000 	.word	0x03fff000

080050b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3360      	adds	r3, #96	@ 0x60
 80050be:	461a      	mov	r2, r3
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3360      	adds	r3, #96	@ 0x60
 80050ec:	461a      	mov	r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	431a      	orrs	r2, r3
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005112:	b480      	push	{r7}
 8005114:	b087      	sub	sp, #28
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3360      	adds	r3, #96	@ 0x60
 8005122:	461a      	mov	r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	431a      	orrs	r2, r3
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3360      	adds	r3, #96	@ 0x60
 8005158:	461a      	mov	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	431a      	orrs	r2, r3
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	615a      	str	r2, [r3, #20]
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b087      	sub	sp, #28
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3330      	adds	r3, #48	@ 0x30
 80051da:	461a      	mov	r2, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	f003 030c 	and.w	r3, r3, #12
 80051e6:	4413      	add	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	211f      	movs	r1, #31
 80051f6:	fa01 f303 	lsl.w	r3, r1, r3
 80051fa:	43db      	mvns	r3, r3
 80051fc:	401a      	ands	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0e9b      	lsrs	r3, r3, #26
 8005202:	f003 011f 	and.w	r1, r3, #31
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	fa01 f303 	lsl.w	r3, r1, r3
 8005210:	431a      	orrs	r2, r3
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800522e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3314      	adds	r3, #20
 8005258:	461a      	mov	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	0e5b      	lsrs	r3, r3, #25
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	4413      	add	r3, r2
 8005266:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	0d1b      	lsrs	r3, r3, #20
 8005270:	f003 031f 	and.w	r3, r3, #31
 8005274:	2107      	movs	r1, #7
 8005276:	fa01 f303 	lsl.w	r3, r1, r3
 800527a:	43db      	mvns	r3, r3
 800527c:	401a      	ands	r2, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	0d1b      	lsrs	r3, r3, #20
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	fa01 f303 	lsl.w	r3, r1, r3
 800528c:	431a      	orrs	r2, r3
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
	...

080052a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052b8:	43db      	mvns	r3, r3
 80052ba:	401a      	ands	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f003 0318 	and.w	r3, r3, #24
 80052c2:	4908      	ldr	r1, [pc, #32]	@ (80052e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80052c4:	40d9      	lsrs	r1, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	400b      	ands	r3, r1
 80052ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ce:	431a      	orrs	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	0007ffff 	.word	0x0007ffff

080052e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 031f 	and.w	r3, r3, #31
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005330:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6093      	str	r3, [r2, #8]
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005358:	d101      	bne.n	800535e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800537c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005380:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053a8:	d101      	bne.n	80053ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80053d0:	f043 0201 	orr.w	r2, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <LL_ADC_IsEnabled+0x18>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <LL_ADC_IsEnabled+0x1a>
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800541a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800541e:	f043 0204 	orr.w	r2, r3, #4
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b04      	cmp	r3, #4
 8005444:	d101      	bne.n	800544a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b08      	cmp	r3, #8
 800546a:	d101      	bne.n	8005470 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005480:	b590      	push	{r4, r7, lr}
 8005482:	b089      	sub	sp, #36	@ 0x24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e1a9      	b.n	80057ee <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d109      	bne.n	80054bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff fa0d 	bl	80048c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff ff3f 	bl	8005344 <LL_ADC_IsDeepPowerDownEnabled>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff ff25 	bl	8005320 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff ff5a 	bl	8005394 <LL_ADC_IsInternalRegulatorEnabled>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d115      	bne.n	8005512 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff ff3e 	bl	800536c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054f0:	4b9c      	ldr	r3, [pc, #624]	@ (8005764 <HAL_ADC_Init+0x2e4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	099b      	lsrs	r3, r3, #6
 80054f6:	4a9c      	ldr	r2, [pc, #624]	@ (8005768 <HAL_ADC_Init+0x2e8>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	099b      	lsrs	r3, r3, #6
 80054fe:	3301      	adds	r3, #1
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005504:	e002      	b.n	800550c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3b01      	subs	r3, #1
 800550a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f9      	bne.n	8005506 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff ff3c 	bl	8005394 <LL_ADC_IsInternalRegulatorEnabled>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10d      	bne.n	800553e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005526:	f043 0210 	orr.w	r2, r3, #16
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005532:	f043 0201 	orr.w	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff ff75 	bl	8005432 <LL_ADC_REG_IsConversionOngoing>
 8005548:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	2b00      	cmp	r3, #0
 8005554:	f040 8142 	bne.w	80057dc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2b00      	cmp	r3, #0
 800555c:	f040 813e 	bne.w	80057dc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005564:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005568:	f043 0202 	orr.w	r2, r3, #2
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff ff35 	bl	80053e4 <LL_ADC_IsEnabled>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d141      	bne.n	8005604 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005588:	d004      	beq.n	8005594 <HAL_ADC_Init+0x114>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a77      	ldr	r2, [pc, #476]	@ (800576c <HAL_ADC_Init+0x2ec>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d10f      	bne.n	80055b4 <HAL_ADC_Init+0x134>
 8005594:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005598:	f7ff ff24 	bl	80053e4 <LL_ADC_IsEnabled>
 800559c:	4604      	mov	r4, r0
 800559e:	4873      	ldr	r0, [pc, #460]	@ (800576c <HAL_ADC_Init+0x2ec>)
 80055a0:	f7ff ff20 	bl	80053e4 <LL_ADC_IsEnabled>
 80055a4:	4603      	mov	r3, r0
 80055a6:	4323      	orrs	r3, r4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	bf0c      	ite	eq
 80055ac:	2301      	moveq	r3, #1
 80055ae:	2300      	movne	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	e012      	b.n	80055da <HAL_ADC_Init+0x15a>
 80055b4:	486e      	ldr	r0, [pc, #440]	@ (8005770 <HAL_ADC_Init+0x2f0>)
 80055b6:	f7ff ff15 	bl	80053e4 <LL_ADC_IsEnabled>
 80055ba:	4604      	mov	r4, r0
 80055bc:	486d      	ldr	r0, [pc, #436]	@ (8005774 <HAL_ADC_Init+0x2f4>)
 80055be:	f7ff ff11 	bl	80053e4 <LL_ADC_IsEnabled>
 80055c2:	4603      	mov	r3, r0
 80055c4:	431c      	orrs	r4, r3
 80055c6:	486c      	ldr	r0, [pc, #432]	@ (8005778 <HAL_ADC_Init+0x2f8>)
 80055c8:	f7ff ff0c 	bl	80053e4 <LL_ADC_IsEnabled>
 80055cc:	4603      	mov	r3, r0
 80055ce:	4323      	orrs	r3, r4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	bf0c      	ite	eq
 80055d4:	2301      	moveq	r3, #1
 80055d6:	2300      	movne	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d012      	beq.n	8005604 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055e6:	d004      	beq.n	80055f2 <HAL_ADC_Init+0x172>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a5f      	ldr	r2, [pc, #380]	@ (800576c <HAL_ADC_Init+0x2ec>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d101      	bne.n	80055f6 <HAL_ADC_Init+0x176>
 80055f2:	4a62      	ldr	r2, [pc, #392]	@ (800577c <HAL_ADC_Init+0x2fc>)
 80055f4:	e000      	b.n	80055f8 <HAL_ADC_Init+0x178>
 80055f6:	4a62      	ldr	r2, [pc, #392]	@ (8005780 <HAL_ADC_Init+0x300>)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f7ff fcfe 	bl	8005000 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	7f5b      	ldrb	r3, [r3, #29]
 8005608:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800560e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005614:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800561a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005622:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005624:	4313      	orrs	r3, r2
 8005626:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800562e:	2b01      	cmp	r3, #1
 8005630:	d106      	bne.n	8005640 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005636:	3b01      	subs	r3, #1
 8005638:	045b      	lsls	r3, r3, #17
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4313      	orrs	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005644:	2b00      	cmp	r3, #0
 8005646:	d009      	beq.n	800565c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005654:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4313      	orrs	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	4b48      	ldr	r3, [pc, #288]	@ (8005784 <HAL_ADC_Init+0x304>)
 8005664:	4013      	ands	r3, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	69b9      	ldr	r1, [r7, #24]
 800566c:	430b      	orrs	r3, r1
 800566e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff fee4 	bl	8005458 <LL_ADC_INJ_IsConversionOngoing>
 8005690:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d17f      	bne.n	8005798 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d17c      	bne.n	8005798 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80056a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80056aa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80056ac:	4313      	orrs	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056ba:	f023 0302 	bic.w	r3, r3, #2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6812      	ldr	r2, [r2, #0]
 80056c2:	69b9      	ldr	r1, [r7, #24]
 80056c4:	430b      	orrs	r3, r1
 80056c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d017      	beq.n	8005700 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80056de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80056e8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80056ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6911      	ldr	r1, [r2, #16]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	430b      	orrs	r3, r1
 80056fa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80056fe:	e013      	b.n	8005728 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800570e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6812      	ldr	r2, [r2, #0]
 800571c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005720:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005724:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800572e:	2b01      	cmp	r3, #1
 8005730:	d12a      	bne.n	8005788 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800573c:	f023 0304 	bic.w	r3, r3, #4
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005748:	4311      	orrs	r1, r2
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800574e:	4311      	orrs	r1, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005754:	430a      	orrs	r2, r1
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	611a      	str	r2, [r3, #16]
 8005762:	e019      	b.n	8005798 <HAL_ADC_Init+0x318>
 8005764:	20000264 	.word	0x20000264
 8005768:	053e2d63 	.word	0x053e2d63
 800576c:	50000100 	.word	0x50000100
 8005770:	50000400 	.word	0x50000400
 8005774:	50000500 	.word	0x50000500
 8005778:	50000600 	.word	0x50000600
 800577c:	50000300 	.word	0x50000300
 8005780:	50000700 	.word	0x50000700
 8005784:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0201 	bic.w	r2, r2, #1
 8005796:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d10c      	bne.n	80057ba <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a6:	f023 010f 	bic.w	r1, r3, #15
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	1e5a      	subs	r2, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80057b8:	e007      	b.n	80057ca <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 020f 	bic.w	r2, r2, #15
 80057c8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ce:	f023 0303 	bic.w	r3, r3, #3
 80057d2:	f043 0201 	orr.w	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057da:	e007      	b.n	80057ec <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e0:	f043 0210 	orr.w	r2, r3, #16
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80057ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3724      	adds	r7, #36	@ 0x24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd90      	pop	{r4, r7, pc}
 80057f6:	bf00      	nop

080057f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800580c:	d004      	beq.n	8005818 <HAL_ADC_Start_DMA+0x20>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a5a      	ldr	r2, [pc, #360]	@ (800597c <HAL_ADC_Start_DMA+0x184>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d101      	bne.n	800581c <HAL_ADC_Start_DMA+0x24>
 8005818:	4b59      	ldr	r3, [pc, #356]	@ (8005980 <HAL_ADC_Start_DMA+0x188>)
 800581a:	e000      	b.n	800581e <HAL_ADC_Start_DMA+0x26>
 800581c:	4b59      	ldr	r3, [pc, #356]	@ (8005984 <HAL_ADC_Start_DMA+0x18c>)
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff fd62 	bl	80052e8 <LL_ADC_GetMultimode>
 8005824:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff fe01 	bl	8005432 <LL_ADC_REG_IsConversionOngoing>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	f040 809b 	bne.w	800596e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800583e:	2b01      	cmp	r3, #1
 8005840:	d101      	bne.n	8005846 <HAL_ADC_Start_DMA+0x4e>
 8005842:	2302      	movs	r3, #2
 8005844:	e096      	b.n	8005974 <HAL_ADC_Start_DMA+0x17c>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a4d      	ldr	r2, [pc, #308]	@ (8005988 <HAL_ADC_Start_DMA+0x190>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d008      	beq.n	800586a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d005      	beq.n	800586a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	2b05      	cmp	r3, #5
 8005862:	d002      	beq.n	800586a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b09      	cmp	r3, #9
 8005868:	d17a      	bne.n	8005960 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 ff60 	bl	8006730 <ADC_Enable>
 8005870:	4603      	mov	r3, r0
 8005872:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005874:	7dfb      	ldrb	r3, [r7, #23]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d16d      	bne.n	8005956 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800587e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005882:	f023 0301 	bic.w	r3, r3, #1
 8005886:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a3a      	ldr	r2, [pc, #232]	@ (800597c <HAL_ADC_Start_DMA+0x184>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d009      	beq.n	80058ac <HAL_ADC_Start_DMA+0xb4>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a3b      	ldr	r2, [pc, #236]	@ (800598c <HAL_ADC_Start_DMA+0x194>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d002      	beq.n	80058a8 <HAL_ADC_Start_DMA+0xb0>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	e003      	b.n	80058b0 <HAL_ADC_Start_DMA+0xb8>
 80058a8:	4b39      	ldr	r3, [pc, #228]	@ (8005990 <HAL_ADC_Start_DMA+0x198>)
 80058aa:	e001      	b.n	80058b0 <HAL_ADC_Start_DMA+0xb8>
 80058ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d002      	beq.n	80058be <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d105      	bne.n	80058ca <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d006      	beq.n	80058e4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058da:	f023 0206 	bic.w	r2, r3, #6
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	661a      	str	r2, [r3, #96]	@ 0x60
 80058e2:	e002      	b.n	80058ea <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ee:	4a29      	ldr	r2, [pc, #164]	@ (8005994 <HAL_ADC_Start_DMA+0x19c>)
 80058f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f6:	4a28      	ldr	r2, [pc, #160]	@ (8005998 <HAL_ADC_Start_DMA+0x1a0>)
 80058f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fe:	4a27      	ldr	r2, [pc, #156]	@ (800599c <HAL_ADC_Start_DMA+0x1a4>)
 8005900:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	221c      	movs	r2, #28
 8005908:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0210 	orr.w	r2, r2, #16
 8005920:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0201 	orr.w	r2, r2, #1
 8005930:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3340      	adds	r3, #64	@ 0x40
 800593c:	4619      	mov	r1, r3
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f001 fb37 	bl	8006fb4 <HAL_DMA_Start_IT>
 8005946:	4603      	mov	r3, r0
 8005948:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff fd5b 	bl	800540a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005954:	e00d      	b.n	8005972 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800595e:	e008      	b.n	8005972 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800596c:	e001      	b.n	8005972 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800596e:	2302      	movs	r3, #2
 8005970:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005972:	7dfb      	ldrb	r3, [r7, #23]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	50000100 	.word	0x50000100
 8005980:	50000300 	.word	0x50000300
 8005984:	50000700 	.word	0x50000700
 8005988:	50000600 	.word	0x50000600
 800598c:	50000500 	.word	0x50000500
 8005990:	50000400 	.word	0x50000400
 8005994:	0800685d 	.word	0x0800685d
 8005998:	08006935 	.word	0x08006935
 800599c:	08006951 	.word	0x08006951

080059a0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08a      	sub	sp, #40	@ 0x28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80059a8:	2300      	movs	r3, #0
 80059aa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059c4:	d004      	beq.n	80059d0 <HAL_ADC_IRQHandler+0x30>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a8e      	ldr	r2, [pc, #568]	@ (8005c04 <HAL_ADC_IRQHandler+0x264>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d101      	bne.n	80059d4 <HAL_ADC_IRQHandler+0x34>
 80059d0:	4b8d      	ldr	r3, [pc, #564]	@ (8005c08 <HAL_ADC_IRQHandler+0x268>)
 80059d2:	e000      	b.n	80059d6 <HAL_ADC_IRQHandler+0x36>
 80059d4:	4b8d      	ldr	r3, [pc, #564]	@ (8005c0c <HAL_ADC_IRQHandler+0x26c>)
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fc86 	bl	80052e8 <LL_ADC_GetMultimode>
 80059dc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d017      	beq.n	8005a18 <HAL_ADC_IRQHandler+0x78>
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d012      	beq.n	8005a18 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d105      	bne.n	8005a0a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a02:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f001 f808 	bl	8006a20 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2202      	movs	r2, #2
 8005a16:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d004      	beq.n	8005a2c <HAL_ADC_IRQHandler+0x8c>
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10b      	bne.n	8005a44 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 8094 	beq.w	8005b60 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 808e 	beq.w	8005b60 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d105      	bne.n	8005a5c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a54:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fb9f 	bl	80051a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d072      	beq.n	8005b52 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a64      	ldr	r2, [pc, #400]	@ (8005c04 <HAL_ADC_IRQHandler+0x264>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d009      	beq.n	8005a8a <HAL_ADC_IRQHandler+0xea>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a65      	ldr	r2, [pc, #404]	@ (8005c10 <HAL_ADC_IRQHandler+0x270>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d002      	beq.n	8005a86 <HAL_ADC_IRQHandler+0xe6>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	e003      	b.n	8005a8e <HAL_ADC_IRQHandler+0xee>
 8005a86:	4b63      	ldr	r3, [pc, #396]	@ (8005c14 <HAL_ADC_IRQHandler+0x274>)
 8005a88:	e001      	b.n	8005a8e <HAL_ADC_IRQHandler+0xee>
 8005a8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d008      	beq.n	8005aa8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b05      	cmp	r3, #5
 8005aa0:	d002      	beq.n	8005aa8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b09      	cmp	r3, #9
 8005aa6:	d104      	bne.n	8005ab2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	623b      	str	r3, [r7, #32]
 8005ab0:	e014      	b.n	8005adc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a53      	ldr	r2, [pc, #332]	@ (8005c04 <HAL_ADC_IRQHandler+0x264>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d009      	beq.n	8005ad0 <HAL_ADC_IRQHandler+0x130>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a53      	ldr	r2, [pc, #332]	@ (8005c10 <HAL_ADC_IRQHandler+0x270>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d002      	beq.n	8005acc <HAL_ADC_IRQHandler+0x12c>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	e003      	b.n	8005ad4 <HAL_ADC_IRQHandler+0x134>
 8005acc:	4b51      	ldr	r3, [pc, #324]	@ (8005c14 <HAL_ADC_IRQHandler+0x274>)
 8005ace:	e001      	b.n	8005ad4 <HAL_ADC_IRQHandler+0x134>
 8005ad0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005ad4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d135      	bne.n	8005b52 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d12e      	bne.n	8005b52 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff fc9a 	bl	8005432 <LL_ADC_REG_IsConversionOngoing>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d11a      	bne.n	8005b3a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 020c 	bic.w	r2, r2, #12
 8005b12:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d112      	bne.n	8005b52 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b30:	f043 0201 	orr.w	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b38:	e00b      	b.n	8005b52 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3e:	f043 0210 	orr.w	r2, r3, #16
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b4a:	f043 0201 	orr.w	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f984 	bl	8005e60 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	220c      	movs	r2, #12
 8005b5e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d004      	beq.n	8005b74 <HAL_ADC_IRQHandler+0x1d4>
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10b      	bne.n	8005b8c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 80b3 	beq.w	8005ce6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 80ad 	beq.w	8005ce6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d105      	bne.n	8005ba4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b9c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fb3a 	bl	8005222 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005bae:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff faf5 	bl	80051a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005bba:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a10      	ldr	r2, [pc, #64]	@ (8005c04 <HAL_ADC_IRQHandler+0x264>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d009      	beq.n	8005bda <HAL_ADC_IRQHandler+0x23a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a11      	ldr	r2, [pc, #68]	@ (8005c10 <HAL_ADC_IRQHandler+0x270>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d002      	beq.n	8005bd6 <HAL_ADC_IRQHandler+0x236>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	e003      	b.n	8005bde <HAL_ADC_IRQHandler+0x23e>
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c14 <HAL_ADC_IRQHandler+0x274>)
 8005bd8:	e001      	b.n	8005bde <HAL_ADC_IRQHandler+0x23e>
 8005bda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d008      	beq.n	8005bf8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2b06      	cmp	r3, #6
 8005bf0:	d002      	beq.n	8005bf8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b07      	cmp	r3, #7
 8005bf6:	d10f      	bne.n	8005c18 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	623b      	str	r3, [r7, #32]
 8005c00:	e01f      	b.n	8005c42 <HAL_ADC_IRQHandler+0x2a2>
 8005c02:	bf00      	nop
 8005c04:	50000100 	.word	0x50000100
 8005c08:	50000300 	.word	0x50000300
 8005c0c:	50000700 	.word	0x50000700
 8005c10:	50000500 	.word	0x50000500
 8005c14:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a8b      	ldr	r2, [pc, #556]	@ (8005e4c <HAL_ADC_IRQHandler+0x4ac>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d009      	beq.n	8005c36 <HAL_ADC_IRQHandler+0x296>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a8a      	ldr	r2, [pc, #552]	@ (8005e50 <HAL_ADC_IRQHandler+0x4b0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d002      	beq.n	8005c32 <HAL_ADC_IRQHandler+0x292>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	e003      	b.n	8005c3a <HAL_ADC_IRQHandler+0x29a>
 8005c32:	4b88      	ldr	r3, [pc, #544]	@ (8005e54 <HAL_ADC_IRQHandler+0x4b4>)
 8005c34:	e001      	b.n	8005c3a <HAL_ADC_IRQHandler+0x29a>
 8005c36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005c3a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d047      	beq.n	8005cd8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d007      	beq.n	8005c62 <HAL_ADC_IRQHandler+0x2c2>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d03f      	beq.n	8005cd8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d13a      	bne.n	8005cd8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6c:	2b40      	cmp	r3, #64	@ 0x40
 8005c6e:	d133      	bne.n	8005cd8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d12e      	bne.n	8005cd8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff fbea 	bl	8005458 <LL_ADC_INJ_IsConversionOngoing>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d11a      	bne.n	8005cc0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c98:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d112      	bne.n	8005cd8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb6:	f043 0201 	orr.w	r2, r3, #1
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005cbe:	e00b      	b.n	8005cd8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc4:	f043 0210 	orr.w	r2, r3, #16
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cd0:	f043 0201 	orr.w	r2, r3, #1
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fe79 	bl	80069d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2260      	movs	r2, #96	@ 0x60
 8005ce4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d011      	beq.n	8005d14 <HAL_ADC_IRQHandler+0x374>
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00c      	beq.n	8005d14 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cfe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f8be 	bl	8005e88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2280      	movs	r2, #128	@ 0x80
 8005d12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d012      	beq.n	8005d44 <HAL_ADC_IRQHandler+0x3a4>
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00d      	beq.n	8005d44 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d2c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fe5f 	bl	80069f8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d012      	beq.n	8005d74 <HAL_ADC_IRQHandler+0x3d4>
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00d      	beq.n	8005d74 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d5c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fe51 	bl	8006a0c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f003 0310 	and.w	r3, r3, #16
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d043      	beq.n	8005e06 <HAL_ADC_IRQHandler+0x466>
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d03e      	beq.n	8005e06 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d102      	bne.n	8005d96 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8005d90:	2301      	movs	r3, #1
 8005d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d94:	e021      	b.n	8005dda <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d015      	beq.n	8005dc8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005da4:	d004      	beq.n	8005db0 <HAL_ADC_IRQHandler+0x410>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a28      	ldr	r2, [pc, #160]	@ (8005e4c <HAL_ADC_IRQHandler+0x4ac>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d101      	bne.n	8005db4 <HAL_ADC_IRQHandler+0x414>
 8005db0:	4b29      	ldr	r3, [pc, #164]	@ (8005e58 <HAL_ADC_IRQHandler+0x4b8>)
 8005db2:	e000      	b.n	8005db6 <HAL_ADC_IRQHandler+0x416>
 8005db4:	4b29      	ldr	r3, [pc, #164]	@ (8005e5c <HAL_ADC_IRQHandler+0x4bc>)
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff faa4 	bl	8005304 <LL_ADC_GetMultiDMATransfer>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00b      	beq.n	8005dda <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dc6:	e008      	b.n	8005dda <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d10e      	bne.n	8005dfe <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005df0:	f043 0202 	orr.w	r2, r3, #2
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f84f 	bl	8005e9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2210      	movs	r2, #16
 8005e04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d018      	beq.n	8005e42 <HAL_ADC_IRQHandler+0x4a2>
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d013      	beq.n	8005e42 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e1e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e2a:	f043 0208 	orr.w	r2, r3, #8
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e3a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fdd1 	bl	80069e4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005e42:	bf00      	nop
 8005e44:	3728      	adds	r7, #40	@ 0x28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	50000100 	.word	0x50000100
 8005e50:	50000500 	.word	0x50000500
 8005e54:	50000400 	.word	0x50000400
 8005e58:	50000300 	.word	0x50000300
 8005e5c:	50000700 	.word	0x50000700

08005e60 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b0b6      	sub	sp, #216	@ 0xd8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d102      	bne.n	8005ed4 <HAL_ADC_ConfigChannel+0x24>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	f000 bc13 	b.w	80066fa <HAL_ADC_ConfigChannel+0x84a>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff faa6 	bl	8005432 <LL_ADC_REG_IsConversionOngoing>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f040 83f3 	bne.w	80066d4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6859      	ldr	r1, [r3, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	f7ff f965 	bl	80051ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff fa94 	bl	8005432 <LL_ADC_REG_IsConversionOngoing>
 8005f0a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff faa0 	bl	8005458 <LL_ADC_INJ_IsConversionOngoing>
 8005f18:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f040 81d9 	bne.w	80062d8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 81d4 	bne.w	80062d8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f38:	d10f      	bne.n	8005f5a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6818      	ldr	r0, [r3, #0]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2200      	movs	r2, #0
 8005f44:	4619      	mov	r1, r3
 8005f46:	f7ff f97f 	bl	8005248 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff f913 	bl	800517e <LL_ADC_SetSamplingTimeCommonConfig>
 8005f58:	e00e      	b.n	8005f78 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	6819      	ldr	r1, [r3, #0]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f7ff f96e 	bl	8005248 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff f903 	bl	800517e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	695a      	ldr	r2, [r3, #20]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	08db      	lsrs	r3, r3, #3
 8005f84:	f003 0303 	and.w	r3, r3, #3
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d022      	beq.n	8005fe0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6919      	ldr	r1, [r3, #16]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005faa:	f7ff f85d 	bl	8005068 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6919      	ldr	r1, [r3, #16]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f7ff f8a9 	bl	8005112 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6818      	ldr	r0, [r3, #0]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d102      	bne.n	8005fd6 <HAL_ADC_ConfigChannel+0x126>
 8005fd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fd4:	e000      	b.n	8005fd8 <HAL_ADC_ConfigChannel+0x128>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	461a      	mov	r2, r3
 8005fda:	f7ff f8b5 	bl	8005148 <LL_ADC_SetOffsetSaturation>
 8005fde:	e17b      	b.n	80062d8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff f862 	bl	80050b0 <LL_ADC_GetOffsetChannel>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10a      	bne.n	800600c <HAL_ADC_ConfigChannel+0x15c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff f857 	bl	80050b0 <LL_ADC_GetOffsetChannel>
 8006002:	4603      	mov	r3, r0
 8006004:	0e9b      	lsrs	r3, r3, #26
 8006006:	f003 021f 	and.w	r2, r3, #31
 800600a:	e01e      	b.n	800604a <HAL_ADC_ConfigChannel+0x19a>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2100      	movs	r1, #0
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff f84c 	bl	80050b0 <LL_ADC_GetOffsetChannel>
 8006018:	4603      	mov	r3, r0
 800601a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800601e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006022:	fa93 f3a3 	rbit	r3, r3
 8006026:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800602a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800602e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006032:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800603a:	2320      	movs	r3, #32
 800603c:	e004      	b.n	8006048 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800603e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006042:	fab3 f383 	clz	r3, r3
 8006046:	b2db      	uxtb	r3, r3
 8006048:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006052:	2b00      	cmp	r3, #0
 8006054:	d105      	bne.n	8006062 <HAL_ADC_ConfigChannel+0x1b2>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	0e9b      	lsrs	r3, r3, #26
 800605c:	f003 031f 	and.w	r3, r3, #31
 8006060:	e018      	b.n	8006094 <HAL_ADC_ConfigChannel+0x1e4>
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800606a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800606e:	fa93 f3a3 	rbit	r3, r3
 8006072:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800607a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800607e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006086:	2320      	movs	r3, #32
 8006088:	e004      	b.n	8006094 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800608a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800608e:	fab3 f383 	clz	r3, r3
 8006092:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006094:	429a      	cmp	r2, r3
 8006096:	d106      	bne.n	80060a6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2200      	movs	r2, #0
 800609e:	2100      	movs	r1, #0
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff f81b 	bl	80050dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2101      	movs	r1, #1
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fe ffff 	bl	80050b0 <LL_ADC_GetOffsetChannel>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10a      	bne.n	80060d2 <HAL_ADC_ConfigChannel+0x222>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2101      	movs	r1, #1
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fe fff4 	bl	80050b0 <LL_ADC_GetOffsetChannel>
 80060c8:	4603      	mov	r3, r0
 80060ca:	0e9b      	lsrs	r3, r3, #26
 80060cc:	f003 021f 	and.w	r2, r3, #31
 80060d0:	e01e      	b.n	8006110 <HAL_ADC_ConfigChannel+0x260>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2101      	movs	r1, #1
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fe ffe9 	bl	80050b0 <LL_ADC_GetOffsetChannel>
 80060de:	4603      	mov	r3, r0
 80060e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80060e8:	fa93 f3a3 	rbit	r3, r3
 80060ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80060f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80060f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006100:	2320      	movs	r3, #32
 8006102:	e004      	b.n	800610e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006104:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006108:	fab3 f383 	clz	r3, r3
 800610c:	b2db      	uxtb	r3, r3
 800610e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006118:	2b00      	cmp	r3, #0
 800611a:	d105      	bne.n	8006128 <HAL_ADC_ConfigChannel+0x278>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	0e9b      	lsrs	r3, r3, #26
 8006122:	f003 031f 	and.w	r3, r3, #31
 8006126:	e018      	b.n	800615a <HAL_ADC_ConfigChannel+0x2aa>
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006130:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006134:	fa93 f3a3 	rbit	r3, r3
 8006138:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800613c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006140:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006144:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800614c:	2320      	movs	r3, #32
 800614e:	e004      	b.n	800615a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006150:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006154:	fab3 f383 	clz	r3, r3
 8006158:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800615a:	429a      	cmp	r2, r3
 800615c:	d106      	bne.n	800616c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2200      	movs	r2, #0
 8006164:	2101      	movs	r1, #1
 8006166:	4618      	mov	r0, r3
 8006168:	f7fe ffb8 	bl	80050dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2102      	movs	r1, #2
 8006172:	4618      	mov	r0, r3
 8006174:	f7fe ff9c 	bl	80050b0 <LL_ADC_GetOffsetChannel>
 8006178:	4603      	mov	r3, r0
 800617a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10a      	bne.n	8006198 <HAL_ADC_ConfigChannel+0x2e8>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2102      	movs	r1, #2
 8006188:	4618      	mov	r0, r3
 800618a:	f7fe ff91 	bl	80050b0 <LL_ADC_GetOffsetChannel>
 800618e:	4603      	mov	r3, r0
 8006190:	0e9b      	lsrs	r3, r3, #26
 8006192:	f003 021f 	and.w	r2, r3, #31
 8006196:	e01e      	b.n	80061d6 <HAL_ADC_ConfigChannel+0x326>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2102      	movs	r1, #2
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe ff86 	bl	80050b0 <LL_ADC_GetOffsetChannel>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ae:	fa93 f3a3 	rbit	r3, r3
 80061b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80061b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80061be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80061c6:	2320      	movs	r3, #32
 80061c8:	e004      	b.n	80061d4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80061ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061ce:	fab3 f383 	clz	r3, r3
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d105      	bne.n	80061ee <HAL_ADC_ConfigChannel+0x33e>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	0e9b      	lsrs	r3, r3, #26
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	e016      	b.n	800621c <HAL_ADC_ConfigChannel+0x36c>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80061fa:	fa93 f3a3 	rbit	r3, r3
 80061fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006200:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006202:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006206:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800620e:	2320      	movs	r3, #32
 8006210:	e004      	b.n	800621c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006212:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006216:	fab3 f383 	clz	r3, r3
 800621a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800621c:	429a      	cmp	r2, r3
 800621e:	d106      	bne.n	800622e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2200      	movs	r2, #0
 8006226:	2102      	movs	r1, #2
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe ff57 	bl	80050dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2103      	movs	r1, #3
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe ff3b 	bl	80050b0 <LL_ADC_GetOffsetChannel>
 800623a:	4603      	mov	r3, r0
 800623c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <HAL_ADC_ConfigChannel+0x3aa>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2103      	movs	r1, #3
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe ff30 	bl	80050b0 <LL_ADC_GetOffsetChannel>
 8006250:	4603      	mov	r3, r0
 8006252:	0e9b      	lsrs	r3, r3, #26
 8006254:	f003 021f 	and.w	r2, r3, #31
 8006258:	e017      	b.n	800628a <HAL_ADC_ConfigChannel+0x3da>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2103      	movs	r1, #3
 8006260:	4618      	mov	r0, r3
 8006262:	f7fe ff25 	bl	80050b0 <LL_ADC_GetOffsetChannel>
 8006266:	4603      	mov	r3, r0
 8006268:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800626c:	fa93 f3a3 	rbit	r3, r3
 8006270:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006272:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006274:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006276:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800627c:	2320      	movs	r3, #32
 800627e:	e003      	b.n	8006288 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006280:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006282:	fab3 f383 	clz	r3, r3
 8006286:	b2db      	uxtb	r3, r3
 8006288:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006292:	2b00      	cmp	r3, #0
 8006294:	d105      	bne.n	80062a2 <HAL_ADC_ConfigChannel+0x3f2>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	0e9b      	lsrs	r3, r3, #26
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	e011      	b.n	80062c6 <HAL_ADC_ConfigChannel+0x416>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062aa:	fa93 f3a3 	rbit	r3, r3
 80062ae:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80062b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80062b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80062ba:	2320      	movs	r3, #32
 80062bc:	e003      	b.n	80062c6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80062be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062c0:	fab3 f383 	clz	r3, r3
 80062c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d106      	bne.n	80062d8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2200      	movs	r2, #0
 80062d0:	2103      	movs	r1, #3
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe ff02 	bl	80050dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4618      	mov	r0, r3
 80062de:	f7ff f881 	bl	80053e4 <LL_ADC_IsEnabled>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f040 813d 	bne.w	8006564 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	6819      	ldr	r1, [r3, #0]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	461a      	mov	r2, r3
 80062f8:	f7fe ffd2 	bl	80052a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	4aa2      	ldr	r2, [pc, #648]	@ (800658c <HAL_ADC_ConfigChannel+0x6dc>)
 8006302:	4293      	cmp	r3, r2
 8006304:	f040 812e 	bne.w	8006564 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10b      	bne.n	8006330 <HAL_ADC_ConfigChannel+0x480>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	0e9b      	lsrs	r3, r3, #26
 800631e:	3301      	adds	r3, #1
 8006320:	f003 031f 	and.w	r3, r3, #31
 8006324:	2b09      	cmp	r3, #9
 8006326:	bf94      	ite	ls
 8006328:	2301      	movls	r3, #1
 800632a:	2300      	movhi	r3, #0
 800632c:	b2db      	uxtb	r3, r3
 800632e:	e019      	b.n	8006364 <HAL_ADC_ConfigChannel+0x4b4>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006338:	fa93 f3a3 	rbit	r3, r3
 800633c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800633e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006340:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006342:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006348:	2320      	movs	r3, #32
 800634a:	e003      	b.n	8006354 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800634c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800634e:	fab3 f383 	clz	r3, r3
 8006352:	b2db      	uxtb	r3, r3
 8006354:	3301      	adds	r3, #1
 8006356:	f003 031f 	and.w	r3, r3, #31
 800635a:	2b09      	cmp	r3, #9
 800635c:	bf94      	ite	ls
 800635e:	2301      	movls	r3, #1
 8006360:	2300      	movhi	r3, #0
 8006362:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006364:	2b00      	cmp	r3, #0
 8006366:	d079      	beq.n	800645c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006370:	2b00      	cmp	r3, #0
 8006372:	d107      	bne.n	8006384 <HAL_ADC_ConfigChannel+0x4d4>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	0e9b      	lsrs	r3, r3, #26
 800637a:	3301      	adds	r3, #1
 800637c:	069b      	lsls	r3, r3, #26
 800637e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006382:	e015      	b.n	80063b0 <HAL_ADC_ConfigChannel+0x500>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800638a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800638c:	fa93 f3a3 	rbit	r3, r3
 8006390:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006394:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800639c:	2320      	movs	r3, #32
 800639e:	e003      	b.n	80063a8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80063a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063a2:	fab3 f383 	clz	r3, r3
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	3301      	adds	r3, #1
 80063aa:	069b      	lsls	r3, r3, #26
 80063ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d109      	bne.n	80063d0 <HAL_ADC_ConfigChannel+0x520>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	0e9b      	lsrs	r3, r3, #26
 80063c2:	3301      	adds	r3, #1
 80063c4:	f003 031f 	and.w	r3, r3, #31
 80063c8:	2101      	movs	r1, #1
 80063ca:	fa01 f303 	lsl.w	r3, r1, r3
 80063ce:	e017      	b.n	8006400 <HAL_ADC_ConfigChannel+0x550>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063d8:	fa93 f3a3 	rbit	r3, r3
 80063dc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80063de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80063e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80063e8:	2320      	movs	r3, #32
 80063ea:	e003      	b.n	80063f4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80063ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063ee:	fab3 f383 	clz	r3, r3
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	3301      	adds	r3, #1
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	2101      	movs	r1, #1
 80063fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006400:	ea42 0103 	orr.w	r1, r2, r3
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <HAL_ADC_ConfigChannel+0x576>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	0e9b      	lsrs	r3, r3, #26
 8006416:	3301      	adds	r3, #1
 8006418:	f003 021f 	and.w	r2, r3, #31
 800641c:	4613      	mov	r3, r2
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	4413      	add	r3, r2
 8006422:	051b      	lsls	r3, r3, #20
 8006424:	e018      	b.n	8006458 <HAL_ADC_ConfigChannel+0x5a8>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800642c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642e:	fa93 f3a3 	rbit	r3, r3
 8006432:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006436:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800643e:	2320      	movs	r3, #32
 8006440:	e003      	b.n	800644a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006444:	fab3 f383 	clz	r3, r3
 8006448:	b2db      	uxtb	r3, r3
 800644a:	3301      	adds	r3, #1
 800644c:	f003 021f 	and.w	r2, r3, #31
 8006450:	4613      	mov	r3, r2
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	4413      	add	r3, r2
 8006456:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006458:	430b      	orrs	r3, r1
 800645a:	e07e      	b.n	800655a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006464:	2b00      	cmp	r3, #0
 8006466:	d107      	bne.n	8006478 <HAL_ADC_ConfigChannel+0x5c8>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	0e9b      	lsrs	r3, r3, #26
 800646e:	3301      	adds	r3, #1
 8006470:	069b      	lsls	r3, r3, #26
 8006472:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006476:	e015      	b.n	80064a4 <HAL_ADC_ConfigChannel+0x5f4>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006480:	fa93 f3a3 	rbit	r3, r3
 8006484:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006488:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800648a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006490:	2320      	movs	r3, #32
 8006492:	e003      	b.n	800649c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	fab3 f383 	clz	r3, r3
 800649a:	b2db      	uxtb	r3, r3
 800649c:	3301      	adds	r3, #1
 800649e:	069b      	lsls	r3, r3, #26
 80064a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d109      	bne.n	80064c4 <HAL_ADC_ConfigChannel+0x614>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	0e9b      	lsrs	r3, r3, #26
 80064b6:	3301      	adds	r3, #1
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2101      	movs	r1, #1
 80064be:	fa01 f303 	lsl.w	r3, r1, r3
 80064c2:	e017      	b.n	80064f4 <HAL_ADC_ConfigChannel+0x644>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	fa93 f3a3 	rbit	r3, r3
 80064d0:	61fb      	str	r3, [r7, #28]
  return result;
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80064d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80064dc:	2320      	movs	r3, #32
 80064de:	e003      	b.n	80064e8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80064e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e2:	fab3 f383 	clz	r3, r3
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	3301      	adds	r3, #1
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	2101      	movs	r1, #1
 80064f0:	fa01 f303 	lsl.w	r3, r1, r3
 80064f4:	ea42 0103 	orr.w	r1, r2, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10d      	bne.n	8006520 <HAL_ADC_ConfigChannel+0x670>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	0e9b      	lsrs	r3, r3, #26
 800650a:	3301      	adds	r3, #1
 800650c:	f003 021f 	and.w	r2, r3, #31
 8006510:	4613      	mov	r3, r2
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	4413      	add	r3, r2
 8006516:	3b1e      	subs	r3, #30
 8006518:	051b      	lsls	r3, r3, #20
 800651a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800651e:	e01b      	b.n	8006558 <HAL_ADC_ConfigChannel+0x6a8>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	fa93 f3a3 	rbit	r3, r3
 800652c:	613b      	str	r3, [r7, #16]
  return result;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006538:	2320      	movs	r3, #32
 800653a:	e003      	b.n	8006544 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	fab3 f383 	clz	r3, r3
 8006542:	b2db      	uxtb	r3, r3
 8006544:	3301      	adds	r3, #1
 8006546:	f003 021f 	and.w	r2, r3, #31
 800654a:	4613      	mov	r3, r2
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	4413      	add	r3, r2
 8006550:	3b1e      	subs	r3, #30
 8006552:	051b      	lsls	r3, r3, #20
 8006554:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006558:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800655e:	4619      	mov	r1, r3
 8006560:	f7fe fe72 	bl	8005248 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	4b09      	ldr	r3, [pc, #36]	@ (8006590 <HAL_ADC_ConfigChannel+0x6e0>)
 800656a:	4013      	ands	r3, r2
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 80be 	beq.w	80066ee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800657a:	d004      	beq.n	8006586 <HAL_ADC_ConfigChannel+0x6d6>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a04      	ldr	r2, [pc, #16]	@ (8006594 <HAL_ADC_ConfigChannel+0x6e4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d10a      	bne.n	800659c <HAL_ADC_ConfigChannel+0x6ec>
 8006586:	4b04      	ldr	r3, [pc, #16]	@ (8006598 <HAL_ADC_ConfigChannel+0x6e8>)
 8006588:	e009      	b.n	800659e <HAL_ADC_ConfigChannel+0x6ee>
 800658a:	bf00      	nop
 800658c:	407f0000 	.word	0x407f0000
 8006590:	80080000 	.word	0x80080000
 8006594:	50000100 	.word	0x50000100
 8006598:	50000300 	.word	0x50000300
 800659c:	4b59      	ldr	r3, [pc, #356]	@ (8006704 <HAL_ADC_ConfigChannel+0x854>)
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe fd54 	bl	800504c <LL_ADC_GetCommonPathInternalCh>
 80065a4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a56      	ldr	r2, [pc, #344]	@ (8006708 <HAL_ADC_ConfigChannel+0x858>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d004      	beq.n	80065bc <HAL_ADC_ConfigChannel+0x70c>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a55      	ldr	r2, [pc, #340]	@ (800670c <HAL_ADC_ConfigChannel+0x85c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d13a      	bne.n	8006632 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d134      	bne.n	8006632 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065d0:	d005      	beq.n	80065de <HAL_ADC_ConfigChannel+0x72e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a4e      	ldr	r2, [pc, #312]	@ (8006710 <HAL_ADC_ConfigChannel+0x860>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	f040 8085 	bne.w	80066e8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065e6:	d004      	beq.n	80065f2 <HAL_ADC_ConfigChannel+0x742>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a49      	ldr	r2, [pc, #292]	@ (8006714 <HAL_ADC_ConfigChannel+0x864>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d101      	bne.n	80065f6 <HAL_ADC_ConfigChannel+0x746>
 80065f2:	4a49      	ldr	r2, [pc, #292]	@ (8006718 <HAL_ADC_ConfigChannel+0x868>)
 80065f4:	e000      	b.n	80065f8 <HAL_ADC_ConfigChannel+0x748>
 80065f6:	4a43      	ldr	r2, [pc, #268]	@ (8006704 <HAL_ADC_ConfigChannel+0x854>)
 80065f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006600:	4619      	mov	r1, r3
 8006602:	4610      	mov	r0, r2
 8006604:	f7fe fd0f 	bl	8005026 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006608:	4b44      	ldr	r3, [pc, #272]	@ (800671c <HAL_ADC_ConfigChannel+0x86c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	099b      	lsrs	r3, r3, #6
 800660e:	4a44      	ldr	r2, [pc, #272]	@ (8006720 <HAL_ADC_ConfigChannel+0x870>)
 8006610:	fba2 2303 	umull	r2, r3, r2, r3
 8006614:	099b      	lsrs	r3, r3, #6
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	4613      	mov	r3, r2
 800661a:	005b      	lsls	r3, r3, #1
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006622:	e002      	b.n	800662a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3b01      	subs	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1f9      	bne.n	8006624 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006630:	e05a      	b.n	80066e8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a3b      	ldr	r2, [pc, #236]	@ (8006724 <HAL_ADC_ConfigChannel+0x874>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d125      	bne.n	8006688 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800663c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d11f      	bne.n	8006688 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a31      	ldr	r2, [pc, #196]	@ (8006714 <HAL_ADC_ConfigChannel+0x864>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d104      	bne.n	800665c <HAL_ADC_ConfigChannel+0x7ac>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a34      	ldr	r2, [pc, #208]	@ (8006728 <HAL_ADC_ConfigChannel+0x878>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d047      	beq.n	80066ec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006664:	d004      	beq.n	8006670 <HAL_ADC_ConfigChannel+0x7c0>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a2a      	ldr	r2, [pc, #168]	@ (8006714 <HAL_ADC_ConfigChannel+0x864>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d101      	bne.n	8006674 <HAL_ADC_ConfigChannel+0x7c4>
 8006670:	4a29      	ldr	r2, [pc, #164]	@ (8006718 <HAL_ADC_ConfigChannel+0x868>)
 8006672:	e000      	b.n	8006676 <HAL_ADC_ConfigChannel+0x7c6>
 8006674:	4a23      	ldr	r2, [pc, #140]	@ (8006704 <HAL_ADC_ConfigChannel+0x854>)
 8006676:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800667a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800667e:	4619      	mov	r1, r3
 8006680:	4610      	mov	r0, r2
 8006682:	f7fe fcd0 	bl	8005026 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006686:	e031      	b.n	80066ec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a27      	ldr	r2, [pc, #156]	@ (800672c <HAL_ADC_ConfigChannel+0x87c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d12d      	bne.n	80066ee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006692:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d127      	bne.n	80066ee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006714 <HAL_ADC_ConfigChannel+0x864>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d022      	beq.n	80066ee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066b0:	d004      	beq.n	80066bc <HAL_ADC_ConfigChannel+0x80c>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a17      	ldr	r2, [pc, #92]	@ (8006714 <HAL_ADC_ConfigChannel+0x864>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d101      	bne.n	80066c0 <HAL_ADC_ConfigChannel+0x810>
 80066bc:	4a16      	ldr	r2, [pc, #88]	@ (8006718 <HAL_ADC_ConfigChannel+0x868>)
 80066be:	e000      	b.n	80066c2 <HAL_ADC_ConfigChannel+0x812>
 80066c0:	4a10      	ldr	r2, [pc, #64]	@ (8006704 <HAL_ADC_ConfigChannel+0x854>)
 80066c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80066ca:	4619      	mov	r1, r3
 80066cc:	4610      	mov	r0, r2
 80066ce:	f7fe fcaa 	bl	8005026 <LL_ADC_SetCommonPathInternalCh>
 80066d2:	e00c      	b.n	80066ee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066d8:	f043 0220 	orr.w	r2, r3, #32
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80066e6:	e002      	b.n	80066ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80066e8:	bf00      	nop
 80066ea:	e000      	b.n	80066ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80066f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	37d8      	adds	r7, #216	@ 0xd8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	50000700 	.word	0x50000700
 8006708:	c3210000 	.word	0xc3210000
 800670c:	90c00010 	.word	0x90c00010
 8006710:	50000600 	.word	0x50000600
 8006714:	50000100 	.word	0x50000100
 8006718:	50000300 	.word	0x50000300
 800671c:	20000264 	.word	0x20000264
 8006720:	053e2d63 	.word	0x053e2d63
 8006724:	c7520000 	.word	0xc7520000
 8006728:	50000500 	.word	0x50000500
 800672c:	cb840000 	.word	0xcb840000

08006730 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006738:	2300      	movs	r3, #0
 800673a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe fe4f 	bl	80053e4 <LL_ADC_IsEnabled>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d176      	bne.n	800683a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	4b3c      	ldr	r3, [pc, #240]	@ (8006844 <ADC_Enable+0x114>)
 8006754:	4013      	ands	r3, r2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00d      	beq.n	8006776 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800675e:	f043 0210 	orr.w	r2, r3, #16
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800676a:	f043 0201 	orr.w	r2, r3, #1
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e062      	b.n	800683c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe fe1e 	bl	80053bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006788:	d004      	beq.n	8006794 <ADC_Enable+0x64>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a2e      	ldr	r2, [pc, #184]	@ (8006848 <ADC_Enable+0x118>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d101      	bne.n	8006798 <ADC_Enable+0x68>
 8006794:	4b2d      	ldr	r3, [pc, #180]	@ (800684c <ADC_Enable+0x11c>)
 8006796:	e000      	b.n	800679a <ADC_Enable+0x6a>
 8006798:	4b2d      	ldr	r3, [pc, #180]	@ (8006850 <ADC_Enable+0x120>)
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fc56 	bl	800504c <LL_ADC_GetCommonPathInternalCh>
 80067a0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80067a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d013      	beq.n	80067d2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80067aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006854 <ADC_Enable+0x124>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	099b      	lsrs	r3, r3, #6
 80067b0:	4a29      	ldr	r2, [pc, #164]	@ (8006858 <ADC_Enable+0x128>)
 80067b2:	fba2 2303 	umull	r2, r3, r2, r3
 80067b6:	099b      	lsrs	r3, r3, #6
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	4613      	mov	r3, r2
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80067c4:	e002      	b.n	80067cc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f9      	bne.n	80067c6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80067d2:	f7fe fc09 	bl	8004fe8 <HAL_GetTick>
 80067d6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067d8:	e028      	b.n	800682c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fe fe00 	bl	80053e4 <LL_ADC_IsEnabled>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d104      	bne.n	80067f4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe fde4 	bl	80053bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80067f4:	f7fe fbf8 	bl	8004fe8 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d914      	bls.n	800682c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b01      	cmp	r3, #1
 800680e:	d00d      	beq.n	800682c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006814:	f043 0210 	orr.w	r2, r3, #16
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006820:	f043 0201 	orr.w	r2, r3, #1
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e007      	b.n	800683c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b01      	cmp	r3, #1
 8006838:	d1cf      	bne.n	80067da <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	8000003f 	.word	0x8000003f
 8006848:	50000100 	.word	0x50000100
 800684c:	50000300 	.word	0x50000300
 8006850:	50000700 	.word	0x50000700
 8006854:	20000264 	.word	0x20000264
 8006858:	053e2d63 	.word	0x053e2d63

0800685c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006868:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800686e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006872:	2b00      	cmp	r3, #0
 8006874:	d14b      	bne.n	800690e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800687a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0308 	and.w	r3, r3, #8
 800688c:	2b00      	cmp	r3, #0
 800688e:	d021      	beq.n	80068d4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4618      	mov	r0, r3
 8006896:	f7fe fc85 	bl	80051a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d032      	beq.n	8006906 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d12b      	bne.n	8006906 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d11f      	bne.n	8006906 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ca:	f043 0201 	orr.w	r2, r3, #1
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80068d2:	e018      	b.n	8006906 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d111      	bne.n	8006906 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d105      	bne.n	8006906 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068fe:	f043 0201 	orr.w	r2, r3, #1
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff faaa 	bl	8005e60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800690c:	e00e      	b.n	800692c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006912:	f003 0310 	and.w	r3, r3, #16
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff fabe 	bl	8005e9c <HAL_ADC_ErrorCallback>
}
 8006920:	e004      	b.n	800692c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	4798      	blx	r3
}
 800692c:	bf00      	nop
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006940:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f7ff fa96 	bl	8005e74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006962:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800696e:	f043 0204 	orr.w	r2, r3, #4
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7ff fa90 	bl	8005e9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800697c:	bf00      	nop
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <LL_ADC_IsEnabled>:
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <LL_ADC_IsEnabled+0x18>
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <LL_ADC_IsEnabled+0x1a>
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <LL_ADC_REG_IsConversionOngoing>:
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d101      	bne.n	80069c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80069be:	2301      	movs	r3, #1
 80069c0:	e000      	b.n	80069c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006a34:	b590      	push	{r4, r7, lr}
 8006a36:	b0a1      	sub	sp, #132	@ 0x84
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e0e7      	b.n	8006c22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006a5e:	2300      	movs	r3, #0
 8006a60:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a6a:	d102      	bne.n	8006a72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8006c2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006a6e:	60bb      	str	r3, [r7, #8]
 8006a70:	e009      	b.n	8006a86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a6e      	ldr	r2, [pc, #440]	@ (8006c30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d102      	bne.n	8006a82 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006a7c:	4b6d      	ldr	r3, [pc, #436]	@ (8006c34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006a7e:	60bb      	str	r3, [r7, #8]
 8006a80:	e001      	b.n	8006a86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006a82:	2300      	movs	r3, #0
 8006a84:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10b      	bne.n	8006aa4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a90:	f043 0220 	orr.w	r2, r3, #32
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e0be      	b.n	8006c22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff ff7f 	bl	80069aa <LL_ADC_REG_IsConversionOngoing>
 8006aac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7ff ff79 	bl	80069aa <LL_ADC_REG_IsConversionOngoing>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f040 80a0 	bne.w	8006c00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f040 809c 	bne.w	8006c00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ad0:	d004      	beq.n	8006adc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a55      	ldr	r2, [pc, #340]	@ (8006c2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d101      	bne.n	8006ae0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006adc:	4b56      	ldr	r3, [pc, #344]	@ (8006c38 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006ade:	e000      	b.n	8006ae2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006ae0:	4b56      	ldr	r3, [pc, #344]	@ (8006c3c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006ae2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d04b      	beq.n	8006b84 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006aec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	6859      	ldr	r1, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006afe:	035b      	lsls	r3, r3, #13
 8006b00:	430b      	orrs	r3, r1
 8006b02:	431a      	orrs	r2, r3
 8006b04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b10:	d004      	beq.n	8006b1c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a45      	ldr	r2, [pc, #276]	@ (8006c2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d10f      	bne.n	8006b3c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006b1c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006b20:	f7ff ff30 	bl	8006984 <LL_ADC_IsEnabled>
 8006b24:	4604      	mov	r4, r0
 8006b26:	4841      	ldr	r0, [pc, #260]	@ (8006c2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006b28:	f7ff ff2c 	bl	8006984 <LL_ADC_IsEnabled>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	4323      	orrs	r3, r4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bf0c      	ite	eq
 8006b34:	2301      	moveq	r3, #1
 8006b36:	2300      	movne	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	e012      	b.n	8006b62 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006b3c:	483c      	ldr	r0, [pc, #240]	@ (8006c30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006b3e:	f7ff ff21 	bl	8006984 <LL_ADC_IsEnabled>
 8006b42:	4604      	mov	r4, r0
 8006b44:	483b      	ldr	r0, [pc, #236]	@ (8006c34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006b46:	f7ff ff1d 	bl	8006984 <LL_ADC_IsEnabled>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	431c      	orrs	r4, r3
 8006b4e:	483c      	ldr	r0, [pc, #240]	@ (8006c40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006b50:	f7ff ff18 	bl	8006984 <LL_ADC_IsEnabled>
 8006b54:	4603      	mov	r3, r0
 8006b56:	4323      	orrs	r3, r4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	bf0c      	ite	eq
 8006b5c:	2301      	moveq	r3, #1
 8006b5e:	2300      	movne	r3, #0
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d056      	beq.n	8006c14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006b66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006b6e:	f023 030f 	bic.w	r3, r3, #15
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	6811      	ldr	r1, [r2, #0]
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	6892      	ldr	r2, [r2, #8]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b80:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006b82:	e047      	b.n	8006c14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006b84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b98:	d004      	beq.n	8006ba4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a23      	ldr	r2, [pc, #140]	@ (8006c2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d10f      	bne.n	8006bc4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006ba4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006ba8:	f7ff feec 	bl	8006984 <LL_ADC_IsEnabled>
 8006bac:	4604      	mov	r4, r0
 8006bae:	481f      	ldr	r0, [pc, #124]	@ (8006c2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006bb0:	f7ff fee8 	bl	8006984 <LL_ADC_IsEnabled>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	4323      	orrs	r3, r4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	bf0c      	ite	eq
 8006bbc:	2301      	moveq	r3, #1
 8006bbe:	2300      	movne	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	e012      	b.n	8006bea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006bc4:	481a      	ldr	r0, [pc, #104]	@ (8006c30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006bc6:	f7ff fedd 	bl	8006984 <LL_ADC_IsEnabled>
 8006bca:	4604      	mov	r4, r0
 8006bcc:	4819      	ldr	r0, [pc, #100]	@ (8006c34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006bce:	f7ff fed9 	bl	8006984 <LL_ADC_IsEnabled>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	431c      	orrs	r4, r3
 8006bd6:	481a      	ldr	r0, [pc, #104]	@ (8006c40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006bd8:	f7ff fed4 	bl	8006984 <LL_ADC_IsEnabled>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	4323      	orrs	r3, r4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	bf0c      	ite	eq
 8006be4:	2301      	moveq	r3, #1
 8006be6:	2300      	movne	r3, #0
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d012      	beq.n	8006c14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006bee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006bf6:	f023 030f 	bic.w	r3, r3, #15
 8006bfa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006bfc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006bfe:	e009      	b.n	8006c14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c04:	f043 0220 	orr.w	r2, r3, #32
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006c12:	e000      	b.n	8006c16 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006c14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006c1e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3784      	adds	r7, #132	@ 0x84
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd90      	pop	{r4, r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	50000100 	.word	0x50000100
 8006c30:	50000400 	.word	0x50000400
 8006c34:	50000500 	.word	0x50000500
 8006c38:	50000300 	.word	0x50000300
 8006c3c:	50000700 	.word	0x50000700
 8006c40:	50000600 	.word	0x50000600

08006c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c54:	4b0c      	ldr	r3, [pc, #48]	@ (8006c88 <__NVIC_SetPriorityGrouping+0x44>)
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006c60:	4013      	ands	r3, r2
 8006c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c76:	4a04      	ldr	r2, [pc, #16]	@ (8006c88 <__NVIC_SetPriorityGrouping+0x44>)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	60d3      	str	r3, [r2, #12]
}
 8006c7c:	bf00      	nop
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	e000ed00 	.word	0xe000ed00

08006c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c90:	4b04      	ldr	r3, [pc, #16]	@ (8006ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	0a1b      	lsrs	r3, r3, #8
 8006c96:	f003 0307 	and.w	r3, r3, #7
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	e000ed00 	.word	0xe000ed00

08006ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	db0b      	blt.n	8006cd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	f003 021f 	and.w	r2, r3, #31
 8006cc0:	4907      	ldr	r1, [pc, #28]	@ (8006ce0 <__NVIC_EnableIRQ+0x38>)
 8006cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cc6:	095b      	lsrs	r3, r3, #5
 8006cc8:	2001      	movs	r0, #1
 8006cca:	fa00 f202 	lsl.w	r2, r0, r2
 8006cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	e000e100 	.word	0xe000e100

08006ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	4603      	mov	r3, r0
 8006cec:	6039      	str	r1, [r7, #0]
 8006cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	db0a      	blt.n	8006d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	490c      	ldr	r1, [pc, #48]	@ (8006d30 <__NVIC_SetPriority+0x4c>)
 8006cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d02:	0112      	lsls	r2, r2, #4
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	440b      	add	r3, r1
 8006d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d0c:	e00a      	b.n	8006d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	4908      	ldr	r1, [pc, #32]	@ (8006d34 <__NVIC_SetPriority+0x50>)
 8006d14:	79fb      	ldrb	r3, [r7, #7]
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	3b04      	subs	r3, #4
 8006d1c:	0112      	lsls	r2, r2, #4
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	440b      	add	r3, r1
 8006d22:	761a      	strb	r2, [r3, #24]
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	e000e100 	.word	0xe000e100
 8006d34:	e000ed00 	.word	0xe000ed00

08006d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b089      	sub	sp, #36	@ 0x24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f003 0307 	and.w	r3, r3, #7
 8006d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f1c3 0307 	rsb	r3, r3, #7
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	bf28      	it	cs
 8006d56:	2304      	movcs	r3, #4
 8006d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	2b06      	cmp	r3, #6
 8006d60:	d902      	bls.n	8006d68 <NVIC_EncodePriority+0x30>
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	3b03      	subs	r3, #3
 8006d66:	e000      	b.n	8006d6a <NVIC_EncodePriority+0x32>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	fa02 f303 	lsl.w	r3, r2, r3
 8006d76:	43da      	mvns	r2, r3
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	401a      	ands	r2, r3
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d80:	f04f 31ff 	mov.w	r1, #4294967295
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8a:	43d9      	mvns	r1, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d90:	4313      	orrs	r3, r2
         );
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3724      	adds	r7, #36	@ 0x24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
	...

08006da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006db0:	d301      	bcc.n	8006db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006db2:	2301      	movs	r3, #1
 8006db4:	e00f      	b.n	8006dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006db6:	4a0a      	ldr	r2, [pc, #40]	@ (8006de0 <SysTick_Config+0x40>)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006dbe:	210f      	movs	r1, #15
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	f7ff ff8e 	bl	8006ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006dc8:	4b05      	ldr	r3, [pc, #20]	@ (8006de0 <SysTick_Config+0x40>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006dce:	4b04      	ldr	r3, [pc, #16]	@ (8006de0 <SysTick_Config+0x40>)
 8006dd0:	2207      	movs	r2, #7
 8006dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	e000e010 	.word	0xe000e010

08006de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7ff ff29 	bl	8006c44 <__NVIC_SetPriorityGrouping>
}
 8006df2:	bf00      	nop
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b086      	sub	sp, #24
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	4603      	mov	r3, r0
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	607a      	str	r2, [r7, #4]
 8006e06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e08:	f7ff ff40 	bl	8006c8c <__NVIC_GetPriorityGrouping>
 8006e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	68b9      	ldr	r1, [r7, #8]
 8006e12:	6978      	ldr	r0, [r7, #20]
 8006e14:	f7ff ff90 	bl	8006d38 <NVIC_EncodePriority>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e1e:	4611      	mov	r1, r2
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff ff5f 	bl	8006ce4 <__NVIC_SetPriority>
}
 8006e26:	bf00      	nop
 8006e28:	3718      	adds	r7, #24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b082      	sub	sp, #8
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	4603      	mov	r3, r0
 8006e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff ff33 	bl	8006ca8 <__NVIC_EnableIRQ>
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b082      	sub	sp, #8
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff ffa4 	bl	8006da0 <SysTick_Config>
 8006e58:	4603      	mov	r3, r0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e08d      	b.n	8006f92 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	4b47      	ldr	r3, [pc, #284]	@ (8006f9c <HAL_DMA_Init+0x138>)
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d80f      	bhi.n	8006ea2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	4b45      	ldr	r3, [pc, #276]	@ (8006fa0 <HAL_DMA_Init+0x13c>)
 8006e8a:	4413      	add	r3, r2
 8006e8c:	4a45      	ldr	r2, [pc, #276]	@ (8006fa4 <HAL_DMA_Init+0x140>)
 8006e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e92:	091b      	lsrs	r3, r3, #4
 8006e94:	009a      	lsls	r2, r3, #2
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a42      	ldr	r2, [pc, #264]	@ (8006fa8 <HAL_DMA_Init+0x144>)
 8006e9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006ea0:	e00e      	b.n	8006ec0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	4b40      	ldr	r3, [pc, #256]	@ (8006fac <HAL_DMA_Init+0x148>)
 8006eaa:	4413      	add	r3, r2
 8006eac:	4a3d      	ldr	r2, [pc, #244]	@ (8006fa4 <HAL_DMA_Init+0x140>)
 8006eae:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb2:	091b      	lsrs	r3, r3, #4
 8006eb4:	009a      	lsls	r2, r3, #2
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a3c      	ldr	r2, [pc, #240]	@ (8006fb0 <HAL_DMA_Init+0x14c>)
 8006ebe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa76 	bl	8007404 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f20:	d102      	bne.n	8006f28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f30:	b2d2      	uxtb	r2, r2
 8006f32:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006f3c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d010      	beq.n	8006f68 <HAL_DMA_Init+0x104>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d80c      	bhi.n	8006f68 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fa96 	bl	8007480 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006f64:	605a      	str	r2, [r3, #4]
 8006f66:	e008      	b.n	8006f7a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	40020407 	.word	0x40020407
 8006fa0:	bffdfff8 	.word	0xbffdfff8
 8006fa4:	cccccccd 	.word	0xcccccccd
 8006fa8:	40020000 	.word	0x40020000
 8006fac:	bffdfbf8 	.word	0xbffdfbf8
 8006fb0:	40020400 	.word	0x40020400

08006fb4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_DMA_Start_IT+0x20>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e066      	b.n	80070a2 <HAL_DMA_Start_IT+0xee>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d155      	bne.n	8007094 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0201 	bic.w	r2, r2, #1
 8007004:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	68b9      	ldr	r1, [r7, #8]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f9bb 	bl	8007388 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007016:	2b00      	cmp	r3, #0
 8007018:	d008      	beq.n	800702c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f042 020e 	orr.w	r2, r2, #14
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	e00f      	b.n	800704c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0204 	bic.w	r2, r2, #4
 800703a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 020a 	orr.w	r2, r2, #10
 800704a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d007      	beq.n	800706a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007064:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007068:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800706e:	2b00      	cmp	r3, #0
 8007070:	d007      	beq.n	8007082 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800707c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007080:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0201 	orr.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	e005      	b.n	80070a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800709c:	2302      	movs	r3, #2
 800709e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d005      	beq.n	80070ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2204      	movs	r2, #4
 80070c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	73fb      	strb	r3, [r7, #15]
 80070cc:	e037      	b.n	800713e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 020e 	bic.w	r2, r2, #14
 80070dc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070ec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0201 	bic.w	r2, r2, #1
 80070fc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007102:	f003 021f 	and.w	r2, r3, #31
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710a:	2101      	movs	r1, #1
 800710c:	fa01 f202 	lsl.w	r2, r1, r2
 8007110:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800711a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00c      	beq.n	800713e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800712e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007132:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800713c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800714e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b02      	cmp	r3, #2
 8007172:	d00d      	beq.n	8007190 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2204      	movs	r2, #4
 8007178:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	73fb      	strb	r3, [r7, #15]
 800718e:	e047      	b.n	8007220 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 020e 	bic.w	r2, r2, #14
 800719e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0201 	bic.w	r2, r2, #1
 80071ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c4:	f003 021f 	and.w	r2, r3, #31
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071cc:	2101      	movs	r1, #1
 80071ce:	fa01 f202 	lsl.w	r2, r1, r2
 80071d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80071dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00c      	beq.n	8007200 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80071fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	4798      	blx	r3
    }
  }
  return status;
 8007220:	7bfb      	ldrb	r3, [r7, #15]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007246:	f003 031f 	and.w	r3, r3, #31
 800724a:	2204      	movs	r2, #4
 800724c:	409a      	lsls	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	4013      	ands	r3, r2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d026      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x7a>
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d021      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b00      	cmp	r3, #0
 800726c:	d107      	bne.n	800727e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0204 	bic.w	r2, r2, #4
 800727c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007282:	f003 021f 	and.w	r2, r3, #31
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728a:	2104      	movs	r1, #4
 800728c:	fa01 f202 	lsl.w	r2, r1, r2
 8007290:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007296:	2b00      	cmp	r3, #0
 8007298:	d071      	beq.n	800737e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80072a2:	e06c      	b.n	800737e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	2202      	movs	r2, #2
 80072ae:	409a      	lsls	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4013      	ands	r3, r2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d02e      	beq.n	8007316 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d029      	beq.n	8007316 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10b      	bne.n	80072e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 020a 	bic.w	r2, r2, #10
 80072de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ec:	f003 021f 	and.w	r2, r3, #31
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f4:	2102      	movs	r1, #2
 80072f6:	fa01 f202 	lsl.w	r2, r1, r2
 80072fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d038      	beq.n	800737e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007314:	e033      	b.n	800737e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800731a:	f003 031f 	and.w	r3, r3, #31
 800731e:	2208      	movs	r2, #8
 8007320:	409a      	lsls	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4013      	ands	r3, r2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d02a      	beq.n	8007380 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	2b00      	cmp	r3, #0
 8007332:	d025      	beq.n	8007380 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 020e 	bic.w	r2, r2, #14
 8007342:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007348:	f003 021f 	and.w	r2, r3, #31
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007350:	2101      	movs	r1, #1
 8007352:	fa01 f202 	lsl.w	r2, r1, r2
 8007356:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007372:	2b00      	cmp	r3, #0
 8007374:	d004      	beq.n	8007380 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800737e:	bf00      	nop
 8007380:	bf00      	nop
}
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800739e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d004      	beq.n	80073b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80073b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b6:	f003 021f 	and.w	r2, r3, #31
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073be:	2101      	movs	r1, #1
 80073c0:	fa01 f202 	lsl.w	r2, r1, r2
 80073c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	2b10      	cmp	r3, #16
 80073d4:	d108      	bne.n	80073e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80073e6:	e007      	b.n	80073f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	60da      	str	r2, [r3, #12]
}
 80073f8:	bf00      	nop
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	461a      	mov	r2, r3
 8007412:	4b16      	ldr	r3, [pc, #88]	@ (800746c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007414:	429a      	cmp	r2, r3
 8007416:	d802      	bhi.n	800741e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007418:	4b15      	ldr	r3, [pc, #84]	@ (8007470 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	e001      	b.n	8007422 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800741e:	4b15      	ldr	r3, [pc, #84]	@ (8007474 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007420:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	3b08      	subs	r3, #8
 800742e:	4a12      	ldr	r2, [pc, #72]	@ (8007478 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007430:	fba2 2303 	umull	r2, r3, r2, r3
 8007434:	091b      	lsrs	r3, r3, #4
 8007436:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743c:	089b      	lsrs	r3, r3, #2
 800743e:	009a      	lsls	r2, r3, #2
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	4413      	add	r3, r2
 8007444:	461a      	mov	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a0b      	ldr	r2, [pc, #44]	@ (800747c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800744e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f003 031f 	and.w	r3, r3, #31
 8007456:	2201      	movs	r2, #1
 8007458:	409a      	lsls	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800745e:	bf00      	nop
 8007460:	371c      	adds	r7, #28
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	40020407 	.word	0x40020407
 8007470:	40020800 	.word	0x40020800
 8007474:	40020820 	.word	0x40020820
 8007478:	cccccccd 	.word	0xcccccccd
 800747c:	40020880 	.word	0x40020880

08007480 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	b2db      	uxtb	r3, r3
 800748e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4b0b      	ldr	r3, [pc, #44]	@ (80074c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007494:	4413      	add	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	461a      	mov	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a08      	ldr	r2, [pc, #32]	@ (80074c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80074a2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	f003 031f 	and.w	r3, r3, #31
 80074ac:	2201      	movs	r2, #1
 80074ae:	409a      	lsls	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80074b4:	bf00      	nop
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	1000823f 	.word	0x1000823f
 80074c4:	40020940 	.word	0x40020940

080074c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80074d6:	e15a      	b.n	800778e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	2101      	movs	r1, #1
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	fa01 f303 	lsl.w	r3, r1, r3
 80074e4:	4013      	ands	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 814c 	beq.w	8007788 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f003 0303 	and.w	r3, r3, #3
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d005      	beq.n	8007508 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007504:	2b02      	cmp	r3, #2
 8007506:	d130      	bne.n	800756a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	2203      	movs	r2, #3
 8007514:	fa02 f303 	lsl.w	r3, r2, r3
 8007518:	43db      	mvns	r3, r3
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	4013      	ands	r3, r2
 800751e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	fa02 f303 	lsl.w	r3, r2, r3
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	4313      	orrs	r3, r2
 8007530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800753e:	2201      	movs	r2, #1
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	fa02 f303 	lsl.w	r3, r2, r3
 8007546:	43db      	mvns	r3, r3
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	4013      	ands	r3, r2
 800754c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	091b      	lsrs	r3, r3, #4
 8007554:	f003 0201 	and.w	r2, r3, #1
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	fa02 f303 	lsl.w	r3, r2, r3
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	4313      	orrs	r3, r2
 8007562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	2b03      	cmp	r3, #3
 8007574:	d017      	beq.n	80075a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	2203      	movs	r2, #3
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	43db      	mvns	r3, r3
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4013      	ands	r3, r2
 800758c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	fa02 f303 	lsl.w	r3, r2, r3
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	4313      	orrs	r3, r2
 800759e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f003 0303 	and.w	r3, r3, #3
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d123      	bne.n	80075fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	08da      	lsrs	r2, r3, #3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3208      	adds	r2, #8
 80075ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f003 0307 	and.w	r3, r3, #7
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	220f      	movs	r2, #15
 80075ca:	fa02 f303 	lsl.w	r3, r2, r3
 80075ce:	43db      	mvns	r3, r3
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	4013      	ands	r3, r2
 80075d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	691a      	ldr	r2, [r3, #16]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	fa02 f303 	lsl.w	r3, r2, r3
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	08da      	lsrs	r2, r3, #3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3208      	adds	r2, #8
 80075f4:	6939      	ldr	r1, [r7, #16]
 80075f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	2203      	movs	r2, #3
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	43db      	mvns	r3, r3
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	4013      	ands	r3, r2
 8007610:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f003 0203 	and.w	r2, r3, #3
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	fa02 f303 	lsl.w	r3, r2, r3
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	4313      	orrs	r3, r2
 8007626:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 80a6 	beq.w	8007788 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800763c:	4b5b      	ldr	r3, [pc, #364]	@ (80077ac <HAL_GPIO_Init+0x2e4>)
 800763e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007640:	4a5a      	ldr	r2, [pc, #360]	@ (80077ac <HAL_GPIO_Init+0x2e4>)
 8007642:	f043 0301 	orr.w	r3, r3, #1
 8007646:	6613      	str	r3, [r2, #96]	@ 0x60
 8007648:	4b58      	ldr	r3, [pc, #352]	@ (80077ac <HAL_GPIO_Init+0x2e4>)
 800764a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	60bb      	str	r3, [r7, #8]
 8007652:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007654:	4a56      	ldr	r2, [pc, #344]	@ (80077b0 <HAL_GPIO_Init+0x2e8>)
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	089b      	lsrs	r3, r3, #2
 800765a:	3302      	adds	r3, #2
 800765c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f003 0303 	and.w	r3, r3, #3
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	220f      	movs	r2, #15
 800766c:	fa02 f303 	lsl.w	r3, r2, r3
 8007670:	43db      	mvns	r3, r3
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	4013      	ands	r3, r2
 8007676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800767e:	d01f      	beq.n	80076c0 <HAL_GPIO_Init+0x1f8>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a4c      	ldr	r2, [pc, #304]	@ (80077b4 <HAL_GPIO_Init+0x2ec>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d019      	beq.n	80076bc <HAL_GPIO_Init+0x1f4>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a4b      	ldr	r2, [pc, #300]	@ (80077b8 <HAL_GPIO_Init+0x2f0>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d013      	beq.n	80076b8 <HAL_GPIO_Init+0x1f0>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a4a      	ldr	r2, [pc, #296]	@ (80077bc <HAL_GPIO_Init+0x2f4>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d00d      	beq.n	80076b4 <HAL_GPIO_Init+0x1ec>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a49      	ldr	r2, [pc, #292]	@ (80077c0 <HAL_GPIO_Init+0x2f8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d007      	beq.n	80076b0 <HAL_GPIO_Init+0x1e8>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a48      	ldr	r2, [pc, #288]	@ (80077c4 <HAL_GPIO_Init+0x2fc>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d101      	bne.n	80076ac <HAL_GPIO_Init+0x1e4>
 80076a8:	2305      	movs	r3, #5
 80076aa:	e00a      	b.n	80076c2 <HAL_GPIO_Init+0x1fa>
 80076ac:	2306      	movs	r3, #6
 80076ae:	e008      	b.n	80076c2 <HAL_GPIO_Init+0x1fa>
 80076b0:	2304      	movs	r3, #4
 80076b2:	e006      	b.n	80076c2 <HAL_GPIO_Init+0x1fa>
 80076b4:	2303      	movs	r3, #3
 80076b6:	e004      	b.n	80076c2 <HAL_GPIO_Init+0x1fa>
 80076b8:	2302      	movs	r3, #2
 80076ba:	e002      	b.n	80076c2 <HAL_GPIO_Init+0x1fa>
 80076bc:	2301      	movs	r3, #1
 80076be:	e000      	b.n	80076c2 <HAL_GPIO_Init+0x1fa>
 80076c0:	2300      	movs	r3, #0
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	f002 0203 	and.w	r2, r2, #3
 80076c8:	0092      	lsls	r2, r2, #2
 80076ca:	4093      	lsls	r3, r2
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076d2:	4937      	ldr	r1, [pc, #220]	@ (80077b0 <HAL_GPIO_Init+0x2e8>)
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	089b      	lsrs	r3, r3, #2
 80076d8:	3302      	adds	r3, #2
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80076e0:	4b39      	ldr	r3, [pc, #228]	@ (80077c8 <HAL_GPIO_Init+0x300>)
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	43db      	mvns	r3, r3
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	4013      	ands	r3, r2
 80076ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007704:	4a30      	ldr	r2, [pc, #192]	@ (80077c8 <HAL_GPIO_Init+0x300>)
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800770a:	4b2f      	ldr	r3, [pc, #188]	@ (80077c8 <HAL_GPIO_Init+0x300>)
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	43db      	mvns	r3, r3
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	4013      	ands	r3, r2
 8007718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4313      	orrs	r3, r2
 800772c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800772e:	4a26      	ldr	r2, [pc, #152]	@ (80077c8 <HAL_GPIO_Init+0x300>)
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007734:	4b24      	ldr	r3, [pc, #144]	@ (80077c8 <HAL_GPIO_Init+0x300>)
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	43db      	mvns	r3, r3
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4013      	ands	r3, r2
 8007742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007758:	4a1b      	ldr	r2, [pc, #108]	@ (80077c8 <HAL_GPIO_Init+0x300>)
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800775e:	4b1a      	ldr	r3, [pc, #104]	@ (80077c8 <HAL_GPIO_Init+0x300>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	43db      	mvns	r3, r3
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4013      	ands	r3, r2
 800776c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4313      	orrs	r3, r2
 8007780:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007782:	4a11      	ldr	r2, [pc, #68]	@ (80077c8 <HAL_GPIO_Init+0x300>)
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	3301      	adds	r3, #1
 800778c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	fa22 f303 	lsr.w	r3, r2, r3
 8007798:	2b00      	cmp	r3, #0
 800779a:	f47f ae9d 	bne.w	80074d8 <HAL_GPIO_Init+0x10>
  }
}
 800779e:	bf00      	nop
 80077a0:	bf00      	nop
 80077a2:	371c      	adds	r7, #28
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	40021000 	.word	0x40021000
 80077b0:	40010000 	.word	0x40010000
 80077b4:	48000400 	.word	0x48000400
 80077b8:	48000800 	.word	0x48000800
 80077bc:	48000c00 	.word	0x48000c00
 80077c0:	48001000 	.word	0x48001000
 80077c4:	48001400 	.word	0x48001400
 80077c8:	40010400 	.word	0x40010400

080077cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691a      	ldr	r2, [r3, #16]
 80077dc:	887b      	ldrh	r3, [r7, #2]
 80077de:	4013      	ands	r3, r2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077e4:	2301      	movs	r3, #1
 80077e6:	73fb      	strb	r3, [r7, #15]
 80077e8:	e001      	b.n	80077ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	460b      	mov	r3, r1
 8007806:	807b      	strh	r3, [r7, #2]
 8007808:	4613      	mov	r3, r2
 800780a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800780c:	787b      	ldrb	r3, [r7, #1]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007812:	887a      	ldrh	r2, [r7, #2]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007818:	e002      	b.n	8007820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800781a:	887a      	ldrh	r2, [r7, #2]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	4603      	mov	r3, r0
 8007834:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007836:	4b08      	ldr	r3, [pc, #32]	@ (8007858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007838:	695a      	ldr	r2, [r3, #20]
 800783a:	88fb      	ldrh	r3, [r7, #6]
 800783c:	4013      	ands	r3, r2
 800783e:	2b00      	cmp	r3, #0
 8007840:	d006      	beq.n	8007850 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007842:	4a05      	ldr	r2, [pc, #20]	@ (8007858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007844:	88fb      	ldrh	r3, [r7, #6]
 8007846:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007848:	88fb      	ldrh	r3, [r7, #6]
 800784a:	4618      	mov	r0, r3
 800784c:	f7fb fec2 	bl	80035d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007850:	bf00      	nop
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	40010400 	.word	0x40010400

0800785c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d141      	bne.n	80078ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800786a:	4b4b      	ldr	r3, [pc, #300]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007876:	d131      	bne.n	80078dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007878:	4b47      	ldr	r3, [pc, #284]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800787a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800787e:	4a46      	ldr	r2, [pc, #280]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007884:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007888:	4b43      	ldr	r3, [pc, #268]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007890:	4a41      	ldr	r2, [pc, #260]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007892:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007896:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007898:	4b40      	ldr	r3, [pc, #256]	@ (800799c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2232      	movs	r2, #50	@ 0x32
 800789e:	fb02 f303 	mul.w	r3, r2, r3
 80078a2:	4a3f      	ldr	r2, [pc, #252]	@ (80079a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80078a4:	fba2 2303 	umull	r2, r3, r2, r3
 80078a8:	0c9b      	lsrs	r3, r3, #18
 80078aa:	3301      	adds	r3, #1
 80078ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078ae:	e002      	b.n	80078b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078b6:	4b38      	ldr	r3, [pc, #224]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078c2:	d102      	bne.n	80078ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1f2      	bne.n	80078b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80078ca:	4b33      	ldr	r3, [pc, #204]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078d6:	d158      	bne.n	800798a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e057      	b.n	800798c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078dc:	4b2e      	ldr	r3, [pc, #184]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078e2:	4a2d      	ldr	r2, [pc, #180]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80078ec:	e04d      	b.n	800798a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078f4:	d141      	bne.n	800797a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80078f6:	4b28      	ldr	r3, [pc, #160]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80078fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007902:	d131      	bne.n	8007968 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007904:	4b24      	ldr	r3, [pc, #144]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800790a:	4a23      	ldr	r2, [pc, #140]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800790c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007910:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007914:	4b20      	ldr	r3, [pc, #128]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800791c:	4a1e      	ldr	r2, [pc, #120]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800791e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007922:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007924:	4b1d      	ldr	r3, [pc, #116]	@ (800799c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2232      	movs	r2, #50	@ 0x32
 800792a:	fb02 f303 	mul.w	r3, r2, r3
 800792e:	4a1c      	ldr	r2, [pc, #112]	@ (80079a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007930:	fba2 2303 	umull	r2, r3, r2, r3
 8007934:	0c9b      	lsrs	r3, r3, #18
 8007936:	3301      	adds	r3, #1
 8007938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800793a:	e002      	b.n	8007942 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3b01      	subs	r3, #1
 8007940:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007942:	4b15      	ldr	r3, [pc, #84]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800794a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800794e:	d102      	bne.n	8007956 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1f2      	bne.n	800793c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007956:	4b10      	ldr	r3, [pc, #64]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800795e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007962:	d112      	bne.n	800798a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e011      	b.n	800798c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007968:	4b0b      	ldr	r3, [pc, #44]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800796a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800796e:	4a0a      	ldr	r2, [pc, #40]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007974:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007978:	e007      	b.n	800798a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800797a:	4b07      	ldr	r3, [pc, #28]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007982:	4a05      	ldr	r2, [pc, #20]	@ (8007998 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007984:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007988:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	40007000 	.word	0x40007000
 800799c:	20000264 	.word	0x20000264
 80079a0:	431bde83 	.word	0x431bde83

080079a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80079a8:	4b05      	ldr	r3, [pc, #20]	@ (80079c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	4a04      	ldr	r2, [pc, #16]	@ (80079c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80079ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80079b2:	6093      	str	r3, [r2, #8]
}
 80079b4:	bf00      	nop
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	40007000 	.word	0x40007000

080079c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e2fe      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d075      	beq.n	8007ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079e2:	4b97      	ldr	r3, [pc, #604]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f003 030c 	and.w	r3, r3, #12
 80079ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079ec:	4b94      	ldr	r3, [pc, #592]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f003 0303 	and.w	r3, r3, #3
 80079f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	2b0c      	cmp	r3, #12
 80079fa:	d102      	bne.n	8007a02 <HAL_RCC_OscConfig+0x3e>
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d002      	beq.n	8007a08 <HAL_RCC_OscConfig+0x44>
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	2b08      	cmp	r3, #8
 8007a06:	d10b      	bne.n	8007a20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a08:	4b8d      	ldr	r3, [pc, #564]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d05b      	beq.n	8007acc <HAL_RCC_OscConfig+0x108>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d157      	bne.n	8007acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e2d9      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a28:	d106      	bne.n	8007a38 <HAL_RCC_OscConfig+0x74>
 8007a2a:	4b85      	ldr	r3, [pc, #532]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a84      	ldr	r2, [pc, #528]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	e01d      	b.n	8007a74 <HAL_RCC_OscConfig+0xb0>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a40:	d10c      	bne.n	8007a5c <HAL_RCC_OscConfig+0x98>
 8007a42:	4b7f      	ldr	r3, [pc, #508]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a7e      	ldr	r2, [pc, #504]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	4b7c      	ldr	r3, [pc, #496]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a7b      	ldr	r2, [pc, #492]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	e00b      	b.n	8007a74 <HAL_RCC_OscConfig+0xb0>
 8007a5c:	4b78      	ldr	r3, [pc, #480]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a77      	ldr	r2, [pc, #476]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	4b75      	ldr	r3, [pc, #468]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a74      	ldr	r2, [pc, #464]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d013      	beq.n	8007aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7c:	f7fd fab4 	bl	8004fe8 <HAL_GetTick>
 8007a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a82:	e008      	b.n	8007a96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a84:	f7fd fab0 	bl	8004fe8 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	2b64      	cmp	r3, #100	@ 0x64
 8007a90:	d901      	bls.n	8007a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e29e      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a96:	4b6a      	ldr	r3, [pc, #424]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0f0      	beq.n	8007a84 <HAL_RCC_OscConfig+0xc0>
 8007aa2:	e014      	b.n	8007ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa4:	f7fd faa0 	bl	8004fe8 <HAL_GetTick>
 8007aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007aaa:	e008      	b.n	8007abe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007aac:	f7fd fa9c 	bl	8004fe8 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	2b64      	cmp	r3, #100	@ 0x64
 8007ab8:	d901      	bls.n	8007abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e28a      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007abe:	4b60      	ldr	r3, [pc, #384]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1f0      	bne.n	8007aac <HAL_RCC_OscConfig+0xe8>
 8007aca:	e000      	b.n	8007ace <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d075      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ada:	4b59      	ldr	r3, [pc, #356]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f003 030c 	and.w	r3, r3, #12
 8007ae2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ae4:	4b56      	ldr	r3, [pc, #344]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	f003 0303 	and.w	r3, r3, #3
 8007aec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	2b0c      	cmp	r3, #12
 8007af2:	d102      	bne.n	8007afa <HAL_RCC_OscConfig+0x136>
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d002      	beq.n	8007b00 <HAL_RCC_OscConfig+0x13c>
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	2b04      	cmp	r3, #4
 8007afe:	d11f      	bne.n	8007b40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b00:	4b4f      	ldr	r3, [pc, #316]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d005      	beq.n	8007b18 <HAL_RCC_OscConfig+0x154>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e25d      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b18:	4b49      	ldr	r3, [pc, #292]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	061b      	lsls	r3, r3, #24
 8007b26:	4946      	ldr	r1, [pc, #280]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007b2c:	4b45      	ldr	r3, [pc, #276]	@ (8007c44 <HAL_RCC_OscConfig+0x280>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fd fa0d 	bl	8004f50 <HAL_InitTick>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d043      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e249      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d023      	beq.n	8007b90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b48:	4b3d      	ldr	r3, [pc, #244]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a3c      	ldr	r2, [pc, #240]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b54:	f7fd fa48 	bl	8004fe8 <HAL_GetTick>
 8007b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b5a:	e008      	b.n	8007b6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b5c:	f7fd fa44 	bl	8004fe8 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e232      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b6e:	4b34      	ldr	r3, [pc, #208]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0f0      	beq.n	8007b5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b7a:	4b31      	ldr	r3, [pc, #196]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	061b      	lsls	r3, r3, #24
 8007b88:	492d      	ldr	r1, [pc, #180]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	604b      	str	r3, [r1, #4]
 8007b8e:	e01a      	b.n	8007bc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b90:	4b2b      	ldr	r3, [pc, #172]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a2a      	ldr	r2, [pc, #168]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007b96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9c:	f7fd fa24 	bl	8004fe8 <HAL_GetTick>
 8007ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ba4:	f7fd fa20 	bl	8004fe8 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e20e      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007bb6:	4b22      	ldr	r3, [pc, #136]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f0      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x1e0>
 8007bc2:	e000      	b.n	8007bc6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0308 	and.w	r3, r3, #8
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d041      	beq.n	8007c56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d01c      	beq.n	8007c14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bda:	4b19      	ldr	r3, [pc, #100]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007be0:	4a17      	ldr	r2, [pc, #92]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007be2:	f043 0301 	orr.w	r3, r3, #1
 8007be6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bea:	f7fd f9fd 	bl	8004fe8 <HAL_GetTick>
 8007bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bf0:	e008      	b.n	8007c04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bf2:	f7fd f9f9 	bl	8004fe8 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d901      	bls.n	8007c04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e1e7      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c04:	4b0e      	ldr	r3, [pc, #56]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0ef      	beq.n	8007bf2 <HAL_RCC_OscConfig+0x22e>
 8007c12:	e020      	b.n	8007c56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c14:	4b0a      	ldr	r3, [pc, #40]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c1a:	4a09      	ldr	r2, [pc, #36]	@ (8007c40 <HAL_RCC_OscConfig+0x27c>)
 8007c1c:	f023 0301 	bic.w	r3, r3, #1
 8007c20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c24:	f7fd f9e0 	bl	8004fe8 <HAL_GetTick>
 8007c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c2a:	e00d      	b.n	8007c48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c2c:	f7fd f9dc 	bl	8004fe8 <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d906      	bls.n	8007c48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e1ca      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
 8007c3e:	bf00      	nop
 8007c40:	40021000 	.word	0x40021000
 8007c44:	20000268 	.word	0x20000268
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c48:	4b8c      	ldr	r3, [pc, #560]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1ea      	bne.n	8007c2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0304 	and.w	r3, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 80a6 	beq.w	8007db0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c64:	2300      	movs	r3, #0
 8007c66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c68:	4b84      	ldr	r3, [pc, #528]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <HAL_RCC_OscConfig+0x2b4>
 8007c74:	2301      	movs	r3, #1
 8007c76:	e000      	b.n	8007c7a <HAL_RCC_OscConfig+0x2b6>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00d      	beq.n	8007c9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c82:	4a7e      	ldr	r2, [pc, #504]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c88:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c8a:	4b7c      	ldr	r3, [pc, #496]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007c96:	2301      	movs	r3, #1
 8007c98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c9a:	4b79      	ldr	r3, [pc, #484]	@ (8007e80 <HAL_RCC_OscConfig+0x4bc>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d118      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ca6:	4b76      	ldr	r3, [pc, #472]	@ (8007e80 <HAL_RCC_OscConfig+0x4bc>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a75      	ldr	r2, [pc, #468]	@ (8007e80 <HAL_RCC_OscConfig+0x4bc>)
 8007cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cb2:	f7fd f999 	bl	8004fe8 <HAL_GetTick>
 8007cb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cb8:	e008      	b.n	8007ccc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cba:	f7fd f995 	bl	8004fe8 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d901      	bls.n	8007ccc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e183      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ccc:	4b6c      	ldr	r3, [pc, #432]	@ (8007e80 <HAL_RCC_OscConfig+0x4bc>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0f0      	beq.n	8007cba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d108      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x32e>
 8007ce0:	4b66      	ldr	r3, [pc, #408]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ce6:	4a65      	ldr	r2, [pc, #404]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007ce8:	f043 0301 	orr.w	r3, r3, #1
 8007cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007cf0:	e024      	b.n	8007d3c <HAL_RCC_OscConfig+0x378>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	2b05      	cmp	r3, #5
 8007cf8:	d110      	bne.n	8007d1c <HAL_RCC_OscConfig+0x358>
 8007cfa:	4b60      	ldr	r3, [pc, #384]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d00:	4a5e      	ldr	r2, [pc, #376]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007d02:	f043 0304 	orr.w	r3, r3, #4
 8007d06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d0a:	4b5c      	ldr	r3, [pc, #368]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d10:	4a5a      	ldr	r2, [pc, #360]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007d12:	f043 0301 	orr.w	r3, r3, #1
 8007d16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d1a:	e00f      	b.n	8007d3c <HAL_RCC_OscConfig+0x378>
 8007d1c:	4b57      	ldr	r3, [pc, #348]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d22:	4a56      	ldr	r2, [pc, #344]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007d24:	f023 0301 	bic.w	r3, r3, #1
 8007d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d2c:	4b53      	ldr	r3, [pc, #332]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d32:	4a52      	ldr	r2, [pc, #328]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007d34:	f023 0304 	bic.w	r3, r3, #4
 8007d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d016      	beq.n	8007d72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d44:	f7fd f950 	bl	8004fe8 <HAL_GetTick>
 8007d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d4a:	e00a      	b.n	8007d62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d4c:	f7fd f94c 	bl	8004fe8 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e138      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d62:	4b46      	ldr	r3, [pc, #280]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d0ed      	beq.n	8007d4c <HAL_RCC_OscConfig+0x388>
 8007d70:	e015      	b.n	8007d9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d72:	f7fd f939 	bl	8004fe8 <HAL_GetTick>
 8007d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d78:	e00a      	b.n	8007d90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d7a:	f7fd f935 	bl	8004fe8 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d901      	bls.n	8007d90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e121      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d90:	4b3a      	ldr	r3, [pc, #232]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1ed      	bne.n	8007d7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d9e:	7ffb      	ldrb	r3, [r7, #31]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d105      	bne.n	8007db0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007da4:	4b35      	ldr	r3, [pc, #212]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007da8:	4a34      	ldr	r2, [pc, #208]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007daa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007dae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0320 	and.w	r3, r3, #32
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d03c      	beq.n	8007e36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d01c      	beq.n	8007dfe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dca:	4a2c      	ldr	r2, [pc, #176]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007dcc:	f043 0301 	orr.w	r3, r3, #1
 8007dd0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dd4:	f7fd f908 	bl	8004fe8 <HAL_GetTick>
 8007dd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007dda:	e008      	b.n	8007dee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ddc:	f7fd f904 	bl	8004fe8 <HAL_GetTick>
 8007de0:	4602      	mov	r2, r0
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d901      	bls.n	8007dee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e0f2      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007dee:	4b23      	ldr	r3, [pc, #140]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d0ef      	beq.n	8007ddc <HAL_RCC_OscConfig+0x418>
 8007dfc:	e01b      	b.n	8007e36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e04:	4a1d      	ldr	r2, [pc, #116]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007e06:	f023 0301 	bic.w	r3, r3, #1
 8007e0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e0e:	f7fd f8eb 	bl	8004fe8 <HAL_GetTick>
 8007e12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e14:	e008      	b.n	8007e28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e16:	f7fd f8e7 	bl	8004fe8 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d901      	bls.n	8007e28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e0d5      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e28:	4b14      	ldr	r3, [pc, #80]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1ef      	bne.n	8007e16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 80c9 	beq.w	8007fd2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e40:	4b0e      	ldr	r3, [pc, #56]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f003 030c 	and.w	r3, r3, #12
 8007e48:	2b0c      	cmp	r3, #12
 8007e4a:	f000 8083 	beq.w	8007f54 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d15e      	bne.n	8007f14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e56:	4b09      	ldr	r3, [pc, #36]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a08      	ldr	r2, [pc, #32]	@ (8007e7c <HAL_RCC_OscConfig+0x4b8>)
 8007e5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e62:	f7fd f8c1 	bl	8004fe8 <HAL_GetTick>
 8007e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e68:	e00c      	b.n	8007e84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e6a:	f7fd f8bd 	bl	8004fe8 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d905      	bls.n	8007e84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e0ab      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
 8007e7c:	40021000 	.word	0x40021000
 8007e80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e84:	4b55      	ldr	r3, [pc, #340]	@ (8007fdc <HAL_RCC_OscConfig+0x618>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1ec      	bne.n	8007e6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e90:	4b52      	ldr	r3, [pc, #328]	@ (8007fdc <HAL_RCC_OscConfig+0x618>)
 8007e92:	68da      	ldr	r2, [r3, #12]
 8007e94:	4b52      	ldr	r3, [pc, #328]	@ (8007fe0 <HAL_RCC_OscConfig+0x61c>)
 8007e96:	4013      	ands	r3, r2
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6a11      	ldr	r1, [r2, #32]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007ea0:	3a01      	subs	r2, #1
 8007ea2:	0112      	lsls	r2, r2, #4
 8007ea4:	4311      	orrs	r1, r2
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007eaa:	0212      	lsls	r2, r2, #8
 8007eac:	4311      	orrs	r1, r2
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007eb2:	0852      	lsrs	r2, r2, #1
 8007eb4:	3a01      	subs	r2, #1
 8007eb6:	0552      	lsls	r2, r2, #21
 8007eb8:	4311      	orrs	r1, r2
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007ebe:	0852      	lsrs	r2, r2, #1
 8007ec0:	3a01      	subs	r2, #1
 8007ec2:	0652      	lsls	r2, r2, #25
 8007ec4:	4311      	orrs	r1, r2
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007eca:	06d2      	lsls	r2, r2, #27
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	4943      	ldr	r1, [pc, #268]	@ (8007fdc <HAL_RCC_OscConfig+0x618>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ed4:	4b41      	ldr	r3, [pc, #260]	@ (8007fdc <HAL_RCC_OscConfig+0x618>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a40      	ldr	r2, [pc, #256]	@ (8007fdc <HAL_RCC_OscConfig+0x618>)
 8007eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ede:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8007fdc <HAL_RCC_OscConfig+0x618>)
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	4a3d      	ldr	r2, [pc, #244]	@ (8007fdc <HAL_RCC_OscConfig+0x618>)
 8007ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007eea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eec:	f7fd f87c 	bl	8004fe8 <HAL_GetTick>
 8007ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ef2:	e008      	b.n	8007f06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ef4:	f7fd f878 	bl	8004fe8 <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e066      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f06:	4b35      	ldr	r3, [pc, #212]	@ (8007fdc <HAL_RCC_OscConfig+0x618>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0f0      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x530>
 8007f12:	e05e      	b.n	8007fd2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f14:	4b31      	ldr	r3, [pc, #196]	@ (8007fdc <HAL_RCC_OscConfig+0x618>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a30      	ldr	r2, [pc, #192]	@ (8007fdc <HAL_RCC_OscConfig+0x618>)
 8007f1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f20:	f7fd f862 	bl	8004fe8 <HAL_GetTick>
 8007f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f26:	e008      	b.n	8007f3a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f28:	f7fd f85e 	bl	8004fe8 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e04c      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f3a:	4b28      	ldr	r3, [pc, #160]	@ (8007fdc <HAL_RCC_OscConfig+0x618>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1f0      	bne.n	8007f28 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007f46:	4b25      	ldr	r3, [pc, #148]	@ (8007fdc <HAL_RCC_OscConfig+0x618>)
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	4924      	ldr	r1, [pc, #144]	@ (8007fdc <HAL_RCC_OscConfig+0x618>)
 8007f4c:	4b25      	ldr	r3, [pc, #148]	@ (8007fe4 <HAL_RCC_OscConfig+0x620>)
 8007f4e:	4013      	ands	r3, r2
 8007f50:	60cb      	str	r3, [r1, #12]
 8007f52:	e03e      	b.n	8007fd2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d101      	bne.n	8007f60 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e039      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007f60:	4b1e      	ldr	r3, [pc, #120]	@ (8007fdc <HAL_RCC_OscConfig+0x618>)
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f003 0203 	and.w	r2, r3, #3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d12c      	bne.n	8007fce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d123      	bne.n	8007fce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d11b      	bne.n	8007fce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d113      	bne.n	8007fce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb0:	085b      	lsrs	r3, r3, #1
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d109      	bne.n	8007fce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fc4:	085b      	lsrs	r3, r3, #1
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d001      	beq.n	8007fd2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e000      	b.n	8007fd4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3720      	adds	r7, #32
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	40021000 	.word	0x40021000
 8007fe0:	019f800c 	.word	0x019f800c
 8007fe4:	feeefffc 	.word	0xfeeefffc

08007fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e11e      	b.n	800823e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008000:	4b91      	ldr	r3, [pc, #580]	@ (8008248 <HAL_RCC_ClockConfig+0x260>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 030f 	and.w	r3, r3, #15
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d910      	bls.n	8008030 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800800e:	4b8e      	ldr	r3, [pc, #568]	@ (8008248 <HAL_RCC_ClockConfig+0x260>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f023 020f 	bic.w	r2, r3, #15
 8008016:	498c      	ldr	r1, [pc, #560]	@ (8008248 <HAL_RCC_ClockConfig+0x260>)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	4313      	orrs	r3, r2
 800801c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800801e:	4b8a      	ldr	r3, [pc, #552]	@ (8008248 <HAL_RCC_ClockConfig+0x260>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 030f 	and.w	r3, r3, #15
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	429a      	cmp	r2, r3
 800802a:	d001      	beq.n	8008030 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e106      	b.n	800823e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	d073      	beq.n	8008124 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	2b03      	cmp	r3, #3
 8008042:	d129      	bne.n	8008098 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008044:	4b81      	ldr	r3, [pc, #516]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e0f4      	b.n	800823e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008054:	f000 f99e 	bl	8008394 <RCC_GetSysClockFreqFromPLLSource>
 8008058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	4a7c      	ldr	r2, [pc, #496]	@ (8008250 <HAL_RCC_ClockConfig+0x268>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d93f      	bls.n	80080e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008062:	4b7a      	ldr	r3, [pc, #488]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d009      	beq.n	8008082 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008076:	2b00      	cmp	r3, #0
 8008078:	d033      	beq.n	80080e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800807e:	2b00      	cmp	r3, #0
 8008080:	d12f      	bne.n	80080e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008082:	4b72      	ldr	r3, [pc, #456]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800808a:	4a70      	ldr	r2, [pc, #448]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 800808c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008090:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008092:	2380      	movs	r3, #128	@ 0x80
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	e024      	b.n	80080e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	2b02      	cmp	r3, #2
 800809e:	d107      	bne.n	80080b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080a0:	4b6a      	ldr	r3, [pc, #424]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d109      	bne.n	80080c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e0c6      	b.n	800823e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080b0:	4b66      	ldr	r3, [pc, #408]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e0be      	b.n	800823e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80080c0:	f000 f8ce 	bl	8008260 <HAL_RCC_GetSysClockFreq>
 80080c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	4a61      	ldr	r2, [pc, #388]	@ (8008250 <HAL_RCC_ClockConfig+0x268>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d909      	bls.n	80080e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80080ce:	4b5f      	ldr	r3, [pc, #380]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080d6:	4a5d      	ldr	r2, [pc, #372]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 80080d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80080de:	2380      	movs	r3, #128	@ 0x80
 80080e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80080e2:	4b5a      	ldr	r3, [pc, #360]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f023 0203 	bic.w	r2, r3, #3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	4957      	ldr	r1, [pc, #348]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080f4:	f7fc ff78 	bl	8004fe8 <HAL_GetTick>
 80080f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080fa:	e00a      	b.n	8008112 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080fc:	f7fc ff74 	bl	8004fe8 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800810a:	4293      	cmp	r3, r2
 800810c:	d901      	bls.n	8008112 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e095      	b.n	800823e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008112:	4b4e      	ldr	r3, [pc, #312]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f003 020c 	and.w	r2, r3, #12
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	429a      	cmp	r2, r3
 8008122:	d1eb      	bne.n	80080fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d023      	beq.n	8008178 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b00      	cmp	r3, #0
 800813a:	d005      	beq.n	8008148 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800813c:	4b43      	ldr	r3, [pc, #268]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	4a42      	ldr	r2, [pc, #264]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 8008142:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008146:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0308 	and.w	r3, r3, #8
 8008150:	2b00      	cmp	r3, #0
 8008152:	d007      	beq.n	8008164 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008154:	4b3d      	ldr	r3, [pc, #244]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800815c:	4a3b      	ldr	r2, [pc, #236]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 800815e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008162:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008164:	4b39      	ldr	r3, [pc, #228]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	4936      	ldr	r1, [pc, #216]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 8008172:	4313      	orrs	r3, r2
 8008174:	608b      	str	r3, [r1, #8]
 8008176:	e008      	b.n	800818a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	2b80      	cmp	r3, #128	@ 0x80
 800817c:	d105      	bne.n	800818a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800817e:	4b33      	ldr	r3, [pc, #204]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	4a32      	ldr	r2, [pc, #200]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 8008184:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008188:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800818a:	4b2f      	ldr	r3, [pc, #188]	@ (8008248 <HAL_RCC_ClockConfig+0x260>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 030f 	and.w	r3, r3, #15
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	429a      	cmp	r2, r3
 8008196:	d21d      	bcs.n	80081d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008198:	4b2b      	ldr	r3, [pc, #172]	@ (8008248 <HAL_RCC_ClockConfig+0x260>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f023 020f 	bic.w	r2, r3, #15
 80081a0:	4929      	ldr	r1, [pc, #164]	@ (8008248 <HAL_RCC_ClockConfig+0x260>)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80081a8:	f7fc ff1e 	bl	8004fe8 <HAL_GetTick>
 80081ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ae:	e00a      	b.n	80081c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081b0:	f7fc ff1a 	bl	8004fe8 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081be:	4293      	cmp	r3, r2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e03b      	b.n	800823e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081c6:	4b20      	ldr	r3, [pc, #128]	@ (8008248 <HAL_RCC_ClockConfig+0x260>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 030f 	and.w	r3, r3, #15
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d1ed      	bne.n	80081b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d008      	beq.n	80081f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081e0:	4b1a      	ldr	r3, [pc, #104]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	4917      	ldr	r1, [pc, #92]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0308 	and.w	r3, r3, #8
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d009      	beq.n	8008212 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081fe:	4b13      	ldr	r3, [pc, #76]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	490f      	ldr	r1, [pc, #60]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 800820e:	4313      	orrs	r3, r2
 8008210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008212:	f000 f825 	bl	8008260 <HAL_RCC_GetSysClockFreq>
 8008216:	4602      	mov	r2, r0
 8008218:	4b0c      	ldr	r3, [pc, #48]	@ (800824c <HAL_RCC_ClockConfig+0x264>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	091b      	lsrs	r3, r3, #4
 800821e:	f003 030f 	and.w	r3, r3, #15
 8008222:	490c      	ldr	r1, [pc, #48]	@ (8008254 <HAL_RCC_ClockConfig+0x26c>)
 8008224:	5ccb      	ldrb	r3, [r1, r3]
 8008226:	f003 031f 	and.w	r3, r3, #31
 800822a:	fa22 f303 	lsr.w	r3, r2, r3
 800822e:	4a0a      	ldr	r2, [pc, #40]	@ (8008258 <HAL_RCC_ClockConfig+0x270>)
 8008230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008232:	4b0a      	ldr	r3, [pc, #40]	@ (800825c <HAL_RCC_ClockConfig+0x274>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f7fc fe8a 	bl	8004f50 <HAL_InitTick>
 800823c:	4603      	mov	r3, r0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	40022000 	.word	0x40022000
 800824c:	40021000 	.word	0x40021000
 8008250:	04c4b400 	.word	0x04c4b400
 8008254:	0800ce74 	.word	0x0800ce74
 8008258:	20000264 	.word	0x20000264
 800825c:	20000268 	.word	0x20000268

08008260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008266:	4b2c      	ldr	r3, [pc, #176]	@ (8008318 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f003 030c 	and.w	r3, r3, #12
 800826e:	2b04      	cmp	r3, #4
 8008270:	d102      	bne.n	8008278 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008272:	4b2a      	ldr	r3, [pc, #168]	@ (800831c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008274:	613b      	str	r3, [r7, #16]
 8008276:	e047      	b.n	8008308 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008278:	4b27      	ldr	r3, [pc, #156]	@ (8008318 <HAL_RCC_GetSysClockFreq+0xb8>)
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f003 030c 	and.w	r3, r3, #12
 8008280:	2b08      	cmp	r3, #8
 8008282:	d102      	bne.n	800828a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008284:	4b26      	ldr	r3, [pc, #152]	@ (8008320 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008286:	613b      	str	r3, [r7, #16]
 8008288:	e03e      	b.n	8008308 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800828a:	4b23      	ldr	r3, [pc, #140]	@ (8008318 <HAL_RCC_GetSysClockFreq+0xb8>)
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f003 030c 	and.w	r3, r3, #12
 8008292:	2b0c      	cmp	r3, #12
 8008294:	d136      	bne.n	8008304 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008296:	4b20      	ldr	r3, [pc, #128]	@ (8008318 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80082a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008318 <HAL_RCC_GetSysClockFreq+0xb8>)
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	091b      	lsrs	r3, r3, #4
 80082a6:	f003 030f 	and.w	r3, r3, #15
 80082aa:	3301      	adds	r3, #1
 80082ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d10c      	bne.n	80082ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80082b4:	4a1a      	ldr	r2, [pc, #104]	@ (8008320 <HAL_RCC_GetSysClockFreq+0xc0>)
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082bc:	4a16      	ldr	r2, [pc, #88]	@ (8008318 <HAL_RCC_GetSysClockFreq+0xb8>)
 80082be:	68d2      	ldr	r2, [r2, #12]
 80082c0:	0a12      	lsrs	r2, r2, #8
 80082c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80082c6:	fb02 f303 	mul.w	r3, r2, r3
 80082ca:	617b      	str	r3, [r7, #20]
      break;
 80082cc:	e00c      	b.n	80082e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80082ce:	4a13      	ldr	r2, [pc, #76]	@ (800831c <HAL_RCC_GetSysClockFreq+0xbc>)
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d6:	4a10      	ldr	r2, [pc, #64]	@ (8008318 <HAL_RCC_GetSysClockFreq+0xb8>)
 80082d8:	68d2      	ldr	r2, [r2, #12]
 80082da:	0a12      	lsrs	r2, r2, #8
 80082dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80082e0:	fb02 f303 	mul.w	r3, r2, r3
 80082e4:	617b      	str	r3, [r7, #20]
      break;
 80082e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80082e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008318 <HAL_RCC_GetSysClockFreq+0xb8>)
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	0e5b      	lsrs	r3, r3, #25
 80082ee:	f003 0303 	and.w	r3, r3, #3
 80082f2:	3301      	adds	r3, #1
 80082f4:	005b      	lsls	r3, r3, #1
 80082f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008300:	613b      	str	r3, [r7, #16]
 8008302:	e001      	b.n	8008308 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008304:	2300      	movs	r3, #0
 8008306:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008308:	693b      	ldr	r3, [r7, #16]
}
 800830a:	4618      	mov	r0, r3
 800830c:	371c      	adds	r7, #28
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	40021000 	.word	0x40021000
 800831c:	00f42400 	.word	0x00f42400
 8008320:	016e3600 	.word	0x016e3600

08008324 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008324:	b480      	push	{r7}
 8008326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008328:	4b03      	ldr	r3, [pc, #12]	@ (8008338 <HAL_RCC_GetHCLKFreq+0x14>)
 800832a:	681b      	ldr	r3, [r3, #0]
}
 800832c:	4618      	mov	r0, r3
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	20000264 	.word	0x20000264

0800833c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008340:	f7ff fff0 	bl	8008324 <HAL_RCC_GetHCLKFreq>
 8008344:	4602      	mov	r2, r0
 8008346:	4b06      	ldr	r3, [pc, #24]	@ (8008360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	0a1b      	lsrs	r3, r3, #8
 800834c:	f003 0307 	and.w	r3, r3, #7
 8008350:	4904      	ldr	r1, [pc, #16]	@ (8008364 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008352:	5ccb      	ldrb	r3, [r1, r3]
 8008354:	f003 031f 	and.w	r3, r3, #31
 8008358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800835c:	4618      	mov	r0, r3
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40021000 	.word	0x40021000
 8008364:	0800ce84 	.word	0x0800ce84

08008368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800836c:	f7ff ffda 	bl	8008324 <HAL_RCC_GetHCLKFreq>
 8008370:	4602      	mov	r2, r0
 8008372:	4b06      	ldr	r3, [pc, #24]	@ (800838c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	0adb      	lsrs	r3, r3, #11
 8008378:	f003 0307 	and.w	r3, r3, #7
 800837c:	4904      	ldr	r1, [pc, #16]	@ (8008390 <HAL_RCC_GetPCLK2Freq+0x28>)
 800837e:	5ccb      	ldrb	r3, [r1, r3]
 8008380:	f003 031f 	and.w	r3, r3, #31
 8008384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008388:	4618      	mov	r0, r3
 800838a:	bd80      	pop	{r7, pc}
 800838c:	40021000 	.word	0x40021000
 8008390:	0800ce84 	.word	0x0800ce84

08008394 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800839a:	4b1e      	ldr	r3, [pc, #120]	@ (8008414 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	f003 0303 	and.w	r3, r3, #3
 80083a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80083a4:	4b1b      	ldr	r3, [pc, #108]	@ (8008414 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	091b      	lsrs	r3, r3, #4
 80083aa:	f003 030f 	and.w	r3, r3, #15
 80083ae:	3301      	adds	r3, #1
 80083b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d10c      	bne.n	80083d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80083b8:	4a17      	ldr	r2, [pc, #92]	@ (8008418 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c0:	4a14      	ldr	r2, [pc, #80]	@ (8008414 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80083c2:	68d2      	ldr	r2, [r2, #12]
 80083c4:	0a12      	lsrs	r2, r2, #8
 80083c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80083ca:	fb02 f303 	mul.w	r3, r2, r3
 80083ce:	617b      	str	r3, [r7, #20]
    break;
 80083d0:	e00c      	b.n	80083ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80083d2:	4a12      	ldr	r2, [pc, #72]	@ (800841c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083da:	4a0e      	ldr	r2, [pc, #56]	@ (8008414 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80083dc:	68d2      	ldr	r2, [r2, #12]
 80083de:	0a12      	lsrs	r2, r2, #8
 80083e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80083e4:	fb02 f303 	mul.w	r3, r2, r3
 80083e8:	617b      	str	r3, [r7, #20]
    break;
 80083ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80083ec:	4b09      	ldr	r3, [pc, #36]	@ (8008414 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	0e5b      	lsrs	r3, r3, #25
 80083f2:	f003 0303 	and.w	r3, r3, #3
 80083f6:	3301      	adds	r3, #1
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	fbb2 f3f3 	udiv	r3, r2, r3
 8008404:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008406:	687b      	ldr	r3, [r7, #4]
}
 8008408:	4618      	mov	r0, r3
 800840a:	371c      	adds	r7, #28
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	40021000 	.word	0x40021000
 8008418:	016e3600 	.word	0x016e3600
 800841c:	00f42400 	.word	0x00f42400

08008420 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008428:	2300      	movs	r3, #0
 800842a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800842c:	2300      	movs	r3, #0
 800842e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 8098 	beq.w	800856e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800843e:	2300      	movs	r3, #0
 8008440:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008442:	4b43      	ldr	r3, [pc, #268]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10d      	bne.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800844e:	4b40      	ldr	r3, [pc, #256]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008452:	4a3f      	ldr	r2, [pc, #252]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008458:	6593      	str	r3, [r2, #88]	@ 0x58
 800845a:	4b3d      	ldr	r3, [pc, #244]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800845c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800845e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008462:	60bb      	str	r3, [r7, #8]
 8008464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008466:	2301      	movs	r3, #1
 8008468:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800846a:	4b3a      	ldr	r3, [pc, #232]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a39      	ldr	r2, [pc, #228]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008474:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008476:	f7fc fdb7 	bl	8004fe8 <HAL_GetTick>
 800847a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800847c:	e009      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800847e:	f7fc fdb3 	bl	8004fe8 <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	2b02      	cmp	r3, #2
 800848a:	d902      	bls.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	74fb      	strb	r3, [r7, #19]
        break;
 8008490:	e005      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008492:	4b30      	ldr	r3, [pc, #192]	@ (8008554 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0ef      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800849e:	7cfb      	ldrb	r3, [r7, #19]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d159      	bne.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80084a4:	4b2a      	ldr	r3, [pc, #168]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d01e      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d019      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80084c0:	4b23      	ldr	r3, [pc, #140]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80084cc:	4b20      	ldr	r3, [pc, #128]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084d2:	4a1f      	ldr	r2, [pc, #124]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80084ec:	4a18      	ldr	r2, [pc, #96]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d016      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084fe:	f7fc fd73 	bl	8004fe8 <HAL_GetTick>
 8008502:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008504:	e00b      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008506:	f7fc fd6f 	bl	8004fe8 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008514:	4293      	cmp	r3, r2
 8008516:	d902      	bls.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	74fb      	strb	r3, [r7, #19]
            break;
 800851c:	e006      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800851e:	4b0c      	ldr	r3, [pc, #48]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008524:	f003 0302 	and.w	r3, r3, #2
 8008528:	2b00      	cmp	r3, #0
 800852a:	d0ec      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800852c:	7cfb      	ldrb	r3, [r7, #19]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10b      	bne.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008532:	4b07      	ldr	r3, [pc, #28]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008538:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008540:	4903      	ldr	r1, [pc, #12]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008542:	4313      	orrs	r3, r2
 8008544:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008548:	e008      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800854a:	7cfb      	ldrb	r3, [r7, #19]
 800854c:	74bb      	strb	r3, [r7, #18]
 800854e:	e005      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008550:	40021000 	.word	0x40021000
 8008554:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008558:	7cfb      	ldrb	r3, [r7, #19]
 800855a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800855c:	7c7b      	ldrb	r3, [r7, #17]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d105      	bne.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008562:	4ba7      	ldr	r3, [pc, #668]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008566:	4aa6      	ldr	r2, [pc, #664]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800856c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00a      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800857a:	4ba1      	ldr	r3, [pc, #644]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800857c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008580:	f023 0203 	bic.w	r2, r3, #3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	499d      	ldr	r1, [pc, #628]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800858a:	4313      	orrs	r3, r2
 800858c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00a      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800859c:	4b98      	ldr	r3, [pc, #608]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800859e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085a2:	f023 020c 	bic.w	r2, r3, #12
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	4995      	ldr	r1, [pc, #596]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80085be:	4b90      	ldr	r3, [pc, #576]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	498c      	ldr	r1, [pc, #560]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0308 	and.w	r3, r3, #8
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085e0:	4b87      	ldr	r3, [pc, #540]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	4984      	ldr	r1, [pc, #528]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0310 	and.w	r3, r3, #16
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008602:	4b7f      	ldr	r3, [pc, #508]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008608:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	497b      	ldr	r1, [pc, #492]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008612:	4313      	orrs	r3, r2
 8008614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0320 	and.w	r3, r3, #32
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00a      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008624:	4b76      	ldr	r3, [pc, #472]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800862a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	4973      	ldr	r1, [pc, #460]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008634:	4313      	orrs	r3, r2
 8008636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008646:	4b6e      	ldr	r3, [pc, #440]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800864c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	496a      	ldr	r1, [pc, #424]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008656:	4313      	orrs	r3, r2
 8008658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00a      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008668:	4b65      	ldr	r3, [pc, #404]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800866a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800866e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	4962      	ldr	r1, [pc, #392]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008678:	4313      	orrs	r3, r2
 800867a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00a      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800868a:	4b5d      	ldr	r3, [pc, #372]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800868c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008690:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008698:	4959      	ldr	r1, [pc, #356]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800869a:	4313      	orrs	r3, r2
 800869c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00a      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086ac:	4b54      	ldr	r3, [pc, #336]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086b2:	f023 0203 	bic.w	r2, r3, #3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ba:	4951      	ldr	r1, [pc, #324]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086bc:	4313      	orrs	r3, r2
 80086be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00a      	beq.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086ce:	4b4c      	ldr	r3, [pc, #304]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086dc:	4948      	ldr	r1, [pc, #288]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d015      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80086f0:	4b43      	ldr	r3, [pc, #268]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086fe:	4940      	ldr	r1, [pc, #256]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008700:	4313      	orrs	r3, r2
 8008702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800870a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800870e:	d105      	bne.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008710:	4b3b      	ldr	r3, [pc, #236]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	4a3a      	ldr	r2, [pc, #232]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008716:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800871a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008724:	2b00      	cmp	r3, #0
 8008726:	d015      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008728:	4b35      	ldr	r3, [pc, #212]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800872a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800872e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008736:	4932      	ldr	r1, [pc, #200]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008738:	4313      	orrs	r3, r2
 800873a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008742:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008746:	d105      	bne.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008748:	4b2d      	ldr	r3, [pc, #180]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	4a2c      	ldr	r2, [pc, #176]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800874e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008752:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d015      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008760:	4b27      	ldr	r3, [pc, #156]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008766:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876e:	4924      	ldr	r1, [pc, #144]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008770:	4313      	orrs	r3, r2
 8008772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800877e:	d105      	bne.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008780:	4b1f      	ldr	r3, [pc, #124]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	4a1e      	ldr	r2, [pc, #120]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008786:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800878a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d015      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008798:	4b19      	ldr	r3, [pc, #100]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800879a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800879e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a6:	4916      	ldr	r1, [pc, #88]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087b6:	d105      	bne.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087b8:	4b11      	ldr	r3, [pc, #68]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	4a10      	ldr	r2, [pc, #64]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d019      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80087d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087de:	4908      	ldr	r1, [pc, #32]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087ee:	d109      	bne.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087f0:	4b03      	ldr	r3, [pc, #12]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	4a02      	ldr	r2, [pc, #8]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087fa:	60d3      	str	r3, [r2, #12]
 80087fc:	e002      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80087fe:	bf00      	nop
 8008800:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d015      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008810:	4b29      	ldr	r3, [pc, #164]	@ (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008816:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800881e:	4926      	ldr	r1, [pc, #152]	@ (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008820:	4313      	orrs	r3, r2
 8008822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800882a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800882e:	d105      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008830:	4b21      	ldr	r3, [pc, #132]	@ (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	4a20      	ldr	r2, [pc, #128]	@ (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008836:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800883a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d015      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008848:	4b1b      	ldr	r3, [pc, #108]	@ (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800884a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800884e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008856:	4918      	ldr	r1, [pc, #96]	@ (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008858:	4313      	orrs	r3, r2
 800885a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008866:	d105      	bne.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008868:	4b13      	ldr	r3, [pc, #76]	@ (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	4a12      	ldr	r2, [pc, #72]	@ (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800886e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008872:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d015      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008880:	4b0d      	ldr	r3, [pc, #52]	@ (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008882:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008886:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800888e:	490a      	ldr	r1, [pc, #40]	@ (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008890:	4313      	orrs	r3, r2
 8008892:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800889a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800889e:	d105      	bne.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088a0:	4b05      	ldr	r3, [pc, #20]	@ (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	4a04      	ldr	r2, [pc, #16]	@ (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80088a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80088ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	40021000 	.word	0x40021000

080088bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e054      	b.n	8008978 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d111      	bne.n	80088fe <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f001 ff92 	bl	800a80c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d102      	bne.n	80088f6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a23      	ldr	r2, [pc, #140]	@ (8008980 <HAL_TIM_Base_Init+0xc4>)
 80088f4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2202      	movs	r2, #2
 8008902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	3304      	adds	r3, #4
 800890e:	4619      	mov	r1, r3
 8008910:	4610      	mov	r0, r2
 8008912:	f001 fadb 	bl	8009ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	080049dd 	.word	0x080049dd

08008984 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b01      	cmp	r3, #1
 8008996:	d001      	beq.n	800899c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e04c      	b.n	8008a36 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2202      	movs	r2, #2
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a26      	ldr	r2, [pc, #152]	@ (8008a44 <HAL_TIM_Base_Start+0xc0>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d022      	beq.n	80089f4 <HAL_TIM_Base_Start+0x70>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089b6:	d01d      	beq.n	80089f4 <HAL_TIM_Base_Start+0x70>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a22      	ldr	r2, [pc, #136]	@ (8008a48 <HAL_TIM_Base_Start+0xc4>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d018      	beq.n	80089f4 <HAL_TIM_Base_Start+0x70>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a21      	ldr	r2, [pc, #132]	@ (8008a4c <HAL_TIM_Base_Start+0xc8>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d013      	beq.n	80089f4 <HAL_TIM_Base_Start+0x70>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a1f      	ldr	r2, [pc, #124]	@ (8008a50 <HAL_TIM_Base_Start+0xcc>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d00e      	beq.n	80089f4 <HAL_TIM_Base_Start+0x70>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a1e      	ldr	r2, [pc, #120]	@ (8008a54 <HAL_TIM_Base_Start+0xd0>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d009      	beq.n	80089f4 <HAL_TIM_Base_Start+0x70>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008a58 <HAL_TIM_Base_Start+0xd4>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d004      	beq.n	80089f4 <HAL_TIM_Base_Start+0x70>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a1b      	ldr	r2, [pc, #108]	@ (8008a5c <HAL_TIM_Base_Start+0xd8>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d115      	bne.n	8008a20 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	4b19      	ldr	r3, [pc, #100]	@ (8008a60 <HAL_TIM_Base_Start+0xdc>)
 80089fc:	4013      	ands	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b06      	cmp	r3, #6
 8008a04:	d015      	beq.n	8008a32 <HAL_TIM_Base_Start+0xae>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a0c:	d011      	beq.n	8008a32 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f042 0201 	orr.w	r2, r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a1e:	e008      	b.n	8008a32 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f042 0201 	orr.w	r2, r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	e000      	b.n	8008a34 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	40012c00 	.word	0x40012c00
 8008a48:	40000400 	.word	0x40000400
 8008a4c:	40000800 	.word	0x40000800
 8008a50:	40000c00 	.word	0x40000c00
 8008a54:	40013400 	.word	0x40013400
 8008a58:	40014000 	.word	0x40014000
 8008a5c:	40015000 	.word	0x40015000
 8008a60:	00010007 	.word	0x00010007

08008a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d001      	beq.n	8008a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e054      	b.n	8008b26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68da      	ldr	r2, [r3, #12]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f042 0201 	orr.w	r2, r2, #1
 8008a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a26      	ldr	r2, [pc, #152]	@ (8008b34 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d022      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0x80>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aa6:	d01d      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0x80>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a22      	ldr	r2, [pc, #136]	@ (8008b38 <HAL_TIM_Base_Start_IT+0xd4>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d018      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0x80>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a21      	ldr	r2, [pc, #132]	@ (8008b3c <HAL_TIM_Base_Start_IT+0xd8>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d013      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0x80>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8008b40 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00e      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0x80>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a1e      	ldr	r2, [pc, #120]	@ (8008b44 <HAL_TIM_Base_Start_IT+0xe0>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d009      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0x80>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8008b48 <HAL_TIM_Base_Start_IT+0xe4>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d004      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0x80>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a1b      	ldr	r2, [pc, #108]	@ (8008b4c <HAL_TIM_Base_Start_IT+0xe8>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d115      	bne.n	8008b10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	4b19      	ldr	r3, [pc, #100]	@ (8008b50 <HAL_TIM_Base_Start_IT+0xec>)
 8008aec:	4013      	ands	r3, r2
 8008aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b06      	cmp	r3, #6
 8008af4:	d015      	beq.n	8008b22 <HAL_TIM_Base_Start_IT+0xbe>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008afc:	d011      	beq.n	8008b22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f042 0201 	orr.w	r2, r2, #1
 8008b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b0e:	e008      	b.n	8008b22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f042 0201 	orr.w	r2, r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	e000      	b.n	8008b24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	40012c00 	.word	0x40012c00
 8008b38:	40000400 	.word	0x40000400
 8008b3c:	40000800 	.word	0x40000800
 8008b40:	40000c00 	.word	0x40000c00
 8008b44:	40013400 	.word	0x40013400
 8008b48:	40014000 	.word	0x40014000
 8008b4c:	40015000 	.word	0x40015000
 8008b50:	00010007 	.word	0x00010007

08008b54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d101      	bne.n	8008b66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e054      	b.n	8008c10 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d111      	bne.n	8008b96 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f001 fe46 	bl	800a80c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d102      	bne.n	8008b8e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a23      	ldr	r2, [pc, #140]	@ (8008c18 <HAL_TIM_PWM_Init+0xc4>)
 8008b8c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	3304      	adds	r3, #4
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	4610      	mov	r0, r2
 8008baa:	f001 f98f 	bl	8009ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	08008c1d 	.word	0x08008c1d

08008c1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d109      	bne.n	8008c54 <HAL_TIM_PWM_Start+0x24>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	bf14      	ite	ne
 8008c4c:	2301      	movne	r3, #1
 8008c4e:	2300      	moveq	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	e03c      	b.n	8008cce <HAL_TIM_PWM_Start+0x9e>
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	d109      	bne.n	8008c6e <HAL_TIM_PWM_Start+0x3e>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	bf14      	ite	ne
 8008c66:	2301      	movne	r3, #1
 8008c68:	2300      	moveq	r3, #0
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	e02f      	b.n	8008cce <HAL_TIM_PWM_Start+0x9e>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d109      	bne.n	8008c88 <HAL_TIM_PWM_Start+0x58>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	bf14      	ite	ne
 8008c80:	2301      	movne	r3, #1
 8008c82:	2300      	moveq	r3, #0
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	e022      	b.n	8008cce <HAL_TIM_PWM_Start+0x9e>
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	2b0c      	cmp	r3, #12
 8008c8c:	d109      	bne.n	8008ca2 <HAL_TIM_PWM_Start+0x72>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	bf14      	ite	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	2300      	moveq	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	e015      	b.n	8008cce <HAL_TIM_PWM_Start+0x9e>
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	2b10      	cmp	r3, #16
 8008ca6:	d109      	bne.n	8008cbc <HAL_TIM_PWM_Start+0x8c>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	bf14      	ite	ne
 8008cb4:	2301      	movne	r3, #1
 8008cb6:	2300      	moveq	r3, #0
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	e008      	b.n	8008cce <HAL_TIM_PWM_Start+0x9e>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	bf14      	ite	ne
 8008cc8:	2301      	movne	r3, #1
 8008cca:	2300      	moveq	r3, #0
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e0a6      	b.n	8008e24 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d104      	bne.n	8008ce6 <HAL_TIM_PWM_Start+0xb6>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ce4:	e023      	b.n	8008d2e <HAL_TIM_PWM_Start+0xfe>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d104      	bne.n	8008cf6 <HAL_TIM_PWM_Start+0xc6>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cf4:	e01b      	b.n	8008d2e <HAL_TIM_PWM_Start+0xfe>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b08      	cmp	r3, #8
 8008cfa:	d104      	bne.n	8008d06 <HAL_TIM_PWM_Start+0xd6>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d04:	e013      	b.n	8008d2e <HAL_TIM_PWM_Start+0xfe>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b0c      	cmp	r3, #12
 8008d0a:	d104      	bne.n	8008d16 <HAL_TIM_PWM_Start+0xe6>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d14:	e00b      	b.n	8008d2e <HAL_TIM_PWM_Start+0xfe>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b10      	cmp	r3, #16
 8008d1a:	d104      	bne.n	8008d26 <HAL_TIM_PWM_Start+0xf6>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d24:	e003      	b.n	8008d2e <HAL_TIM_PWM_Start+0xfe>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2202      	movs	r2, #2
 8008d2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2201      	movs	r2, #1
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f001 fd42 	bl	800a7c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a3a      	ldr	r2, [pc, #232]	@ (8008e2c <HAL_TIM_PWM_Start+0x1fc>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d018      	beq.n	8008d78 <HAL_TIM_PWM_Start+0x148>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a39      	ldr	r2, [pc, #228]	@ (8008e30 <HAL_TIM_PWM_Start+0x200>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d013      	beq.n	8008d78 <HAL_TIM_PWM_Start+0x148>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a37      	ldr	r2, [pc, #220]	@ (8008e34 <HAL_TIM_PWM_Start+0x204>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00e      	beq.n	8008d78 <HAL_TIM_PWM_Start+0x148>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a36      	ldr	r2, [pc, #216]	@ (8008e38 <HAL_TIM_PWM_Start+0x208>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d009      	beq.n	8008d78 <HAL_TIM_PWM_Start+0x148>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a34      	ldr	r2, [pc, #208]	@ (8008e3c <HAL_TIM_PWM_Start+0x20c>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d004      	beq.n	8008d78 <HAL_TIM_PWM_Start+0x148>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a33      	ldr	r2, [pc, #204]	@ (8008e40 <HAL_TIM_PWM_Start+0x210>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d101      	bne.n	8008d7c <HAL_TIM_PWM_Start+0x14c>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e000      	b.n	8008d7e <HAL_TIM_PWM_Start+0x14e>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d007      	beq.n	8008d92 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a25      	ldr	r2, [pc, #148]	@ (8008e2c <HAL_TIM_PWM_Start+0x1fc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d022      	beq.n	8008de2 <HAL_TIM_PWM_Start+0x1b2>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008da4:	d01d      	beq.n	8008de2 <HAL_TIM_PWM_Start+0x1b2>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a26      	ldr	r2, [pc, #152]	@ (8008e44 <HAL_TIM_PWM_Start+0x214>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d018      	beq.n	8008de2 <HAL_TIM_PWM_Start+0x1b2>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a24      	ldr	r2, [pc, #144]	@ (8008e48 <HAL_TIM_PWM_Start+0x218>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d013      	beq.n	8008de2 <HAL_TIM_PWM_Start+0x1b2>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a23      	ldr	r2, [pc, #140]	@ (8008e4c <HAL_TIM_PWM_Start+0x21c>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d00e      	beq.n	8008de2 <HAL_TIM_PWM_Start+0x1b2>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a19      	ldr	r2, [pc, #100]	@ (8008e30 <HAL_TIM_PWM_Start+0x200>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d009      	beq.n	8008de2 <HAL_TIM_PWM_Start+0x1b2>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a18      	ldr	r2, [pc, #96]	@ (8008e34 <HAL_TIM_PWM_Start+0x204>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d004      	beq.n	8008de2 <HAL_TIM_PWM_Start+0x1b2>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a18      	ldr	r2, [pc, #96]	@ (8008e40 <HAL_TIM_PWM_Start+0x210>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d115      	bne.n	8008e0e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689a      	ldr	r2, [r3, #8]
 8008de8:	4b19      	ldr	r3, [pc, #100]	@ (8008e50 <HAL_TIM_PWM_Start+0x220>)
 8008dea:	4013      	ands	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2b06      	cmp	r3, #6
 8008df2:	d015      	beq.n	8008e20 <HAL_TIM_PWM_Start+0x1f0>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dfa:	d011      	beq.n	8008e20 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0201 	orr.w	r2, r2, #1
 8008e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e0c:	e008      	b.n	8008e20 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f042 0201 	orr.w	r2, r2, #1
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	e000      	b.n	8008e22 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	40012c00 	.word	0x40012c00
 8008e30:	40013400 	.word	0x40013400
 8008e34:	40014000 	.word	0x40014000
 8008e38:	40014400 	.word	0x40014400
 8008e3c:	40014800 	.word	0x40014800
 8008e40:	40015000 	.word	0x40015000
 8008e44:	40000400 	.word	0x40000400
 8008e48:	40000800 	.word	0x40000800
 8008e4c:	40000c00 	.word	0x40000c00
 8008e50:	00010007 	.word	0x00010007

08008e54 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e04c      	b.n	8008f02 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d111      	bne.n	8008e98 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 fcc5 	bl	800a80c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d102      	bne.n	8008e90 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8008f0c <HAL_TIM_OnePulse_Init+0xb8>)
 8008e8e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4610      	mov	r0, r2
 8008eac:	f001 f80e 	bl	8009ecc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f022 0208 	bic.w	r2, r2, #8
 8008ebe:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	6819      	ldr	r1, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	08008f11 	.word	0x08008f11

08008f10 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f34:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008f3c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f44:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f4c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d108      	bne.n	8008f66 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d105      	bne.n	8008f66 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f5a:	7b7b      	ldrb	r3, [r7, #13]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d102      	bne.n	8008f66 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f60:	7b3b      	ldrb	r3, [r7, #12]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d001      	beq.n	8008f6a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e059      	b.n	800901e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2202      	movs	r2, #2
 8008f76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2202      	movs	r2, #2
 8008f86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68da      	ldr	r2, [r3, #12]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f042 0202 	orr.w	r2, r2, #2
 8008f98:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68da      	ldr	r2, [r3, #12]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f042 0204 	orr.w	r2, r2, #4
 8008fa8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 fc04 	bl	800a7c0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	2104      	movs	r1, #4
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f001 fbfd 	bl	800a7c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a17      	ldr	r2, [pc, #92]	@ (8009028 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d018      	beq.n	8009002 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a15      	ldr	r2, [pc, #84]	@ (800902c <HAL_TIM_OnePulse_Start_IT+0x108>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d013      	beq.n	8009002 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a14      	ldr	r2, [pc, #80]	@ (8009030 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d00e      	beq.n	8009002 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a12      	ldr	r2, [pc, #72]	@ (8009034 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d009      	beq.n	8009002 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a11      	ldr	r2, [pc, #68]	@ (8009038 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d004      	beq.n	8009002 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800903c <HAL_TIM_OnePulse_Start_IT+0x118>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d101      	bne.n	8009006 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8009002:	2301      	movs	r3, #1
 8009004:	e000      	b.n	8009008 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8009006:	2300      	movs	r3, #0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d007      	beq.n	800901c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800901a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	40012c00 	.word	0x40012c00
 800902c:	40013400 	.word	0x40013400
 8009030:	40014000 	.word	0x40014000
 8009034:	40014400 	.word	0x40014400
 8009038:	40014800 	.word	0x40014800
 800903c:	40015000 	.word	0x40015000

08009040 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e0a2      	b.n	800919a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b00      	cmp	r3, #0
 800905e:	d111      	bne.n	8009084 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 fbcf 	bl	800a80c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009072:	2b00      	cmp	r3, #0
 8009074:	d102      	bne.n	800907c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a4a      	ldr	r2, [pc, #296]	@ (80091a4 <HAL_TIM_Encoder_Init+0x164>)
 800907a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	6812      	ldr	r2, [r2, #0]
 8009096:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800909a:	f023 0307 	bic.w	r3, r3, #7
 800909e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3304      	adds	r3, #4
 80090a8:	4619      	mov	r1, r3
 80090aa:	4610      	mov	r0, r2
 80090ac:	f000 ff0e 	bl	8009ecc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	699b      	ldr	r3, [r3, #24]
 80090be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090d8:	f023 0303 	bic.w	r3, r3, #3
 80090dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	021b      	lsls	r3, r3, #8
 80090e8:	4313      	orrs	r3, r2
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80090f6:	f023 030c 	bic.w	r3, r3, #12
 80090fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009102:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	68da      	ldr	r2, [r3, #12]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	021b      	lsls	r3, r3, #8
 8009112:	4313      	orrs	r3, r2
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	4313      	orrs	r3, r2
 8009118:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	011a      	lsls	r2, r3, #4
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	031b      	lsls	r3, r3, #12
 8009126:	4313      	orrs	r3, r2
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	4313      	orrs	r3, r2
 800912c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009134:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800913c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	011b      	lsls	r3, r3, #4
 8009148:	4313      	orrs	r3, r2
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	4313      	orrs	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3718      	adds	r7, #24
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	08004af5 	.word	0x08004af5

080091a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80091b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80091c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d110      	bne.n	80091fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d102      	bne.n	80091e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80091de:	7b7b      	ldrb	r3, [r7, #13]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d001      	beq.n	80091e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e069      	b.n	80092bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2202      	movs	r2, #2
 80091ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091f8:	e031      	b.n	800925e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2b04      	cmp	r3, #4
 80091fe:	d110      	bne.n	8009222 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d102      	bne.n	800920c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009206:	7b3b      	ldrb	r3, [r7, #12]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d001      	beq.n	8009210 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e055      	b.n	80092bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2202      	movs	r2, #2
 8009214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2202      	movs	r2, #2
 800921c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009220:	e01d      	b.n	800925e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d108      	bne.n	800923a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d105      	bne.n	800923a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800922e:	7b7b      	ldrb	r3, [r7, #13]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d102      	bne.n	800923a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009234:	7b3b      	ldrb	r3, [r7, #12]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d001      	beq.n	800923e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e03e      	b.n	80092bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2202      	movs	r2, #2
 8009242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2202      	movs	r2, #2
 800924a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2202      	movs	r2, #2
 8009252:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2202      	movs	r2, #2
 800925a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d003      	beq.n	800926c <HAL_TIM_Encoder_Start+0xc4>
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2b04      	cmp	r3, #4
 8009268:	d008      	beq.n	800927c <HAL_TIM_Encoder_Start+0xd4>
 800926a:	e00f      	b.n	800928c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2201      	movs	r2, #1
 8009272:	2100      	movs	r1, #0
 8009274:	4618      	mov	r0, r3
 8009276:	f001 faa3 	bl	800a7c0 <TIM_CCxChannelCmd>
      break;
 800927a:	e016      	b.n	80092aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2201      	movs	r2, #1
 8009282:	2104      	movs	r1, #4
 8009284:	4618      	mov	r0, r3
 8009286:	f001 fa9b 	bl	800a7c0 <TIM_CCxChannelCmd>
      break;
 800928a:	e00e      	b.n	80092aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2201      	movs	r2, #1
 8009292:	2100      	movs	r1, #0
 8009294:	4618      	mov	r0, r3
 8009296:	f001 fa93 	bl	800a7c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2201      	movs	r2, #1
 80092a0:	2104      	movs	r1, #4
 80092a2:	4618      	mov	r0, r3
 80092a4:	f001 fa8c 	bl	800a7c0 <TIM_CCxChannelCmd>
      break;
 80092a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f042 0201 	orr.w	r2, r2, #1
 80092b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d003      	beq.n	80092dc <HAL_TIM_Encoder_Stop+0x18>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2b04      	cmp	r3, #4
 80092d8:	d008      	beq.n	80092ec <HAL_TIM_Encoder_Stop+0x28>
 80092da:	e00f      	b.n	80092fc <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2200      	movs	r2, #0
 80092e2:	2100      	movs	r1, #0
 80092e4:	4618      	mov	r0, r3
 80092e6:	f001 fa6b 	bl	800a7c0 <TIM_CCxChannelCmd>
      break;
 80092ea:	e016      	b.n	800931a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2200      	movs	r2, #0
 80092f2:	2104      	movs	r1, #4
 80092f4:	4618      	mov	r0, r3
 80092f6:	f001 fa63 	bl	800a7c0 <TIM_CCxChannelCmd>
      break;
 80092fa:	e00e      	b.n	800931a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2200      	movs	r2, #0
 8009302:	2100      	movs	r1, #0
 8009304:	4618      	mov	r0, r3
 8009306:	f001 fa5b 	bl	800a7c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2200      	movs	r2, #0
 8009310:	2104      	movs	r1, #4
 8009312:	4618      	mov	r0, r3
 8009314:	f001 fa54 	bl	800a7c0 <TIM_CCxChannelCmd>
      break;
 8009318:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6a1a      	ldr	r2, [r3, #32]
 8009320:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009324:	4013      	ands	r3, r2
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10f      	bne.n	800934a <HAL_TIM_Encoder_Stop+0x86>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6a1a      	ldr	r2, [r3, #32]
 8009330:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009334:	4013      	ands	r3, r2
 8009336:	2b00      	cmp	r3, #0
 8009338:	d107      	bne.n	800934a <HAL_TIM_Encoder_Stop+0x86>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f022 0201 	bic.w	r2, r2, #1
 8009348:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <HAL_TIM_Encoder_Stop+0x92>
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2b04      	cmp	r3, #4
 8009354:	d148      	bne.n	80093e8 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d104      	bne.n	8009366 <HAL_TIM_Encoder_Stop+0xa2>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009364:	e023      	b.n	80093ae <HAL_TIM_Encoder_Stop+0xea>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b04      	cmp	r3, #4
 800936a:	d104      	bne.n	8009376 <HAL_TIM_Encoder_Stop+0xb2>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009374:	e01b      	b.n	80093ae <HAL_TIM_Encoder_Stop+0xea>
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b08      	cmp	r3, #8
 800937a:	d104      	bne.n	8009386 <HAL_TIM_Encoder_Stop+0xc2>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009384:	e013      	b.n	80093ae <HAL_TIM_Encoder_Stop+0xea>
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b0c      	cmp	r3, #12
 800938a:	d104      	bne.n	8009396 <HAL_TIM_Encoder_Stop+0xd2>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009394:	e00b      	b.n	80093ae <HAL_TIM_Encoder_Stop+0xea>
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	2b10      	cmp	r3, #16
 800939a:	d104      	bne.n	80093a6 <HAL_TIM_Encoder_Stop+0xe2>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093a4:	e003      	b.n	80093ae <HAL_TIM_Encoder_Stop+0xea>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d104      	bne.n	80093be <HAL_TIM_Encoder_Stop+0xfa>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093bc:	e024      	b.n	8009408 <HAL_TIM_Encoder_Stop+0x144>
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	d104      	bne.n	80093ce <HAL_TIM_Encoder_Stop+0x10a>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093cc:	e01c      	b.n	8009408 <HAL_TIM_Encoder_Stop+0x144>
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b08      	cmp	r3, #8
 80093d2:	d104      	bne.n	80093de <HAL_TIM_Encoder_Stop+0x11a>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80093dc:	e014      	b.n	8009408 <HAL_TIM_Encoder_Stop+0x144>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2201      	movs	r2, #1
 80093e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 80093e6:	e00f      	b.n	8009408 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b00      	cmp	r3, #0
 8009432:	d026      	beq.n	8009482 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d021      	beq.n	8009482 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f06f 0202 	mvn.w	r2, #2
 8009446:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	f003 0303 	and.w	r3, r3, #3
 8009458:	2b00      	cmp	r3, #0
 800945a:	d005      	beq.n	8009468 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	4798      	blx	r3
 8009466:	e009      	b.n	800947c <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	f003 0304 	and.w	r3, r3, #4
 8009488:	2b00      	cmp	r3, #0
 800948a:	d026      	beq.n	80094da <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f003 0304 	and.w	r3, r3, #4
 8009492:	2b00      	cmp	r3, #0
 8009494:	d021      	beq.n	80094da <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f06f 0204 	mvn.w	r2, #4
 800949e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2202      	movs	r2, #2
 80094a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d005      	beq.n	80094c0 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	4798      	blx	r3
 80094be:	e009      	b.n	80094d4 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f003 0308 	and.w	r3, r3, #8
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d026      	beq.n	8009532 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f003 0308 	and.w	r3, r3, #8
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d021      	beq.n	8009532 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f06f 0208 	mvn.w	r2, #8
 80094f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2204      	movs	r2, #4
 80094fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69db      	ldr	r3, [r3, #28]
 8009504:	f003 0303 	and.w	r3, r3, #3
 8009508:	2b00      	cmp	r3, #0
 800950a:	d005      	beq.n	8009518 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	4798      	blx	r3
 8009516:	e009      	b.n	800952c <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	f003 0310 	and.w	r3, r3, #16
 8009538:	2b00      	cmp	r3, #0
 800953a:	d026      	beq.n	800958a <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f003 0310 	and.w	r3, r3, #16
 8009542:	2b00      	cmp	r3, #0
 8009544:	d021      	beq.n	800958a <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f06f 0210 	mvn.w	r2, #16
 800954e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2208      	movs	r2, #8
 8009554:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	69db      	ldr	r3, [r3, #28]
 800955c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009560:	2b00      	cmp	r3, #0
 8009562:	d005      	beq.n	8009570 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	4798      	blx	r3
 800956e:	e009      	b.n	8009584 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00e      	beq.n	80095b2 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d009      	beq.n	80095b2 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f06f 0201 	mvn.w	r2, #1
 80095a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d104      	bne.n	80095c6 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00e      	beq.n	80095e4 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d009      	beq.n	80095e4 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80095d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00e      	beq.n	800960c <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d009      	beq.n	800960c <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00e      	beq.n	8009634 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800961c:	2b00      	cmp	r3, #0
 800961e:	d009      	beq.n	8009634 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	f003 0320 	and.w	r3, r3, #32
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00e      	beq.n	800965c <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f003 0320 	and.w	r3, r3, #32
 8009644:	2b00      	cmp	r3, #0
 8009646:	d009      	beq.n	800965c <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f06f 0220 	mvn.w	r2, #32
 8009650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00e      	beq.n	8009684 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d009      	beq.n	8009684 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00e      	beq.n	80096ac <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d009      	beq.n	80096ac <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80096a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00e      	beq.n	80096d4 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d009      	beq.n	80096d4 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80096c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00e      	beq.n	80096fc <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d009      	beq.n	80096fc <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80096f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096fc:	bf00      	nop
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800971a:	2b01      	cmp	r3, #1
 800971c:	d101      	bne.n	8009722 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800971e:	2302      	movs	r3, #2
 8009720:	e0ff      	b.n	8009922 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2b14      	cmp	r3, #20
 800972e:	f200 80f0 	bhi.w	8009912 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009732:	a201      	add	r2, pc, #4	@ (adr r2, 8009738 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009738:	0800978d 	.word	0x0800978d
 800973c:	08009913 	.word	0x08009913
 8009740:	08009913 	.word	0x08009913
 8009744:	08009913 	.word	0x08009913
 8009748:	080097cd 	.word	0x080097cd
 800974c:	08009913 	.word	0x08009913
 8009750:	08009913 	.word	0x08009913
 8009754:	08009913 	.word	0x08009913
 8009758:	0800980f 	.word	0x0800980f
 800975c:	08009913 	.word	0x08009913
 8009760:	08009913 	.word	0x08009913
 8009764:	08009913 	.word	0x08009913
 8009768:	0800984f 	.word	0x0800984f
 800976c:	08009913 	.word	0x08009913
 8009770:	08009913 	.word	0x08009913
 8009774:	08009913 	.word	0x08009913
 8009778:	08009891 	.word	0x08009891
 800977c:	08009913 	.word	0x08009913
 8009780:	08009913 	.word	0x08009913
 8009784:	08009913 	.word	0x08009913
 8009788:	080098d1 	.word	0x080098d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68b9      	ldr	r1, [r7, #8]
 8009792:	4618      	mov	r0, r3
 8009794:	f000 fc4e 	bl	800a034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	699a      	ldr	r2, [r3, #24]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f042 0208 	orr.w	r2, r2, #8
 80097a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	699a      	ldr	r2, [r3, #24]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f022 0204 	bic.w	r2, r2, #4
 80097b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6999      	ldr	r1, [r3, #24]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	691a      	ldr	r2, [r3, #16]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	430a      	orrs	r2, r1
 80097c8:	619a      	str	r2, [r3, #24]
      break;
 80097ca:	e0a5      	b.n	8009918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68b9      	ldr	r1, [r7, #8]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 fcc8 	bl	800a168 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	699a      	ldr	r2, [r3, #24]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	699a      	ldr	r2, [r3, #24]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6999      	ldr	r1, [r3, #24]
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	021a      	lsls	r2, r3, #8
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	430a      	orrs	r2, r1
 800980a:	619a      	str	r2, [r3, #24]
      break;
 800980c:	e084      	b.n	8009918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68b9      	ldr	r1, [r7, #8]
 8009814:	4618      	mov	r0, r3
 8009816:	f000 fd3b 	bl	800a290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	69da      	ldr	r2, [r3, #28]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f042 0208 	orr.w	r2, r2, #8
 8009828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	69da      	ldr	r2, [r3, #28]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0204 	bic.w	r2, r2, #4
 8009838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	69d9      	ldr	r1, [r3, #28]
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	691a      	ldr	r2, [r3, #16]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	61da      	str	r2, [r3, #28]
      break;
 800984c:	e064      	b.n	8009918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68b9      	ldr	r1, [r7, #8]
 8009854:	4618      	mov	r0, r3
 8009856:	f000 fdad 	bl	800a3b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	69da      	ldr	r2, [r3, #28]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	69da      	ldr	r2, [r3, #28]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	69d9      	ldr	r1, [r3, #28]
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	021a      	lsls	r2, r3, #8
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	430a      	orrs	r2, r1
 800988c:	61da      	str	r2, [r3, #28]
      break;
 800988e:	e043      	b.n	8009918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68b9      	ldr	r1, [r7, #8]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fe20 	bl	800a4dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f042 0208 	orr.w	r2, r2, #8
 80098aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f022 0204 	bic.w	r2, r2, #4
 80098ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	691a      	ldr	r2, [r3, #16]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	430a      	orrs	r2, r1
 80098cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80098ce:	e023      	b.n	8009918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68b9      	ldr	r1, [r7, #8]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f000 fe6a 	bl	800a5b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	021a      	lsls	r2, r3, #8
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	430a      	orrs	r2, r1
 800990e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009910:	e002      	b.n	8009918 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	75fb      	strb	r3, [r7, #23]
      break;
 8009916:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009920:	7dfb      	ldrb	r3, [r7, #23]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3718      	adds	r7, #24
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop

0800992c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009940:	2b01      	cmp	r3, #1
 8009942:	d101      	bne.n	8009948 <HAL_TIM_ConfigClockSource+0x1c>
 8009944:	2302      	movs	r3, #2
 8009946:	e0f6      	b.n	8009b36 <HAL_TIM_ConfigClockSource+0x20a>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2202      	movs	r2, #2
 8009954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009966:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800996a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009972:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a6f      	ldr	r2, [pc, #444]	@ (8009b40 <HAL_TIM_ConfigClockSource+0x214>)
 8009982:	4293      	cmp	r3, r2
 8009984:	f000 80c1 	beq.w	8009b0a <HAL_TIM_ConfigClockSource+0x1de>
 8009988:	4a6d      	ldr	r2, [pc, #436]	@ (8009b40 <HAL_TIM_ConfigClockSource+0x214>)
 800998a:	4293      	cmp	r3, r2
 800998c:	f200 80c6 	bhi.w	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8009990:	4a6c      	ldr	r2, [pc, #432]	@ (8009b44 <HAL_TIM_ConfigClockSource+0x218>)
 8009992:	4293      	cmp	r3, r2
 8009994:	f000 80b9 	beq.w	8009b0a <HAL_TIM_ConfigClockSource+0x1de>
 8009998:	4a6a      	ldr	r2, [pc, #424]	@ (8009b44 <HAL_TIM_ConfigClockSource+0x218>)
 800999a:	4293      	cmp	r3, r2
 800999c:	f200 80be 	bhi.w	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80099a0:	4a69      	ldr	r2, [pc, #420]	@ (8009b48 <HAL_TIM_ConfigClockSource+0x21c>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	f000 80b1 	beq.w	8009b0a <HAL_TIM_ConfigClockSource+0x1de>
 80099a8:	4a67      	ldr	r2, [pc, #412]	@ (8009b48 <HAL_TIM_ConfigClockSource+0x21c>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	f200 80b6 	bhi.w	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80099b0:	4a66      	ldr	r2, [pc, #408]	@ (8009b4c <HAL_TIM_ConfigClockSource+0x220>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	f000 80a9 	beq.w	8009b0a <HAL_TIM_ConfigClockSource+0x1de>
 80099b8:	4a64      	ldr	r2, [pc, #400]	@ (8009b4c <HAL_TIM_ConfigClockSource+0x220>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	f200 80ae 	bhi.w	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80099c0:	4a63      	ldr	r2, [pc, #396]	@ (8009b50 <HAL_TIM_ConfigClockSource+0x224>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	f000 80a1 	beq.w	8009b0a <HAL_TIM_ConfigClockSource+0x1de>
 80099c8:	4a61      	ldr	r2, [pc, #388]	@ (8009b50 <HAL_TIM_ConfigClockSource+0x224>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	f200 80a6 	bhi.w	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80099d0:	4a60      	ldr	r2, [pc, #384]	@ (8009b54 <HAL_TIM_ConfigClockSource+0x228>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	f000 8099 	beq.w	8009b0a <HAL_TIM_ConfigClockSource+0x1de>
 80099d8:	4a5e      	ldr	r2, [pc, #376]	@ (8009b54 <HAL_TIM_ConfigClockSource+0x228>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	f200 809e 	bhi.w	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80099e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80099e4:	f000 8091 	beq.w	8009b0a <HAL_TIM_ConfigClockSource+0x1de>
 80099e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80099ec:	f200 8096 	bhi.w	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80099f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099f4:	f000 8089 	beq.w	8009b0a <HAL_TIM_ConfigClockSource+0x1de>
 80099f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099fc:	f200 808e 	bhi.w	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8009a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a04:	d03e      	beq.n	8009a84 <HAL_TIM_ConfigClockSource+0x158>
 8009a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a0a:	f200 8087 	bhi.w	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8009a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a12:	f000 8086 	beq.w	8009b22 <HAL_TIM_ConfigClockSource+0x1f6>
 8009a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a1a:	d87f      	bhi.n	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8009a1c:	2b70      	cmp	r3, #112	@ 0x70
 8009a1e:	d01a      	beq.n	8009a56 <HAL_TIM_ConfigClockSource+0x12a>
 8009a20:	2b70      	cmp	r3, #112	@ 0x70
 8009a22:	d87b      	bhi.n	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8009a24:	2b60      	cmp	r3, #96	@ 0x60
 8009a26:	d050      	beq.n	8009aca <HAL_TIM_ConfigClockSource+0x19e>
 8009a28:	2b60      	cmp	r3, #96	@ 0x60
 8009a2a:	d877      	bhi.n	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8009a2c:	2b50      	cmp	r3, #80	@ 0x50
 8009a2e:	d03c      	beq.n	8009aaa <HAL_TIM_ConfigClockSource+0x17e>
 8009a30:	2b50      	cmp	r3, #80	@ 0x50
 8009a32:	d873      	bhi.n	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8009a34:	2b40      	cmp	r3, #64	@ 0x40
 8009a36:	d058      	beq.n	8009aea <HAL_TIM_ConfigClockSource+0x1be>
 8009a38:	2b40      	cmp	r3, #64	@ 0x40
 8009a3a:	d86f      	bhi.n	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8009a3c:	2b30      	cmp	r3, #48	@ 0x30
 8009a3e:	d064      	beq.n	8009b0a <HAL_TIM_ConfigClockSource+0x1de>
 8009a40:	2b30      	cmp	r3, #48	@ 0x30
 8009a42:	d86b      	bhi.n	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8009a44:	2b20      	cmp	r3, #32
 8009a46:	d060      	beq.n	8009b0a <HAL_TIM_ConfigClockSource+0x1de>
 8009a48:	2b20      	cmp	r3, #32
 8009a4a:	d867      	bhi.n	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d05c      	beq.n	8009b0a <HAL_TIM_ConfigClockSource+0x1de>
 8009a50:	2b10      	cmp	r3, #16
 8009a52:	d05a      	beq.n	8009b0a <HAL_TIM_ConfigClockSource+0x1de>
 8009a54:	e062      	b.n	8009b1c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a66:	f000 fe8b 	bl	800a780 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	609a      	str	r2, [r3, #8]
      break;
 8009a82:	e04f      	b.n	8009b24 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a94:	f000 fe74 	bl	800a780 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689a      	ldr	r2, [r3, #8]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009aa6:	609a      	str	r2, [r3, #8]
      break;
 8009aa8:	e03c      	b.n	8009b24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f000 fde6 	bl	800a688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2150      	movs	r1, #80	@ 0x50
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 fe3f 	bl	800a746 <TIM_ITRx_SetConfig>
      break;
 8009ac8:	e02c      	b.n	8009b24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	f000 fe05 	bl	800a6e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2160      	movs	r1, #96	@ 0x60
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 fe2f 	bl	800a746 <TIM_ITRx_SetConfig>
      break;
 8009ae8:	e01c      	b.n	8009b24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009af6:	461a      	mov	r2, r3
 8009af8:	f000 fdc6 	bl	800a688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2140      	movs	r1, #64	@ 0x40
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 fe1f 	bl	800a746 <TIM_ITRx_SetConfig>
      break;
 8009b08:	e00c      	b.n	8009b24 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4619      	mov	r1, r3
 8009b14:	4610      	mov	r0, r2
 8009b16:	f000 fe16 	bl	800a746 <TIM_ITRx_SetConfig>
      break;
 8009b1a:	e003      	b.n	8009b24 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b20:	e000      	b.n	8009b24 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	00100070 	.word	0x00100070
 8009b44:	00100060 	.word	0x00100060
 8009b48:	00100050 	.word	0x00100050
 8009b4c:	00100040 	.word	0x00100040
 8009b50:	00100030 	.word	0x00100030
 8009b54:	00100020 	.word	0x00100020

08009b58 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	460b      	mov	r3, r1
 8009c16:	607a      	str	r2, [r7, #4]
 8009c18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d101      	bne.n	8009c28 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e14a      	b.n	8009ebe <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	f040 80dd 	bne.w	8009df0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8009c36:	7afb      	ldrb	r3, [r7, #11]
 8009c38:	2b1f      	cmp	r3, #31
 8009c3a:	f200 80d6 	bhi.w	8009dea <HAL_TIM_RegisterCallback+0x1de>
 8009c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c44 <HAL_TIM_RegisterCallback+0x38>)
 8009c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c44:	08009cc5 	.word	0x08009cc5
 8009c48:	08009ccd 	.word	0x08009ccd
 8009c4c:	08009cd5 	.word	0x08009cd5
 8009c50:	08009cdd 	.word	0x08009cdd
 8009c54:	08009ce5 	.word	0x08009ce5
 8009c58:	08009ced 	.word	0x08009ced
 8009c5c:	08009cf5 	.word	0x08009cf5
 8009c60:	08009cfd 	.word	0x08009cfd
 8009c64:	08009d05 	.word	0x08009d05
 8009c68:	08009d0d 	.word	0x08009d0d
 8009c6c:	08009d15 	.word	0x08009d15
 8009c70:	08009d1d 	.word	0x08009d1d
 8009c74:	08009d25 	.word	0x08009d25
 8009c78:	08009d2d 	.word	0x08009d2d
 8009c7c:	08009d37 	.word	0x08009d37
 8009c80:	08009d41 	.word	0x08009d41
 8009c84:	08009d4b 	.word	0x08009d4b
 8009c88:	08009d55 	.word	0x08009d55
 8009c8c:	08009d5f 	.word	0x08009d5f
 8009c90:	08009d69 	.word	0x08009d69
 8009c94:	08009d73 	.word	0x08009d73
 8009c98:	08009d7d 	.word	0x08009d7d
 8009c9c:	08009d87 	.word	0x08009d87
 8009ca0:	08009d91 	.word	0x08009d91
 8009ca4:	08009d9b 	.word	0x08009d9b
 8009ca8:	08009da5 	.word	0x08009da5
 8009cac:	08009daf 	.word	0x08009daf
 8009cb0:	08009db9 	.word	0x08009db9
 8009cb4:	08009dc3 	.word	0x08009dc3
 8009cb8:	08009dcd 	.word	0x08009dcd
 8009cbc:	08009dd7 	.word	0x08009dd7
 8009cc0:	08009de1 	.word	0x08009de1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009cca:	e0f7      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009cd2:	e0f3      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009cda:	e0ef      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009ce2:	e0eb      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009cea:	e0e7      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009cf2:	e0e3      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009cfa:	e0df      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009d02:	e0db      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009d0a:	e0d7      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009d12:	e0d3      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009d1a:	e0cf      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009d22:	e0cb      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009d2a:	e0c7      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009d34:	e0c2      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8009d3e:	e0bd      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8009d48:	e0b8      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8009d52:	e0b3      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8009d5c:	e0ae      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009d66:	e0a9      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009d70:	e0a4      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009d7a:	e09f      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009d84:	e09a      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009d8e:	e095      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009d98:	e090      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009da2:	e08b      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009dac:	e086      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009db6:	e081      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009dc0:	e07c      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009dca:	e077      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009dd4:	e072      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009dde:	e06d      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009de8:	e068      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	75fb      	strb	r3, [r7, #23]
        break;
 8009dee:	e065      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d15d      	bne.n	8009eb8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009dfc:	7afb      	ldrb	r3, [r7, #11]
 8009dfe:	2b0d      	cmp	r3, #13
 8009e00:	d857      	bhi.n	8009eb2 <HAL_TIM_RegisterCallback+0x2a6>
 8009e02:	a201      	add	r2, pc, #4	@ (adr r2, 8009e08 <HAL_TIM_RegisterCallback+0x1fc>)
 8009e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e08:	08009e41 	.word	0x08009e41
 8009e0c:	08009e49 	.word	0x08009e49
 8009e10:	08009e51 	.word	0x08009e51
 8009e14:	08009e59 	.word	0x08009e59
 8009e18:	08009e61 	.word	0x08009e61
 8009e1c:	08009e69 	.word	0x08009e69
 8009e20:	08009e71 	.word	0x08009e71
 8009e24:	08009e79 	.word	0x08009e79
 8009e28:	08009e81 	.word	0x08009e81
 8009e2c:	08009e89 	.word	0x08009e89
 8009e30:	08009e91 	.word	0x08009e91
 8009e34:	08009e99 	.word	0x08009e99
 8009e38:	08009ea1 	.word	0x08009ea1
 8009e3c:	08009ea9 	.word	0x08009ea9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009e46:	e039      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009e4e:	e035      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009e56:	e031      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009e5e:	e02d      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009e66:	e029      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009e6e:	e025      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009e76:	e021      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009e7e:	e01d      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009e86:	e019      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009e8e:	e015      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009e96:	e011      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009e9e:	e00d      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009ea6:	e009      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009eb0:	e004      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	75fb      	strb	r3, [r7, #23]
        break;
 8009eb6:	e001      	b.n	8009ebc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	371c      	adds	r7, #28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop

08009ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a4c      	ldr	r2, [pc, #304]	@ (800a010 <TIM_Base_SetConfig+0x144>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d017      	beq.n	8009f14 <TIM_Base_SetConfig+0x48>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eea:	d013      	beq.n	8009f14 <TIM_Base_SetConfig+0x48>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a49      	ldr	r2, [pc, #292]	@ (800a014 <TIM_Base_SetConfig+0x148>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d00f      	beq.n	8009f14 <TIM_Base_SetConfig+0x48>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a48      	ldr	r2, [pc, #288]	@ (800a018 <TIM_Base_SetConfig+0x14c>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d00b      	beq.n	8009f14 <TIM_Base_SetConfig+0x48>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a47      	ldr	r2, [pc, #284]	@ (800a01c <TIM_Base_SetConfig+0x150>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d007      	beq.n	8009f14 <TIM_Base_SetConfig+0x48>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a46      	ldr	r2, [pc, #280]	@ (800a020 <TIM_Base_SetConfig+0x154>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d003      	beq.n	8009f14 <TIM_Base_SetConfig+0x48>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a45      	ldr	r2, [pc, #276]	@ (800a024 <TIM_Base_SetConfig+0x158>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d108      	bne.n	8009f26 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a39      	ldr	r2, [pc, #228]	@ (800a010 <TIM_Base_SetConfig+0x144>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d023      	beq.n	8009f76 <TIM_Base_SetConfig+0xaa>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f34:	d01f      	beq.n	8009f76 <TIM_Base_SetConfig+0xaa>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a36      	ldr	r2, [pc, #216]	@ (800a014 <TIM_Base_SetConfig+0x148>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d01b      	beq.n	8009f76 <TIM_Base_SetConfig+0xaa>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a35      	ldr	r2, [pc, #212]	@ (800a018 <TIM_Base_SetConfig+0x14c>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d017      	beq.n	8009f76 <TIM_Base_SetConfig+0xaa>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a34      	ldr	r2, [pc, #208]	@ (800a01c <TIM_Base_SetConfig+0x150>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d013      	beq.n	8009f76 <TIM_Base_SetConfig+0xaa>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a33      	ldr	r2, [pc, #204]	@ (800a020 <TIM_Base_SetConfig+0x154>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d00f      	beq.n	8009f76 <TIM_Base_SetConfig+0xaa>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a33      	ldr	r2, [pc, #204]	@ (800a028 <TIM_Base_SetConfig+0x15c>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d00b      	beq.n	8009f76 <TIM_Base_SetConfig+0xaa>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a32      	ldr	r2, [pc, #200]	@ (800a02c <TIM_Base_SetConfig+0x160>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d007      	beq.n	8009f76 <TIM_Base_SetConfig+0xaa>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	4a31      	ldr	r2, [pc, #196]	@ (800a030 <TIM_Base_SetConfig+0x164>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d003      	beq.n	8009f76 <TIM_Base_SetConfig+0xaa>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a2c      	ldr	r2, [pc, #176]	@ (800a024 <TIM_Base_SetConfig+0x158>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d108      	bne.n	8009f88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	695b      	ldr	r3, [r3, #20]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	689a      	ldr	r2, [r3, #8]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a18      	ldr	r2, [pc, #96]	@ (800a010 <TIM_Base_SetConfig+0x144>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d013      	beq.n	8009fdc <TIM_Base_SetConfig+0x110>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a1a      	ldr	r2, [pc, #104]	@ (800a020 <TIM_Base_SetConfig+0x154>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d00f      	beq.n	8009fdc <TIM_Base_SetConfig+0x110>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a1a      	ldr	r2, [pc, #104]	@ (800a028 <TIM_Base_SetConfig+0x15c>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d00b      	beq.n	8009fdc <TIM_Base_SetConfig+0x110>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a19      	ldr	r2, [pc, #100]	@ (800a02c <TIM_Base_SetConfig+0x160>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d007      	beq.n	8009fdc <TIM_Base_SetConfig+0x110>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a18      	ldr	r2, [pc, #96]	@ (800a030 <TIM_Base_SetConfig+0x164>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d003      	beq.n	8009fdc <TIM_Base_SetConfig+0x110>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a13      	ldr	r2, [pc, #76]	@ (800a024 <TIM_Base_SetConfig+0x158>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d103      	bne.n	8009fe4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	691a      	ldr	r2, [r3, #16]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d105      	bne.n	800a002 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	f023 0201 	bic.w	r2, r3, #1
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	611a      	str	r2, [r3, #16]
  }
}
 800a002:	bf00      	nop
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	40012c00 	.word	0x40012c00
 800a014:	40000400 	.word	0x40000400
 800a018:	40000800 	.word	0x40000800
 800a01c:	40000c00 	.word	0x40000c00
 800a020:	40013400 	.word	0x40013400
 800a024:	40015000 	.word	0x40015000
 800a028:	40014000 	.word	0x40014000
 800a02c:	40014400 	.word	0x40014400
 800a030:	40014800 	.word	0x40014800

0800a034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a034:	b480      	push	{r7}
 800a036:	b087      	sub	sp, #28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6a1b      	ldr	r3, [r3, #32]
 800a048:	f023 0201 	bic.w	r2, r3, #1
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f023 0303 	bic.w	r3, r3, #3
 800a06e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	4313      	orrs	r3, r2
 800a078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f023 0302 	bic.w	r3, r3, #2
 800a080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	4313      	orrs	r3, r2
 800a08a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a30      	ldr	r2, [pc, #192]	@ (800a150 <TIM_OC1_SetConfig+0x11c>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d013      	beq.n	800a0bc <TIM_OC1_SetConfig+0x88>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a2f      	ldr	r2, [pc, #188]	@ (800a154 <TIM_OC1_SetConfig+0x120>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d00f      	beq.n	800a0bc <TIM_OC1_SetConfig+0x88>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a2e      	ldr	r2, [pc, #184]	@ (800a158 <TIM_OC1_SetConfig+0x124>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d00b      	beq.n	800a0bc <TIM_OC1_SetConfig+0x88>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a2d      	ldr	r2, [pc, #180]	@ (800a15c <TIM_OC1_SetConfig+0x128>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d007      	beq.n	800a0bc <TIM_OC1_SetConfig+0x88>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a2c      	ldr	r2, [pc, #176]	@ (800a160 <TIM_OC1_SetConfig+0x12c>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d003      	beq.n	800a0bc <TIM_OC1_SetConfig+0x88>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a2b      	ldr	r2, [pc, #172]	@ (800a164 <TIM_OC1_SetConfig+0x130>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d10c      	bne.n	800a0d6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f023 0308 	bic.w	r3, r3, #8
 800a0c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f023 0304 	bic.w	r3, r3, #4
 800a0d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a150 <TIM_OC1_SetConfig+0x11c>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d013      	beq.n	800a106 <TIM_OC1_SetConfig+0xd2>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a1c      	ldr	r2, [pc, #112]	@ (800a154 <TIM_OC1_SetConfig+0x120>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d00f      	beq.n	800a106 <TIM_OC1_SetConfig+0xd2>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a1b      	ldr	r2, [pc, #108]	@ (800a158 <TIM_OC1_SetConfig+0x124>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d00b      	beq.n	800a106 <TIM_OC1_SetConfig+0xd2>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a1a      	ldr	r2, [pc, #104]	@ (800a15c <TIM_OC1_SetConfig+0x128>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d007      	beq.n	800a106 <TIM_OC1_SetConfig+0xd2>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a19      	ldr	r2, [pc, #100]	@ (800a160 <TIM_OC1_SetConfig+0x12c>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d003      	beq.n	800a106 <TIM_OC1_SetConfig+0xd2>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a18      	ldr	r2, [pc, #96]	@ (800a164 <TIM_OC1_SetConfig+0x130>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d111      	bne.n	800a12a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a10c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	693a      	ldr	r2, [r7, #16]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	699b      	ldr	r3, [r3, #24]
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	4313      	orrs	r3, r2
 800a128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	685a      	ldr	r2, [r3, #4]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	621a      	str	r2, [r3, #32]
}
 800a144:	bf00      	nop
 800a146:	371c      	adds	r7, #28
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr
 800a150:	40012c00 	.word	0x40012c00
 800a154:	40013400 	.word	0x40013400
 800a158:	40014000 	.word	0x40014000
 800a15c:	40014400 	.word	0x40014400
 800a160:	40014800 	.word	0x40014800
 800a164:	40015000 	.word	0x40015000

0800a168 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a168:	b480      	push	{r7}
 800a16a:	b087      	sub	sp, #28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
 800a17c:	f023 0210 	bic.w	r2, r3, #16
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a19a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	021b      	lsls	r3, r3, #8
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	f023 0320 	bic.w	r3, r3, #32
 800a1b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	011b      	lsls	r3, r3, #4
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a2c      	ldr	r2, [pc, #176]	@ (800a278 <TIM_OC2_SetConfig+0x110>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d007      	beq.n	800a1dc <TIM_OC2_SetConfig+0x74>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a2b      	ldr	r2, [pc, #172]	@ (800a27c <TIM_OC2_SetConfig+0x114>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d003      	beq.n	800a1dc <TIM_OC2_SetConfig+0x74>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a2a      	ldr	r2, [pc, #168]	@ (800a280 <TIM_OC2_SetConfig+0x118>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d10d      	bne.n	800a1f8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	011b      	lsls	r3, r3, #4
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a1f      	ldr	r2, [pc, #124]	@ (800a278 <TIM_OC2_SetConfig+0x110>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d013      	beq.n	800a228 <TIM_OC2_SetConfig+0xc0>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a1e      	ldr	r2, [pc, #120]	@ (800a27c <TIM_OC2_SetConfig+0x114>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d00f      	beq.n	800a228 <TIM_OC2_SetConfig+0xc0>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a1e      	ldr	r2, [pc, #120]	@ (800a284 <TIM_OC2_SetConfig+0x11c>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d00b      	beq.n	800a228 <TIM_OC2_SetConfig+0xc0>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a1d      	ldr	r2, [pc, #116]	@ (800a288 <TIM_OC2_SetConfig+0x120>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d007      	beq.n	800a228 <TIM_OC2_SetConfig+0xc0>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a1c      	ldr	r2, [pc, #112]	@ (800a28c <TIM_OC2_SetConfig+0x124>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d003      	beq.n	800a228 <TIM_OC2_SetConfig+0xc0>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a17      	ldr	r2, [pc, #92]	@ (800a280 <TIM_OC2_SetConfig+0x118>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d113      	bne.n	800a250 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a22e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	4313      	orrs	r3, r2
 800a242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	693a      	ldr	r2, [r7, #16]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	693a      	ldr	r2, [r7, #16]
 800a254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	685a      	ldr	r2, [r3, #4]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	621a      	str	r2, [r3, #32]
}
 800a26a:	bf00      	nop
 800a26c:	371c      	adds	r7, #28
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	40012c00 	.word	0x40012c00
 800a27c:	40013400 	.word	0x40013400
 800a280:	40015000 	.word	0x40015000
 800a284:	40014000 	.word	0x40014000
 800a288:	40014400 	.word	0x40014400
 800a28c:	40014800 	.word	0x40014800

0800a290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a290:	b480      	push	{r7}
 800a292:	b087      	sub	sp, #28
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a1b      	ldr	r3, [r3, #32]
 800a2a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	69db      	ldr	r3, [r3, #28]
 800a2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f023 0303 	bic.w	r3, r3, #3
 800a2ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a2dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	021b      	lsls	r3, r3, #8
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a2b      	ldr	r2, [pc, #172]	@ (800a39c <TIM_OC3_SetConfig+0x10c>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d007      	beq.n	800a302 <TIM_OC3_SetConfig+0x72>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a2a      	ldr	r2, [pc, #168]	@ (800a3a0 <TIM_OC3_SetConfig+0x110>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d003      	beq.n	800a302 <TIM_OC3_SetConfig+0x72>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a29      	ldr	r2, [pc, #164]	@ (800a3a4 <TIM_OC3_SetConfig+0x114>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d10d      	bne.n	800a31e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	021b      	lsls	r3, r3, #8
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	4313      	orrs	r3, r2
 800a314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a31c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a1e      	ldr	r2, [pc, #120]	@ (800a39c <TIM_OC3_SetConfig+0x10c>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d013      	beq.n	800a34e <TIM_OC3_SetConfig+0xbe>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a1d      	ldr	r2, [pc, #116]	@ (800a3a0 <TIM_OC3_SetConfig+0x110>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d00f      	beq.n	800a34e <TIM_OC3_SetConfig+0xbe>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a1d      	ldr	r2, [pc, #116]	@ (800a3a8 <TIM_OC3_SetConfig+0x118>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d00b      	beq.n	800a34e <TIM_OC3_SetConfig+0xbe>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a1c      	ldr	r2, [pc, #112]	@ (800a3ac <TIM_OC3_SetConfig+0x11c>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d007      	beq.n	800a34e <TIM_OC3_SetConfig+0xbe>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a1b      	ldr	r2, [pc, #108]	@ (800a3b0 <TIM_OC3_SetConfig+0x120>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d003      	beq.n	800a34e <TIM_OC3_SetConfig+0xbe>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a16      	ldr	r2, [pc, #88]	@ (800a3a4 <TIM_OC3_SetConfig+0x114>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d113      	bne.n	800a376 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a35c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	695b      	ldr	r3, [r3, #20]
 800a362:	011b      	lsls	r3, r3, #4
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	4313      	orrs	r3, r2
 800a368:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	011b      	lsls	r3, r3, #4
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	4313      	orrs	r3, r2
 800a374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	693a      	ldr	r2, [r7, #16]
 800a37a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	621a      	str	r2, [r3, #32]
}
 800a390:	bf00      	nop
 800a392:	371c      	adds	r7, #28
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	40012c00 	.word	0x40012c00
 800a3a0:	40013400 	.word	0x40013400
 800a3a4:	40015000 	.word	0x40015000
 800a3a8:	40014000 	.word	0x40014000
 800a3ac:	40014400 	.word	0x40014400
 800a3b0:	40014800 	.word	0x40014800

0800a3b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a1b      	ldr	r3, [r3, #32]
 800a3c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	69db      	ldr	r3, [r3, #28]
 800a3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a3e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	021b      	lsls	r3, r3, #8
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	031b      	lsls	r3, r3, #12
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a2c      	ldr	r2, [pc, #176]	@ (800a4c4 <TIM_OC4_SetConfig+0x110>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d007      	beq.n	800a428 <TIM_OC4_SetConfig+0x74>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a2b      	ldr	r2, [pc, #172]	@ (800a4c8 <TIM_OC4_SetConfig+0x114>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d003      	beq.n	800a428 <TIM_OC4_SetConfig+0x74>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a2a      	ldr	r2, [pc, #168]	@ (800a4cc <TIM_OC4_SetConfig+0x118>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d10d      	bne.n	800a444 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a42e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	031b      	lsls	r3, r3, #12
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	4313      	orrs	r3, r2
 800a43a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a442:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a1f      	ldr	r2, [pc, #124]	@ (800a4c4 <TIM_OC4_SetConfig+0x110>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d013      	beq.n	800a474 <TIM_OC4_SetConfig+0xc0>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a1e      	ldr	r2, [pc, #120]	@ (800a4c8 <TIM_OC4_SetConfig+0x114>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d00f      	beq.n	800a474 <TIM_OC4_SetConfig+0xc0>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a1e      	ldr	r2, [pc, #120]	@ (800a4d0 <TIM_OC4_SetConfig+0x11c>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d00b      	beq.n	800a474 <TIM_OC4_SetConfig+0xc0>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a1d      	ldr	r2, [pc, #116]	@ (800a4d4 <TIM_OC4_SetConfig+0x120>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d007      	beq.n	800a474 <TIM_OC4_SetConfig+0xc0>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a1c      	ldr	r2, [pc, #112]	@ (800a4d8 <TIM_OC4_SetConfig+0x124>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d003      	beq.n	800a474 <TIM_OC4_SetConfig+0xc0>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a17      	ldr	r2, [pc, #92]	@ (800a4cc <TIM_OC4_SetConfig+0x118>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d113      	bne.n	800a49c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a47a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a482:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	019b      	lsls	r3, r3, #6
 800a48a:	693a      	ldr	r2, [r7, #16]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	019b      	lsls	r3, r3, #6
 800a496:	693a      	ldr	r2, [r7, #16]
 800a498:	4313      	orrs	r3, r2
 800a49a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	697a      	ldr	r2, [r7, #20]
 800a4b4:	621a      	str	r2, [r3, #32]
}
 800a4b6:	bf00      	nop
 800a4b8:	371c      	adds	r7, #28
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	40012c00 	.word	0x40012c00
 800a4c8:	40013400 	.word	0x40013400
 800a4cc:	40015000 	.word	0x40015000
 800a4d0:	40014000 	.word	0x40014000
 800a4d4:	40014400 	.word	0x40014400
 800a4d8:	40014800 	.word	0x40014800

0800a4dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a1b      	ldr	r3, [r3, #32]
 800a4f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a50a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a50e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	4313      	orrs	r3, r2
 800a518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a520:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	041b      	lsls	r3, r3, #16
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a19      	ldr	r2, [pc, #100]	@ (800a598 <TIM_OC5_SetConfig+0xbc>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d013      	beq.n	800a55e <TIM_OC5_SetConfig+0x82>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a18      	ldr	r2, [pc, #96]	@ (800a59c <TIM_OC5_SetConfig+0xc0>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d00f      	beq.n	800a55e <TIM_OC5_SetConfig+0x82>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a17      	ldr	r2, [pc, #92]	@ (800a5a0 <TIM_OC5_SetConfig+0xc4>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d00b      	beq.n	800a55e <TIM_OC5_SetConfig+0x82>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a16      	ldr	r2, [pc, #88]	@ (800a5a4 <TIM_OC5_SetConfig+0xc8>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d007      	beq.n	800a55e <TIM_OC5_SetConfig+0x82>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a15      	ldr	r2, [pc, #84]	@ (800a5a8 <TIM_OC5_SetConfig+0xcc>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d003      	beq.n	800a55e <TIM_OC5_SetConfig+0x82>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a14      	ldr	r2, [pc, #80]	@ (800a5ac <TIM_OC5_SetConfig+0xd0>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d109      	bne.n	800a572 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a564:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	021b      	lsls	r3, r3, #8
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	4313      	orrs	r3, r2
 800a570:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	697a      	ldr	r2, [r7, #20]
 800a576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	685a      	ldr	r2, [r3, #4]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	621a      	str	r2, [r3, #32]
}
 800a58c:	bf00      	nop
 800a58e:	371c      	adds	r7, #28
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr
 800a598:	40012c00 	.word	0x40012c00
 800a59c:	40013400 	.word	0x40013400
 800a5a0:	40014000 	.word	0x40014000
 800a5a4:	40014400 	.word	0x40014400
 800a5a8:	40014800 	.word	0x40014800
 800a5ac:	40015000 	.word	0x40015000

0800a5b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a1b      	ldr	r3, [r3, #32]
 800a5be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a1b      	ldr	r3, [r3, #32]
 800a5c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a5de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	021b      	lsls	r3, r3, #8
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a5f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	051b      	lsls	r3, r3, #20
 800a5fe:	693a      	ldr	r2, [r7, #16]
 800a600:	4313      	orrs	r3, r2
 800a602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a1a      	ldr	r2, [pc, #104]	@ (800a670 <TIM_OC6_SetConfig+0xc0>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d013      	beq.n	800a634 <TIM_OC6_SetConfig+0x84>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a19      	ldr	r2, [pc, #100]	@ (800a674 <TIM_OC6_SetConfig+0xc4>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d00f      	beq.n	800a634 <TIM_OC6_SetConfig+0x84>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a18      	ldr	r2, [pc, #96]	@ (800a678 <TIM_OC6_SetConfig+0xc8>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d00b      	beq.n	800a634 <TIM_OC6_SetConfig+0x84>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a17      	ldr	r2, [pc, #92]	@ (800a67c <TIM_OC6_SetConfig+0xcc>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d007      	beq.n	800a634 <TIM_OC6_SetConfig+0x84>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a16      	ldr	r2, [pc, #88]	@ (800a680 <TIM_OC6_SetConfig+0xd0>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d003      	beq.n	800a634 <TIM_OC6_SetConfig+0x84>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a15      	ldr	r2, [pc, #84]	@ (800a684 <TIM_OC6_SetConfig+0xd4>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d109      	bne.n	800a648 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a63a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	695b      	ldr	r3, [r3, #20]
 800a640:	029b      	lsls	r3, r3, #10
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	4313      	orrs	r3, r2
 800a646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	685a      	ldr	r2, [r3, #4]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	621a      	str	r2, [r3, #32]
}
 800a662:	bf00      	nop
 800a664:	371c      	adds	r7, #28
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	40012c00 	.word	0x40012c00
 800a674:	40013400 	.word	0x40013400
 800a678:	40014000 	.word	0x40014000
 800a67c:	40014400 	.word	0x40014400
 800a680:	40014800 	.word	0x40014800
 800a684:	40015000 	.word	0x40015000

0800a688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6a1b      	ldr	r3, [r3, #32]
 800a698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	f023 0201 	bic.w	r2, r3, #1
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	699b      	ldr	r3, [r3, #24]
 800a6aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a6b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	011b      	lsls	r3, r3, #4
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	f023 030a 	bic.w	r3, r3, #10
 800a6c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6c6:	697a      	ldr	r2, [r7, #20]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	697a      	ldr	r2, [r7, #20]
 800a6d8:	621a      	str	r2, [r3, #32]
}
 800a6da:	bf00      	nop
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr

0800a6e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b087      	sub	sp, #28
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	60f8      	str	r0, [r7, #12]
 800a6ee:	60b9      	str	r1, [r7, #8]
 800a6f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6a1b      	ldr	r3, [r3, #32]
 800a6fc:	f023 0210 	bic.w	r2, r3, #16
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	031b      	lsls	r3, r3, #12
 800a716:	693a      	ldr	r2, [r7, #16]
 800a718:	4313      	orrs	r3, r2
 800a71a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a722:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	011b      	lsls	r3, r3, #4
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	693a      	ldr	r2, [r7, #16]
 800a732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	697a      	ldr	r2, [r7, #20]
 800a738:	621a      	str	r2, [r3, #32]
}
 800a73a:	bf00      	nop
 800a73c:	371c      	adds	r7, #28
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr

0800a746 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a746:	b480      	push	{r7}
 800a748:	b085      	sub	sp, #20
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a75c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	4313      	orrs	r3, r2
 800a768:	f043 0307 	orr.w	r3, r3, #7
 800a76c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	609a      	str	r2, [r3, #8]
}
 800a774:	bf00      	nop
 800a776:	3714      	adds	r7, #20
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
 800a78c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a79a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	021a      	lsls	r2, r3, #8
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	431a      	orrs	r2, r3
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	697a      	ldr	r2, [r7, #20]
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	609a      	str	r2, [r3, #8]
}
 800a7b4:	bf00      	nop
 800a7b6:	371c      	adds	r7, #28
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b087      	sub	sp, #28
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	f003 031f 	and.w	r3, r3, #31
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6a1a      	ldr	r2, [r3, #32]
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	43db      	mvns	r3, r3
 800a7e2:	401a      	ands	r2, r3
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6a1a      	ldr	r2, [r3, #32]
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	f003 031f 	and.w	r3, r3, #31
 800a7f2:	6879      	ldr	r1, [r7, #4]
 800a7f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7f8:	431a      	orrs	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	621a      	str	r2, [r3, #32]
}
 800a7fe:	bf00      	nop
 800a800:	371c      	adds	r7, #28
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
	...

0800a80c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a26      	ldr	r2, [pc, #152]	@ (800a8b0 <TIM_ResetCallback+0xa4>)
 800a818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a25      	ldr	r2, [pc, #148]	@ (800a8b4 <TIM_ResetCallback+0xa8>)
 800a820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a24      	ldr	r2, [pc, #144]	@ (800a8b8 <TIM_ResetCallback+0xac>)
 800a828:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	4a23      	ldr	r2, [pc, #140]	@ (800a8bc <TIM_ResetCallback+0xb0>)
 800a830:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a22      	ldr	r2, [pc, #136]	@ (800a8c0 <TIM_ResetCallback+0xb4>)
 800a838:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a21      	ldr	r2, [pc, #132]	@ (800a8c4 <TIM_ResetCallback+0xb8>)
 800a840:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a20      	ldr	r2, [pc, #128]	@ (800a8c8 <TIM_ResetCallback+0xbc>)
 800a848:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a1f      	ldr	r2, [pc, #124]	@ (800a8cc <TIM_ResetCallback+0xc0>)
 800a850:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a1e      	ldr	r2, [pc, #120]	@ (800a8d0 <TIM_ResetCallback+0xc4>)
 800a858:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a1d      	ldr	r2, [pc, #116]	@ (800a8d4 <TIM_ResetCallback+0xc8>)
 800a860:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a1c      	ldr	r2, [pc, #112]	@ (800a8d8 <TIM_ResetCallback+0xcc>)
 800a868:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a1b      	ldr	r2, [pc, #108]	@ (800a8dc <TIM_ResetCallback+0xd0>)
 800a870:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a1a      	ldr	r2, [pc, #104]	@ (800a8e0 <TIM_ResetCallback+0xd4>)
 800a878:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a19      	ldr	r2, [pc, #100]	@ (800a8e4 <TIM_ResetCallback+0xd8>)
 800a880:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a18      	ldr	r2, [pc, #96]	@ (800a8e8 <TIM_ResetCallback+0xdc>)
 800a888:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4a17      	ldr	r2, [pc, #92]	@ (800a8ec <TIM_ResetCallback+0xe0>)
 800a890:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	4a16      	ldr	r2, [pc, #88]	@ (800a8f0 <TIM_ResetCallback+0xe4>)
 800a898:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a15      	ldr	r2, [pc, #84]	@ (800a8f4 <TIM_ResetCallback+0xe8>)
 800a8a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr
 800a8b0:	0800348d 	.word	0x0800348d
 800a8b4:	08009b59 	.word	0x08009b59
 800a8b8:	08009bd1 	.word	0x08009bd1
 800a8bc:	08009be5 	.word	0x08009be5
 800a8c0:	08009b81 	.word	0x08009b81
 800a8c4:	08009b95 	.word	0x08009b95
 800a8c8:	08009b6d 	.word	0x08009b6d
 800a8cc:	08009ba9 	.word	0x08009ba9
 800a8d0:	08009bbd 	.word	0x08009bbd
 800a8d4:	08009bf9 	.word	0x08009bf9
 800a8d8:	0800ab4d 	.word	0x0800ab4d
 800a8dc:	0800ab61 	.word	0x0800ab61
 800a8e0:	0800ab75 	.word	0x0800ab75
 800a8e4:	0800ab89 	.word	0x0800ab89
 800a8e8:	0800ab9d 	.word	0x0800ab9d
 800a8ec:	0800abb1 	.word	0x0800abb1
 800a8f0:	0800abc5 	.word	0x0800abc5
 800a8f4:	0800abd9 	.word	0x0800abd9

0800a8f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d101      	bne.n	800a910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a90c:	2302      	movs	r3, #2
 800a90e:	e074      	b.n	800a9fa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a34      	ldr	r2, [pc, #208]	@ (800aa08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d009      	beq.n	800a94e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a33      	ldr	r2, [pc, #204]	@ (800aa0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d004      	beq.n	800a94e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a31      	ldr	r2, [pc, #196]	@ (800aa10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d108      	bne.n	800a960 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a954:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a96a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	4313      	orrs	r3, r2
 800a974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a21      	ldr	r2, [pc, #132]	@ (800aa08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d022      	beq.n	800a9ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a990:	d01d      	beq.n	800a9ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a1f      	ldr	r2, [pc, #124]	@ (800aa14 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d018      	beq.n	800a9ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a1d      	ldr	r2, [pc, #116]	@ (800aa18 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d013      	beq.n	800a9ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a1c      	ldr	r2, [pc, #112]	@ (800aa1c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d00e      	beq.n	800a9ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a15      	ldr	r2, [pc, #84]	@ (800aa0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d009      	beq.n	800a9ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a18      	ldr	r2, [pc, #96]	@ (800aa20 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d004      	beq.n	800a9ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a11      	ldr	r2, [pc, #68]	@ (800aa10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d10c      	bne.n	800a9e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3714      	adds	r7, #20
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	40012c00 	.word	0x40012c00
 800aa0c:	40013400 	.word	0x40013400
 800aa10:	40015000 	.word	0x40015000
 800aa14:	40000400 	.word	0x40000400
 800aa18:	40000800 	.word	0x40000800
 800aa1c:	40000c00 	.word	0x40000c00
 800aa20:	40014000 	.word	0x40014000

0800aa24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d101      	bne.n	800aa40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aa3c:	2302      	movs	r3, #2
 800aa3e:	e078      	b.n	800ab32 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	699b      	ldr	r3, [r3, #24]
 800aab4:	041b      	lsls	r3, r3, #16
 800aab6:	4313      	orrs	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	69db      	ldr	r3, [r3, #28]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a1c      	ldr	r2, [pc, #112]	@ (800ab40 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d009      	beq.n	800aae6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a1b      	ldr	r2, [pc, #108]	@ (800ab44 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d004      	beq.n	800aae6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a19      	ldr	r2, [pc, #100]	@ (800ab48 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d11c      	bne.n	800ab20 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf0:	051b      	lsls	r3, r3, #20
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	4313      	orrs	r3, r2
 800ab02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	40012c00 	.word	0x40012c00
 800ab44:	40013400 	.word	0x40013400
 800ab48:	40015000 	.word	0x40015000

0800ab4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab54:	bf00      	nop
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800ab68:	bf00      	nop
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab7c:	bf00      	nop
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab90:	bf00      	nop
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800aba4:	bf00      	nop
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d101      	bne.n	800abfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e050      	b.n	800aca0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d114      	bne.n	800ac32 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fdc5 	bl	800b7a0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d103      	bne.n	800ac28 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a21      	ldr	r2, [pc, #132]	@ (800aca8 <HAL_UART_Init+0xbc>)
 800ac24:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2224      	movs	r2, #36	@ 0x24
 800ac36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f022 0201 	bic.w	r2, r2, #1
 800ac48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d002      	beq.n	800ac58 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f001 f8f2 	bl	800be3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fdf3 	bl	800b844 <UART_SetConfig>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d101      	bne.n	800ac68 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	e01b      	b.n	800aca0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ac76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689a      	ldr	r2, [r3, #8]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ac86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f042 0201 	orr.w	r2, r2, #1
 800ac96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f001 f971 	bl	800bf80 <UART_CheckIdleState>
 800ac9e:	4603      	mov	r3, r0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	08004bfd 	.word	0x08004bfd

0800acac <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800acac:	b480      	push	{r7}
 800acae:	b087      	sub	sp, #28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	460b      	mov	r3, r1
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d109      	bne.n	800acd8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800acd4:	2301      	movs	r3, #1
 800acd6:	e09c      	b.n	800ae12 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acde:	2b20      	cmp	r3, #32
 800ace0:	d16c      	bne.n	800adbc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800ace2:	7afb      	ldrb	r3, [r7, #11]
 800ace4:	2b0c      	cmp	r3, #12
 800ace6:	d85e      	bhi.n	800ada6 <HAL_UART_RegisterCallback+0xfa>
 800ace8:	a201      	add	r2, pc, #4	@ (adr r2, 800acf0 <HAL_UART_RegisterCallback+0x44>)
 800acea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acee:	bf00      	nop
 800acf0:	0800ad25 	.word	0x0800ad25
 800acf4:	0800ad2f 	.word	0x0800ad2f
 800acf8:	0800ad39 	.word	0x0800ad39
 800acfc:	0800ad43 	.word	0x0800ad43
 800ad00:	0800ad4d 	.word	0x0800ad4d
 800ad04:	0800ad57 	.word	0x0800ad57
 800ad08:	0800ad61 	.word	0x0800ad61
 800ad0c:	0800ad6b 	.word	0x0800ad6b
 800ad10:	0800ad75 	.word	0x0800ad75
 800ad14:	0800ad7f 	.word	0x0800ad7f
 800ad18:	0800ad89 	.word	0x0800ad89
 800ad1c:	0800ad93 	.word	0x0800ad93
 800ad20:	0800ad9d 	.word	0x0800ad9d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800ad2c:	e070      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800ad36:	e06b      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800ad40:	e066      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800ad4a:	e061      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800ad54:	e05c      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800ad5e:	e057      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800ad68:	e052      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800ad72:	e04d      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800ad7c:	e048      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800ad86:	e043      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800ad90:	e03e      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800ad9a:	e039      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800ada4:	e034      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	75fb      	strb	r3, [r7, #23]
        break;
 800adba:	e029      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d11a      	bne.n	800adfc <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800adc6:	7afb      	ldrb	r3, [r7, #11]
 800adc8:	2b0b      	cmp	r3, #11
 800adca:	d002      	beq.n	800add2 <HAL_UART_RegisterCallback+0x126>
 800adcc:	2b0c      	cmp	r3, #12
 800adce:	d005      	beq.n	800addc <HAL_UART_RegisterCallback+0x130>
 800add0:	e009      	b.n	800ade6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800adda:	e019      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800ade4:	e014      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	75fb      	strb	r3, [r7, #23]
        break;
 800adfa:	e009      	b.n	800ae10 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ae10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	371c      	adds	r7, #28
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop

0800ae20 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b08a      	sub	sp, #40	@ 0x28
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae34:	2b20      	cmp	r3, #32
 800ae36:	d167      	bne.n	800af08 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d002      	beq.n	800ae44 <HAL_UART_Transmit_DMA+0x24>
 800ae3e:	88fb      	ldrh	r3, [r7, #6]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d101      	bne.n	800ae48 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	e060      	b.n	800af0a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	88fa      	ldrh	r2, [r7, #6]
 800ae52:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	88fa      	ldrh	r2, [r7, #6]
 800ae5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2221      	movs	r2, #33	@ 0x21
 800ae6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d028      	beq.n	800aec8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae7a:	4a26      	ldr	r2, [pc, #152]	@ (800af14 <HAL_UART_Transmit_DMA+0xf4>)
 800ae7c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae82:	4a25      	ldr	r2, [pc, #148]	@ (800af18 <HAL_UART_Transmit_DMA+0xf8>)
 800ae84:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae8a:	4a24      	ldr	r2, [pc, #144]	@ (800af1c <HAL_UART_Transmit_DMA+0xfc>)
 800ae8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae92:	2200      	movs	r2, #0
 800ae94:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae9e:	4619      	mov	r1, r3
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3328      	adds	r3, #40	@ 0x28
 800aea6:	461a      	mov	r2, r3
 800aea8:	88fb      	ldrh	r3, [r7, #6]
 800aeaa:	f7fc f883 	bl	8006fb4 <HAL_DMA_Start_IT>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d009      	beq.n	800aec8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2210      	movs	r2, #16
 800aeb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2220      	movs	r2, #32
 800aec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e020      	b.n	800af0a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2240      	movs	r2, #64	@ 0x40
 800aece:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3308      	adds	r3, #8
 800aed6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	e853 3f00 	ldrex	r3, [r3]
 800aede:	613b      	str	r3, [r7, #16]
   return(result);
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aee6:	627b      	str	r3, [r7, #36]	@ 0x24
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3308      	adds	r3, #8
 800aeee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aef0:	623a      	str	r2, [r7, #32]
 800aef2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef4:	69f9      	ldr	r1, [r7, #28]
 800aef6:	6a3a      	ldr	r2, [r7, #32]
 800aef8:	e841 2300 	strex	r3, r2, [r1]
 800aefc:	61bb      	str	r3, [r7, #24]
   return(result);
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1e5      	bne.n	800aed0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	e000      	b.n	800af0a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800af08:	2302      	movs	r3, #2
  }
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3728      	adds	r7, #40	@ 0x28
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	0800c44b 	.word	0x0800c44b
 800af18:	0800c4e9 	.word	0x0800c4e9
 800af1c:	0800c683 	.word	0x0800c683

0800af20 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b08a      	sub	sp, #40	@ 0x28
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	4613      	mov	r3, r2
 800af2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af34:	2b20      	cmp	r3, #32
 800af36:	d137      	bne.n	800afa8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d002      	beq.n	800af44 <HAL_UART_Receive_DMA+0x24>
 800af3e:	88fb      	ldrh	r3, [r7, #6]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d101      	bne.n	800af48 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800af44:	2301      	movs	r3, #1
 800af46:	e030      	b.n	800afaa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a18      	ldr	r2, [pc, #96]	@ (800afb4 <HAL_UART_Receive_DMA+0x94>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d01f      	beq.n	800af98 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af62:	2b00      	cmp	r3, #0
 800af64:	d018      	beq.n	800af98 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	e853 3f00 	ldrex	r3, [r3]
 800af72:	613b      	str	r3, [r7, #16]
   return(result);
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800af7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	461a      	mov	r2, r3
 800af82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af84:	623b      	str	r3, [r7, #32]
 800af86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af88:	69f9      	ldr	r1, [r7, #28]
 800af8a:	6a3a      	ldr	r2, [r7, #32]
 800af8c:	e841 2300 	strex	r3, r2, [r1]
 800af90:	61bb      	str	r3, [r7, #24]
   return(result);
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1e6      	bne.n	800af66 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800af98:	88fb      	ldrh	r3, [r7, #6]
 800af9a:	461a      	mov	r2, r3
 800af9c:	68b9      	ldr	r1, [r7, #8]
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f001 f906 	bl	800c1b0 <UART_Start_Receive_DMA>
 800afa4:	4603      	mov	r3, r0
 800afa6:	e000      	b.n	800afaa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800afa8:	2302      	movs	r3, #2
  }
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3728      	adds	r7, #40	@ 0x28
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	40008000 	.word	0x40008000

0800afb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b0ba      	sub	sp, #232	@ 0xe8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	69db      	ldr	r3, [r3, #28]
 800afc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800afde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800afe2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800afe6:	4013      	ands	r3, r2
 800afe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800afec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d11b      	bne.n	800b02c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aff8:	f003 0320 	and.w	r3, r3, #32
 800affc:	2b00      	cmp	r3, #0
 800affe:	d015      	beq.n	800b02c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b004:	f003 0320 	and.w	r3, r3, #32
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d105      	bne.n	800b018 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b00c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d009      	beq.n	800b02c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 82f3 	beq.w	800b608 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	4798      	blx	r3
      }
      return;
 800b02a:	e2ed      	b.n	800b608 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b02c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b030:	2b00      	cmp	r3, #0
 800b032:	f000 8129 	beq.w	800b288 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b036:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b03a:	4b90      	ldr	r3, [pc, #576]	@ (800b27c <HAL_UART_IRQHandler+0x2c4>)
 800b03c:	4013      	ands	r3, r2
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d106      	bne.n	800b050 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b042:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b046:	4b8e      	ldr	r3, [pc, #568]	@ (800b280 <HAL_UART_IRQHandler+0x2c8>)
 800b048:	4013      	ands	r3, r2
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f000 811c 	beq.w	800b288 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b054:	f003 0301 	and.w	r3, r3, #1
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d011      	beq.n	800b080 <HAL_UART_IRQHandler+0xc8>
 800b05c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00b      	beq.n	800b080 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2201      	movs	r2, #1
 800b06e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b076:	f043 0201 	orr.w	r2, r3, #1
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b084:	f003 0302 	and.w	r3, r3, #2
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d011      	beq.n	800b0b0 <HAL_UART_IRQHandler+0xf8>
 800b08c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b090:	f003 0301 	and.w	r3, r3, #1
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00b      	beq.n	800b0b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2202      	movs	r2, #2
 800b09e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0a6:	f043 0204 	orr.w	r2, r3, #4
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0b4:	f003 0304 	and.w	r3, r3, #4
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d011      	beq.n	800b0e0 <HAL_UART_IRQHandler+0x128>
 800b0bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00b      	beq.n	800b0e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2204      	movs	r2, #4
 800b0ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0d6:	f043 0202 	orr.w	r2, r3, #2
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b0e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0e4:	f003 0308 	and.w	r3, r3, #8
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d017      	beq.n	800b11c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b0ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0f0:	f003 0320 	and.w	r3, r3, #32
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d105      	bne.n	800b104 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b0f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b0fc:	4b5f      	ldr	r3, [pc, #380]	@ (800b27c <HAL_UART_IRQHandler+0x2c4>)
 800b0fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00b      	beq.n	800b11c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2208      	movs	r2, #8
 800b10a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b112:	f043 0208 	orr.w	r2, r3, #8
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b124:	2b00      	cmp	r3, #0
 800b126:	d012      	beq.n	800b14e <HAL_UART_IRQHandler+0x196>
 800b128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b12c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00c      	beq.n	800b14e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b13c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b144:	f043 0220 	orr.w	r2, r3, #32
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b154:	2b00      	cmp	r3, #0
 800b156:	f000 8259 	beq.w	800b60c <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b15a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b15e:	f003 0320 	and.w	r3, r3, #32
 800b162:	2b00      	cmp	r3, #0
 800b164:	d013      	beq.n	800b18e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b16a:	f003 0320 	and.w	r3, r3, #32
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d105      	bne.n	800b17e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d007      	beq.n	800b18e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b182:	2b00      	cmp	r3, #0
 800b184:	d003      	beq.n	800b18e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b194:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1a2:	2b40      	cmp	r3, #64	@ 0x40
 800b1a4:	d005      	beq.n	800b1b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b1a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b1aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d058      	beq.n	800b264 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f001 f8e3 	bl	800c37e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1c2:	2b40      	cmp	r3, #64	@ 0x40
 800b1c4:	d148      	bne.n	800b258 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	3308      	adds	r3, #8
 800b1cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b1d4:	e853 3f00 	ldrex	r3, [r3]
 800b1d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b1dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b1e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	3308      	adds	r3, #8
 800b1ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b1f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b1f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b1fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b202:	e841 2300 	strex	r3, r2, [r1]
 800b206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b20a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d1d9      	bne.n	800b1c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d017      	beq.n	800b24c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b222:	4a18      	ldr	r2, [pc, #96]	@ (800b284 <HAL_UART_IRQHandler+0x2cc>)
 800b224:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7fb ff95 	bl	800715c <HAL_DMA_Abort_IT>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d01f      	beq.n	800b278 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b246:	4610      	mov	r0, r2
 800b248:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b24a:	e015      	b.n	800b278 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b256:	e00f      	b.n	800b278 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b262:	e009      	b.n	800b278 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b276:	e1c9      	b.n	800b60c <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b278:	bf00      	nop
    return;
 800b27a:	e1c7      	b.n	800b60c <HAL_UART_IRQHandler+0x654>
 800b27c:	10000001 	.word	0x10000001
 800b280:	04000120 	.word	0x04000120
 800b284:	0800c707 	.word	0x0800c707

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	f040 8157 	bne.w	800b540 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b296:	f003 0310 	and.w	r3, r3, #16
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 8150 	beq.w	800b540 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b2a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2a4:	f003 0310 	and.w	r3, r3, #16
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f000 8149 	beq.w	800b540 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2210      	movs	r2, #16
 800b2b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2c0:	2b40      	cmp	r3, #64	@ 0x40
 800b2c2:	f040 80bd 	bne.w	800b440 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b2d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f000 8199 	beq.w	800b610 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b2e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	f080 8191 	bcs.w	800b610 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b2f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f003 0320 	and.w	r3, r3, #32
 800b306:	2b00      	cmp	r3, #0
 800b308:	f040 8087 	bne.w	800b41a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b314:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b318:	e853 3f00 	ldrex	r3, [r3]
 800b31c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b320:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b328:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	461a      	mov	r2, r3
 800b332:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b336:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b33a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b342:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b346:	e841 2300 	strex	r3, r2, [r1]
 800b34a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b34e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1da      	bne.n	800b30c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	3308      	adds	r3, #8
 800b35c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b360:	e853 3f00 	ldrex	r3, [r3]
 800b364:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b366:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b368:	f023 0301 	bic.w	r3, r3, #1
 800b36c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3308      	adds	r3, #8
 800b376:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b37a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b37e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b380:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b382:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b386:	e841 2300 	strex	r3, r2, [r1]
 800b38a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b38c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d1e1      	bne.n	800b356 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	3308      	adds	r3, #8
 800b398:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b39c:	e853 3f00 	ldrex	r3, [r3]
 800b3a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b3a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	3308      	adds	r3, #8
 800b3b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b3b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b3b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b3bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b3be:	e841 2300 	strex	r3, r2, [r1]
 800b3c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b3c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1e3      	bne.n	800b392 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2220      	movs	r2, #32
 800b3ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3e0:	e853 3f00 	ldrex	r3, [r3]
 800b3e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b3e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3e8:	f023 0310 	bic.w	r3, r3, #16
 800b3ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b3fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b400:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b402:	e841 2300 	strex	r3, r2, [r1]
 800b406:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1e4      	bne.n	800b3d8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b414:	4618      	mov	r0, r3
 800b416:	f7fb fe48 	bl	80070aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2202      	movs	r2, #2
 800b41e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800b432:	b292      	uxth	r2, r2
 800b434:	1a8a      	subs	r2, r1, r2
 800b436:	b292      	uxth	r2, r2
 800b438:	4611      	mov	r1, r2
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b43e:	e0e7      	b.n	800b610 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	1ad3      	subs	r3, r2, r3
 800b450:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f000 80d9 	beq.w	800b614 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800b462:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b466:	2b00      	cmp	r3, #0
 800b468:	f000 80d4 	beq.w	800b614 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b474:	e853 3f00 	ldrex	r3, [r3]
 800b478:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b47c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b480:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	461a      	mov	r2, r3
 800b48a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b48e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b490:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b492:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b494:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b496:	e841 2300 	strex	r3, r2, [r1]
 800b49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b49c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1e4      	bne.n	800b46c <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	3308      	adds	r3, #8
 800b4a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ac:	e853 3f00 	ldrex	r3, [r3]
 800b4b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b4b8:	f023 0301 	bic.w	r3, r3, #1
 800b4bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3308      	adds	r3, #8
 800b4c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b4ca:	633a      	str	r2, [r7, #48]	@ 0x30
 800b4cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4d2:	e841 2300 	strex	r3, r2, [r1]
 800b4d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1e1      	bne.n	800b4a2 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2220      	movs	r2, #32
 800b4e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	e853 3f00 	ldrex	r3, [r3]
 800b4fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f023 0310 	bic.w	r3, r3, #16
 800b506:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	461a      	mov	r2, r3
 800b510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b514:	61fb      	str	r3, [r7, #28]
 800b516:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b518:	69b9      	ldr	r1, [r7, #24]
 800b51a:	69fa      	ldr	r2, [r7, #28]
 800b51c:	e841 2300 	strex	r3, r2, [r1]
 800b520:	617b      	str	r3, [r7, #20]
   return(result);
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1e4      	bne.n	800b4f2 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2202      	movs	r2, #2
 800b52c:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b534:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800b538:	4611      	mov	r1, r2
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b53e:	e069      	b.n	800b614 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b544:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d010      	beq.n	800b56e <HAL_UART_IRQHandler+0x5b6>
 800b54c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b550:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00a      	beq.n	800b56e <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b560:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b56c:	e055      	b.n	800b61a <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b56e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b576:	2b00      	cmp	r3, #0
 800b578:	d014      	beq.n	800b5a4 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b57a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b57e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b582:	2b00      	cmp	r3, #0
 800b584:	d105      	bne.n	800b592 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b58a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d008      	beq.n	800b5a4 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b596:	2b00      	cmp	r3, #0
 800b598:	d03e      	beq.n	800b618 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	4798      	blx	r3
    }
    return;
 800b5a2:	e039      	b.n	800b618 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b5a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d009      	beq.n	800b5c4 <HAL_UART_IRQHandler+0x60c>
 800b5b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d003      	beq.n	800b5c4 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f001 f8ba 	bl	800c736 <UART_EndTransmit_IT>
    return;
 800b5c2:	e02a      	b.n	800b61a <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b5c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00b      	beq.n	800b5e8 <HAL_UART_IRQHandler+0x630>
 800b5d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d005      	beq.n	800b5e8 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b5e6:	e018      	b.n	800b61a <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b5e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d012      	beq.n	800b61a <HAL_UART_IRQHandler+0x662>
 800b5f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	da0e      	bge.n	800b61a <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b606:	e008      	b.n	800b61a <HAL_UART_IRQHandler+0x662>
      return;
 800b608:	bf00      	nop
 800b60a:	e006      	b.n	800b61a <HAL_UART_IRQHandler+0x662>
    return;
 800b60c:	bf00      	nop
 800b60e:	e004      	b.n	800b61a <HAL_UART_IRQHandler+0x662>
      return;
 800b610:	bf00      	nop
 800b612:	e002      	b.n	800b61a <HAL_UART_IRQHandler+0x662>
      return;
 800b614:	bf00      	nop
 800b616:	e000      	b.n	800b61a <HAL_UART_IRQHandler+0x662>
    return;
 800b618:	bf00      	nop
  }
}
 800b61a:	37e8      	adds	r7, #232	@ 0xe8
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b650:	bf00      	nop
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b664:	bf00      	nop
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b678:	bf00      	nop
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a09      	ldr	r2, [pc, #36]	@ (800b70c <HAL_UART_ReceiverTimeout_Config+0x34>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d009      	beq.n	800b700 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	695b      	ldr	r3, [r3, #20]
 800b6f2:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	430a      	orrs	r2, r1
 800b6fe:	615a      	str	r2, [r3, #20]
  }
}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	40008000 	.word	0x40008000

0800b710 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a18      	ldr	r2, [pc, #96]	@ (800b780 <HAL_UART_EnableReceiverTimeout+0x70>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d027      	beq.n	800b772 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b728:	2b20      	cmp	r3, #32
 800b72a:	d120      	bne.n	800b76e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b732:	2b01      	cmp	r3, #1
 800b734:	d101      	bne.n	800b73a <HAL_UART_EnableReceiverTimeout+0x2a>
 800b736:	2302      	movs	r3, #2
 800b738:	e01c      	b.n	800b774 <HAL_UART_EnableReceiverTimeout+0x64>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2201      	movs	r2, #1
 800b73e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2224      	movs	r2, #36	@ 0x24
 800b746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	685a      	ldr	r2, [r3, #4]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b758:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2220      	movs	r2, #32
 800b75e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800b76a:	2300      	movs	r3, #0
 800b76c:	e002      	b.n	800b774 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800b76e:	2302      	movs	r3, #2
 800b770:	e000      	b.n	800b774 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800b772:	2301      	movs	r3, #1
  }
}
 800b774:	4618      	mov	r0, r3
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	40008000 	.word	0x40008000

0800b784 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800b792:	4618      	mov	r0, r3
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
	...

0800b7a0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a1a      	ldr	r2, [pc, #104]	@ (800b814 <UART_InitCallbacksToDefault+0x74>)
 800b7ac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a19      	ldr	r2, [pc, #100]	@ (800b818 <UART_InitCallbacksToDefault+0x78>)
 800b7b4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a18      	ldr	r2, [pc, #96]	@ (800b81c <UART_InitCallbacksToDefault+0x7c>)
 800b7bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a17      	ldr	r2, [pc, #92]	@ (800b820 <UART_InitCallbacksToDefault+0x80>)
 800b7c4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a16      	ldr	r2, [pc, #88]	@ (800b824 <UART_InitCallbacksToDefault+0x84>)
 800b7cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4a15      	ldr	r2, [pc, #84]	@ (800b828 <UART_InitCallbacksToDefault+0x88>)
 800b7d4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a14      	ldr	r2, [pc, #80]	@ (800b82c <UART_InitCallbacksToDefault+0x8c>)
 800b7dc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a13      	ldr	r2, [pc, #76]	@ (800b830 <UART_InitCallbacksToDefault+0x90>)
 800b7e4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4a12      	ldr	r2, [pc, #72]	@ (800b834 <UART_InitCallbacksToDefault+0x94>)
 800b7ec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a11      	ldr	r2, [pc, #68]	@ (800b838 <UART_InitCallbacksToDefault+0x98>)
 800b7f4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4a10      	ldr	r2, [pc, #64]	@ (800b83c <UART_InitCallbacksToDefault+0x9c>)
 800b7fc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4a0f      	ldr	r2, [pc, #60]	@ (800b840 <UART_InitCallbacksToDefault+0xa0>)
 800b804:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800b808:	bf00      	nop
 800b80a:	370c      	adds	r7, #12
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr
 800b814:	0800b635 	.word	0x0800b635
 800b818:	0800b621 	.word	0x0800b621
 800b81c:	0800b65d 	.word	0x0800b65d
 800b820:	0800b649 	.word	0x0800b649
 800b824:	0800b671 	.word	0x0800b671
 800b828:	0800b685 	.word	0x0800b685
 800b82c:	0800b699 	.word	0x0800b699
 800b830:	0800b6ad 	.word	0x0800b6ad
 800b834:	0800c791 	.word	0x0800c791
 800b838:	0800c7a5 	.word	0x0800c7a5
 800b83c:	0800c7b9 	.word	0x0800c7b9
 800b840:	0800b6c1 	.word	0x0800b6c1

0800b844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b848:	b08c      	sub	sp, #48	@ 0x30
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	689a      	ldr	r2, [r3, #8]
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	431a      	orrs	r2, r3
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	431a      	orrs	r2, r3
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	69db      	ldr	r3, [r3, #28]
 800b868:	4313      	orrs	r3, r2
 800b86a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	4baa      	ldr	r3, [pc, #680]	@ (800bb1c <UART_SetConfig+0x2d8>)
 800b874:	4013      	ands	r3, r2
 800b876:	697a      	ldr	r2, [r7, #20]
 800b878:	6812      	ldr	r2, [r2, #0]
 800b87a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b87c:	430b      	orrs	r3, r1
 800b87e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	68da      	ldr	r2, [r3, #12]
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	430a      	orrs	r2, r1
 800b894:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a9f      	ldr	r2, [pc, #636]	@ (800bb20 <UART_SetConfig+0x2dc>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d004      	beq.n	800b8b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b8ba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b8be:	697a      	ldr	r2, [r7, #20]
 800b8c0:	6812      	ldr	r2, [r2, #0]
 800b8c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8c4:	430b      	orrs	r3, r1
 800b8c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ce:	f023 010f 	bic.w	r1, r3, #15
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	430a      	orrs	r2, r1
 800b8dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a90      	ldr	r2, [pc, #576]	@ (800bb24 <UART_SetConfig+0x2e0>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d125      	bne.n	800b934 <UART_SetConfig+0xf0>
 800b8e8:	4b8f      	ldr	r3, [pc, #572]	@ (800bb28 <UART_SetConfig+0x2e4>)
 800b8ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8ee:	f003 0303 	and.w	r3, r3, #3
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	d81a      	bhi.n	800b92c <UART_SetConfig+0xe8>
 800b8f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b8fc <UART_SetConfig+0xb8>)
 800b8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8fc:	0800b90d 	.word	0x0800b90d
 800b900:	0800b91d 	.word	0x0800b91d
 800b904:	0800b915 	.word	0x0800b915
 800b908:	0800b925 	.word	0x0800b925
 800b90c:	2301      	movs	r3, #1
 800b90e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b912:	e116      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800b914:	2302      	movs	r3, #2
 800b916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b91a:	e112      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800b91c:	2304      	movs	r3, #4
 800b91e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b922:	e10e      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800b924:	2308      	movs	r3, #8
 800b926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b92a:	e10a      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800b92c:	2310      	movs	r3, #16
 800b92e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b932:	e106      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a7c      	ldr	r2, [pc, #496]	@ (800bb2c <UART_SetConfig+0x2e8>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d138      	bne.n	800b9b0 <UART_SetConfig+0x16c>
 800b93e:	4b7a      	ldr	r3, [pc, #488]	@ (800bb28 <UART_SetConfig+0x2e4>)
 800b940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b944:	f003 030c 	and.w	r3, r3, #12
 800b948:	2b0c      	cmp	r3, #12
 800b94a:	d82d      	bhi.n	800b9a8 <UART_SetConfig+0x164>
 800b94c:	a201      	add	r2, pc, #4	@ (adr r2, 800b954 <UART_SetConfig+0x110>)
 800b94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b952:	bf00      	nop
 800b954:	0800b989 	.word	0x0800b989
 800b958:	0800b9a9 	.word	0x0800b9a9
 800b95c:	0800b9a9 	.word	0x0800b9a9
 800b960:	0800b9a9 	.word	0x0800b9a9
 800b964:	0800b999 	.word	0x0800b999
 800b968:	0800b9a9 	.word	0x0800b9a9
 800b96c:	0800b9a9 	.word	0x0800b9a9
 800b970:	0800b9a9 	.word	0x0800b9a9
 800b974:	0800b991 	.word	0x0800b991
 800b978:	0800b9a9 	.word	0x0800b9a9
 800b97c:	0800b9a9 	.word	0x0800b9a9
 800b980:	0800b9a9 	.word	0x0800b9a9
 800b984:	0800b9a1 	.word	0x0800b9a1
 800b988:	2300      	movs	r3, #0
 800b98a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b98e:	e0d8      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800b990:	2302      	movs	r3, #2
 800b992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b996:	e0d4      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800b998:	2304      	movs	r3, #4
 800b99a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b99e:	e0d0      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800b9a0:	2308      	movs	r3, #8
 800b9a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9a6:	e0cc      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800b9a8:	2310      	movs	r3, #16
 800b9aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9ae:	e0c8      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a5e      	ldr	r2, [pc, #376]	@ (800bb30 <UART_SetConfig+0x2ec>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d125      	bne.n	800ba06 <UART_SetConfig+0x1c2>
 800b9ba:	4b5b      	ldr	r3, [pc, #364]	@ (800bb28 <UART_SetConfig+0x2e4>)
 800b9bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b9c4:	2b30      	cmp	r3, #48	@ 0x30
 800b9c6:	d016      	beq.n	800b9f6 <UART_SetConfig+0x1b2>
 800b9c8:	2b30      	cmp	r3, #48	@ 0x30
 800b9ca:	d818      	bhi.n	800b9fe <UART_SetConfig+0x1ba>
 800b9cc:	2b20      	cmp	r3, #32
 800b9ce:	d00a      	beq.n	800b9e6 <UART_SetConfig+0x1a2>
 800b9d0:	2b20      	cmp	r3, #32
 800b9d2:	d814      	bhi.n	800b9fe <UART_SetConfig+0x1ba>
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <UART_SetConfig+0x19a>
 800b9d8:	2b10      	cmp	r3, #16
 800b9da:	d008      	beq.n	800b9ee <UART_SetConfig+0x1aa>
 800b9dc:	e00f      	b.n	800b9fe <UART_SetConfig+0x1ba>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9e4:	e0ad      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800b9e6:	2302      	movs	r3, #2
 800b9e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9ec:	e0a9      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800b9ee:	2304      	movs	r3, #4
 800b9f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9f4:	e0a5      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800b9f6:	2308      	movs	r3, #8
 800b9f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9fc:	e0a1      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800b9fe:	2310      	movs	r3, #16
 800ba00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba04:	e09d      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4a4a      	ldr	r2, [pc, #296]	@ (800bb34 <UART_SetConfig+0x2f0>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d125      	bne.n	800ba5c <UART_SetConfig+0x218>
 800ba10:	4b45      	ldr	r3, [pc, #276]	@ (800bb28 <UART_SetConfig+0x2e4>)
 800ba12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ba1a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba1c:	d016      	beq.n	800ba4c <UART_SetConfig+0x208>
 800ba1e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba20:	d818      	bhi.n	800ba54 <UART_SetConfig+0x210>
 800ba22:	2b80      	cmp	r3, #128	@ 0x80
 800ba24:	d00a      	beq.n	800ba3c <UART_SetConfig+0x1f8>
 800ba26:	2b80      	cmp	r3, #128	@ 0x80
 800ba28:	d814      	bhi.n	800ba54 <UART_SetConfig+0x210>
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d002      	beq.n	800ba34 <UART_SetConfig+0x1f0>
 800ba2e:	2b40      	cmp	r3, #64	@ 0x40
 800ba30:	d008      	beq.n	800ba44 <UART_SetConfig+0x200>
 800ba32:	e00f      	b.n	800ba54 <UART_SetConfig+0x210>
 800ba34:	2300      	movs	r3, #0
 800ba36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba3a:	e082      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba42:	e07e      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800ba44:	2304      	movs	r3, #4
 800ba46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba4a:	e07a      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800ba4c:	2308      	movs	r3, #8
 800ba4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba52:	e076      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800ba54:	2310      	movs	r3, #16
 800ba56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba5a:	e072      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a35      	ldr	r2, [pc, #212]	@ (800bb38 <UART_SetConfig+0x2f4>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d12a      	bne.n	800babc <UART_SetConfig+0x278>
 800ba66:	4b30      	ldr	r3, [pc, #192]	@ (800bb28 <UART_SetConfig+0x2e4>)
 800ba68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba74:	d01a      	beq.n	800baac <UART_SetConfig+0x268>
 800ba76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba7a:	d81b      	bhi.n	800bab4 <UART_SetConfig+0x270>
 800ba7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba80:	d00c      	beq.n	800ba9c <UART_SetConfig+0x258>
 800ba82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba86:	d815      	bhi.n	800bab4 <UART_SetConfig+0x270>
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d003      	beq.n	800ba94 <UART_SetConfig+0x250>
 800ba8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba90:	d008      	beq.n	800baa4 <UART_SetConfig+0x260>
 800ba92:	e00f      	b.n	800bab4 <UART_SetConfig+0x270>
 800ba94:	2300      	movs	r3, #0
 800ba96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba9a:	e052      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baa2:	e04e      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800baa4:	2304      	movs	r3, #4
 800baa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baaa:	e04a      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800baac:	2308      	movs	r3, #8
 800baae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bab2:	e046      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800bab4:	2310      	movs	r3, #16
 800bab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baba:	e042      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a17      	ldr	r2, [pc, #92]	@ (800bb20 <UART_SetConfig+0x2dc>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d13a      	bne.n	800bb3c <UART_SetConfig+0x2f8>
 800bac6:	4b18      	ldr	r3, [pc, #96]	@ (800bb28 <UART_SetConfig+0x2e4>)
 800bac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bacc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bad0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bad4:	d01a      	beq.n	800bb0c <UART_SetConfig+0x2c8>
 800bad6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bada:	d81b      	bhi.n	800bb14 <UART_SetConfig+0x2d0>
 800badc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bae0:	d00c      	beq.n	800bafc <UART_SetConfig+0x2b8>
 800bae2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bae6:	d815      	bhi.n	800bb14 <UART_SetConfig+0x2d0>
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d003      	beq.n	800baf4 <UART_SetConfig+0x2b0>
 800baec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800baf0:	d008      	beq.n	800bb04 <UART_SetConfig+0x2c0>
 800baf2:	e00f      	b.n	800bb14 <UART_SetConfig+0x2d0>
 800baf4:	2300      	movs	r3, #0
 800baf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bafa:	e022      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800bafc:	2302      	movs	r3, #2
 800bafe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb02:	e01e      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800bb04:	2304      	movs	r3, #4
 800bb06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb0a:	e01a      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800bb0c:	2308      	movs	r3, #8
 800bb0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb12:	e016      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800bb14:	2310      	movs	r3, #16
 800bb16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb1a:	e012      	b.n	800bb42 <UART_SetConfig+0x2fe>
 800bb1c:	cfff69f3 	.word	0xcfff69f3
 800bb20:	40008000 	.word	0x40008000
 800bb24:	40013800 	.word	0x40013800
 800bb28:	40021000 	.word	0x40021000
 800bb2c:	40004400 	.word	0x40004400
 800bb30:	40004800 	.word	0x40004800
 800bb34:	40004c00 	.word	0x40004c00
 800bb38:	40005000 	.word	0x40005000
 800bb3c:	2310      	movs	r3, #16
 800bb3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4aae      	ldr	r2, [pc, #696]	@ (800be00 <UART_SetConfig+0x5bc>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	f040 8097 	bne.w	800bc7c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb52:	2b08      	cmp	r3, #8
 800bb54:	d823      	bhi.n	800bb9e <UART_SetConfig+0x35a>
 800bb56:	a201      	add	r2, pc, #4	@ (adr r2, 800bb5c <UART_SetConfig+0x318>)
 800bb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5c:	0800bb81 	.word	0x0800bb81
 800bb60:	0800bb9f 	.word	0x0800bb9f
 800bb64:	0800bb89 	.word	0x0800bb89
 800bb68:	0800bb9f 	.word	0x0800bb9f
 800bb6c:	0800bb8f 	.word	0x0800bb8f
 800bb70:	0800bb9f 	.word	0x0800bb9f
 800bb74:	0800bb9f 	.word	0x0800bb9f
 800bb78:	0800bb9f 	.word	0x0800bb9f
 800bb7c:	0800bb97 	.word	0x0800bb97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb80:	f7fc fbdc 	bl	800833c <HAL_RCC_GetPCLK1Freq>
 800bb84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb86:	e010      	b.n	800bbaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb88:	4b9e      	ldr	r3, [pc, #632]	@ (800be04 <UART_SetConfig+0x5c0>)
 800bb8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb8c:	e00d      	b.n	800bbaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb8e:	f7fc fb67 	bl	8008260 <HAL_RCC_GetSysClockFreq>
 800bb92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb94:	e009      	b.n	800bbaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb9c:	e005      	b.n	800bbaa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bba8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f000 8130 	beq.w	800be12 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbb6:	4a94      	ldr	r2, [pc, #592]	@ (800be08 <UART_SetConfig+0x5c4>)
 800bbb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbc4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	685a      	ldr	r2, [r3, #4]
 800bbca:	4613      	mov	r3, r2
 800bbcc:	005b      	lsls	r3, r3, #1
 800bbce:	4413      	add	r3, r2
 800bbd0:	69ba      	ldr	r2, [r7, #24]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d305      	bcc.n	800bbe2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbdc:	69ba      	ldr	r2, [r7, #24]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d903      	bls.n	800bbea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bbe8:	e113      	b.n	800be12 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbec:	2200      	movs	r2, #0
 800bbee:	60bb      	str	r3, [r7, #8]
 800bbf0:	60fa      	str	r2, [r7, #12]
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbf6:	4a84      	ldr	r2, [pc, #528]	@ (800be08 <UART_SetConfig+0x5c4>)
 800bbf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	2200      	movs	r2, #0
 800bc00:	603b      	str	r3, [r7, #0]
 800bc02:	607a      	str	r2, [r7, #4]
 800bc04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bc0c:	f7f5 f808 	bl	8000c20 <__aeabi_uldivmod>
 800bc10:	4602      	mov	r2, r0
 800bc12:	460b      	mov	r3, r1
 800bc14:	4610      	mov	r0, r2
 800bc16:	4619      	mov	r1, r3
 800bc18:	f04f 0200 	mov.w	r2, #0
 800bc1c:	f04f 0300 	mov.w	r3, #0
 800bc20:	020b      	lsls	r3, r1, #8
 800bc22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc26:	0202      	lsls	r2, r0, #8
 800bc28:	6979      	ldr	r1, [r7, #20]
 800bc2a:	6849      	ldr	r1, [r1, #4]
 800bc2c:	0849      	lsrs	r1, r1, #1
 800bc2e:	2000      	movs	r0, #0
 800bc30:	460c      	mov	r4, r1
 800bc32:	4605      	mov	r5, r0
 800bc34:	eb12 0804 	adds.w	r8, r2, r4
 800bc38:	eb43 0905 	adc.w	r9, r3, r5
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	469a      	mov	sl, r3
 800bc44:	4693      	mov	fp, r2
 800bc46:	4652      	mov	r2, sl
 800bc48:	465b      	mov	r3, fp
 800bc4a:	4640      	mov	r0, r8
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	f7f4 ffe7 	bl	8000c20 <__aeabi_uldivmod>
 800bc52:	4602      	mov	r2, r0
 800bc54:	460b      	mov	r3, r1
 800bc56:	4613      	mov	r3, r2
 800bc58:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc60:	d308      	bcc.n	800bc74 <UART_SetConfig+0x430>
 800bc62:	6a3b      	ldr	r3, [r7, #32]
 800bc64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc68:	d204      	bcs.n	800bc74 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	6a3a      	ldr	r2, [r7, #32]
 800bc70:	60da      	str	r2, [r3, #12]
 800bc72:	e0ce      	b.n	800be12 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bc7a:	e0ca      	b.n	800be12 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	69db      	ldr	r3, [r3, #28]
 800bc80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc84:	d166      	bne.n	800bd54 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bc86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bc8a:	2b08      	cmp	r3, #8
 800bc8c:	d827      	bhi.n	800bcde <UART_SetConfig+0x49a>
 800bc8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc94 <UART_SetConfig+0x450>)
 800bc90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc94:	0800bcb9 	.word	0x0800bcb9
 800bc98:	0800bcc1 	.word	0x0800bcc1
 800bc9c:	0800bcc9 	.word	0x0800bcc9
 800bca0:	0800bcdf 	.word	0x0800bcdf
 800bca4:	0800bccf 	.word	0x0800bccf
 800bca8:	0800bcdf 	.word	0x0800bcdf
 800bcac:	0800bcdf 	.word	0x0800bcdf
 800bcb0:	0800bcdf 	.word	0x0800bcdf
 800bcb4:	0800bcd7 	.word	0x0800bcd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bcb8:	f7fc fb40 	bl	800833c <HAL_RCC_GetPCLK1Freq>
 800bcbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bcbe:	e014      	b.n	800bcea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bcc0:	f7fc fb52 	bl	8008368 <HAL_RCC_GetPCLK2Freq>
 800bcc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bcc6:	e010      	b.n	800bcea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bcc8:	4b4e      	ldr	r3, [pc, #312]	@ (800be04 <UART_SetConfig+0x5c0>)
 800bcca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bccc:	e00d      	b.n	800bcea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bcce:	f7fc fac7 	bl	8008260 <HAL_RCC_GetSysClockFreq>
 800bcd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bcd4:	e009      	b.n	800bcea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bcdc:	e005      	b.n	800bcea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bcde:	2300      	movs	r3, #0
 800bce0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bce8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f000 8090 	beq.w	800be12 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcf6:	4a44      	ldr	r2, [pc, #272]	@ (800be08 <UART_SetConfig+0x5c4>)
 800bcf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd00:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd04:	005a      	lsls	r2, r3, #1
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	085b      	lsrs	r3, r3, #1
 800bd0c:	441a      	add	r2, r3
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd18:	6a3b      	ldr	r3, [r7, #32]
 800bd1a:	2b0f      	cmp	r3, #15
 800bd1c:	d916      	bls.n	800bd4c <UART_SetConfig+0x508>
 800bd1e:	6a3b      	ldr	r3, [r7, #32]
 800bd20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd24:	d212      	bcs.n	800bd4c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd26:	6a3b      	ldr	r3, [r7, #32]
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	f023 030f 	bic.w	r3, r3, #15
 800bd2e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd30:	6a3b      	ldr	r3, [r7, #32]
 800bd32:	085b      	lsrs	r3, r3, #1
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	f003 0307 	and.w	r3, r3, #7
 800bd3a:	b29a      	uxth	r2, r3
 800bd3c:	8bfb      	ldrh	r3, [r7, #30]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	8bfa      	ldrh	r2, [r7, #30]
 800bd48:	60da      	str	r2, [r3, #12]
 800bd4a:	e062      	b.n	800be12 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bd52:	e05e      	b.n	800be12 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd58:	2b08      	cmp	r3, #8
 800bd5a:	d828      	bhi.n	800bdae <UART_SetConfig+0x56a>
 800bd5c:	a201      	add	r2, pc, #4	@ (adr r2, 800bd64 <UART_SetConfig+0x520>)
 800bd5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd62:	bf00      	nop
 800bd64:	0800bd89 	.word	0x0800bd89
 800bd68:	0800bd91 	.word	0x0800bd91
 800bd6c:	0800bd99 	.word	0x0800bd99
 800bd70:	0800bdaf 	.word	0x0800bdaf
 800bd74:	0800bd9f 	.word	0x0800bd9f
 800bd78:	0800bdaf 	.word	0x0800bdaf
 800bd7c:	0800bdaf 	.word	0x0800bdaf
 800bd80:	0800bdaf 	.word	0x0800bdaf
 800bd84:	0800bda7 	.word	0x0800bda7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd88:	f7fc fad8 	bl	800833c <HAL_RCC_GetPCLK1Freq>
 800bd8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd8e:	e014      	b.n	800bdba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd90:	f7fc faea 	bl	8008368 <HAL_RCC_GetPCLK2Freq>
 800bd94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd96:	e010      	b.n	800bdba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd98:	4b1a      	ldr	r3, [pc, #104]	@ (800be04 <UART_SetConfig+0x5c0>)
 800bd9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd9c:	e00d      	b.n	800bdba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd9e:	f7fc fa5f 	bl	8008260 <HAL_RCC_GetSysClockFreq>
 800bda2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bda4:	e009      	b.n	800bdba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bda6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bdaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bdac:	e005      	b.n	800bdba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bdb8:	bf00      	nop
    }

    if (pclk != 0U)
 800bdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d028      	beq.n	800be12 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdc4:	4a10      	ldr	r2, [pc, #64]	@ (800be08 <UART_SetConfig+0x5c4>)
 800bdc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdce:	fbb3 f2f2 	udiv	r2, r3, r2
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	085b      	lsrs	r3, r3, #1
 800bdd8:	441a      	add	r2, r3
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	fbb2 f3f3 	udiv	r3, r2, r3
 800bde2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bde4:	6a3b      	ldr	r3, [r7, #32]
 800bde6:	2b0f      	cmp	r3, #15
 800bde8:	d910      	bls.n	800be0c <UART_SetConfig+0x5c8>
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdf0:	d20c      	bcs.n	800be0c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	60da      	str	r2, [r3, #12]
 800bdfc:	e009      	b.n	800be12 <UART_SetConfig+0x5ce>
 800bdfe:	bf00      	nop
 800be00:	40008000 	.word	0x40008000
 800be04:	00f42400 	.word	0x00f42400
 800be08:	0800ce8c 	.word	0x0800ce8c
      }
      else
      {
        ret = HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	2201      	movs	r2, #1
 800be16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	2201      	movs	r2, #1
 800be1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2200      	movs	r2, #0
 800be26:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	2200      	movs	r2, #0
 800be2c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800be2e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800be32:	4618      	mov	r0, r3
 800be34:	3730      	adds	r7, #48	@ 0x30
 800be36:	46bd      	mov	sp, r7
 800be38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800be3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be48:	f003 0308 	and.w	r3, r3, #8
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00a      	beq.n	800be66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	430a      	orrs	r2, r1
 800be64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be6a:	f003 0301 	and.w	r3, r3, #1
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00a      	beq.n	800be88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	430a      	orrs	r2, r1
 800be86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be8c:	f003 0302 	and.w	r3, r3, #2
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00a      	beq.n	800beaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	430a      	orrs	r2, r1
 800bea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beae:	f003 0304 	and.w	r3, r3, #4
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d00a      	beq.n	800becc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	430a      	orrs	r2, r1
 800beca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed0:	f003 0310 	and.w	r3, r3, #16
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00a      	beq.n	800beee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	430a      	orrs	r2, r1
 800beec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bef2:	f003 0320 	and.w	r3, r3, #32
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00a      	beq.n	800bf10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	430a      	orrs	r2, r1
 800bf0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d01a      	beq.n	800bf52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	430a      	orrs	r2, r1
 800bf30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf3a:	d10a      	bne.n	800bf52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	430a      	orrs	r2, r1
 800bf50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00a      	beq.n	800bf74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	430a      	orrs	r2, r1
 800bf72:	605a      	str	r2, [r3, #4]
  }
}
 800bf74:	bf00      	nop
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b098      	sub	sp, #96	@ 0x60
 800bf84:	af02      	add	r7, sp, #8
 800bf86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf90:	f7f9 f82a 	bl	8004fe8 <HAL_GetTick>
 800bf94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f003 0308 	and.w	r3, r3, #8
 800bfa0:	2b08      	cmp	r3, #8
 800bfa2:	d12f      	bne.n	800c004 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfa4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfac:	2200      	movs	r2, #0
 800bfae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 f88e 	bl	800c0d4 <UART_WaitOnFlagUntilTimeout>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d022      	beq.n	800c004 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc6:	e853 3f00 	ldrex	r3, [r3]
 800bfca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bfcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfd2:	653b      	str	r3, [r7, #80]	@ 0x50
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	461a      	mov	r2, r3
 800bfda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfdc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bfe2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfe4:	e841 2300 	strex	r3, r2, [r1]
 800bfe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bfea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1e6      	bne.n	800bfbe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2220      	movs	r2, #32
 800bff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c000:	2303      	movs	r3, #3
 800c002:	e063      	b.n	800c0cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f003 0304 	and.w	r3, r3, #4
 800c00e:	2b04      	cmp	r3, #4
 800c010:	d149      	bne.n	800c0a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c012:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c01a:	2200      	movs	r2, #0
 800c01c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 f857 	bl	800c0d4 <UART_WaitOnFlagUntilTimeout>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d03c      	beq.n	800c0a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c034:	e853 3f00 	ldrex	r3, [r3]
 800c038:	623b      	str	r3, [r7, #32]
   return(result);
 800c03a:	6a3b      	ldr	r3, [r7, #32]
 800c03c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c040:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	461a      	mov	r2, r3
 800c048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c04a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c04c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c052:	e841 2300 	strex	r3, r2, [r1]
 800c056:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1e6      	bne.n	800c02c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	3308      	adds	r3, #8
 800c064:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	e853 3f00 	ldrex	r3, [r3]
 800c06c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f023 0301 	bic.w	r3, r3, #1
 800c074:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	3308      	adds	r3, #8
 800c07c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c07e:	61fa      	str	r2, [r7, #28]
 800c080:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c082:	69b9      	ldr	r1, [r7, #24]
 800c084:	69fa      	ldr	r2, [r7, #28]
 800c086:	e841 2300 	strex	r3, r2, [r1]
 800c08a:	617b      	str	r3, [r7, #20]
   return(result);
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1e5      	bne.n	800c05e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2220      	movs	r2, #32
 800c096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	e012      	b.n	800c0cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2220      	movs	r2, #32
 800c0aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2220      	movs	r2, #32
 800c0b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3758      	adds	r7, #88	@ 0x58
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	603b      	str	r3, [r7, #0]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0e4:	e04f      	b.n	800c186 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ec:	d04b      	beq.n	800c186 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0ee:	f7f8 ff7b 	bl	8004fe8 <HAL_GetTick>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	1ad3      	subs	r3, r2, r3
 800c0f8:	69ba      	ldr	r2, [r7, #24]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d302      	bcc.n	800c104 <UART_WaitOnFlagUntilTimeout+0x30>
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c104:	2303      	movs	r3, #3
 800c106:	e04e      	b.n	800c1a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f003 0304 	and.w	r3, r3, #4
 800c112:	2b00      	cmp	r3, #0
 800c114:	d037      	beq.n	800c186 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	2b80      	cmp	r3, #128	@ 0x80
 800c11a:	d034      	beq.n	800c186 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	2b40      	cmp	r3, #64	@ 0x40
 800c120:	d031      	beq.n	800c186 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	69db      	ldr	r3, [r3, #28]
 800c128:	f003 0308 	and.w	r3, r3, #8
 800c12c:	2b08      	cmp	r3, #8
 800c12e:	d110      	bne.n	800c152 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2208      	movs	r2, #8
 800c136:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c138:	68f8      	ldr	r0, [r7, #12]
 800c13a:	f000 f920 	bl	800c37e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2208      	movs	r2, #8
 800c142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2200      	movs	r2, #0
 800c14a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c14e:	2301      	movs	r3, #1
 800c150:	e029      	b.n	800c1a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	69db      	ldr	r3, [r3, #28]
 800c158:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c15c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c160:	d111      	bne.n	800c186 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c16a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f000 f906 	bl	800c37e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2220      	movs	r2, #32
 800c176:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c182:	2303      	movs	r3, #3
 800c184:	e00f      	b.n	800c1a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	69da      	ldr	r2, [r3, #28]
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	4013      	ands	r3, r2
 800c190:	68ba      	ldr	r2, [r7, #8]
 800c192:	429a      	cmp	r2, r3
 800c194:	bf0c      	ite	eq
 800c196:	2301      	moveq	r3, #1
 800c198:	2300      	movne	r3, #0
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	461a      	mov	r2, r3
 800c19e:	79fb      	ldrb	r3, [r7, #7]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d0a0      	beq.n	800c0e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
	...

0800c1b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b096      	sub	sp, #88	@ 0x58
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	88fa      	ldrh	r2, [r7, #6]
 800c1c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2222      	movs	r2, #34	@ 0x22
 800c1d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d02d      	beq.n	800c242 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1ec:	4a40      	ldr	r2, [pc, #256]	@ (800c2f0 <UART_Start_Receive_DMA+0x140>)
 800c1ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1f6:	4a3f      	ldr	r2, [pc, #252]	@ (800c2f4 <UART_Start_Receive_DMA+0x144>)
 800c1f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c200:	4a3d      	ldr	r2, [pc, #244]	@ (800c2f8 <UART_Start_Receive_DMA+0x148>)
 800c202:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c20a:	2200      	movs	r2, #0
 800c20c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	3324      	adds	r3, #36	@ 0x24
 800c21a:	4619      	mov	r1, r3
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c220:	461a      	mov	r2, r3
 800c222:	88fb      	ldrh	r3, [r7, #6]
 800c224:	f7fa fec6 	bl	8006fb4 <HAL_DMA_Start_IT>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d009      	beq.n	800c242 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2210      	movs	r2, #16
 800c232:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2220      	movs	r2, #32
 800c23a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	e051      	b.n	800c2e6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d018      	beq.n	800c27c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c252:	e853 3f00 	ldrex	r3, [r3]
 800c256:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c25a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c25e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	461a      	mov	r2, r3
 800c266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c268:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c26a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c26c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c26e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c270:	e841 2300 	strex	r3, r2, [r1]
 800c274:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d1e6      	bne.n	800c24a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	3308      	adds	r3, #8
 800c282:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c286:	e853 3f00 	ldrex	r3, [r3]
 800c28a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28e:	f043 0301 	orr.w	r3, r3, #1
 800c292:	653b      	str	r3, [r7, #80]	@ 0x50
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3308      	adds	r3, #8
 800c29a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c29c:	637a      	str	r2, [r7, #52]	@ 0x34
 800c29e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c2a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2a4:	e841 2300 	strex	r3, r2, [r1]
 800c2a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c2aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1e5      	bne.n	800c27c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	3308      	adds	r3, #8
 800c2b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	e853 3f00 	ldrex	r3, [r3]
 800c2be:	613b      	str	r3, [r7, #16]
   return(result);
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	3308      	adds	r3, #8
 800c2ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c2d0:	623a      	str	r2, [r7, #32]
 800c2d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d4:	69f9      	ldr	r1, [r7, #28]
 800c2d6:	6a3a      	ldr	r2, [r7, #32]
 800c2d8:	e841 2300 	strex	r3, r2, [r1]
 800c2dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1e5      	bne.n	800c2b0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c2e4:	2300      	movs	r3, #0
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3758      	adds	r7, #88	@ 0x58
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	0800c509 	.word	0x0800c509
 800c2f4:	0800c63d 	.word	0x0800c63d
 800c2f8:	0800c683 	.word	0x0800c683

0800c2fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b08f      	sub	sp, #60	@ 0x3c
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30a:	6a3b      	ldr	r3, [r7, #32]
 800c30c:	e853 3f00 	ldrex	r3, [r3]
 800c310:	61fb      	str	r3, [r7, #28]
   return(result);
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c318:	637b      	str	r3, [r7, #52]	@ 0x34
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	461a      	mov	r2, r3
 800c320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c322:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c324:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c326:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c328:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c32a:	e841 2300 	strex	r3, r2, [r1]
 800c32e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1e6      	bne.n	800c304 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	3308      	adds	r3, #8
 800c33c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	e853 3f00 	ldrex	r3, [r3]
 800c344:	60bb      	str	r3, [r7, #8]
   return(result);
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c34c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	3308      	adds	r3, #8
 800c354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c356:	61ba      	str	r2, [r7, #24]
 800c358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35a:	6979      	ldr	r1, [r7, #20]
 800c35c:	69ba      	ldr	r2, [r7, #24]
 800c35e:	e841 2300 	strex	r3, r2, [r1]
 800c362:	613b      	str	r3, [r7, #16]
   return(result);
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1e5      	bne.n	800c336 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2220      	movs	r2, #32
 800c36e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c372:	bf00      	nop
 800c374:	373c      	adds	r7, #60	@ 0x3c
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr

0800c37e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c37e:	b480      	push	{r7}
 800c380:	b095      	sub	sp, #84	@ 0x54
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c38e:	e853 3f00 	ldrex	r3, [r3]
 800c392:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c396:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c39a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c3a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c3aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c3ac:	e841 2300 	strex	r3, r2, [r1]
 800c3b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1e6      	bne.n	800c386 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	3308      	adds	r3, #8
 800c3be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c0:	6a3b      	ldr	r3, [r7, #32]
 800c3c2:	e853 3f00 	ldrex	r3, [r3]
 800c3c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c3ce:	f023 0301 	bic.w	r3, r3, #1
 800c3d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	3308      	adds	r3, #8
 800c3da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c3dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c3de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c3e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3e4:	e841 2300 	strex	r3, r2, [r1]
 800c3e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1e3      	bne.n	800c3b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d118      	bne.n	800c42a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	e853 3f00 	ldrex	r3, [r3]
 800c404:	60bb      	str	r3, [r7, #8]
   return(result);
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	f023 0310 	bic.w	r3, r3, #16
 800c40c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	461a      	mov	r2, r3
 800c414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c416:	61bb      	str	r3, [r7, #24]
 800c418:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41a:	6979      	ldr	r1, [r7, #20]
 800c41c:	69ba      	ldr	r2, [r7, #24]
 800c41e:	e841 2300 	strex	r3, r2, [r1]
 800c422:	613b      	str	r3, [r7, #16]
   return(result);
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d1e6      	bne.n	800c3f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2220      	movs	r2, #32
 800c42e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2200      	movs	r2, #0
 800c436:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c43e:	bf00      	nop
 800c440:	3754      	adds	r7, #84	@ 0x54
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr

0800c44a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b090      	sub	sp, #64	@ 0x40
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c456:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f003 0320 	and.w	r3, r3, #32
 800c462:	2b00      	cmp	r3, #0
 800c464:	d137      	bne.n	800c4d6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c468:	2200      	movs	r2, #0
 800c46a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c46e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	3308      	adds	r3, #8
 800c474:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c478:	e853 3f00 	ldrex	r3, [r3]
 800c47c:	623b      	str	r3, [r7, #32]
   return(result);
 800c47e:	6a3b      	ldr	r3, [r7, #32]
 800c480:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c484:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	3308      	adds	r3, #8
 800c48c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c48e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c490:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c492:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c496:	e841 2300 	strex	r3, r2, [r1]
 800c49a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1e5      	bne.n	800c46e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c4a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	e853 3f00 	ldrex	r3, [r3]
 800c4ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	461a      	mov	r2, r3
 800c4be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4c0:	61fb      	str	r3, [r7, #28]
 800c4c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c4:	69b9      	ldr	r1, [r7, #24]
 800c4c6:	69fa      	ldr	r2, [r7, #28]
 800c4c8:	e841 2300 	strex	r3, r2, [r1]
 800c4cc:	617b      	str	r3, [r7, #20]
   return(result);
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1e6      	bne.n	800c4a2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4d4:	e004      	b.n	800c4e0 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800c4d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c4dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c4de:	4798      	blx	r3
}
 800c4e0:	bf00      	nop
 800c4e2:	3740      	adds	r7, #64	@ 0x40
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c500:	bf00      	nop
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b09c      	sub	sp, #112	@ 0x70
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c514:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f003 0320 	and.w	r3, r3, #32
 800c520:	2b00      	cmp	r3, #0
 800c522:	d171      	bne.n	800c608 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c526:	2200      	movs	r2, #0
 800c528:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c52c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c534:	e853 3f00 	ldrex	r3, [r3]
 800c538:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c53a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c53c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c540:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	461a      	mov	r2, r3
 800c548:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c54a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c54c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c54e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c550:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c552:	e841 2300 	strex	r3, r2, [r1]
 800c556:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c558:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d1e6      	bne.n	800c52c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c55e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3308      	adds	r3, #8
 800c564:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c568:	e853 3f00 	ldrex	r3, [r3]
 800c56c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c56e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c570:	f023 0301 	bic.w	r3, r3, #1
 800c574:	667b      	str	r3, [r7, #100]	@ 0x64
 800c576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	3308      	adds	r3, #8
 800c57c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c57e:	647a      	str	r2, [r7, #68]	@ 0x44
 800c580:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c582:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c586:	e841 2300 	strex	r3, r2, [r1]
 800c58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c58c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1e5      	bne.n	800c55e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	3308      	adds	r3, #8
 800c598:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59c:	e853 3f00 	ldrex	r3, [r3]
 800c5a0:	623b      	str	r3, [r7, #32]
   return(result);
 800c5a2:	6a3b      	ldr	r3, [r7, #32]
 800c5a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5a8:	663b      	str	r3, [r7, #96]	@ 0x60
 800c5aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	3308      	adds	r3, #8
 800c5b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c5b2:	633a      	str	r2, [r7, #48]	@ 0x30
 800c5b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5ba:	e841 2300 	strex	r3, r2, [r1]
 800c5be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d1e5      	bne.n	800c592 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c5c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5c8:	2220      	movs	r2, #32
 800c5ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d118      	bne.n	800c608 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	e853 3f00 	ldrex	r3, [r3]
 800c5e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f023 0310 	bic.w	r3, r3, #16
 800c5ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c5ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5f4:	61fb      	str	r3, [r7, #28]
 800c5f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f8:	69b9      	ldr	r1, [r7, #24]
 800c5fa:	69fa      	ldr	r2, [r7, #28]
 800c5fc:	e841 2300 	strex	r3, r2, [r1]
 800c600:	617b      	str	r3, [r7, #20]
   return(result);
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1e6      	bne.n	800c5d6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c60a:	2200      	movs	r2, #0
 800c60c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c60e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c612:	2b01      	cmp	r3, #1
 800c614:	d109      	bne.n	800c62a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c618:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c61c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c61e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c622:	4611      	mov	r1, r2
 800c624:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c626:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c628:	e004      	b.n	800c634 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800c62a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c62c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c630:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c632:	4798      	blx	r3
}
 800c634:	bf00      	nop
 800c636:	3770      	adds	r7, #112	@ 0x70
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c648:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2201      	movs	r2, #1
 800c64e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c654:	2b01      	cmp	r3, #1
 800c656:	d10b      	bne.n	800c670 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c664:	0852      	lsrs	r2, r2, #1
 800c666:	b292      	uxth	r2, r2
 800c668:	4611      	mov	r1, r2
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c66e:	e004      	b.n	800c67a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	4798      	blx	r3
}
 800c67a:	bf00      	nop
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b086      	sub	sp, #24
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c68e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c696:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c69e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6aa:	2b80      	cmp	r3, #128	@ 0x80
 800c6ac:	d109      	bne.n	800c6c2 <UART_DMAError+0x40>
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	2b21      	cmp	r3, #33	@ 0x21
 800c6b2:	d106      	bne.n	800c6c2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c6bc:	6978      	ldr	r0, [r7, #20]
 800c6be:	f7ff fe1d 	bl	800c2fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6cc:	2b40      	cmp	r3, #64	@ 0x40
 800c6ce:	d109      	bne.n	800c6e4 <UART_DMAError+0x62>
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2b22      	cmp	r3, #34	@ 0x22
 800c6d4:	d106      	bne.n	800c6e4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c6de:	6978      	ldr	r0, [r7, #20]
 800c6e0:	f7ff fe4d 	bl	800c37e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6ea:	f043 0210 	orr.w	r2, r3, #16
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c6fa:	6978      	ldr	r0, [r7, #20]
 800c6fc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6fe:	bf00      	nop
 800c700:	3718      	adds	r7, #24
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b084      	sub	sp, #16
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c712:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2200      	movs	r2, #0
 800c718:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2200      	movs	r2, #0
 800c720:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c72a:	68f8      	ldr	r0, [r7, #12]
 800c72c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c72e:	bf00      	nop
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b088      	sub	sp, #32
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	e853 3f00 	ldrex	r3, [r3]
 800c74a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c752:	61fb      	str	r3, [r7, #28]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	461a      	mov	r2, r3
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	61bb      	str	r3, [r7, #24]
 800c75e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c760:	6979      	ldr	r1, [r7, #20]
 800c762:	69ba      	ldr	r2, [r7, #24]
 800c764:	e841 2300 	strex	r3, r2, [r1]
 800c768:	613b      	str	r3, [r7, #16]
   return(result);
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d1e6      	bne.n	800c73e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2220      	movs	r2, #32
 800c774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c788:	bf00      	nop
 800c78a:	3720      	adds	r7, #32
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c798:	bf00      	nop
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c7ac:	bf00      	nop
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c7c0:	bf00      	nop
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d101      	bne.n	800c7e2 <HAL_UARTEx_DisableFifoMode+0x16>
 800c7de:	2302      	movs	r3, #2
 800c7e0:	e027      	b.n	800c832 <HAL_UARTEx_DisableFifoMode+0x66>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2224      	movs	r2, #36	@ 0x24
 800c7ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f022 0201 	bic.w	r2, r2, #1
 800c808:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c810:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2220      	movs	r2, #32
 800c824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c830:	2300      	movs	r3, #0
}
 800c832:	4618      	mov	r0, r3
 800c834:	3714      	adds	r7, #20
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr

0800c83e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c83e:	b580      	push	{r7, lr}
 800c840:	b084      	sub	sp, #16
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
 800c846:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d101      	bne.n	800c856 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c852:	2302      	movs	r3, #2
 800c854:	e02d      	b.n	800c8b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2201      	movs	r2, #1
 800c85a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2224      	movs	r2, #36	@ 0x24
 800c862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f022 0201 	bic.w	r2, r2, #1
 800c87c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	683a      	ldr	r2, [r7, #0]
 800c88e:	430a      	orrs	r2, r1
 800c890:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f850 	bl	800c938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2220      	movs	r2, #32
 800c8a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8b0:	2300      	movs	r3, #0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b084      	sub	sp, #16
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
 800c8c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d101      	bne.n	800c8d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c8ce:	2302      	movs	r3, #2
 800c8d0:	e02d      	b.n	800c92e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2224      	movs	r2, #36	@ 0x24
 800c8de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f022 0201 	bic.w	r2, r2, #1
 800c8f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	683a      	ldr	r2, [r7, #0]
 800c90a:	430a      	orrs	r2, r1
 800c90c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 f812 	bl	800c938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2220      	movs	r2, #32
 800c920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
	...

0800c938 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c944:	2b00      	cmp	r3, #0
 800c946:	d108      	bne.n	800c95a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c958:	e031      	b.n	800c9be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c95a:	2308      	movs	r3, #8
 800c95c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c95e:	2308      	movs	r3, #8
 800c960:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	0e5b      	lsrs	r3, r3, #25
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	f003 0307 	and.w	r3, r3, #7
 800c970:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	0f5b      	lsrs	r3, r3, #29
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	f003 0307 	and.w	r3, r3, #7
 800c980:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c982:	7bbb      	ldrb	r3, [r7, #14]
 800c984:	7b3a      	ldrb	r2, [r7, #12]
 800c986:	4911      	ldr	r1, [pc, #68]	@ (800c9cc <UARTEx_SetNbDataToProcess+0x94>)
 800c988:	5c8a      	ldrb	r2, [r1, r2]
 800c98a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c98e:	7b3a      	ldrb	r2, [r7, #12]
 800c990:	490f      	ldr	r1, [pc, #60]	@ (800c9d0 <UARTEx_SetNbDataToProcess+0x98>)
 800c992:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c994:	fb93 f3f2 	sdiv	r3, r3, r2
 800c998:	b29a      	uxth	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9a0:	7bfb      	ldrb	r3, [r7, #15]
 800c9a2:	7b7a      	ldrb	r2, [r7, #13]
 800c9a4:	4909      	ldr	r1, [pc, #36]	@ (800c9cc <UARTEx_SetNbDataToProcess+0x94>)
 800c9a6:	5c8a      	ldrb	r2, [r1, r2]
 800c9a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c9ac:	7b7a      	ldrb	r2, [r7, #13]
 800c9ae:	4908      	ldr	r1, [pc, #32]	@ (800c9d0 <UARTEx_SetNbDataToProcess+0x98>)
 800c9b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c9be:	bf00      	nop
 800c9c0:	3714      	adds	r7, #20
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	0800cea4 	.word	0x0800cea4
 800c9d0:	0800ceac 	.word	0x0800ceac

0800c9d4 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b085      	sub	sp, #20
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	607b      	str	r3, [r7, #4]
 800c9de:	460b      	mov	r3, r1
 800c9e0:	817b      	strh	r3, [r7, #10]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	897a      	ldrh	r2, [r7, #10]
 800c9ea:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	893a      	ldrh	r2, [r7, #8]
 800c9f0:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	605a      	str	r2, [r3, #4]
}
 800c9f8:	bf00      	nop
 800c9fa:	3714      	adds	r7, #20
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <memset>:
 800ca04:	4402      	add	r2, r0
 800ca06:	4603      	mov	r3, r0
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d100      	bne.n	800ca0e <memset+0xa>
 800ca0c:	4770      	bx	lr
 800ca0e:	f803 1b01 	strb.w	r1, [r3], #1
 800ca12:	e7f9      	b.n	800ca08 <memset+0x4>

0800ca14 <__errno>:
 800ca14:	4b01      	ldr	r3, [pc, #4]	@ (800ca1c <__errno+0x8>)
 800ca16:	6818      	ldr	r0, [r3, #0]
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	20000270 	.word	0x20000270

0800ca20 <__libc_init_array>:
 800ca20:	b570      	push	{r4, r5, r6, lr}
 800ca22:	4d0d      	ldr	r5, [pc, #52]	@ (800ca58 <__libc_init_array+0x38>)
 800ca24:	4c0d      	ldr	r4, [pc, #52]	@ (800ca5c <__libc_init_array+0x3c>)
 800ca26:	1b64      	subs	r4, r4, r5
 800ca28:	10a4      	asrs	r4, r4, #2
 800ca2a:	2600      	movs	r6, #0
 800ca2c:	42a6      	cmp	r6, r4
 800ca2e:	d109      	bne.n	800ca44 <__libc_init_array+0x24>
 800ca30:	4d0b      	ldr	r5, [pc, #44]	@ (800ca60 <__libc_init_array+0x40>)
 800ca32:	4c0c      	ldr	r4, [pc, #48]	@ (800ca64 <__libc_init_array+0x44>)
 800ca34:	f000 f9a8 	bl	800cd88 <_init>
 800ca38:	1b64      	subs	r4, r4, r5
 800ca3a:	10a4      	asrs	r4, r4, #2
 800ca3c:	2600      	movs	r6, #0
 800ca3e:	42a6      	cmp	r6, r4
 800ca40:	d105      	bne.n	800ca4e <__libc_init_array+0x2e>
 800ca42:	bd70      	pop	{r4, r5, r6, pc}
 800ca44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca48:	4798      	blx	r3
 800ca4a:	3601      	adds	r6, #1
 800ca4c:	e7ee      	b.n	800ca2c <__libc_init_array+0xc>
 800ca4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca52:	4798      	blx	r3
 800ca54:	3601      	adds	r6, #1
 800ca56:	e7f2      	b.n	800ca3e <__libc_init_array+0x1e>
 800ca58:	0800cebc 	.word	0x0800cebc
 800ca5c:	0800cebc 	.word	0x0800cebc
 800ca60:	0800cebc 	.word	0x0800cebc
 800ca64:	0800cec0 	.word	0x0800cec0

0800ca68 <memcpy>:
 800ca68:	440a      	add	r2, r1
 800ca6a:	4291      	cmp	r1, r2
 800ca6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca70:	d100      	bne.n	800ca74 <memcpy+0xc>
 800ca72:	4770      	bx	lr
 800ca74:	b510      	push	{r4, lr}
 800ca76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca7e:	4291      	cmp	r1, r2
 800ca80:	d1f9      	bne.n	800ca76 <memcpy+0xe>
 800ca82:	bd10      	pop	{r4, pc}

0800ca84 <sqrt>:
 800ca84:	b538      	push	{r3, r4, r5, lr}
 800ca86:	ed2d 8b02 	vpush	{d8}
 800ca8a:	ec55 4b10 	vmov	r4, r5, d0
 800ca8e:	f000 f825 	bl	800cadc <__ieee754_sqrt>
 800ca92:	4622      	mov	r2, r4
 800ca94:	462b      	mov	r3, r5
 800ca96:	4620      	mov	r0, r4
 800ca98:	4629      	mov	r1, r5
 800ca9a:	eeb0 8a40 	vmov.f32	s16, s0
 800ca9e:	eef0 8a60 	vmov.f32	s17, s1
 800caa2:	f7f4 f80f 	bl	8000ac4 <__aeabi_dcmpun>
 800caa6:	b990      	cbnz	r0, 800cace <sqrt+0x4a>
 800caa8:	2200      	movs	r2, #0
 800caaa:	2300      	movs	r3, #0
 800caac:	4620      	mov	r0, r4
 800caae:	4629      	mov	r1, r5
 800cab0:	f7f3 ffe0 	bl	8000a74 <__aeabi_dcmplt>
 800cab4:	b158      	cbz	r0, 800cace <sqrt+0x4a>
 800cab6:	f7ff ffad 	bl	800ca14 <__errno>
 800caba:	2321      	movs	r3, #33	@ 0x21
 800cabc:	6003      	str	r3, [r0, #0]
 800cabe:	2200      	movs	r2, #0
 800cac0:	2300      	movs	r3, #0
 800cac2:	4610      	mov	r0, r2
 800cac4:	4619      	mov	r1, r3
 800cac6:	f7f3 fe8d 	bl	80007e4 <__aeabi_ddiv>
 800caca:	ec41 0b18 	vmov	d8, r0, r1
 800cace:	eeb0 0a48 	vmov.f32	s0, s16
 800cad2:	eef0 0a68 	vmov.f32	s1, s17
 800cad6:	ecbd 8b02 	vpop	{d8}
 800cada:	bd38      	pop	{r3, r4, r5, pc}

0800cadc <__ieee754_sqrt>:
 800cadc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae0:	4a68      	ldr	r2, [pc, #416]	@ (800cc84 <__ieee754_sqrt+0x1a8>)
 800cae2:	ec55 4b10 	vmov	r4, r5, d0
 800cae6:	43aa      	bics	r2, r5
 800cae8:	462b      	mov	r3, r5
 800caea:	4621      	mov	r1, r4
 800caec:	d110      	bne.n	800cb10 <__ieee754_sqrt+0x34>
 800caee:	4622      	mov	r2, r4
 800caf0:	4620      	mov	r0, r4
 800caf2:	4629      	mov	r1, r5
 800caf4:	f7f3 fd4c 	bl	8000590 <__aeabi_dmul>
 800caf8:	4602      	mov	r2, r0
 800cafa:	460b      	mov	r3, r1
 800cafc:	4620      	mov	r0, r4
 800cafe:	4629      	mov	r1, r5
 800cb00:	f7f3 fb90 	bl	8000224 <__adddf3>
 800cb04:	4604      	mov	r4, r0
 800cb06:	460d      	mov	r5, r1
 800cb08:	ec45 4b10 	vmov	d0, r4, r5
 800cb0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb10:	2d00      	cmp	r5, #0
 800cb12:	dc0e      	bgt.n	800cb32 <__ieee754_sqrt+0x56>
 800cb14:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cb18:	4322      	orrs	r2, r4
 800cb1a:	d0f5      	beq.n	800cb08 <__ieee754_sqrt+0x2c>
 800cb1c:	b19d      	cbz	r5, 800cb46 <__ieee754_sqrt+0x6a>
 800cb1e:	4622      	mov	r2, r4
 800cb20:	4620      	mov	r0, r4
 800cb22:	4629      	mov	r1, r5
 800cb24:	f7f3 fb7c 	bl	8000220 <__aeabi_dsub>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	f7f3 fe5a 	bl	80007e4 <__aeabi_ddiv>
 800cb30:	e7e8      	b.n	800cb04 <__ieee754_sqrt+0x28>
 800cb32:	152a      	asrs	r2, r5, #20
 800cb34:	d115      	bne.n	800cb62 <__ieee754_sqrt+0x86>
 800cb36:	2000      	movs	r0, #0
 800cb38:	e009      	b.n	800cb4e <__ieee754_sqrt+0x72>
 800cb3a:	0acb      	lsrs	r3, r1, #11
 800cb3c:	3a15      	subs	r2, #21
 800cb3e:	0549      	lsls	r1, r1, #21
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d0fa      	beq.n	800cb3a <__ieee754_sqrt+0x5e>
 800cb44:	e7f7      	b.n	800cb36 <__ieee754_sqrt+0x5a>
 800cb46:	462a      	mov	r2, r5
 800cb48:	e7fa      	b.n	800cb40 <__ieee754_sqrt+0x64>
 800cb4a:	005b      	lsls	r3, r3, #1
 800cb4c:	3001      	adds	r0, #1
 800cb4e:	02dc      	lsls	r4, r3, #11
 800cb50:	d5fb      	bpl.n	800cb4a <__ieee754_sqrt+0x6e>
 800cb52:	1e44      	subs	r4, r0, #1
 800cb54:	1b12      	subs	r2, r2, r4
 800cb56:	f1c0 0420 	rsb	r4, r0, #32
 800cb5a:	fa21 f404 	lsr.w	r4, r1, r4
 800cb5e:	4323      	orrs	r3, r4
 800cb60:	4081      	lsls	r1, r0
 800cb62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb66:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800cb6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb6e:	07d2      	lsls	r2, r2, #31
 800cb70:	bf5c      	itt	pl
 800cb72:	005b      	lslpl	r3, r3, #1
 800cb74:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800cb78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cb7c:	bf58      	it	pl
 800cb7e:	0049      	lslpl	r1, r1, #1
 800cb80:	2600      	movs	r6, #0
 800cb82:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800cb86:	106d      	asrs	r5, r5, #1
 800cb88:	0049      	lsls	r1, r1, #1
 800cb8a:	2016      	movs	r0, #22
 800cb8c:	4632      	mov	r2, r6
 800cb8e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800cb92:	1917      	adds	r7, r2, r4
 800cb94:	429f      	cmp	r7, r3
 800cb96:	bfde      	ittt	le
 800cb98:	193a      	addle	r2, r7, r4
 800cb9a:	1bdb      	suble	r3, r3, r7
 800cb9c:	1936      	addle	r6, r6, r4
 800cb9e:	0fcf      	lsrs	r7, r1, #31
 800cba0:	3801      	subs	r0, #1
 800cba2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800cba6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cbaa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cbae:	d1f0      	bne.n	800cb92 <__ieee754_sqrt+0xb6>
 800cbb0:	4604      	mov	r4, r0
 800cbb2:	2720      	movs	r7, #32
 800cbb4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	eb00 0e0c 	add.w	lr, r0, ip
 800cbbe:	db02      	blt.n	800cbc6 <__ieee754_sqrt+0xea>
 800cbc0:	d113      	bne.n	800cbea <__ieee754_sqrt+0x10e>
 800cbc2:	458e      	cmp	lr, r1
 800cbc4:	d811      	bhi.n	800cbea <__ieee754_sqrt+0x10e>
 800cbc6:	f1be 0f00 	cmp.w	lr, #0
 800cbca:	eb0e 000c 	add.w	r0, lr, ip
 800cbce:	da42      	bge.n	800cc56 <__ieee754_sqrt+0x17a>
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	db40      	blt.n	800cc56 <__ieee754_sqrt+0x17a>
 800cbd4:	f102 0801 	add.w	r8, r2, #1
 800cbd8:	1a9b      	subs	r3, r3, r2
 800cbda:	458e      	cmp	lr, r1
 800cbdc:	bf88      	it	hi
 800cbde:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cbe2:	eba1 010e 	sub.w	r1, r1, lr
 800cbe6:	4464      	add	r4, ip
 800cbe8:	4642      	mov	r2, r8
 800cbea:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800cbee:	3f01      	subs	r7, #1
 800cbf0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800cbf4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cbf8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cbfc:	d1dc      	bne.n	800cbb8 <__ieee754_sqrt+0xdc>
 800cbfe:	4319      	orrs	r1, r3
 800cc00:	d01b      	beq.n	800cc3a <__ieee754_sqrt+0x15e>
 800cc02:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800cc88 <__ieee754_sqrt+0x1ac>
 800cc06:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800cc8c <__ieee754_sqrt+0x1b0>
 800cc0a:	e9da 0100 	ldrd	r0, r1, [sl]
 800cc0e:	e9db 2300 	ldrd	r2, r3, [fp]
 800cc12:	f7f3 fb05 	bl	8000220 <__aeabi_dsub>
 800cc16:	e9da 8900 	ldrd	r8, r9, [sl]
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	4640      	mov	r0, r8
 800cc20:	4649      	mov	r1, r9
 800cc22:	f7f3 ff31 	bl	8000a88 <__aeabi_dcmple>
 800cc26:	b140      	cbz	r0, 800cc3a <__ieee754_sqrt+0x15e>
 800cc28:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cc2c:	e9da 0100 	ldrd	r0, r1, [sl]
 800cc30:	e9db 2300 	ldrd	r2, r3, [fp]
 800cc34:	d111      	bne.n	800cc5a <__ieee754_sqrt+0x17e>
 800cc36:	3601      	adds	r6, #1
 800cc38:	463c      	mov	r4, r7
 800cc3a:	1072      	asrs	r2, r6, #1
 800cc3c:	0863      	lsrs	r3, r4, #1
 800cc3e:	07f1      	lsls	r1, r6, #31
 800cc40:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800cc44:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800cc48:	bf48      	it	mi
 800cc4a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800cc4e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800cc52:	4618      	mov	r0, r3
 800cc54:	e756      	b.n	800cb04 <__ieee754_sqrt+0x28>
 800cc56:	4690      	mov	r8, r2
 800cc58:	e7be      	b.n	800cbd8 <__ieee754_sqrt+0xfc>
 800cc5a:	f7f3 fae3 	bl	8000224 <__adddf3>
 800cc5e:	e9da 8900 	ldrd	r8, r9, [sl]
 800cc62:	4602      	mov	r2, r0
 800cc64:	460b      	mov	r3, r1
 800cc66:	4640      	mov	r0, r8
 800cc68:	4649      	mov	r1, r9
 800cc6a:	f7f3 ff03 	bl	8000a74 <__aeabi_dcmplt>
 800cc6e:	b120      	cbz	r0, 800cc7a <__ieee754_sqrt+0x19e>
 800cc70:	1ca0      	adds	r0, r4, #2
 800cc72:	bf08      	it	eq
 800cc74:	3601      	addeq	r6, #1
 800cc76:	3402      	adds	r4, #2
 800cc78:	e7df      	b.n	800cc3a <__ieee754_sqrt+0x15e>
 800cc7a:	1c63      	adds	r3, r4, #1
 800cc7c:	f023 0401 	bic.w	r4, r3, #1
 800cc80:	e7db      	b.n	800cc3a <__ieee754_sqrt+0x15e>
 800cc82:	bf00      	nop
 800cc84:	7ff00000 	.word	0x7ff00000
 800cc88:	200002c8 	.word	0x200002c8
 800cc8c:	200002c0 	.word	0x200002c0

0800cc90 <floor>:
 800cc90:	ec51 0b10 	vmov	r0, r1, d0
 800cc94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc9c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800cca0:	2e13      	cmp	r6, #19
 800cca2:	460c      	mov	r4, r1
 800cca4:	4605      	mov	r5, r0
 800cca6:	4680      	mov	r8, r0
 800cca8:	dc34      	bgt.n	800cd14 <floor+0x84>
 800ccaa:	2e00      	cmp	r6, #0
 800ccac:	da17      	bge.n	800ccde <floor+0x4e>
 800ccae:	a332      	add	r3, pc, #200	@ (adr r3, 800cd78 <floor+0xe8>)
 800ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb4:	f7f3 fab6 	bl	8000224 <__adddf3>
 800ccb8:	2200      	movs	r2, #0
 800ccba:	2300      	movs	r3, #0
 800ccbc:	f7f3 fef8 	bl	8000ab0 <__aeabi_dcmpgt>
 800ccc0:	b150      	cbz	r0, 800ccd8 <floor+0x48>
 800ccc2:	2c00      	cmp	r4, #0
 800ccc4:	da55      	bge.n	800cd72 <floor+0xe2>
 800ccc6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ccca:	432c      	orrs	r4, r5
 800cccc:	2500      	movs	r5, #0
 800ccce:	42ac      	cmp	r4, r5
 800ccd0:	4c2b      	ldr	r4, [pc, #172]	@ (800cd80 <floor+0xf0>)
 800ccd2:	bf08      	it	eq
 800ccd4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ccd8:	4621      	mov	r1, r4
 800ccda:	4628      	mov	r0, r5
 800ccdc:	e023      	b.n	800cd26 <floor+0x96>
 800ccde:	4f29      	ldr	r7, [pc, #164]	@ (800cd84 <floor+0xf4>)
 800cce0:	4137      	asrs	r7, r6
 800cce2:	ea01 0307 	and.w	r3, r1, r7
 800cce6:	4303      	orrs	r3, r0
 800cce8:	d01d      	beq.n	800cd26 <floor+0x96>
 800ccea:	a323      	add	r3, pc, #140	@ (adr r3, 800cd78 <floor+0xe8>)
 800ccec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf0:	f7f3 fa98 	bl	8000224 <__adddf3>
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	f7f3 feda 	bl	8000ab0 <__aeabi_dcmpgt>
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	d0eb      	beq.n	800ccd8 <floor+0x48>
 800cd00:	2c00      	cmp	r4, #0
 800cd02:	bfbe      	ittt	lt
 800cd04:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800cd08:	4133      	asrlt	r3, r6
 800cd0a:	18e4      	addlt	r4, r4, r3
 800cd0c:	ea24 0407 	bic.w	r4, r4, r7
 800cd10:	2500      	movs	r5, #0
 800cd12:	e7e1      	b.n	800ccd8 <floor+0x48>
 800cd14:	2e33      	cmp	r6, #51	@ 0x33
 800cd16:	dd0a      	ble.n	800cd2e <floor+0x9e>
 800cd18:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800cd1c:	d103      	bne.n	800cd26 <floor+0x96>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	460b      	mov	r3, r1
 800cd22:	f7f3 fa7f 	bl	8000224 <__adddf3>
 800cd26:	ec41 0b10 	vmov	d0, r0, r1
 800cd2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd2e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800cd32:	f04f 37ff 	mov.w	r7, #4294967295
 800cd36:	40df      	lsrs	r7, r3
 800cd38:	4207      	tst	r7, r0
 800cd3a:	d0f4      	beq.n	800cd26 <floor+0x96>
 800cd3c:	a30e      	add	r3, pc, #56	@ (adr r3, 800cd78 <floor+0xe8>)
 800cd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd42:	f7f3 fa6f 	bl	8000224 <__adddf3>
 800cd46:	2200      	movs	r2, #0
 800cd48:	2300      	movs	r3, #0
 800cd4a:	f7f3 feb1 	bl	8000ab0 <__aeabi_dcmpgt>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	d0c2      	beq.n	800ccd8 <floor+0x48>
 800cd52:	2c00      	cmp	r4, #0
 800cd54:	da0a      	bge.n	800cd6c <floor+0xdc>
 800cd56:	2e14      	cmp	r6, #20
 800cd58:	d101      	bne.n	800cd5e <floor+0xce>
 800cd5a:	3401      	adds	r4, #1
 800cd5c:	e006      	b.n	800cd6c <floor+0xdc>
 800cd5e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800cd62:	2301      	movs	r3, #1
 800cd64:	40b3      	lsls	r3, r6
 800cd66:	441d      	add	r5, r3
 800cd68:	4545      	cmp	r5, r8
 800cd6a:	d3f6      	bcc.n	800cd5a <floor+0xca>
 800cd6c:	ea25 0507 	bic.w	r5, r5, r7
 800cd70:	e7b2      	b.n	800ccd8 <floor+0x48>
 800cd72:	2500      	movs	r5, #0
 800cd74:	462c      	mov	r4, r5
 800cd76:	e7af      	b.n	800ccd8 <floor+0x48>
 800cd78:	8800759c 	.word	0x8800759c
 800cd7c:	7e37e43c 	.word	0x7e37e43c
 800cd80:	bff00000 	.word	0xbff00000
 800cd84:	000fffff 	.word	0x000fffff

0800cd88 <_init>:
 800cd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd8a:	bf00      	nop
 800cd8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd8e:	bc08      	pop	{r3}
 800cd90:	469e      	mov	lr, r3
 800cd92:	4770      	bx	lr

0800cd94 <_fini>:
 800cd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd96:	bf00      	nop
 800cd98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd9a:	bc08      	pop	{r3}
 800cd9c:	469e      	mov	lr, r3
 800cd9e:	4770      	bx	lr
